acir_tests/flows/prove_then_verify_tube.sh: # TODO(https://github.com/AztecProtocol/barretenberg/issues/1252): deprecate in favor of normal proving flow
✅ /workspaces/aztec-packages/barretenberg/acir_tests/bootstrap.sh:    # TODO(https://github.com/AztecProtocol/barretenberg/issues/1108): problem regardless the proof system used
acir_tests/bootstrap.sh:      # TODO(https://github.com/AztecProtocol/barretenberg/issues/1253) Deprecate command and construct TOML (e.g., via yq or via conversion from a JSON)
acir_tests/bootstrap.sh:# TODO(https://github.com/AztecProtocol/barretenberg/issues/1254): More complete testing, including failure tests
acir_tests/bootstrap.sh:  # TODO(https://github.com/AztecProtocol/barretenberg/issues/1265) fix acir benchmarking
✅ /workspaces/aztec-packages/barretenberg/acir_tests/run_acir_tests.sh:# TODO(https://github.com/AztecProtocol/barretenberg/issues/1108): problem regardless the proof system used
acir_tests/run_acir_tests.sh:    # TODO(https://github.com/AztecProtocol/barretenberg/issues/1164): Resolve this
cpp/src/barretenberg/bb/main.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1257): Remove unused/seemingly unnecessary flags.
cpp/src/barretenberg/bb/main.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1258): Improve defaults.
cpp/src/barretenberg/benchmark/protogalaxy_bench/protogalaxy.bench.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/938): Parallelize this loop
cpp/src/barretenberg/benchmark/protogalaxy_rounds_bench/protogalaxy_rounds.bench.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/938): Parallelize this loop, also extend to more than
cpp/src/barretenberg/benchmark/ultra_bench/ultra_honk_rounds.bench.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/761) benchmark both sparse and dense circuits
FORMAT cpp/src/barretenberg/benchmark/ultra_bench/ultra_plonk_rounds.bench.cpp:        // TODO: https://github.com/AztecProtocol/barretenberg/issues/761 benchmark both sparse and dense circuits
cpp/src/barretenberg/crypto/ecdsa/ecdsa.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/659)
cpp/src/barretenberg/crypto/schnorr/schnorr.tcc:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/895): securely erase `k`
cpp/src/barretenberg/dsl/acir_format/avm_recursion_constraint.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/996): investigate whether assert_equal on public
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/dsl/acir_format/ivc_recursion_constraint.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1148): logic in this file is incomplete. See issue for
cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp:        /*honk_recursion=*/0); // TODO(https://github.com/AztecProtocol/barretenberg/issues/1013):
cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/994): Run all tests
cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp:        test_name, /*honk_recursion=*/0); // TODO(https://github.com/AztecProtocol/barretenberg/issues/1013):
cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp:        test_name, /*honk_recursion=*/0); // TODO(https://github.com/AztecProtocol/barretenberg/issues/1013):
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/816): The initialization of the witness indices a,b,c
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/816): May need to adjust the pt.a == witness_idx
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/816): The initialization of the witness indices a,b,c
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/816): May need to adjust the quad.a == witness_idx
cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1074): Eventually arg.proof_type will
cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/927): Move to using just
cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/927): Move to using just
cpp/src/barretenberg/dsl/acir_format/acir_to_constraint_buf.cpp:                                   honk_recursion); // TODO(https://github.com/AztecProtocol/barretenberg/issues/1013):
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_format.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/817): disable these for MegaHonk for now since we're
cpp/src/barretenberg/dsl/acir_format/block_constraint.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1165): is_kernel must be known prior to this stage
cpp/src/barretenberg/dsl/acir_format/recursion_constraint.hpp: * TODO(https://github.com/AztecProtocol/barretenberg/issues/996): Create similar comments for Honk.
cpp/src/barretenberg/dsl/acir_format/honk_recursion_constraint.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/996): investigate whether assert_equal on public inputs
cpp/src/barretenberg/dsl/acir_format/acir_format.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1161) Refactor this function
cpp/src/barretenberg/dsl/acir_format/acir_format.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1161) Refactor this function
cpp/src/barretenberg/dsl/acir_proofs/honk_zk_contract.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1098): memcpy
cpp/src/barretenberg/dsl/acir_proofs/honk_zk_contract.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1098): memcpy
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/dsl/acir_proofs/c_bind.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1116): remove manual setting of is_kernel once databus
cpp/src/barretenberg/ecc/fields/field_declarations.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/851): We should move away from this hack by
cpp/src/barretenberg/ecc/fields/field_declarations.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/851): Unify these APIs.
cpp/src/barretenberg/ecc/fields/field_impl.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1166)
cpp/src/barretenberg/ecc/groups/affine_element.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/909): These tests are not typed for no reason
cpp/src/barretenberg/ecc/groups/element.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/908) point at inifinty isn't handled
cpp/src/barretenberg/ecc/scalar_multiplication/sorted_msm.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1130): This class is largely superceded by the newer
cpp/src/barretenberg/ecc/scalar_multiplication/scalar_multiplication.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1135): Optimize so it's only scalars.size().
cpp/src/barretenberg/ecc/scalar_multiplication/scalar_multiplication.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1135): We don't need start_index more scalars here.
cpp/src/barretenberg/ecc/scalar_multiplication/scalar_multiplication.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1135): We don't need start_index more scalars here.
cpp/src/barretenberg/honk/proof_system/logderivative_library.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/940): avoid get_row if possible.
cpp/src/barretenberg/numeric/uintx/uintx_impl.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1051): investigate, why)
cpp/src/barretenberg/plonk/composer/standard_composer.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/392): Composer type
cpp/src/barretenberg/plonk/composer/ultra_composer.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/392): Composer type
cpp/src/barretenberg/polynomials/univariate.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/714) Try out std::valarray?
cpp/src/barretenberg/polynomials/barycentric.hpp:/* TODO(https://github.com/AztecProtocol/barretenberg/issues/10): This could or should be improved in various ways. In
cpp/src/barretenberg/polynomials/barycentric.hpp: * @todo: TODO(https://github.com/AztecProtocol/barretenberg/issues/713) Optimize with lookup tables?
cpp/src/barretenberg/polynomials/gate_separator.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/864): This computation is asymtotically slow as it
cpp/src/barretenberg/polynomials/polynomial.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1113): Optimizing based on actual sizes would involve using
cpp/src/barretenberg/polynomials/polynomial.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1113): Optimizing based on actual sizes would involve using
cpp/src/barretenberg/polynomials/polynomial.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1096): Make this a Polynomial with
cpp/src/barretenberg/solidity_helpers/honk_proof_gen.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1227)
cpp/src/barretenberg/stdlib/hash/keccak/keccak.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/662)
cpp/src/barretenberg/stdlib/hash/keccak/keccak.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/662)
cpp/src/barretenberg/stdlib/hash/poseidon2/poseidon2_permutation.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/879): dummy gate required since the last external gate
cpp/src/barretenberg/stdlib/hash/poseidon2/poseidon2_permutation.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/879): dummy gate required since the last internal gate
cpp/src/barretenberg/stdlib/primitives/address/address.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/376): Establish whether this type should be here at all.
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/850): audit the evaluate_linear_identity function
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/879): dummy necessary for preceeding big add
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp: * @todo TODO(https://github.com/AztecProtocol/barretenberg/issues/1014) Improve the efficiency of this function.
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp: * @todo TODO(https://github.com/AztecProtocol/barretenberg/issues/1015) Security of this (as part of the whole
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp: * @todo TODO(https://github.com/AztecProtocol/barretenberg/issues/1014) Improve the efficiency of this function.
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp: * @todo TODO(https://github.com/AztecProtocol/barretenberg/issues/1015) Security of this (as part of the whole
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/660): null context _should_ mean that both are
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/999): get native values efficiently (i.e. if u512
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/677)
cpp/src/barretenberg/stdlib/primitives/bigfield/bigfield_impl.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/998): Something is fishy here
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_batch_mul.hpp: * @todo : TODO(https://github.com/AztecProtocol/barretenberg/issues/1001) when we nuke standard and turbo plonk we
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_edgecase_handling.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1002): if both point and scalar are constant,
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1043): this test will fail with num_points is 1
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.test.cpp:        GTEST_SKIP() << "https://github.com/AztecProtocol/barretenberg/issues/707";
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.test.cpp:        GTEST_SKIP() << "https://github.com/AztecProtocol/barretenberg/issues/707";
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.test.cpp:        GTEST_SKIP() << "https://github.com/AztecProtocol/barretenberg/issues/707";
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.test.cpp:        GTEST_SKIP() << "https://github.com/AztecProtocol/barretenberg/issues/707";
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.test.cpp:        GTEST_SKIP() << "https://github.com/AztecProtocol/barretenberg/issues/707";
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.test.cpp:        GTEST_SKIP() << "https://github.com/AztecProtocol/barretenberg/issues/707";
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_impl.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/657): This function is untested
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_impl.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/971): This will fail when the two elements are the
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_impl.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/663)
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_goblin.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/707) max_num_bits is unused; could implement and
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.hpp:        requires(IsNotMegaBuilder<Builder>) // TODO(https://github.com/AztecProtocol/barretenberg/issues/707)
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup.hpp:        requires(IsNotMegaBuilder<Builder>) // TODO(https://github.com/AztecProtocol/barretenberg/issues/707)
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_nafs.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/664)
cpp/src/barretenberg/stdlib/primitives/biggroup/biggroup_nafs.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/665)
cpp/src/barretenberg/stdlib/primitives/byte_array/byte_array.cpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1082): Addition could be optimized
cpp/src/barretenberg/stdlib/primitives/field/field_conversion.cpp: * TODO(https://github.com/AztecProtocol/barretenberg/issues/850): audit this function more carefully
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/field/array.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/666):
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/primitives/field/array.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/666):
cpp/src/barretenberg/stdlib/primitives/field/field_conversion.hpp: * @todo https://github.com/AztecProtocol/barretenberg/issues/1065  optimise validate_on_curve and check points
cpp/src/barretenberg/stdlib/primitives/field/field.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/446): optimize by allowing smaller expoonent
cpp/src/barretenberg/stdlib/primitives/field/field.cpp: *It should make the circuits smaller. https://github.com/AztecProtocol/barretenberg/issues/1052
cpp/src/barretenberg/stdlib/primitives/field/field.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1039): Use of this function in ZM verifier is insecure.
cpp/src/barretenberg/stdlib/primitives/group/cycle_group.test.cpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1020): Re-enable these.
cpp/src/barretenberg/stdlib/primitives/group/cycle_group.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1067): This ASSERT is missing in the constructor but
cpp/src/barretenberg/stdlib/primitives/group/cycle_group.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1022): ensure lo and hi are in bb::fr modulus not
cpp/src/barretenberg/stdlib/primitives/group/cycle_group.cpp: * @todo (https://github.com/AztecProtocol/barretenberg/issues/1016): Optimise this method
cpp/src/barretenberg/stdlib/primitives/plookup/plookup.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/953): Re-enable these tests
cpp/src/barretenberg/stdlib/primitives/databus/databus.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/1138): Resolve issues around default commitment value
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/client_ivc_verifier/client_ivc_recursive_verifier.cpp: * @todo (https://github.com/AztecProtocol/barretenberg/issues/934):  Add logic for accumulating the pairing points
cpp/src/barretenberg/stdlib/client_ivc_verifier/client_ivc_recursive_verifier.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1069): fix this by taking it from the output instead of
cpp/src/barretenberg/stdlib/client_ivc_verifier/client_ivc_recursive_verifier.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1069): fix this by taking it from the output
cpp/src/barretenberg/stdlib/eccvm_verifier/ecc_relation_consistency.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/997): Actually create consistency tests for ECCVM relations
cpp/src/barretenberg/stdlib/eccvm_verifier/eccvm_recursive_verifier.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1040): Extract circuit size as BF (field_t) then
cpp/src/barretenberg/stdlib/eccvm_verifier/eccvm_recursive_verifier.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/991): switch recursive verifiers to StdlibProof
cpp/src/barretenberg/stdlib/goblin_verifier/goblin_recursive_verifier.hpp:     * @todo(https://github.com/AztecProtocol/barretenberg/issues/1021): The values returned by the recursive verifiers
cpp/src/barretenberg/stdlib/goblin_verifier/goblin_recursive_verifier.hpp:     * @todo(https://github.com/AztecProtocol/barretenberg/issues/991): The GoblinProof should aleady be a stdlib proof
cpp/src/barretenberg/stdlib/goblin_verifier/goblin.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/787) Expand these tests.
cpp/src/barretenberg/stdlib/goblin_verifier/goblin_recursion.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/787) Expand these tests.
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/goblin_verifier/goblin_recursive_verifier.cpp: * @todo https://github.com/AztecProtocol/barretenberg/issues/934: Add logic for accumulating the pairing points
cpp/src/barretenberg/stdlib/goblin_verifier/goblin_recursive_verifier.cpp:    // (see https://github.com/AztecProtocol/barretenberg/issues/991)
cpp/src/barretenberg/stdlib/goblin_verifier/merge_verifier.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/800) Testing cleanup
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/goblin_verifier/merge_verifier.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1024): Ultra fails, possibly due to repeated points in
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/honk_verifier/ipa_accumulator.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1009): Make the us vector an array after we constify eccvm
cpp/src/barretenberg/stdlib/honk_verifier/ultra_recursive_verifier.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1182): Handle in ProofSurgeon.
cpp/src/barretenberg/stdlib/honk_verifier/ultra_recursive_verifier.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/995): generate this challenge properly.
cpp/src/barretenberg/stdlib/honk_verifier/ultra_recursive_verifier.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/995): generate recursion separator challenge properly.
cpp/src/barretenberg/stdlib/plonk_recursion/aggregation_state/aggregation_state.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/911): These are pairing points extracted from a valid
cpp/src/barretenberg/stdlib/plonk_recursion/aggregation_state/aggregation_state.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/911): These are pairing points extracted from a valid
cpp/src/barretenberg/stdlib/protogalaxy_verifier/protogalaxy_recursive_verifier.test.cpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/744): make testing utility with functionality shared
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/protogalaxy_verifier/protogalaxy_recursive_verifier.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/844): Fold the recursive folding verifier in
cpp/src/barretenberg/stdlib/transcript/transcript.test.cpp: * @todo(https://github.com/AztecProtocol/barretenberg/issues/1064)  Add more transcript tests for both curves
cpp/src/barretenberg/stdlib/transcript/transcript.test.cpp: * @todo(https://github.com/AztecProtocol/barretenberg/issues/1064)  Add more transcript tests for both curves
cpp/src/barretenberg/stdlib/translator_vm_verifier/translator_recursive_flavor.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/990): Establish whether mini_circuit_size pattern is
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib/translator_vm_verifier/translator_recursive_verifier.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/986): Ensure the translation is also recursively
cpp/src/barretenberg/stdlib/translator_vm_verifier/translator_recursive_verifier.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/980): Add failing tests after we have a proper shared
cpp/src/barretenberg/transcript/transcript.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1226): univariates should also be logged
cpp/src/barretenberg/transcript/transcript.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/832): investigate why
cpp/src/barretenberg/circuit_checker/circuit_checker.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/928): Reorganize
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/circuit_checker/ultra_circuit_checker.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/870): Currently we check all relations for each block.
cpp/src/barretenberg/client_ivc/client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1069): Do proper aggregation with merge recursive
cpp/src/barretenberg/client_ivc/client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1048): link these properly, likely insecure
cpp/src/barretenberg/client_ivc/client_ivc.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/911): We require goblin ops to be added to the
cpp/src/barretenberg/commitment_schemes/gemini/gemini.hpp:     * @note TODO(https://github.com/AztecProtocol/barretenberg/issues/1223): There are certain operations herein that
cpp/src/barretenberg/commitment_schemes/gemini/gemini.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/commitment_schemes/gemini/gemini_impl.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1159): Decouple constants from primitives.
cpp/src/barretenberg/commitment_schemes/gemini/gemini_impl.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1194). Handle edge cases in PCS
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1150): Hash more things here.
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1159): Decouple constant from IPA.
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1140): Use batch_invert.
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:     * @todo (https://github.com/AztecProtocol/barretenberg/issues/1018): simulator should use the native verify
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1144): need checks here on poly_length.
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1144): Add proper constraints for taking the log of a field_t.
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/912): Return the proper VerifierAccumulator once
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:     * @todo (https://github.com/AztecProtocol/barretenberg/issues/1018): simulator should use the native verify
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1144): need checks here on poly_length.
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/commitment_schemes/ipa/ipa.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/commitment_schemes/ipa/ipa.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1159): Decouple constant from IPA.
cpp/src/barretenberg/commitment_schemes/shplonk/shplemini.hpp: * TODO (https://github.com/AztecProtocol/barretenberg/issues/1084) Reduce the size of batch_mul further by eliminating
cpp/src/barretenberg/commitment_schemes/shplonk/shplemini.hpp:        bool* consistency_checked = nullptr, // TODO(https://github.com/AztecProtocol/barretenberg/issues/1191).
cpp/src/barretenberg/commitment_schemes/shplonk/shplemini.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1159): Decouple constants from primitives.
cpp/src/barretenberg/commitment_schemes/shplonk/shplemini.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure!
cpp/src/barretenberg/commitment_schemes/shplonk/shplemini.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1151) Avoid erasing vector elements.
cpp/src/barretenberg/commitment_schemes/shplonk/shplemini.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure!
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:     * @todo https://github.com/AztecProtocol/barretenberg/issues/1030: document concatenation trick
cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1159): Decouple constants from primitives.
cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1039): pow may not add proper constraints
cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1039): is it kosher to reassign like this?
cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1144): Add proper constraints for taking the log of
cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1039): pow may not add proper constraints
cpp/src/barretenberg/commitment_schemes/zeromorph/zeromorph.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1039): Connect witness log_N to circuit size
cpp/src/barretenberg/commitment_schemes/commitment_key.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1131): Peak memory usage could be improved by
cpp/src/barretenberg/commitment_schemes/small_subgroup_ipa/small_subgroup_ipa.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1194). Handle edge cases in PCS
cpp/src/barretenberg/commitment_schemes/small_subgroup_ipa/small_subgroup_ipa.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1186). Insecure pattern.
cpp/src/barretenberg/commitment_schemes/small_subgroup_ipa/small_subgroup_ipa.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1197)
cpp/src/barretenberg/commitment_schemes/small_subgroup_ipa/small_subgroup_ipa.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1186). Insecure pattern.
cpp/src/barretenberg/eccvm/eccvm_flavor.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/989): refine access specifiers in flavors, this is
cpp/src/barretenberg/eccvm/eccvm_flavor.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/788): Move to normal composition once comfortable
cpp/src/barretenberg/eccvm/eccvm_flavor.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1025): make it so that PCSs inform the crs of
cpp/src/barretenberg/eccvm/msm_builder.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/973): Reinstate multitreading?
cpp/src/barretenberg/eccvm/eccvm_prover.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/939): Remove redundancy between
cpp/src/barretenberg/eccvm/eccvm_prover.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1240) Structured Polynomials in
cpp/src/barretenberg/goblin/goblin.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/798) unique_ptr use is a hack
cpp/src/barretenberg/goblin/goblin.hpp:      // commitments (https://github.com/AztecProtocol/barretenberg/issues/871) which would otherwise appear in the
cpp/src/barretenberg/goblin/goblin.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/993): Some circuits (particularly on the first call
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/goblin/goblin.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/799): Ensure translation_evaluations are passed
cpp/src/barretenberg/goblin/mock_circuits.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/911): We require goblin ops to be added to the
cpp/src/barretenberg/goblin/mock_circuits.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/911): We require goblin ops to be added to the
cpp/src/barretenberg/plonk_honk_shared/composer/composer_lib.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1033): construct tables and counts at top of trace
cpp/src/barretenberg/plonk_honk_shared/composer/composer_lib.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1033): construct tables and counts at top of trace
cpp/src/barretenberg/plonk_honk_shared/composer/composer_lib.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1033): construct tables and counts at top of trace
cpp/src/barretenberg/plonk_honk_shared/library/grand_product_delta.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1158): Ensure correct construction of public input
cpp/src/barretenberg/plonk_honk_shared/library/grand_product_library.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/940):consider avoiding get_row if possible.
cpp/src/barretenberg/plonk_honk_shared/types/merkle_hash_type.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/426)
cpp/src/barretenberg/plonk_honk_shared/execution_trace/execution_trace_usage_tracker.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1152): should be able to use simply Range{ 0,
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/protogalaxy/folding_result.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/656): turn folding data into a struct
cpp/src/barretenberg/protogalaxy/protogalaxy_prover_internal.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1115): Iniitalize with first subrelation value to
cpp/src/barretenberg/protogalaxy/protogalaxy_prover_internal.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/745): make computation of perturbator more memory
cpp/src/barretenberg/protogalaxy/protogalaxy_prover_internal.hpp:     * @todo TODO(https://github.com/AztecProtocol/barretenberg/issues/751) Optimize memory
cpp/src/barretenberg/protogalaxy/protogalaxy_prover_internal.hpp:     * @todo (https://github.com/AztecProtocol/barretenberg/issues/968) Make combiner tests better
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/protogalaxy/protogalaxy_prover_internal.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/764): generalize the computation of vanishing
cpp/src/barretenberg/protogalaxy/protogalaxy_prover_impl.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1087): Verifier circuit for first IVC step is
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/protogalaxy/protogalaxy_prover_impl.hpp: * TODO(https://github.com/AztecProtocol/barretenberg/issues/764): Generalize the vanishing polynomial formula
cpp/src/barretenberg/protogalaxy/combiner.test.cpp:     * @todo (https://github.com/AztecProtocol/barretenberg/issues/968) Make combiner tests better
cpp/src/barretenberg/protogalaxy/combiner.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/780): Improve combiner tests to check more than the
cpp/src/barretenberg/protogalaxy/combiner_example_gen.py:# TODO(https://github.com/AztecProtocol/barretenberg/issues/760): Delete this?
cpp/src/barretenberg/protogalaxy/protogalaxy.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/938): Parallelize this loop
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/protogalaxy/protogalaxy_prover.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/878)
cpp/src/barretenberg/relations/ecc_vm/ecc_lookup_relation.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/750) Is this a bug?
cpp/src/barretenberg/relations/auxiliary_relation.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/757): Investigate optimizations.
cpp/src/barretenberg/relations/auxiliary_relation.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/757): If we sorted in
cpp/src/barretenberg/relations/databus_lookup_relation.hpp:                    // TODO(https://github.com/AztecProtocol/barretenberg/issues/940): avoid get_row if possible.
cpp/src/barretenberg/relations/logderiv_lookup_relation.hpp:                    // TODO(https://github.com/AztecProtocol/barretenberg/issues/940): avoid get_row if possible.
cpp/src/barretenberg/relations/relation_types.hpp: * @todo TODO(https://github.com/AztecProtocol/barretenberg/issues/759): Optimize
cpp/src/barretenberg/stdlib_circuit_builders/op_queue/ecc_op_queue.hpp: * TODO(https://github.com/AztecProtocol/barretenberg/issues/1267): consider possible efficiency improvements
cpp/src/barretenberg/stdlib_circuit_builders/op_queue/ecc_op_queue.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/905): Can remove this with better handling of scalar
cpp/src/barretenberg/stdlib_circuit_builders/op_queue/ecc_ops_table.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/1267): multithread this functionality
cpp/src/barretenberg/stdlib_circuit_builders/databus.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1138): A default value added to every databus column to
cpp/src/barretenberg/stdlib_circuit_builders/mega_circuit_builder.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1066): This function adds valid (but arbitrary) gates to
cpp/src/barretenberg/stdlib_circuit_builders/mega_circuit_builder.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1138): Consider default value.
cpp/src/barretenberg/stdlib_circuit_builders/mega_circuit_builder.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1066): This function adds valid (but arbitrary) gates to
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/mega_flavor.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1072): Unexpected jump in time to allocate all
cpp/src/barretenberg/stdlib_circuit_builders/mega_flavor.hpp:     * @todo TODO(https://github.com/AztecProtocol/barretenberg/issues/876)
cpp/src/barretenberg/stdlib_circuit_builders/mega_flavor.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/964): Clean the boilerplate up.
cpp/src/barretenberg/stdlib_circuit_builders/mega_flavor.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/877): Remove this Commitment template parameter
cpp/src/barretenberg/stdlib_circuit_builders/mega_recursive_flavor.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/983): Think about if these should be witnesses
cpp/src/barretenberg/stdlib_circuit_builders/mega_zk_flavor.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/877): Remove this Commitment template parameter
cpp/src/barretenberg/stdlib_circuit_builders/ultra_flavor.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/966): use inheritance
cpp/src/barretenberg/stdlib_circuit_builders/ultra_flavor.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/964): Clean the boilerplate
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_recursive_flavor.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/983): Think about if these should be witnesses
cpp/src/barretenberg/stdlib_circuit_builders/ultra_rollup_flavor.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/964): Clean the boilerplate
cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/879): This was formerly a single arithmetic gate. A
cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/879): Originally this was a single arithmetic gate.
cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/896): descrepency between above comment and the actual
cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/879): This method used to add a single arithmetic gate
cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/879): This was formerly a single arithmetic gate. A
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/870): reserve space in blocks here somehow?
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/870): reserve space in blocks here somehow?
cpp/src/barretenberg/stdlib_circuit_builders/ultra_circuit_builder.hpp:     * TODO(https://github.com/AztecProtocol/barretenberg/issues/875): This method may return an incorrect value before
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_rollup_recursive_flavor.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/983): Think about if these should be witnesses
cpp/src/barretenberg/stdlib_circuit_builders/ultra_keccak_flavor.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1094): Add aggregation to the verifier contract so the
cpp/src/barretenberg/stdlib_circuit_builders/ultra_keccak_flavor.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/964): Clean the boilerplate
cpp/src/barretenberg/stdlib_circuit_builders/circuit_simulator.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/961): Ensure we can execute the simulator in the context of
cpp/src/barretenberg/stdlib_circuit_builders/mock_circuits.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/902)
cpp/src/barretenberg/sumcheck/sumcheck.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1102): this makes the module not empty (note the comment
cpp/src/barretenberg/sumcheck/sumcheck.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1144): Add proper constraints for taking the log of
cpp/src/barretenberg/sumcheck/sumcheck.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/sumcheck/sumcheck.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1144): Add proper constraints for taking the log of
cpp/src/barretenberg/sumcheck/sumcheck.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/sumcheck/sumcheck.hpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1197)
cpp/src/barretenberg/sumcheck/sumcheck.hpp:                // TODO(https://github.com/AztecProtocol/barretenberg/issues/1114): insecure dummy_round derivation!
cpp/src/barretenberg/sumcheck/sumcheck_round.hpp:            // https://github.com/AztecProtocol/barretenberg/issues/998): Avoids the scenario where the assert_equal
cpp/src/barretenberg/translator_vm/translator_circuit_builder.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1266): Evaluate whether this method can reuse existing data
cpp/src/barretenberg/translator_vm/translator_circuit_builder.fuzzer.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/869): composer generates the initial challenge through
cpp/src/barretenberg/translator_vm/translator_flavor.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/907)
cpp/src/barretenberg/translator_vm/translator_flavor.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/810)
cpp/src/barretenberg/translator_vm/translator_flavor.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/810)
cpp/src/barretenberg/ultra_honk/mega_honk.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1240) Structured Polynomials in
cpp/src/barretenberg/ultra_honk/mega_honk.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1240) Structured Polynomials in
cpp/src/barretenberg/ultra_honk/mega_honk.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1158)
cpp/src/barretenberg/ultra_honk/mega_honk.test.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1240) Structured Polynomials in
cpp/src/barretenberg/ultra_honk/merge_prover.cpp: * TODO(https://github.com/AztecProtocol/barretenberg/issues/1267): consider possible efficiency improvements
cpp/src/barretenberg/ultra_honk/merge_prover.cpp: * TODO(https://github.com/AztecProtocol/barretenberg/issues/1270): connect [t_j] used herein those used in PG verifier
cpp/src/barretenberg/ultra_honk/decider_proving_key.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/914): q_arith is currently used
cpp/src/barretenberg/ultra_honk/decider_proving_key.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1193): can potentially improve memory footprint
cpp/src/barretenberg/ultra_honk/decider_proving_key.hpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/905): This is adding ops to the op queue but NOT to
cpp/src/barretenberg/ultra_honk/decider_proving_key.hpp:        // failure once https://github.com/AztecProtocol/barretenberg/issues/746 is resolved.
cpp/src/barretenberg/ultra_honk/ultra_transcript.test.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1182): Handle in ProofSurgeon.
cpp/src/barretenberg/vm/avm/generated/recursive_verifier.cpp:// TODO(#991): (see https://github.com/AztecProtocol/barretenberg/issues/991)
cpp/src/barretenberg/vm/avm/generated/recursive_verifier.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/995): generate this challenge properly.
cpp/src/barretenberg/trace_to_polynomials/trace_to_polynomials.cpp:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/398): implicit arithmetization/flavor consistency
✅ /workspaces/aztec-packages/barretenberg/cpp/src/barretenberg/ultra_vanilla_client_ivc/ultra_vanilla_client_ivc.cpp:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1176) Use UltraKeccakZKProver when it exists
cpp/src/barretenberg/ultra_vanilla_client_ivc/ultra_vanilla_client_ivc.test.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1177) Implement failure tests
cpp/src/barretenberg/api/gate_count.hpp: * TODO(https://github.com/AztecProtocol/barretenberg/issues/1126): split this into separate Plonk and Honk functions as
cpp/src/barretenberg/api/gate_count.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1180): Try to only do this when necessary.
cpp/src/barretenberg/api/prove_tube.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1025)
cpp/src/barretenberg/api/prove_tube.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1048): INSECURE - make this tube proof actually use
cpp/src/barretenberg/api/prove_tube.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1069): Add aggregation to goblin recursive verifiers.
cpp/src/barretenberg/api/api_ultra_plonk.cpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/811) adapt for grumpkin
cpp/src/barretenberg/api/api.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1256): Implement
cpp/src/barretenberg/api/api.hpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1255): deprecate or include as flag to `prove`
cpp/src/barretenberg/api/api_client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1163) set these dynamically
cpp/src/barretenberg/api/api_client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1162): Efficiently unify ACIR stack parsing
cpp/src/barretenberg/api/api_client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1163) set these dynamically
cpp/src/barretenberg/api/api_client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1163): Set these dynamically
cpp/src/barretenberg/api/api_client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1163) set these dynamically
cpp/src/barretenberg/api/api_client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1181): Use enum for honk_recursion.
cpp/src/barretenberg/api/api_client_ivc.cpp:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1163) set these dynamically
cpp/src/barretenberg/constants.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1046): Remove the need for const sized proofs
cpp/src/barretenberg/constants.hpp:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1193): potentially reenable for better memory performance
✅ /workspaces/aztec-packages/barretenberg/ts/src/barretenberg/index.ts:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1129): Do slab allocator initialization?
ts/src/crs/node/ignition_files_crs.ts:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/811): proper abstraction from Grumpkin which does not have g2
✅ /workspaces/aztec-packages/barretenberg/ts/src/examples/simple.rawtest.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/1129): Do slab allocator initialization?
✅ /workspaces/aztec-packages/barretenberg/ts/src/examples/simple.test.ts:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1129): Do slab allocator initialization?
ts/src/main.ts:// TODO(https://github.com/AztecProtocol/barretenberg/issues/1126): split this into separate Plonk and Honk functions as their gate count differs
ts/src/main.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/1248): Get rid of this call to avoid building the circuit twice.
ts/src/main.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/1126): use specific UltraPlonk function
ts/src/main.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/811): remove subgroupSizeOverride hack for goblin
✅ /workspaces/aztec-packages/barretenberg/ts/src/main.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/1129): Do slab allocator initialization?
ts/src/main.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/1248): Get rid of this call to avoid building the circuit twice.
ts/src/main.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/1126): use specific UltraHonk function
ts/src/main.ts:  // TODO(https://github.com/AztecProtocol/barretenberg/issues/811): remove subgroupSizeOverride hack for goblin
sol/src/honk/BaseHonkVerifier.sol:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1219)
sol/src/honk/Relations.sol:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/757): If we sorted in
sol/src/honk/Transcript.sol:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1098): memcpy
sol/src/honk/Transcript.sol:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1098): memcpy
sol/src/honk/Transcript.sol:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1234)
sol/src/honk/Transcript.sol:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1235)
sol/src/honk/Transcript.sol:    // TODO(https://github.com/AztecProtocol/barretenberg/issues/1236)
sol/src/honk/ZKTranscript.sol:            // TODO(https://github.com/AztecProtocol/barretenberg/issues/1098): memcpy
sol/src/honk/ZKTranscript.sol:        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1098): memcpy
