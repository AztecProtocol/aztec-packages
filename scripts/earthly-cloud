#!/usr/bin/env bash

# This script uses Earthly cloud satellites based on a runner type and hash of the GITHUB_ACTOR environment variable.
# ARM or x86 can be specified.
# Usage: earthly-cloud <runner type> <architecture> [options]
# Arguments:
#   runner type: The type of runner, e.g., 'build' or 'bench'.
#   architecture: The target architecture, e.g., 'arm' or 'x86'.
set -eu -o pipefail

# Check if at least two arguments are passed
if [ $# -lt 2 ]; then
    echo "Error: Insufficient arguments provided."
    echo "Usage: $0 <runner type> <architecture> [options]"
    exit 1
fi

RUNNER_TYPE=$1
ARCH=$2
shift 2

if [ "$ARCH" == "arm" ]; then
  PLATFORM=linux/arm64
elif [ "$ARCH" == "x86" ]; then
  PLATFORM=linux/amd64
fi

# default sizes for build type
if [ "$RUNNER_TYPE" == "build" ] ; then
  SIZE=4xlarge
  NUMBER_OF_RUNNERS=2
  if [ "$ARCH" = arm ] ; then
    NUMBER_OF_RUNNERS=1
  fi
  # TODO why cant we set this??
  # MAX_PARALLELISM=8
elif [ "$RUNNER_TYPE" == "bench" ] ; then
  SIZE=2xlarge
  NUMBER_OF_RUNNERS=1
  # MAX_PARALLELISM=1
elif [ "$RUNNER_TYPE" == "test" ] ; then
  SIZE=4xlarge
  NUMBER_OF_RUNNERS=1
fi

# Flag to determine if -i is present
INTERACTIVE=false
# Check for -i flag in the arguments
for arg in "$@"; do
    if [ "$arg" == "-i" ] || [ "$arg" == "--interactive" ]; then
        INTERACTIVE=true
        break
    fi
done

# we hash our GITHUB_ACTOR to pick from 1 to NUMBER_RUNNERS (inclusive) as RUNNER_ID
# this means everyone gets assigned to runners based on their user group
NAME_HASH=$(cksum <<< "$GITHUB_ACTOR" | cut -f 1 -d ' ')
RUNNER_ID=$(($NAME_HASH % $NUMBER_OF_RUNNERS + 1))
RUNNER=$RUNNER_TYPE-$RUNNER_ID-$ARCH
earthly sat --org aztec launch --size $SIZE --platform $PLATFORM $RUNNER || true
# --remote-cache=aztecprotocol/cache:bb-native-tests 
EARTHLY_FLAGS="-P --no-output --org aztec --sat $RUNNER"
OUTPUT_FILE=$(mktemp)
# capture output to handle earthly edge cases
if $INTERACTIVE ; then
  # don't play nice with tee if interactive
  earthly $EARTHLY_FLAGS $@
elif ! earthly $EARTHLY_FLAGS $@ 2>&1 | tee $OUTPUT_FILE >&2 ; then
  # we try earthly once, capturing output
  # if we get one of our (unfortunate) known failures, handle retries
  # TODO potentially handle other intermittent errors here
  if grep 'failed to get edge: inconsistent graph state' $OUTPUT_FILE >/dev/null ; then
    # TODO when earthly is overloaded we sometimes get 
    # 'failed to solve: failed to get edge: inconsistent graph state'
    echo "Got 'inconsistent graph state'. Restarting earthly. See https://github.com/earthly/earthly/issues/2454'"
    earthly $EARTHLY_FLAGS $@
    # TODO handle
    # could not configure satellite: failed getting org: unable to authenticate: failed to execute login request: Post 
  else
    # otherwise, propagate error
    exit 1
  fi
fi
