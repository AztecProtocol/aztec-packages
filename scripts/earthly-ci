#!/usr/bin/env bash
# A wrapper for Earthly that is meant to catch signs of known intermittent failures and continue.
# The silver lining is if Earthly does crash, the cache can pick up the build.
if [ "${CI:-0}" = 0 ]; then
  # only use earthly-ci if local not set.
  echo "Running earthly-local because CI is not 1."
  exec "$(dirname $0)/earthly-local" $@
fi
set -eu -o pipefail

# earthly settings
export EARTHLY_ALLOW_PRIVILEGED=true
export EARTHLY_NO_BUILDKIT_UPDATE=true
# we make our own groupings, ignore earthly's
export GITHUB_ACTIONS=false
export FORCE_COLOR=1
export EARTHLY_CONFIG=$(git rev-parse --show-toplevel)/scripts/earthly-ci-config.yml

# Run earthly with our necesary secrets initialized
# AWS credentials can be blank, however we will not use the S3 cache at all if so.
EARTHLY_ARGS=""

earthly_exit_code=254
function run_earthly {
  set +x
  # We abuse secrets with regular config that we don't want to alter the cache (see https://docs.earthly.dev/docs/guides/secrets)
  # we do not run with minio in CI
  earthly --secret AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-} \
          --secret AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-} \
          --secret S3_BUILD_CACHE_MINIO_URL="" \
          --secret S3_BUILD_CACHE_UPLOAD="true" \
          --secret S3_BUILD_CACHE_DOWNLOAD="true" \
          --secret AZTEC_BOT_COMMENTER_GITHUB_TOKEN=${AZTEC_BOT_GITHUB_TOKEN:-} \
          $EARTHLY_ARGS \
          $@ \
          --GITHUB_RUN_URL="${GITHUB_RUN_URL:-}"
  earthly_exit_code=$?
  exit $earthly_exit_code
}

# Handle earthly commands and retries
ATTEMPT_COUNT=0
MAX_ATTEMPTS=3
OUTPUT_FILE=.earthly-ci.log
while [ $ATTEMPT_COUNT -lt $MAX_ATTEMPTS ]; do
  if run_earthly $@ 2>&1 | tee $OUTPUT_FILE >&2 ; then
    exit 0  # Success, exit the script
  else
    # Increment attempt counter
    ATTEMPT_COUNT=$((ATTEMPT_COUNT + 1))

    # Check the output for specific errors
    if grep 'failed to get edge: inconsistent graph state' $OUTPUT_FILE >/dev/null \
      || grep 'failed to get state for index' $OUTPUT_FILE >/dev/null \
      || grep 'Error: pull ping error: pull ping response' $OUTPUT_FILE >/dev/null \
      || grep '================================= System Info ==================================' $OUTPUT_FILE >/dev/null \
      || grep 'Error response from daemon: removal of container earthly-buildkitd is already in progress: exit status 1' $OUTPUT_FILE >/dev/null \
      || grep 'dial unix /run/buildkit/buildkitd.sock' $OUTPUT_FILE >/dev/null \
      || grep 'The container name "/earthly-buildkitd" is already in use by container' $OUTPUT_FILE >/dev/null \
      || grep 'status 125: docker: Error response from daemon: layer does not exist.' $OUTPUT_FILE >/dev/null \
      || grep 'could not start container "earthly-buildkitd"' $OUTPUT_FILE >/dev/null \
      || grep 'build new buildkitd client:' $OUTPUT_FILE >/dev/null \
      || grep 'could not determine buildkit address - is Docker or Podman running?' $OUTPUT_FILE >/dev/null \
      || grep 'please make sure the URL is valid, and Docker 18.09 or later is installed on the remote host' $OUTPUT_FILE >/dev/null \
      || grep 'docker: failed to register layer' $OUTPUT_FILE >/dev/null \
      || grep 'docker: error during connect:' $OUTPUT_FILE >/dev/null \
      || grep 'docker: failed to write digest data' >/dev/null \
      || grep 'docker: unexpected EOF' $OUTPUT_FILE >/dev/null; then
      # try to wait it out
      echo "earthly-ci: recoverable error, waiting 20 seconds"
      sleep 20
    else
      exit $earthly_exit_code
    fi
  fi
done
