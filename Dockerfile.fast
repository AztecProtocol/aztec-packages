# Builds aztec image quickly, bootstrapping from S3 cache.
# TODO: make this fallback to a normal build. Currently the idea is
# to make sure this is productive in the cache case for *yarn-project* oriented workflow.
# If other components are iterated on, this will still work if a PR pushes to cache, or earthly-local is tweaked to push to cache and the component built.
# Once this the demand is there, this can gracefully fallback, but for now this helps make cache problems very evident.

# Use an ARG to define the architecture, defaulting to amd64
ARG ARCH=amd64

# Conditionally set the FROM image based on the ARCH argument
FROM aztecprotocol/build:1.0-${ARCH}

# Set working directory
WORKDIR /usr/src

# Recreate the git to be able to do git ls-files, needed for computing content hash
RUN git init -b master && git config --global gc.auto 0 && git add . && git config user.name 'AztecBot' && git config user.email 'tech@aztecprotocol.com'

### BUILD BARRETENBERG ###
COPY barretenberg.tar.gz .
RUN tar -xzf git_files.tar.gz && rm barretenberg.tar.gz && git commit -m "Update git metadata" >/dev/null

# Mount secrets and execute bootstrap scripts
RUN --mount=type=secret,id=aws_access_key_id --mount=type=secret,id=aws_secret_access_key \
  export AWS_ACCESS_KEY_ID=$(cat /run/secrets/aws_access_key_id) && \
  export AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/aws_secret_access_key) && \
  cd barretenberg/cpp && \
    AWS_ACCESS_KEY_ID=$(cat /run/secrets/aws_access_key_id) AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/aws_secret_access_key) ./bootstrap_cache.sh && \
    echo "barretenberg/cpp: Success"

RUN --mount=type=secret,id=aws_access_key_id --mount=type=secret,id=aws_secret_access_key \
  cd barretenberg/ts && \
    AWS_ACCESS_KEY_ID=$(cat /run/secrets/aws_access_key_id) AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/aws_secret_access_key) ./bootstrap_cache.sh && \
    echo "barretenberg/ts: Success"

COPY noir.tar.gz .
RUN tar -xzf noir.tar.gz && rm noir.tar.gz && git commit -m "Update git metadata" >/dev/null

RUN --mount=type=secret,id=aws_access_key_id --mount=type=secret,id=aws_secret_access_key \
  cd noir && \
    AWS_ACCESS_KEY_ID=$(cat /run/secrets/aws_access_key_id) AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/aws_secret_access_key) ./bootstrap_cache.sh && \
    echo "noir: Success"

COPY l1-contracts.tar.gz .
RUN tar -xzf l1-contracts.tar.gz && rm l1-contracts.tar.gz && git commit -m "Update git metadata" >/dev/null

RUN --mount=type=secret,id=aws_access_key_id --mount=type=secret,id=aws_secret_access_key \
  cd l1-contracts && \
    AWS_ACCESS_KEY_ID=$(cat /run/secrets/aws_access_key_id) AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/aws_secret_access_key) ./bootstrap_cache.sh && \
    echo "noir: Success"

COPY avm-transpiler.tar.gz .
RUN tar -xzf avm-transpiler.tar.gz && rm avm-transpiler.tar.gz && git commit -m "Update git metadata" >/dev/null

RUN --mount=type=secret,id=aws_access_key_id --mount=type=secret,id=aws_secret_access_key \
  cd avm-transpiler && \
    AWS_ACCESS_KEY_ID=$(cat /run/secrets/aws_access_key_id) AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/aws_secret_access_key) ./bootstrap_cache.sh && \
    echo "avm-transpiler: Success"

COPY noir-projects.tar.gz .
RUN tar -xzf noir-projects.tar.gz && rm noir-projects.tar.gz && git commit -m "Update git metadata" >/dev/null

RUN --mount=type=secret,id=aws_access_key_id --mount=type=secret,id=aws_secret_access_key \
  cd noir-projects && \
    AWS_ACCESS_KEY_ID=$(cat /run/secrets/aws_access_key_id) AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/aws_secret_access_key) ./bootstrap_cache.sh && \
    echo "noir-projects: Success"

COPY yarn-project.tar.gz yarn-project-artifacts.tar.gz .
RUN tar -xzf yarn-project.tar.gz && rm yarn-project.tar.gz && git commit -m "Update git metadata" >/dev/null

# yarn-project is big and not particularly slow to build/has no cache script, so we just build it directly
RUN cd yarn-project && \
  ./bootstrap.sh fast-only && \
  echo "yarn-project: Success"

# Copied from yarn-project/Earthfile/+aztec
ENV BB_WORKING_DIRECTORY=/usr/src/bb
ENV BB_BINARY_PATH=/usr/src/barretenberg/cpp/build/bin/bb
ENV ACVM_WORKING_DIRECTORY=/usr/src/acvm
ENV ACVM_BINARY_PATH=/usr/src/noir/noir-repo/target/release/acvm
RUN mkdir -p $BB_WORKING_DIRECTORY $ACVM_WORKING_DIRECTORY /usr/src/yarn-project/world-state/build
ENTRYPOINT ["node", "--no-warnings", "/usr/src/yarn-project/aztec/dest/bin/index.js"]
HEALTHCHECK --interval=10s --timeout=10s --retries=6 --start-period=120s \
    CMD curl -fsS http://127.0.0.1:$port/status
EXPOSE 8080