# This file uses YAML anchors and aliases to prevent repetition of blocks of config:
# https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/
#
# Two primary anchors are checkout and setup_env, called as the first step of almost all jobs:
# - checkout: A custom checkout step to reduce the amount of data downloaded to improve speed.
# - setup_env: Sets up the common environment used by all build steps.
#
# Two CCI executors are used:
# - docker (small): Used only to launch external EC2 instances for big workloads. It's the cheapest option.
# - machine (large): Used for building in CCI itself. 4cpus, 15GB has the optimal power/cost ratio.
#
# The docker executor uses a custom image build in `build_image`. It's specifically streamlined for fast download
# with just enough tools to execute the build system, and launch EC2 instances etc.
#
# There are some `join` steps that are just noops. They are just used to produce cleaner graph rendering in CCI.

version: 2.1

orbs:
  slack: circleci/slack@4.12.1

parameters:
  workflow:
    type: string
    default: "system"

# This build step checks out the code from the repository. It has a hardcoded readonly key to allow the checkout.
# Initially it just fetches the repo metadata for the current commit hash to a depth of 50 commits.
# We need historical commit hashes to calculate diffs between previous and current commits.
# It then checks out the fetched head to actually download the data.
checkout: &checkout
  run:
    name: "Checkout code"
    command: |
      cd $HOME
      mkdir -p .ssh
      chmod 0700 .ssh
      ssh-keyscan -t rsa github.com >> .ssh/known_hosts

      # A read only key for cloning the repository.
      echo $GIT_CHECKOUT_KEY | base64 -d > .ssh/id_rsa

      chmod 0600 .ssh/id_rsa

      # IF YOU'RE CHANGING THIS, YOU ALSO WANT TO CHANGE: build-system/remote_build/remote_build
      # Shallow checkout this commit.
      mkdir -p project
      cd project
      git init
      git remote add origin $CIRCLE_REPOSITORY_URL
      # Only download metadata when fetching.
      git fetch --depth 50 --filter=blob:none origin $CIRCLE_SHA1
      git checkout FETCH_HEAD
      # Initialize submodules recursively
      git submodule update --init --recursive circuits build-system

# Called setup_env to setup a bunch of global variables used throughout the rest of the build process.
# It takes the required CCI environment variables as inputs, and gives them normalised names for the rest of
# the build process. This enables easy running of the build system external to CCI, as used for powerful EC2 builds.
setup_env: &setup_env
  run:
    name: "Setup environment"
    command: ./build-system/scripts/setup_env "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_JOB" "$CIRCLE_REPOSITORY_URL" "$CIRCLE_BRANCH"

jobs:
  wasm-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build aztec3-circuits-wasm-linux-clang 64

  yarn-project-base:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      # We make the build_manifest in the root available to yarn-project. We should be injecting another
      # build context to docker instead, but that requires modifying the build script from build-system
      # to accept arbitrary arguments to be passed to docker build, so we avoid it for now.
      - run:
          name: "Make build manifest available"
          command: cp build_manifest.json yarn-project/
      - run:
          name: "Build"
          command: build yarn-project-base

  ethereum-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build ethereum.js

  foundation:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build foundation

  aztec-js: 
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec.js

  barretenberg-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build barretenberg.js

  types:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build types

  noir-contracts:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build noir-contracts

  world-state:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build world-state

  merkle-tree:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build merkle-tree

  p2p:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build p2p

  acir-simulator:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build acir-simulator

  archiver:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build archiver
  
  aztec-rpc:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec-rpc

  circuits-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build circuits.js

  sequencer-client:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build sequencer-client

  end-to-end:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build end-to-end

  e2e-deploy-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_deploy_contract.test.ts

  e2e-zk-token-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_zk_token_contract.test.ts

  e2e-join:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - run:
          name: "Noop"
          command: echo Noop

# Repeatable config for defining the workflow below.
tag_regex: &tag_regex /v[0-9]+(\.[0-9]+)*(-[a-zA-Z-]+\.[0-9]+)?/
defaults: &defaults
  filters:
    tags:
      only: *tag_regex
  context:
    - build
    - slack
  post-steps:
    - slack/notify:
        event: fail
        branch_pattern: "master"
yarn_project: &yarn_project
  requires:
    - yarn-project-base
  <<: *defaults
e2e_test: &e2e_test
  requires:
    - e2e-join
  <<: *defaults

workflows:
  system:
    when:
      equal: [system, << pipeline.parameters.workflow >>]
    jobs:
      - wasm-linux-clang:
          <<: *defaults
      - yarn-project-base:
          requires:
            - wasm-linux-clang
          <<: *defaults

      - ethereum-js: *yarn_project
      - aztec-js: *yarn_project
      - end-to-end: *yarn_project
      - foundation: *yarn_project
      - world-state: *yarn_project
      - acir-simulator: *yarn_project
      - archiver: *yarn_project
      - aztec-rpc: *yarn_project
      - barretenberg-js: *yarn_project
      - merkle-tree: *yarn_project
      - p2p: *yarn_project
      - noir-contracts: *yarn_project
      - sequencer-client: *yarn_project
      - types: *yarn_project
      - circuits-js: *yarn_project

      - e2e-join:
          requires:
            - ethereum-js
            - aztec-js
            - end-to-end
            - noir-contracts
            - foundation
          <<: *defaults
      
      - e2e-deploy-contract: *e2e_test
      - e2e-zk-token-contract: *e2e_test
