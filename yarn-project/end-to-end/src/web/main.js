/*! For license information please see main.js.LICENSE.txt */
var e,t,n={5949:(e,t,n)=>{var s=n(8662)();function i(e,t){if(e===t)return 0;for(var n=e.length,s=t.length,i=0,r=Math.min(n,s);i<r;++i)if(e[i]!==t[i]){n=e[i],s=t[i];break}return n<s?-1:s<n?1:0}function r(e){return n.g.Buffer&&"function"==typeof n.g.Buffer.isBuffer?n.g.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var a=n(2851),o=Object.prototype.hasOwnProperty,l=Array.prototype.slice,c="foo"===function(){}.name;function d(e){return Object.prototype.toString.call(e)}function u(e){return!r(e)&&"function"==typeof n.g.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer)))}var f=e.exports=b,h=/\s*function\s+([^\(\s]*)\s*/;function p(e){if(a.isFunction(e)){if(c)return e.name;var t=e.toString().match(h);return t&&t[1]}}function m(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function g(e){if(c||!a.isFunction(e))return a.inspect(e);var t=p(e);return"[Function"+(t?": "+t:"")+"]"}function _(e,t,n,s,i){throw new f.AssertionError({message:n,actual:e,expected:t,operator:s,stackStartFunction:i})}function b(e,t){e||_(e,!0,t,"==",f.ok)}function y(e,t,n,s){if(e===t)return!0;if(r(e)&&r(t))return 0===i(e,t);if(a.isDate(e)&&a.isDate(t))return e.getTime()===t.getTime();if(a.isRegExp(e)&&a.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(u(e)&&u(t)&&d(e)===d(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(r(e)!==r(t))return!1;var o=(s=s||{actual:[],expected:[]}).actual.indexOf(e);return-1!==o&&o===s.expected.indexOf(t)||(s.actual.push(e),s.expected.push(t),function(e,t,n,s){if(null==e||null==t)return!1;if(a.isPrimitive(e)||a.isPrimitive(t))return e===t;if(n&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=A(e),r=A(t);if(i&&!r||!i&&r)return!1;if(i)return y(e=l.call(e),t=l.call(t),n);var o,c,d=v(e),u=v(t);if(d.length!==u.length)return!1;for(d.sort(),u.sort(),c=d.length-1;c>=0;c--)if(d[c]!==u[c])return!1;for(c=d.length-1;c>=0;c--)if(!y(e[o=d[c]],t[o],n,s))return!1;return!0}(e,t,n,s))}return n?e===t:e==t}function A(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function w(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function x(e,t,n,s){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(s=n,n=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),s=(n&&n.name?" ("+n.name+").":".")+(s?" "+s:"."),e&&!i&&_(i,n,"Missing expected exception"+s);var r="string"==typeof s,o=!e&&i&&!n;if((!e&&a.isError(i)&&r&&w(i,n)||o)&&_(i,n,"Got unwanted exception"+s),e&&i&&n&&!w(i,n)||!e&&i)throw i}f.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return m(g(e.actual),128)+" "+e.operator+" "+m(g(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||_;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var n=new Error;if(n.stack){var s=n.stack,i=p(t),r=s.indexOf("\n"+i);if(r>=0){var a=s.indexOf("\n",r+1);s=s.substring(a+1)}this.stack=s}}},a.inherits(f.AssertionError,Error),f.fail=_,f.ok=b,f.equal=function(e,t,n){e!=t&&_(e,t,n,"==",f.equal)},f.notEqual=function(e,t,n){e==t&&_(e,t,n,"!=",f.notEqual)},f.deepEqual=function(e,t,n){y(e,t,!1)||_(e,t,n,"deepEqual",f.deepEqual)},f.deepStrictEqual=function(e,t,n){y(e,t,!0)||_(e,t,n,"deepStrictEqual",f.deepStrictEqual)},f.notDeepEqual=function(e,t,n){y(e,t,!1)&&_(e,t,n,"notDeepEqual",f.notDeepEqual)},f.notDeepStrictEqual=function e(t,n,s){y(t,n,!0)&&_(t,n,s,"notDeepStrictEqual",e)},f.strictEqual=function(e,t,n){e!==t&&_(e,t,n,"===",f.strictEqual)},f.notStrictEqual=function(e,t,n){e===t&&_(e,t,n,"!==",f.notStrictEqual)},f.throws=function(e,t,n){x(!0,e,t,n)},f.doesNotThrow=function(e,t,n){x(!1,e,t,n)},f.ifError=function(e){if(e)throw e},f.strict=s((function e(t,n){t||_(t,!0,n,"==",e)}),f,{equal:f.strictEqual,deepEqual:f.deepStrictEqual,notEqual:f.notStrictEqual,notDeepEqual:f.notDeepStrictEqual}),f.strict.strict=f.strict;var v=Object.keys||function(e){var t=[];for(var n in e)o.call(e,n)&&t.push(n);return t}},9848:e=>{"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},1601:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},2851:(e,t,n)=>{var s=/%[sdj%]/g;t.format=function(e){if(!g(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(a(arguments[n]));return t.join(" ")}n=1;for(var i=arguments,r=i.length,o=String(e).replace(s,(function(e){if("%%"===e)return"%";if(n>=r)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}})),l=i[n];n<r;l=i[++n])p(l)||!y(l)?o+=" "+l:o+=" "+a(l);return o},t.deprecate=function(e,s){if(_(n.g.process))return function(){return t.deprecate(e,s).apply(this,arguments)};if(!0===process.noDeprecation)return e;var i=!1;return function(){if(!i){if(process.throwDeprecation)throw new Error(s);process.traceDeprecation?console.trace(s):console.error(s),i=!0}return e.apply(this,arguments)}};var i,r={};function a(e,n){var s={seen:[],stylize:l};return arguments.length>=3&&(s.depth=arguments[2]),arguments.length>=4&&(s.colors=arguments[3]),h(n)?s.showHidden=n:n&&t._extend(s,n),_(s.showHidden)&&(s.showHidden=!1),_(s.depth)&&(s.depth=2),_(s.colors)&&(s.colors=!1),_(s.customInspect)&&(s.customInspect=!0),s.colors&&(s.stylize=o),c(s,e,s.depth)}function o(e,t){var n=a.styles[t];return n?"["+a.colors[n][0]+"m"+e+"["+a.colors[n][1]+"m":e}function l(e,t){return e}function c(e,n,s){if(e.customInspect&&n&&x(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(s,e);return g(i)||(i=c(e,i,s)),i}var r=function(e,t){if(_(t))return e.stylize("undefined","undefined");if(g(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return m(t)?e.stylize(""+t,"number"):h(t)?e.stylize(""+t,"boolean"):p(t)?e.stylize("null","null"):void 0}(e,n);if(r)return r;var a=Object.keys(n),o=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),w(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return d(n);if(0===a.length){if(x(n)){var l=n.name?": "+n.name:"";return e.stylize("[Function"+l+"]","special")}if(b(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(A(n))return e.stylize(Date.prototype.toString.call(n),"date");if(w(n))return d(n)}var y,v="",E=!1,M=["{","}"];return f(n)&&(E=!0,M=["[","]"]),x(n)&&(v=" [Function"+(n.name?": "+n.name:"")+"]"),b(n)&&(v=" "+RegExp.prototype.toString.call(n)),A(n)&&(v=" "+Date.prototype.toUTCString.call(n)),w(n)&&(v=" "+d(n)),0!==a.length||E&&0!=n.length?s<0?b(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),y=E?function(e,t,n,s,i){for(var r=[],a=0,o=t.length;a<o;++a)z(t,String(a))?r.push(u(e,t,n,s,String(a),!0)):r.push("");return i.forEach((function(i){i.match(/^\d+$/)||r.push(u(e,t,n,s,i,!0))})),r}(e,n,s,o,a):a.map((function(t){return u(e,n,s,o,t,E)})),e.seen.pop(),function(e,t,n){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}(y,v,M)):M[0]+v+M[1]}function d(e){return"["+Error.prototype.toString.call(e)+"]"}function u(e,t,n,s,i,r){var a,o,l;if((l=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?o=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(o=e.stylize("[Setter]","special")),z(s,i)||(a="["+i+"]"),o||(e.seen.indexOf(l.value)<0?(o=p(n)?c(e,l.value,null):c(e,l.value,n-1)).indexOf("\n")>-1&&(o=r?o.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+o.split("\n").map((function(e){return"   "+e})).join("\n")):o=e.stylize("[Circular]","special")),_(a)){if(r&&i.match(/^\d+$/))return o;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+o}function f(e){return Array.isArray(e)}function h(e){return"boolean"==typeof e}function p(e){return null===e}function m(e){return"number"==typeof e}function g(e){return"string"==typeof e}function _(e){return void 0===e}function b(e){return y(e)&&"[object RegExp]"===v(e)}function y(e){return"object"==typeof e&&null!==e}function A(e){return y(e)&&"[object Date]"===v(e)}function w(e){return y(e)&&("[object Error]"===v(e)||e instanceof Error)}function x(e){return"function"==typeof e}function v(e){return Object.prototype.toString.call(e)}function E(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(_(i)&&(i={NODE_ENV:"production"}.NODE_DEBUG||""),e=e.toUpperCase(),!r[e])if(new RegExp("\\b"+e+"\\b","i").test(i)){var n=process.pid;r[e]=function(){var s=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,s)}}else r[e]=function(){};return r[e]},t.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=f,t.isBoolean=h,t.isNull=p,t.isNullOrUndefined=function(e){return null==e},t.isNumber=m,t.isString=g,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=_,t.isRegExp=b,t.isObject=y,t.isDate=A,t.isError=w,t.isFunction=x,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(1601);var M=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function z(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,n;console.log("%s - %s",(n=[E((e=new Date).getHours()),E(e.getMinutes()),E(e.getSeconds())].join(":"),[e.getDate(),M[e.getMonth()],n].join(" ")),t.format.apply(t,arguments))},t.inherits=n(9848),t._extend=function(e,t){if(!t||!y(t))return e;for(var n=Object.keys(t),s=n.length;s--;)e[n[s]]=t[n[s]];return e}},7322:(e,t)=>{t.byteLength=function(e){var t=o(e),n=t[0],s=t[1];return 3*(n+s)/4-s},t.toByteArray=function(e){var t,n,r=o(e),a=r[0],l=r[1],c=new i(function(e,t,n){return 3*(t+n)/4-n}(0,a,l)),d=0,u=l>0?a-4:a;for(n=0;n<u;n+=4)t=s[e.charCodeAt(n)]<<18|s[e.charCodeAt(n+1)]<<12|s[e.charCodeAt(n+2)]<<6|s[e.charCodeAt(n+3)],c[d++]=t>>16&255,c[d++]=t>>8&255,c[d++]=255&t;return 2===l&&(t=s[e.charCodeAt(n)]<<2|s[e.charCodeAt(n+1)]>>4,c[d++]=255&t),1===l&&(t=s[e.charCodeAt(n)]<<10|s[e.charCodeAt(n+1)]<<4|s[e.charCodeAt(n+2)]>>2,c[d++]=t>>8&255,c[d++]=255&t),c},t.fromByteArray=function(e){for(var t,s=e.length,i=s%3,r=[],a=16383,o=0,c=s-i;o<c;o+=a)r.push(l(e,o,o+a>c?c:o+a));return 1===i?(t=e[s-1],r.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[s-2]<<8)+e[s-1],r.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),r.join("")};for(var n=[],s=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)n[a]=r[a],s[r.charCodeAt(a)]=a;function o(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,s){for(var i,r,a=[],o=t;o<s;o+=3)i=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(n[(r=i)>>18&63]+n[r>>12&63]+n[r>>6&63]+n[63&r]);return a.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},8891:(e,t,n)=>{const s=n(7322),i=n(8239),r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=l,t.SlowBuffer=function(e){return+e!=e&&(e=0),l.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function o(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,l.prototype),t}function l(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return u(e)}return c(e,t,n)}function c(e,t,n){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!l.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|m(e,t);let s=o(n);const i=s.write(e,t);return i!==n&&(s=s.slice(0,i)),s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(W(e,Uint8Array)){const t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(W(e,ArrayBuffer)||e&&W(e.buffer,ArrayBuffer))return h(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(W(e,SharedArrayBuffer)||e&&W(e.buffer,SharedArrayBuffer)))return h(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return l.from(s,t,n);const i=function(e){if(l.isBuffer(e)){const t=0|p(e.length),n=o(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||V(e.length)?o(0):f(e):"Buffer"===e.type&&Array.isArray(e.data)?f(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function d(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function u(e){return d(e),o(e<0?0:0|p(e))}function f(e){const t=e.length<0?0:0|p(e.length),n=o(t);for(let s=0;s<t;s+=1)n[s]=255&e[s];return n}function h(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let s;return s=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(s,l.prototype),s}function p(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function m(e,t){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||W(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===n)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return J(e).length;default:if(i)return s?-1:Z(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,n){let s=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,n);case"utf8":case"utf-8":return z(this,t,n);case"ascii":return F(this,t,n);case"latin1":case"binary":return k(this,t,n);case"base64":return M(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,n);default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function _(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function b(e,t,n,s,i){if(0===e.length)return-1;if("string"==typeof n?(s=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),V(n=+n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=l.from(t,s)),l.isBuffer(t))return 0===t.length?-1:y(e,t,n,s,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,s,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,s,i){let r,a=1,o=e.length,l=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;a=2,o/=2,l/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){let s=-1;for(r=n;r<o;r++)if(c(e,r)===c(t,-1===s?0:r-s)){if(-1===s&&(s=r),r-s+1===l)return s*a}else-1!==s&&(r-=r-s),s=-1}else for(n+l>o&&(n=o-l),r=n;r>=0;r--){let n=!0;for(let s=0;s<l;s++)if(c(e,r+s)!==c(t,s)){n=!1;break}if(n)return r}return-1}function A(e,t,n,s){n=Number(n)||0;const i=e.length-n;s?(s=Number(s))>i&&(s=i):s=i;const r=t.length;let a;for(s>r/2&&(s=r/2),a=0;a<s;++a){const s=parseInt(t.substr(2*a,2),16);if(V(s))return a;e[n+a]=s}return a}function w(e,t,n,s){return X(Z(t,e.length-n),e,n,s)}function x(e,t,n,s){return X(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,s)}function v(e,t,n,s){return X(J(t),e,n,s)}function E(e,t,n,s){return X(function(e,t){let n,s,i;const r=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),s=n>>8,i=n%256,r.push(i),r.push(s);return r}(t,e.length-n),e,n,s)}function M(e,t,n){return 0===t&&n===e.length?s.fromByteArray(e):s.fromByteArray(e.slice(t,n))}function z(e,t,n){n=Math.min(e.length,n);const s=[];let i=t;for(;i<n;){const t=e[i];let r=null,a=t>239?4:t>223?3:t>191?2:1;if(i+a<=n){let n,s,o,l;switch(a){case 1:t<128&&(r=t);break;case 2:n=e[i+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(r=l));break;case 3:n=e[i+1],s=e[i+2],128==(192&n)&&128==(192&s)&&(l=(15&t)<<12|(63&n)<<6|63&s,l>2047&&(l<55296||l>57343)&&(r=l));break;case 4:n=e[i+1],s=e[i+2],o=e[i+3],128==(192&n)&&128==(192&s)&&128==(192&o)&&(l=(15&t)<<18|(63&n)<<12|(63&s)<<6|63&o,l>65535&&l<1114112&&(r=l))}}null===r?(r=65533,a=1):r>65535&&(r-=65536,s.push(r>>>10&1023|55296),r=56320|1023&r),s.push(r),i+=a}return function(e){const t=e.length;if(t<=B)return String.fromCharCode.apply(String,e);let n="",s=0;for(;s<t;)n+=String.fromCharCode.apply(String,e.slice(s,s+=B));return n}(s)}t.kMaxLength=a,l.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,t,n){return c(e,t,n)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,t,n){return function(e,t,n){return d(e),e<=0?o(e):void 0!==t?"string"==typeof n?o(e).fill(t,n):o(e).fill(t):o(e)}(e,t,n)},l.allocUnsafe=function(e){return u(e)},l.allocUnsafeSlow=function(e){return u(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,t){if(W(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),W(t,Uint8Array)&&(t=l.from(t,t.offset,t.byteLength)),!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,s=t.length;for(let i=0,r=Math.min(n,s);i<r;++i)if(e[i]!==t[i]){n=e[i],s=t[i];break}return n<s?-1:s<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const s=l.allocUnsafe(t);let i=0;for(n=0;n<e.length;++n){let t=e[n];if(W(t,Uint8Array))i+t.length>s.length?(l.isBuffer(t)||(t=l.from(t)),t.copy(s,i)):Uint8Array.prototype.set.call(s,t,i);else{if(!l.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,i)}i+=t.length}return s},l.byteLength=m,l.prototype._isBuffer=!0,l.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)_(this,t,t+1);return this},l.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)_(this,t,t+3),_(this,t+1,t+2);return this},l.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)_(this,t,t+7),_(this,t+1,t+6),_(this,t+2,t+5),_(this,t+3,t+4);return this},l.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?z(this,0,e):g.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){let e="";const n=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},r&&(l.prototype[r]=l.prototype.inspect),l.prototype.compare=function(e,t,n,s,i){if(W(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===s&&(s=0),void 0===i&&(i=this.length),t<0||n>e.length||s<0||i>this.length)throw new RangeError("out of range index");if(s>=i&&t>=n)return 0;if(s>=i)return-1;if(t>=n)return 1;if(this===e)return 0;let r=(i>>>=0)-(s>>>=0),a=(n>>>=0)-(t>>>=0);const o=Math.min(r,a),c=this.slice(s,i),d=e.slice(t,n);for(let e=0;e<o;++e)if(c[e]!==d[e]){r=c[e],a=d[e];break}return r<a?-1:a<r?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return b(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return b(this,e,t,n,!1)},l.prototype.write=function(e,t,n,s){if(void 0===t)s="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)s=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===s&&(s="utf8")):(s=n,n=void 0)}const i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let r=!1;for(;;)switch(s){case"hex":return A(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":case"latin1":case"binary":return x(this,e,t,n);case"base64":return v(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(r)throw new TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),r=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const B=4096;function F(e,t,n){let s="";n=Math.min(e.length,n);for(let i=t;i<n;++i)s+=String.fromCharCode(127&e[i]);return s}function k(e,t,n){let s="";n=Math.min(e.length,n);for(let i=t;i<n;++i)s+=String.fromCharCode(e[i]);return s}function C(e,t,n){const s=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>s)&&(n=s);let i="";for(let s=t;s<n;++s)i+=q[e[s]];return i}function O(e,t,n){const s=e.slice(t,n);let i="";for(let e=0;e<s.length-1;e+=2)i+=String.fromCharCode(s[e]+256*s[e+1]);return i}function D(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,n,s,i,r){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<r)throw new RangeError('"value" argument is out of bounds');if(n+s>e.length)throw new RangeError("Index out of range")}function T(e,t,n,s,i){H(t,s,i,e,n,7);let r=Number(t&BigInt(4294967295));e[n++]=r,r>>=8,e[n++]=r,r>>=8,e[n++]=r,r>>=8,e[n++]=r;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,n}function S(e,t,n,s,i){H(t,s,i,e,n,7);let r=Number(t&BigInt(4294967295));e[n+7]=r,r>>=8,e[n+6]=r,r>>=8,e[n+5]=r,r>>=8,e[n+4]=r;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=a,a>>=8,e[n+2]=a,a>>=8,e[n+1]=a,a>>=8,e[n]=a,n+8}function N(e,t,n,s,i,r){if(n+s>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(e,t,n,s,r){return t=+t,n>>>=0,r||N(e,0,n,4),i.write(e,t,n,s,23,4),n+4}function I(e,t,n,s,r){return t=+t,n>>>=0,r||N(e,0,n,8),i.write(e,t,n,s,52,8),n+8}l.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const s=this.subarray(e,t);return Object.setPrototypeOf(s,l.prototype),s},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=this[e],i=1,r=0;for(;++r<t&&(i*=256);)s+=this[e+r]*i;return s},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=this[e+--t],i=1;for(;t>0&&(i*=256);)s+=this[e+--t]*i;return s},l.prototype.readUint8=l.prototype.readUInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readBigUInt64LE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(s)+(BigInt(i)<<BigInt(32))})),l.prototype.readBigUInt64BE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(s)<<BigInt(32))+BigInt(i)})),l.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=this[e],i=1,r=0;for(;++r<t&&(i*=256);)s+=this[e+r]*i;return i*=128,s>=i&&(s-=Math.pow(2,8*t)),s},l.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=t,i=1,r=this[e+--s];for(;s>0&&(i*=256);)r+=this[e+--s]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*t)),r},l.prototype.readInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){e>>>=0,t||D(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){e>>>=0,t||D(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readBigInt64LE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),l.prototype.readBigInt64BE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),l.prototype.readFloatLE=function(e,t){return e>>>=0,t||D(e,4,this.length),i.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return e>>>=0,t||D(e,4,this.length),i.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return e>>>=0,t||D(e,8,this.length),i.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return e>>>=0,t||D(e,8,this.length),i.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,t,n,s){e=+e,t>>>=0,n>>>=0,s||L(this,e,t,n,Math.pow(2,8*n)-1,0);let i=1,r=0;for(this[t]=255&e;++r<n&&(i*=256);)this[t+r]=e/i&255;return t+n},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,t,n,s){e=+e,t>>>=0,n>>>=0,s||L(this,e,t,n,Math.pow(2,8*n)-1,0);let i=n-1,r=1;for(this[t+i]=255&e;--i>=0&&(r*=256);)this[t+i]=e/r&255;return t+n},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,1,255,0),this[t]=255&e,t+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigUInt64LE=K((function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeBigUInt64BE=K((function(e,t=0){return S(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeIntLE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);L(this,e,t,n,s-1,-s)}let i=0,r=1,a=0;for(this[t]=255&e;++i<n&&(r*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/r|0)-a&255;return t+n},l.prototype.writeIntBE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);L(this,e,t,n,s-1,-s)}let i=n-1,r=1,a=0;for(this[t+i]=255&e;--i>=0&&(r*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/r|0)-a&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigInt64LE=K((function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeBigInt64BE=K((function(e,t=0){return S(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeFloatLE=function(e,t,n){return P(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return P(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return I(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return I(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,s){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<n&&(s=n),s===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-n&&(s=e.length-t+n);const i=s-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,s):Uint8Array.prototype.set.call(e,this.subarray(n,s),t),i},l.prototype.fill=function(e,t,n,s){if("string"==typeof e){if("string"==typeof t?(s=t,t=0,n=this.length):"string"==typeof n&&(s=n,n=this.length),void 0!==s&&"string"!=typeof s)throw new TypeError("encoding must be a string");if("string"==typeof s&&!l.isEncoding(s))throw new TypeError("Unknown encoding: "+s);if(1===e.length){const t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{const r=l.isBuffer(e)?e:l.from(e,s),a=r.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<n-t;++i)this[i+t]=r[i%a]}return this};const Y={};function Q(e,t,n){Y[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function j(e){let t="",n=e.length;const s="-"===e[0]?1:0;for(;n>=s+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function H(e,t,n,s,i,r){if(e>n||e<t){const s="bigint"==typeof t?"n":"";let i;throw i=r>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${8*(r+1)}${s}`:`>= -(2${s} ** ${8*(r+1)-1}${s}) and < 2 ** ${8*(r+1)-1}${s}`:`>= ${t}${s} and <= ${n}${s}`,new Y.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,n){U(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||R(t,e.length-(n+1))}(s,i,r)}function U(e,t){if("number"!=typeof e)throw new Y.ERR_INVALID_ARG_TYPE(t,"number",e)}function R(e,t,n){if(Math.floor(e)!==e)throw U(e,n),new Y.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new Y.ERR_BUFFER_OUT_OF_BOUNDS;throw new Y.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}Q("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Q("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Q("ERR_OUT_OF_RANGE",(function(e,t,n){let s=`The value of "${e}" is out of range.`,i=n;return Number.isInteger(n)&&Math.abs(n)>2**32?i=j(String(n)):"bigint"==typeof n&&(i=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(i=j(i)),i+="n"),s+=` It must be ${t}. Received ${i}`,s}),RangeError);const G=/[^+/0-9A-Za-z-_]/g;function Z(e,t){let n;t=t||1/0;const s=e.length;let i=null;const r=[];for(let a=0;a<s;++a){if(n=e.charCodeAt(a),n>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&r.push(239,191,189);continue}if(a+1===s){(t-=3)>-1&&r.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&r.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&r.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;r.push(n)}else if(n<2048){if((t-=2)<0)break;r.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;r.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;r.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return r}function J(e){return s.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(G,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function X(e,t,n,s){let i;for(i=0;i<s&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}function W(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function V(e){return e!=e}const q=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const s=16*n;for(let i=0;i<16;++i)t[s+i]=e[n]+e[i]}return t}();function K(e){return"undefined"==typeof BigInt?$:e}function $(){throw new Error("BigInt not supported")}},9343:(e,t,n)=>{var s=n(8897),i=n(8179),r=i(s("String.prototype.indexOf"));e.exports=function(e,t){var n=s(e,!!t);return"function"==typeof n&&r(e,".prototype.")>-1?i(n):n}},8179:(e,t,n)=>{var s=n(4499),i=n(8897),r=n(8973),a=n(1711),o=i("%Function.prototype.apply%"),l=i("%Function.prototype.call%"),c=i("%Reflect.apply%",!0)||s.call(l,o),d=n(7539),u=i("%Math.max%");e.exports=function(e){if("function"!=typeof e)throw new a("a function is required");var t=c(s,l,arguments);return r(t,1+u(0,e.length-(arguments.length-1)),!0)};var f=function(){return c(s,o,arguments)};d?d(e.exports,"apply",{value:f}):e.exports.apply=f},3156:e=>{var t=1e3,n=60*t,s=60*n,i=24*s,r=7*i;function a(e,t,n,s){var i=t>=1.5*n;return Math.round(e/n)+" "+s+(i?"s":"")}e.exports=function(e,o){o=o||{};var l,c,d=typeof e;if("string"===d&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(a){var o=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return o*r;case"days":case"day":case"d":return o*i;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===d&&isFinite(e))return o.long?(l=e,(c=Math.abs(l))>=i?a(l,c,i,"day"):c>=s?a(l,c,s,"hour"):c>=n?a(l,c,n,"minute"):c>=t?a(l,c,t,"second"):l+" ms"):function(e){var r=Math.abs(e);return r>=i?Math.round(e/i)+"d":r>=s?Math.round(e/s)+"h":r>=n?Math.round(e/n)+"m":r>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},7989:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let s=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(s++,"%c"===e&&(i=s))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={NODE_ENV:"production"}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(1236)(t);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},1236:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,r,a=null;function o(...e){if(!o.enabled)return;const s=o,i=Number(new Date),r=i-(n||i);s.diff=r,s.prev=n,s.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";a++;const r=t.formatters[i];if("function"==typeof r){const t=e[a];n=r.call(s,t),e.splice(a,1),a--}return n})),t.formatArgs.call(s,e),(s.log||t.log).apply(s,e)}return o.namespace=e,o.useColors=t.useColors(),o.color=t.selectColor(e),o.extend=s,o.destroy=t.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(i!==t.namespaces&&(i=t.namespaces,r=t.enabled(e)),r),set:e=>{a=e}}),"function"==typeof t.init&&t.init(o),o}function s(e,n){const s=t(this.namespace+(void 0===n?":":n)+e);return s.log=this.log,s}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const s=("string"==typeof e?e:"").split(/[\s,]+/),i=s.length;for(n=0;n<i;n++)s[n]&&("-"===(e=s[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,s;for(n=0,s=t.skips.length;n<s;n++)if(t.skips[n].test(e))return!1;for(n=0,s=t.names.length;n<s;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(3156),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},9381:(e,t,n)=>{var s=n(7539),i=n(6296),r=n(1711),a=n(1399);e.exports=function(e,t,n){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new r("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new r("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new r("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new r("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new r("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new r("`loose`, if provided, must be a boolean");var o=arguments.length>3?arguments[3]:null,l=arguments.length>4?arguments[4]:null,c=arguments.length>5?arguments[5]:null,d=arguments.length>6&&arguments[6],u=!!a&&a(e,t);if(s)s(e,t,{configurable:null===c&&u?u.configurable:!c,enumerable:null===o&&u?u.enumerable:!o,value:n,writable:null===l&&u?u.writable:!l});else{if(!d&&(o||l||c))throw new i("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[t]=n}}},6041:e=>{e.exports=!1},7539:(e,t,n)=>{var s=n(8897)("%Object.defineProperty%",!0)||!1;if(s)try{s({},"a",{value:1})}catch(e){s=!1}e.exports=s},3841:e=>{e.exports=EvalError},219:e=>{e.exports=Error},6190:e=>{e.exports=RangeError},3950:e=>{e.exports=ReferenceError},6296:e=>{e.exports=SyntaxError},1711:e=>{e.exports=TypeError},3221:e=>{e.exports=URIError},7270:(e,t,n)=>{var s=n(9916),i=Object.prototype.toString,r=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){if(!s(t))throw new TypeError("iterator must be a function");var a;arguments.length>=3&&(a=n),"[object Array]"===i.call(e)?function(e,t,n){for(var s=0,i=e.length;s<i;s++)r.call(e,s)&&(null==n?t(e[s],s,e):t.call(n,e[s],s,e))}(e,t,a):"string"==typeof e?function(e,t,n){for(var s=0,i=e.length;s<i;s++)null==n?t(e.charAt(s),s,e):t.call(n,e.charAt(s),s,e)}(e,t,a):function(e,t,n){for(var s in e)r.call(e,s)&&(null==n?t(e[s],s,e):t.call(n,e[s],s,e))}(e,t,a)}},5845:e=>{var t=Object.prototype.toString,n=Math.max,s=function(e,t){for(var n=[],s=0;s<e.length;s+=1)n[s]=e[s];for(var i=0;i<t.length;i+=1)n[i+e.length]=t[i];return n};e.exports=function(e){var i=this;if("function"!=typeof i||"[object Function]"!==t.apply(i))throw new TypeError("Function.prototype.bind called on incompatible "+i);for(var r,a=function(e,t){for(var n=[],s=1,i=0;s<e.length;s+=1,i+=1)n[i]=e[s];return n}(arguments),o=n(0,i.length-a.length),l=[],c=0;c<o;c++)l[c]="$"+c;if(r=Function("binder","return function ("+function(e,t){for(var n="",s=0;s<e.length;s+=1)n+=e[s],s+1<e.length&&(n+=",");return n}(l)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof r){var t=i.apply(this,s(a,arguments));return Object(t)===t?t:this}return i.apply(e,s(a,arguments))})),i.prototype){var d=function(){};d.prototype=i.prototype,r.prototype=new d,d.prototype=null}return r}},4499:(e,t,n)=>{var s=n(5845);e.exports=Function.prototype.bind||s},8897:(e,t,n)=>{var s,i=n(219),r=n(3841),a=n(6190),o=n(3950),l=n(6296),c=n(1711),d=n(3221),u=Function,f=function(e){try{return u('"use strict"; return ('+e+").constructor;")()}catch(e){}},h=Object.getOwnPropertyDescriptor;if(h)try{h({},"")}catch(e){h=null}var p=function(){throw new c},m=h?function(){try{return p}catch(e){try{return h(arguments,"callee").get}catch(e){return p}}}():p,g=n(4923)(),_=n(9372)(),b=Object.getPrototypeOf||(_?function(e){return e.__proto__}:null),y={},A="undefined"!=typeof Uint8Array&&b?b(Uint8Array):s,w={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?s:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?s:ArrayBuffer,"%ArrayIteratorPrototype%":g&&b?b([][Symbol.iterator]()):s,"%AsyncFromSyncIteratorPrototype%":s,"%AsyncFunction%":y,"%AsyncGenerator%":y,"%AsyncGeneratorFunction%":y,"%AsyncIteratorPrototype%":y,"%Atomics%":"undefined"==typeof Atomics?s:Atomics,"%BigInt%":"undefined"==typeof BigInt?s:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?s:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?s:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?s:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":i,"%eval%":eval,"%EvalError%":r,"%Float32Array%":"undefined"==typeof Float32Array?s:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?s:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?s:FinalizationRegistry,"%Function%":u,"%GeneratorFunction%":y,"%Int8Array%":"undefined"==typeof Int8Array?s:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?s:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?s:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":g&&b?b(b([][Symbol.iterator]())):s,"%JSON%":"object"==typeof JSON?JSON:s,"%Map%":"undefined"==typeof Map?s:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&g&&b?b((new Map)[Symbol.iterator]()):s,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?s:Promise,"%Proxy%":"undefined"==typeof Proxy?s:Proxy,"%RangeError%":a,"%ReferenceError%":o,"%Reflect%":"undefined"==typeof Reflect?s:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?s:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&g&&b?b((new Set)[Symbol.iterator]()):s,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?s:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":g&&b?b(""[Symbol.iterator]()):s,"%Symbol%":g?Symbol:s,"%SyntaxError%":l,"%ThrowTypeError%":m,"%TypedArray%":A,"%TypeError%":c,"%Uint8Array%":"undefined"==typeof Uint8Array?s:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?s:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?s:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?s:Uint32Array,"%URIError%":d,"%WeakMap%":"undefined"==typeof WeakMap?s:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?s:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?s:WeakSet};if(b)try{null.error}catch(e){var x=b(b(e));w["%Error.prototype%"]=x}var v=function e(t){var n;if("%AsyncFunction%"===t)n=f("async function () {}");else if("%GeneratorFunction%"===t)n=f("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=f("async function* () {}");else if("%AsyncGenerator%"===t){var s=e("%AsyncGeneratorFunction%");s&&(n=s.prototype)}else if("%AsyncIteratorPrototype%"===t){var i=e("%AsyncGenerator%");i&&b&&(n=b(i.prototype))}return w[t]=n,n},E={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},M=n(4499),z=n(4313),B=M.call(Function.call,Array.prototype.concat),F=M.call(Function.apply,Array.prototype.splice),k=M.call(Function.call,String.prototype.replace),C=M.call(Function.call,String.prototype.slice),O=M.call(Function.call,RegExp.prototype.exec),D=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,L=/\\(\\)?/g,T=function(e,t){var n,s=e;if(z(E,s)&&(s="%"+(n=E[s])[0]+"%"),z(w,s)){var i=w[s];if(i===y&&(i=v(s)),void 0===i&&!t)throw new c("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:s,value:i}}throw new l("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new c("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new c('"allowMissing" argument must be a boolean');if(null===O(/^%?[^%]*%?$/,e))throw new l("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=function(e){var t=C(e,0,1),n=C(e,-1);if("%"===t&&"%"!==n)throw new l("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new l("invalid intrinsic syntax, expected opening `%`");var s=[];return k(e,D,(function(e,t,n,i){s[s.length]=n?k(i,L,"$1"):t||e})),s}(e),s=n.length>0?n[0]:"",i=T("%"+s+"%",t),r=i.name,a=i.value,o=!1,d=i.alias;d&&(s=d[0],F(n,B([0,1],d)));for(var u=1,f=!0;u<n.length;u+=1){var p=n[u],m=C(p,0,1),g=C(p,-1);if(('"'===m||"'"===m||"`"===m||'"'===g||"'"===g||"`"===g)&&m!==g)throw new l("property names with quotes must have matching quotes");if("constructor"!==p&&f||(o=!0),z(w,r="%"+(s+="."+p)+"%"))a=w[r];else if(null!=a){if(!(p in a)){if(!t)throw new c("base intrinsic for "+e+" exists, but the property is not available.");return}if(h&&u+1>=n.length){var _=h(a,p);a=(f=!!_)&&"get"in _&&!("originalValue"in _.get)?_.get:a[p]}else f=z(a,p),a=a[p];f&&!o&&(w[r]=a)}}return a}},1399:(e,t,n)=>{var s=n(8897)("%Object.getOwnPropertyDescriptor%",!0);if(s)try{s([],"length")}catch(e){s=null}e.exports=s},6900:(e,t,n)=>{var s=n(7539),i=function(){return!!s};i.hasArrayLengthDefineBug=function(){if(!s)return null;try{return 1!==s([],"length",{value:1}).length}catch(e){return!0}},e.exports=i},9372:e=>{var t={__proto__:null,foo:{}},n=Object;e.exports=function(){return{__proto__:t}.foo===t.foo&&!(t instanceof n)}},4923:(e,t,n)=>{var s="undefined"!=typeof Symbol&&Symbol,i=n(4361);e.exports=function(){return"function"==typeof s&&"function"==typeof Symbol&&"symbol"==typeof s("foo")&&"symbol"==typeof Symbol("bar")&&i()}},4361:e=>{e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var s=Object.getOwnPropertySymbols(e);if(1!==s.length||s[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,t);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},1432:(e,t,n)=>{var s=n(4361);e.exports=function(){return s()&&!!Symbol.toStringTag}},6460:(e,t,n)=>{var s=t;s.utils=n(9566),s.common=n(2090),s.sha=n(1017),s.ripemd=n(7572),s.hmac=n(1912),s.sha1=s.sha.sha1,s.sha256=s.sha.sha256,s.sha224=s.sha.sha224,s.sha384=s.sha.sha384,s.sha512=s.sha.sha512,s.ripemd160=s.ripemd.ripemd160},2090:(e,t,n)=>{var s=n(9566),i=n(73);function r(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=r,r.prototype.update=function(e,t){if(e=s.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var n=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-n,e.length),0===this.pending.length&&(this.pending=null),e=s.join32(e,0,e.length-n,this.endian);for(var i=0;i<e.length;i+=this._delta32)this._update(e,i,i+this._delta32)}return this},r.prototype.digest=function(e){return this.update(this._pad()),i(null===this.pending),this._digest(e)},r.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,n=t-(e+this.padLength)%t,s=new Array(n+this.padLength);s[0]=128;for(var i=1;i<n;i++)s[i]=0;if(e<<=3,"big"===this.endian){for(var r=8;r<this.padLength;r++)s[i++]=0;s[i++]=0,s[i++]=0,s[i++]=0,s[i++]=0,s[i++]=e>>>24&255,s[i++]=e>>>16&255,s[i++]=e>>>8&255,s[i++]=255&e}else for(s[i++]=255&e,s[i++]=e>>>8&255,s[i++]=e>>>16&255,s[i++]=e>>>24&255,s[i++]=0,s[i++]=0,s[i++]=0,s[i++]=0,r=8;r<this.padLength;r++)s[i++]=0;return s}},1912:(e,t,n)=>{var s=n(9566),i=n(73);function r(e,t,n){if(!(this instanceof r))return new r(e,t,n);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(s.toArray(t,n))}e.exports=r,r.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},r.prototype.update=function(e,t){return this.inner.update(e,t),this},r.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},7572:(e,t,n)=>{var s=n(9566),i=n(2090),r=s.rotl32,a=s.sum32,o=s.sum32_3,l=s.sum32_4,c=i.BlockHash;function d(){if(!(this instanceof d))return new d;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function u(e,t,n,s){return e<=15?t^n^s:e<=31?t&n|~t&s:e<=47?(t|~n)^s:e<=63?t&s|n&~s:t^(n|~s)}function f(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function h(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}s.inherits(d,c),t.ripemd160=d,d.blockSize=512,d.outSize=160,d.hmacStrength=192,d.padLength=64,d.prototype._update=function(e,t){for(var n=this.h[0],s=this.h[1],i=this.h[2],c=this.h[3],d=this.h[4],b=n,y=s,A=i,w=c,x=d,v=0;v<80;v++){var E=a(r(l(n,u(v,s,i,c),e[p[v]+t],f(v)),g[v]),d);n=d,d=c,c=r(i,10),i=s,s=E,E=a(r(l(b,u(79-v,y,A,w),e[m[v]+t],h(v)),_[v]),x),b=x,x=w,w=r(A,10),A=y,y=E}E=o(this.h[1],i,w),this.h[1]=o(this.h[2],c,x),this.h[2]=o(this.h[3],d,b),this.h[3]=o(this.h[4],n,y),this.h[4]=o(this.h[0],s,A),this.h[0]=E},d.prototype._digest=function(e){return"hex"===e?s.toHex32(this.h,"little"):s.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],m=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],g=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],_=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},1017:(e,t,n)=>{t.sha1=n(3897),t.sha224=n(422),t.sha256=n(6475),t.sha384=n(6251),t.sha512=n(714)},3897:(e,t,n)=>{var s=n(9566),i=n(2090),r=n(3085),a=s.rotl32,o=s.sum32,l=s.sum32_5,c=r.ft_1,d=i.BlockHash,u=[1518500249,1859775393,2400959708,3395469782];function f(){if(!(this instanceof f))return new f;d.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}s.inherits(f,d),e.exports=f,f.blockSize=512,f.outSize=160,f.hmacStrength=80,f.padLength=64,f.prototype._update=function(e,t){for(var n=this.W,s=0;s<16;s++)n[s]=e[t+s];for(;s<n.length;s++)n[s]=a(n[s-3]^n[s-8]^n[s-14]^n[s-16],1);var i=this.h[0],r=this.h[1],d=this.h[2],f=this.h[3],h=this.h[4];for(s=0;s<n.length;s++){var p=~~(s/20),m=l(a(i,5),c(p,r,d,f),h,n[s],u[p]);h=f,f=d,d=a(r,30),r=i,i=m}this.h[0]=o(this.h[0],i),this.h[1]=o(this.h[1],r),this.h[2]=o(this.h[2],d),this.h[3]=o(this.h[3],f),this.h[4]=o(this.h[4],h)},f.prototype._digest=function(e){return"hex"===e?s.toHex32(this.h,"big"):s.split32(this.h,"big")}},422:(e,t,n)=>{var s=n(9566),i=n(6475);function r(){if(!(this instanceof r))return new r;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}s.inherits(r,i),e.exports=r,r.blockSize=512,r.outSize=224,r.hmacStrength=192,r.padLength=64,r.prototype._digest=function(e){return"hex"===e?s.toHex32(this.h.slice(0,7),"big"):s.split32(this.h.slice(0,7),"big")}},6475:(e,t,n)=>{var s=n(9566),i=n(2090),r=n(3085),a=n(73),o=s.sum32,l=s.sum32_4,c=s.sum32_5,d=r.ch32,u=r.maj32,f=r.s0_256,h=r.s1_256,p=r.g0_256,m=r.g1_256,g=i.BlockHash,_=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function b(){if(!(this instanceof b))return new b;g.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=_,this.W=new Array(64)}s.inherits(b,g),e.exports=b,b.blockSize=512,b.outSize=256,b.hmacStrength=192,b.padLength=64,b.prototype._update=function(e,t){for(var n=this.W,s=0;s<16;s++)n[s]=e[t+s];for(;s<n.length;s++)n[s]=l(m(n[s-2]),n[s-7],p(n[s-15]),n[s-16]);var i=this.h[0],r=this.h[1],g=this.h[2],_=this.h[3],b=this.h[4],y=this.h[5],A=this.h[6],w=this.h[7];for(a(this.k.length===n.length),s=0;s<n.length;s++){var x=c(w,h(b),d(b,y,A),this.k[s],n[s]),v=o(f(i),u(i,r,g));w=A,A=y,y=b,b=o(_,x),_=g,g=r,r=i,i=o(x,v)}this.h[0]=o(this.h[0],i),this.h[1]=o(this.h[1],r),this.h[2]=o(this.h[2],g),this.h[3]=o(this.h[3],_),this.h[4]=o(this.h[4],b),this.h[5]=o(this.h[5],y),this.h[6]=o(this.h[6],A),this.h[7]=o(this.h[7],w)},b.prototype._digest=function(e){return"hex"===e?s.toHex32(this.h,"big"):s.split32(this.h,"big")}},6251:(e,t,n)=>{var s=n(9566),i=n(714);function r(){if(!(this instanceof r))return new r;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}s.inherits(r,i),e.exports=r,r.blockSize=1024,r.outSize=384,r.hmacStrength=192,r.padLength=128,r.prototype._digest=function(e){return"hex"===e?s.toHex32(this.h.slice(0,12),"big"):s.split32(this.h.slice(0,12),"big")}},714:(e,t,n)=>{var s=n(9566),i=n(2090),r=n(73),a=s.rotr64_hi,o=s.rotr64_lo,l=s.shr64_hi,c=s.shr64_lo,d=s.sum64,u=s.sum64_hi,f=s.sum64_lo,h=s.sum64_4_hi,p=s.sum64_4_lo,m=s.sum64_5_hi,g=s.sum64_5_lo,_=i.BlockHash,b=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function y(){if(!(this instanceof y))return new y;_.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=b,this.W=new Array(160)}function A(e,t,n,s,i){var r=e&n^~e&i;return r<0&&(r+=4294967296),r}function w(e,t,n,s,i,r){var a=t&s^~t&r;return a<0&&(a+=4294967296),a}function x(e,t,n,s,i){var r=e&n^e&i^n&i;return r<0&&(r+=4294967296),r}function v(e,t,n,s,i,r){var a=t&s^t&r^s&r;return a<0&&(a+=4294967296),a}function E(e,t){var n=a(e,t,28)^a(t,e,2)^a(t,e,7);return n<0&&(n+=4294967296),n}function M(e,t){var n=o(e,t,28)^o(t,e,2)^o(t,e,7);return n<0&&(n+=4294967296),n}function z(e,t){var n=o(e,t,14)^o(e,t,18)^o(t,e,9);return n<0&&(n+=4294967296),n}function B(e,t){var n=a(e,t,1)^a(e,t,8)^l(e,t,7);return n<0&&(n+=4294967296),n}function F(e,t){var n=o(e,t,1)^o(e,t,8)^c(e,t,7);return n<0&&(n+=4294967296),n}function k(e,t){var n=o(e,t,19)^o(t,e,29)^c(e,t,6);return n<0&&(n+=4294967296),n}s.inherits(y,_),e.exports=y,y.blockSize=1024,y.outSize=512,y.hmacStrength=192,y.padLength=128,y.prototype._prepareBlock=function(e,t){for(var n=this.W,s=0;s<32;s++)n[s]=e[t+s];for(;s<n.length;s+=2){var i=(g=n[s-4],_=n[s-3],b=void 0,(b=a(g,_,19)^a(_,g,29)^l(g,_,6))<0&&(b+=4294967296),b),r=k(n[s-4],n[s-3]),o=n[s-14],c=n[s-13],d=B(n[s-30],n[s-29]),u=F(n[s-30],n[s-29]),f=n[s-32],m=n[s-31];n[s]=h(i,r,o,c,d,u,f,m),n[s+1]=p(i,r,o,c,d,u,f,m)}var g,_,b},y.prototype._update=function(e,t){this._prepareBlock(e,t);var n,s,i,o=this.W,l=this.h[0],c=this.h[1],h=this.h[2],p=this.h[3],_=this.h[4],b=this.h[5],y=this.h[6],B=this.h[7],F=this.h[8],k=this.h[9],C=this.h[10],O=this.h[11],D=this.h[12],L=this.h[13],T=this.h[14],S=this.h[15];r(this.k.length===o.length);for(var N=0;N<o.length;N+=2){var P=T,I=S,Y=(i=void 0,(i=a(n=F,s=k,14)^a(n,s,18)^a(s,n,9))<0&&(i+=4294967296),i),Q=z(F,k),j=A(F,0,C,0,D),H=w(0,k,0,O,0,L),U=this.k[N],R=this.k[N+1],G=o[N],Z=o[N+1],J=m(P,I,Y,Q,j,H,U,R,G,Z),X=g(P,I,Y,Q,j,H,U,R,G,Z);P=E(l,c),I=M(l,c),Y=x(l,0,h,0,_),Q=v(0,c,0,p,0,b);var W=u(P,I,Y,Q),V=f(P,I,Y,Q);T=D,S=L,D=C,L=O,C=F,O=k,F=u(y,B,J,X),k=f(B,B,J,X),y=_,B=b,_=h,b=p,h=l,p=c,l=u(J,X,W,V),c=f(J,X,W,V)}d(this.h,0,l,c),d(this.h,2,h,p),d(this.h,4,_,b),d(this.h,6,y,B),d(this.h,8,F,k),d(this.h,10,C,O),d(this.h,12,D,L),d(this.h,14,T,S)},y.prototype._digest=function(e){return"hex"===e?s.toHex32(this.h,"big"):s.split32(this.h,"big")}},3085:(e,t,n)=>{var s=n(9566).rotr32;function i(e,t,n){return e&t^~e&n}function r(e,t,n){return e&t^e&n^t&n}function a(e,t,n){return e^t^n}t.ft_1=function(e,t,n,s){return 0===e?i(t,n,s):1===e||3===e?a(t,n,s):2===e?r(t,n,s):void 0},t.ch32=i,t.maj32=r,t.p32=a,t.s0_256=function(e){return s(e,2)^s(e,13)^s(e,22)},t.s1_256=function(e){return s(e,6)^s(e,11)^s(e,25)},t.g0_256=function(e){return s(e,7)^s(e,18)^e>>>3},t.g1_256=function(e){return s(e,17)^s(e,19)^e>>>10}},9566:(e,t,n)=>{var s=n(73),i=n(198);function r(e,t){return 55296==(64512&e.charCodeAt(t))&&!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1))}function a(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function o(e){return 1===e.length?"0"+e:e}function l(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=i,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var n=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)n.push(parseInt(e[i]+e[i+1],16))}else for(var s=0,i=0;i<e.length;i++){var a=e.charCodeAt(i);a<128?n[s++]=a:a<2048?(n[s++]=a>>6|192,n[s++]=63&a|128):r(e,i)?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++i)),n[s++]=a>>18|240,n[s++]=a>>12&63|128,n[s++]=a>>6&63|128,n[s++]=63&a|128):(n[s++]=a>>12|224,n[s++]=a>>6&63|128,n[s++]=63&a|128)}else for(i=0;i<e.length;i++)n[i]=0|e[i];return n},t.toHex=function(e){for(var t="",n=0;n<e.length;n++)t+=o(e[n].toString(16));return t},t.htonl=a,t.toHex32=function(e,t){for(var n="",s=0;s<e.length;s++){var i=e[s];"little"===t&&(i=a(i)),n+=l(i.toString(16))}return n},t.zero2=o,t.zero8=l,t.join32=function(e,t,n,i){var r=n-t;s(r%4==0);for(var a=new Array(r/4),o=0,l=t;o<a.length;o++,l+=4){var c;c="big"===i?e[l]<<24|e[l+1]<<16|e[l+2]<<8|e[l+3]:e[l+3]<<24|e[l+2]<<16|e[l+1]<<8|e[l],a[o]=c>>>0}return a},t.split32=function(e,t){for(var n=new Array(4*e.length),s=0,i=0;s<e.length;s++,i+=4){var r=e[s];"big"===t?(n[i]=r>>>24,n[i+1]=r>>>16&255,n[i+2]=r>>>8&255,n[i+3]=255&r):(n[i+3]=r>>>24,n[i+2]=r>>>16&255,n[i+1]=r>>>8&255,n[i]=255&r)}return n},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,n){return e+t+n>>>0},t.sum32_4=function(e,t,n,s){return e+t+n+s>>>0},t.sum32_5=function(e,t,n,s,i){return e+t+n+s+i>>>0},t.sum64=function(e,t,n,s){var i=e[t],r=s+e[t+1]>>>0,a=(r<s?1:0)+n+i;e[t]=a>>>0,e[t+1]=r},t.sum64_hi=function(e,t,n,s){return(t+s>>>0<t?1:0)+e+n>>>0},t.sum64_lo=function(e,t,n,s){return t+s>>>0},t.sum64_4_hi=function(e,t,n,s,i,r,a,o){var l=0,c=t;return l+=(c=c+s>>>0)<t?1:0,l+=(c=c+r>>>0)<r?1:0,e+n+i+a+(l+=(c=c+o>>>0)<o?1:0)>>>0},t.sum64_4_lo=function(e,t,n,s,i,r,a,o){return t+s+r+o>>>0},t.sum64_5_hi=function(e,t,n,s,i,r,a,o,l,c){var d=0,u=t;return d+=(u=u+s>>>0)<t?1:0,d+=(u=u+r>>>0)<r?1:0,d+=(u=u+o>>>0)<o?1:0,e+n+i+a+l+(d+=(u=u+c>>>0)<c?1:0)>>>0},t.sum64_5_lo=function(e,t,n,s,i,r,a,o,l,c){return t+s+r+o+c>>>0},t.rotr64_hi=function(e,t,n){return(t<<32-n|e>>>n)>>>0},t.rotr64_lo=function(e,t,n){return(e<<32-n|t>>>n)>>>0},t.shr64_hi=function(e,t,n){return e>>>n},t.shr64_lo=function(e,t,n){return(e<<32-n|t>>>n)>>>0}},4313:(e,t,n)=>{var s=Function.prototype.call,i=Object.prototype.hasOwnProperty,r=n(4499);e.exports=r.call(s,i)},8239:(e,t)=>{t.read=function(e,t,n,s,i){var r,a,o=8*i-s-1,l=(1<<o)-1,c=l>>1,d=-7,u=n?i-1:0,f=n?-1:1,h=e[t+u];for(u+=f,r=h&(1<<-d)-1,h>>=-d,d+=o;d>0;r=256*r+e[t+u],u+=f,d-=8);for(a=r&(1<<-d)-1,r>>=-d,d+=s;d>0;a=256*a+e[t+u],u+=f,d-=8);if(0===r)r=1-c;else{if(r===l)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,s),r-=c}return(h?-1:1)*a*Math.pow(2,r-s)},t.write=function(e,t,n,s,i,r){var a,o,l,c=8*r-i-1,d=(1<<c)-1,u=d>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=s?0:r-1,p=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=d):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+u>=1?f/l:f*Math.pow(2,1-u))*l>=2&&(a++,l/=2),a+u>=d?(o=0,a=d):a+u>=1?(o=(t*l-1)*Math.pow(2,i),a+=u):(o=t*Math.pow(2,u-1)*Math.pow(2,i),a=0));i>=8;e[n+h]=255&o,h+=p,o/=256,i-=8);for(a=a<<i|o,c+=i;c>0;e[n+h]=255&a,h+=p,a/=256,c-=8);e[n+h-p]|=128*m}},198:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},5456:(e,t,n)=>{var s=n(1432)(),i=n(9343)("Object.prototype.toString"),r=function(e){return!(s&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===i(e)},a=function(e){return!!r(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==i(e)&&"[object Function]"===i(e.callee)},o=function(){return r(arguments)}();r.isLegacyArguments=a,e.exports=o?r:a},9916:e=>{var t,n,s=Function.prototype.toString,i="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof i&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw n}}),n={},i((function(){throw 42}),null,t)}catch(e){e!==n&&(i=null)}else i=null;var r=/^\s*class\b/,a=function(e){try{var t=s.call(e);return r.test(t)}catch(e){return!1}},o=function(e){try{return!a(e)&&(s.call(e),!0)}catch(e){return!1}},l=Object.prototype.toString,c="function"==typeof Symbol&&!!Symbol.toStringTag,d=!(0 in[,]),u=function(){return!1};if("object"==typeof document){var f=document.all;l.call(f)===l.call(document.all)&&(u=function(e){if((d||!e)&&(void 0===e||"object"==typeof e))try{var t=l.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}e.exports=i?function(e){if(u(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;try{i(e,null,t)}catch(e){if(e!==n)return!1}return!a(e)&&o(e)}:function(e){if(u(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(c)return o(e);if(a(e))return!1;var t=l.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&o(e)}},6940:(e,t,n)=>{var s,i=Object.prototype.toString,r=Function.prototype.toString,a=/^\s*(?:function)?\*/,o=n(1432)(),l=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(a.test(r.call(e)))return!0;if(!o)return"[object GeneratorFunction]"===i.call(e);if(!l)return!1;if(void 0===s){var t=function(){if(!o)return!1;try{return Function("return function*() {}")()}catch(e){}}();s=!!t&&l(t)}return l(e)===s}},2116:(e,t,n)=>{var s=n(6059);e.exports=function(e){return!!s(e)}},4247:e=>{var t=1/0,n=9007199254740991,s=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,a=/^0o[0-7]+$/i,o=/^(?:0|[1-9]\d*)$/,l=parseInt,c=Object.prototype.toString,d=Math.ceil,u=Math.max;function f(e,t,n){var s=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var r=Array(i);++s<i;)r[s]=e[s+t];return r}function h(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}e.exports=function(e,p,m){p=(m?function(e,t,s){if(!h(s))return!1;var i=typeof t;return!!("number"==i?function(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}(e.length)&&!function(e){var t=h(e)?c.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)}(s)&&function(e,t){return!!(t=null==t?n:t)&&("number"==typeof e||o.test(e))&&e>-1&&e%1==0&&e<t}(t,s.length):"string"==i&&t in s)&&function(e,t){return e===t||e!=e&&t!=t}(s[t],e)}(e,p,m):void 0===p)?1:u(function(e){var n=function(e){return e?(e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==c.call(e)}(e))return NaN;if(h(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=h(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var n=r.test(e);return n||a.test(e)?l(e.slice(2),n?2:8):i.test(e)?NaN:+e}(e))===t||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}(e),o=n%1;return n==n?o?n-o:n:0}(p),0);var g=e?e.length:0;if(!g||p<1)return[];for(var _=0,b=0,y=Array(d(g/p));_<g;)y[b++]=f(e,_,_+=p);return y}},7842:(e,t,n)=>{e=n.nmd(e);var s="__lodash_hash_undefined__",i=1,r=2,a=9007199254740991,o="[object Arguments]",l="[object Array]",c="[object AsyncFunction]",d="[object Boolean]",u="[object Date]",f="[object Error]",h="[object Function]",p="[object GeneratorFunction]",m="[object Map]",g="[object Number]",_="[object Null]",b="[object Object]",y="[object Promise]",A="[object Proxy]",w="[object RegExp]",x="[object Set]",v="[object String]",E="[object Undefined]",M="[object WeakMap]",z="[object ArrayBuffer]",B="[object DataView]",F=/^\[object .+?Constructor\]$/,k=/^(?:0|[1-9]\d*)$/,C={};C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C[o]=C[l]=C[z]=C[d]=C[B]=C[u]=C[f]=C[h]=C[m]=C[g]=C[b]=C[w]=C[x]=C[v]=C[M]=!1;var O="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,D="object"==typeof self&&self&&self.Object===Object&&self,L=O||D||Function("return this")(),T=t&&!t.nodeType&&t,S=T&&e&&!e.nodeType&&e,N=S&&S.exports===T,P=N&&O.process,I=function(){try{return P&&P.binding&&P.binding("util")}catch(e){}}(),Y=I&&I.isTypedArray;function Q(e,t){for(var n=-1,s=null==e?0:e.length;++n<s;)if(t(e[n],n,e))return!0;return!1}function j(e){var t=-1,n=Array(e.size);return e.forEach((function(e,s){n[++t]=[s,e]})),n}function H(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var U,R,G,Z=Array.prototype,J=Function.prototype,X=Object.prototype,W=L["__core-js_shared__"],V=J.toString,q=X.hasOwnProperty,K=(U=/[^.]+$/.exec(W&&W.keys&&W.keys.IE_PROTO||""))?"Symbol(src)_1."+U:"",$=X.toString,ee=RegExp("^"+V.call(q).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=N?L.Buffer:void 0,ne=L.Symbol,se=L.Uint8Array,ie=X.propertyIsEnumerable,re=Z.splice,ae=ne?ne.toStringTag:void 0,oe=Object.getOwnPropertySymbols,le=te?te.isBuffer:void 0,ce=(R=Object.keys,G=Object,function(e){return R(G(e))}),de=Se(L,"DataView"),ue=Se(L,"Map"),fe=Se(L,"Promise"),he=Se(L,"Set"),pe=Se(L,"WeakMap"),me=Se(Object,"create"),ge=Ye(de),_e=Ye(ue),be=Ye(fe),ye=Ye(he),Ae=Ye(pe),we=ne?ne.prototype:void 0,xe=we?we.valueOf:void 0;function ve(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var s=e[t];this.set(s[0],s[1])}}function Ee(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var s=e[t];this.set(s[0],s[1])}}function Me(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var s=e[t];this.set(s[0],s[1])}}function ze(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Me;++t<n;)this.add(e[t])}function Be(e){var t=this.__data__=new Ee(e);this.size=t.size}function Fe(e,t){for(var n=e.length;n--;)if(Qe(e[n][0],t))return n;return-1}function ke(e){return null==e?void 0===e?E:_:ae&&ae in Object(e)?function(e){var t=q.call(e,ae),n=e[ae];try{e[ae]=void 0;var s=!0}catch(e){}var i=$.call(e);return s&&(t?e[ae]=n:delete e[ae]),i}(e):function(e){return $.call(e)}(e)}function Ce(e){return Je(e)&&ke(e)==o}function Oe(e,t,n,s,a){return e===t||(null==e||null==t||!Je(e)&&!Je(t)?e!=e&&t!=t:function(e,t,n,s,a,c){var h=He(e),p=He(t),_=h?l:Pe(e),y=p?l:Pe(t),A=(_=_==o?b:_)==b,E=(y=y==o?b:y)==b,M=_==y;if(M&&Ue(e)){if(!Ue(t))return!1;h=!0,A=!1}if(M&&!A)return c||(c=new Be),h||Xe(e)?De(e,t,n,s,a,c):function(e,t,n,s,a,o,l){switch(n){case B:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case z:return!(e.byteLength!=t.byteLength||!o(new se(e),new se(t)));case d:case u:case g:return Qe(+e,+t);case f:return e.name==t.name&&e.message==t.message;case w:case v:return e==t+"";case m:var c=j;case x:var h=s&i;if(c||(c=H),e.size!=t.size&&!h)return!1;var p=l.get(e);if(p)return p==t;s|=r,l.set(e,t);var _=De(c(e),c(t),s,a,o,l);return l.delete(e),_;case"[object Symbol]":if(xe)return xe.call(e)==xe.call(t)}return!1}(e,t,_,n,s,a,c);if(!(n&i)){var F=A&&q.call(e,"__wrapped__"),k=E&&q.call(t,"__wrapped__");if(F||k){var C=F?e.value():e,O=k?t.value():t;return c||(c=new Be),a(C,O,n,s,c)}}return!!M&&(c||(c=new Be),function(e,t,n,s,r,a){var o=n&i,l=Le(e),c=l.length;if(c!=Le(t).length&&!o)return!1;for(var d=c;d--;){var u=l[d];if(!(o?u in t:q.call(t,u)))return!1}var f=a.get(e);if(f&&a.get(t))return f==t;var h=!0;a.set(e,t),a.set(t,e);for(var p=o;++d<c;){var m=e[u=l[d]],g=t[u];if(s)var _=o?s(g,m,u,t,e,a):s(m,g,u,e,t,a);if(!(void 0===_?m===g||r(m,g,n,s,a):_)){h=!1;break}p||(p="constructor"==u)}if(h&&!p){var b=e.constructor,y=t.constructor;b==y||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof y&&y instanceof y||(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,s,a,c))}(e,t,n,s,Oe,a))}function De(e,t,n,s,a,o){var l=n&i,c=e.length,d=t.length;if(c!=d&&!(l&&d>c))return!1;var u=o.get(e);if(u&&o.get(t))return u==t;var f=-1,h=!0,p=n&r?new ze:void 0;for(o.set(e,t),o.set(t,e);++f<c;){var m=e[f],g=t[f];if(s)var _=l?s(g,m,f,t,e,o):s(m,g,f,e,t,o);if(void 0!==_){if(_)continue;h=!1;break}if(p){if(!Q(t,(function(e,t){if(i=t,!p.has(i)&&(m===e||a(m,e,n,s,o)))return p.push(t);var i}))){h=!1;break}}else if(m!==g&&!a(m,g,n,s,o)){h=!1;break}}return o.delete(e),o.delete(t),h}function Le(e){return function(e,t,n){var s=t(e);return He(e)?s:function(e,t){for(var n=-1,s=t.length,i=e.length;++n<s;)e[i+n]=t[n];return e}(s,n(e))}(e,We,Ne)}function Te(e,t){var n,s,i=e.__data__;return("string"==(s=typeof(n=t))||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function Se(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Ze(e)||function(e){return!!K&&K in e}(e))&&(Re(e)?ee:F).test(Ye(e))}(n)?n:void 0}ve.prototype.clear=function(){this.__data__=me?me(null):{},this.size=0},ve.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ve.prototype.get=function(e){var t=this.__data__;if(me){var n=t[e];return n===s?void 0:n}return q.call(t,e)?t[e]:void 0},ve.prototype.has=function(e){var t=this.__data__;return me?void 0!==t[e]:q.call(t,e)},ve.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=me&&void 0===t?s:t,this},Ee.prototype.clear=function(){this.__data__=[],this.size=0},Ee.prototype.delete=function(e){var t=this.__data__,n=Fe(t,e);return!(n<0||(n==t.length-1?t.pop():re.call(t,n,1),--this.size,0))},Ee.prototype.get=function(e){var t=this.__data__,n=Fe(t,e);return n<0?void 0:t[n][1]},Ee.prototype.has=function(e){return Fe(this.__data__,e)>-1},Ee.prototype.set=function(e,t){var n=this.__data__,s=Fe(n,e);return s<0?(++this.size,n.push([e,t])):n[s][1]=t,this},Me.prototype.clear=function(){this.size=0,this.__data__={hash:new ve,map:new(ue||Ee),string:new ve}},Me.prototype.delete=function(e){var t=Te(this,e).delete(e);return this.size-=t?1:0,t},Me.prototype.get=function(e){return Te(this,e).get(e)},Me.prototype.has=function(e){return Te(this,e).has(e)},Me.prototype.set=function(e,t){var n=Te(this,e),s=n.size;return n.set(e,t),this.size+=n.size==s?0:1,this},ze.prototype.add=ze.prototype.push=function(e){return this.__data__.set(e,s),this},ze.prototype.has=function(e){return this.__data__.has(e)},Be.prototype.clear=function(){this.__data__=new Ee,this.size=0},Be.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Be.prototype.get=function(e){return this.__data__.get(e)},Be.prototype.has=function(e){return this.__data__.has(e)},Be.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Ee){var s=n.__data__;if(!ue||s.length<199)return s.push([e,t]),this.size=++n.size,this;n=this.__data__=new Me(s)}return n.set(e,t),this.size=n.size,this};var Ne=oe?function(e){return null==e?[]:(e=Object(e),function(t,n){for(var s=-1,i=null==t?0:t.length,r=0,a=[];++s<i;){var o=t[s];l=o,ie.call(e,l)&&(a[r++]=o)}var l;return a}(oe(e)))}:function(){return[]},Pe=ke;function Ie(e,t){return!!(t=null==t?a:t)&&("number"==typeof e||k.test(e))&&e>-1&&e%1==0&&e<t}function Ye(e){if(null!=e){try{return V.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Qe(e,t){return e===t||e!=e&&t!=t}(de&&Pe(new de(new ArrayBuffer(1)))!=B||ue&&Pe(new ue)!=m||fe&&Pe(fe.resolve())!=y||he&&Pe(new he)!=x||pe&&Pe(new pe)!=M)&&(Pe=function(e){var t=ke(e),n=t==b?e.constructor:void 0,s=n?Ye(n):"";if(s)switch(s){case ge:return B;case _e:return m;case be:return y;case ye:return x;case Ae:return M}return t});var je=Ce(function(){return arguments}())?Ce:function(e){return Je(e)&&q.call(e,"callee")&&!ie.call(e,"callee")},He=Array.isArray,Ue=le||function(){return!1};function Re(e){if(!Ze(e))return!1;var t=ke(e);return t==h||t==p||t==c||t==A}function Ge(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=a}function Ze(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Je(e){return null!=e&&"object"==typeof e}var Xe=Y?function(e){return function(t){return e(t)}}(Y):function(e){return Je(e)&&Ge(e.length)&&!!C[ke(e)]};function We(e){return null!=(t=e)&&Ge(t.length)&&!Re(t)?function(e,t){var n=He(e),s=!n&&je(e),i=!n&&!s&&Ue(e),r=!n&&!s&&!i&&Xe(e),a=n||s||i||r,o=a?function(e,t){for(var n=-1,s=Array(e);++n<e;)s[n]=t(n);return s}(e.length,String):[],l=o.length;for(var c in e)!t&&!q.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||r&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ie(c,l))||o.push(c);return o}(e):function(e){if(n=(t=e)&&t.constructor,t!==("function"==typeof n&&n.prototype||X))return ce(e);var t,n,s=[];for(var i in Object(e))q.call(e,i)&&"constructor"!=i&&s.push(i);return s}(e);var t}e.exports=function(e,t){return Oe(e,t)}},7563:(e,t,n)=>{var s="__lodash_hash_undefined__",i=9007199254740991,r="[object Arguments]",a="[object Function]",o="[object GeneratorFunction]",l=/^\[object .+?Constructor\]$/,c=/^(?:0|[1-9]\d*)$/,d="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u="object"==typeof self&&self&&self.Object===Object&&self,f=d||u||Function("return this")();function h(e,t){return!(!e||!e.length)&&function(e,t,n){if(t!=t)return function(e,t,n,s){for(var i=e.length,r=-1;++r<i;)if(t(e[r],r,e))return r;return-1}(e,g);for(var s=-1,i=e.length;++s<i;)if(e[s]===t)return s;return-1}(e,t)>-1}function p(e,t){for(var n=-1,s=e?e.length:0,i=Array(s);++n<s;)i[n]=t(e[n],n,e);return i}function m(e,t){for(var n=-1,s=t.length,i=e.length;++n<s;)e[i+n]=t[n];return e}function g(e){return e!=e}function _(e,t){return e.has(t)}function b(e,t){return function(n){return e(t(n))}}var y,A=Array.prototype,w=Function.prototype,x=Object.prototype,v=f["__core-js_shared__"],E=(y=/[^.]+$/.exec(v&&v.keys&&v.keys.IE_PROTO||""))?"Symbol(src)_1."+y:"",M=w.toString,z=x.hasOwnProperty,B=x.toString,F=RegExp("^"+M.call(z).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),k=f.Symbol,C=b(Object.getPrototypeOf,Object),O=x.propertyIsEnumerable,D=A.splice,L=k?k.isConcatSpreadable:void 0,T=Object.getOwnPropertySymbols,S=Math.max,N=G(f,"Map"),P=G(Object,"create");function I(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var s=e[t];this.set(s[0],s[1])}}function Y(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var s=e[t];this.set(s[0],s[1])}}function Q(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var s=e[t];this.set(s[0],s[1])}}function j(e){var t=-1,n=e?e.length:0;for(this.__data__=new Q;++t<n;)this.add(e[t])}function H(e,t){for(var n,s,i=e.length;i--;)if((n=e[i][0])===(s=t)||n!=n&&s!=s)return i;return-1}function U(e,t,n,s,i){var r=-1,a=e.length;for(n||(n=X),i||(i=[]);++r<a;){var o=e[r];t>0&&n(o)?t>1?U(o,t-1,n,s,i):m(i,o):s||(i[i.length]=o)}return i}function R(e,t){var n,s,i=e.__data__;return("string"==(s=typeof(n=t))||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function G(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){if(!te(e)||E&&E in e)return!1;var t=ee(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?F:l;return t.test(function(e){if(null!=e){try{return M.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}(n)?n:void 0}I.prototype.clear=function(){this.__data__=P?P(null):{}},I.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},I.prototype.get=function(e){var t=this.__data__;if(P){var n=t[e];return n===s?void 0:n}return z.call(t,e)?t[e]:void 0},I.prototype.has=function(e){var t=this.__data__;return P?void 0!==t[e]:z.call(t,e)},I.prototype.set=function(e,t){return this.__data__[e]=P&&void 0===t?s:t,this},Y.prototype.clear=function(){this.__data__=[]},Y.prototype.delete=function(e){var t=this.__data__,n=H(t,e);return!(n<0||(n==t.length-1?t.pop():D.call(t,n,1),0))},Y.prototype.get=function(e){var t=this.__data__,n=H(t,e);return n<0?void 0:t[n][1]},Y.prototype.has=function(e){return H(this.__data__,e)>-1},Y.prototype.set=function(e,t){var n=this.__data__,s=H(n,e);return s<0?n.push([e,t]):n[s][1]=t,this},Q.prototype.clear=function(){this.__data__={hash:new I,map:new(N||Y),string:new I}},Q.prototype.delete=function(e){return R(this,e).delete(e)},Q.prototype.get=function(e){return R(this,e).get(e)},Q.prototype.has=function(e){return R(this,e).has(e)},Q.prototype.set=function(e,t){return R(this,e).set(e,t),this},j.prototype.add=j.prototype.push=function(e){return this.__data__.set(e,s),this},j.prototype.has=function(e){return this.__data__.has(e)};var Z=T?b(T,Object):oe,J=T?function(e){for(var t=[];e;)m(t,Z(e)),e=C(e);return t}:oe;function X(e){return K(e)||q(e)||!!(L&&e&&e[L])}function W(e,t){return!!(t=null==t?i:t)&&("number"==typeof e||c.test(e))&&e>-1&&e%1==0&&e<t}function V(e){if("string"==typeof e||function(e){return"symbol"==typeof e||ne(e)&&"[object Symbol]"==B.call(e)}(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function q(e){return function(e){return ne(e)&&$(e)}(e)&&z.call(e,"callee")&&(!O.call(e,"callee")||B.call(e)==r)}var K=Array.isArray;function $(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=i}(e.length)&&!ee(e)}function ee(e){var t=te(e)?B.call(e):"";return t==a||t==o}function te(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function ne(e){return!!e&&"object"==typeof e}function se(e){return $(e)?function(e,t){var n=K(e)||q(e)?function(e,t){for(var n=-1,s=Array(e);++n<e;)s[n]=t(n);return s}(e.length,String):[],s=n.length,i=!!s;for(var r in e)!t&&!z.call(e,r)||i&&("length"==r||W(r,s))||n.push(r);return n}(e,!0):function(e){if(!te(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t,n,s=(n=(t=e)&&t.constructor,t===("function"==typeof n&&n.prototype||x)),i=[];for(var r in e)("constructor"!=r||!s&&z.call(e,r))&&i.push(r);return i}(e)}var ie,re,ae=(ie=function(e,t){return null==e?{}:(t=p(U(t,1),V),function(e,t){return function(e,t,n){for(var s=-1,i=t.length,r={};++s<i;){var a=t[s],o=e[a];n(0,a)&&(r[a]=o)}return r}(e=Object(e),t,(function(t,n){return n in e}))}(e,function(e,t,n,s){var i=-1,r=h,a=!0,o=e.length,l=[],c=t.length;if(!o)return l;t.length>=200&&(r=_,a=!1,t=new j(t));e:for(;++i<o;){var d=e[i],u=d;if(d=0!==d?d:0,a&&u==u){for(var f=c;f--;)if(t[f]===u)continue e;l.push(d)}else r(t,u,s)||l.push(d)}return l}(function(e){return function(e,t,n){var s=t(e);return K(e)?s:m(s,n(e))}(e,se,J)}(e),t)))},re=S(void 0===re?ie.length-1:re,0),function(){for(var e=arguments,t=-1,n=S(e.length-re,0),s=Array(n);++t<n;)s[t]=e[re+t];t=-1;for(var i=Array(re+1);++t<re;)i[t]=e[t];return i[re]=s,function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(ie,this,i)});function oe(){return[]}e.exports=ae},5732:e=>{var t=1/0,n=4294967295,s=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,a=/^0o[0-7]+$/i,o=parseInt,l=Object.prototype.toString,c=Math.min;function d(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function u(e){return e}e.exports=function(e,f){if((e=function(e){var n=function(e){return e?(e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==l.call(e)}(e))return NaN;if(d(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=d(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var n=r.test(e);return n||a.test(e)?o(e.slice(2),n?2:8):i.test(e)?NaN:+e}(e))===t||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}(e),c=n%1;return n==n?c?n-c:n:0}(e))<1||e>9007199254740991)return[];var h=n,p=c(e,n);e-=n;for(var m=function(e,t){for(var n=-1,s=Array(e);++n<e;)s[n]=t(n);return s}(p,f="function"==typeof f?f:u);++h<e;)f(h);return m}},73:e=>{function t(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=t,t.equal=function(e,t,n){if(e!=t)throw new Error(n||"Assertion failed: "+e+" != "+t)}},1895:(e,t,n)=>{var s;if(!Object.keys){var i=Object.prototype.hasOwnProperty,r=Object.prototype.toString,a=n(8825),o=Object.prototype.propertyIsEnumerable,l=!o.call({toString:null},"toString"),c=o.call((function(){}),"prototype"),d=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],u=function(e){var t=e.constructor;return t&&t.prototype===e},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},h=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&i.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{u(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();s=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===r.call(e),s=a(e),o=t&&"[object String]"===r.call(e),f=[];if(!t&&!n&&!s)throw new TypeError("Object.keys called on a non-object");var p=c&&n;if(o&&e.length>0&&!i.call(e,0))for(var m=0;m<e.length;++m)f.push(String(m));if(s&&e.length>0)for(var g=0;g<e.length;++g)f.push(String(g));else for(var _ in e)p&&"prototype"===_||!i.call(e,_)||f.push(String(_));if(l)for(var b=function(e){if("undefined"==typeof window||!h)return u(e);try{return u(e)}catch(e){return!1}}(e),y=0;y<d.length;++y)b&&"constructor"===d[y]||!i.call(e,d[y])||f.push(d[y]);return f}}e.exports=s},3425:(e,t,n)=>{var s=Array.prototype.slice,i=n(8825),r=Object.keys,a=r?function(e){return r(e)}:n(1895),o=Object.keys;a.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return i(e)?o(s.call(e)):o(e)})}else Object.keys=a;return Object.keys||a},e.exports=a},8825:e=>{var t=Object.prototype.toString;e.exports=function(e){var n=t.call(e),s="[object Arguments]"===n;return s||(s="[object Array]"!==n&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),s}},8599:(e,t,n)=>{var s=n(3425),i=n(4361)(),r=n(9343),a=Object,o=r("Array.prototype.push"),l=r("Object.prototype.propertyIsEnumerable"),c=i?Object.getOwnPropertySymbols:null;e.exports=function(e,t){if(null==e)throw new TypeError("target must be an object");var n=a(e);if(1===arguments.length)return n;for(var r=1;r<arguments.length;++r){var d=a(arguments[r]),u=s(d),f=i&&(Object.getOwnPropertySymbols||c);if(f)for(var h=f(d),p=0;p<h.length;++p){var m=h[p];l(d,m)&&o(u,m)}for(var g=0;g<u.length;++g){var _=u[g];if(l(d,_)){var b=d[_];n[_]=b}}}return n}},8662:(e,t,n)=>{var s=n(8599);e.exports=function(){return Object.assign?function(){if(!Object.assign)return!1;for(var e="abcdefghijklmnopqrst",t=e.split(""),n={},s=0;s<t.length;++s)n[t[s]]=t[s];var i=Object.assign({},n),r="";for(var a in i)r+=a;return e!==r}()||function(){if(!Object.assign||!Object.preventExtensions)return!1;var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch(t){return"y"===e[1]}return!1}()?s:Object.assign:s}},6350:e=>{e.exports=["Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array"]},8101:e=>{function t(e){try{return JSON.stringify(e)}catch(e){return'"[Circular]"'}}e.exports=function(e,n,s){var i=s&&s.stringify||t;if("object"==typeof e&&null!==e){var r=n.length+1;if(1===r)return e;var a=new Array(r);a[0]=i(e);for(var o=1;o<r;o++)a[o]=i(n[o]);return a.join(" ")}if("string"!=typeof e)return e;var l=n.length;if(0===l)return e;for(var c="",d=0,u=-1,f=e&&e.length||0,h=0;h<f;){if(37===e.charCodeAt(h)&&h+1<f){switch(u=u>-1?u:0,e.charCodeAt(h+1)){case 100:case 102:if(d>=l)break;if(null==n[d])break;u<h&&(c+=e.slice(u,h)),c+=Number(n[d]),u=h+2,h++;break;case 105:if(d>=l)break;if(null==n[d])break;u<h&&(c+=e.slice(u,h)),c+=Math.floor(Number(n[d])),u=h+2,h++;break;case 79:case 111:case 106:if(d>=l)break;if(void 0===n[d])break;u<h&&(c+=e.slice(u,h));var p=typeof n[d];if("string"===p){c+="'"+n[d]+"'",u=h+2,h++;break}if("function"===p){c+=n[d].name||"<anonymous>",u=h+2,h++;break}c+=i(n[d]),u=h+2,h++;break;case 115:if(d>=l)break;u<h&&(c+=e.slice(u,h)),c+=String(n[d]),u=h+2,h++;break;case 37:u<h&&(c+=e.slice(u,h)),c+="%",u=h+2,h++,d--}++d}++h}return-1===u?e:(u<f&&(c+=e.slice(u)),c)}},8973:(e,t,n)=>{var s=n(8897),i=n(9381),r=n(6900)(),a=n(1399),o=n(1711),l=s("%Math.floor%");e.exports=function(e,t){if("function"!=typeof e)throw new o("`fn` is not a function");if("number"!=typeof t||t<0||t>4294967295||l(t)!==t)throw new o("`length` must be a positive 32-bit integer");var n=arguments.length>2&&!!arguments[2],s=!0,c=!0;if("length"in e&&a){var d=a(e,"length");d&&!d.configurable&&(s=!1),d&&!d.writable&&(c=!1)}return(s||c||!n)&&(r?i(e,"length",t,!0,!0):i(e,"length",t)),e}},3322:(e,t,n)=>{t.vm=void 0;var s,i=n(8891),r=(s=n(1733))&&s.__esModule?s:{default:s},a=function(e){var t=e.allowedSizes,n=e.defaultSize,s=e.padding;return function e(){var a=this,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n;if(!this||this.constructor!==e)return new e(o);if(t&&!t.includes(o))throw new Error("Unsupported hash length");var l=new r.default({capacity:o});return this.update=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf8";if(i.Buffer.isBuffer(e))return l.absorb(e),a;if("string"==typeof e)return a.update(i.Buffer.from(e,t));throw new TypeError("Not a string or buffer")},this.digest=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"binary",t="string"==typeof e?{format:e}:e,n=l.squeeze({buffer:t.buffer,padding:t.padding||s});return t.format&&"binary"!==t.format?n.toString(t.format):n},this.reset=function(){return l.reset(),a},this}},o=a({allowedSizes:[224,256,384,512],defaultSize:512,padding:1});t.vm=o;var l=a({allowedSizes:[224,256,384,512],defaultSize:512,padding:6});a({allowedSizes:[128,256],defaultSize:256,padding:31});var c=o;l.SHA3Hash=c},1733:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=n(8891),r=(s=n(1356))&&s.__esModule?s:{default:s},a=function(e,t){for(var n=0;n<e.length;n+=8){var s=n/4;t[s]^=e[n+7]<<24|e[n+6]<<16|e[n+5]<<8|e[n+4],t[s+1]^=e[n+3]<<24|e[n+2]<<16|e[n+1]<<8|e[n]}return t},o=function(e,t){for(var n=0;n<t.length;n+=8){var s=n/4;t[n]=e[s+1],t[n+1]=e[s+1]>>>8,t[n+2]=e[s+1]>>>16,t[n+3]=e[s+1]>>>24,t[n+4]=e[s],t[n+5]=e[s]>>>8,t[n+6]=e[s]>>>16,t[n+7]=e[s]>>>24}return t};t.default=function(e){var t=this,n=e.capacity,s=e.padding,l=(0,r.default)(),c=n/8,d=200-n/4,u=0,f=new Uint32Array(50),h=i.Buffer.allocUnsafe(d);return this.absorb=function(e){for(var n=0;n<e.length;n++)h[u]=e[n],(u+=1)>=d&&(a(h,f),l(f),u=0);return t},this.squeeze=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={buffer:e.buffer||i.Buffer.allocUnsafe(c),padding:e.padding||s,queue:i.Buffer.allocUnsafe(h.length),state:new Uint32Array(f.length)};h.copy(t.queue);for(var n=0;n<f.length;n++)t.state[n]=f[n];t.queue.fill(0,u),t.queue[u]|=t.padding,t.queue[d-1]|=128,a(t.queue,t.state);for(var r=0;r<t.buffer.length;r+=d)l(t.state),o(t.state,t.buffer.slice(r,r+d));return t.buffer},this.reset=function(){return h.fill(0),f.fill(0),u=0,t},this}},737:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(1120))&&s.__esModule?s:{default:s};t.default=function(e){for(var t=e.A,n=e.C,s=0;s<25;s+=5){for(var r=0;r<5;r++)(0,i.default)(t,s+r)(n,r);for(var a=0;a<5;a++){var o=2*(s+a),l=(a+1)%5*2,c=(a+2)%5*2;t[o]^=~n[l]&n[c],t[o+1]^=~n[l+1]&n[c+1]}}}},1120:e=>{e.exports=function(e,t){return function(n,s){var i=2*s,r=2*t;n[i]=e[r],n[i+1]=e[r+1]}}},1356:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=o(n(737)),i=o(n(9810)),r=o(n(3915)),a=o(n(8547));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(){var e=new Uint32Array(10),t=new Uint32Array(10),n=new Uint32Array(2);return function(o){for(var l=0;l<24;l++)(0,a.default)({A:o,C:e,D:t,W:n}),(0,r.default)({A:o,C:e,W:n}),(0,s.default)({A:o,C:e}),(0,i.default)({A:o,roundIndex:l});e.fill(0),t.fill(0),n.fill(0)}}},9810:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(1))&&s.__esModule?s:{default:s};t.default=function(e){var t=e.A,n=2*e.roundIndex;t[0]^=i.default[n],t[1]^=i.default[n+1]}},1:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=new Uint32Array([0,1,0,32898,2147483648,32906,2147483648,2147516416,0,32907,0,2147483649,2147483648,2147516545,2147483648,32777,0,138,0,136,0,2147516425,0,2147483658,0,2147516555,2147483648,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,0,32778,2147483648,2147483658,2147483648,2147516545,2147483648,32896,0,2147483649,2147483648,2147516424]);t.default=n},3915:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=a(n(1795)),i=a(n(7997)),r=a(n(1120));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=e.A,n=e.C,a=e.W;(0,r.default)(t,1)(a,0);for(var o=0,l=0,c=0,d=32,u=0;u<24;u++){var f=s.default[u],h=i.default[u];(0,r.default)(t,f)(n,0),o=a[0],l=a[1],d=32-h,a[c=h<32?0:1]=o<<h|l>>>d,a[(c+1)%2]=l<<h|o>>>d,(0,r.default)(a,0)(t,f),(0,r.default)(n,0)(a,0)}}},1795:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=[10,7,11,17,18,3,5,16,8,21,24,4,15,23,19,13,12,2,20,14,22,9,6,1]},7997:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=[1,3,6,10,15,21,28,36,45,55,2,14,27,41,56,8,25,43,62,18,39,61,20,44]},8547:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(1120))&&s.__esModule?s:{default:s};t.default=function(e){for(var t=e.A,n=e.C,s=e.D,r=e.W,a=0,o=0,l=0;l<5;l++){var c=2*l,d=2*(l+5),u=2*(l+10),f=2*(l+15),h=2*(l+20);n[c]=t[c]^t[d]^t[u]^t[f]^t[h],n[c+1]=t[c+1]^t[d+1]^t[u+1]^t[f+1]^t[h+1]}for(var p=0;p<5;p++){(0,i.default)(n,(p+1)%5)(r,0),a=r[0],o=r[1],r[0]=a<<1|o>>>31,r[1]=o<<1|a>>>31,s[2*p]=n[(p+4)%5*2]^r[0],s[2*p+1]=n[(p+4)%5*2+1]^r[1];for(var m=0;m<25;m+=5)t[2*(m+p)]^=s[2*p],t[2*(m+p)+1]^=s[2*p+1]}}},5171:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},1028:(e,t,n)=>{var s=n(5456),i=n(6940),r=n(6059),a=n(2116);function o(e){return e.call.bind(e)}var l="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,d=o(Object.prototype.toString),u=o(Number.prototype.valueOf),f=o(String.prototype.valueOf),h=o(Boolean.prototype.valueOf);if(l)var p=o(BigInt.prototype.valueOf);if(c)var m=o(Symbol.prototype.valueOf);function g(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function _(e){return"[object Map]"===d(e)}function b(e){return"[object Set]"===d(e)}function y(e){return"[object WeakMap]"===d(e)}function A(e){return"[object WeakSet]"===d(e)}function w(e){return"[object ArrayBuffer]"===d(e)}function x(e){return"undefined"!=typeof ArrayBuffer&&(w.working?w(e):e instanceof ArrayBuffer)}function v(e){return"[object DataView]"===d(e)}function E(e){return"undefined"!=typeof DataView&&(v.working?v(e):e instanceof DataView)}t.isArgumentsObject=s,t.isGeneratorFunction=i,t.isTypedArray=a,t.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},t.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):a(e)||E(e)},t.isUint8Array=function(e){return"Uint8Array"===r(e)},t.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===r(e)},t.isUint16Array=function(e){return"Uint16Array"===r(e)},t.isUint32Array=function(e){return"Uint32Array"===r(e)},t.isInt8Array=function(e){return"Int8Array"===r(e)},t.isInt16Array=function(e){return"Int16Array"===r(e)},t.isInt32Array=function(e){return"Int32Array"===r(e)},t.isFloat32Array=function(e){return"Float32Array"===r(e)},t.isFloat64Array=function(e){return"Float64Array"===r(e)},t.isBigInt64Array=function(e){return"BigInt64Array"===r(e)},t.isBigUint64Array=function(e){return"BigUint64Array"===r(e)},_.working="undefined"!=typeof Map&&_(new Map),t.isMap=function(e){return"undefined"!=typeof Map&&(_.working?_(e):e instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),t.isSet=function(e){return"undefined"!=typeof Set&&(b.working?b(e):e instanceof Set)},y.working="undefined"!=typeof WeakMap&&y(new WeakMap),t.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(y.working?y(e):e instanceof WeakMap)},A.working="undefined"!=typeof WeakSet&&A(new WeakSet),t.isWeakSet=function(e){return A(e)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),t.isArrayBuffer=x,v.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&v(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=E;var M="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function z(e){return"[object SharedArrayBuffer]"===d(e)}function B(e){return void 0!==M&&(void 0===z.working&&(z.working=z(new M)),z.working?z(e):e instanceof M)}function F(e){return g(e,u)}function k(e){return g(e,f)}function C(e){return g(e,h)}function O(e){return l&&g(e,p)}function D(e){return c&&g(e,m)}t.isSharedArrayBuffer=B,t.isAsyncFunction=function(e){return"[object AsyncFunction]"===d(e)},t.isMapIterator=function(e){return"[object Map Iterator]"===d(e)},t.isSetIterator=function(e){return"[object Set Iterator]"===d(e)},t.isGeneratorObject=function(e){return"[object Generator]"===d(e)},t.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===d(e)},t.isNumberObject=F,t.isStringObject=k,t.isBooleanObject=C,t.isBigIntObject=O,t.isSymbolObject=D,t.isBoxedPrimitive=function(e){return F(e)||k(e)||C(e)||O(e)||D(e)},t.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(x(e)||B(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(t,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},7877:(e,t,n)=>{var s=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},s=0;s<t.length;s++)n[t[s]]=Object.getOwnPropertyDescriptor(e,t[s]);return n},i=/%[sdj%]/g;t.format=function(e){if(!b(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(l(arguments[n]));return t.join(" ")}n=1;for(var s=arguments,r=s.length,a=String(e).replace(i,(function(e){if("%%"===e)return"%";if(n>=r)return e;switch(e){case"%s":return String(s[n++]);case"%d":return Number(s[n++]);case"%j":try{return JSON.stringify(s[n++])}catch(e){return"[Circular]"}default:return e}})),o=s[n];n<r;o=s[++n])g(o)||!w(o)?a+=" "+o:a+=" "+l(o);return a},t.deprecate=function(e,n){if("undefined"!=typeof process&&!0===process.noDeprecation)return e;if("undefined"==typeof process)return function(){return t.deprecate(e,n).apply(this,arguments)};var s=!1;return function(){if(!s){if(process.throwDeprecation)throw new Error(n);process.traceDeprecation?console.trace(n):console.error(n),s=!0}return e.apply(this,arguments)}};var r={},a=/^$/;if({NODE_ENV:"production"}.NODE_DEBUG){var o={NODE_ENV:"production"}.NODE_DEBUG;o=o.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),a=new RegExp("^"+o+"$","i")}function l(e,n){var s={seen:[],stylize:d};return arguments.length>=3&&(s.depth=arguments[2]),arguments.length>=4&&(s.colors=arguments[3]),m(n)?s.showHidden=n:n&&t._extend(s,n),y(s.showHidden)&&(s.showHidden=!1),y(s.depth)&&(s.depth=2),y(s.colors)&&(s.colors=!1),y(s.customInspect)&&(s.customInspect=!0),s.colors&&(s.stylize=c),u(s,e,s.depth)}function c(e,t){var n=l.styles[t];return n?"["+l.colors[n][0]+"m"+e+"["+l.colors[n][1]+"m":e}function d(e,t){return e}function u(e,n,s){if(e.customInspect&&n&&E(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(s,e);return b(i)||(i=u(e,i,s)),i}var r=function(e,t){if(y(t))return e.stylize("undefined","undefined");if(b(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return _(t)?e.stylize(""+t,"number"):m(t)?e.stylize(""+t,"boolean"):g(t)?e.stylize("null","null"):void 0}(e,n);if(r)return r;var a=Object.keys(n),o=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),v(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return f(n);if(0===a.length){if(E(n)){var l=n.name?": "+n.name:"";return e.stylize("[Function"+l+"]","special")}if(A(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(x(n))return e.stylize(Date.prototype.toString.call(n),"date");if(v(n))return f(n)}var c,d="",w=!1,M=["{","}"];return p(n)&&(w=!0,M=["[","]"]),E(n)&&(d=" [Function"+(n.name?": "+n.name:"")+"]"),A(n)&&(d=" "+RegExp.prototype.toString.call(n)),x(n)&&(d=" "+Date.prototype.toUTCString.call(n)),v(n)&&(d=" "+f(n)),0!==a.length||w&&0!=n.length?s<0?A(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),c=w?function(e,t,n,s,i){for(var r=[],a=0,o=t.length;a<o;++a)F(t,String(a))?r.push(h(e,t,n,s,String(a),!0)):r.push("");return i.forEach((function(i){i.match(/^\d+$/)||r.push(h(e,t,n,s,i,!0))})),r}(e,n,s,o,a):a.map((function(t){return h(e,n,s,o,t,w)})),e.seen.pop(),function(e,t,n){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}(c,d,M)):M[0]+d+M[1]}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function h(e,t,n,s,i,r){var a,o,l;if((l=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?o=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(o=e.stylize("[Setter]","special")),F(s,i)||(a="["+i+"]"),o||(e.seen.indexOf(l.value)<0?(o=g(n)?u(e,l.value,null):u(e,l.value,n-1)).indexOf("\n")>-1&&(o=r?o.split("\n").map((function(e){return"  "+e})).join("\n").slice(2):"\n"+o.split("\n").map((function(e){return"   "+e})).join("\n")):o=e.stylize("[Circular]","special")),y(a)){if(r&&i.match(/^\d+$/))return o;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.slice(1,-1),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+o}function p(e){return Array.isArray(e)}function m(e){return"boolean"==typeof e}function g(e){return null===e}function _(e){return"number"==typeof e}function b(e){return"string"==typeof e}function y(e){return void 0===e}function A(e){return w(e)&&"[object RegExp]"===M(e)}function w(e){return"object"==typeof e&&null!==e}function x(e){return w(e)&&"[object Date]"===M(e)}function v(e){return w(e)&&("[object Error]"===M(e)||e instanceof Error)}function E(e){return"function"==typeof e}function M(e){return Object.prototype.toString.call(e)}function z(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(e=e.toUpperCase(),!r[e])if(a.test(e)){var n=process.pid;r[e]=function(){var s=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,s)}}else r[e]=function(){};return r[e]},t.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=n(1028),t.isArray=p,t.isBoolean=m,t.isNull=g,t.isNullOrUndefined=function(e){return null==e},t.isNumber=_,t.isString=b,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=y,t.isRegExp=A,t.types.isRegExp=A,t.isObject=w,t.isDate=x,t.types.isDate=x,t.isError=v,t.types.isNativeError=v,t.isFunction=E,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(5171);var B=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function F(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,n;console.log("%s - %s",(n=[z((e=new Date).getHours()),z(e.getMinutes()),z(e.getSeconds())].join(":"),[e.getDate(),B[e.getMonth()],n].join(" ")),t.format.apply(t,arguments))},t.inherits=n(198),t._extend=function(e,t){if(!t||!w(t))return e;for(var n=Object.keys(t),s=n.length;s--;)e[n[s]]=t[n[s]];return e};var k="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function C(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(k&&e[k]){var t;if("function"!=typeof(t=e[k]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,k,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,s=new Promise((function(e,s){t=e,n=s})),i=[],r=0;r<arguments.length;r++)i.push(arguments[r]);i.push((function(e,s){e?n(e):t(s)}));try{e.apply(this,i)}catch(e){n(e)}return s}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),k&&Object.defineProperty(t,k,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,s(e))},t.promisify.custom=k,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],n=0;n<arguments.length;n++)t.push(arguments[n]);var s=t.pop();if("function"!=typeof s)throw new TypeError("The last argument must be of type Function");var i=this,r=function(){return s.apply(i,arguments)};e.apply(this,t).then((function(e){process.nextTick(r.bind(null,null,e))}),(function(e){process.nextTick(C.bind(null,e,r))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,s(e)),t}},6059:(e,t,n)=>{var s=n(7270),i=n(2847),r=n(8179),a=n(9343),o=n(1399),l=a("Object.prototype.toString"),c=n(1432)(),d="undefined"==typeof globalThis?n.g:globalThis,u=i(),f=a("String.prototype.slice"),h=Object.getPrototypeOf,p=a("Array.prototype.indexOf",!0)||function(e,t){for(var n=0;n<e.length;n+=1)if(e[n]===t)return n;return-1},m={__proto__:null};s(u,c&&o&&h?function(e){var t=new d[e];if(Symbol.toStringTag in t){var n=h(t),s=o(n,Symbol.toStringTag);if(!s){var i=h(n);s=o(i,Symbol.toStringTag)}m["$"+e]=r(s.get)}}:function(e){var t=new d[e],n=t.slice||t.set;n&&(m["$"+e]=r(n))}),e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!c){var t=f(l(e),8,-1);return p(u,t)>-1?t:"Object"===t&&function(e){var t=!1;return s(m,(function(n,s){if(!t)try{n(e),t=f(s,1)}catch(e){}})),t}(e)}return o?function(e){var t=!1;return s(m,(function(n,s){if(!t)try{"$"+n(e)===s&&(t=f(s,1))}catch(e){}})),t}(e):null}},9331:()=>{},3023:()=>{},9813:()=>{},9777:()=>{},2847:(e,t,n)=>{var s=n(6350),i="undefined"==typeof globalThis?n.g:globalThis;e.exports=function(){for(var e=[],t=0;t<s.length;t++)"function"==typeof i[s[t]]&&(e[e.length]=s[t]);return e}},8968:(e,t,n)=>{const s=n(8101);e.exports=u;const i=function(){function e(e){return void 0!==e&&e}try{return"undefined"!=typeof globalThis||Object.defineProperty(Object.prototype,"globalThis",{get:function(){return delete Object.prototype.globalThis,this.globalThis=this},configurable:!0}),globalThis}catch(t){return e(self)||e(window)||e(this)||{}}}().console||{},r={mapHttpRequest:_,mapHttpResponse:_,wrapRequestSerializer:b,wrapResponseSerializer:b,wrapErrorSerializer:b,req:_,res:_,err:m,errWithCause:m};function a(e,t){return"silent"===e?1/0:t.levels.values[e]}const o=Symbol("pino.logFuncs"),l=Symbol("pino.hierarchy"),c={error:"log",fatal:"error",warn:"error",info:"log",debug:"log",trace:"log"};function d(e,t){const n={logger:t,parent:e[l]};t[l]=n}function u(e){(e=e||{}).browser=e.browser||{};const t=e.browser.transmit;if(t&&"function"!=typeof t.send)throw Error("pino: transmit option must have a send function");const n=e.browser.write||i;e.browser.write&&(e.browser.asObject=!0);const s=e.serializers||{},r=function(e,t){return Array.isArray(e)?e.filter((function(e){return"!stdSerializers.err"!==e})):!0===e&&Object.keys(t)}(e.browser.serialize,s);let l=e.browser.serialize;Array.isArray(e.browser.serialize)&&e.browser.serialize.indexOf("!stdSerializers.err")>-1&&(l=!1);const m=Object.keys(e.customLevels||{}),_=["error","fatal","warn","info","debug","trace"].concat(m);"function"==typeof n&&_.forEach((function(e){n[e]=n})),(!1===e.enabled||e.browser.disabled)&&(e.level="silent");const b=e.level||"info",A=Object.create(n);A.log||(A.log=y),function(e,t,n){const s={};t.forEach((e=>{s[e]=n[e]?n[e]:i[e]||i[c[e]||"log"]||y})),e[o]=s}(A,_,n),d({},A),Object.defineProperty(A,"levelVal",{get:function(){return a(this.level,this)}}),Object.defineProperty(A,"level",{get:function(){return this._level},set:function(e){if("silent"!==e&&!this.levels.values[e])throw Error("unknown level "+e);this._level=e,f(this,w,A,"error"),f(this,w,A,"fatal"),f(this,w,A,"warn"),f(this,w,A,"info"),f(this,w,A,"debug"),f(this,w,A,"trace"),m.forEach((e=>{f(this,w,A,e)}))}});const w={transmit:t,serialize:r,asObject:e.browser.asObject,formatters:e.browser.formatters,levels:_,timestamp:g(e),messageKey:e.messageKey||"msg",onChild:e.onChild||y};function x(n,i,a){if(!i)throw new Error("missing bindings for child Pino");a=a||{},r&&i.serializers&&(a.serializers=i.serializers);const o=a.serializers;if(r&&o){var l=Object.assign({},s,o),c=!0===e.browser.serialize?Object.keys(l):r;delete i.serializers,h([i],c,l,this._stdErrSerialize)}function u(e){this._childLevel=1+(0|e._childLevel),this.bindings=i,l&&(this.serializers=l,this._serialize=c),t&&(this._logEvent=p([].concat(e._logEvent.bindings,i)))}u.prototype=this;const f=new u(this);return d(this,f),f.child=function(...e){return x.call(this,n,...e)},f.level=a.level||this.level,n.onChild(f),f}return A.levels=function(e){const t=e.customLevels||{};return{values:Object.assign({},u.levels.values,t),labels:Object.assign({},u.levels.labels,function(e){const t={};return Object.keys(e).forEach((function(n){t[e[n]]=n})),t}(t))}}(e),A.level=b,A.setMaxListeners=A.getMaxListeners=A.emit=A.addListener=A.on=A.prependListener=A.once=A.prependOnceListener=A.removeListener=A.removeAllListeners=A.listeners=A.listenerCount=A.eventNames=A.write=A.flush=y,A.serializers=s,A._serialize=r,A._stdErrSerialize=l,A.child=function(...e){return x.call(this,w,...e)},t&&(A._logEvent=p()),A}function f(e,t,n,r){if(Object.defineProperty(e,r,{value:a(e.level,n)>a(r,n)?y:n[o][r],writable:!0,enumerable:!0,configurable:!0}),e[r]===y){if(!t.transmit)return;const s=a(t.transmit.level||e.level,n);if(a(r,n)<s)return}e[r]=function(e,t,n,r){return l=e[o][r],function(){const o=t.timestamp(),c=new Array(arguments.length),d=Object.getPrototypeOf&&Object.getPrototypeOf(this)===i?i:this;for(var u=0;u<c.length;u++)c[u]=arguments[u];var f=!1;if(t.serialize&&(h(c,this._serialize,this.serializers,this._stdErrSerialize),f=!0),t.asObject||t.formatters?l.call(d,function(e,t,n,i,r){const{level:a,log:o=(e=>e)}=r.formatters||{},l=n.slice();let c=l[0];const d={};if(i&&(d.time=i),a){const n=a(t,e.levels.values[t]);Object.assign(d,n)}else d.level=e.levels.values[t];let u=1+(0|e._childLevel);if(u<1&&(u=1),null!==c&&"object"==typeof c){for(;u--&&"object"==typeof l[0];)Object.assign(d,l.shift());c=l.length?s(l.shift(),l):void 0}else"string"==typeof c&&(c=s(l.shift(),l));return void 0!==c&&(d[r.messageKey]=c),o(d)}(this,r,c,o,t)):l.apply(d,c),t.transmit){const s=t.transmit.level||e._level,i=a(s,n),l=a(r,n);if(l<i)return;!function(e,t,n,s=!1){const i=t.send,r=t.ts,a=t.methodLevel,o=t.methodValue,l=t.val,c=e._logEvent.bindings;s||h(n,e._serialize||Object.keys(e.serializers),e.serializers,void 0===e._stdErrSerialize||e._stdErrSerialize),e._logEvent.ts=r,e._logEvent.messages=n.filter((function(e){return-1===c.indexOf(e)})),e._logEvent.level.label=a,e._logEvent.level.value=o,i(a,e._logEvent,l),e._logEvent=p(c)}(this,{ts:o,methodLevel:r,methodValue:l,transmitLevel:s,transmitValue:n.levels.values[t.transmit.level||e._level],send:t.transmit.send,val:a(e._level,n)},c,f)}};var l}(e,t,n,r);const c=function(e){const t=[];e.bindings&&t.push(e.bindings);let n=e[l];for(;n.parent;)n=n.parent,n.logger.bindings&&t.push(n.logger.bindings);return t.reverse()}(e);0!==c.length&&(e[r]=function(e,t){return function(){return t.apply(this,[...e,...arguments])}}(c,e[r]))}function h(e,t,n,s){for(const i in e)if(s&&e[i]instanceof Error)e[i]=u.stdSerializers.err(e[i]);else if("object"==typeof e[i]&&!Array.isArray(e[i])&&t)for(const s in e[i])t.indexOf(s)>-1&&s in n&&(e[i][s]=n[s](e[i][s]))}function p(e){return{ts:0,messages:[],bindings:e||[],level:{label:"",value:0}}}function m(e){const t={type:e.constructor.name,msg:e.message,stack:e.stack};for(const n in e)void 0===t[n]&&(t[n]=e[n]);return t}function g(e){return"function"==typeof e.timestamp?e.timestamp:!1===e.timestamp?A:w}function _(){return{}}function b(e){return e}function y(){}function A(){return!1}function w(){return Date.now()}u.levels={values:{fatal:60,error:50,warn:40,info:30,debug:20,trace:10},labels:{10:"trace",20:"debug",30:"info",40:"warn",50:"error",60:"fatal"}},u.stdSerializers=r,u.stdTimeFunctions=Object.assign({},{nullTime:A,epochTime:w,unixTime:function(){return Math.round(Date.now()/1e3)},isoTime:function(){return new Date(Date.now()).toISOString()}}),e.exports.default=u,e.exports.pino=u},6027:(e,t,n)=>{function s(e){return"string"==typeof e?{address:e,type:"json-rpc"}:e}n.d(t,{J:()=>s})},2894:(e,t,n)=>{n.d(t,{T:()=>C});var s=n(3021),i=n(7775),r=n(1542);function a(e){const t=(0,i.e)(e),n=[],a=e.length;for(let i=0;i<a;i++){const a=e[i];(0,s.WL)(a)||n.push((0,r.uT)(a,t))}return n}var o=n(6027);const l=[{inputs:[{components:[{name:"target",type:"address"},{name:"allowFailure",type:"bool"},{name:"callData",type:"bytes"}],name:"calls",type:"tuple[]"}],name:"aggregate3",outputs:[{components:[{name:"success",type:"bool"},{name:"returnData",type:"bytes"}],name:"returnData",type:"tuple[]"}],stateMutability:"view",type:"function"}],c="0x82ad56cb",d="0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe",u="0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe";var f=n(9302),h=n(1893),p=n(3329),m=n(8902),g=n(3686),_=n(7673),b=n(2142);const y="/docs/contract/encodeDeployData";function A(e){const{abi:t,args:n,bytecode:s}=e;if(!n||0===n.length)return s;const i=t.find((e=>"type"in e&&"constructor"===e.type));if(!i)throw new g.YW({docsPath:y});if(!("inputs"in i))throw new g.YF({docsPath:y});if(!i.inputs||0===i.inputs.length)throw new g.YF({docsPath:y});const r=(0,b.h)(i.inputs,n);return(0,_.aP)([s,r])}var w=n(2373),x=n(9042),v=n(7426),E=n(3594),M=n(5979),z=n(2545);const B=new Map;var F=n(6409),k=n(7338);async function C(e,t){const{account:s=e.account,batch:i=Boolean(e.batch?.multicall),blockNumber:r,blockTag:g="latest",accessList:_,blobs:b,code:y,data:C,factory:O,factoryData:D,gas:L,gasPrice:T,maxFeePerBlobGas:S,maxFeePerGas:N,maxPriorityFeePerGas:P,nonce:I,to:Y,value:Q,stateOverride:j,...H}=t,U=s?(0,o.J)(s):void 0;if(y&&(O||D))throw new f.C("Cannot provide both `code` & `factory`/`factoryData` as parameters.");if(y&&Y)throw new f.C("Cannot provide both `code` & `to` as parameters.");const R=y&&C,G=O&&D&&Y&&C,Z=R||G,J=R?function(e){const{code:t,data:n}=e;return A({abi:a(["constructor(bytes, bytes)"]),bytecode:d,args:[t,n]})}({code:y,data:C}):G?function(e){const{data:t,factory:n,factoryData:s,to:i}=e;return A({abi:a(["constructor(address, bytes, address, bytes)"]),bytecode:u,args:[i,t,n,s]})}({data:C,factory:O,factoryData:D,to:Y}):C;try{(0,k.c)(t);const n=(r?(0,x.cK)(r):void 0)||g,s=(0,F.yH)(j),a=e.chain?.formatters?.transactionRequest?.format,o=(a||z.Bv)({...(0,M.o)(H,{format:a}),from:U?.address,accessList:_,blobs:b,data:J,gas:L,gasPrice:T,maxFeePerBlobGas:S,maxFeePerGas:N,maxPriorityFeePerGas:P,nonce:I,to:Z?void 0:Y,value:Q});if(i&&function({request:e}){const{data:t,to:n,...s}=e;return!(!t||t.startsWith(c)||!n||Object.values(s).filter((e=>void 0!==e)).length>0)}({request:o})&&!s)try{return await async function(e,t){const{batchSize:n=1024,wait:s=0}="object"==typeof e.batch?.multicall?e.batch.multicall:{},{blockNumber:i,blockTag:r="latest",data:a,multicallAddress:o,to:c}=t;let d=o;if(!d){if(!e.chain)throw new h.YE;d=function({blockNumber:e,chain:t,contract:n}){const s=t?.contracts?.[n];if(!s)throw new h.rj({chain:t,contract:{name:n}});if(e&&s.blockCreated&&s.blockCreated>e)throw new h.rj({blockNumber:e,chain:t,contract:{name:n,blockCreated:s.blockCreated}});return s.address}({blockNumber:i,chain:e.chain,contract:"multicall3"})}const u=(i?(0,x.cK)(i):void 0)||r,{schedule:f}=function({fn:e,id:t,shouldSplitBatch:n,wait:s=0,sort:i}){const r=async()=>{const t=o();a();const n=t.map((({args:e})=>e));0!==n.length&&e(n).then((e=>{i&&Array.isArray(e)&&e.sort(i);for(let n=0;n<t.length;n++){const{resolve:s}=t[n];s?.([e[n],e])}})).catch((e=>{for(let n=0;n<t.length;n++){const{reject:s}=t[n];s?.(e)}}))},a=()=>B.delete(t),o=()=>B.get(t)||[],l=e=>B.set(t,[...o(),e]);return{flush:a,async schedule(e){const{promise:t,resolve:i,reject:a}=function(){let e=()=>{},t=()=>{};return{promise:new Promise(((n,s)=>{e=n,t=s})),resolve:e,reject:t}}(),c=n?.([...o().map((({args:e})=>e)),e]);return c&&r(),o().length>0?(l({args:e,resolve:i,reject:a}),t):(l({args:e,resolve:i,reject:a}),setTimeout(r,s),t)}}}({id:`${e.uid}.${u}`,wait:s,shouldSplitBatch(e){const t=e.reduce(((e,{data:t})=>e+(t.length-2)),0);return t>2*n},fn:async t=>{const n=t.map((e=>({allowFailure:!0,callData:e.data,target:e.to}))),s=(0,w.p)({abi:l,args:[n],functionName:"aggregate3"}),i=await e.request({method:"eth_call",params:[{data:s,to:d},u]});return(0,m.e)({abi:l,args:[n],functionName:"aggregate3",data:i||"0x"})}}),[{returnData:g,success:_}]=await f({data:a,to:c});if(!_)throw new p.$S({data:g});return"0x"===g?{data:void 0}:{data:g}}(e,{...o,blockNumber:r,blockTag:g})}catch(e){if(!(e instanceof h.YE||e instanceof h.rj))throw e}const d=await e.request({method:"eth_call",params:s?[o,n,s]:[o,n]});return"0x"===d?{data:void 0}:{data:d}}catch(s){const i=function(e){if(!(e instanceof f.C))return;const t=e.walk();return"object"==typeof t?.data?t.data?.data:t.data}(s),{offchainLookup:r,offchainLookupSignature:a}=await Promise.resolve().then(n.bind(n,4471));if(!1!==e.ccipRead&&i?.slice(0,10)===a&&Y)return{data:await r(e,{data:i,to:Y})};if(Z&&"0x101bb98d"===i?.slice(0,10))throw new p.Po({factory:O});throw function(e,{docsPath:t,...n}){const s=(()=>{const t=(0,E.l)(e,n);return t instanceof v.RM?e:t})();return new p.zX(s,{docsPath:t,...n})}(s,{...t,account:U,chain:e.chain})}}},1919:(e,t,n)=>{n.d(t,{J9:()=>r,Mc:()=>i,fD:()=>s});const s={1:"An `assert` condition failed.",17:"Arithmetic operation resulted in underflow or overflow.",18:"Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",33:"Attempted to convert to an invalid type.",34:"Attempted to access a storage byte array that is incorrectly encoded.",49:"Performed `.pop()` on an empty array",50:"Array index is out of bounds.",65:"Allocated too much memory or created an array which is too large.",81:"Attempted to call a zero-initialized variable of internal function type."},i={inputs:[{name:"message",type:"string"}],name:"Error",type:"error"},r={inputs:[{name:"reason",type:"uint256"}],name:"Panic",type:"error"}},6956:(e,t,n)=>{n.d(t,{eL:()=>s,sz:()=>i});const s={gwei:9,wei:18},i={ether:-9,wei:9}},3686:(e,t,n)=>{n.d(t,{Iy:()=>l,Iz:()=>_,MR:()=>b,M_:()=>g,Nc:()=>d,O:()=>c,Wq:()=>h,YE:()=>f,YF:()=>o,YW:()=>a,_z:()=>p,d_:()=>M,dm:()=>E,fo:()=>A,gH:()=>u,j:()=>v,kE:()=>m,l3:()=>w,nK:()=>x,nM:()=>y});var s=n(113),i=n(6420),r=n(9302);class a extends r.C{constructor({docsPath:e}){super(["A constructor was not found on the ABI.","Make sure you are using the correct ABI and that the constructor exists on it."].join("\n"),{docsPath:e,name:"AbiConstructorNotFoundError"})}}class o extends r.C{constructor({docsPath:e}){super(["Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.","Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists."].join("\n"),{docsPath:e,name:"AbiConstructorParamsNotFoundError"})}}r.C;class l extends r.C{constructor({data:e,params:t,size:n}){super([`Data size of ${n} bytes is too small for given parameters.`].join("\n"),{metaMessages:[`Params: (${(0,s.A)(t,{includeName:!0})})`,`Data:   ${e} (${n} bytes)`],name:"AbiDecodingDataSizeTooSmallError"}),Object.defineProperty(this,"data",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"params",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"size",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.data=e,this.params=t,this.size=n}}class c extends r.C{constructor(){super('Cannot decode zero data ("0x") with ABI parameters.',{name:"AbiDecodingZeroDataError"})}}class d extends r.C{constructor({expectedLength:e,givenLength:t,type:n}){super([`ABI encoding array length mismatch for type ${n}.`,`Expected length: ${e}`,`Given length: ${t}`].join("\n"),{name:"AbiEncodingArrayLengthMismatchError"})}}class u extends r.C{constructor({expectedSize:e,value:t}){super(`Size of bytes "${t}" (bytes${(0,i.E)(t)}) does not match expected size (bytes${e}).`,{name:"AbiEncodingBytesSizeMismatchError"})}}class f extends r.C{constructor({expectedLength:e,givenLength:t}){super(["ABI encoding params/values length mismatch.",`Expected length (params): ${e}`,`Given length (values): ${t}`].join("\n"),{name:"AbiEncodingLengthMismatchError"})}}r.C,r.C;class h extends r.C{constructor(e,{docsPath:t}){super([`Encoded error signature "${e}" not found on ABI.`,"Make sure you are using the correct ABI and that the error exists on it.",`You can look up the decoded signature here: https://openchain.xyz/signatures?query=${e}.`].join("\n"),{docsPath:t,name:"AbiErrorSignatureNotFoundError"}),Object.defineProperty(this,"signature",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.signature=e}}class p extends r.C{constructor({docsPath:e}){super("Cannot extract event signature from empty topics.",{docsPath:e,name:"AbiEventSignatureEmptyTopicsError"})}}class m extends r.C{constructor(e,{docsPath:t}){super([`Encoded event signature "${e}" not found on ABI.`,"Make sure you are using the correct ABI and that the event exists on it.",`You can look up the signature here: https://openchain.xyz/signatures?query=${e}.`].join("\n"),{docsPath:t,name:"AbiEventSignatureNotFoundError"})}}class g extends r.C{constructor(e,{docsPath:t}={}){super([`Event ${e?`"${e}" `:""}not found on ABI.`,"Make sure you are using the correct ABI and that the event exists on it."].join("\n"),{docsPath:t,name:"AbiEventNotFoundError"})}}class _ extends r.C{constructor(e,{docsPath:t}={}){super([`Function ${e?`"${e}" `:""}not found on ABI.`,"Make sure you are using the correct ABI and that the function exists on it."].join("\n"),{docsPath:t,name:"AbiFunctionNotFoundError"})}}class b extends r.C{constructor(e,{docsPath:t}){super([`Function "${e}" does not contain any \`outputs\` on ABI.`,"Cannot decode function result without knowing what the parameter types are.","Make sure you are using the correct ABI and that the function exists on it."].join("\n"),{docsPath:t,name:"AbiFunctionOutputsNotFoundError"})}}r.C;class y extends r.C{constructor(e,t){super("Found ambiguous types in overloaded ABI items.",{metaMessages:[`\`${e.type}\` in \`${(0,s.B)(e.abiItem)}\`, and`,`\`${t.type}\` in \`${(0,s.B)(t.abiItem)}\``,"","These types encode differently and cannot be distinguished at runtime.","Remove one of the ambiguous items in the ABI."],name:"AbiItemAmbiguityError"})}}r.C;class A extends r.C{constructor({abiItem:e,data:t,params:n,size:i}){super([`Data size of ${i} bytes is too small for non-indexed event parameters.`].join("\n"),{metaMessages:[`Params: (${(0,s.A)(n,{includeName:!0})})`,`Data:   ${t} (${i} bytes)`],name:"DecodeLogDataMismatch"}),Object.defineProperty(this,"abiItem",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"data",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"params",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"size",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.abiItem=e,this.data=t,this.params=n,this.size=i}}class w extends r.C{constructor({abiItem:e,param:t}){super([`Expected a topic for indexed event parameter${t.name?` "${t.name}"`:""} on event "${(0,s.B)(e,{includeName:!0})}".`].join("\n"),{name:"DecodeLogTopicsMismatch"}),Object.defineProperty(this,"abiItem",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.abiItem=e}}class x extends r.C{constructor(e,{docsPath:t}){super([`Type "${e}" is not a valid encoding type.`,"Please provide a valid ABI type."].join("\n"),{docsPath:t,name:"InvalidAbiEncodingType"})}}class v extends r.C{constructor(e,{docsPath:t}){super([`Type "${e}" is not a valid decoding type.`,"Please provide a valid ABI type."].join("\n"),{docsPath:t,name:"InvalidAbiDecodingType"})}}class E extends r.C{constructor(e){super([`Value "${e}" is not a valid array.`].join("\n"),{name:"InvalidArrayError"})}}class M extends r.C{constructor(e){super([`"${e}" is not a valid definition type.`,'Valid types: "function", "event", "error"'].join("\n"),{name:"InvalidDefinitionTypeError"})}}r.C},5372:(e,t,n)=>{n.d(t,{M:()=>i});var s=n(9302);class i extends s.C{constructor({address:e}){super(`Address "${e}" is invalid.`,{metaMessages:["- Address must be a hex value of 20 bytes (40 hex characters).","- Address must match its checksum counterpart."],name:"InvalidAddressError"})}}},9302:(e,t,n)=>{n.d(t,{C:()=>a});const s="2.22.8";let i=({docsBaseUrl:e,docsPath:t="",docsSlug:n})=>t?`${e??"https://viem.sh"}${t}${n?`#${n}`:""}`:void 0,r=`viem@${s}`;class a extends Error{constructor(e,t={}){const n=t.cause instanceof a?t.cause.details:t.cause?.message?t.cause.message:t.details,o=t.cause instanceof a&&t.cause.docsPath||t.docsPath,l=i?.({...t,docsPath:o});super([e||"An error occurred.","",...t.metaMessages?[...t.metaMessages,""]:[],...l?[`Docs: ${l}`]:[],...n?[`Details: ${n}`]:[],...r?[`Version: ${r}`]:[]].join("\n"),t.cause?{cause:t.cause}:void 0),Object.defineProperty(this,"details",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"docsPath",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"metaMessages",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"shortMessage",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"version",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"BaseError"}),this.details=n,this.docsPath=o,this.metaMessages=t.metaMessages,this.name=t.name??this.name,this.shortMessage=e,this.version=s}walk(e){return o(this,e)}}function o(e,t){return t?.(e)?e:e&&"object"==typeof e&&"cause"in e&&void 0!==e.cause?o(e.cause,t):t?null:e}},1893:(e,t,n)=>{n.d(t,{EH:()=>r,YE:()=>o,jF:()=>a,rj:()=>i});var s=n(9302);class i extends s.C{constructor({blockNumber:e,chain:t,contract:n}){super(`Chain "${t.name}" does not support contract "${n.name}".`,{metaMessages:["This could be due to any of the following:",...e&&n.blockCreated&&n.blockCreated>e?[`- The contract "${n.name}" was not deployed until block ${n.blockCreated} (current block ${e}).`]:[`- The chain does not have the contract "${n.name}" configured.`]],name:"ChainDoesNotSupportContract"})}}class r extends s.C{constructor({chain:e,currentChainId:t}){super(`The current chain of the wallet (id: ${t}) does not match the target chain for the transaction (id: ${e.id} – ${e.name}).`,{metaMessages:[`Current Chain ID:  ${t}`,`Expected Chain ID: ${e.id} – ${e.name}`],name:"ChainMismatchError"})}}class a extends s.C{constructor(){super(["No chain was provided to the request.","Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient."].join("\n"),{name:"ChainNotFoundError"})}}class o extends s.C{constructor(){super("No chain was provided to the Client.",{name:"ClientChainNotConfiguredError"})}}s.C},3329:(e,t,n)=>{n.d(t,{zX:()=>_,bG:()=>b,M:()=>y,rR:()=>A,Po:()=>w,$S:()=>x});var s=n(6027),i=n(1919),r=n(8440),a=n(113),o=n(1501);function l({abiItem:e,args:t,includeFunctionName:n=!0,includeName:s=!1}){if("name"in e&&"inputs"in e&&e.inputs)return`${n?e.name:""}(${e.inputs.map(((e,n)=>`${s&&e.name?`${e.name}: `:""}${"object"==typeof t[n]?(0,o.A)(t[n]):t[n]}`)).join(", ")})`}var c=n(3856),d=n(3538),u=n(1892),f=n(3686),h=n(9302),p=n(373),m=n(7740),g=n(9197);class _ extends h.C{constructor(e,{account:t,docsPath:n,chain:i,data:r,gas:a,gasPrice:o,maxFeePerGas:l,maxPriorityFeePerGas:c,nonce:f,to:h,value:g,stateOverride:_}){const b=t?(0,s.J)(t):void 0;let y=(0,m.aO)({from:b?.address,to:h,value:void 0!==g&&`${(0,d.c)(g)} ${i?.nativeCurrency?.symbol||"ETH"}`,data:r,gas:a,gasPrice:void 0!==o&&`${(0,u.Q)(o)} gwei`,maxFeePerGas:void 0!==l&&`${(0,u.Q)(l)} gwei`,maxPriorityFeePerGas:void 0!==c&&`${(0,u.Q)(c)} gwei`,nonce:f});_&&(y+=`\n${(0,p.uj)(_)}`),super(e.shortMessage,{cause:e,docsPath:n,metaMessages:[...e.metaMessages?[...e.metaMessages," "]:[],"Raw Call Arguments:",y].filter(Boolean),name:"CallExecutionError"}),Object.defineProperty(this,"cause",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.cause=e}}class b extends h.C{constructor(e,{abi:t,args:n,contractAddress:s,docsPath:i,functionName:r,sender:o}){const d=(0,c.iY)({abi:t,args:n,name:r}),u=d?l({abiItem:d,args:n,includeFunctionName:!1,includeName:!1}):void 0,f=d?(0,a.B)(d,{includeName:!0}):void 0,h=(0,m.aO)({address:s&&(0,g.R)(s),function:f,args:u&&"()"!==u&&`${[...Array(r?.length??0).keys()].map((()=>" ")).join("")}${u}`,sender:o});super(e.shortMessage||`An unknown error occurred while executing the contract function "${r}".`,{cause:e,docsPath:i,metaMessages:[...e.metaMessages?[...e.metaMessages," "]:[],h&&"Contract Call:",h].filter(Boolean),name:"ContractFunctionExecutionError"}),Object.defineProperty(this,"abi",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"args",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"cause",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"contractAddress",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"formattedArgs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"functionName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"sender",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.abi=t,this.args=n,this.cause=e,this.contractAddress=s,this.functionName=r,this.sender=o}}class y extends h.C{constructor({abi:e,data:t,functionName:n,message:s}){let o,c,d,u,h;if(t&&"0x"!==t)try{c=(0,r.W)({abi:e,data:t});const{abiItem:n,errorName:s,args:o}=c;if("Error"===s)u=o[0];else if("Panic"===s){const[e]=o;u=i.fD[e]}else{const e=n?(0,a.B)(n,{includeName:!0}):void 0,t=n&&o?l({abiItem:n,args:o,includeFunctionName:!1,includeName:!1}):void 0;d=[e?`Error: ${e}`:"",t&&"()"!==t?`       ${[...Array(s?.length??0).keys()].map((()=>" ")).join("")}${t}`:""]}}catch(e){o=e}else s&&(u=s);o instanceof f.Wq&&(h=o.signature,d=[`Unable to decode signature "${h}" as it was not found on the provided ABI.`,"Make sure you are using the correct ABI and that the error exists on it.",`You can look up the decoded signature here: https://openchain.xyz/signatures?query=${h}.`]),super(u&&"execution reverted"!==u||h?[`The contract function "${n}" reverted with the following ${h?"signature":"reason"}:`,u||h].join("\n"):`The contract function "${n}" reverted.`,{cause:o,metaMessages:d,name:"ContractFunctionRevertedError"}),Object.defineProperty(this,"data",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reason",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"signature",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.data=c,this.reason=u,this.signature=h}}class A extends h.C{constructor({functionName:e}){super(`The contract function "${e}" returned no data ("0x").`,{metaMessages:["This could be due to any of the following:",`  - The contract does not have the function "${e}",`,"  - The parameters passed to the contract function may be invalid, or","  - The address is not a contract."],name:"ContractFunctionZeroDataError"})}}class w extends h.C{constructor({factory:e}){super("Deployment for counterfactual contract call failed"+(e?` for factory "${e}".`:""),{metaMessages:["Please ensure:","- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).","- The `factoryData` is a valid encoded function call for contract deployment function on the factory."],name:"CounterfactualDeploymentFailedError"})}}class x extends h.C{constructor({data:e,message:t}){super(t||"",{name:"RawContractError"}),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:3}),Object.defineProperty(this,"data",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.data=e}}},4112:(e,t,n)=>{n.d(t,{B4:()=>i,SK:()=>r,hX:()=>a});var s=n(9302);class i extends s.C{constructor({offset:e}){super(`Offset \`${e}\` cannot be negative.`,{name:"NegativeOffsetError"})}}class r extends s.C{constructor({length:e,position:t}){super(`Position \`${t}\` is out of bounds (\`0 < position < ${e}\`).`,{name:"PositionOutOfBoundsError"})}}class a extends s.C{constructor({count:e,limit:t}){super(`Recursive read limit of \`${t}\` exceeded (recursive read count: \`${e}\`).`,{name:"RecursiveReadLimitExceededError"})}}},7834:(e,t,n)=>{n.d(t,{Fl:()=>r,NV:()=>a,ii:()=>i});var s=n(9302);class i extends s.C{constructor({offset:e,position:t,size:n}){super(`Slice ${"start"===t?"starting":"ending"} at offset "${e}" is out-of-bounds (size: ${n}).`,{name:"SliceOffsetOutOfBoundsError"})}}class r extends s.C{constructor({size:e,targetSize:t,type:n}){super(`${n.charAt(0).toUpperCase()}${n.slice(1).toLowerCase()} size (${e}) exceeds padding size (${t}).`,{name:"SizeExceedsPaddingSizeError"})}}class a extends s.C{constructor({size:e,targetSize:t,type:n}){super(`${n.charAt(0).toUpperCase()}${n.slice(1).toLowerCase()} is expected to be ${t} ${n} long, but is ${e} ${n} long.`,{name:"InvalidBytesLengthError"})}}},9699:(e,t,n)=>{n.d(t,{Ty:()=>i,u:()=>a,xO:()=>r});var s=n(9302);class i extends s.C{constructor({max:e,min:t,signed:n,size:s,value:i}){super(`Number "${i}" is not in safe ${s?`${8*s}-bit ${n?"signed":"unsigned"} `:""}integer range ${e?`(${t} to ${e})`:`(above ${t})`}`,{name:"IntegerOutOfRangeError"})}}class r extends s.C{constructor(e){super(`Bytes value "${e}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,{name:"InvalidBytesBooleanError"})}}s.C,s.C;class a extends s.C{constructor({givenSize:e,maxSize:t}){super(`Size cannot exceed ${t} bytes. Given size: ${e} bytes.`,{name:"SizeOverflowError"})}}},7426:(e,t,n)=>{n.d(t,{A7:()=>r,BG:()=>a,Fo:()=>h,K0:()=>l,Oh:()=>c,RM:()=>g,jj:()=>o,k5:()=>u,lN:()=>m,lY:()=>f,uC:()=>p,vW:()=>d});var s=n(1892),i=n(9302);class r extends i.C{constructor({cause:e,message:t}={}){const n=t?.replace("execution reverted: ","")?.replace("execution reverted","");super(`Execution reverted ${n?`with reason: ${n}`:"for an unknown reason"}.`,{cause:e,name:"ExecutionRevertedError"})}}Object.defineProperty(r,"code",{enumerable:!0,configurable:!0,writable:!0,value:3}),Object.defineProperty(r,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/execution reverted/});class a extends i.C{constructor({cause:e,maxFeePerGas:t}={}){super(`The fee cap (\`maxFeePerGas\`${t?` = ${(0,s.Q)(t)} gwei`:""}) cannot be higher than the maximum allowed value (2^256-1).`,{cause:e,name:"FeeCapTooHighError"})}}Object.defineProperty(a,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/});class o extends i.C{constructor({cause:e,maxFeePerGas:t}={}){super(`The fee cap (\`maxFeePerGas\`${t?` = ${(0,s.Q)(t)}`:""} gwei) cannot be lower than the block base fee.`,{cause:e,name:"FeeCapTooLowError"})}}Object.defineProperty(o,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/});class l extends i.C{constructor({cause:e,nonce:t}={}){super(`Nonce provided for the transaction ${t?`(${t}) `:""}is higher than the next one expected.`,{cause:e,name:"NonceTooHighError"})}}Object.defineProperty(l,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/nonce too high/});class c extends i.C{constructor({cause:e,nonce:t}={}){super([`Nonce provided for the transaction ${t?`(${t}) `:""}is lower than the current nonce of the account.`,"Try increasing the nonce or find the latest nonce with `getTransactionCount`."].join("\n"),{cause:e,name:"NonceTooLowError"})}}Object.defineProperty(c,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/nonce too low|transaction already imported|already known/});class d extends i.C{constructor({cause:e,nonce:t}={}){super(`Nonce provided for the transaction ${t?`(${t}) `:""}exceeds the maximum allowed nonce.`,{cause:e,name:"NonceMaxValueError"})}}Object.defineProperty(d,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/nonce has max value/});class u extends i.C{constructor({cause:e}={}){super(["The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."].join("\n"),{cause:e,metaMessages:["This error could arise when the account does not have enough funds to:"," - pay for the total gas fee,"," - pay for the value to send."," ","The cost of the transaction is calculated as `gas * gas fee + value`, where:"," - `gas` is the amount of gas needed for transaction to execute,"," - `gas fee` is the gas fee,"," - `value` is the amount of ether to send to the recipient."],name:"InsufficientFundsError"})}}Object.defineProperty(u,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/insufficient funds|exceeds transaction sender account balance/});class f extends i.C{constructor({cause:e,gas:t}={}){super(`The amount of gas ${t?`(${t}) `:""}provided for the transaction exceeds the limit allowed for the block.`,{cause:e,name:"IntrinsicGasTooHighError"})}}Object.defineProperty(f,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/intrinsic gas too high|gas limit reached/});class h extends i.C{constructor({cause:e,gas:t}={}){super(`The amount of gas ${t?`(${t}) `:""}provided for the transaction is too low.`,{cause:e,name:"IntrinsicGasTooLowError"})}}Object.defineProperty(h,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/intrinsic gas too low/});class p extends i.C{constructor({cause:e}){super("The transaction type is not supported for this chain.",{cause:e,name:"TransactionTypeNotSupportedError"})}}Object.defineProperty(p,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/transaction type not valid/});class m extends i.C{constructor({cause:e,maxPriorityFeePerGas:t,maxFeePerGas:n}={}){super([`The provided tip (\`maxPriorityFeePerGas\`${t?` = ${(0,s.Q)(t)} gwei`:""}) cannot be higher than the fee cap (\`maxFeePerGas\`${n?` = ${(0,s.Q)(n)} gwei`:""}).`].join("\n"),{cause:e,name:"TipAboveFeeCapError"})}}Object.defineProperty(m,"nodeMessage",{enumerable:!0,configurable:!0,writable:!0,value:/max priority fee per gas higher than max fee per gas|tip higher than fee cap/});class g extends i.C{constructor({cause:e}){super(`An error occurred while executing: ${e?.shortMessage}`,{cause:e,name:"UnknownNodeError"})}}},6809:(e,t,n)=>{n.d(t,{Ci:()=>a,J8:()=>o});var s=n(1501),i=n(9302),r=n(9197);class a extends i.C{constructor({body:e,cause:t,details:n,headers:i,status:a,url:o}){super("HTTP request failed.",{cause:t,details:n,metaMessages:[a&&`Status: ${a}`,`URL: ${(0,r.I)(o)}`,e&&`Request body: ${(0,s.A)(e)}`].filter(Boolean),name:"HttpRequestError"}),Object.defineProperty(this,"body",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"headers",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"status",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"url",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.body=e,this.headers=i,this.status=a,this.url=o}}i.C;class o extends i.C{constructor({body:e,error:t,url:n}){super("RPC Request failed.",{cause:t,details:t.message,metaMessages:[`URL: ${(0,r.I)(n)}`,`Request body: ${(0,s.A)(e)}`],name:"RpcRequestError"}),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"data",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.code=t.code,this.data=t.data}}i.C,i.C},373:(e,t,n)=>{n.d(t,{Hi:()=>i,ft:()=>r,uj:()=>o});var s=n(9302);class i extends s.C{constructor({address:e}){super(`State for account "${e}" is set multiple times.`,{name:"AccountStateConflictError"})}}class r extends s.C{constructor(){super("state and stateDiff are set on the same account.",{name:"StateAssignmentConflictError"})}}function a(e){return e.reduce(((e,{slot:t,value:n})=>`${e}        ${t}: ${n}\n`),"")}function o(e){return e.reduce(((e,{address:t,...n})=>{let s=`${e}    ${t}:\n`;return n.nonce&&(s+=`      nonce: ${n.nonce}\n`),n.balance&&(s+=`      balance: ${n.balance}\n`),n.code&&(s+=`      code: ${n.code}\n`),n.state&&(s+="      state:\n",s+=a(n.state)),n.stateDiff&&(s+="      stateDiff:\n",s+=a(n.stateDiff)),s}),"  State Override:\n").slice(0,-1)}},7740:(e,t,n)=>{n.d(t,{$s:()=>c,Vg:()=>l,aO:()=>a,n3:()=>o});var s=n(3538),i=n(1892),r=n(9302);function a(e){const t=Object.entries(e).map((([e,t])=>void 0===t||!1===t?null:[e,t])).filter(Boolean),n=t.reduce(((e,[t])=>Math.max(e,t.length)),0);return t.map((([e,t])=>`  ${`${e}:`.padEnd(n+1)}  ${t}`)).join("\n")}class o extends r.C{constructor(){super(["Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.","Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."].join("\n"),{name:"FeeConflictError"})}}r.C;class l extends r.C{constructor({transaction:e}){super("Cannot infer a transaction type from provided transaction.",{metaMessages:["Provided Transaction:","{",a(e),"}","","To infer the type, either provide:","- a `type` to the Transaction, or","- an EIP-1559 Transaction with `maxFeePerGas`, or","- an EIP-2930 Transaction with `gasPrice` & `accessList`, or","- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or","- an EIP-7702 Transaction with `authorizationList`, or","- a Legacy Transaction with `gasPrice`"],name:"InvalidSerializableTransactionError"})}}r.C,r.C,r.C;class c extends r.C{constructor(e,{account:t,docsPath:n,chain:r,data:o,gas:l,gasPrice:c,maxFeePerGas:d,maxPriorityFeePerGas:u,nonce:f,to:h,value:p}){const m=a({chain:r&&`${r?.name} (id: ${r?.id})`,from:t?.address,to:h,value:void 0!==p&&`${(0,s.c)(p)} ${r?.nativeCurrency?.symbol||"ETH"}`,data:o,gas:l,gasPrice:void 0!==c&&`${(0,i.Q)(c)} gwei`,maxFeePerGas:void 0!==d&&`${(0,i.Q)(d)} gwei`,maxPriorityFeePerGas:void 0!==u&&`${(0,i.Q)(u)} gwei`,nonce:f});super(e.shortMessage,{cause:e,docsPath:n,metaMessages:[...e.metaMessages?[...e.metaMessages," "]:[],"Request Arguments:",m].filter(Boolean),name:"TransactionExecutionError"}),Object.defineProperty(this,"cause",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.cause=e}}r.C,r.C,r.C},9197:(e,t,n)=>{n.d(t,{I:()=>i,R:()=>s});const s=e=>e,i=e=>e},663:(e,t,n)=>{n.d(t,{n:()=>_});var s=n(3686),i=n(3887),r=n(9804),a=n(6420),o=n(5355);function l(e,{dir:t="left"}={}){let n="string"==typeof e?e.replace("0x",""):e,s=0;for(let e=0;e<n.length-1&&"0"===n["left"===t?e:n.length-e-1].toString();e++)s++;return n="left"===t?n.slice(s):n.slice(0,n.length-s),"string"==typeof e?(1===n.length&&"right"===t&&(n=`${n}0`),`0x${n.length%2==1?`0${n}`:n}`):n}var c=n(9699),d=n(5261),u=n(9042);function f(e,t={}){void 0!==t.size&&(0,d.Sl)(e,{size:t.size});const n=(0,u.My)(e,t);return(0,d.uU)(n,t)}function h(e,t={}){let n=e;if(void 0!==t.size&&((0,d.Sl)(n,{size:t.size}),n=l(n)),n.length>1||n[0]>1)throw new c.xO(n);return Boolean(n[0])}function p(e,t={}){void 0!==t.size&&(0,d.Sl)(e,{size:t.size});const n=(0,u.My)(e,t);return(0,d.ME)(n,t)}var m=n(3588),g=n(2142);function _(e,t){const n="string"==typeof t?(0,m.aT)(t):t,i=(0,r.l)(n);if(0===(0,a.E)(n)&&e.length>0)throw new s.O;if((0,a.E)(t)&&(0,a.E)(t)<32)throw new s.Iy({data:"string"==typeof t?t:(0,u.My)(t),params:e,size:(0,a.E)(t)});let o=0;const l=[];for(let t=0;t<e.length;++t){const n=e[t];i.setPosition(o);const[s,r]=b(i,n,{staticPosition:0});o+=r,l.push(s)}return l}function b(e,t,{staticPosition:n}){const r=(0,g.k)(t.type);if(r){const[s,i]=r;return function(e,t,{length:n,staticPosition:s}){if(!n){const n=s+p(e.readBytes(A)),i=n+y;e.setPosition(n);const r=p(e.readBytes(y)),a=w(t);let o=0;const l=[];for(let n=0;n<r;++n){e.setPosition(i+(a?32*n:o));const[s,r]=b(e,t,{staticPosition:i});o+=r,l.push(s)}return e.setPosition(s+32),[l,32]}if(w(t)){const i=s+p(e.readBytes(A)),r=[];for(let s=0;s<n;++s){e.setPosition(i+32*s);const[n]=b(e,t,{staticPosition:i});r.push(n)}return e.setPosition(s+32),[r,32]}let i=0;const r=[];for(let a=0;a<n;++a){const[n,a]=b(e,t,{staticPosition:s+i});i+=a,r.push(n)}return[r,i]}(e,{...t,type:i},{length:s,staticPosition:n})}if("tuple"===t.type)return function(e,t,{staticPosition:n}){const s=0===t.components.length||t.components.some((({name:e})=>!e)),i=s?[]:{};let r=0;if(w(t)){const a=n+p(e.readBytes(A));for(let n=0;n<t.components.length;++n){const o=t.components[n];e.setPosition(a+r);const[l,c]=b(e,o,{staticPosition:a});r+=c,i[s?n:o?.name]=l}return e.setPosition(n+32),[i,32]}for(let a=0;a<t.components.length;++a){const o=t.components[a],[l,c]=b(e,o,{staticPosition:n});i[s?a:o?.name]=l,r+=c}return[i,r]}(e,t,{staticPosition:n});if("address"===t.type)return function(e){const t=e.readBytes(32);return[(0,i.o)((0,u.My)((0,o.A1)(t,-20))),32]}(e);if("bool"===t.type)return function(e){return[h(e.readBytes(32),{size:32}),32]}(e);if(t.type.startsWith("bytes"))return function(e,t,{staticPosition:n}){const[s,i]=t.type.split("bytes");if(!i){const t=p(e.readBytes(32));e.setPosition(n+t);const s=p(e.readBytes(32));if(0===s)return e.setPosition(n+32),["0x",32];const i=e.readBytes(s);return e.setPosition(n+32),[(0,u.My)(i),32]}return[(0,u.My)(e.readBytes(Number.parseInt(i),32)),32]}(e,t,{staticPosition:n});if(t.type.startsWith("uint")||t.type.startsWith("int"))return function(e,t){const n=t.type.startsWith("int"),s=Number.parseInt(t.type.split("int")[1]||"256"),i=e.readBytes(32);return[s>48?f(i,{signed:n}):p(i,{signed:n}),32]}(e,t);if("string"===t.type)return function(e,{staticPosition:t}){const n=t+p(e.readBytes(32));e.setPosition(n);const s=p(e.readBytes(32));if(0===s)return e.setPosition(t+32),["",32];const i=function(e,t={}){let n=e;return void 0!==t.size&&((0,d.Sl)(n,{size:t.size}),n=l(n,{dir:"right"})),(new TextDecoder).decode(n)}(l(e.readBytes(s,32)));return e.setPosition(t+32),[i,32]}(e,{staticPosition:n});throw new s.j(t.type,{docsPath:"/docs/contract/decodeAbiParameters"})}const y=32,A=32;function w(e){const{type:t}=e;if("string"===t)return!0;if("bytes"===t)return!0;if(t.endsWith("[]"))return!0;if("tuple"===t)return e.components?.some(w);const n=(0,g.k)(e.type);return!(!n||!w({...e,type:n[1]}))}},8440:(e,t,n)=>{n.d(t,{W:()=>c});var s=n(1919),i=n(3686),r=n(5355),a=n(5561),o=n(663),l=n(113);function c(e){const{abi:t,data:n}=e,c=(0,r.di)(n,0,4);if("0x"===c)throw new i.O;const d=[...t||[],s.Mc,s.J9].find((e=>"error"===e.type&&c===(0,a.V)((0,l.B)(e))));if(!d)throw new i.Wq(c,{docsPath:"/docs/contract/decodeErrorResult"});return{abiItem:d,args:"inputs"in d&&d.inputs&&d.inputs.length>0?(0,o.n)(d.inputs,(0,r.di)(n,4)):void 0,errorName:d.name}}},8902:(e,t,n)=>{n.d(t,{e:()=>o});var s=n(3686),i=n(663),r=n(3856);const a="/docs/contract/decodeFunctionResult";function o(e){const{abi:t,args:n,functionName:o,data:l}=e;let c=t[0];if(o){const e=(0,r.iY)({abi:t,args:n,name:o});if(!e)throw new s.Iz(o,{docsPath:a});c=e}if("function"!==c.type)throw new s.Iz(void 0,{docsPath:a});if(!c.outputs)throw new s.MR(c.name,{docsPath:a});const d=(0,i.n)(c.outputs,l);return d&&d.length>1?d:d&&1===d.length?d[0]:void 0}},2142:(e,t,n)=>{n.d(t,{h:()=>p,k:()=>_});var s=n(3686),i=n(5372),r=n(9302),a=n(9699),o=n(7283),l=n(7673),c=n(5916),d=n(6420),u=n(5355),f=n(9042);const h=/^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;function p(e,t){if(e.length!==t.length)throw new s.YE({expectedLength:e.length,givenLength:t.length});const n=function({params:e,values:t}){const n=[];for(let s=0;s<e.length;s++)n.push(m({param:e[s],value:t[s]}));return n}({params:e,values:t}),i=g(n);return 0===i.length?"0x":i}function m({param:e,value:t}){const n=_(e.type);if(n){const[i,r]=n;return function(e,{length:t,param:n}){const i=null===t;if(!Array.isArray(e))throw new s.dm(e);if(!i&&e.length!==t)throw new s.Nc({expectedLength:t,givenLength:e.length,type:`${n.type}[${t}]`});let r=!1;const a=[];for(let t=0;t<e.length;t++){const s=m({param:n,value:e[t]});s.dynamic&&(r=!0),a.push(s)}if(i||r){const e=g(a);if(i){const t=(0,f.cK)(a.length,{size:32});return{dynamic:!0,encoded:a.length>0?(0,l.xW)([t,e]):t}}if(r)return{dynamic:!0,encoded:e}}return{dynamic:!1,encoded:(0,l.xW)(a.map((({encoded:e})=>e)))}}(t,{length:i,param:{...e,type:r}})}if("tuple"===e.type)return function(e,{param:t}){let n=!1;const s=[];for(let i=0;i<t.components.length;i++){const r=t.components[i],a=m({param:r,value:e[Array.isArray(e)?i:r.name]});s.push(a),a.dynamic&&(n=!0)}return{dynamic:n,encoded:n?g(s):(0,l.xW)(s.map((({encoded:e})=>e)))}}(t,{param:e});if("address"===e.type)return function(e){if(!(0,o.P)(e))throw new i.M({address:e});return{dynamic:!1,encoded:(0,c.db)(e.toLowerCase())}}(t);if("bool"===e.type)return function(e){if("boolean"!=typeof e)throw new r.C(`Invalid boolean value: "${e}" (type: ${typeof e}). Expected: \`true\` or \`false\`.`);return{dynamic:!1,encoded:(0,c.db)((0,f.$P)(e))}}(t);if(e.type.startsWith("uint")||e.type.startsWith("int")){const n=e.type.startsWith("int"),[,,s="256"]=h.exec(e.type)??[];return function(e,{signed:t,size:n=256}){if("number"==typeof n){const s=2n**(BigInt(n)-(t?1n:0n))-1n,i=t?-s-1n:0n;if(e>s||e<i)throw new a.Ty({max:s.toString(),min:i.toString(),signed:t,size:n/8,value:e.toString()})}return{dynamic:!1,encoded:(0,f.cK)(e,{size:32,signed:t})}}(t,{signed:n,size:Number(s)})}if(e.type.startsWith("bytes"))return function(e,{param:t}){const[,n]=t.type.split("bytes"),i=(0,d.E)(e);if(!n){let t=e;return i%32!=0&&(t=(0,c.db)(t,{dir:"right",size:32*Math.ceil((e.length-2)/2/32)})),{dynamic:!0,encoded:(0,l.xW)([(0,c.db)((0,f.cK)(i,{size:32})),t])}}if(i!==Number.parseInt(n))throw new s.gH({expectedSize:Number.parseInt(n),value:e});return{dynamic:!1,encoded:(0,c.db)(e,{dir:"right"})}}(t,{param:e});if("string"===e.type)return function(e){const t=(0,f.i3)(e),n=Math.ceil((0,d.E)(t)/32),s=[];for(let e=0;e<n;e++)s.push((0,c.db)((0,u.di)(t,32*e,32*(e+1)),{dir:"right"}));return{dynamic:!0,encoded:(0,l.xW)([(0,c.db)((0,f.cK)((0,d.E)(t),{size:32})),...s])}}(t);throw new s.nK(e.type,{docsPath:"/docs/contract/encodeAbiParameters"})}function g(e){let t=0;for(let n=0;n<e.length;n++){const{dynamic:s,encoded:i}=e[n];t+=s?32:(0,d.E)(i)}const n=[],s=[];let i=0;for(let r=0;r<e.length;r++){const{dynamic:a,encoded:o}=e[r];a?(n.push((0,f.cK)(t+i,{size:32})),s.push(o),i+=(0,d.E)(o)):n.push(o)}return(0,l.xW)([...n,...s])}function _(e){const t=e.match(/^(.*)\[(\d+)?\]$/);return t?[t[2]?Number(t[2]):null,t[1]]:void 0}},2373:(e,t,n)=>{n.d(t,{p:()=>d});var s=n(7673),i=n(2142),r=n(3686),a=n(5561),o=n(113),l=n(3856);const c="/docs/contract/encodeFunctionData";function d(e){const{args:t}=e,{abi:n,functionName:d}=1===e.abi.length&&e.functionName?.startsWith("0x")?e:function(e){const{abi:t,args:n,functionName:s}=e;let i=t[0];if(s){const e=(0,l.iY)({abi:t,args:n,name:s});if(!e)throw new r.Iz(s,{docsPath:c});i=e}if("function"!==i.type)throw new r.Iz(void 0,{docsPath:c});return{abi:[i],functionName:(0,a.V)((0,o.B)(i))}}(e),u=n[0],f=d,h="inputs"in u&&u.inputs?(0,i.h)(u.inputs,t??[]):void 0;return(0,s.aP)([f,h??"0x"])}},113:(e,t,n)=>{n.d(t,{A:()=>r,B:()=>i});var s=n(3686);function i(e,{includeName:t=!1}={}){if("function"!==e.type&&"event"!==e.type&&"error"!==e.type)throw new s.d_(e.type);return`${e.name}(${r(e.inputs,{includeName:t})})`}function r(e,{includeName:t=!1}={}){return e?e.map((e=>function(e,{includeName:t}){return e.type.startsWith("tuple")?`(${r(e.components,{includeName:t})})${e.type.slice(5)}`:e.type+(t&&e.name?` ${e.name}`:"")}(e,{includeName:t}))).join(t?", ":","):""}},3856:(e,t,n)=>{n.d(t,{iY:()=>l});var s=n(3686),i=n(2768),r=n(7283),a=n(643),o=n(5561);function l(e){const{abi:t,args:n=[],name:r}=e,l=(0,i.q)(r,{strict:!1}),u=t.filter((e=>l?"function"===e.type?(0,o.V)(e)===r:"event"===e.type&&(0,a.h)(e)===r:"name"in e&&e.name===r));if(0===u.length)return;if(1===u.length)return u[0];let f;for(const e of u)if("inputs"in e)if(n&&0!==n.length){if(e.inputs&&0!==e.inputs.length&&e.inputs.length===n.length&&n.every(((t,n)=>{const s="inputs"in e&&e.inputs[n];return!!s&&c(t,s)}))){if(f&&"inputs"in f&&f.inputs){const t=d(e.inputs,f.inputs,n);if(t)throw new s.nM({abiItem:e,type:t[0]},{abiItem:f,type:t[1]})}f=e}}else if(!e.inputs||0===e.inputs.length)return e;return f||u[0]}function c(e,t){const n=typeof e,s=t.type;switch(s){case"address":return(0,r.P)(e,{strict:!1});case"bool":return"boolean"===n;case"function":case"string":return"string"===n;default:return"tuple"===s&&"components"in t?Object.values(t.components).every(((t,n)=>c(Object.values(e)[n],t))):/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(s)?"number"===n||"bigint"===n:/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(s)?"string"===n||e instanceof Uint8Array:!!/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(s)&&Array.isArray(e)&&e.every((e=>c(e,{...t,type:s.replace(/(\[[0-9]{0,}\])$/,"")})))}}function d(e,t,n){for(const s in e){const i=e[s],a=t[s];if("tuple"===i.type&&"tuple"===a.type&&"components"in i&&"components"in a)return d(i.components,a.components,n[s]);const o=[i.type,a.type];if(o.includes("address")&&o.includes("bytes20")||(o.includes("address")&&o.includes("string")||o.includes("address")&&o.includes("bytes"))&&(0,r.P)(n[s],{strict:!1}))return o}}},3887:(e,t,n)=>{n.d(t,{o:()=>a});var s=n(3588),i=n(2610);const r=new(n(645).A)(8192);function a(e,t){if(r.has(`${e}.${t}`))return r.get(`${e}.${t}`);const n=t?`${t}${e.toLowerCase()}`:e.substring(2).toLowerCase(),a=(0,i.S)((0,s.Af)(n),"bytes"),o=(t?n.substring(`${t}0x`.length):n).split("");for(let e=0;e<40;e+=2)a[e>>1]>>4>=8&&o[e]&&(o[e]=o[e].toUpperCase()),(15&a[e>>1])>=8&&o[e+1]&&(o[e+1]=o[e+1].toUpperCase());const l=`0x${o.join("")}`;return r.set(`${e}.${t}`,l),l}},7283:(e,t,n)=>{n.d(t,{P:()=>o});var s=n(645),i=n(3887);const r=/^0x[a-fA-F0-9]{40}$/,a=new s.A(8192);function o(e,t){const{strict:n=!0}=t??{},s=`${e}.${n}`;if(a.has(s))return a.get(s);const o=!(!r.test(e)||e.toLowerCase()!==e&&n&&(0,i.o)(e)!==e);return a.set(s,o),o}},6907:(e,t,n)=>{n.d(t,{h:()=>r});var s=n(5372),i=n(7283);function r(e,t){if(!(0,i.P)(e,{strict:!1}))throw new s.M({address:e});if(!(0,i.P)(t,{strict:!1}))throw new s.M({address:t});return e.toLowerCase()===t.toLowerCase()}},4471:(e,t,n)=>{n.d(t,{offchainLookup:()=>b,offchainLookupSignature:()=>g});var s=n(2894),i=n(1501),r=n(9302),a=n(9197);class o extends r.C{constructor({callbackSelector:e,cause:t,data:n,extraData:s,sender:i,urls:r}){super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],t.metaMessages?.length?"":[],"Offchain Gateway Call:",r&&["  Gateway URL(s):",...r.map((e=>`    ${(0,a.I)(e)}`))],`  Sender: ${i}`,`  Data: ${n}`,`  Callback selector: ${e}`,`  Extra data: ${s}`].flat(),name:"OffchainLookupError"})}}class l extends r.C{constructor({result:e,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,a.I)(t)}`,`Response: ${(0,i.A)(e)}`],name:"OffchainLookupResponseMalformedError"})}}class c extends r.C{constructor({sender:e,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}var d=n(6809),u=n(8440),f=n(2142),h=n(6907),p=n(7673),m=n(2768);const g="0x556f1830",_={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function b(e,{blockNumber:t,blockTag:n,data:i,to:r}){const{args:a}=(0,u.W)({data:i,abi:[_]}),[l,d,m,g,b]=a,{ccipRead:A}=e,w=A&&"function"==typeof A?.request?A.request:y;try{if(!(0,h.h)(r,l))throw new c({sender:l,to:r});const i=await w({data:m,sender:l,urls:d}),{data:a}=await(0,s.T)(e,{blockNumber:t,blockTag:n,data:(0,p.xW)([g,(0,f.h)([{type:"bytes"},{type:"bytes"}],[i,b])]),to:r});return a}catch(e){throw new o({callbackSelector:g,cause:e,data:i,extraData:b,sender:l,urls:d})}}async function y({data:e,sender:t,urls:n}){let s=new Error("An unknown error occurred.");for(let r=0;r<n.length;r++){const a=n[r],o=a.includes("{data}")?"GET":"POST",c="POST"===o?{data:e,sender:t}:void 0,u="POST"===o?{"Content-Type":"application/json"}:{};try{const n=await fetch(a.replace("{sender}",t).replace("{data}",e),{body:JSON.stringify(c),headers:u,method:o});let r;if(r=n.headers.get("Content-Type")?.startsWith("application/json")?(await n.json()).data:await n.text(),!n.ok){s=new d.Ci({body:c,details:r?.error?(0,i.A)(r.error):n.statusText,headers:n.headers,status:n.status,url:a});continue}if(!(0,m.q)(r)){s=new l({result:r,url:a});continue}return r}catch(e){s=new d.Ci({body:c,details:e.message,url:a})}}throw s}},9804:(e,t,n)=>{n.d(t,{l:()=>r});var s=n(4112);const i={bytes:new Uint8Array,dataView:new DataView(new ArrayBuffer(0)),position:0,positionReadCount:new Map,recursiveReadCount:0,recursiveReadLimit:Number.POSITIVE_INFINITY,assertReadLimit(){if(this.recursiveReadCount>=this.recursiveReadLimit)throw new s.hX({count:this.recursiveReadCount+1,limit:this.recursiveReadLimit})},assertPosition(e){if(e<0||e>this.bytes.length-1)throw new s.SK({length:this.bytes.length,position:e})},decrementPosition(e){if(e<0)throw new s.B4({offset:e});const t=this.position-e;this.assertPosition(t),this.position=t},getReadCount(e){return this.positionReadCount.get(e||this.position)||0},incrementPosition(e){if(e<0)throw new s.B4({offset:e});const t=this.position+e;this.assertPosition(t),this.position=t},inspectByte(e){const t=e??this.position;return this.assertPosition(t),this.bytes[t]},inspectBytes(e,t){const n=t??this.position;return this.assertPosition(n+e-1),this.bytes.subarray(n,n+e)},inspectUint8(e){const t=e??this.position;return this.assertPosition(t),this.bytes[t]},inspectUint16(e){const t=e??this.position;return this.assertPosition(t+1),this.dataView.getUint16(t)},inspectUint24(e){const t=e??this.position;return this.assertPosition(t+2),(this.dataView.getUint16(t)<<8)+this.dataView.getUint8(t+2)},inspectUint32(e){const t=e??this.position;return this.assertPosition(t+3),this.dataView.getUint32(t)},pushByte(e){this.assertPosition(this.position),this.bytes[this.position]=e,this.position++},pushBytes(e){this.assertPosition(this.position+e.length-1),this.bytes.set(e,this.position),this.position+=e.length},pushUint8(e){this.assertPosition(this.position),this.bytes[this.position]=e,this.position++},pushUint16(e){this.assertPosition(this.position+1),this.dataView.setUint16(this.position,e),this.position+=2},pushUint24(e){this.assertPosition(this.position+2),this.dataView.setUint16(this.position,e>>8),this.dataView.setUint8(this.position+2,255&e),this.position+=3},pushUint32(e){this.assertPosition(this.position+3),this.dataView.setUint32(this.position,e),this.position+=4},readByte(){this.assertReadLimit(),this._touch();const e=this.inspectByte();return this.position++,e},readBytes(e,t){this.assertReadLimit(),this._touch();const n=this.inspectBytes(e);return this.position+=t??e,n},readUint8(){this.assertReadLimit(),this._touch();const e=this.inspectUint8();return this.position+=1,e},readUint16(){this.assertReadLimit(),this._touch();const e=this.inspectUint16();return this.position+=2,e},readUint24(){this.assertReadLimit(),this._touch();const e=this.inspectUint24();return this.position+=3,e},readUint32(){this.assertReadLimit(),this._touch();const e=this.inspectUint32();return this.position+=4,e},get remaining(){return this.bytes.length-this.position},setPosition(e){const t=this.position;return this.assertPosition(e),this.position=e,()=>this.position=t},_touch(){if(this.recursiveReadLimit===Number.POSITIVE_INFINITY)return;const e=this.getReadCount();this.positionReadCount.set(this.position,e+1),e>0&&this.recursiveReadCount++}};function r(e,{recursiveReadLimit:t=8192}={}){const n=Object.create(i);return n.bytes=e,n.dataView=new DataView(e.buffer,e.byteOffset,e.byteLength),n.positionReadCount=new Map,n.recursiveReadLimit=t,n}},7673:(e,t,n)=>{function s(e){return"string"==typeof e[0]?i(e):function(e){let t=0;for(const n of e)t+=n.length;const n=new Uint8Array(t);let s=0;for(const t of e)n.set(t,s),s+=t.length;return n}(e)}function i(e){return`0x${e.reduce(((e,t)=>e+t.replace("0x","")),"")}`}n.d(t,{aP:()=>i,xW:()=>s})},2768:(e,t,n)=>{function s(e,{strict:t=!0}={}){return!!e&&"string"==typeof e&&(t?/^0x[0-9a-fA-F]*$/.test(e):e.startsWith("0x"))}n.d(t,{q:()=>s})},5916:(e,t,n)=>{n.d(t,{db:()=>r,eV:()=>i});var s=n(7834);function i(e,{dir:t,size:n=32}={}){return"string"==typeof e?r(e,{dir:t,size:n}):function(e,{dir:t,size:n=32}={}){if(null===n)return e;if(e.length>n)throw new s.Fl({size:e.length,targetSize:n,type:"bytes"});const i=new Uint8Array(n);for(let s=0;s<n;s++){const r="right"===t;i[r?s:n-s-1]=e[r?s:e.length-s-1]}return i}(e,{dir:t,size:n})}function r(e,{dir:t,size:n=32}={}){if(null===n)return e;const i=e.replace("0x","");if(i.length>2*n)throw new s.Fl({size:Math.ceil(i.length/2),targetSize:n,type:"hex"});return`0x${i["right"===t?"padEnd":"padStart"](2*n,"0")}`}},6420:(e,t,n)=>{n.d(t,{E:()=>i});var s=n(2768);function i(e){return(0,s.q)(e,{strict:!1})?Math.ceil((e.length-2)/2):e.length}},5355:(e,t,n)=>{n.d(t,{A1:()=>c,di:()=>a});var s=n(7834),i=n(2768),r=n(6420);function a(e,t,n,{strict:s}={}){return(0,i.q)(e,{strict:!1})?function(e,t,n,{strict:s}={}){o(e,t);const i=`0x${e.replace("0x","").slice(2*(t??0),2*(n??e.length))}`;return s&&l(i,t,n),i}(e,t,n,{strict:s}):c(e,t,n,{strict:s})}function o(e,t){if("number"==typeof t&&t>0&&t>(0,r.E)(e)-1)throw new s.ii({offset:t,position:"start",size:(0,r.E)(e)})}function l(e,t,n){if("number"==typeof t&&"number"==typeof n&&(0,r.E)(e)!==n-t)throw new s.ii({offset:n,position:"end",size:(0,r.E)(e)})}function c(e,t,n,{strict:s}={}){o(e,t);const i=e.slice(t,n);return s&&l(i,t,n),i}},5261:(e,t,n)=>{n.d(t,{ME:()=>o,Sl:()=>r,uU:()=>a});var s=n(9699),i=n(6420);function r(e,{size:t}){if((0,i.E)(e)>t)throw new s.u({givenSize:(0,i.E)(e),maxSize:t})}function a(e,t={}){const{signed:n}=t;t.size&&r(e,{size:t.size});const s=BigInt(e);if(!n)return s;const i=(e.length-2)/2;return s<=(1n<<8n*BigInt(i)-1n)-1n?s:s-BigInt(`0x${"f".padStart(2*i,"f")}`)-1n}function o(e,t={}){return Number(a(e,t))}},3588:(e,t,n)=>{n.d(t,{Af:()=>h,ZJ:()=>c,aT:()=>f});var s=n(9302),i=n(2768),r=n(5916),a=n(5261),o=n(9042);const l=new TextEncoder;function c(e,t={}){return"number"==typeof e||"bigint"==typeof e?function(e,t){return f((0,o.cK)(e,t))}(e,t):"boolean"==typeof e?function(e,t={}){const n=new Uint8Array(1);return n[0]=Number(e),"number"==typeof t.size?((0,a.Sl)(n,{size:t.size}),(0,r.eV)(n,{size:t.size})):n}(e,t):(0,i.q)(e)?f(e,t):h(e,t)}const d={zero:48,nine:57,A:65,F:70,a:97,f:102};function u(e){return e>=d.zero&&e<=d.nine?e-d.zero:e>=d.A&&e<=d.F?e-(d.A-10):e>=d.a&&e<=d.f?e-(d.a-10):void 0}function f(e,t={}){let n=e;t.size&&((0,a.Sl)(n,{size:t.size}),n=(0,r.eV)(n,{dir:"right",size:t.size}));let i=n.slice(2);i.length%2&&(i=`0${i}`);const o=i.length/2,l=new Uint8Array(o);for(let e=0,t=0;e<o;e++){const n=u(i.charCodeAt(t++)),r=u(i.charCodeAt(t++));if(void 0===n||void 0===r)throw new s.C(`Invalid byte sequence ("${i[t-2]}${i[t-1]}" in "${i}").`);l[e]=16*n+r}return l}function h(e,t={}){const n=l.encode(e);return"number"==typeof t.size?((0,a.Sl)(n,{size:t.size}),(0,r.eV)(n,{dir:"right",size:t.size})):n}},9042:(e,t,n)=>{n.d(t,{$P:()=>l,My:()=>c,cK:()=>d,i3:()=>f,nj:()=>o});var s=n(9699),i=n(5916),r=n(5261);const a=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function o(e,t={}){return"number"==typeof e||"bigint"==typeof e?d(e,t):"string"==typeof e?f(e,t):"boolean"==typeof e?l(e,t):c(e,t)}function l(e,t={}){const n=`0x${Number(e)}`;return"number"==typeof t.size?((0,r.Sl)(n,{size:t.size}),(0,i.eV)(n,{size:t.size})):n}function c(e,t={}){let n="";for(let t=0;t<e.length;t++)n+=a[e[t]];const s=`0x${n}`;return"number"==typeof t.size?((0,r.Sl)(s,{size:t.size}),(0,i.eV)(s,{dir:"right",size:t.size})):s}function d(e,t={}){const{signed:n,size:r}=t,a=BigInt(e);let o;r?o=n?(1n<<8n*BigInt(r)-1n)-1n:2n**(8n*BigInt(r))-1n:"number"==typeof e&&(o=BigInt(Number.MAX_SAFE_INTEGER));const l="bigint"==typeof o&&n?-o-1n:0;if(o&&a>o||a<l){const t="bigint"==typeof e?"n":"";throw new s.Ty({max:o?`${o}${t}`:void 0,min:`${l}${t}`,signed:n,size:r,value:`${e}${t}`})}const c=`0x${(n&&a<0?(1n<<BigInt(8*r))+BigInt(a):a).toString(16)}`;return r?(0,i.eV)(c,{size:r}):c}const u=new TextEncoder;function f(e,t={}){return c(u.encode(e),t)}},3594:(e,t,n)=>{n.d(t,{l:()=>r});var s=n(9302),i=n(7426);function r(e,t){const n=(e.details||"").toLowerCase(),r=e instanceof s.C?e.walk((e=>e?.code===i.A7.code)):e;return r instanceof s.C?new i.A7({cause:e,message:r.details}):i.A7.nodeMessage.test(n)?new i.A7({cause:e,message:e.details}):i.BG.nodeMessage.test(n)?new i.BG({cause:e,maxFeePerGas:t?.maxFeePerGas}):i.jj.nodeMessage.test(n)?new i.jj({cause:e,maxFeePerGas:t?.maxFeePerGas}):i.K0.nodeMessage.test(n)?new i.K0({cause:e,nonce:t?.nonce}):i.Oh.nodeMessage.test(n)?new i.Oh({cause:e,nonce:t?.nonce}):i.vW.nodeMessage.test(n)?new i.vW({cause:e,nonce:t?.nonce}):i.k5.nodeMessage.test(n)?new i.k5({cause:e}):i.lY.nodeMessage.test(n)?new i.lY({cause:e,gas:t?.gas}):i.Fo.nodeMessage.test(n)?new i.Fo({cause:e,gas:t?.gas}):i.uC.nodeMessage.test(n)?new i.uC({cause:e}):i.lN.nodeMessage.test(n)?new i.lN({cause:e,maxFeePerGas:t?.maxFeePerGas,maxPriorityFeePerGas:t?.maxPriorityFeePerGas}):new i.RM({cause:e})}},5979:(e,t,n)=>{function s(e,{format:t}){if(!t)return{};const n={};return function t(s){const i=Object.keys(s);for(const r of i)r in e&&(n[r]=e[r]),s[r]&&"object"==typeof s[r]&&!Array.isArray(s[r])&&t(s[r])}(t(e||{})),n}n.d(t,{o:()=>s})},2545:(e,t,n)=>{n.d(t,{Bv:()=>r});var s=n(9042);const i={legacy:"0x0",eip2930:"0x1",eip1559:"0x2",eip4844:"0x3",eip7702:"0x4"};function r(e){const t={};return void 0!==e.authorizationList&&(t.authorizationList=e.authorizationList.map((e=>({address:e.contractAddress,r:e.r,s:e.s,chainId:(0,s.cK)(e.chainId),nonce:(0,s.cK)(e.nonce),...void 0!==e.yParity?{yParity:(0,s.cK)(e.yParity)}:{},...void 0!==e.v&&void 0===e.yParity?{v:(0,s.cK)(e.v)}:{}})))),void 0!==e.accessList&&(t.accessList=e.accessList),void 0!==e.blobVersionedHashes&&(t.blobVersionedHashes=e.blobVersionedHashes),void 0!==e.blobs&&("string"!=typeof e.blobs[0]?t.blobs=e.blobs.map((e=>(0,s.My)(e))):t.blobs=e.blobs),void 0!==e.data&&(t.data=e.data),void 0!==e.from&&(t.from=e.from),void 0!==e.gas&&(t.gas=(0,s.cK)(e.gas)),void 0!==e.gasPrice&&(t.gasPrice=(0,s.cK)(e.gasPrice)),void 0!==e.maxFeePerBlobGas&&(t.maxFeePerBlobGas=(0,s.cK)(e.maxFeePerBlobGas)),void 0!==e.maxFeePerGas&&(t.maxFeePerGas=(0,s.cK)(e.maxFeePerGas)),void 0!==e.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=(0,s.cK)(e.maxPriorityFeePerGas)),void 0!==e.nonce&&(t.nonce=(0,s.cK)(e.nonce)),void 0!==e.to&&(t.to=e.to),void 0!==e.type&&(t.type=i[e.type]),void 0!==e.value&&(t.value=(0,s.cK)(e.value)),t}},2610:(e,t,n)=>{n.d(t,{S:()=>B});var s=n(8113);const i=BigInt(2**32-1),r=BigInt(32);function a(e,t=!1){return t?{h:Number(e&i),l:Number(e>>r&i)}:{h:0|Number(e>>r&i),l:0|Number(e&i)}}function o(e,t=!1){let n=new Uint32Array(e.length),s=new Uint32Array(e.length);for(let i=0;i<e.length;i++){const{h:r,l:o}=a(e[i],t);[n[i],s[i]]=[r,o]}return[n,s]}var l=n(4611);const c=[],d=[],u=[],f=BigInt(0),h=BigInt(1),p=BigInt(2),m=BigInt(7),g=BigInt(256),_=BigInt(113);for(let e=0,t=h,n=1,s=0;e<24;e++){[n,s]=[s,(2*n+3*s)%5],c.push(2*(5*s+n)),d.push((e+1)*(e+2)/2%64);let i=f;for(let e=0;e<7;e++)t=(t<<h^(t>>m)*_)%g,t&p&&(i^=h<<(h<<BigInt(e))-h);u.push(i)}const[b,y]=o(u,!0),A=(e,t,n)=>n>32?((e,t,n)=>t<<n-32|e>>>64-n)(e,t,n):((e,t,n)=>e<<n|t>>>32-n)(e,t,n),w=(e,t,n)=>n>32?((e,t,n)=>e<<n-32|t>>>64-n)(e,t,n):((e,t,n)=>t<<n|e>>>32-n)(e,t,n);class x extends l.Vw{constructor(e,t,n,i=!1,r=24){if(super(),this.blockLen=e,this.suffix=t,this.outputLen=n,this.enableXOF=i,this.rounds=r,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,(0,s.Fe)(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=(0,l.DH)(this.state)}keccak(){l.qv||(0,l.Fc)(this.state32),function(e,t=24){const n=new Uint32Array(10);for(let s=24-t;s<24;s++){for(let t=0;t<10;t++)n[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){const s=(t+8)%10,i=(t+2)%10,r=n[i],a=n[i+1],o=A(r,a,1)^n[s],l=w(r,a,1)^n[s+1];for(let n=0;n<50;n+=10)e[t+n]^=o,e[t+n+1]^=l}let t=e[2],i=e[3];for(let n=0;n<24;n++){const s=d[n],r=A(t,i,s),a=w(t,i,s),o=c[n];t=e[o],i=e[o+1],e[o]=r,e[o+1]=a}for(let t=0;t<50;t+=10){for(let s=0;s<10;s++)n[s]=e[t+s];for(let s=0;s<10;s++)e[t+s]^=~n[(s+2)%10]&n[(s+4)%10]}e[0]^=b[s],e[1]^=y[s]}n.fill(0)}(this.state32,this.rounds),l.qv||(0,l.Fc)(this.state32),this.posOut=0,this.pos=0}update(e){(0,s.CC)(this);const{blockLen:t,state:n}=this,i=(e=(0,l.ZJ)(e)).length;for(let s=0;s<i;){const r=Math.min(t-this.pos,i-s);for(let t=0;t<r;t++)n[this.pos++]^=e[s++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:e,suffix:t,pos:n,blockLen:s}=this;e[n]^=t,128&t&&n===s-1&&this.keccak(),e[s-1]^=128,this.keccak()}writeInto(e){(0,s.CC)(this,!1),(0,s.DO)(e),this.finish();const t=this.state,{blockLen:n}=this;for(let s=0,i=e.length;s<i;){this.posOut>=n&&this.keccak();const r=Math.min(n-this.posOut,i-s);e.set(t.subarray(this.posOut,this.posOut+r),s),this.posOut+=r,s+=r}return e}xofInto(e){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return(0,s.Fe)(e),this.xofInto(new Uint8Array(e))}digestInto(e){if((0,s.Ht)(e,this),this.finished)throw new Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){const{blockLen:t,suffix:n,outputLen:s,rounds:i,enableXOF:r}=this;return e||(e=new x(t,n,s,r,i)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=i,e.suffix=n,e.outputLen=s,e.enableXOF=r,e.destroyed=this.destroyed,e}}const v=((e,t,n)=>(0,l.ld)((()=>new x(t,e,n))))(1,136,32);var E=n(2768),M=n(3588),z=n(9042);function B(e,t){const n=t||"hex",s=v((0,E.q)(e,{strict:!1})?(0,M.ZJ)(e):e);return"bytes"===n?s:(0,z.nj)(s)}},643:(e,t,n)=>{n.d(t,{h:()=>s});const s=n(4436).k},5561:(e,t,n)=>{n.d(t,{V:()=>r});var s=n(5355),i=n(4436);const r=e=>(0,s.di)((0,i.k)(e),0,4)},4436:(e,t,n)=>{n.d(t,{k:()=>f});var s=n(3588),i=n(2610);const r=e=>(0,i.S)((0,s.ZJ)(e));var a=n(8537);const o=/^tuple(?<array>(\[(\d*)\])*)$/;function l(e){let t=e.type;if(o.test(e.type)&&"components"in e){t="(";const n=e.components.length;for(let s=0;s<n;s++)t+=l(e.components[s]),s<n-1&&(t+=", ");const s=(0,a.Yv)(o,e.type);return t+=`)${s?.array??""}`,l({...e,type:t})}return"indexed"in e&&e.indexed&&(t=`${t} indexed`),e.name?`${t} ${e.name}`:t}function c(e){let t="";const n=e.length;for(let s=0;s<n;s++)t+=l(e[s]),s!==n-1&&(t+=", ");return t}var d=n(9302);const u=e=>{var t;return function(e){let t=!0,n="",s=0,i="",r=!1;for(let a=0;a<e.length;a++){const o=e[a];if(["(",")",","].includes(o)&&(t=!0),"("===o&&s++,")"===o&&s--,t)if(0!==s)" "!==o?(i+=o,n+=o):","!==e[a-1]&&","!==n&&",("!==n&&(n="",t=!1);else if(" "===o&&["event","function",""].includes(i))i="";else if(i+=o,")"===o){r=!0;break}}if(!r)throw new d.C("Unable to normalize signature.");return i}("string"==typeof e?e:"function"===(t=e).type?`function ${t.name}(${c(t.inputs)})${t.stateMutability&&"nonpayable"!==t.stateMutability?` ${t.stateMutability}`:""}${t.outputs?.length?` returns (${c(t.outputs)})`:""}`:"event"===t.type?`event ${t.name}(${c(t.inputs)})`:"error"===t.type?`error ${t.name}(${c(t.inputs)})`:"constructor"===t.type?`constructor(${c(t.inputs)})${"payable"===t.stateMutability?" payable":""}`:"fallback"===t.type?"fallback() external"+("payable"===t.stateMutability?" payable":""):"receive() external payable")};function f(e){return t=u(e),r(t);var t}},645:(e,t,n)=>{n.d(t,{A:()=>s});class s extends Map{constructor(e){super(),Object.defineProperty(this,"maxSize",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.maxSize=e}get(e){const t=super.get(e);return super.has(e)&&void 0!==t&&(this.delete(e),super.set(e,t)),t}set(e,t){if(super.set(e,t),this.maxSize&&this.size>this.maxSize){const e=this.keys().next().value;e&&this.delete(e)}return this}}},6409:(e,t,n)=>{n.d(t,{yH:()=>d});var s=n(5372),i=n(7834),r=n(373),a=n(7283),o=n(9042);function l(e){if(e&&0!==e.length)return e.reduce(((e,{slot:t,value:n})=>{if(66!==t.length)throw new i.NV({size:t.length,targetSize:66,type:"hex"});if(66!==n.length)throw new i.NV({size:n.length,targetSize:66,type:"hex"});return e[t]=n,e}),{})}function c(e){const{balance:t,nonce:n,state:s,stateDiff:i,code:a}=e,c={};if(void 0!==a&&(c.code=a),void 0!==t&&(c.balance=(0,o.cK)(t)),void 0!==n&&(c.nonce=(0,o.cK)(n)),void 0!==s&&(c.state=l(s)),void 0!==i){if(c.state)throw new r.ft;c.stateDiff=l(i)}return c}function d(e){if(!e)return;const t={};for(const{address:n,...i}of e){if(!(0,a.P)(n,{strict:!1}))throw new s.M({address:n});if(t[n])throw new r.Hi({address:n});t[n]=c(i)}return t}},1501:(e,t,n)=>{n.d(t,{A:()=>s});const s=(e,t,n)=>JSON.stringify(e,((e,n)=>{const s="bigint"==typeof n?n.toString():n;return"function"==typeof t?t(e,s):s}),n)},7338:(e,t,n)=>{n.d(t,{c:()=>c});var s=n(6027);const i=2n**256n-1n;var r=n(5372),a=n(7426),o=n(7740),l=n(7283);function c(e){const{account:t,gasPrice:n,maxFeePerGas:c,maxPriorityFeePerGas:d,to:u}=e,f=t?(0,s.J)(t):void 0;if(f&&!(0,l.P)(f.address))throw new r.M({address:f.address});if(u&&!(0,l.P)(u))throw new r.M({address:u});if(void 0!==n&&(void 0!==c||void 0!==d))throw new o.n3;if(c&&c>i)throw new a.BG({maxFeePerGas:c});if(d&&c&&d>c)throw new a.lN({maxFeePerGas:c,maxPriorityFeePerGas:d})}},3538:(e,t,n)=>{n.d(t,{c:()=>r});var s=n(6956),i=n(6473);function r(e,t="wei"){return(0,i.J)(e,s.eL[t])}},1892:(e,t,n)=>{n.d(t,{Q:()=>r});var s=n(6956),i=n(6473);function r(e,t="wei"){return(0,i.J)(e,s.sz[t])}},6473:(e,t,n)=>{function s(e,t){let n=e.toString();const s=n.startsWith("-");s&&(n=n.slice(1)),n=n.padStart(t,"0");let[i,r]=[n.slice(0,n.length-t),n.slice(n.length-t)];return r=r.replace(/(0+)$/,""),`${s?"-":""}${i||"0"}${r?`.${r}`:""}`}n.d(t,{J:()=>s})},1979:(e,t,n)=>{n.d(t,{secp256k1:()=>Qe});var s={};function i(e){if(!Number.isSafeInteger(e)||e<0)throw new Error("positive integer expected, got "+e)}function r(e,...t){if(!((n=e)instanceof Uint8Array||ArrayBuffer.isView(n)&&"Uint8Array"===n.constructor.name))throw new Error("Uint8Array expected");var n;if(t.length>0&&!t.includes(e.length))throw new Error("Uint8Array expected of length "+t+", got length="+e.length)}function a(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}n.r(s),n.d(s,{aK:()=>R,e8:()=>F,DO:()=>B,dJ:()=>G,OG:()=>Z,My:()=>C,bytesToNumberBE:()=>N,lX:()=>P,Id:()=>j,fg:()=>W,qj:()=>Q,hexToBytes:()=>S,r4:()=>U,aY:()=>z,x:()=>K,lq:()=>I,z:()=>Y,zW:()=>O,Q5:()=>q});const o="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,l=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),c=(e,t)=>e<<32-t|e>>>t;function d(e){return"string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),r(e),e}class u{clone(){return this._cloneInto()}}function f(e){const t=t=>e().update(d(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}function h(e=32){if(o&&"function"==typeof o.getRandomValues)return o.getRandomValues(new Uint8Array(e));if(o&&"function"==typeof o.randomBytes)return o.randomBytes(e);throw new Error("crypto.getRandomValues must be defined")}const p=(e,t,n)=>e&t^e&n^t&n;class m extends u{constructor(e,t,n,s){super(),this.blockLen=e,this.outputLen=t,this.padOffset=n,this.isLE=s,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=l(this.buffer)}update(e){a(this);const{view:t,buffer:n,blockLen:s}=this,i=(e=d(e)).length;for(let r=0;r<i;){const a=Math.min(s-this.pos,i-r);if(a!==s)n.set(e.subarray(r,r+a),this.pos),this.pos+=a,r+=a,this.pos===s&&(this.process(t,0),this.pos=0);else{const t=l(e);for(;s<=i-r;r+=s)this.process(t,r)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){a(this),function(e,t){r(e);const n=t.outputLen;if(e.length<n)throw new Error("digestInto() expects output buffer of length at least "+n)}(e,this),this.finished=!0;const{buffer:t,view:n,blockLen:s,isLE:i}=this;let{pos:o}=this;t[o++]=128,this.buffer.subarray(o).fill(0),this.padOffset>s-o&&(this.process(n,0),o=0);for(let e=o;e<s;e++)t[e]=0;!function(e,t,n,s){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,n,s);const i=BigInt(32),r=BigInt(4294967295),a=Number(n>>i&r),o=Number(n&r),l=s?4:0,c=s?0:4;e.setUint32(t+l,a,s),e.setUint32(t+c,o,s)}(n,s-8,BigInt(8*this.length),i),this.process(n,0);const c=l(e),d=this.outputLen;if(d%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const u=d/4,f=this.get();if(u>f.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<u;e++)c.setUint32(4*e,f[e],i)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const n=e.slice(0,t);return this.destroy(),n}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:n,length:s,finished:i,destroyed:r,pos:a}=this;return e.length=s,e.pos=a,e.finished=i,e.destroyed=r,s%t&&e.buffer.set(n),e}}const g=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),_=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),b=new Uint32Array(64);class y extends m{constructor(){super(64,32,8,!1),this.A=0|_[0],this.B=0|_[1],this.C=0|_[2],this.D=0|_[3],this.E=0|_[4],this.F=0|_[5],this.G=0|_[6],this.H=0|_[7]}get(){const{A:e,B:t,C:n,D:s,E:i,F:r,G:a,H:o}=this;return[e,t,n,s,i,r,a,o]}set(e,t,n,s,i,r,a,o){this.A=0|e,this.B=0|t,this.C=0|n,this.D=0|s,this.E=0|i,this.F=0|r,this.G=0|a,this.H=0|o}process(e,t){for(let n=0;n<16;n++,t+=4)b[n]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=b[e-15],n=b[e-2],s=c(t,7)^c(t,18)^t>>>3,i=c(n,17)^c(n,19)^n>>>10;b[e]=i+b[e-7]+s+b[e-16]|0}let{A:n,B:s,C:i,D:r,E:a,F:o,G:l,H:d}=this;for(let e=0;e<64;e++){const t=d+(c(a,6)^c(a,11)^c(a,25))+((u=a)&o^~u&l)+g[e]+b[e]|0,f=(c(n,2)^c(n,13)^c(n,22))+p(n,s,i)|0;d=l,l=o,o=a,a=r+t|0,r=i,i=s,s=n,n=t+f|0}var u;n=n+this.A|0,s=s+this.B|0,i=i+this.C|0,r=r+this.D|0,a=a+this.E|0,o=o+this.F|0,l=l+this.G|0,d=d+this.H|0,this.set(n,s,i,r,a,o,l,d)}roundClean(){b.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const A=f((()=>new y));class w extends u{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");i(e.outputLen),i(e.blockLen)}(e);const n=d(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const s=this.blockLen,r=new Uint8Array(s);r.set(n.length>s?e.create().update(n).digest():n);for(let e=0;e<r.length;e++)r[e]^=54;this.iHash.update(r),this.oHash=e.create();for(let e=0;e<r.length;e++)r[e]^=106;this.oHash.update(r),r.fill(0)}update(e){return a(this),this.iHash.update(e),this}digestInto(e){a(this),r(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:n,finished:s,destroyed:i,blockLen:r,outputLen:a}=this;return e.finished=s,e.destroyed=i,e.blockLen=r,e.outputLen=a,e.oHash=t._cloneInto(e.oHash),e.iHash=n._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const x=(e,t,n)=>new w(e,t).update(n).digest();x.create=(e,t)=>new w(e,t);const v=BigInt(0),E=BigInt(1),M=BigInt(2);function z(e){return e instanceof Uint8Array||ArrayBuffer.isView(e)&&"Uint8Array"===e.constructor.name}function B(e){if(!z(e))throw new Error("Uint8Array expected")}function F(e,t){if("boolean"!=typeof t)throw new Error(e+" boolean expected, got "+t)}const k=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function C(e){B(e);let t="";for(let n=0;n<e.length;n++)t+=k[e[n]];return t}function O(e){const t=e.toString(16);return 1&t.length?"0"+t:t}function D(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);return""===e?v:BigInt("0x"+e)}const L={_0:48,_9:57,A:65,F:70,a:97,f:102};function T(e){return e>=L._0&&e<=L._9?e-L._0:e>=L.A&&e<=L.F?e-(L.A-10):e>=L.a&&e<=L.f?e-(L.a-10):void 0}function S(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const t=e.length,n=t/2;if(t%2)throw new Error("hex string expected, got unpadded hex of length "+t);const s=new Uint8Array(n);for(let t=0,i=0;t<n;t++,i+=2){const n=T(e.charCodeAt(i)),r=T(e.charCodeAt(i+1));if(void 0===n||void 0===r){const t=e[i]+e[i+1];throw new Error('hex string expected, got non-hex character "'+t+'" at index '+i)}s[t]=16*n+r}return s}function N(e){return D(C(e))}function P(e){return B(e),D(C(Uint8Array.from(e).reverse()))}function I(e,t){return S(e.toString(16).padStart(2*t,"0"))}function Y(e,t){return I(e,t).reverse()}function Q(e,t,n){let s;if("string"==typeof t)try{s=S(t)}catch(t){throw new Error(e+" must be hex string or Uint8Array, cause: "+t)}else{if(!z(t))throw new Error(e+" must be hex string or Uint8Array");s=Uint8Array.from(t)}const i=s.length;if("number"==typeof n&&i!==n)throw new Error(e+" of length "+n+" expected, got "+i);return s}function j(...e){let t=0;for(let n=0;n<e.length;n++){const s=e[n];B(s),t+=s.length}const n=new Uint8Array(t);for(let t=0,s=0;t<e.length;t++){const i=e[t];n.set(i,s),s+=i.length}return n}const H=e=>"bigint"==typeof e&&v<=e;function U(e,t,n){return H(e)&&H(t)&&H(n)&&t<=e&&e<n}function R(e,t,n,s){if(!U(t,n,s))throw new Error("expected valid "+e+": "+n+" <= n < "+s+", got "+t)}function G(e){let t;for(t=0;e>v;e>>=E,t+=1);return t}const Z=e=>(M<<BigInt(e-1))-E,J=e=>new Uint8Array(e),X=e=>Uint8Array.from(e);function W(e,t,n){if("number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof t||t<2)throw new Error("qByteLen must be a number");if("function"!=typeof n)throw new Error("hmacFn must be a function");let s=J(e),i=J(e),r=0;const a=()=>{s.fill(1),i.fill(0),r=0},o=(...e)=>n(i,s,...e),l=(e=J())=>{i=o(X([0]),e),s=o(),0!==e.length&&(i=o(X([1]),e),s=o())},c=()=>{if(r++>=1e3)throw new Error("drbg: tried 1000 values");let e=0;const n=[];for(;e<t;){s=o();const t=s.slice();n.push(t),e+=s.length}return j(...n)};return(e,t)=>{let n;for(a(),l(e);!(n=t(c()));)l();return a(),n}}const V={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||z(e),isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};function q(e,t,n={}){const s=(t,n,s)=>{const i=V[n];if("function"!=typeof i)throw new Error("invalid validator function");const r=e[t];if(!(s&&void 0===r||i(r,e)))throw new Error("param "+String(t)+" is invalid. Expected "+n+", got "+r)};for(const[e,n]of Object.entries(t))s(e,n,!1);for(const[e,t]of Object.entries(n))s(e,t,!0);return e}function K(e){const t=new WeakMap;return(n,...s)=>{const i=t.get(n);if(void 0!==i)return i;const r=e(n,...s);return t.set(n,r),r}}const $=BigInt(0),ee=BigInt(1),te=BigInt(2),ne=BigInt(3),se=BigInt(4),ie=BigInt(5),re=BigInt(8);function ae(e,t){const n=e%t;return n>=$?n:t+n}function oe(e,t,n){if(t<$)throw new Error("invalid exponent, negatives unsupported");if(n<=$)throw new Error("invalid modulus");if(n===ee)return $;let s=ee;for(;t>$;)t&ee&&(s=s*e%n),e=e*e%n,t>>=ee;return s}function le(e,t,n){let s=e;for(;t-- >$;)s*=s,s%=n;return s}function ce(e,t){if(e===$)throw new Error("invert: expected non-zero number");if(t<=$)throw new Error("invert: expected positive modulus, got "+t);let n=ae(e,t),s=t,i=$,r=ee,a=ee,o=$;for(;n!==$;){const e=s/n,t=s%n,l=i-a*e,c=r-o*e;s=n,n=t,i=a,r=o,a=l,o=c}if(s!==ee)throw new Error("invert: does not exist");return ae(i,t)}const de=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function ue(e,t){const n=void 0!==t?t:e.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function fe(e,t,n=!1,s={}){if(e<=$)throw new Error("invalid field: expected ORDER > 0, got "+e);const{nBitLength:i,nByteLength:r}=ue(e,t);if(r>2048)throw new Error("invalid field: expected ORDER of <= 2048 bytes");let a;const o=Object.freeze({ORDER:e,BITS:i,BYTES:r,MASK:Z(i),ZERO:$,ONE:ee,create:t=>ae(t,e),isValid:t=>{if("bigint"!=typeof t)throw new Error("invalid field element: expected bigint, got "+typeof t);return $<=t&&t<e},is0:e=>e===$,isOdd:e=>(e&ee)===ee,neg:t=>ae(-t,e),eql:(e,t)=>e===t,sqr:t=>ae(t*t,e),add:(t,n)=>ae(t+n,e),sub:(t,n)=>ae(t-n,e),mul:(t,n)=>ae(t*n,e),pow:(e,t)=>function(e,t,n){if(n<$)throw new Error("invalid exponent, negatives unsupported");if(n===$)return e.ONE;if(n===ee)return t;let s=e.ONE,i=t;for(;n>$;)n&ee&&(s=e.mul(s,i)),i=e.sqr(i),n>>=ee;return s}(o,e,t),div:(t,n)=>ae(t*ce(n,e),e),sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>ce(t,e),sqrt:s.sqrt||(t=>(a||(a=function(e){if(e%se===ne){const t=(e+ee)/se;return function(e,n){const s=e.pow(n,t);if(!e.eql(e.sqr(s),n))throw new Error("Cannot find square root");return s}}if(e%re===ie){const t=(e-ie)/re;return function(e,n){const s=e.mul(n,te),i=e.pow(s,t),r=e.mul(n,i),a=e.mul(e.mul(r,te),i),o=e.mul(r,e.sub(a,e.ONE));if(!e.eql(e.sqr(o),n))throw new Error("Cannot find square root");return o}}return function(e){const t=(e-ee)/te;let n,s,i;for(n=e-ee,s=0;n%te===$;n/=te,s++);for(i=te;i<e&&oe(i,t,e)!==e-ee;i++)if(i>1e3)throw new Error("Cannot find square root: likely non-prime P");if(1===s){const t=(e+ee)/se;return function(e,n){const s=e.pow(n,t);if(!e.eql(e.sqr(s),n))throw new Error("Cannot find square root");return s}}const r=(n+ee)/te;return function(e,a){if(e.pow(a,t)===e.neg(e.ONE))throw new Error("Cannot find square root");let o=s,l=e.pow(e.mul(e.ONE,i),n),c=e.pow(a,r),d=e.pow(a,n);for(;!e.eql(d,e.ONE);){if(e.eql(d,e.ZERO))return e.ZERO;let t=1;for(let n=e.sqr(d);t<o&&!e.eql(n,e.ONE);t++)n=e.sqr(n);const n=e.pow(l,ee<<BigInt(o-t-1));l=e.sqr(n),c=e.mul(c,n),d=e.mul(d,l),o=t}return c}}(e)}(e)),a(o,t))),invertBatch:e=>function(e,t){const n=new Array(t.length),s=t.reduce(((t,s,i)=>e.is0(s)?t:(n[i]=t,e.mul(t,s))),e.ONE),i=e.inv(s);return t.reduceRight(((t,s,i)=>e.is0(s)?t:(n[i]=e.mul(t,n[i]),e.mul(t,s))),i),n}(o,e),cmov:(e,t,n)=>n?t:e,toBytes:e=>n?Y(e,r):I(e,r),fromBytes:e=>{if(e.length!==r)throw new Error("Field.fromBytes: expected "+r+" bytes, got "+e.length);return n?P(e):N(e)}});return Object.freeze(o)}function he(e){if("bigint"!=typeof e)throw new Error("field order must be bigint");const t=e.toString(2).length;return Math.ceil(t/8)}function pe(e){const t=he(e);return t+Math.ceil(t/2)}const me=BigInt(0),ge=BigInt(1);function _e(e,t){const n=t.negate();return e?n:t}function be(e,t){if(!Number.isSafeInteger(e)||e<=0||e>t)throw new Error("invalid window size, expected [1.."+t+"], got W="+e)}function ye(e,t){return be(e,t),{windows:Math.ceil(t/e)+1,windowSize:2**(e-1)}}const Ae=new WeakMap,we=new WeakMap;function xe(e){return we.get(e)||1}function ve(e){return q(e.Fp,de.reduce(((e,t)=>(e[t]="function",e)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"})),q(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...ue(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}function Ee(e){void 0!==e.lowS&&F("lowS",e.lowS),void 0!==e.prehash&&F("prehash",e.prehash)}const{bytesToNumberBE:Me,hexToBytes:ze}=s,Be={Err:class extends Error{constructor(e=""){super(e)}},_tlv:{encode:(e,t)=>{const{Err:n}=Be;if(e<0||e>256)throw new n("tlv.encode: wrong tag");if(1&t.length)throw new n("tlv.encode: unpadded data");const s=t.length/2,i=O(s);if(i.length/2&128)throw new n("tlv.encode: long form length too big");const r=s>127?O(i.length/2|128):"";return O(e)+r+i+t},decode(e,t){const{Err:n}=Be;let s=0;if(e<0||e>256)throw new n("tlv.encode: wrong tag");if(t.length<2||t[s++]!==e)throw new n("tlv.decode: wrong tlv");const i=t[s++];let r=0;if(128&i){const e=127&i;if(!e)throw new n("tlv.decode(long): indefinite length not supported");if(e>4)throw new n("tlv.decode(long): byte length is too big");const a=t.subarray(s,s+e);if(a.length!==e)throw new n("tlv.decode: length bytes not complete");if(0===a[0])throw new n("tlv.decode(long): zero leftmost byte");for(const e of a)r=r<<8|e;if(s+=e,r<128)throw new n("tlv.decode(long): not minimal encoding")}else r=i;const a=t.subarray(s,s+r);if(a.length!==r)throw new n("tlv.decode: wrong value length");return{v:a,l:t.subarray(s+r)}}},_int:{encode(e){const{Err:t}=Be;if(e<Fe)throw new t("integer: negative integers are not allowed");let n=O(e);if(8&Number.parseInt(n[0],16)&&(n="00"+n),1&n.length)throw new t("unexpected DER parsing assertion: unpadded hex");return n},decode(e){const{Err:t}=Be;if(128&e[0])throw new t("invalid signature integer: negative");if(0===e[0]&&!(128&e[1]))throw new t("invalid signature integer: unnecessary leading zero");return Me(e)}},toSig(e){const{Err:t,_int:n,_tlv:s}=Be,i="string"==typeof e?ze(e):e;B(i);const{v:r,l:a}=s.decode(48,i);if(a.length)throw new t("invalid signature: left bytes after parsing");const{v:o,l}=s.decode(2,r),{v:c,l:d}=s.decode(2,l);if(d.length)throw new t("invalid signature: left bytes after parsing");return{r:n.decode(o),s:n.decode(c)}},hexFromSig(e){const{_tlv:t,_int:n}=Be,s=t.encode(2,n.encode(e.r))+t.encode(2,n.encode(e.s));return t.encode(48,s)}},Fe=BigInt(0),ke=BigInt(1),Ce=(BigInt(2),BigInt(3));function Oe(e){const t=function(e){const t=ve(e);q(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:n,Fp:s,a:i}=t;if(n){if(!s.eql(i,s.ZERO))throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");if("object"!=typeof n||"bigint"!=typeof n.beta||"function"!=typeof n.splitScalar)throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:n}=t,s=fe(t.n,t.nBitLength),i=t.toBytes||((e,t,s)=>{const i=t.toAffine();return j(Uint8Array.from([4]),n.toBytes(i.x),n.toBytes(i.y))}),r=t.fromBytes||(e=>{const t=e.subarray(1);return{x:n.fromBytes(t.subarray(0,n.BYTES)),y:n.fromBytes(t.subarray(n.BYTES,2*n.BYTES))}});function a(e){const{a:s,b:i}=t,r=n.sqr(e),a=n.mul(r,e);return n.add(n.add(a,n.mul(e,s)),i)}if(!n.eql(n.sqr(t.Gy),a(t.Gx)))throw new Error("bad generator point: equation left != right");function o(e){const{allowedPrivateKeyLengths:n,nByteLength:s,wrapPrivateKey:i,n:r}=t;if(n&&"bigint"!=typeof e){if(z(e)&&(e=C(e)),"string"!=typeof e||!n.includes(e.length))throw new Error("invalid private key");e=e.padStart(2*s,"0")}let a;try{a="bigint"==typeof e?e:N(Q("private key",e,s))}catch(t){throw new Error("invalid private key, expected hex or "+s+" bytes, got "+typeof e)}return i&&(a=ae(a,r)),R("private key",a,ke,r),a}function l(e){if(!(e instanceof u))throw new Error("ProjectivePoint expected")}const c=K(((e,t)=>{const{px:s,py:i,pz:r}=e;if(n.eql(r,n.ONE))return{x:s,y:i};const a=e.is0();null==t&&(t=a?n.ONE:n.inv(r));const o=n.mul(s,t),l=n.mul(i,t),c=n.mul(r,t);if(a)return{x:n.ZERO,y:n.ZERO};if(!n.eql(c,n.ONE))throw new Error("invZ was invalid");return{x:o,y:l}})),d=K((e=>{if(e.is0()){if(t.allowInfinityPoint&&!n.is0(e.py))return;throw new Error("bad point: ZERO")}const{x:s,y:i}=e.toAffine();if(!n.isValid(s)||!n.isValid(i))throw new Error("bad point: x or y not FE");const r=n.sqr(i),o=a(s);if(!n.eql(r,o))throw new Error("bad point: equation left != right");if(!e.isTorsionFree())throw new Error("bad point: not in prime-order subgroup");return!0}));class u{constructor(e,t,s){if(this.px=e,this.py=t,this.pz=s,null==e||!n.isValid(e))throw new Error("x required");if(null==t||!n.isValid(t))throw new Error("y required");if(null==s||!n.isValid(s))throw new Error("z required");Object.freeze(this)}static fromAffine(e){const{x:t,y:s}=e||{};if(!e||!n.isValid(t)||!n.isValid(s))throw new Error("invalid affine point");if(e instanceof u)throw new Error("projective point not allowed");const i=e=>n.eql(e,n.ZERO);return i(t)&&i(s)?u.ZERO:new u(t,s,n.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(u.fromAffine)}static fromHex(e){const t=u.fromAffine(r(Q("pointHex",e)));return t.assertValidity(),t}static fromPrivateKey(e){return u.BASE.multiply(o(e))}static msm(e,t){return function(e,t,n,s){if(function(e,t){if(!Array.isArray(e))throw new Error("array expected");e.forEach(((e,n)=>{if(!(e instanceof t))throw new Error("invalid point at index "+n)}))}(n,e),function(e,t){if(!Array.isArray(e))throw new Error("array of scalars expected");e.forEach(((e,n)=>{if(!t.isValid(e))throw new Error("invalid scalar at index "+n)}))}(s,t),n.length!==s.length)throw new Error("arrays of points and scalars must have equal length");const i=e.ZERO,r=G(BigInt(n.length)),a=r>12?r-3:r>4?r-2:r?2:1,o=(1<<a)-1,l=new Array(o+1).fill(i);let c=i;for(let e=Math.floor((t.BITS-1)/a)*a;e>=0;e-=a){l.fill(i);for(let t=0;t<s.length;t++){const i=s[t],r=Number(i>>BigInt(e)&BigInt(o));l[r]=l[r].add(n[t])}let t=i;for(let e=l.length-1,n=i;e>0;e--)n=n.add(l[e]),t=t.add(n);if(c=c.add(t),0!==e)for(let e=0;e<a;e++)c=c.double()}return c}(u,s,e,t)}_setWindowSize(e){h.setWindowSize(this,e)}assertValidity(){d(this)}hasEvenY(){const{y:e}=this.toAffine();if(n.isOdd)return!n.isOdd(e);throw new Error("Field doesn't support isOdd")}equals(e){l(e);const{px:t,py:s,pz:i}=this,{px:r,py:a,pz:o}=e,c=n.eql(n.mul(t,o),n.mul(r,i)),d=n.eql(n.mul(s,o),n.mul(a,i));return c&&d}negate(){return new u(this.px,n.neg(this.py),this.pz)}double(){const{a:e,b:s}=t,i=n.mul(s,Ce),{px:r,py:a,pz:o}=this;let l=n.ZERO,c=n.ZERO,d=n.ZERO,f=n.mul(r,r),h=n.mul(a,a),p=n.mul(o,o),m=n.mul(r,a);return m=n.add(m,m),d=n.mul(r,o),d=n.add(d,d),l=n.mul(e,d),c=n.mul(i,p),c=n.add(l,c),l=n.sub(h,c),c=n.add(h,c),c=n.mul(l,c),l=n.mul(m,l),d=n.mul(i,d),p=n.mul(e,p),m=n.sub(f,p),m=n.mul(e,m),m=n.add(m,d),d=n.add(f,f),f=n.add(d,f),f=n.add(f,p),f=n.mul(f,m),c=n.add(c,f),p=n.mul(a,o),p=n.add(p,p),f=n.mul(p,m),l=n.sub(l,f),d=n.mul(p,h),d=n.add(d,d),d=n.add(d,d),new u(l,c,d)}add(e){l(e);const{px:s,py:i,pz:r}=this,{px:a,py:o,pz:c}=e;let d=n.ZERO,f=n.ZERO,h=n.ZERO;const p=t.a,m=n.mul(t.b,Ce);let g=n.mul(s,a),_=n.mul(i,o),b=n.mul(r,c),y=n.add(s,i),A=n.add(a,o);y=n.mul(y,A),A=n.add(g,_),y=n.sub(y,A),A=n.add(s,r);let w=n.add(a,c);return A=n.mul(A,w),w=n.add(g,b),A=n.sub(A,w),w=n.add(i,r),d=n.add(o,c),w=n.mul(w,d),d=n.add(_,b),w=n.sub(w,d),h=n.mul(p,A),d=n.mul(m,b),h=n.add(d,h),d=n.sub(_,h),h=n.add(_,h),f=n.mul(d,h),_=n.add(g,g),_=n.add(_,g),b=n.mul(p,b),A=n.mul(m,A),_=n.add(_,b),b=n.sub(g,b),b=n.mul(p,b),A=n.add(A,b),g=n.mul(_,A),f=n.add(f,g),g=n.mul(w,A),d=n.mul(y,d),d=n.sub(d,g),g=n.mul(y,_),h=n.mul(w,h),h=n.add(h,g),new u(d,f,h)}subtract(e){return this.add(e.negate())}is0(){return this.equals(u.ZERO)}wNAF(e){return h.wNAFCached(this,e,u.normalizeZ)}multiplyUnsafe(e){const{endo:s,n:i}=t;R("scalar",e,Fe,i);const r=u.ZERO;if(e===Fe)return r;if(this.is0()||e===ke)return this;if(!s||h.hasPrecomputes(this))return h.wNAFCachedUnsafe(this,e,u.normalizeZ);let{k1neg:a,k1:o,k2neg:l,k2:c}=s.splitScalar(e),d=r,f=r,p=this;for(;o>Fe||c>Fe;)o&ke&&(d=d.add(p)),c&ke&&(f=f.add(p)),p=p.double(),o>>=ke,c>>=ke;return a&&(d=d.negate()),l&&(f=f.negate()),f=new u(n.mul(f.px,s.beta),f.py,f.pz),d.add(f)}multiply(e){const{endo:s,n:i}=t;let r,a;if(R("scalar",e,ke,i),s){const{k1neg:t,k1:i,k2neg:o,k2:l}=s.splitScalar(e);let{p:c,f:d}=this.wNAF(i),{p:f,f:p}=this.wNAF(l);c=h.constTimeNegate(t,c),f=h.constTimeNegate(o,f),f=new u(n.mul(f.px,s.beta),f.py,f.pz),r=c.add(f),a=d.add(p)}else{const{p:t,f:n}=this.wNAF(e);r=t,a=n}return u.normalizeZ([r,a])[0]}multiplyAndAddUnsafe(e,t,n){const s=u.BASE,i=(e,t)=>t!==Fe&&t!==ke&&e.equals(s)?e.multiply(t):e.multiplyUnsafe(t),r=i(this,t).add(i(e,n));return r.is0()?void 0:r}toAffine(e){return c(this,e)}isTorsionFree(){const{h:e,isTorsionFree:n}=t;if(e===ke)return!0;if(n)return n(u,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:e,clearCofactor:n}=t;return e===ke?this:n?n(u,this):this.multiplyUnsafe(t.h)}toRawBytes(e=!0){return F("isCompressed",e),this.assertValidity(),i(u,this,e)}toHex(e=!0){return F("isCompressed",e),C(this.toRawBytes(e))}}u.BASE=new u(t.Gx,t.Gy,n.ONE),u.ZERO=new u(n.ZERO,n.ONE,n.ZERO);const f=t.nBitLength,h=(p=u,m=t.endo?Math.ceil(f/2):f,{constTimeNegate:_e,hasPrecomputes:e=>1!==xe(e),unsafeLadder(e,t,n=p.ZERO){let s=e;for(;t>me;)t&ge&&(n=n.add(s)),s=s.double(),t>>=ge;return n},precomputeWindow(e,t){const{windows:n,windowSize:s}=ye(t,m),i=[];let r=e,a=r;for(let e=0;e<n;e++){a=r,i.push(a);for(let e=1;e<s;e++)a=a.add(r),i.push(a);r=a.double()}return i},wNAF(e,t,n){const{windows:s,windowSize:i}=ye(e,m);let r=p.ZERO,a=p.BASE;const o=BigInt(2**e-1),l=2**e,c=BigInt(e);for(let e=0;e<s;e++){const s=e*i;let d=Number(n&o);n>>=c,d>i&&(d-=l,n+=ge);const u=s,f=s+Math.abs(d)-1,h=e%2!=0,p=d<0;0===d?a=a.add(_e(h,t[u])):r=r.add(_e(p,t[f]))}return{p:r,f:a}},wNAFUnsafe(e,t,n,s=p.ZERO){const{windows:i,windowSize:r}=ye(e,m),a=BigInt(2**e-1),o=2**e,l=BigInt(e);for(let e=0;e<i;e++){const i=e*r;if(n===me)break;let c=Number(n&a);if(n>>=l,c>r&&(c-=o,n+=ge),0===c)continue;let d=t[i+Math.abs(c)-1];c<0&&(d=d.negate()),s=s.add(d)}return s},getPrecomputes(e,t,n){let s=Ae.get(t);return s||(s=this.precomputeWindow(t,e),1!==e&&Ae.set(t,n(s))),s},wNAFCached(e,t,n){const s=xe(e);return this.wNAF(s,this.getPrecomputes(s,e,n),t)},wNAFCachedUnsafe(e,t,n,s){const i=xe(e);return 1===i?this.unsafeLadder(e,t,s):this.wNAFUnsafe(i,this.getPrecomputes(i,e,n),t,s)},setWindowSize(e,t){be(t,m),we.set(e,t),Ae.delete(e)}});var p,m;return{CURVE:t,ProjectivePoint:u,normPrivateKeyToScalar:o,weierstrassEquation:a,isWithinCurveOrder:function(e){return U(e,ke,t.n)}}}function De(e){const t=function(e){const t=ve(e);return q(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:n,n:s}=t,i=n.BYTES+1,r=2*n.BYTES+1;function a(e){return ae(e,s)}function o(e){return ce(e,s)}const{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:d,isWithinCurveOrder:u}=Oe({...t,toBytes(e,t,s){const i=t.toAffine(),r=n.toBytes(i.x),a=j;return F("isCompressed",s),s?a(Uint8Array.from([t.hasEvenY()?2:3]),r):a(Uint8Array.from([4]),r,n.toBytes(i.y))},fromBytes(e){const t=e.length,s=e[0],a=e.subarray(1);if(t!==i||2!==s&&3!==s){if(t===r&&4===s)return{x:n.fromBytes(a.subarray(0,n.BYTES)),y:n.fromBytes(a.subarray(n.BYTES,2*n.BYTES))};throw new Error("invalid Point, expected length of "+i+", or uncompressed "+r+", got "+t)}{const e=N(a);if(!U(e,ke,n.ORDER))throw new Error("Point is not on curve");const t=d(e);let i;try{i=n.sqrt(t)}catch(e){const t=e instanceof Error?": "+e.message:"";throw new Error("Point is not on curve"+t)}return!(1&~s)!=((i&ke)===ke)&&(i=n.neg(i)),{x:e,y:i}}}}),f=e=>C(I(e,t.nByteLength));function h(e){return e>s>>ke}const p=(e,t,n)=>N(e.slice(t,n));class m{constructor(e,t,n){this.r=e,this.s=t,this.recovery=n,this.assertValidity()}static fromCompact(e){const n=t.nByteLength;return e=Q("compactSignature",e,2*n),new m(p(e,0,n),p(e,n,2*n))}static fromDER(e){const{r:t,s:n}=Be.toSig(Q("DER",e));return new m(t,n)}assertValidity(){R("r",this.r,ke,s),R("s",this.s,ke,s)}addRecoveryBit(e){return new m(this.r,this.s,e)}recoverPublicKey(e){const{r:s,s:i,recovery:r}=this,c=y(Q("msgHash",e));if(null==r||![0,1,2,3].includes(r))throw new Error("recovery id invalid");const d=2===r||3===r?s+t.n:s;if(d>=n.ORDER)throw new Error("recovery id 2 or 3 invalid");const u=1&r?"03":"02",h=l.fromHex(u+f(d)),p=o(d),m=a(-c*p),g=a(i*p),_=l.BASE.multiplyAndAddUnsafe(h,m,g);if(!_)throw new Error("point at infinify");return _.assertValidity(),_}hasHighS(){return h(this.s)}normalizeS(){return this.hasHighS()?new m(this.r,a(-this.s),this.recovery):this}toDERRawBytes(){return S(this.toDERHex())}toDERHex(){return Be.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return S(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}const g={isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,randomPrivateKey:()=>{const e=pe(t.n);return function(e,t,n=!1){const s=e.length,i=he(t),r=pe(t);if(s<16||s<r||s>1024)throw new Error("expected "+r+"-1024 bytes of input, got "+s);const a=ae(n?N(e):P(e),t-ee)+ee;return n?Y(a,i):I(a,i)}(t.randomBytes(e),t.n)},precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};function _(e){const t=z(e),n="string"==typeof e,s=(t||n)&&e.length;return t?s===i||s===r:n?s===2*i||s===2*r:e instanceof l}const b=t.bits2int||function(e){if(e.length>8192)throw new Error("input is too large");const n=N(e),s=8*e.length-t.nBitLength;return s>0?n>>BigInt(s):n},y=t.bits2int_modN||function(e){return a(b(e))},A=Z(t.nBitLength);function w(e){return R("num < 2^"+t.nBitLength,e,Fe,A),I(e,t.nByteLength)}const x={lowS:t.lowS,prehash:!1},v={lowS:t.lowS,prehash:!1};return l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:function(e,t,n=!0){if(_(e))throw new Error("first arg must be private key");if(!_(t))throw new Error("second arg must be public key");return l.fromHex(t).multiply(c(e)).toRawBytes(n)},sign:function(e,s,i=x){const{seed:r,k2sig:d}=function(e,s,i=x){if(["recovered","canonical"].some((e=>e in i)))throw new Error("sign() legacy options not supported");const{hash:r,randomBytes:d}=t;let{lowS:f,prehash:p,extraEntropy:g}=i;null==f&&(f=!0),e=Q("msgHash",e),Ee(i),p&&(e=Q("prehashed msgHash",r(e)));const _=y(e),A=c(s),v=[w(A),w(_)];if(null!=g&&!1!==g){const e=!0===g?d(n.BYTES):g;v.push(Q("extraEntropy",e))}const E=j(...v),M=_;return{seed:E,k2sig:function(e){const t=b(e);if(!u(t))return;const n=o(t),s=l.BASE.multiply(t).toAffine(),i=a(s.x);if(i===Fe)return;const r=a(n*a(M+i*A));if(r===Fe)return;let c=(s.x===i?0:2)|Number(s.y&ke),d=r;return f&&h(r)&&(d=function(e){return h(e)?a(-e):e}(r),c^=1),new m(i,d,c)}}}(e,s,i),f=t;return W(f.hash.outputLen,f.nByteLength,f.hmac)(r,d)},verify:function(e,n,s,i=v){const r=e;n=Q("msgHash",n),s=Q("publicKey",s);const{lowS:c,prehash:d,format:u}=i;if(Ee(i),"strict"in i)throw new Error("options.strict was renamed to lowS");if(void 0!==u&&"compact"!==u&&"der"!==u)throw new Error("format must be compact or der");const f="string"==typeof r||z(r),h=!f&&!u&&"object"==typeof r&&null!==r&&"bigint"==typeof r.r&&"bigint"==typeof r.s;if(!f&&!h)throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");let p,g;try{if(h&&(p=new m(r.r,r.s)),f){try{"compact"!==u&&(p=m.fromDER(r))}catch(e){if(!(e instanceof Be.Err))throw e}p||"der"===u||(p=m.fromCompact(r))}g=l.fromHex(s)}catch(e){return!1}if(!p)return!1;if(c&&p.hasHighS())return!1;d&&(n=t.hash(n));const{r:_,s:b}=p,A=y(n),w=o(b),x=a(A*w),E=a(_*w),M=l.BASE.multiplyAndAddUnsafe(g,x,E)?.toAffine();return!!M&&a(M.x)===_},ProjectivePoint:l,Signature:m,utils:g}}function Le(e){return{hash:e,hmac:(t,...n)=>x(e,t,function(...e){let t=0;for(let n=0;n<e.length;n++){const s=e[n];r(s),t+=s.length}const n=new Uint8Array(t);for(let t=0,s=0;t<e.length;t++){const i=e[t];n.set(i,s),s+=i.length}return n}(...n)),randomBytes:h}}BigInt(4);const Te=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),Se=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Ne=BigInt(1),Pe=BigInt(2),Ie=(e,t)=>(e+t/Pe)/t;const Ye=fe(Te,void 0,void 0,{sqrt:function(e){const t=Te,n=BigInt(3),s=BigInt(6),i=BigInt(11),r=BigInt(22),a=BigInt(23),o=BigInt(44),l=BigInt(88),c=e*e*e%t,d=c*c*e%t,u=le(d,n,t)*d%t,f=le(u,n,t)*d%t,h=le(f,Pe,t)*c%t,p=le(h,i,t)*h%t,m=le(p,r,t)*p%t,g=le(m,o,t)*m%t,_=le(g,l,t)*g%t,b=le(_,o,t)*m%t,y=le(b,n,t)*d%t,A=le(y,a,t)*p%t,w=le(A,s,t)*c%t,x=le(w,Pe,t);if(!Ye.eql(Ye.sqr(x),e))throw new Error("Cannot find square root");return x}}),Qe=function(e,t){const n=t=>De({...e,...Le(t)});return Object.freeze({...n(t),create:n})}({a:BigInt(0),b:BigInt(7),Fp:Ye,n:Se,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{const t=Se,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),s=-Ne*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),i=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),r=n,a=BigInt("0x100000000000000000000000000000000"),o=Ie(r*e,t),l=Ie(-s*e,t);let c=ae(e-o*n-l*i,t),d=ae(-o*s-l*r,t);const u=c>a,f=d>a;if(u&&(c=t-c),f&&(d=t-d),c>a||d>a)throw new Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:u,k1:c,k2neg:f,k2:d}}}},A);BigInt(0),Qe.ProjectivePoint},8113:(e,t,n)=>{function s(e){if(!Number.isSafeInteger(e)||e<0)throw new Error("positive integer expected, got "+e)}function i(e,...t){if(!((n=e)instanceof Uint8Array||ArrayBuffer.isView(n)&&"Uint8Array"===n.constructor.name))throw new Error("Uint8Array expected");var n;if(t.length>0&&!t.includes(e.length))throw new Error("Uint8Array expected of length "+t+", got length="+e.length)}function r(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}function a(e,t){i(e);const n=t.outputLen;if(e.length<n)throw new Error("digestInto() expects output buffer of length at least "+n)}n.d(t,{CC:()=>r,DO:()=>i,Fe:()=>s,Ht:()=>a})},4611:(e,t,n)=>{n.d(t,{DH:()=>i,Fc:()=>c,O8:()=>r,Ow:()=>a,Vw:()=>u,ZJ:()=>d,ld:()=>f,qv:()=>o});var s=n(8113);const i=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),r=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),a=(e,t)=>e<<32-t|e>>>t,o=(()=>68===new Uint8Array(new Uint32Array([287454020]).buffer)[0])(),l=e=>e<<24&4278190080|e<<8&16711680|e>>>8&65280|e>>>24&255;function c(e){for(let t=0;t<e.length;t++)e[t]=l(e[t])}function d(e){return"string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),(0,s.DO)(e),e}class u{clone(){return this._cloneInto()}}function f(e){const t=t=>e().update(d(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}},5190:(e,t,n)=>{n.d(t,{C:()=>s});class s extends Error{constructor(e,t={}){const n=t.cause instanceof s?t.cause.details:t.cause?.message?t.cause.message:t.details,i=t.cause instanceof s&&t.cause.docsPath||t.docsPath;super([e||"An error occurred.","",...t.metaMessages?[...t.metaMessages,""]:[],...i?[`Docs: https://abitype.dev${i}`]:[],...n?[`Details: ${n}`]:[],"Version: abitype@1.0.7"].join("\n")),Object.defineProperty(this,"details",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"docsPath",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"metaMessages",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"shortMessage",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"AbiTypeError"}),t.cause&&(this.cause=t.cause),this.details=n,this.docsPath=i,this.metaMessages=t.metaMessages,this.shortMessage=e}}},1266:(e,t,n)=>{n.d(t,{UG:()=>r,zz:()=>i});var s=n(5190);s.C;class i extends s.C{constructor({type:e}){super("Unknown type.",{metaMessages:[`Type "${e}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"UnknownTypeError"})}}class r extends s.C{constructor({type:e}){super("Unknown type.",{metaMessages:[`Type "${e}" is not a valid ABI type.`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"UnknownSolidityTypeError"})}}},4246:(e,t,n)=>{n.d(t,{A9:()=>i,NO:()=>o,Pj:()=>l,dV:()=>r,nx:()=>c,zd:()=>a});var s=n(5190);s.C;class i extends s.C{constructor({params:e}){super("Failed to parse ABI parameters.",{details:`parseAbiParameters(${JSON.stringify(e,null,2)})`,docsPath:"/api/human#parseabiparameters-1"}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidAbiParametersError"})}}class r extends s.C{constructor({param:e}){super("Invalid ABI parameter.",{details:e}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidParameterError"})}}class a extends s.C{constructor({param:e,name:t}){super("Invalid ABI parameter.",{details:e,metaMessages:[`"${t}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"SolidityProtectedKeywordError"})}}class o extends s.C{constructor({param:e,type:t,modifier:n}){super("Invalid ABI parameter.",{details:e,metaMessages:[`Modifier "${n}" not allowed${t?` in "${t}" type`:""}.`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidModifierError"})}}class l extends s.C{constructor({param:e,type:t,modifier:n}){super("Invalid ABI parameter.",{details:e,metaMessages:[`Modifier "${n}" not allowed${t?` in "${t}" type`:""}.`,`Data location can only be specified for array, struct, or mapping types, but "${n}" was given.`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidFunctionModifierError"})}}class c extends s.C{constructor({abiParameter:e}){super("Invalid ABI parameter.",{details:JSON.stringify(e,null,2),metaMessages:["ABI parameter type is invalid."]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidAbiTypeParameterError"})}}},5297:(e,t,n)=>{n.d(t,{X9:()=>a,s7:()=>i,x8:()=>r});var s=n(5190);class i extends s.C{constructor({signature:e,type:t}){super(`Invalid ${t} signature.`,{details:e}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidSignatureError"})}}class r extends s.C{constructor({signature:e}){super("Unknown signature.",{details:e}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"UnknownSignatureError"})}}class a extends s.C{constructor({signature:e}){super("Invalid struct signature.",{details:e,metaMessages:["No properties exist."]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidStructSignatureError"})}}},3021:(e,t,n)=>{n.d(t,{Dv:()=>v,FO:()=>m,Ji:()=>u,Rv:()=>l,WL:()=>p,Yo:()=>b,ej:()=>f,fC:()=>E,iB:()=>c,kz:()=>a,l9:()=>_,pc:()=>r,sP:()=>x,v7:()=>M,v8:()=>A});var s=n(8537);const i=/^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;function r(e){return i.test(e)}function a(e){return(0,s.Yv)(i,e)}const o=/^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;function l(e){return o.test(e)}function c(e){return(0,s.Yv)(o,e)}const d=/^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;function u(e){return d.test(e)}function f(e){return(0,s.Yv)(d,e)}const h=/^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \{(?<properties>.*?)\}$/;function p(e){return h.test(e)}function m(e){return(0,s.Yv)(h,e)}const g=/^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;function _(e){return g.test(e)}function b(e){return(0,s.Yv)(g,e)}const y=/^fallback\(\) external(?:\s(?<stateMutability>payable{1}))?$/;function A(e){return y.test(e)}const w=/^receive\(\) external payable$/;function x(e){return w.test(e)}const v=new Set(["memory","indexed","storage","calldata"]),E=new Set(["indexed"]),M=new Set(["calldata","memory","storage"])},7775:(e,t,n)=>{n.d(t,{e:()=>u});var s=n(8537),i=n(1266),r=n(4246),a=n(5297),o=n(5190);class l extends o.C{constructor({type:e}){super("Circular reference detected.",{metaMessages:[`Struct "${e}" is a circular reference.`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"CircularReferenceError"})}}var c=n(3021),d=n(1542);function u(e){const t={},n=e.length;for(let s=0;s<n;s++){const n=e[s];if(!(0,c.WL)(n))continue;const i=(0,c.FO)(n);if(!i)throw new a.s7({signature:n,type:"struct"});const r=i.properties.split(";"),o=[],l=r.length;for(let e=0;e<l;e++){const t=r[e].trim();if(!t)continue;const n=(0,d.Pj)(t,{type:"struct"});o.push(n)}if(!o.length)throw new a.X9({signature:n});t[i.name]=o}const s={},i=Object.entries(t),r=i.length;for(let e=0;e<r;e++){const[n,r]=i[e];s[n]=h(r,t)}return s}const f=/^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;function h(e,t,n=new Set){const a=[],o=e.length;for(let c=0;c<o;c++){const o=e[c];if(s.wj.test(o.type))a.push(o);else{const e=(0,s.Yv)(f,o.type);if(!e?.type)throw new r.nx({abiParameter:o});const{array:c,type:u}=e;if(u in t){if(n.has(u))throw new l({type:u});a.push({...o,type:`tuple${c??""}`,components:h(t[u]??[],t,new Set([...n,u]))})}else{if(!(0,d._o)(u))throw new i.zz({type:u});a.push(o)}}}return a}},1542:(e,t,n)=>{n.d(t,{_o:()=>_,Pj:()=>m,uT:()=>u,NV:()=>g});var s=n(8537),i=n(1266),r=n(4246),a=n(5297),o=n(5190);class l extends o.C{constructor({current:e,depth:t}){super("Unbalanced parentheses.",{metaMessages:[`"${e.trim()}" has too many ${t>0?"opening":"closing"} parentheses.`],details:`Depth "${t}"`}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidParenthesisError"})}}const c=new Map([["address",{type:"address"}],["bool",{type:"bool"}],["bytes",{type:"bytes"}],["bytes32",{type:"bytes32"}],["int",{type:"int256"}],["int256",{type:"int256"}],["string",{type:"string"}],["uint",{type:"uint256"}],["uint8",{type:"uint8"}],["uint16",{type:"uint16"}],["uint24",{type:"uint24"}],["uint32",{type:"uint32"}],["uint64",{type:"uint64"}],["uint96",{type:"uint96"}],["uint112",{type:"uint112"}],["uint160",{type:"uint160"}],["uint192",{type:"uint192"}],["uint256",{type:"uint256"}],["address owner",{type:"address",name:"owner"}],["address to",{type:"address",name:"to"}],["bool approved",{type:"bool",name:"approved"}],["bytes _data",{type:"bytes",name:"_data"}],["bytes data",{type:"bytes",name:"data"}],["bytes signature",{type:"bytes",name:"signature"}],["bytes32 hash",{type:"bytes32",name:"hash"}],["bytes32 r",{type:"bytes32",name:"r"}],["bytes32 root",{type:"bytes32",name:"root"}],["bytes32 s",{type:"bytes32",name:"s"}],["string name",{type:"string",name:"name"}],["string symbol",{type:"string",name:"symbol"}],["string tokenURI",{type:"string",name:"tokenURI"}],["uint tokenId",{type:"uint256",name:"tokenId"}],["uint8 v",{type:"uint8",name:"v"}],["uint256 balance",{type:"uint256",name:"balance"}],["uint256 tokenId",{type:"uint256",name:"tokenId"}],["uint256 value",{type:"uint256",name:"value"}],["event:address indexed from",{type:"address",name:"from",indexed:!0}],["event:address indexed to",{type:"address",name:"to",indexed:!0}],["event:uint indexed tokenId",{type:"uint256",name:"tokenId",indexed:!0}],["event:uint256 indexed tokenId",{type:"uint256",name:"tokenId",indexed:!0}]]);var d=n(3021);function u(e,t={}){if((0,d.Ji)(e)){const n=(0,d.ej)(e);if(!n)throw new a.s7({signature:e,type:"function"});const s=g(n.parameters),i=[],r=s.length;for(let e=0;e<r;e++)i.push(m(s[e],{modifiers:d.v7,structs:t,type:"function"}));const o=[];if(n.returns){const e=g(n.returns),s=e.length;for(let n=0;n<s;n++)o.push(m(e[n],{modifiers:d.v7,structs:t,type:"function"}))}return{name:n.name,type:"function",stateMutability:n.stateMutability??"nonpayable",inputs:i,outputs:o}}if((0,d.Rv)(e)){const n=(0,d.iB)(e);if(!n)throw new a.s7({signature:e,type:"event"});const s=g(n.parameters),i=[],r=s.length;for(let e=0;e<r;e++)i.push(m(s[e],{modifiers:d.fC,structs:t,type:"event"}));return{name:n.name,type:"event",inputs:i}}if((0,d.pc)(e)){const n=(0,d.kz)(e);if(!n)throw new a.s7({signature:e,type:"error"});const s=g(n.parameters),i=[],r=s.length;for(let e=0;e<r;e++)i.push(m(s[e],{structs:t,type:"error"}));return{name:n.name,type:"error",inputs:i}}if((0,d.l9)(e)){const n=(0,d.Yo)(e);if(!n)throw new a.s7({signature:e,type:"constructor"});const s=g(n.parameters),i=[],r=s.length;for(let e=0;e<r;e++)i.push(m(s[e],{structs:t,type:"constructor"}));return{type:"constructor",stateMutability:n.stateMutability??"nonpayable",inputs:i}}if((0,d.v8)(e))return{type:"fallback"};if((0,d.sP)(e))return{type:"receive",stateMutability:"payable"};throw new a.x8({signature:e})}const f=/^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/,h=/^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/,p=/^u?int$/;function m(e,t){const n=function(e,t,n){let s="";if(n)for(const e of Object.entries(n)){if(!e)continue;let t="";for(const n of e[1])t+=`[${n.type}${n.name?`:${n.name}`:""}]`;s+=`(${e[0]}{${t}})`}return t?`${t}:${e}${s}`:e}(e,t?.type,t?.structs);if(c.has(n))return c.get(n);const a=s.wj.test(e),o=(0,s.Yv)(a?h:f,e);if(!o)throw new r.dV({param:e});if(o.name&&function(e){return"address"===e||"bool"===e||"function"===e||"string"===e||"tuple"===e||s.BD.test(e)||s.Ge.test(e)||b.test(e)}(o.name))throw new r.zd({param:e,name:o.name});const l=o.name?{name:o.name}:{},u="indexed"===o.modifier?{indexed:!0}:{},y=t?.structs??{};let A,w={};if(a){A="tuple";const e=g(o.type),t=[],n=e.length;for(let s=0;s<n;s++)t.push(m(e[s],{structs:y}));w={components:t}}else if(o.type in y)A="tuple",w={components:y[o.type]};else if(p.test(o.type))A=`${o.type}256`;else if(A=o.type,"struct"!==t?.type&&!_(A))throw new i.UG({type:A});if(o.modifier){if(!t?.modifiers?.has?.(o.modifier))throw new r.NO({param:e,type:t?.type,modifier:o.modifier});if(d.v7.has(o.modifier)&&!function(e,t){return t||"bytes"===e||"string"===e||"tuple"===e}(A,!!o.array))throw new r.Pj({param:e,type:t?.type,modifier:o.modifier})}const x={type:`${A}${o.array??""}`,...l,...u,...w};return c.set(n,x),x}function g(e,t=[],n="",s=0){const i=e.trim().length;for(let r=0;r<i;r++){const i=e[r],a=e.slice(r+1);switch(i){case",":return 0===s?g(a,[...t,n.trim()]):g(a,t,`${n}${i}`,s);case"(":return g(a,t,`${n}${i}`,s+1);case")":return g(a,t,`${n}${i}`,s-1);default:return g(a,t,`${n}${i}`,s)}}if(""===n)return t;if(0!==s)throw new l({current:n,depth:s});return t.push(n.trim()),t}function _(e){return"address"===e||"bool"===e||"function"===e||"string"===e||s.BD.test(e)||s.Ge.test(e)}const b=/^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/},8537:(e,t,n)=>{function s(e,t){const n=e.exec(t);return n?.groups}n.d(t,{BD:()=>i,Ge:()=>r,Yv:()=>s,wj:()=>a});const i=/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/,r=/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/,a=/^\(.+?\).*?$/}},s={};function i(e){var t=s[e];if(void 0!==t)return t.exports;var r=s[e]={id:e,loaded:!1,exports:{}};return n[e](r,r.exports,i),r.loaded=!0,r.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,s){if(1&s&&(n=this(n)),8&s)return n;if("object"==typeof n&&n){if(4&s&&n.__esModule)return n;if(16&s&&"function"==typeof n.then)return n}var r=Object.create(null);i.r(r);var a={};e=e||[null,t({}),t([]),t(t)];for(var o=2&s&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(r,a),r},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var r={};(()=>{i.d(r,{wC:()=>Gc,hp:()=>gh.Buffer,QM:()=>Zh,NZ:()=>Ay,pF:()=>yy,Fr:()=>si,cY:()=>lA,_5:()=>aA,b$:()=>oA,dP:()=>iy,dB:()=>zb,cg:()=>ky,RQ:()=>cA,BJ:()=>tA,ZI:()=>rA});var e={};i.r(e),i.d(e,{DO:()=>Sl,OG:()=>Xl,My:()=>Pl,bytesToNumberBE:()=>Hl,lX:()=>Ul,Id:()=>Jl,fg:()=>ql,qj:()=>Zl,hexToBytes:()=>jl,aY:()=>Tl,lq:()=>Rl,z:()=>Gl,Q5:()=>$l});var t,n,s={742:(e,t)=>{t.byteLength=function(e){var t=o(e),n=t[0],s=t[1];return 3*(n+s)/4-s},t.toByteArray=function(e){var t,n,r=o(e),a=r[0],l=r[1],c=new i(function(e,t,n){return 3*(t+n)/4-n}(0,a,l)),d=0,u=l>0?a-4:a;for(n=0;n<u;n+=4)t=s[e.charCodeAt(n)]<<18|s[e.charCodeAt(n+1)]<<12|s[e.charCodeAt(n+2)]<<6|s[e.charCodeAt(n+3)],c[d++]=t>>16&255,c[d++]=t>>8&255,c[d++]=255&t;return 2===l&&(t=s[e.charCodeAt(n)]<<2|s[e.charCodeAt(n+1)]>>4,c[d++]=255&t),1===l&&(t=s[e.charCodeAt(n)]<<10|s[e.charCodeAt(n+1)]<<4|s[e.charCodeAt(n+2)]>>2,c[d++]=t>>8&255,c[d++]=255&t),c},t.fromByteArray=function(e){for(var t,s=e.length,i=s%3,r=[],a=16383,o=0,c=s-i;o<c;o+=a)r.push(l(e,o,o+a>c?c:o+a));return 1===i?(t=e[s-1],r.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[s-2]<<8)+e[s-1],r.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),r.join("")};for(var n=[],s=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)n[a]=r[a],s[r.charCodeAt(a)]=a;function o(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,s){for(var i,r,a=[],o=t;o<s;o+=3)i=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(n[(r=i)>>18&63]+n[r>>12&63]+n[r>>6&63]+n[63&r]);return a.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},764:(e,t,n)=>{const s=n(742),i=n(645),r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.lW=l,t.h2=50;const a=2147483647;function o(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,l.prototype),t}function l(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return u(e)}return c(e,t,n)}function c(e,t,n){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!l.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|m(e,t);let s=o(n);const i=s.write(e,t);return i!==n&&(s=s.slice(0,i)),s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(W(e,Uint8Array)){const t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(W(e,ArrayBuffer)||e&&W(e.buffer,ArrayBuffer))return h(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(W(e,SharedArrayBuffer)||e&&W(e.buffer,SharedArrayBuffer)))return h(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return l.from(s,t,n);const i=function(e){if(l.isBuffer(e)){const t=0|p(e.length),n=o(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||V(e.length)?o(0):f(e):"Buffer"===e.type&&Array.isArray(e.data)?f(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function d(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function u(e){return d(e),o(e<0?0:0|p(e))}function f(e){const t=e.length<0?0:0|p(e.length),n=o(t);for(let s=0;s<t;s+=1)n[s]=255&e[s];return n}function h(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let s;return s=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(s,l.prototype),s}function p(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function m(e,t){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||W(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===n)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return J(e).length;default:if(i)return s?-1:Z(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,n){let s=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,n);case"utf8":case"utf-8":return z(this,t,n);case"ascii":return F(this,t,n);case"latin1":case"binary":return k(this,t,n);case"base64":return M(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,n);default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function _(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function b(e,t,n,s,i){if(0===e.length)return-1;if("string"==typeof n?(s=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),V(n=+n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=l.from(t,s)),l.isBuffer(t))return 0===t.length?-1:y(e,t,n,s,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,s,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,s,i){let r,a=1,o=e.length,l=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;a=2,o/=2,l/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){let s=-1;for(r=n;r<o;r++)if(c(e,r)===c(t,-1===s?0:r-s)){if(-1===s&&(s=r),r-s+1===l)return s*a}else-1!==s&&(r-=r-s),s=-1}else for(n+l>o&&(n=o-l),r=n;r>=0;r--){let n=!0;for(let s=0;s<l;s++)if(c(e,r+s)!==c(t,s)){n=!1;break}if(n)return r}return-1}function A(e,t,n,s){n=Number(n)||0;const i=e.length-n;s?(s=Number(s))>i&&(s=i):s=i;const r=t.length;let a;for(s>r/2&&(s=r/2),a=0;a<s;++a){const s=parseInt(t.substr(2*a,2),16);if(V(s))return a;e[n+a]=s}return a}function w(e,t,n,s){return X(Z(t,e.length-n),e,n,s)}function x(e,t,n,s){return X(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,s)}function v(e,t,n,s){return X(J(t),e,n,s)}function E(e,t,n,s){return X(function(e,t){let n,s,i;const r=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),s=n>>8,i=n%256,r.push(i),r.push(s);return r}(t,e.length-n),e,n,s)}function M(e,t,n){return 0===t&&n===e.length?s.fromByteArray(e):s.fromByteArray(e.slice(t,n))}function z(e,t,n){n=Math.min(e.length,n);const s=[];let i=t;for(;i<n;){const t=e[i];let r=null,a=t>239?4:t>223?3:t>191?2:1;if(i+a<=n){let n,s,o,l;switch(a){case 1:t<128&&(r=t);break;case 2:n=e[i+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(r=l));break;case 3:n=e[i+1],s=e[i+2],128==(192&n)&&128==(192&s)&&(l=(15&t)<<12|(63&n)<<6|63&s,l>2047&&(l<55296||l>57343)&&(r=l));break;case 4:n=e[i+1],s=e[i+2],o=e[i+3],128==(192&n)&&128==(192&s)&&128==(192&o)&&(l=(15&t)<<18|(63&n)<<12|(63&s)<<6|63&o,l>65535&&l<1114112&&(r=l))}}null===r?(r=65533,a=1):r>65535&&(r-=65536,s.push(r>>>10&1023|55296),r=56320|1023&r),s.push(r),i+=a}return function(e){const t=e.length;if(t<=B)return String.fromCharCode.apply(String,e);let n="",s=0;for(;s<t;)n+=String.fromCharCode.apply(String,e.slice(s,s+=B));return n}(s)}l.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,t,n){return c(e,t,n)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,t,n){return function(e,t,n){return d(e),e<=0?o(e):void 0!==t?"string"==typeof n?o(e).fill(t,n):o(e).fill(t):o(e)}(e,t,n)},l.allocUnsafe=function(e){return u(e)},l.allocUnsafeSlow=function(e){return u(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,t){if(W(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),W(t,Uint8Array)&&(t=l.from(t,t.offset,t.byteLength)),!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,s=t.length;for(let i=0,r=Math.min(n,s);i<r;++i)if(e[i]!==t[i]){n=e[i],s=t[i];break}return n<s?-1:s<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const s=l.allocUnsafe(t);let i=0;for(n=0;n<e.length;++n){let t=e[n];if(W(t,Uint8Array))i+t.length>s.length?(l.isBuffer(t)||(t=l.from(t)),t.copy(s,i)):Uint8Array.prototype.set.call(s,t,i);else{if(!l.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,i)}i+=t.length}return s},l.byteLength=m,l.prototype._isBuffer=!0,l.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)_(this,t,t+1);return this},l.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)_(this,t,t+3),_(this,t+1,t+2);return this},l.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)_(this,t,t+7),_(this,t+1,t+6),_(this,t+2,t+5),_(this,t+3,t+4);return this},l.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?z(this,0,e):g.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){let e="";const n=t.h2;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},r&&(l.prototype[r]=l.prototype.inspect),l.prototype.compare=function(e,t,n,s,i){if(W(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===s&&(s=0),void 0===i&&(i=this.length),t<0||n>e.length||s<0||i>this.length)throw new RangeError("out of range index");if(s>=i&&t>=n)return 0;if(s>=i)return-1;if(t>=n)return 1;if(this===e)return 0;let r=(i>>>=0)-(s>>>=0),a=(n>>>=0)-(t>>>=0);const o=Math.min(r,a),c=this.slice(s,i),d=e.slice(t,n);for(let e=0;e<o;++e)if(c[e]!==d[e]){r=c[e],a=d[e];break}return r<a?-1:a<r?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return b(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return b(this,e,t,n,!1)},l.prototype.write=function(e,t,n,s){if(void 0===t)s="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)s=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===s&&(s="utf8")):(s=n,n=void 0)}const i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let r=!1;for(;;)switch(s){case"hex":return A(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":case"latin1":case"binary":return x(this,e,t,n);case"base64":return v(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(r)throw new TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),r=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const B=4096;function F(e,t,n){let s="";n=Math.min(e.length,n);for(let i=t;i<n;++i)s+=String.fromCharCode(127&e[i]);return s}function k(e,t,n){let s="";n=Math.min(e.length,n);for(let i=t;i<n;++i)s+=String.fromCharCode(e[i]);return s}function C(e,t,n){const s=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>s)&&(n=s);let i="";for(let s=t;s<n;++s)i+=q[e[s]];return i}function O(e,t,n){const s=e.slice(t,n);let i="";for(let e=0;e<s.length-1;e+=2)i+=String.fromCharCode(s[e]+256*s[e+1]);return i}function D(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,n,s,i,r){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<r)throw new RangeError('"value" argument is out of bounds');if(n+s>e.length)throw new RangeError("Index out of range")}function T(e,t,n,s,i){H(t,s,i,e,n,7);let r=Number(t&BigInt(4294967295));e[n++]=r,r>>=8,e[n++]=r,r>>=8,e[n++]=r,r>>=8,e[n++]=r;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,n}function S(e,t,n,s,i){H(t,s,i,e,n,7);let r=Number(t&BigInt(4294967295));e[n+7]=r,r>>=8,e[n+6]=r,r>>=8,e[n+5]=r,r>>=8,e[n+4]=r;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=a,a>>=8,e[n+2]=a,a>>=8,e[n+1]=a,a>>=8,e[n]=a,n+8}function N(e,t,n,s,i,r){if(n+s>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(e,t,n,s,r){return t=+t,n>>>=0,r||N(e,0,n,4),i.write(e,t,n,s,23,4),n+4}function I(e,t,n,s,r){return t=+t,n>>>=0,r||N(e,0,n,8),i.write(e,t,n,s,52,8),n+8}l.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const s=this.subarray(e,t);return Object.setPrototypeOf(s,l.prototype),s},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=this[e],i=1,r=0;for(;++r<t&&(i*=256);)s+=this[e+r]*i;return s},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=this[e+--t],i=1;for(;t>0&&(i*=256);)s+=this[e+--t]*i;return s},l.prototype.readUint8=l.prototype.readUInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readBigUInt64LE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(s)+(BigInt(i)<<BigInt(32))})),l.prototype.readBigUInt64BE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(s)<<BigInt(32))+BigInt(i)})),l.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=this[e],i=1,r=0;for(;++r<t&&(i*=256);)s+=this[e+r]*i;return i*=128,s>=i&&(s-=Math.pow(2,8*t)),s},l.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);let s=t,i=1,r=this[e+--s];for(;s>0&&(i*=256);)r+=this[e+--s]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*t)),r},l.prototype.readInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){e>>>=0,t||D(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){e>>>=0,t||D(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readBigInt64LE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),l.prototype.readBigInt64BE=K((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||R(e,this.length-8);const s=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),l.prototype.readFloatLE=function(e,t){return e>>>=0,t||D(e,4,this.length),i.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return e>>>=0,t||D(e,4,this.length),i.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return e>>>=0,t||D(e,8,this.length),i.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return e>>>=0,t||D(e,8,this.length),i.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,t,n,s){e=+e,t>>>=0,n>>>=0,s||L(this,e,t,n,Math.pow(2,8*n)-1,0);let i=1,r=0;for(this[t]=255&e;++r<n&&(i*=256);)this[t+r]=e/i&255;return t+n},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,t,n,s){e=+e,t>>>=0,n>>>=0,s||L(this,e,t,n,Math.pow(2,8*n)-1,0);let i=n-1,r=1;for(this[t+i]=255&e;--i>=0&&(r*=256);)this[t+i]=e/r&255;return t+n},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,1,255,0),this[t]=255&e,t+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigUInt64LE=K((function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeBigUInt64BE=K((function(e,t=0){return S(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeIntLE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);L(this,e,t,n,s-1,-s)}let i=0,r=1,a=0;for(this[t]=255&e;++i<n&&(r*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/r|0)-a&255;return t+n},l.prototype.writeIntBE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);L(this,e,t,n,s-1,-s)}let i=n-1,r=1,a=0;for(this[t+i]=255&e;--i>=0&&(r*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/r|0)-a&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigInt64LE=K((function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeBigInt64BE=K((function(e,t=0){return S(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeFloatLE=function(e,t,n){return P(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return P(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return I(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return I(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,s){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<n&&(s=n),s===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-n&&(s=e.length-t+n);const i=s-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,s):Uint8Array.prototype.set.call(e,this.subarray(n,s),t),i},l.prototype.fill=function(e,t,n,s){if("string"==typeof e){if("string"==typeof t?(s=t,t=0,n=this.length):"string"==typeof n&&(s=n,n=this.length),void 0!==s&&"string"!=typeof s)throw new TypeError("encoding must be a string");if("string"==typeof s&&!l.isEncoding(s))throw new TypeError("Unknown encoding: "+s);if(1===e.length){const t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{const r=l.isBuffer(e)?e:l.from(e,s),a=r.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<n-t;++i)this[i+t]=r[i%a]}return this};const Y={};function Q(e,t,n){Y[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function j(e){let t="",n=e.length;const s="-"===e[0]?1:0;for(;n>=s+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function H(e,t,n,s,i,r){if(e>n||e<t){const s="bigint"==typeof t?"n":"";let i;throw i=r>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${8*(r+1)}${s}`:`>= -(2${s} ** ${8*(r+1)-1}${s}) and < 2 ** ${8*(r+1)-1}${s}`:`>= ${t}${s} and <= ${n}${s}`,new Y.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,n){U(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||R(t,e.length-(n+1))}(s,i,r)}function U(e,t){if("number"!=typeof e)throw new Y.ERR_INVALID_ARG_TYPE(t,"number",e)}function R(e,t,n){if(Math.floor(e)!==e)throw U(e,n),new Y.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new Y.ERR_BUFFER_OUT_OF_BOUNDS;throw new Y.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}Q("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Q("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Q("ERR_OUT_OF_RANGE",(function(e,t,n){let s=`The value of "${e}" is out of range.`,i=n;return Number.isInteger(n)&&Math.abs(n)>2**32?i=j(String(n)):"bigint"==typeof n&&(i=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(i=j(i)),i+="n"),s+=` It must be ${t}. Received ${i}`,s}),RangeError);const G=/[^+/0-9A-Za-z-_]/g;function Z(e,t){let n;t=t||1/0;const s=e.length;let i=null;const r=[];for(let a=0;a<s;++a){if(n=e.charCodeAt(a),n>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&r.push(239,191,189);continue}if(a+1===s){(t-=3)>-1&&r.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&r.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&r.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;r.push(n)}else if(n<2048){if((t-=2)<0)break;r.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;r.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;r.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return r}function J(e){return s.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(G,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function X(e,t,n,s){let i;for(i=0;i<s&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}function W(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function V(e){return e!=e}const q=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const s=16*n;for(let i=0;i<16;++i)t[s+i]=e[n]+e[i]}return t}();function K(e){return"undefined"==typeof BigInt?$:e}function $(){throw new Error("BigInt not supported")}},227:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let s=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(s++,"%c"===e&&(i=s))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={NODE_ENV:"production"}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(447)(t);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},447:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,r,a=null;function o(...e){if(!o.enabled)return;const s=o,i=Number(new Date),r=i-(n||i);s.diff=r,s.prev=n,s.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";a++;const r=t.formatters[i];if("function"==typeof r){const t=e[a];n=r.call(s,t),e.splice(a,1),a--}return n})),t.formatArgs.call(s,e),(s.log||t.log).apply(s,e)}return o.namespace=e,o.useColors=t.useColors(),o.color=t.selectColor(e),o.extend=s,o.destroy=t.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(i!==t.namespaces&&(i=t.namespaces,r=t.enabled(e)),r),set:e=>{a=e}}),"function"==typeof t.init&&t.init(o),o}function s(e,n){const s=t(this.namespace+(void 0===n?":":n)+e);return s.log=this.log,s}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const s=("string"==typeof e?e:"").split(/[\s,]+/),i=s.length;for(n=0;n<i;n++)s[n]&&("-"===(e=s[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,s;for(n=0,s=t.skips.length;n<s;n++)if(t.skips[n].test(e))return!1;for(n=0,s=t.names.length;n<s;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},645:(e,t)=>{t.read=function(e,t,n,s,i){var r,a,o=8*i-s-1,l=(1<<o)-1,c=l>>1,d=-7,u=n?i-1:0,f=n?-1:1,h=e[t+u];for(u+=f,r=h&(1<<-d)-1,h>>=-d,d+=o;d>0;r=256*r+e[t+u],u+=f,d-=8);for(a=r&(1<<-d)-1,r>>=-d,d+=s;d>0;a=256*a+e[t+u],u+=f,d-=8);if(0===r)r=1-c;else{if(r===l)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,s),r-=c}return(h?-1:1)*a*Math.pow(2,r-s)},t.write=function(e,t,n,s,i,r){var a,o,l,c=8*r-i-1,d=(1<<c)-1,u=d>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=s?0:r-1,p=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=d):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+u>=1?f/l:f*Math.pow(2,1-u))*l>=2&&(a++,l/=2),a+u>=d?(o=0,a=d):a+u>=1?(o=(t*l-1)*Math.pow(2,i),a+=u):(o=t*Math.pow(2,u-1)*Math.pow(2,i),a=0));i>=8;e[n+h]=255&o,h+=p,o/=256,i-=8);for(a=a<<i|o,c+=i;c>0;e[n+h]=255&a,h+=p,a/=256,c-=8);e[n+h-p]|=128*m}},824:e=>{var t=1e3,n=60*t,s=60*n,i=24*s,r=7*i;function a(e,t,n,s){var i=t>=1.5*n;return Math.round(e/n)+" "+s+(i?"s":"")}e.exports=function(e,o){o=o||{};var l,c,d=typeof e;if("string"===d&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(a){var o=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return o*r;case"days":case"day":case"d":return o*i;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===d&&isFinite(e))return o.long?(l=e,(c=Math.abs(l))>=i?a(l,c,i,"day"):c>=s?a(l,c,s,"hour"):c>=n?a(l,c,n,"minute"):c>=t?a(l,c,t,"second"):l+" ms"):function(e){var r=Math.abs(e);return r>=i?Math.round(e/i)+"d":r>=s?Math.round(e/s)+"h":r>=n?Math.round(e/n)+"m":r>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},477:e=>{e.exports=function(e,t,n,s){var i=self||window;try{try{var r;try{r=new i.Blob([e])}catch(t){(r=new(i.BlobBuilder||i.WebKitBlobBuilder||i.MozBlobBuilder||i.MSBlobBuilder)).append(e),r=r.getBlob()}var a=i.URL||i.webkitURL,o=a.createObjectURL(r),l=new i[t](o,n);return a.revokeObjectURL(o),l}catch(s){return new i[t]("data:application/javascript,".concat(encodeURIComponent(e)),n)}}catch(e){if(!s)throw Error("Inline worker is not supported");return new i[t](s,n)}}}},a={};function o(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return s[e](n,n.exports,o),n.exports}o.m=s,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},(()=>{var e,t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__;o.t=function(n,s){if(1&s&&(n=this(n)),8&s)return n;if("object"==typeof n&&n){if(4&s&&n.__esModule)return n;if(16&s&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var r={};e=e||[null,t({}),t([]),t(t)];for(var a=2&s&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>r[e]=()=>n[e]));return r.default=()=>n,o.d(i,r),i}})(),o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,n)=>(o.f[n](e,t),t)),[])),o.u=e=>e+".index.js",o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),t={},n="@aztec/bb.js:",o.l=(e,s,i,r)=>{if(t[e])t[e].push(s);else{var a,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+i){a=u;break}}a||(l=!0,(a=document.createElement("script")).type="module",a.charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",n+i),a.src=e),t[e]=[s];var f=(n,s)=>{a.onerror=a.onload=null,clearTimeout(h);var i=t[e];if(delete t[e],a.parentNode&&a.parentNode.removeChild(a),i&&i.forEach((e=>e(s))),n)return n(s)},h=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),l&&document.head.appendChild(a)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;if(!(e="file:///build-volume/barretenberg/ts/dest/browser/index.js"))throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,n)=>{var s=o.o(e,t)?e[t]:void 0;if(0!==s)if(s)n.push(s[2]);else{var i=new Promise(((n,i)=>s=e[t]=[n,i]));n.push(s[2]=i);var r=o.p+o.u(t),a=new Error;o.l(r,(n=>{if(o.o(e,t)&&(0!==(s=e[t])&&(e[t]=void 0),s)){var i=n&&("load"===n.type?"missing":n.type),r=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+r+")",a.name="ChunkLoadError",a.type=i,a.request=r,s[1](a)}}),"chunk-"+t,t)}};var t=(t,n)=>{var s,i,[r,a,l]=n,c=0;if(r.some((t=>0!==e[t]))){for(s in a)o.o(a,s)&&(o.m[s]=a[s]);l&&l(o)}for(t&&t(n);c<r.length;c++)i=r[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=globalThis.webpackChunk_aztec_bb_js=globalThis.webpackChunk_aztec_bb_js||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var l={};(()=>{o.d(l,{Dv:()=>vi,Zh:()=>zi,AL:()=>ki,tD:()=>js,i2:()=>c,Fr:()=>q,pS:()=>d,ld:()=>D,yh:()=>xi,_7:()=>wi,H2:()=>Ss,ly:()=>Ts});class e{constructor(e){this.numPoints=e}async init(){await this.downloadG1Data(),await this.downloadG2Data()}async downloadG1Data(){if(0===this.numPoints)return this.data=new Uint8Array([]);const e=64*this.numPoints-1,t=await fetch("https://aztec-ignition.s3.amazonaws.com/MAIN%20IGNITION/flat/g1.dat",{headers:{Range:`bytes=0-${e}`},cache:"force-cache"});return this.data=new Uint8Array(await t.arrayBuffer())}async downloadG2Data(){const e=await fetch("https://aztec-ignition.s3.amazonaws.com/MAIN%20IGNITION/flat/g2.dat",{cache:"force-cache"});return this.g2Data=new Uint8Array(await e.arrayBuffer())}getG1Data(){return this.data}getG2Data(){return this.g2Data}}class t{constructor(e){this.numPoints=e}async init(){await this.downloadG1Data()}async downloadG1Data(){if(0===this.numPoints)return this.data=new Uint8Array([]);const e=64*this.numPoints-1,t=await fetch("https://aztec-ignition.s3.amazonaws.com/TEST%20GRUMPKIN/monomial/transcript00.dat",{headers:{Range:`bytes=28-${e}`},cache:"force-cache"});return this.data=new Uint8Array(await t.arrayBuffer())}getG1Data(){return this.data}}function n(e){return new Promise(((t,n)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>n(e.error)}))}let s;function i(){return s||(s=function(e,t){const s=indexedDB.open("keyval-store");s.onupgradeneeded=()=>s.result.createObjectStore(t);const i=n(s);return(e,n)=>i.then((s=>n(s.transaction(t,e).objectStore(t))))}(0,"keyval")),s}function r(e,t=i()){return t("readonly",(t=>n(t.get(e))))}function a(e,t,s=i()){return s("readwrite",(s=>(s.put(t,e),n(s.transaction))))}class c{constructor(e){this.numPoints=e}static async new(e){const t=new c(e);return await t.init(),t}async init(){const t=await r("g1Data"),n=await r("g2Data"),s=new e(this.numPoints),i=64*this.numPoints;!t||t.length<i?(this.g1Data=await s.downloadG1Data(),await a("g1Data",this.g1Data)):this.g1Data=t,n?this.g2Data=n:(this.g2Data=await s.downloadG2Data(),await a("g2Data",this.g2Data))}getG1Data(){return this.g1Data}getG2Data(){return this.g2Data}}class d{constructor(e){this.numPoints=e}static async new(e){const t=new d(e);return await t.init(),t}async init(){const e=await r("grumpkinG1Data"),n=new t(this.numPoints),s=64*this.numPoints;!e||e.length<s?(this.g1Data=await n.downloadG1Data(),await a("grumpkinG1Data",this.g1Data)):this.g1Data=e}getG1Data(){return this.g1Data}}const u=Symbol("Comlink.proxy"),f=Symbol("Comlink.endpoint"),h=Symbol("Comlink.releaseProxy"),p=Symbol("Comlink.finalizer"),m=Symbol("Comlink.thrown"),g=e=>"object"==typeof e&&null!==e||"function"==typeof e,_=new Map([["proxy",{canHandle:e=>g(e)&&e[u],serialize(e){const{port1:t,port2:n}=new MessageChannel;return b(e,t),[n,[n]]},deserialize:e=>(e.start(),A(e))}],["throw",{canHandle:e=>g(e)&&m in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function b(e,t=globalThis,n=["*"]){t.addEventListener("message",(function s(i){if(!i||!i.data)return;if(!function(e,t){for(const n of e){if(t===n||"*"===n)return!0;if(n instanceof RegExp&&n.test(t))return!0}return!1}(n,i.origin))return void console.warn(`Invalid origin '${i.origin}' for comlink proxy`);const{id:r,type:a,path:o}=Object.assign({path:[]},i.data),l=(i.data.argumentList||[]).map(C);let c;try{const t=o.slice(0,-1).reduce(((e,t)=>e[t]),e),n=o.reduce(((e,t)=>e[t]),e);switch(a){case"GET":c=n;break;case"SET":t[o.slice(-1)[0]]=C(i.data.value),c=!0;break;case"APPLY":c=n.apply(t,l);break;case"CONSTRUCT":c=F(new n(...l));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;b(e,n),c=function(e,t){return B.set(e,t),e}(t,[t])}break;case"RELEASE":c=void 0;break;default:return}}catch(e){c={value:e,[m]:0}}Promise.resolve(c).catch((e=>({value:e,[m]:0}))).then((n=>{const[i,o]=k(n);t.postMessage(Object.assign(Object.assign({},i),{id:r}),o),"RELEASE"===a&&(t.removeEventListener("message",s),y(t),p in e&&"function"==typeof e[p]&&e[p]())})).catch((e=>{const[n,s]=k({value:new TypeError("Unserializable return value"),[m]:0});t.postMessage(Object.assign(Object.assign({},n),{id:r}),s)}))})),t.start&&t.start()}function y(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function A(e,t){return M(e,[],t)}function w(e){if(e)throw new Error("Proxy has been released and is not useable")}function x(e){return O(e,{type:"RELEASE"}).then((()=>{y(e)}))}const v=new WeakMap,E="FinalizationRegistry"in globalThis&&new FinalizationRegistry((e=>{const t=(v.get(e)||0)-1;v.set(e,t),0===t&&x(e)}));function M(e,t=[],n=function(){}){let s=!1;const i=new Proxy(n,{get(n,r){if(w(s),r===h)return()=>{!function(e){E&&E.unregister(e)}(i),x(e),s=!0};if("then"===r){if(0===t.length)return{then:()=>i};const n=O(e,{type:"GET",path:t.map((e=>e.toString()))}).then(C);return n.then.bind(n)}return M(e,[...t,r])},set(n,i,r){w(s);const[a,o]=k(r);return O(e,{type:"SET",path:[...t,i].map((e=>e.toString())),value:a},o).then(C)},apply(n,i,r){w(s);const a=t[t.length-1];if(a===f)return O(e,{type:"ENDPOINT"}).then(C);if("bind"===a)return M(e,t.slice(0,-1));const[o,l]=z(r);return O(e,{type:"APPLY",path:t.map((e=>e.toString())),argumentList:o},l).then(C)},construct(n,i){w(s);const[r,a]=z(i);return O(e,{type:"CONSTRUCT",path:t.map((e=>e.toString())),argumentList:r},a).then(C)}});return function(e,t){const n=(v.get(t)||0)+1;v.set(t,n),E&&E.register(e,t,e)}(i,e),i}function z(e){const t=e.map(k);return[t.map((e=>e[0])),(n=t.map((e=>e[1])),Array.prototype.concat.apply([],n))];var n}const B=new WeakMap;function F(e){return Object.assign(e,{[u]:!0})}function k(e){for(const[t,n]of _)if(n.canHandle(e)){const[s,i]=n.serialize(e);return[{type:"HANDLER",name:t,value:s},i]}return[{type:"RAW",value:e},B.get(e)||[]]}function C(e){switch(e.type){case"HANDLER":return _.get(e.name).deserialize(e.value);case"RAW":return e.value}}function O(e,t,n){return new Promise((s=>{const i=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");e.addEventListener("message",(function t(n){n.data&&n.data.id&&n.data.id===i&&(e.removeEventListener("message",t),s(n.data))})),e.start&&e.start(),e.postMessage(Object.assign({id:i},t),n)}))}class D extends Uint8Array{}function L(e,t=4){const n=new Uint8Array(t);return new DataView(n.buffer).setUint32(n.byteLength-4,e,!1),n}function T(e,t=4){const n=new Uint8Array(t);return new DataView(n.buffer).setInt32(n.byteLength-4,e,!1),n}function S(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);let s=0;for(const t of e)n.set(t,s),s+=t.length;return n}function N(e){return S([T(e.length),e])}function P(e){return Array.isArray(e)?S([L((t=e.map(P)).length),...t.flat()]):e instanceof D?e:e instanceof Uint8Array?N(e):"boolean"==typeof e?function(e){const t=new Uint8Array(1);return t[0]=e?1:0,t}(e):"number"==typeof e?L(e):"bigint"==typeof e?function(e,t=32){const n=new Uint8Array(t);for(let s=0;s<t;s++)n[t-s-1]=Number(e>>BigInt(8*s)&0xffn);return n}(e):"string"==typeof e?N((new TextEncoder).encode(e)):e.toBuffer();var t}class I{constructor(e,t=0){this.buffer=e,this.index=t}static asReader(e){return e instanceof I?e:new I(e)}readNumber(){const e=new DataView(this.buffer.buffer,this.buffer.byteOffset+this.index,4);return this.index+=4,e.getUint32(0,!1)}readBoolean(){return this.index+=1,Boolean(this.buffer.at(this.index-1))}readBytes(e){return this.index+=e,this.buffer.slice(this.index-e,this.index)}readNumberVector(){return this.readVector({fromBuffer:e=>e.readNumber()})}readVector(e){const t=this.readNumber(),n=new Array(t);for(let s=0;s<t;s++)n[s]=e.fromBuffer(this);return n}readArray(e,t){const n=new Array(e);for(let s=0;s<e;s++)n[s]=t.fromBuffer(this);return n}readObject(e){return e.fromBuffer(this)}peekBytes(e){return this.buffer.subarray(this.index,e?this.index+e:void 0)}readString(){return(new TextDecoder).decode(this.readBuffer())}readBuffer(){const e=this.readNumber();return this.readBytes(e)}readMap(e){const t=this.readNumber(),n={};for(let s=0;s<t;s++){const t=this.readString(),s=this.readObject(e);n[t]=s}return n}}function Y(){return{SIZE_IN_BYTES:1,fromBuffer:e=>I.asReader(e).readBoolean()}}function Q(){return{SIZE_IN_BYTES:4,fromBuffer:e=>I.asReader(e).readNumber()}}function j(e){return{fromBuffer:t=>I.asReader(t).readVector(e)}}function H(){return{fromBuffer:e=>I.asReader(e).readBuffer()}}function U(){return{fromBuffer:e=>I.asReader(e).readString()}}class R{constructor(e){this.value=e}static fromBuffer(e){return new this(I.asReader(e).readBytes(this.SIZE_IN_BYTES))}toBuffer(){return this.value}}R.SIZE_IN_BYTES=4;const G=e=>{const t="undefined"!=typeof window&&window.crypto?window.crypto:"undefined"!=typeof globalThis&&globalThis.crypto?globalThis.crypto:void 0;if(!t)throw new Error("randomBytes UnsupportedEnvironment");const n=new Uint8Array(e),s=65536;if(e>s)for(let i=0;i<e;i+=s)t.getRandomValues(n.subarray(i,i+s));else t.getRandomValues(n);return n};function Z(e){e=new Uint8Array(e);let t=BigInt(0);const n=new DataView(e.buffer);for(let s=0;s<e.byteLength;s++)t=(t<<BigInt(8))+BigInt(n.getUint8(s));return t}function J(e,t=32){const n=new Uint8Array(t),s=new DataView(n.buffer);for(let n=0;n<t;n++)s.setUint8(t-n-1,Number(e&BigInt(255))),e>>=BigInt(8);return n}var X,W,V=o(764).lW;class q{constructor(e){const t="bigint"==typeof e?e:Z(e);if(t>X.MAX_VALUE)throw new Error(`Value 0x${t.toString(16)} is greater or equal to field modulus.`);this.value="bigint"==typeof e?J(e):e}static random(){return new this(Z(G(64))%X.MODULUS)}static fromBuffer(e){return new this(I.asReader(e).readBytes(this.SIZE_IN_BYTES))}static fromBufferReduce(e){return new this(Z(I.asReader(e).readBytes(this.SIZE_IN_BYTES))%X.MODULUS)}static fromString(e){return this.fromBuffer(V.from(e.replace(/^0x/i,""),"hex"))}toBuffer(){return this.value}toString(){return"0x"+this.toBuffer().reduce(((e,t)=>e+t.toString(16).padStart(2,"0")),"")}equals(e){return this.value.every(((t,n)=>t===e.value[n]))}isZero(){return this.value.every((e=>0===e))}}X=q,q.ZERO=new X(0n),q.MODULUS=0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001n,q.MAX_VALUE=X.MODULUS-1n,q.SIZE_IN_BYTES=32;class K{constructor(e){if(this.value=e,e>W.MAX_VALUE)throw new Error(`Fq out of range ${e}.`)}static random(){return new this(Z(G(64))%W.MODULUS)}static fromBuffer(e){return new this(Z(I.asReader(e).readBytes(this.SIZE_IN_BYTES)))}static fromBufferReduce(e){return new this(Z(I.asReader(e).readBytes(this.SIZE_IN_BYTES))%q.MODULUS)}static fromString(e){return this.fromBuffer(V.from(e.replace(/^0x/i,""),"hex"))}toBuffer(){return J(this.value,W.SIZE_IN_BYTES)}toString(){return"0x"+this.value.toString(16)}equals(e){return this.value===e.value}isZero(){return 0n===this.value}}W=K,K.MODULUS=0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47n,K.MAX_VALUE=W.MODULUS-1n,K.SIZE_IN_BYTES=32;var $=o(764).lW;class ee{constructor(e,t){this.x=e,this.y=t}static random(){return new ee(q.random(),q.random())}static fromBuffer(e){const t=I.asReader(e);return new this(q.fromBuffer(t),q.fromBuffer(t))}static fromString(e){return ee.fromBuffer($.from(e.replace(/^0x/i,""),"hex"))}toBuffer(){return $.concat([this.x.toBuffer(),this.y.toBuffer()])}toString(){return"0x"+this.toBuffer().toString("hex")}equals(e){return this.x.equals(e.x)&&this.y.equals(e.y)}}ee.SIZE_IN_BYTES=64,ee.EMPTY=new ee(q.ZERO,q.ZERO);class te{constructor(e){this.buffer=e}static fromBuffer(e){const t=I.asReader(e);return new te(t.readBytes(this.SIZE_IN_BYTES))}static random(){return new te(G(this.SIZE_IN_BYTES))}toBuffer(){return this.buffer}}te.SIZE_IN_BYTES=32;class ne{constructor(e){this.buffer=e}static fromBuffer(e){const t=I.asReader(e);return new ne(t.readBytes(this.SIZE_IN_BYTES))}static random(){return new ne(G(this.SIZE_IN_BYTES))}toBuffer(){return this.buffer}}ne.SIZE_IN_BYTES=64;class se{constructor(e){this.buffer=e}static fromBuffer(e){const t=I.asReader(e);return new se(t.readBytes(this.SIZE_IN_BYTES))}static random(){return new se(G(this.SIZE_IN_BYTES))}toBuffer(){return this.buffer}}se.SIZE_IN_BYTES=128;class ie{constructor(e){this.wasm=e}async pedersenCommit(e,t){const n=[e,t].map(P),s=[ee],i=(await this.wasm.callWasmExport("pedersen_commit",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async pedersenHash(e,t){const n=[e,t].map(P),s=[q],i=(await this.wasm.callWasmExport("pedersen_hash",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async pedersenHashes(e,t){const n=[e,t].map(P),s=[q],i=(await this.wasm.callWasmExport("pedersen_hashes",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async pedersenHashBuffer(e,t){const n=[e,t].map(P),s=[q],i=(await this.wasm.callWasmExport("pedersen_hash_buffer",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async poseidon2Hash(e){const t=[e].map(P),n=[q],s=(await this.wasm.callWasmExport("poseidon2_hash",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async poseidon2HashAccumulate(e){const t=[e].map(P),n=[q],s=(await this.wasm.callWasmExport("poseidon2_hash_accumulate",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async poseidon2Hashes(e){const t=[e].map(P),n=[q],s=(await this.wasm.callWasmExport("poseidon2_hashes",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async poseidon2Permutation(e){const t=[e].map(P),n=[j(q)],s=(await this.wasm.callWasmExport("poseidon2_permutation",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async blake2s(e){const t=[e].map(P),n=[te],s=(await this.wasm.callWasmExport("blake2s",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async blake2sToField(e){const t=[e].map(P),n=[q],s=(await this.wasm.callWasmExport("blake2s_to_field_",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async schnorrComputePublicKey(e){const t=[e].map(P),n=[ee],s=(await this.wasm.callWasmExport("schnorr_compute_public_key",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async schnorrNegatePublicKey(e){const t=[e].map(P),n=[ee],s=(await this.wasm.callWasmExport("schnorr_negate_public_key",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async schnorrConstructSignature(e,t){const n=[e,t].map(P),s=[te,te],i=(await this.wasm.callWasmExport("schnorr_construct_signature",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i}async schnorrVerifySignature(e,t,n,s){const i=[e,t,n,s].map(P),r=[Y()],a=(await this.wasm.callWasmExport("schnorr_verify_signature",i,r.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}async schnorrMultisigCreateMultisigPublicKey(e){const t=[e].map(P),n=[se],s=(await this.wasm.callWasmExport("schnorr_multisig_create_multisig_public_key",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async schnorrMultisigValidateAndCombineSignerPubkeys(e){const t=[e].map(P),n=[ee,Y()],s=(await this.wasm.callWasmExport("schnorr_multisig_validate_and_combine_signer_pubkeys",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s}async schnorrMultisigConstructSignatureRound1(){const e=[].map(P),t=[se,se],n=(await this.wasm.callWasmExport("schnorr_multisig_construct_signature_round_1",e,t.map((e=>e.SIZE_IN_BYTES)))).map(((e,n)=>t[n].fromBuffer(e)));return n}async schnorrMultisigConstructSignatureRound2(e,t,n,s,i){const r=[e,t,n,s,i].map(P),a=[K,Y()],o=(await this.wasm.callWasmExport("schnorr_multisig_construct_signature_round_2",r,a.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>a[t].fromBuffer(e)));return o}async schnorrMultisigCombineSignatures(e,t,n,s){const i=[e,t,n,s].map(P),r=[te,te,Y()],a=(await this.wasm.callWasmExport("schnorr_multisig_combine_signatures",i,r.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>r[t].fromBuffer(e)));return a}async aesEncryptBufferCbc(e,t,n,s){const i=[e,t,n,s].map(P),r=[H()],a=(await this.wasm.callWasmExport("aes_encrypt_buffer_cbc",i,r.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}async aesDecryptBufferCbc(e,t,n,s){const i=[e,t,n,s].map(P),r=[H()],a=(await this.wasm.callWasmExport("aes_decrypt_buffer_cbc",i,r.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}async srsInitSrs(e,t,n){const s=[e,t,n].map(P),i=[];(await this.wasm.callWasmExport("srs_init_srs",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)))}async srsInitGrumpkinSrs(e,t){const n=[e,t].map(P),s=[];(await this.wasm.callWasmExport("srs_init_grumpkin_srs",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)))}async examplesSimpleCreateAndVerifyProof(){const e=[].map(P),t=[Y()],n=(await this.wasm.callWasmExport("examples_simple_create_and_verify_proof",e,t.map((e=>e.SIZE_IN_BYTES)))).map(((e,n)=>t[n].fromBuffer(e)));return n[0]}async testThreads(e,t){const n=[e,t].map(P),s=[Q()],i=(await this.wasm.callWasmExport("test_threads",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async commonInitSlabAllocator(e){const t=[e].map(P),n=[];(await this.wasm.callWasmExport("common_init_slab_allocator",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)))}async acirGetCircuitSizes(e,t,n){const s=[e,t,n].map(P),i=[Q(),Q()],r=(await this.wasm.callWasmExport("acir_get_circuit_sizes",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r}async acirNewAcirComposer(e){const t=[e].map(P),n=[R],s=(await this.wasm.callWasmExport("acir_new_acir_composer",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async acirDeleteAcirComposer(e){const t=[e].map(P),n=[];(await this.wasm.callWasmExport("acir_delete_acir_composer",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)))}async acirInitProvingKey(e,t,n){const s=[e,t,n].map(P),i=[];(await this.wasm.callWasmExport("acir_init_proving_key",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)))}async acirCreateProof(e,t,n,s){const i=[e,t,n,s].map(P),r=[H()],a=(await this.wasm.callWasmExport("acir_create_proof",i,r.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}async acirProveAndVerifyUltraHonk(e,t,n){const s=[e,t,n].map(P),i=[Y()],r=(await this.wasm.callWasmExport("acir_prove_and_verify_ultra_honk",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}async acirProveAndVerifyMegaHonk(e,t,n){const s=[e,t,n].map(P),i=[Y()],r=(await this.wasm.callWasmExport("acir_prove_and_verify_mega_honk",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}async acirFoldAndVerifyProgramStack(e,t,n){const s=[e,t,n].map(P),i=[Y()],r=(await this.wasm.callWasmExport("acir_fold_and_verify_program_stack",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}async acirLoadVerificationKey(e,t){const n=[e,t].map(P),s=[];(await this.wasm.callWasmExport("acir_load_verification_key",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)))}async acirInitVerificationKey(e){const t=[e].map(P),n=[];(await this.wasm.callWasmExport("acir_init_verification_key",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)))}async acirGetVerificationKey(e){const t=[e].map(P),n=[H()],s=(await this.wasm.callWasmExport("acir_get_verification_key",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async acirGetProvingKey(e,t,n){const s=[e,t,n].map(P),i=[H()],r=(await this.wasm.callWasmExport("acir_get_proving_key",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}async acirVerifyProof(e,t){const n=[e,t].map(P),s=[Y()],i=(await this.wasm.callWasmExport("acir_verify_proof",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirGetSolidityVerifier(e){const t=[e].map(P),n=[U()],s=(await this.wasm.callWasmExport("acir_get_solidity_verifier",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async acirSerializeProofIntoFields(e,t,n){const s=[e,t,n].map(P),i=[j(q)],r=(await this.wasm.callWasmExport("acir_serialize_proof_into_fields",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}async acirSerializeVerificationKeyIntoFields(e){const t=[e].map(P),n=[j(q),q],s=(await this.wasm.callWasmExport("acir_serialize_verification_key_into_fields",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s}async acirProveAndVerifyAztecClient(e,t){const n=[e,t].map(P),s=[Y()],i=(await this.wasm.callWasmExport("acir_prove_and_verify_aztec_client",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirProveAztecClient(e,t){const n=[e,t].map(P),s=[H(),H()],i=(await this.wasm.callWasmExport("acir_prove_aztec_client",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return[i[0],i[1]]}async acirVerifyAztecClient(e,t){const n=[e,t].map(P),s=[Y()],i=(await this.wasm.callWasmExport("acir_verify_aztec_client",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirProveUltraHonk(e,t,n){const s=[e,t,n].map(P),i=[H()],r=(await this.wasm.callWasmExport("acir_prove_ultra_honk",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}async acirProveUltraKeccakHonk(e,t,n){console.log("acirProveUltraKeccakHonk in");const s=[e,t,n].map(P),i=[H()],r=(await this.wasm.callWasmExport("acir_prove_ultra_keccak_honk",s,i.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}async acirVerifyUltraHonk(e,t){const n=[e,t].map(P),s=[Y()],i=(await this.wasm.callWasmExport("acir_verify_ultra_honk",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirVerifyUltraKeccakHonk(e,t){const n=[e,t].map(P),s=[Y()],i=(await this.wasm.callWasmExport("acir_verify_ultra_keccak_honk",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirWriteVkUltraHonk(e,t){const n=[e,t].map(P),s=[H()],i=(await this.wasm.callWasmExport("acir_write_vk_ultra_honk",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirWriteVkUltraKeccakHonk(e,t){const n=[e,t].map(P),s=[H()],i=(await this.wasm.callWasmExport("acir_write_vk_ultra_keccak_honk",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirHonkSolidityVerifier(e,t){const n=[e,t].map(P),s=[H()],i=(await this.wasm.callWasmExport("acir_honk_solidity_verifier",n,s.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}async acirProofAsFieldsUltraHonk(e){const t=[e].map(P),n=[j(q)],s=(await this.wasm.callWasmExport("acir_proof_as_fields_ultra_honk",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async acirVkAsFieldsUltraHonk(e){const t=[e].map(P),n=[j(q)],s=(await this.wasm.callWasmExport("acir_vk_as_fields_ultra_honk",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}async acirVkAsFieldsMegaHonk(e){const t=[e].map(P),n=[j(q)],s=(await this.wasm.callWasmExport("acir_vk_as_fields_mega_honk",t,n.map((e=>e.SIZE_IN_BYTES)))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}}class re{constructor(e){this.wasm=e}pedersenCommit(e,t){const n=[e,t].map(P),s=[ee],i=this.wasm.callWasmExport("pedersen_commit",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}pedersenHash(e,t){const n=[e,t].map(P),s=[q],i=this.wasm.callWasmExport("pedersen_hash",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}pedersenHashes(e,t){const n=[e,t].map(P),s=[q],i=this.wasm.callWasmExport("pedersen_hashes",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}pedersenHashBuffer(e,t){const n=[e,t].map(P),s=[q],i=this.wasm.callWasmExport("pedersen_hash_buffer",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}poseidon2Hash(e){const t=[e].map(P),n=[q],s=this.wasm.callWasmExport("poseidon2_hash",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}poseidon2HashAccumulate(e){const t=[e].map(P),n=[q],s=this.wasm.callWasmExport("poseidon2_hash_accumulate",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}poseidon2Hashes(e){const t=[e].map(P),n=[q],s=this.wasm.callWasmExport("poseidon2_hashes",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}poseidon2Permutation(e){const t=[e].map(P),n=[j(q)],s=this.wasm.callWasmExport("poseidon2_permutation",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}blake2s(e){const t=[e].map(P),n=[te],s=this.wasm.callWasmExport("blake2s",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}blake2sToField(e){const t=[e].map(P),n=[q],s=this.wasm.callWasmExport("blake2s_to_field_",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}schnorrComputePublicKey(e){const t=[e].map(P),n=[ee],s=this.wasm.callWasmExport("schnorr_compute_public_key",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}schnorrNegatePublicKey(e){const t=[e].map(P),n=[ee],s=this.wasm.callWasmExport("schnorr_negate_public_key",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}schnorrConstructSignature(e,t){const n=[e,t].map(P),s=[te,te],i=this.wasm.callWasmExport("schnorr_construct_signature",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i}schnorrVerifySignature(e,t,n,s){const i=[e,t,n,s].map(P),r=[Y()],a=this.wasm.callWasmExport("schnorr_verify_signature",i,r.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}schnorrMultisigCreateMultisigPublicKey(e){const t=[e].map(P),n=[se],s=this.wasm.callWasmExport("schnorr_multisig_create_multisig_public_key",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}schnorrMultisigValidateAndCombineSignerPubkeys(e){const t=[e].map(P),n=[ee,Y()],s=this.wasm.callWasmExport("schnorr_multisig_validate_and_combine_signer_pubkeys",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s}schnorrMultisigConstructSignatureRound1(){const e=[].map(P),t=[se,se],n=this.wasm.callWasmExport("schnorr_multisig_construct_signature_round_1",e,t.map((e=>e.SIZE_IN_BYTES))).map(((e,n)=>t[n].fromBuffer(e)));return n}schnorrMultisigConstructSignatureRound2(e,t,n,s,i){const r=[e,t,n,s,i].map(P),a=[K,Y()],o=this.wasm.callWasmExport("schnorr_multisig_construct_signature_round_2",r,a.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>a[t].fromBuffer(e)));return o}schnorrMultisigCombineSignatures(e,t,n,s){const i=[e,t,n,s].map(P),r=[te,te,Y()],a=this.wasm.callWasmExport("schnorr_multisig_combine_signatures",i,r.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>r[t].fromBuffer(e)));return a}aesEncryptBufferCbc(e,t,n,s){const i=[e,t,n,s].map(P),r=[H()],a=this.wasm.callWasmExport("aes_encrypt_buffer_cbc",i,r.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}aesDecryptBufferCbc(e,t,n,s){const i=[e,t,n,s].map(P),r=[H()],a=this.wasm.callWasmExport("aes_decrypt_buffer_cbc",i,r.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}srsInitSrs(e,t,n){const s=[e,t,n].map(P),i=[];this.wasm.callWasmExport("srs_init_srs",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)))}srsInitGrumpkinSrs(e,t){const n=[e,t].map(P),s=[];this.wasm.callWasmExport("srs_init_grumpkin_srs",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)))}examplesSimpleCreateAndVerifyProof(){const e=[].map(P),t=[Y()],n=this.wasm.callWasmExport("examples_simple_create_and_verify_proof",e,t.map((e=>e.SIZE_IN_BYTES))).map(((e,n)=>t[n].fromBuffer(e)));return n[0]}testThreads(e,t){const n=[e,t].map(P),s=[Q()],i=this.wasm.callWasmExport("test_threads",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}commonInitSlabAllocator(e){const t=[e].map(P),n=[];this.wasm.callWasmExport("common_init_slab_allocator",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)))}acirGetCircuitSizes(e,t,n){const s=[e,t,n].map(P),i=[Q(),Q()],r=this.wasm.callWasmExport("acir_get_circuit_sizes",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)));return r}acirNewAcirComposer(e){const t=[e].map(P),n=[R],s=this.wasm.callWasmExport("acir_new_acir_composer",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}acirDeleteAcirComposer(e){const t=[e].map(P),n=[];this.wasm.callWasmExport("acir_delete_acir_composer",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)))}acirInitProvingKey(e,t,n){const s=[e,t,n].map(P),i=[];this.wasm.callWasmExport("acir_init_proving_key",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)))}acirCreateProof(e,t,n,s){const i=[e,t,n,s].map(P),r=[H()],a=this.wasm.callWasmExport("acir_create_proof",i,r.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>r[t].fromBuffer(e)));return a[0]}acirProveAndVerifyUltraHonk(e,t,n){const s=[e,t,n].map(P),i=[Y()],r=this.wasm.callWasmExport("acir_prove_and_verify_ultra_honk",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}acirProveAndVerifyMegaHonk(e,t,n){const s=[e,t,n].map(P),i=[Y()],r=this.wasm.callWasmExport("acir_prove_and_verify_mega_honk",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}acirFoldAndVerifyProgramStack(e,t,n){const s=[e,t,n].map(P),i=[Y()],r=this.wasm.callWasmExport("acir_fold_and_verify_program_stack",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}acirLoadVerificationKey(e,t){const n=[e,t].map(P),s=[];this.wasm.callWasmExport("acir_load_verification_key",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)))}acirInitVerificationKey(e){const t=[e].map(P),n=[];this.wasm.callWasmExport("acir_init_verification_key",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)))}acirGetVerificationKey(e){const t=[e].map(P),n=[H()],s=this.wasm.callWasmExport("acir_get_verification_key",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}acirGetProvingKey(e,t,n){const s=[e,t,n].map(P),i=[H()],r=this.wasm.callWasmExport("acir_get_proving_key",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}acirVerifyProof(e,t){const n=[e,t].map(P),s=[Y()],i=this.wasm.callWasmExport("acir_verify_proof",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}acirGetSolidityVerifier(e){const t=[e].map(P),n=[U()],s=this.wasm.callWasmExport("acir_get_solidity_verifier",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}acirSerializeProofIntoFields(e,t,n){const s=[e,t,n].map(P),i=[j(q)],r=this.wasm.callWasmExport("acir_serialize_proof_into_fields",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}acirSerializeVerificationKeyIntoFields(e){const t=[e].map(P),n=[j(q),q],s=this.wasm.callWasmExport("acir_serialize_verification_key_into_fields",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s}acirProveUltraHonk(e,t,n){const s=[e,t,n].map(P),i=[H()],r=this.wasm.callWasmExport("acir_prove_ultra_honk",s,i.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>i[t].fromBuffer(e)));return r[0]}acirVerifyUltraHonk(e,t){const n=[e,t].map(P),s=[Y()],i=this.wasm.callWasmExport("acir_verify_ultra_honk",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}acirWriteVkUltraHonk(e,t){const n=[e,t].map(P),s=[H()],i=this.wasm.callWasmExport("acir_write_vk_ultra_honk",n,s.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>s[t].fromBuffer(e)));return i[0]}acirProofAsFieldsUltraHonk(e){const t=[e].map(P),n=[j(q)],s=this.wasm.callWasmExport("acir_proof_as_fields_ultra_honk",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}acirVkAsFieldsUltraHonk(e){const t=[e].map(P),n=[j(q)],s=this.wasm.callWasmExport("acir_vk_as_fields_ultra_honk",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}acirVkAsFieldsMegaHonk(e){const t=[e].map(P),n=[j(q)],s=this.wasm.callWasmExport("acir_vk_as_fields_mega_honk",t,n.map((e=>e.SIZE_IN_BYTES))).map(((e,t)=>n[t].fromBuffer(e)));return s[0]}}var ae=o(227),oe=o.n(ae),le=o(477),ce=o.n(le);function de(){return ce()("/******/ var __webpack_modules__ = ({\n\n/***/ 227:\n/***/ ((module, exports, __webpack_require__) => {\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(447)(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n/***/ }),\n\n/***/ 447:\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(824);\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n/***/ }),\n\n/***/ 824:\n/***/ ((module) => {\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n/***/ }),\n\n/***/ 477:\n/***/ ((module) => {\n\n\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};\n\n/***/ })\n\n/******/ });\n/************************************************************************/\n/******/ // The module cache\n/******/ var __webpack_module_cache__ = {};\n/******/ \n/******/ // The require function\n/******/ function __webpack_require__(moduleId) {\n/******/ \t// Check if module is in cache\n/******/ \tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \tif (cachedModule !== undefined) {\n/******/ \t\treturn cachedModule.exports;\n/******/ \t}\n/******/ \t// Create a new module (and put it into the cache)\n/******/ \tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t// no module.id needed\n/******/ \t\t// no module.loaded needed\n/******/ \t\texports: {}\n/******/ \t};\n/******/ \n/******/ \t// Execute the module function\n/******/ \t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \n/******/ \t// Return the exports of the module\n/******/ \treturn module.exports;\n/******/ }\n/******/ \n/************************************************************************/\n/******/ /* webpack/runtime/compat get default export */\n/******/ (() => {\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = (module) => {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t() => (module['default']) :\n/******/ \t\t\t() => (module);\n/******/ \t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\treturn getter;\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/define property getters */\n/******/ (() => {\n/******/ \t// define getter functions for harmony exports\n/******/ \t__webpack_require__.d = (exports, definition) => {\n/******/ \t\tfor(var key in definition) {\n/******/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/hasOwnProperty shorthand */\n/******/ (() => {\n/******/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ })();\n/******/ \n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n\n// UNUSED EXPORTS: default\n\n;// CONCATENATED MODULE: ./node_modules/comlink/dist/esm/comlink.mjs\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\n\n// EXTERNAL MODULE: ./node_modules/debug/src/browser.js\nvar browser = __webpack_require__(227);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/helpers/browser/index.ts\n\nfunction getSharedMemoryAvailable() {\n    const globalScope = typeof window !== 'undefined' ? window : globalThis;\n    return typeof SharedArrayBuffer !== 'undefined' && globalScope.crossOriginIsolated;\n}\nfunction getRemoteBarretenbergWasm(worker) {\n    return wrap(worker);\n}\nfunction getNumCpu() {\n    return navigator.hardwareConcurrency;\n}\nfunction threadLogger() {\n    return undefined;\n}\nfunction killSelf() {\n    self.close();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vaGVscGVycy9icm93c2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFL0IsTUFBTSxVQUFVLHdCQUF3QjtJQUN0QyxNQUFNLFdBQVcsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3hFLE9BQU8sT0FBTyxpQkFBaUIsS0FBSyxXQUFXLElBQUksV0FBVyxDQUFDLG1CQUFtQixDQUFDO0FBQ3JGLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUksTUFBYztJQUN6RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQU0sQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVM7SUFDdkIsT0FBTyxTQUFTLENBQUMsbUJBQW1CLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUTtJQUN0QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZixDQUFDIn0=\n// EXTERNAL MODULE: ./node_modules/worker-loader/dist/runtime/inline.js\nvar inline = __webpack_require__(477);\nvar inline_default = /*#__PURE__*/__webpack_require__.n(inline);\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_thread/factory/browser/thread.worker.ts\n\n\n\nfunction Worker_fn() {\n  return inline_default()(\"/******/ var __webpack_modules__ = ({\\n\\n/***/ 227:\\n/***/ ((module, exports, __webpack_require__) => {\\n\\n/* eslint-env browser */\\n\\n/**\\n * This is the web browser implementation of `debug()`.\\n */\\n\\nexports.formatArgs = formatArgs;\\nexports.save = save;\\nexports.load = load;\\nexports.useColors = useColors;\\nexports.storage = localstorage();\\nexports.destroy = (() => {\\n\\tlet warned = false;\\n\\n\\treturn () => {\\n\\t\\tif (!warned) {\\n\\t\\t\\twarned = true;\\n\\t\\t\\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\\n\\t\\t}\\n\\t};\\n})();\\n\\n/**\\n * Colors.\\n */\\n\\nexports.colors = [\\n\\t'#0000CC',\\n\\t'#0000FF',\\n\\t'#0033CC',\\n\\t'#0033FF',\\n\\t'#0066CC',\\n\\t'#0066FF',\\n\\t'#0099CC',\\n\\t'#0099FF',\\n\\t'#00CC00',\\n\\t'#00CC33',\\n\\t'#00CC66',\\n\\t'#00CC99',\\n\\t'#00CCCC',\\n\\t'#00CCFF',\\n\\t'#3300CC',\\n\\t'#3300FF',\\n\\t'#3333CC',\\n\\t'#3333FF',\\n\\t'#3366CC',\\n\\t'#3366FF',\\n\\t'#3399CC',\\n\\t'#3399FF',\\n\\t'#33CC00',\\n\\t'#33CC33',\\n\\t'#33CC66',\\n\\t'#33CC99',\\n\\t'#33CCCC',\\n\\t'#33CCFF',\\n\\t'#6600CC',\\n\\t'#6600FF',\\n\\t'#6633CC',\\n\\t'#6633FF',\\n\\t'#66CC00',\\n\\t'#66CC33',\\n\\t'#9900CC',\\n\\t'#9900FF',\\n\\t'#9933CC',\\n\\t'#9933FF',\\n\\t'#99CC00',\\n\\t'#99CC33',\\n\\t'#CC0000',\\n\\t'#CC0033',\\n\\t'#CC0066',\\n\\t'#CC0099',\\n\\t'#CC00CC',\\n\\t'#CC00FF',\\n\\t'#CC3300',\\n\\t'#CC3333',\\n\\t'#CC3366',\\n\\t'#CC3399',\\n\\t'#CC33CC',\\n\\t'#CC33FF',\\n\\t'#CC6600',\\n\\t'#CC6633',\\n\\t'#CC9900',\\n\\t'#CC9933',\\n\\t'#CCCC00',\\n\\t'#CCCC33',\\n\\t'#FF0000',\\n\\t'#FF0033',\\n\\t'#FF0066',\\n\\t'#FF0099',\\n\\t'#FF00CC',\\n\\t'#FF00FF',\\n\\t'#FF3300',\\n\\t'#FF3333',\\n\\t'#FF3366',\\n\\t'#FF3399',\\n\\t'#FF33CC',\\n\\t'#FF33FF',\\n\\t'#FF6600',\\n\\t'#FF6633',\\n\\t'#FF9900',\\n\\t'#FF9933',\\n\\t'#FFCC00',\\n\\t'#FFCC33'\\n];\\n\\n/**\\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\n * and the Firebug extension (any Firefox version) are known\\n * to support \\\"%c\\\" CSS customizations.\\n *\\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\\n */\\n\\n// eslint-disable-next-line complexity\\nfunction useColors() {\\n\\t// NB: In an Electron preload script, document will be defined but not fully\\n\\t// initialized. Since we know we're in Chrome, we'll just detect this case\\n\\t// explicitly\\n\\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// Internet Explorer and Edge do not support colors.\\n\\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\\\/(\\\\d+)/)) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// Is webkit? http://stackoverflow.com/a/16459606/376773\\n\\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\\n\\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\\n\\t\\t// Is firebug? http://stackoverflow.com/a/398120/376773\\n\\t\\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\\n\\t\\t// Is firefox >= v31?\\n\\t\\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n\\t\\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\\n\\t\\t// Double check webkit in userAgent just in case we are in a worker\\n\\t\\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\\\/(\\\\d+)/));\\n}\\n\\n/**\\n * Colorize log arguments if enabled.\\n *\\n * @api public\\n */\\n\\nfunction formatArgs(args) {\\n\\targs[0] = (this.useColors ? '%c' : '') +\\n\\t\\tthis.namespace +\\n\\t\\t(this.useColors ? ' %c' : ' ') +\\n\\t\\targs[0] +\\n\\t\\t(this.useColors ? '%c ' : ' ') +\\n\\t\\t'+' + module.exports.humanize(this.diff);\\n\\n\\tif (!this.useColors) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst c = 'color: ' + this.color;\\n\\targs.splice(1, 0, c, 'color: inherit');\\n\\n\\t// The final \\\"%c\\\" is somewhat tricky, because there could be other\\n\\t// arguments passed either before or after the %c, so we need to\\n\\t// figure out the correct index to insert the CSS into\\n\\tlet index = 0;\\n\\tlet lastC = 0;\\n\\targs[0].replace(/%[a-zA-Z%]/g, match => {\\n\\t\\tif (match === '%%') {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tindex++;\\n\\t\\tif (match === '%c') {\\n\\t\\t\\t// We only are interested in the *last* %c\\n\\t\\t\\t// (the user may have provided their own)\\n\\t\\t\\tlastC = index;\\n\\t\\t}\\n\\t});\\n\\n\\targs.splice(lastC, 0, c);\\n}\\n\\n/**\\n * Invokes `console.debug()` when available.\\n * No-op when `console.debug` is not a \\\"function\\\".\\n * If `console.debug` is not available, falls back\\n * to `console.log`.\\n *\\n * @api public\\n */\\nexports.log = console.debug || console.log || (() => {});\\n\\n/**\\n * Save `namespaces`.\\n *\\n * @param {String} namespaces\\n * @api private\\n */\\nfunction save(namespaces) {\\n\\ttry {\\n\\t\\tif (namespaces) {\\n\\t\\t\\texports.storage.setItem('debug', namespaces);\\n\\t\\t} else {\\n\\t\\t\\texports.storage.removeItem('debug');\\n\\t\\t}\\n\\t} catch (error) {\\n\\t\\t// Swallow\\n\\t\\t// XXX (@Qix-) should we be logging these?\\n\\t}\\n}\\n\\n/**\\n * Load `namespaces`.\\n *\\n * @return {String} returns the previously persisted debug modes\\n * @api private\\n */\\nfunction load() {\\n\\tlet r;\\n\\ttry {\\n\\t\\tr = exports.storage.getItem('debug');\\n\\t} catch (error) {\\n\\t\\t// Swallow\\n\\t\\t// XXX (@Qix-) should we be logging these?\\n\\t}\\n\\n\\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\\n\\tif (!r && typeof process !== 'undefined' && 'env' in process) {\\n\\t\\tr = process.env.DEBUG;\\n\\t}\\n\\n\\treturn r;\\n}\\n\\n/**\\n * Localstorage attempts to return the localstorage.\\n *\\n * This is necessary because safari throws\\n * when a user disables cookies/localstorage\\n * and you attempt to access it.\\n *\\n * @return {LocalStorage}\\n * @api private\\n */\\n\\nfunction localstorage() {\\n\\ttry {\\n\\t\\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\\n\\t\\t// The Browser also has localStorage in the global context.\\n\\t\\treturn localStorage;\\n\\t} catch (error) {\\n\\t\\t// Swallow\\n\\t\\t// XXX (@Qix-) should we be logging these?\\n\\t}\\n}\\n\\nmodule.exports = __webpack_require__(447)(exports);\\n\\nconst {formatters} = module.exports;\\n\\n/**\\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\n */\\n\\nformatters.j = function (v) {\\n\\ttry {\\n\\t\\treturn JSON.stringify(v);\\n\\t} catch (error) {\\n\\t\\treturn '[UnexpectedJSONParseError]: ' + error.message;\\n\\t}\\n};\\n\\n\\n/***/ }),\\n\\n/***/ 447:\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\n/**\\n * This is the common logic for both the Node.js and web browser\\n * implementations of `debug()`.\\n */\\n\\nfunction setup(env) {\\n\\tcreateDebug.debug = createDebug;\\n\\tcreateDebug.default = createDebug;\\n\\tcreateDebug.coerce = coerce;\\n\\tcreateDebug.disable = disable;\\n\\tcreateDebug.enable = enable;\\n\\tcreateDebug.enabled = enabled;\\n\\tcreateDebug.humanize = __webpack_require__(824);\\n\\tcreateDebug.destroy = destroy;\\n\\n\\tObject.keys(env).forEach(key => {\\n\\t\\tcreateDebug[key] = env[key];\\n\\t});\\n\\n\\t/**\\n\\t* The currently active debug mode names, and names to skip.\\n\\t*/\\n\\n\\tcreateDebug.names = [];\\n\\tcreateDebug.skips = [];\\n\\n\\t/**\\n\\t* Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n\\t*\\n\\t* Valid key names are a single, lower or upper-case letter, i.e. \\\"n\\\" and \\\"N\\\".\\n\\t*/\\n\\tcreateDebug.formatters = {};\\n\\n\\t/**\\n\\t* Selects a color for a debug namespace\\n\\t* @param {String} namespace The namespace string for the debug instance to be colored\\n\\t* @return {Number|String} An ANSI color code for the given namespace\\n\\t* @api private\\n\\t*/\\n\\tfunction selectColor(namespace) {\\n\\t\\tlet hash = 0;\\n\\n\\t\\tfor (let i = 0; i < namespace.length; i++) {\\n\\t\\t\\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\\n\\t\\t\\thash |= 0; // Convert to 32bit integer\\n\\t\\t}\\n\\n\\t\\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\\n\\t}\\n\\tcreateDebug.selectColor = selectColor;\\n\\n\\t/**\\n\\t* Create a debugger with the given `namespace`.\\n\\t*\\n\\t* @param {String} namespace\\n\\t* @return {Function}\\n\\t* @api public\\n\\t*/\\n\\tfunction createDebug(namespace) {\\n\\t\\tlet prevTime;\\n\\t\\tlet enableOverride = null;\\n\\t\\tlet namespacesCache;\\n\\t\\tlet enabledCache;\\n\\n\\t\\tfunction debug(...args) {\\n\\t\\t\\t// Disabled?\\n\\t\\t\\tif (!debug.enabled) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst self = debug;\\n\\n\\t\\t\\t// Set `diff` timestamp\\n\\t\\t\\tconst curr = Number(new Date());\\n\\t\\t\\tconst ms = curr - (prevTime || curr);\\n\\t\\t\\tself.diff = ms;\\n\\t\\t\\tself.prev = prevTime;\\n\\t\\t\\tself.curr = curr;\\n\\t\\t\\tprevTime = curr;\\n\\n\\t\\t\\targs[0] = createDebug.coerce(args[0]);\\n\\n\\t\\t\\tif (typeof args[0] !== 'string') {\\n\\t\\t\\t\\t// Anything else let's inspect with %O\\n\\t\\t\\t\\targs.unshift('%O');\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Apply any `formatters` transformations\\n\\t\\t\\tlet index = 0;\\n\\t\\t\\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\\n\\t\\t\\t\\t// If we encounter an escaped % then don't increase the array index\\n\\t\\t\\t\\tif (match === '%%') {\\n\\t\\t\\t\\t\\treturn '%';\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t\\tconst formatter = createDebug.formatters[format];\\n\\t\\t\\t\\tif (typeof formatter === 'function') {\\n\\t\\t\\t\\t\\tconst val = args[index];\\n\\t\\t\\t\\t\\tmatch = formatter.call(self, val);\\n\\n\\t\\t\\t\\t\\t// Now we need to remove `args[index]` since it's inlined in the `format`\\n\\t\\t\\t\\t\\targs.splice(index, 1);\\n\\t\\t\\t\\t\\tindex--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn match;\\n\\t\\t\\t});\\n\\n\\t\\t\\t// Apply env-specific formatting (colors, etc.)\\n\\t\\t\\tcreateDebug.formatArgs.call(self, args);\\n\\n\\t\\t\\tconst logFn = self.log || createDebug.log;\\n\\t\\t\\tlogFn.apply(self, args);\\n\\t\\t}\\n\\n\\t\\tdebug.namespace = namespace;\\n\\t\\tdebug.useColors = createDebug.useColors();\\n\\t\\tdebug.color = createDebug.selectColor(namespace);\\n\\t\\tdebug.extend = extend;\\n\\t\\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\\n\\n\\t\\tObject.defineProperty(debug, 'enabled', {\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tconfigurable: false,\\n\\t\\t\\tget: () => {\\n\\t\\t\\t\\tif (enableOverride !== null) {\\n\\t\\t\\t\\t\\treturn enableOverride;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (namespacesCache !== createDebug.namespaces) {\\n\\t\\t\\t\\t\\tnamespacesCache = createDebug.namespaces;\\n\\t\\t\\t\\t\\tenabledCache = createDebug.enabled(namespace);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn enabledCache;\\n\\t\\t\\t},\\n\\t\\t\\tset: v => {\\n\\t\\t\\t\\tenableOverride = v;\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\t// Env-specific initialization logic for debug instances\\n\\t\\tif (typeof createDebug.init === 'function') {\\n\\t\\t\\tcreateDebug.init(debug);\\n\\t\\t}\\n\\n\\t\\treturn debug;\\n\\t}\\n\\n\\tfunction extend(namespace, delimiter) {\\n\\t\\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\\n\\t\\tnewDebug.log = this.log;\\n\\t\\treturn newDebug;\\n\\t}\\n\\n\\t/**\\n\\t* Enables a debug mode by namespaces. This can include modes\\n\\t* separated by a colon and wildcards.\\n\\t*\\n\\t* @param {String} namespaces\\n\\t* @api public\\n\\t*/\\n\\tfunction enable(namespaces) {\\n\\t\\tcreateDebug.save(namespaces);\\n\\t\\tcreateDebug.namespaces = namespaces;\\n\\n\\t\\tcreateDebug.names = [];\\n\\t\\tcreateDebug.skips = [];\\n\\n\\t\\tlet i;\\n\\t\\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\\\s,]+/);\\n\\t\\tconst len = split.length;\\n\\n\\t\\tfor (i = 0; i < len; i++) {\\n\\t\\t\\tif (!split[i]) {\\n\\t\\t\\t\\t// ignore empty strings\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tnamespaces = split[i].replace(/\\\\*/g, '.*?');\\n\\n\\t\\t\\tif (namespaces[0] === '-') {\\n\\t\\t\\t\\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t* Disable debug output.\\n\\t*\\n\\t* @return {String} namespaces\\n\\t* @api public\\n\\t*/\\n\\tfunction disable() {\\n\\t\\tconst namespaces = [\\n\\t\\t\\t...createDebug.names.map(toNamespace),\\n\\t\\t\\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\\n\\t\\t].join(',');\\n\\t\\tcreateDebug.enable('');\\n\\t\\treturn namespaces;\\n\\t}\\n\\n\\t/**\\n\\t* Returns true if the given mode name is enabled, false otherwise.\\n\\t*\\n\\t* @param {String} name\\n\\t* @return {Boolean}\\n\\t* @api public\\n\\t*/\\n\\tfunction enabled(name) {\\n\\t\\tif (name[name.length - 1] === '*') {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tlet i;\\n\\t\\tlet len;\\n\\n\\t\\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\\n\\t\\t\\tif (createDebug.skips[i].test(name)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\\n\\t\\t\\tif (createDebug.names[i].test(name)) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t* Convert regexp to namespace\\n\\t*\\n\\t* @param {RegExp} regxep\\n\\t* @return {String} namespace\\n\\t* @api private\\n\\t*/\\n\\tfunction toNamespace(regexp) {\\n\\t\\treturn regexp.toString()\\n\\t\\t\\t.substring(2, regexp.toString().length - 2)\\n\\t\\t\\t.replace(/\\\\.\\\\*\\\\?$/, '*');\\n\\t}\\n\\n\\t/**\\n\\t* Coerce `val`.\\n\\t*\\n\\t* @param {Mixed} val\\n\\t* @return {Mixed}\\n\\t* @api private\\n\\t*/\\n\\tfunction coerce(val) {\\n\\t\\tif (val instanceof Error) {\\n\\t\\t\\treturn val.stack || val.message;\\n\\t\\t}\\n\\t\\treturn val;\\n\\t}\\n\\n\\t/**\\n\\t* XXX DO NOT USE. This is a temporary stub function.\\n\\t* XXX It WILL be removed in the next major release.\\n\\t*/\\n\\tfunction destroy() {\\n\\t\\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\\n\\t}\\n\\n\\tcreateDebug.enable(createDebug.load());\\n\\n\\treturn createDebug;\\n}\\n\\nmodule.exports = setup;\\n\\n\\n/***/ }),\\n\\n/***/ 824:\\n/***/ ((module) => {\\n\\n/**\\n * Helpers.\\n */\\n\\nvar s = 1000;\\nvar m = s * 60;\\nvar h = m * 60;\\nvar d = h * 24;\\nvar w = d * 7;\\nvar y = d * 365.25;\\n\\n/**\\n * Parse or format the given `val`.\\n *\\n * Options:\\n *\\n *  - `long` verbose formatting [false]\\n *\\n * @param {String|Number} val\\n * @param {Object} [options]\\n * @throws {Error} throw an error if val is not a non-empty string or a number\\n * @return {String|Number}\\n * @api public\\n */\\n\\nmodule.exports = function(val, options) {\\n  options = options || {};\\n  var type = typeof val;\\n  if (type === 'string' && val.length > 0) {\\n    return parse(val);\\n  } else if (type === 'number' && isFinite(val)) {\\n    return options.long ? fmtLong(val) : fmtShort(val);\\n  }\\n  throw new Error(\\n    'val is not a non-empty string or a valid number. val=' +\\n      JSON.stringify(val)\\n  );\\n};\\n\\n/**\\n * Parse the given `str` and return milliseconds.\\n *\\n * @param {String} str\\n * @return {Number}\\n * @api private\\n */\\n\\nfunction parse(str) {\\n  str = String(str);\\n  if (str.length > 100) {\\n    return;\\n  }\\n  var match = /^(-?(?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\\n    str\\n  );\\n  if (!match) {\\n    return;\\n  }\\n  var n = parseFloat(match[1]);\\n  var type = (match[2] || 'ms').toLowerCase();\\n  switch (type) {\\n    case 'years':\\n    case 'year':\\n    case 'yrs':\\n    case 'yr':\\n    case 'y':\\n      return n * y;\\n    case 'weeks':\\n    case 'week':\\n    case 'w':\\n      return n * w;\\n    case 'days':\\n    case 'day':\\n    case 'd':\\n      return n * d;\\n    case 'hours':\\n    case 'hour':\\n    case 'hrs':\\n    case 'hr':\\n    case 'h':\\n      return n * h;\\n    case 'minutes':\\n    case 'minute':\\n    case 'mins':\\n    case 'min':\\n    case 'm':\\n      return n * m;\\n    case 'seconds':\\n    case 'second':\\n    case 'secs':\\n    case 'sec':\\n    case 's':\\n      return n * s;\\n    case 'milliseconds':\\n    case 'millisecond':\\n    case 'msecs':\\n    case 'msec':\\n    case 'ms':\\n      return n;\\n    default:\\n      return undefined;\\n  }\\n}\\n\\n/**\\n * Short format for `ms`.\\n *\\n * @param {Number} ms\\n * @return {String}\\n * @api private\\n */\\n\\nfunction fmtShort(ms) {\\n  var msAbs = Math.abs(ms);\\n  if (msAbs >= d) {\\n    return Math.round(ms / d) + 'd';\\n  }\\n  if (msAbs >= h) {\\n    return Math.round(ms / h) + 'h';\\n  }\\n  if (msAbs >= m) {\\n    return Math.round(ms / m) + 'm';\\n  }\\n  if (msAbs >= s) {\\n    return Math.round(ms / s) + 's';\\n  }\\n  return ms + 'ms';\\n}\\n\\n/**\\n * Long format for `ms`.\\n *\\n * @param {Number} ms\\n * @return {String}\\n * @api private\\n */\\n\\nfunction fmtLong(ms) {\\n  var msAbs = Math.abs(ms);\\n  if (msAbs >= d) {\\n    return plural(ms, msAbs, d, 'day');\\n  }\\n  if (msAbs >= h) {\\n    return plural(ms, msAbs, h, 'hour');\\n  }\\n  if (msAbs >= m) {\\n    return plural(ms, msAbs, m, 'minute');\\n  }\\n  if (msAbs >= s) {\\n    return plural(ms, msAbs, s, 'second');\\n  }\\n  return ms + ' ms';\\n}\\n\\n/**\\n * Pluralization helper.\\n */\\n\\nfunction plural(ms, msAbs, n, name) {\\n  var isPlural = msAbs >= n * 1.5;\\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\\n}\\n\\n\\n/***/ })\\n\\n/******/ });\\n/************************************************************************/\\n/******/ // The module cache\\n/******/ var __webpack_module_cache__ = {};\\n/******/ \\n/******/ // The require function\\n/******/ function __webpack_require__(moduleId) {\\n/******/ \\t// Check if module is in cache\\n/******/ \\tvar cachedModule = __webpack_module_cache__[moduleId];\\n/******/ \\tif (cachedModule !== undefined) {\\n/******/ \\t\\treturn cachedModule.exports;\\n/******/ \\t}\\n/******/ \\t// Create a new module (and put it into the cache)\\n/******/ \\tvar module = __webpack_module_cache__[moduleId] = {\\n/******/ \\t\\t// no module.id needed\\n/******/ \\t\\t// no module.loaded needed\\n/******/ \\t\\texports: {}\\n/******/ \\t};\\n/******/ \\n/******/ \\t// Execute the module function\\n/******/ \\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\\n/******/ \\n/******/ \\t// Return the exports of the module\\n/******/ \\treturn module.exports;\\n/******/ }\\n/******/ \\n/************************************************************************/\\n/******/ /* webpack/runtime/compat get default export */\\n/******/ (() => {\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = (module) => {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\t() => (module['default']) :\\n/******/ \\t\\t\\t() => (module);\\n/******/ \\t\\t__webpack_require__.d(getter, { a: getter });\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/ })();\\n/******/ \\n/******/ /* webpack/runtime/define property getters */\\n/******/ (() => {\\n/******/ \\t// define getter functions for harmony exports\\n/******/ \\t__webpack_require__.d = (exports, definition) => {\\n/******/ \\t\\tfor(var key in definition) {\\n/******/ \\t\\t\\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\\n/******/ \\t\\t\\t\\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/ })();\\n/******/ \\n/******/ /* webpack/runtime/hasOwnProperty shorthand */\\n/******/ (() => {\\n/******/ \\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\\n/******/ })();\\n/******/ \\n/************************************************************************/\\nvar __webpack_exports__ = {};\\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\\n(() => {\\n\\n// UNUSED EXPORTS: default\\n\\n;// CONCATENATED MODULE: ./node_modules/comlink/dist/esm/comlink.mjs\\n/**\\n * @license\\n * Copyright 2019 Google LLC\\n * SPDX-License-Identifier: Apache-2.0\\n */\\nconst proxyMarker = Symbol(\\\"Comlink.proxy\\\");\\nconst createEndpoint = Symbol(\\\"Comlink.endpoint\\\");\\nconst releaseProxy = Symbol(\\\"Comlink.releaseProxy\\\");\\nconst finalizer = Symbol(\\\"Comlink.finalizer\\\");\\nconst throwMarker = Symbol(\\\"Comlink.thrown\\\");\\nconst isObject = (val) => (typeof val === \\\"object\\\" && val !== null) || typeof val === \\\"function\\\";\\n/**\\n * Internal transfer handle to handle objects marked to proxy.\\n */\\nconst proxyTransferHandler = {\\n    canHandle: (val) => isObject(val) && val[proxyMarker],\\n    serialize(obj) {\\n        const { port1, port2 } = new MessageChannel();\\n        expose(obj, port1);\\n        return [port2, [port2]];\\n    },\\n    deserialize(port) {\\n        port.start();\\n        return comlink_wrap(port);\\n    },\\n};\\n/**\\n * Internal transfer handler to handle thrown exceptions.\\n */\\nconst throwTransferHandler = {\\n    canHandle: (value) => isObject(value) && throwMarker in value,\\n    serialize({ value }) {\\n        let serialized;\\n        if (value instanceof Error) {\\n            serialized = {\\n                isError: true,\\n                value: {\\n                    message: value.message,\\n                    name: value.name,\\n                    stack: value.stack,\\n                },\\n            };\\n        }\\n        else {\\n            serialized = { isError: false, value };\\n        }\\n        return [serialized, []];\\n    },\\n    deserialize(serialized) {\\n        if (serialized.isError) {\\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\\n        }\\n        throw serialized.value;\\n    },\\n};\\n/**\\n * Allows customizing the serialization of certain values.\\n */\\nconst transferHandlers = new Map([\\n    [\\\"proxy\\\", proxyTransferHandler],\\n    [\\\"throw\\\", throwTransferHandler],\\n]);\\nfunction isAllowedOrigin(allowedOrigins, origin) {\\n    for (const allowedOrigin of allowedOrigins) {\\n        if (origin === allowedOrigin || allowedOrigin === \\\"*\\\") {\\n            return true;\\n        }\\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\nfunction expose(obj, ep = globalThis, allowedOrigins = [\\\"*\\\"]) {\\n    ep.addEventListener(\\\"message\\\", function callback(ev) {\\n        if (!ev || !ev.data) {\\n            return;\\n        }\\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\\n            return;\\n        }\\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\\n        let returnValue;\\n        try {\\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\\n            switch (type) {\\n                case \\\"GET\\\" /* MessageType.GET */:\\n                    {\\n                        returnValue = rawValue;\\n                    }\\n                    break;\\n                case \\\"SET\\\" /* MessageType.SET */:\\n                    {\\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\\n                        returnValue = true;\\n                    }\\n                    break;\\n                case \\\"APPLY\\\" /* MessageType.APPLY */:\\n                    {\\n                        returnValue = rawValue.apply(parent, argumentList);\\n                    }\\n                    break;\\n                case \\\"CONSTRUCT\\\" /* MessageType.CONSTRUCT */:\\n                    {\\n                        const value = new rawValue(...argumentList);\\n                        returnValue = proxy(value);\\n                    }\\n                    break;\\n                case \\\"ENDPOINT\\\" /* MessageType.ENDPOINT */:\\n                    {\\n                        const { port1, port2 } = new MessageChannel();\\n                        expose(obj, port2);\\n                        returnValue = transfer(port1, [port1]);\\n                    }\\n                    break;\\n                case \\\"RELEASE\\\" /* MessageType.RELEASE */:\\n                    {\\n                        returnValue = undefined;\\n                    }\\n                    break;\\n                default:\\n                    return;\\n            }\\n        }\\n        catch (value) {\\n            returnValue = { value, [throwMarker]: 0 };\\n        }\\n        Promise.resolve(returnValue)\\n            .catch((value) => {\\n            return { value, [throwMarker]: 0 };\\n        })\\n            .then((returnValue) => {\\n            const [wireValue, transferables] = toWireValue(returnValue);\\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\\n            if (type === \\\"RELEASE\\\" /* MessageType.RELEASE */) {\\n                // detach and deactive after sending release response above.\\n                ep.removeEventListener(\\\"message\\\", callback);\\n                closeEndPoint(ep);\\n                if (finalizer in obj && typeof obj[finalizer] === \\\"function\\\") {\\n                    obj[finalizer]();\\n                }\\n            }\\n        })\\n            .catch((error) => {\\n            // Send Serialization Error To Caller\\n            const [wireValue, transferables] = toWireValue({\\n                value: new TypeError(\\\"Unserializable return value\\\"),\\n                [throwMarker]: 0,\\n            });\\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\\n        });\\n    });\\n    if (ep.start) {\\n        ep.start();\\n    }\\n}\\nfunction isMessagePort(endpoint) {\\n    return endpoint.constructor.name === \\\"MessagePort\\\";\\n}\\nfunction closeEndPoint(endpoint) {\\n    if (isMessagePort(endpoint))\\n        endpoint.close();\\n}\\nfunction comlink_wrap(ep, target) {\\n    return createProxy(ep, [], target);\\n}\\nfunction throwIfProxyReleased(isReleased) {\\n    if (isReleased) {\\n        throw new Error(\\\"Proxy has been released and is not useable\\\");\\n    }\\n}\\nfunction releaseEndpoint(ep) {\\n    return requestResponseMessage(ep, {\\n        type: \\\"RELEASE\\\" /* MessageType.RELEASE */,\\n    }).then(() => {\\n        closeEndPoint(ep);\\n    });\\n}\\nconst proxyCounter = new WeakMap();\\nconst proxyFinalizers = \\\"FinalizationRegistry\\\" in globalThis &&\\n    new FinalizationRegistry((ep) => {\\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\\n        proxyCounter.set(ep, newCount);\\n        if (newCount === 0) {\\n            releaseEndpoint(ep);\\n        }\\n    });\\nfunction registerProxy(proxy, ep) {\\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\\n    proxyCounter.set(ep, newCount);\\n    if (proxyFinalizers) {\\n        proxyFinalizers.register(proxy, ep, proxy);\\n    }\\n}\\nfunction unregisterProxy(proxy) {\\n    if (proxyFinalizers) {\\n        proxyFinalizers.unregister(proxy);\\n    }\\n}\\nfunction createProxy(ep, path = [], target = function () { }) {\\n    let isProxyReleased = false;\\n    const proxy = new Proxy(target, {\\n        get(_target, prop) {\\n            throwIfProxyReleased(isProxyReleased);\\n            if (prop === releaseProxy) {\\n                return () => {\\n                    unregisterProxy(proxy);\\n                    releaseEndpoint(ep);\\n                    isProxyReleased = true;\\n                };\\n            }\\n            if (prop === \\\"then\\\") {\\n                if (path.length === 0) {\\n                    return { then: () => proxy };\\n                }\\n                const r = requestResponseMessage(ep, {\\n                    type: \\\"GET\\\" /* MessageType.GET */,\\n                    path: path.map((p) => p.toString()),\\n                }).then(fromWireValue);\\n                return r.then.bind(r);\\n            }\\n            return createProxy(ep, [...path, prop]);\\n        },\\n        set(_target, prop, rawValue) {\\n            throwIfProxyReleased(isProxyReleased);\\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\\n            // boolean. To show good will, we return true asynchronously ¯\\\\_(ツ)_/¯\\n            const [value, transferables] = toWireValue(rawValue);\\n            return requestResponseMessage(ep, {\\n                type: \\\"SET\\\" /* MessageType.SET */,\\n                path: [...path, prop].map((p) => p.toString()),\\n                value,\\n            }, transferables).then(fromWireValue);\\n        },\\n        apply(_target, _thisArg, rawArgumentList) {\\n            throwIfProxyReleased(isProxyReleased);\\n            const last = path[path.length - 1];\\n            if (last === createEndpoint) {\\n                return requestResponseMessage(ep, {\\n                    type: \\\"ENDPOINT\\\" /* MessageType.ENDPOINT */,\\n                }).then(fromWireValue);\\n            }\\n            // We just pretend that `bind()` didn’t happen.\\n            if (last === \\\"bind\\\") {\\n                return createProxy(ep, path.slice(0, -1));\\n            }\\n            const [argumentList, transferables] = processArguments(rawArgumentList);\\n            return requestResponseMessage(ep, {\\n                type: \\\"APPLY\\\" /* MessageType.APPLY */,\\n                path: path.map((p) => p.toString()),\\n                argumentList,\\n            }, transferables).then(fromWireValue);\\n        },\\n        construct(_target, rawArgumentList) {\\n            throwIfProxyReleased(isProxyReleased);\\n            const [argumentList, transferables] = processArguments(rawArgumentList);\\n            return requestResponseMessage(ep, {\\n                type: \\\"CONSTRUCT\\\" /* MessageType.CONSTRUCT */,\\n                path: path.map((p) => p.toString()),\\n                argumentList,\\n            }, transferables).then(fromWireValue);\\n        },\\n    });\\n    registerProxy(proxy, ep);\\n    return proxy;\\n}\\nfunction myFlat(arr) {\\n    return Array.prototype.concat.apply([], arr);\\n}\\nfunction processArguments(argumentList) {\\n    const processed = argumentList.map(toWireValue);\\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\\n}\\nconst transferCache = new WeakMap();\\nfunction transfer(obj, transfers) {\\n    transferCache.set(obj, transfers);\\n    return obj;\\n}\\nfunction proxy(obj) {\\n    return Object.assign(obj, { [proxyMarker]: true });\\n}\\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \\\"*\\\") {\\n    return {\\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\\n        addEventListener: context.addEventListener.bind(context),\\n        removeEventListener: context.removeEventListener.bind(context),\\n    };\\n}\\nfunction toWireValue(value) {\\n    for (const [name, handler] of transferHandlers) {\\n        if (handler.canHandle(value)) {\\n            const [serializedValue, transferables] = handler.serialize(value);\\n            return [\\n                {\\n                    type: \\\"HANDLER\\\" /* WireValueType.HANDLER */,\\n                    name,\\n                    value: serializedValue,\\n                },\\n                transferables,\\n            ];\\n        }\\n    }\\n    return [\\n        {\\n            type: \\\"RAW\\\" /* WireValueType.RAW */,\\n            value,\\n        },\\n        transferCache.get(value) || [],\\n    ];\\n}\\nfunction fromWireValue(value) {\\n    switch (value.type) {\\n        case \\\"HANDLER\\\" /* WireValueType.HANDLER */:\\n            return transferHandlers.get(value.name).deserialize(value.value);\\n        case \\\"RAW\\\" /* WireValueType.RAW */:\\n            return value.value;\\n    }\\n}\\nfunction requestResponseMessage(ep, msg, transfers) {\\n    return new Promise((resolve) => {\\n        const id = generateUUID();\\n        ep.addEventListener(\\\"message\\\", function l(ev) {\\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\\n                return;\\n            }\\n            ep.removeEventListener(\\\"message\\\", l);\\n            resolve(ev.data);\\n        });\\n        if (ep.start) {\\n            ep.start();\\n        }\\n        ep.postMessage(Object.assign({ id }, msg), transfers);\\n    });\\n}\\nfunction generateUUID() {\\n    return new Array(4)\\n        .fill(0)\\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\\n        .join(\\\"-\\\");\\n}\\n\\n\\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/helpers/browser/index.ts\\n\\nfunction getSharedMemoryAvailable() {\\n    const globalScope = typeof window !== 'undefined' ? window : globalThis;\\n    return typeof SharedArrayBuffer !== 'undefined' && globalScope.crossOriginIsolated;\\n}\\nfunction getRemoteBarretenbergWasm(worker) {\\n    return wrap(worker);\\n}\\nfunction getNumCpu() {\\n    return navigator.hardwareConcurrency;\\n}\\nfunction threadLogger() {\\n    return undefined;\\n}\\nfunction killSelf() {\\n    self.close();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vaGVscGVycy9icm93c2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFL0IsTUFBTSxVQUFVLHdCQUF3QjtJQUN0QyxNQUFNLFdBQVcsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3hFLE9BQU8sT0FBTyxpQkFBaUIsS0FBSyxXQUFXLElBQUksV0FBVyxDQUFDLG1CQUFtQixDQUFDO0FBQ3JGLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUksTUFBYztJQUN6RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQU0sQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVM7SUFDdkIsT0FBTyxTQUFTLENBQUMsbUJBQW1CLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUTtJQUN0QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZixDQUFDIn0=\\n// EXTERNAL MODULE: ./node_modules/debug/src/browser.js\\nvar browser = __webpack_require__(227);\\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\\n;// CONCATENATED MODULE: ./src/random/browser/index.ts\\nconst randomBytes = (len) => {\\n    const getWebCrypto = () => {\\n        if (typeof window !== 'undefined' && window.crypto)\\n            return window.crypto;\\n        if (typeof globalThis !== 'undefined' && globalThis.crypto)\\n            return globalThis.crypto;\\n        return undefined;\\n    };\\n    const crypto = getWebCrypto();\\n    if (!crypto) {\\n        throw new Error('randomBytes UnsupportedEnvironment');\\n    }\\n    const buf = new Uint8Array(len);\\n    // limit of Crypto.getRandomValues()\\n    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\\n    const MAX_BYTES = 65536;\\n    if (len > MAX_BYTES) {\\n        // this is the max bytes crypto.getRandomValues\\n        // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\\n        for (let generated = 0; generated < len; generated += MAX_BYTES) {\\n            // buffer.slice automatically checks if the end is past the end of\\n            // the buffer so we don't have to here\\n            crypto.getRandomValues(buf.subarray(generated, generated + MAX_BYTES));\\n        }\\n    }\\n    else {\\n        crypto.getRandomValues(buf);\\n    }\\n    return buf;\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcmFuZG9tL2Jyb3dzZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7SUFDekMsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1FBQ3hCLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1lBQUUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3pFLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLFVBQVUsQ0FBQyxNQUFNO1lBQUUsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ3JGLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFDO0lBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEMsb0NBQW9DO0lBQ3BDLDBFQUEwRTtJQUMxRSxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFFeEIsSUFBSSxHQUFHLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDcEIsK0NBQStDO1FBQy9DLG9HQUFvRztRQUNwRyxLQUFLLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRyxFQUFFLFNBQVMsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNoRSxrRUFBa0U7WUFDbEUsc0NBQXNDO1lBQ3RDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQztJQUNILENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUMifQ==\\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_base/index.ts\\n\\n\\nconst debug = browser_default()('bb.js:wasm');\\n/**\\n * Base implementation of BarretenbergWasm.\\n * Contains code that is common to the \\\"main thread\\\" implementation and the \\\"child thread\\\" implementation.\\n */\\nclass BarretenbergWasmBase {\\n    constructor() {\\n        this.memStore = {};\\n        this.logger = debug;\\n    }\\n    getImportObj(memory) {\\n        /* eslint-disable camelcase */\\n        const importObj = {\\n            // We need to implement a part of the wasi api:\\n            // https://github.com/WebAssembly/WASI/blob/main/phases/snapshot/docs.md\\n            // We literally only need to support random_get, everything else is noop implementated in barretenberg.wasm.\\n            wasi_snapshot_preview1: {\\n                random_get: (out, length) => {\\n                    out = out >>> 0;\\n                    const randomData = randomBytes(length);\\n                    const mem = this.getMemory();\\n                    mem.set(randomData, out);\\n                },\\n                clock_time_get: (a1, a2, out) => {\\n                    out = out >>> 0;\\n                    const ts = BigInt(new Date().getTime()) * 1000000n;\\n                    const view = new DataView(this.getMemory().buffer);\\n                    view.setBigUint64(out, ts, true);\\n                },\\n                proc_exit: () => {\\n                    this.logger('PANIC: proc_exit was called.');\\n                    throw new Error();\\n                },\\n            },\\n            // These are functions implementations for imports we've defined are needed.\\n            // The native C++ build defines these in a module called \\\"env\\\". We must implement TypeScript versions here.\\n            env: {\\n                /**\\n                 * The 'info' call we use for logging in C++, calls this under the hood.\\n                 * The native code will just print to std:err (to avoid std::cout which is used for IPC).\\n                 * Here we just emit the log line for the client to decide what to do with.\\n                 */\\n                logstr: (addr) => {\\n                    const str = this.stringFromAddress(addr);\\n                    const m = this.getMemory();\\n                    const str2 = `${str} (mem: ${(m.length / (1024 * 1024)).toFixed(2)}MiB)`;\\n                    this.logger(str2);\\n                    if (str2.startsWith('WARNING:')) {\\n                        this.logger(new Error().stack);\\n                    }\\n                },\\n                get_data: (keyAddr, outBufAddr) => {\\n                    const key = this.stringFromAddress(keyAddr);\\n                    outBufAddr = outBufAddr >>> 0;\\n                    const data = this.memStore[key];\\n                    if (!data) {\\n                        this.logger(`get_data miss ${key}`);\\n                        return;\\n                    }\\n                    // this.logger(`get_data hit ${key} size: ${data.length} dest: ${outBufAddr}`);\\n                    // this.logger(Buffer.from(data.slice(0, 64)).toString('hex'));\\n                    this.writeMemory(outBufAddr, data);\\n                },\\n                set_data: (keyAddr, dataAddr, dataLength) => {\\n                    const key = this.stringFromAddress(keyAddr);\\n                    dataAddr = dataAddr >>> 0;\\n                    this.memStore[key] = this.getMemorySlice(dataAddr, dataAddr + dataLength);\\n                    // this.logger(`set_data: ${key} length: ${dataLength}`);\\n                },\\n                memory,\\n            },\\n        };\\n        /* eslint-enable camelcase */\\n        return importObj;\\n    }\\n    exports() {\\n        return this.instance.exports;\\n    }\\n    /**\\n     * When returning values from the WASM, use >>> operator to convert signed representation to unsigned representation.\\n     */\\n    call(name, ...args) {\\n        if (!this.exports()[name]) {\\n            throw new Error(`WASM function ${name} not found.`);\\n        }\\n        try {\\n            return this.exports()[name](...args) >>> 0;\\n        }\\n        catch (err) {\\n            const message = `WASM function ${name} aborted, error: ${err}`;\\n            this.logger(message);\\n            this.logger(err.stack);\\n            throw err;\\n        }\\n    }\\n    memSize() {\\n        return this.getMemory().length;\\n    }\\n    /**\\n     * Returns a copy of the data, not a view.\\n     */\\n    getMemorySlice(start, end) {\\n        return this.getMemory().subarray(start, end).slice();\\n    }\\n    writeMemory(offset, arr) {\\n        const mem = this.getMemory();\\n        mem.set(arr, offset);\\n    }\\n    // PRIVATE METHODS\\n    getMemory() {\\n        return new Uint8Array(this.memory.buffer);\\n    }\\n    stringFromAddress(addr) {\\n        addr = addr >>> 0;\\n        const m = this.getMemory();\\n        let i = addr;\\n        for (; m[i] !== 0; ++i)\\n            ;\\n        const textDecoder = new TextDecoder('ascii');\\n        return textDecoder.decode(m.slice(addr, i));\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQVcsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV4Qzs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sb0JBQW9CO0lBQWpDO1FBQ1ksYUFBUSxHQUFrQyxFQUFFLENBQUM7UUFHN0MsV0FBTSxHQUEwQixLQUFLLENBQUM7SUE0SGxELENBQUM7SUExSFcsWUFBWSxDQUFDLE1BQTBCO1FBQy9DLDhCQUE4QjtRQUM5QixNQUFNLFNBQVMsR0FBRztZQUNoQiwrQ0FBK0M7WUFDL0Msd0VBQXdFO1lBQ3hFLDRHQUE0RztZQUM1RyxzQkFBc0IsRUFBRTtnQkFDdEIsVUFBVSxFQUFFLENBQUMsR0FBUSxFQUFFLE1BQWMsRUFBRSxFQUFFO29CQUN2QyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztvQkFDaEIsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN2QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixDQUFDO2dCQUNELGNBQWMsRUFBRSxDQUFDLEVBQVUsRUFBRSxFQUFVLEVBQUUsR0FBVyxFQUFFLEVBQUU7b0JBQ3RELEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO29CQUNoQixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFFBQVEs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\\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_thread/index.ts\\n\\n\\nclass BarretenbergWasmThread extends BarretenbergWasmBase {\\n    /**\\n     * Init as worker thread.\\n     */\\n    async initThread(module, memory) {\\n        this.logger = threadLogger() || this.logger;\\n        this.memory = memory;\\n        this.instance = await WebAssembly.instantiate(module, this.getImportObj(this.memory));\\n    }\\n    destroy() {\\n        killSelf();\\n    }\\n    getImportObj(memory) {\\n        const baseImports = super.getImportObj(memory);\\n        /* eslint-disable camelcase */\\n        return {\\n            ...baseImports,\\n            wasi: {\\n                'thread-spawn': () => {\\n                    this.logger('PANIC: threads cannot spawn threads!');\\n                    this.logger(new Error().stack);\\n                    killSelf();\\n                },\\n            },\\n            // These are functions implementations for imports we've defined are needed.\\n            // The native C++ build defines these in a module called \\\"env\\\". We must implement TypeScript versions here.\\n            env: {\\n                ...baseImports.env,\\n                env_hardware_concurrency: () => {\\n                    // We return 1, which should cause any algos using threading to just not create a thread.\\n                    return 1;\\n                },\\n            },\\n        };\\n        /* eslint-enable camelcase */\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fdGhyZWFkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFMUUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLG9CQUFvQjtJQUM5RDs7T0FFRztJQUNJLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBMEIsRUFBRSxNQUEwQjtRQUM1RSxJQUFJLENBQUMsTUFBTSxHQUFHLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVNLE9BQU87UUFDWixRQUFRLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFUyxZQUFZLENBQUMsTUFBMEI7UUFDL0MsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQyw4QkFBOEI7UUFDOUIsT0FBTztZQUNMLEdBQUcsV0FBVztZQUNkLElBQUksRUFBRTtnQkFDSixjQUFjLEVBQUUsR0FBRyxFQUFFO29CQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7b0JBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFNLENBQUMsQ0FBQztvQkFDaEMsUUFBUSxFQUFFLENBQUM7Z0JBQ2IsQ0FBQzthQUNGO1lBRUQsNEVBQTRFO1lBQzVFLDJHQUEyRztZQUMzRyxHQUFHLEVBQUU7Z0JBQ0gsR0FBRyxXQUFXLENBQUMsR0FBRztnQkFDbEIsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO29CQUM3Qix5RkFBeUY7b0JBQ3pGLE9BQU8sQ0FBQyxDQUFDO2dCQUNYLENBQUM7YUFDRjtTQUNGLENBQUM7UUFDRiw2QkFBNkI7SUFDL0IsQ0FBQztDQUNGIn0=\\n;// CONCATENATED MODULE: ./node_modules/ts-loader/index.js??ruleSet[1].rules[2].use[0]!./src/barretenberg_wasm/barretenberg_wasm_thread/factory/browser/thread.worker.ts\\n\\n\\n\\nself.onmessage = function (e) {\\n    if (e.data.debug) {\\n        browser_default().enable(e.data.debug);\\n    }\\n};\\nexpose(new BarretenbergWasmThread());\\nself.postMessage({ ready: true });\\n/* harmony default export */ const thread_worker = (null);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWFkLndvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9iYXJyZXRlbmJlcmdfd2FzbS9iYXJyZXRlbmJlcmdfd2FzbV90aHJlYWQvZmFjdG9yeS9icm93c2VyL3RocmVhZC53b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNqQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7SUFDMUIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQUksc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0FBRXJDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUVsQyxlQUFlLElBQVcsQ0FBQyJ9\\n})();\\n\\n\", \"Worker\", undefined, undefined);\n}\n\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_thread/factory/browser/index.ts\n\n\nfunction createThreadWorker() {\n    const worker = new Worker_fn();\n    const debugStr = browser_default().disable();\n    browser_default().enable(debugStr);\n    worker.postMessage({ debug: debugStr });\n    return worker;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fdGhyZWFkL2ZhY3RvcnkvYnJvd3Nlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxZQUFZLE1BQU0sb0JBQW9CLENBQUM7QUFFOUMsTUFBTSxVQUFVLGtCQUFrQjtJQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ2xDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZCLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUN4QyxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIn0=\n;// CONCATENATED MODULE: ./src/random/browser/index.ts\nconst randomBytes = (len) => {\n    const getWebCrypto = () => {\n        if (typeof window !== 'undefined' && window.crypto)\n            return window.crypto;\n        if (typeof globalThis !== 'undefined' && globalThis.crypto)\n            return globalThis.crypto;\n        return undefined;\n    };\n    const crypto = getWebCrypto();\n    if (!crypto) {\n        throw new Error('randomBytes UnsupportedEnvironment');\n    }\n    const buf = new Uint8Array(len);\n    // limit of Crypto.getRandomValues()\n    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n    const MAX_BYTES = 65536;\n    if (len > MAX_BYTES) {\n        // this is the max bytes crypto.getRandomValues\n        // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n        for (let generated = 0; generated < len; generated += MAX_BYTES) {\n            // buffer.slice automatically checks if the end is past the end of\n            // the buffer so we don't have to here\n            crypto.getRandomValues(buf.subarray(generated, generated + MAX_BYTES));\n        }\n    }\n    else {\n        crypto.getRandomValues(buf);\n    }\n    return buf;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcmFuZG9tL2Jyb3dzZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7SUFDekMsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1FBQ3hCLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1lBQUUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3pFLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLFVBQVUsQ0FBQyxNQUFNO1lBQUUsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ3JGLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFDO0lBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEMsb0NBQW9DO0lBQ3BDLDBFQUEwRTtJQUMxRSxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFFeEIsSUFBSSxHQUFHLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDcEIsK0NBQStDO1FBQy9DLG9HQUFvRztRQUNwRyxLQUFLLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRyxFQUFFLFNBQVMsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNoRSxrRUFBa0U7WUFDbEUsc0NBQXNDO1lBQ3RDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQztJQUNILENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUMifQ==\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_base/index.ts\n\n\nconst debug = browser_default()('bb.js:wasm');\n/**\n * Base implementation of BarretenbergWasm.\n * Contains code that is common to the \"main thread\" implementation and the \"child thread\" implementation.\n */\nclass BarretenbergWasmBase {\n    constructor() {\n        this.memStore = {};\n        this.logger = debug;\n    }\n    getImportObj(memory) {\n        /* eslint-disable camelcase */\n        const importObj = {\n            // We need to implement a part of the wasi api:\n            // https://github.com/WebAssembly/WASI/blob/main/phases/snapshot/docs.md\n            // We literally only need to support random_get, everything else is noop implementated in barretenberg.wasm.\n            wasi_snapshot_preview1: {\n                random_get: (out, length) => {\n                    out = out >>> 0;\n                    const randomData = randomBytes(length);\n                    const mem = this.getMemory();\n                    mem.set(randomData, out);\n                },\n                clock_time_get: (a1, a2, out) => {\n                    out = out >>> 0;\n                    const ts = BigInt(new Date().getTime()) * 1000000n;\n                    const view = new DataView(this.getMemory().buffer);\n                    view.setBigUint64(out, ts, true);\n                },\n                proc_exit: () => {\n                    this.logger('PANIC: proc_exit was called.');\n                    throw new Error();\n                },\n            },\n            // These are functions implementations for imports we've defined are needed.\n            // The native C++ build defines these in a module called \"env\". We must implement TypeScript versions here.\n            env: {\n                /**\n                 * The 'info' call we use for logging in C++, calls this under the hood.\n                 * The native code will just print to std:err (to avoid std::cout which is used for IPC).\n                 * Here we just emit the log line for the client to decide what to do with.\n                 */\n                logstr: (addr) => {\n                    const str = this.stringFromAddress(addr);\n                    const m = this.getMemory();\n                    const str2 = `${str} (mem: ${(m.length / (1024 * 1024)).toFixed(2)}MiB)`;\n                    this.logger(str2);\n                    if (str2.startsWith('WARNING:')) {\n                        this.logger(new Error().stack);\n                    }\n                },\n                get_data: (keyAddr, outBufAddr) => {\n                    const key = this.stringFromAddress(keyAddr);\n                    outBufAddr = outBufAddr >>> 0;\n                    const data = this.memStore[key];\n                    if (!data) {\n                        this.logger(`get_data miss ${key}`);\n                        return;\n                    }\n                    // this.logger(`get_data hit ${key} size: ${data.length} dest: ${outBufAddr}`);\n                    // this.logger(Buffer.from(data.slice(0, 64)).toString('hex'));\n                    this.writeMemory(outBufAddr, data);\n                },\n                set_data: (keyAddr, dataAddr, dataLength) => {\n                    const key = this.stringFromAddress(keyAddr);\n                    dataAddr = dataAddr >>> 0;\n                    this.memStore[key] = this.getMemorySlice(dataAddr, dataAddr + dataLength);\n                    // this.logger(`set_data: ${key} length: ${dataLength}`);\n                },\n                memory,\n            },\n        };\n        /* eslint-enable camelcase */\n        return importObj;\n    }\n    exports() {\n        return this.instance.exports;\n    }\n    /**\n     * When returning values from the WASM, use >>> operator to convert signed representation to unsigned representation.\n     */\n    call(name, ...args) {\n        if (!this.exports()[name]) {\n            throw new Error(`WASM function ${name} not found.`);\n        }\n        try {\n            return this.exports()[name](...args) >>> 0;\n        }\n        catch (err) {\n            const message = `WASM function ${name} aborted, error: ${err}`;\n            this.logger(message);\n            this.logger(err.stack);\n            throw err;\n        }\n    }\n    memSize() {\n        return this.getMemory().length;\n    }\n    /**\n     * Returns a copy of the data, not a view.\n     */\n    getMemorySlice(start, end) {\n        return this.getMemory().subarray(start, end).slice();\n    }\n    writeMemory(offset, arr) {\n        const mem = this.getMemory();\n        mem.set(arr, offset);\n    }\n    // PRIVATE METHODS\n    getMemory() {\n        return new Uint8Array(this.memory.buffer);\n    }\n    stringFromAddress(addr) {\n        addr = addr >>> 0;\n        const m = this.getMemory();\n        let i = addr;\n        for (; m[i] !== 0; ++i)\n            ;\n        const textDecoder = new TextDecoder('ascii');\n        return textDecoder.decode(m.slice(addr, i));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQVcsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV4Qzs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sb0JBQW9CO0lBQWpDO1FBQ1ksYUFBUSxHQUFrQyxFQUFFLENBQUM7UUFHN0MsV0FBTSxHQUEwQixLQUFLLENBQUM7SUE0SGxELENBQUM7SUExSFcsWUFBWSxDQUFDLE1BQTBCO1FBQy9DLDhCQUE4QjtRQUM5QixNQUFNLFNBQVMsR0FBRztZQUNoQiwrQ0FBK0M7WUFDL0Msd0VBQXdFO1lBQ3hFLDRHQUE0RztZQUM1RyxzQkFBc0IsRUFBRTtnQkFDdEIsVUFBVSxFQUFFLENBQUMsR0FBUSxFQUFFLE1BQWMsRUFBRSxFQUFFO29CQUN2QyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztvQkFDaEIsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN2QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixDQUFDO2dCQUNELGNBQWMsRUFBRSxDQUFDLEVBQVUsRUFBRSxFQUFVLEVBQUUsR0FBVyxFQUFFLEVBQUU7b0JBQ3RELEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO29CQUNoQixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFFBQVEs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\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_main/heap_allocator.ts\n/**\n * Keeps track of heap allocations so they can be easily freed.\n * The WASM memory layout has 1024 bytes of unused \"scratch\" space at the start (addresses 0-1023).\n * We can leverage this for IO rather than making expensive bb_malloc bb_free calls.\n * Heap allocations will be created for input/output args that don't fit into the scratch space.\n * Input and output args can use the same scratch space as it's assume all input reads will be performed before any\n * output writes are performed.\n */\nclass HeapAllocator {\n    constructor(wasm) {\n        this.wasm = wasm;\n        this.allocs = [];\n        this.inScratchRemaining = 1024;\n        this.outScratchRemaining = 1024;\n    }\n    getInputs(buffers) {\n        return buffers.map(bufOrNum => {\n            if (typeof bufOrNum === 'object') {\n                if (bufOrNum.length <= this.inScratchRemaining) {\n                    const ptr = (this.inScratchRemaining -= bufOrNum.length);\n                    this.wasm.writeMemory(ptr, bufOrNum);\n                    return ptr;\n                }\n                else {\n                    const ptr = this.wasm.call('bbmalloc', bufOrNum.length);\n                    this.wasm.writeMemory(ptr, bufOrNum);\n                    this.allocs.push(ptr);\n                    return ptr;\n                }\n            }\n            else {\n                return bufOrNum;\n            }\n        });\n    }\n    getOutputPtrs(outLens) {\n        return outLens.map(len => {\n            // If the obj is variable length, we need a 4 byte ptr to write the serialized data address to.\n            // WARNING: 4 only works with WASM as it has 32 bit memory.\n            const size = len || 4;\n            if (size <= this.outScratchRemaining) {\n                return (this.outScratchRemaining -= size);\n            }\n            else {\n                const ptr = this.wasm.call('bbmalloc', size);\n                this.allocs.push(ptr);\n                return ptr;\n            }\n        });\n    }\n    addOutputPtr(ptr) {\n        if (ptr >= 1024) {\n            this.allocs.push(ptr);\n        }\n    }\n    freeAll() {\n        for (const ptr of this.allocs) {\n            this.wasm.call('bbfree', ptr);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhcF9hbGxvY2F0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fbWFpbi9oZWFwX2FsbG9jYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxPQUFPLGFBQWE7SUFLeEIsWUFBb0IsSUFBMEI7UUFBMUIsU0FBSSxHQUFKLElBQUksQ0FBc0I7UUFKdEMsV0FBTSxHQUFhLEVBQUUsQ0FBQztRQUN0Qix1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDMUIsd0JBQW1CLEdBQUcsSUFBSSxDQUFDO0lBRWMsQ0FBQztJQUVsRCxTQUFTLENBQUMsT0FBZ0M7UUFDeEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzVCLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFLENBQUM7Z0JBQ2pDLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztvQkFDL0MsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQ3JDLE9BQU8sR0FBRyxDQUFDO2dCQUNiLENBQUM7cUJBQU0sQ0FBQztvQkFDTixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN0QixPQUFPLEdBQUcsQ0FBQztnQkFDYixDQUFDO1lBQ0gsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE9BQU8sUUFBUSxDQUFDO1lBQ2xCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBK0I7UUFDM0MsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLCtGQUErRjtZQUMvRiwyREFBMkQ7WUFDM0QsTUFBTSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUV0QixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztnQkFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsQ0FBQztZQUM1QyxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEIsT0FBTyxHQUFHLENBQUM7WUFDYixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQVc7UUFDdEIsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7SUFDSCxDQUFDO0NBQ0YifQ==\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_main/index.ts\n\n\n\n\n\nconst barretenberg_wasm_main_debug = browser_default()('bb.js:wasm');\n/**\n * This is the \"main thread\" implementation of BarretenbergWasm.\n * It spawns a bunch of \"child thread\" implementations.\n * In a browser context, this still runs on a worker, as it will block waiting on child threads.\n */\nclass BarretenbergWasmMain extends BarretenbergWasmBase {\n    constructor() {\n        super(...arguments);\n        this.workers = [];\n        this.remoteWasms = [];\n        this.nextWorker = 0;\n        this.nextThreadId = 1;\n    }\n    getNumThreads() {\n        return this.workers.length + 1;\n    }\n    /**\n     * Init as main thread. Spawn child threads.\n     */\n    async init(module, threads = Math.min(getNumCpu(), BarretenbergWasmMain.MAX_THREADS), logger = barretenberg_wasm_main_debug, initial = 32, maximum = 2 ** 16) {\n        this.logger = logger;\n        const initialMb = (initial * 2 ** 16) / (1024 * 1024);\n        const maxMb = (maximum * 2 ** 16) / (1024 * 1024);\n        const shared = getSharedMemoryAvailable();\n        this.logger(`initial mem: ${initial} pages, ${initialMb}MiB. ` +\n            `max mem: ${maximum} pages, ${maxMb}MiB. ` +\n            `threads: ${threads}, shared: ${shared}`);\n        this.memory = new WebAssembly.Memory({ initial, maximum, shared });\n        const instance = await WebAssembly.instantiate(module, this.getImportObj(this.memory));\n        this.instance = instance;\n        // Init all global/static data.\n        this.call('_initialize');\n        // Create worker threads. Create 1 less than requested, as main thread counts as a thread.\n        if (threads > 1) {\n            this.logger(`creating ${threads} worker threads...`);\n            this.workers = await Promise.all(Array.from({ length: threads - 1 }).map(createThreadWorker));\n            this.remoteWasms = await Promise.all(this.workers.map((getRemoteBarretenbergWasm)));\n            await Promise.all(this.remoteWasms.map(w => w.initThread(module, this.memory)));\n        }\n    }\n    /**\n     * Called on main thread. Signals child threads to gracefully exit.\n     */\n    async destroy() {\n        await Promise.all(this.workers.map(w => w.terminate()));\n    }\n    getImportObj(memory) {\n        const baseImports = super.getImportObj(memory);\n        /* eslint-disable camelcase */\n        return {\n            ...baseImports,\n            wasi: {\n                'thread-spawn': (arg) => {\n                    arg = arg >>> 0;\n                    const id = this.nextThreadId++;\n                    const worker = this.nextWorker++ % this.remoteWasms.length;\n                    // this.logger(`spawning thread ${id} on worker ${worker} with arg ${arg >>> 0}`);\n                    this.remoteWasms[worker].call('wasi_thread_start', id, arg).catch(this.logger);\n                    // this.remoteWasms[worker].postMessage({ msg: 'thread', data: { id, arg } });\n                    return id;\n                },\n            },\n            env: {\n                ...baseImports.env,\n                env_hardware_concurrency: () => {\n                    // If there are no workers (we're already running as a worker, or the main thread requested no workers)\n                    // then we return 1, which should cause any algos using threading to just not create a thread.\n                    return this.remoteWasms.length + 1;\n                },\n            },\n        };\n        /* eslint-enable camelcase */\n    }\n    callWasmExport(funcName, inArgs, outLens) {\n        const alloc = new HeapAllocator(this);\n        const inPtrs = alloc.getInputs(inArgs);\n        const outPtrs = alloc.getOutputPtrs(outLens);\n        this.call(funcName, ...inPtrs, ...outPtrs);\n        const outArgs = this.getOutputArgs(outLens, outPtrs, alloc);\n        alloc.freeAll();\n        return outArgs;\n    }\n    getOutputArgs(outLens, outPtrs, alloc) {\n        return outLens.map((len, i) => {\n            if (len) {\n                return this.getMemorySlice(outPtrs[i], outPtrs[i] + len);\n            }\n            const slice = this.getMemorySlice(outPtrs[i], outPtrs[i] + 4);\n            const ptr = new DataView(slice.buffer, slice.byteOffset, slice.byteLength).getUint32(0, true);\n            // Add our heap buffer to the dealloc list.\n            alloc.addOutputPtr(ptr);\n            // The length will be found in the first 4 bytes of the buffer, big endian. See to_heap_buffer.\n            const lslice = this.getMemorySlice(ptr, ptr + 4);\n            const length = new DataView(lslice.buffer, lslice.byteOffset, lslice.byteLength).getUint32(0, false);\n            return this.getMemorySlice(ptr + 4, ptr + 4 + length);\n        });\n    }\n}\nBarretenbergWasmMain.MAX_THREADS = 32;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fbWFpbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFdBQVcsTUFBTSxPQUFPLENBQUM7QUFFaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBRXZGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRCxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFeEM7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxvQkFBb0I7SUFBOUQ7O1FBRVUsWUFBTyxHQUFhLEVBQUUsQ0FBQztRQUN2QixnQkFBVyxHQUFtQyxFQUFFLENBQUM7UUFDakQsZUFBVSxHQUFHLENBQUMsQ0FBQztRQUNmLGlCQUFZLEdBQUcsQ0FBQyxDQUFDO0lBOEczQixDQUFDO0lBNUdRLGFBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FDZixNQUEwQixFQUMxQixPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsRUFDakUsU0FBZ0MsS0FBSyxFQUNyQyxPQUFPLEdBQUcsRUFBRSxFQUNaLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRTtRQUVqQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixNQUFN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\n;// CONCATENATED MODULE: ./node_modules/ts-loader/index.js??ruleSet[1].rules[2].use[0]!./src/barretenberg_wasm/barretenberg_wasm_main/factory/browser/main.worker.ts\n\n\n\nself.onmessage = function (e) {\n    if (e.data.debug) {\n        browser_default().enable(e.data.debug);\n    }\n};\nexpose(new BarretenbergWasmMain());\nself.postMessage({ ready: true });\n/* harmony default export */ const main_worker = (null);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi53b3JrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fbWFpbi9mYWN0b3J5L2Jyb3dzZXIvbWFpbi53b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNqQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7SUFDMUIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQUksb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0FBRW5DLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUVsQyxlQUFlLElBQVcsQ0FBQyJ9\n})();\n\n","Worker",void 0,void 0)}function ue(){const e="undefined"!=typeof window?window:globalThis;return"undefined"!=typeof SharedArrayBuffer&&e.crossOriginIsolated}function fe(e){return A(e)}function he(){return ce()("/******/ var __webpack_modules__ = ({\n\n/***/ 227:\n/***/ ((module, exports, __webpack_require__) => {\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(447)(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n/***/ }),\n\n/***/ 447:\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(824);\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n/***/ }),\n\n/***/ 824:\n/***/ ((module) => {\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n/***/ })\n\n/******/ });\n/************************************************************************/\n/******/ // The module cache\n/******/ var __webpack_module_cache__ = {};\n/******/ \n/******/ // The require function\n/******/ function __webpack_require__(moduleId) {\n/******/ \t// Check if module is in cache\n/******/ \tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \tif (cachedModule !== undefined) {\n/******/ \t\treturn cachedModule.exports;\n/******/ \t}\n/******/ \t// Create a new module (and put it into the cache)\n/******/ \tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t// no module.id needed\n/******/ \t\t// no module.loaded needed\n/******/ \t\texports: {}\n/******/ \t};\n/******/ \n/******/ \t// Execute the module function\n/******/ \t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \n/******/ \t// Return the exports of the module\n/******/ \treturn module.exports;\n/******/ }\n/******/ \n/************************************************************************/\n/******/ /* webpack/runtime/compat get default export */\n/******/ (() => {\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = (module) => {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t() => (module['default']) :\n/******/ \t\t\t() => (module);\n/******/ \t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\treturn getter;\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/define property getters */\n/******/ (() => {\n/******/ \t// define getter functions for harmony exports\n/******/ \t__webpack_require__.d = (exports, definition) => {\n/******/ \t\tfor(var key in definition) {\n/******/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/hasOwnProperty shorthand */\n/******/ (() => {\n/******/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ })();\n/******/ \n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n\n// UNUSED EXPORTS: default\n\n;// CONCATENATED MODULE: ./node_modules/comlink/dist/esm/comlink.mjs\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return comlink_wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction comlink_wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\n\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/helpers/browser/index.ts\n\nfunction getSharedMemoryAvailable() {\n    const globalScope = typeof window !== 'undefined' ? window : globalThis;\n    return typeof SharedArrayBuffer !== 'undefined' && globalScope.crossOriginIsolated;\n}\nfunction getRemoteBarretenbergWasm(worker) {\n    return wrap(worker);\n}\nfunction getNumCpu() {\n    return navigator.hardwareConcurrency;\n}\nfunction threadLogger() {\n    return undefined;\n}\nfunction killSelf() {\n    self.close();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vaGVscGVycy9icm93c2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFL0IsTUFBTSxVQUFVLHdCQUF3QjtJQUN0QyxNQUFNLFdBQVcsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3hFLE9BQU8sT0FBTyxpQkFBaUIsS0FBSyxXQUFXLElBQUksV0FBVyxDQUFDLG1CQUFtQixDQUFDO0FBQ3JGLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUksTUFBYztJQUN6RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQU0sQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVM7SUFDdkIsT0FBTyxTQUFTLENBQUMsbUJBQW1CLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUTtJQUN0QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZixDQUFDIn0=\n// EXTERNAL MODULE: ./node_modules/debug/src/browser.js\nvar browser = __webpack_require__(227);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n;// CONCATENATED MODULE: ./src/random/browser/index.ts\nconst randomBytes = (len) => {\n    const getWebCrypto = () => {\n        if (typeof window !== 'undefined' && window.crypto)\n            return window.crypto;\n        if (typeof globalThis !== 'undefined' && globalThis.crypto)\n            return globalThis.crypto;\n        return undefined;\n    };\n    const crypto = getWebCrypto();\n    if (!crypto) {\n        throw new Error('randomBytes UnsupportedEnvironment');\n    }\n    const buf = new Uint8Array(len);\n    // limit of Crypto.getRandomValues()\n    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n    const MAX_BYTES = 65536;\n    if (len > MAX_BYTES) {\n        // this is the max bytes crypto.getRandomValues\n        // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n        for (let generated = 0; generated < len; generated += MAX_BYTES) {\n            // buffer.slice automatically checks if the end is past the end of\n            // the buffer so we don't have to here\n            crypto.getRandomValues(buf.subarray(generated, generated + MAX_BYTES));\n        }\n    }\n    else {\n        crypto.getRandomValues(buf);\n    }\n    return buf;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcmFuZG9tL2Jyb3dzZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7SUFDekMsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1FBQ3hCLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1lBQUUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3pFLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLFVBQVUsQ0FBQyxNQUFNO1lBQUUsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ3JGLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFDO0lBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEMsb0NBQW9DO0lBQ3BDLDBFQUEwRTtJQUMxRSxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFFeEIsSUFBSSxHQUFHLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDcEIsK0NBQStDO1FBQy9DLG9HQUFvRztRQUNwRyxLQUFLLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRyxFQUFFLFNBQVMsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNoRSxrRUFBa0U7WUFDbEUsc0NBQXNDO1lBQ3RDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQztJQUNILENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUMifQ==\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_base/index.ts\n\n\nconst debug = browser_default()('bb.js:wasm');\n/**\n * Base implementation of BarretenbergWasm.\n * Contains code that is common to the \"main thread\" implementation and the \"child thread\" implementation.\n */\nclass BarretenbergWasmBase {\n    constructor() {\n        this.memStore = {};\n        this.logger = debug;\n    }\n    getImportObj(memory) {\n        /* eslint-disable camelcase */\n        const importObj = {\n            // We need to implement a part of the wasi api:\n            // https://github.com/WebAssembly/WASI/blob/main/phases/snapshot/docs.md\n            // We literally only need to support random_get, everything else is noop implementated in barretenberg.wasm.\n            wasi_snapshot_preview1: {\n                random_get: (out, length) => {\n                    out = out >>> 0;\n                    const randomData = randomBytes(length);\n                    const mem = this.getMemory();\n                    mem.set(randomData, out);\n                },\n                clock_time_get: (a1, a2, out) => {\n                    out = out >>> 0;\n                    const ts = BigInt(new Date().getTime()) * 1000000n;\n                    const view = new DataView(this.getMemory().buffer);\n                    view.setBigUint64(out, ts, true);\n                },\n                proc_exit: () => {\n                    this.logger('PANIC: proc_exit was called.');\n                    throw new Error();\n                },\n            },\n            // These are functions implementations for imports we've defined are needed.\n            // The native C++ build defines these in a module called \"env\". We must implement TypeScript versions here.\n            env: {\n                /**\n                 * The 'info' call we use for logging in C++, calls this under the hood.\n                 * The native code will just print to std:err (to avoid std::cout which is used for IPC).\n                 * Here we just emit the log line for the client to decide what to do with.\n                 */\n                logstr: (addr) => {\n                    const str = this.stringFromAddress(addr);\n                    const m = this.getMemory();\n                    const str2 = `${str} (mem: ${(m.length / (1024 * 1024)).toFixed(2)}MiB)`;\n                    this.logger(str2);\n                    if (str2.startsWith('WARNING:')) {\n                        this.logger(new Error().stack);\n                    }\n                },\n                get_data: (keyAddr, outBufAddr) => {\n                    const key = this.stringFromAddress(keyAddr);\n                    outBufAddr = outBufAddr >>> 0;\n                    const data = this.memStore[key];\n                    if (!data) {\n                        this.logger(`get_data miss ${key}`);\n                        return;\n                    }\n                    // this.logger(`get_data hit ${key} size: ${data.length} dest: ${outBufAddr}`);\n                    // this.logger(Buffer.from(data.slice(0, 64)).toString('hex'));\n                    this.writeMemory(outBufAddr, data);\n                },\n                set_data: (keyAddr, dataAddr, dataLength) => {\n                    const key = this.stringFromAddress(keyAddr);\n                    dataAddr = dataAddr >>> 0;\n                    this.memStore[key] = this.getMemorySlice(dataAddr, dataAddr + dataLength);\n                    // this.logger(`set_data: ${key} length: ${dataLength}`);\n                },\n                memory,\n            },\n        };\n        /* eslint-enable camelcase */\n        return importObj;\n    }\n    exports() {\n        return this.instance.exports;\n    }\n    /**\n     * When returning values from the WASM, use >>> operator to convert signed representation to unsigned representation.\n     */\n    call(name, ...args) {\n        if (!this.exports()[name]) {\n            throw new Error(`WASM function ${name} not found.`);\n        }\n        try {\n            return this.exports()[name](...args) >>> 0;\n        }\n        catch (err) {\n            const message = `WASM function ${name} aborted, error: ${err}`;\n            this.logger(message);\n            this.logger(err.stack);\n            throw err;\n        }\n    }\n    memSize() {\n        return this.getMemory().length;\n    }\n    /**\n     * Returns a copy of the data, not a view.\n     */\n    getMemorySlice(start, end) {\n        return this.getMemory().subarray(start, end).slice();\n    }\n    writeMemory(offset, arr) {\n        const mem = this.getMemory();\n        mem.set(arr, offset);\n    }\n    // PRIVATE METHODS\n    getMemory() {\n        return new Uint8Array(this.memory.buffer);\n    }\n    stringFromAddress(addr) {\n        addr = addr >>> 0;\n        const m = this.getMemory();\n        let i = addr;\n        for (; m[i] !== 0; ++i)\n            ;\n        const textDecoder = new TextDecoder('ascii');\n        return textDecoder.decode(m.slice(addr, i));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQVcsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV4Qzs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sb0JBQW9CO0lBQWpDO1FBQ1ksYUFBUSxHQUFrQyxFQUFFLENBQUM7UUFHN0MsV0FBTSxHQUEwQixLQUFLLENBQUM7SUE0SGxELENBQUM7SUExSFcsWUFBWSxDQUFDLE1BQTBCO1FBQy9DLDhCQUE4QjtRQUM5QixNQUFNLFNBQVMsR0FBRztZQUNoQiwrQ0FBK0M7WUFDL0Msd0VBQXdFO1lBQ3hFLDRHQUE0RztZQUM1RyxzQkFBc0IsRUFBRTtnQkFDdEIsVUFBVSxFQUFFLENBQUMsR0FBUSxFQUFFLE1BQWMsRUFBRSxFQUFFO29CQUN2QyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztvQkFDaEIsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN2QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixDQUFDO2dCQUNELGNBQWMsRUFBRSxDQUFDLEVBQVUsRUFBRSxFQUFVLEVBQUUsR0FBVyxFQUFFLEVBQUU7b0JBQ3RELEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO29CQUNoQixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFFBQVEs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\n;// CONCATENATED MODULE: ./src/barretenberg_wasm/barretenberg_wasm_thread/index.ts\n\n\nclass BarretenbergWasmThread extends BarretenbergWasmBase {\n    /**\n     * Init as worker thread.\n     */\n    async initThread(module, memory) {\n        this.logger = threadLogger() || this.logger;\n        this.memory = memory;\n        this.instance = await WebAssembly.instantiate(module, this.getImportObj(this.memory));\n    }\n    destroy() {\n        killSelf();\n    }\n    getImportObj(memory) {\n        const baseImports = super.getImportObj(memory);\n        /* eslint-disable camelcase */\n        return {\n            ...baseImports,\n            wasi: {\n                'thread-spawn': () => {\n                    this.logger('PANIC: threads cannot spawn threads!');\n                    this.logger(new Error().stack);\n                    killSelf();\n                },\n            },\n            // These are functions implementations for imports we've defined are needed.\n            // The native C++ build defines these in a module called \"env\". We must implement TypeScript versions here.\n            env: {\n                ...baseImports.env,\n                env_hardware_concurrency: () => {\n                    // We return 1, which should cause any algos using threading to just not create a thread.\n                    return 1;\n                },\n            },\n        };\n        /* eslint-enable camelcase */\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vYmFycmV0ZW5iZXJnX3dhc21fdGhyZWFkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFMUUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLG9CQUFvQjtJQUM5RDs7T0FFRztJQUNJLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBMEIsRUFBRSxNQUEwQjtRQUM1RSxJQUFJLENBQUMsTUFBTSxHQUFHLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVNLE9BQU87UUFDWixRQUFRLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFUyxZQUFZLENBQUMsTUFBMEI7UUFDL0MsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQyw4QkFBOEI7UUFDOUIsT0FBTztZQUNMLEdBQUcsV0FBVztZQUNkLElBQUksRUFBRTtnQkFDSixjQUFjLEVBQUUsR0FBRyxFQUFFO29CQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7b0JBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFNLENBQUMsQ0FBQztvQkFDaEMsUUFBUSxFQUFFLENBQUM7Z0JBQ2IsQ0FBQzthQUNGO1lBRUQsNEVBQTRFO1lBQzVFLDJHQUEyRztZQUMzRyxHQUFHLEVBQUU7Z0JBQ0gsR0FBRyxXQUFXLENBQUMsR0FBRztnQkFDbEIsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO29CQUM3Qix5RkFBeUY7b0JBQ3pGLE9BQU8sQ0FBQyxDQUFDO2dCQUNYLENBQUM7YUFDRjtTQUNGLENBQUM7UUFDRiw2QkFBNkI7SUFDL0IsQ0FBQztDQUNGIn0=\n;// CONCATENATED MODULE: ./node_modules/ts-loader/index.js??ruleSet[1].rules[2].use[0]!./src/barretenberg_wasm/barretenberg_wasm_thread/factory/browser/thread.worker.ts\n\n\n\nself.onmessage = function (e) {\n    if (e.data.debug) {\n        browser_default().enable(e.data.debug);\n    }\n};\nexpose(new BarretenbergWasmThread());\nself.postMessage({ ready: true });\n/* harmony default export */ const thread_worker = (null);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWFkLndvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9iYXJyZXRlbmJlcmdfd2FzbS9iYXJyZXRlbmJlcmdfd2FzbV90aHJlYWQvZmFjdG9yeS9icm93c2VyL3RocmVhZC53b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNqQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7SUFDMUIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQUksc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0FBRXJDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUVsQyxlQUFlLElBQVcsQ0FBQyJ9\n})();\n\n","Worker",void 0,void 0)}function pe(){const e=new he,t=oe().disable();return oe().enable(t),e.postMessage({debug:t}),e}const me=oe()("bb.js:wasm");class ge{constructor(){this.memStore={},this.logger=me}getImportObj(e){return{wasi_snapshot_preview1:{random_get:(e,t)=>{e>>>=0;const n=G(t);this.getMemory().set(n,e)},clock_time_get:(e,t,n)=>{n>>>=0;const s=1000000n*BigInt((new Date).getTime());new DataView(this.getMemory().buffer).setBigUint64(n,s,!0)},proc_exit:()=>{throw this.logger("PANIC: proc_exit was called."),new Error}},env:{logstr:e=>{const t=`${this.stringFromAddress(e)} (mem: ${(this.getMemory().length/1048576).toFixed(2)}MiB)`;this.logger(t),t.startsWith("WARNING:")&&this.logger((new Error).stack)},get_data:(e,t)=>{const n=this.stringFromAddress(e);t>>>=0;const s=this.memStore[n];s?this.writeMemory(t,s):this.logger(`get_data miss ${n}`)},set_data:(e,t,n)=>{const s=this.stringFromAddress(e);t>>>=0,this.memStore[s]=this.getMemorySlice(t,t+n)},memory:e}}}exports(){return this.instance.exports}call(e,...t){if(!this.exports()[e])throw new Error(`WASM function ${e} not found.`);try{return this.exports()[e](...t)>>>0}catch(t){const n=`WASM function ${e} aborted, error: ${t}`;throw this.logger(n),this.logger(t.stack),t}}memSize(){return this.getMemory().length}getMemorySlice(e,t){return this.getMemory().subarray(e,t).slice()}writeMemory(e,t){this.getMemory().set(t,e)}getMemory(){return new Uint8Array(this.memory.buffer)}stringFromAddress(e){e>>>=0;const t=this.getMemory();let n=e;for(;0!==t[n];++n);return new TextDecoder("ascii").decode(t.slice(e,n))}}class _e{constructor(e){this.wasm=e,this.allocs=[],this.inScratchRemaining=1024,this.outScratchRemaining=1024}getInputs(e){return e.map((e=>{if("object"==typeof e){if(e.length<=this.inScratchRemaining){const t=this.inScratchRemaining-=e.length;return this.wasm.writeMemory(t,e),t}{const t=this.wasm.call("bbmalloc",e.length);return this.wasm.writeMemory(t,e),this.allocs.push(t),t}}return e}))}getOutputPtrs(e){return e.map((e=>{const t=e||4;if(t<=this.outScratchRemaining)return this.outScratchRemaining-=t;{const e=this.wasm.call("bbmalloc",t);return this.allocs.push(e),e}}))}addOutputPtr(e){e>=1024&&this.allocs.push(e)}freeAll(){for(const e of this.allocs)this.wasm.call("bbfree",e)}}const be=oe()("bb.js:wasm");class ye extends ge{constructor(){super(...arguments),this.workers=[],this.remoteWasms=[],this.nextWorker=0,this.nextThreadId=1}getNumThreads(){return this.workers.length+1}async init(e,t=Math.min(function(){return navigator.hardwareConcurrency}(),ye.MAX_THREADS),n=be,s=32,i=65536){this.logger=n;const r=65536*s/1048576,a=65536*i/1048576,o=ue();this.logger(`initial mem: ${s} pages, ${r}MiB. max mem: ${i} pages, ${a}MiB. threads: ${t}, shared: ${o}`),this.memory=new WebAssembly.Memory({initial:s,maximum:i,shared:o});const l=await WebAssembly.instantiate(e,this.getImportObj(this.memory));this.instance=l,this.call("_initialize"),t>1&&(this.logger(`creating ${t} worker threads...`),this.workers=await Promise.all(Array.from({length:t-1}).map(pe)),this.remoteWasms=await Promise.all(this.workers.map(fe)),await Promise.all(this.remoteWasms.map((t=>t.initThread(e,this.memory)))))}async destroy(){await Promise.all(this.workers.map((e=>e.terminate())))}getImportObj(e){const t=super.getImportObj(e);return{...t,wasi:{"thread-spawn":e=>{e>>>=0;const t=this.nextThreadId++,n=this.nextWorker++%this.remoteWasms.length;return this.remoteWasms[n].call("wasi_thread_start",t,e).catch(this.logger),t}},env:{...t.env,env_hardware_concurrency:()=>this.remoteWasms.length+1}}}callWasmExport(e,t,n){const s=new _e(this),i=s.getInputs(t),r=s.getOutputPtrs(n);this.call(e,...i,...r);const a=this.getOutputArgs(n,r,s);return s.freeAll(),a}getOutputArgs(e,t,n){return e.map(((e,s)=>{if(e)return this.getMemorySlice(t[s],t[s]+e);const i=this.getMemorySlice(t[s],t[s]+4),r=new DataView(i.buffer,i.byteOffset,i.byteLength).getUint32(0,!0);n.addOutputPtr(r);const a=this.getMemorySlice(r,r+4),o=new DataView(a.buffer,a.byteOffset,a.byteLength).getUint32(0,!1);return this.getMemorySlice(r+4,r+4+o)}))}}ye.MAX_THREADS=32;function Ae(e){let t=e.length;for(;--t>=0;)e[t]=0}const we=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),xe=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),ve=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Ee=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Me=new Array(576);Ae(Me);const ze=new Array(60);Ae(ze);const Be=new Array(512);Ae(Be);const Fe=new Array(256);Ae(Fe);const ke=new Array(29);Ae(ke);const Ce=new Array(30);function Oe(e,t,n,s,i){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=s,this.max_length=i,this.has_stree=e&&e.length}let De,Le,Te;function Se(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}Ae(Ce);const Ne=e=>e<256?Be[e]:Be[256+(e>>>7)],Pe=(e,t)=>{e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255},Ie=(e,t,n)=>{e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,Pe(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)},Ye=(e,t,n)=>{Ie(e,n[2*t],n[2*t+1])},Qe=(e,t)=>{let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1},je=(e,t,n)=>{const s=new Array(16);let i,r,a=0;for(i=1;i<=15;i++)a=a+n[i-1]<<1,s[i]=a;for(r=0;r<=t;r++){let t=e[2*r+1];0!==t&&(e[2*r]=Qe(s[t]++,t))}},He=e=>{let t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},Ue=e=>{e.bi_valid>8?Pe(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},Re=(e,t,n,s)=>{const i=2*t,r=2*n;return e[i]<e[r]||e[i]===e[r]&&s[t]<=s[n]},Ge=(e,t,n)=>{const s=e.heap[n];let i=n<<1;for(;i<=e.heap_len&&(i<e.heap_len&&Re(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!Re(t,s,e.heap[i],e.depth));)e.heap[n]=e.heap[i],n=i,i<<=1;e.heap[n]=s},Ze=(e,t,n)=>{let s,i,r,a,o=0;if(0!==e.sym_next)do{s=255&e.pending_buf[e.sym_buf+o++],s+=(255&e.pending_buf[e.sym_buf+o++])<<8,i=e.pending_buf[e.sym_buf+o++],0===s?Ye(e,i,t):(r=Fe[i],Ye(e,r+256+1,t),a=we[r],0!==a&&(i-=ke[r],Ie(e,i,a)),s--,r=Ne(s),Ye(e,r,n),a=xe[r],0!==a&&(s-=Ce[r],Ie(e,s,a)))}while(o<e.sym_next);Ye(e,256,t)},Je=(e,t)=>{const n=t.dyn_tree,s=t.stat_desc.static_tree,i=t.stat_desc.has_stree,r=t.stat_desc.elems;let a,o,l,c=-1;for(e.heap_len=0,e.heap_max=573,a=0;a<r;a++)0!==n[2*a]?(e.heap[++e.heap_len]=c=a,e.depth[a]=0):n[2*a+1]=0;for(;e.heap_len<2;)l=e.heap[++e.heap_len]=c<2?++c:0,n[2*l]=1,e.depth[l]=0,e.opt_len--,i&&(e.static_len-=s[2*l+1]);for(t.max_code=c,a=e.heap_len>>1;a>=1;a--)Ge(e,n,a);l=r;do{a=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Ge(e,n,1),o=e.heap[1],e.heap[--e.heap_max]=a,e.heap[--e.heap_max]=o,n[2*l]=n[2*a]+n[2*o],e.depth[l]=(e.depth[a]>=e.depth[o]?e.depth[a]:e.depth[o])+1,n[2*a+1]=n[2*o+1]=l,e.heap[1]=l++,Ge(e,n,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],((e,t)=>{const n=t.dyn_tree,s=t.max_code,i=t.stat_desc.static_tree,r=t.stat_desc.has_stree,a=t.stat_desc.extra_bits,o=t.stat_desc.extra_base,l=t.stat_desc.max_length;let c,d,u,f,h,p,m=0;for(f=0;f<=15;f++)e.bl_count[f]=0;for(n[2*e.heap[e.heap_max]+1]=0,c=e.heap_max+1;c<573;c++)d=e.heap[c],f=n[2*n[2*d+1]+1]+1,f>l&&(f=l,m++),n[2*d+1]=f,d>s||(e.bl_count[f]++,h=0,d>=o&&(h=a[d-o]),p=n[2*d],e.opt_len+=p*(f+h),r&&(e.static_len+=p*(i[2*d+1]+h)));if(0!==m){do{for(f=l-1;0===e.bl_count[f];)f--;e.bl_count[f]--,e.bl_count[f+1]+=2,e.bl_count[l]--,m-=2}while(m>0);for(f=l;0!==f;f--)for(d=e.bl_count[f];0!==d;)u=e.heap[--c],u>s||(n[2*u+1]!==f&&(e.opt_len+=(f-n[2*u+1])*n[2*u],n[2*u+1]=f),d--)}})(e,t),je(n,c,e.bl_count)},Xe=(e,t,n)=>{let s,i,r=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),t[2*(n+1)+1]=65535,s=0;s<=n;s++)i=a,a=t[2*(s+1)+1],++o<l&&i===a||(o<c?e.bl_tree[2*i]+=o:0!==i?(i!==r&&e.bl_tree[2*i]++,e.bl_tree[32]++):o<=10?e.bl_tree[34]++:e.bl_tree[36]++,o=0,r=i,0===a?(l=138,c=3):i===a?(l=6,c=3):(l=7,c=4))},We=(e,t,n)=>{let s,i,r=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),s=0;s<=n;s++)if(i=a,a=t[2*(s+1)+1],!(++o<l&&i===a)){if(o<c)do{Ye(e,i,e.bl_tree)}while(0!=--o);else 0!==i?(i!==r&&(Ye(e,i,e.bl_tree),o--),Ye(e,16,e.bl_tree),Ie(e,o-3,2)):o<=10?(Ye(e,17,e.bl_tree),Ie(e,o-3,3)):(Ye(e,18,e.bl_tree),Ie(e,o-11,7));o=0,r=i,0===a?(l=138,c=3):i===a?(l=6,c=3):(l=7,c=4)}};let Ve=!1;const qe=(e,t,n,s)=>{Ie(e,0+(s?1:0),3),Ue(e),Pe(e,n),Pe(e,~n),n&&e.pending_buf.set(e.window.subarray(t,t+n),e.pending),e.pending+=n};var Ke={_tr_init:e=>{Ve||((()=>{let e,t,n,s,i;const r=new Array(16);for(n=0,s=0;s<28;s++)for(ke[s]=n,e=0;e<1<<we[s];e++)Fe[n++]=s;for(Fe[n-1]=s,i=0,s=0;s<16;s++)for(Ce[s]=i,e=0;e<1<<xe[s];e++)Be[i++]=s;for(i>>=7;s<30;s++)for(Ce[s]=i<<7,e=0;e<1<<xe[s]-7;e++)Be[256+i++]=s;for(t=0;t<=15;t++)r[t]=0;for(e=0;e<=143;)Me[2*e+1]=8,e++,r[8]++;for(;e<=255;)Me[2*e+1]=9,e++,r[9]++;for(;e<=279;)Me[2*e+1]=7,e++,r[7]++;for(;e<=287;)Me[2*e+1]=8,e++,r[8]++;for(je(Me,287,r),e=0;e<30;e++)ze[2*e+1]=5,ze[2*e]=Qe(e,5);De=new Oe(Me,we,257,286,15),Le=new Oe(ze,xe,0,30,15),Te=new Oe(new Array(0),ve,0,19,7)})(),Ve=!0),e.l_desc=new Se(e.dyn_ltree,De),e.d_desc=new Se(e.dyn_dtree,Le),e.bl_desc=new Se(e.bl_tree,Te),e.bi_buf=0,e.bi_valid=0,He(e)},_tr_stored_block:qe,_tr_flush_block:(e,t,n,s)=>{let i,r,a=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=(e=>{let t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0})(e)),Je(e,e.l_desc),Je(e,e.d_desc),a=(e=>{let t;for(Xe(e,e.dyn_ltree,e.l_desc.max_code),Xe(e,e.dyn_dtree,e.d_desc.max_code),Je(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*Ee[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t})(e),i=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=i&&(i=r)):i=r=n+5,n+4<=i&&-1!==t?qe(e,t,n,s):4===e.strategy||r===i?(Ie(e,2+(s?1:0),3),Ze(e,Me,ze)):(Ie(e,4+(s?1:0),3),((e,t,n,s)=>{let i;for(Ie(e,t-257,5),Ie(e,n-1,5),Ie(e,s-4,4),i=0;i<s;i++)Ie(e,e.bl_tree[2*Ee[i]+1],3);We(e,e.dyn_ltree,t-1),We(e,e.dyn_dtree,n-1)})(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),Ze(e,e.dyn_ltree,e.dyn_dtree)),He(e),s&&Ue(e)},_tr_tally:(e,t,n)=>(e.pending_buf[e.sym_buf+e.sym_next++]=t,e.pending_buf[e.sym_buf+e.sym_next++]=t>>8,e.pending_buf[e.sym_buf+e.sym_next++]=n,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(Fe[n]+256+1)]++,e.dyn_dtree[2*Ne(t)]++),e.sym_next===e.sym_end),_tr_align:e=>{Ie(e,2,3),Ye(e,256,Me),(e=>{16===e.bi_valid?(Pe(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)})(e)}},$e=(e,t,n,s)=>{let i=65535&e,r=e>>>16&65535,a=0;for(;0!==n;){a=n>2e3?2e3:n,n-=a;do{i=i+t[s++]|0,r=r+i|0}while(--a);i%=65521,r%=65521}return i|r<<16};const et=new Uint32Array((()=>{let e,t=[];for(var n=0;n<256;n++){e=n;for(var s=0;s<8;s++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t})());var tt=(e,t,n,s)=>{const i=et,r=s+n;e^=-1;for(let n=s;n<r;n++)e=e>>>8^i[255&(e^t[n])];return~e},nt={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},st={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:it,_tr_stored_block:rt,_tr_flush_block:at,_tr_tally:ot,_tr_align:lt}=Ke,{Z_NO_FLUSH:ct,Z_PARTIAL_FLUSH:dt,Z_FULL_FLUSH:ut,Z_FINISH:ft,Z_BLOCK:ht,Z_OK:pt,Z_STREAM_END:mt,Z_STREAM_ERROR:gt,Z_DATA_ERROR:_t,Z_BUF_ERROR:bt,Z_DEFAULT_COMPRESSION:yt,Z_FILTERED:At,Z_HUFFMAN_ONLY:wt,Z_RLE:xt,Z_FIXED:vt,Z_DEFAULT_STRATEGY:Et,Z_UNKNOWN:Mt,Z_DEFLATED:zt}=st,Bt=258,Ft=262,kt=42,Ct=113,Ot=666,Dt=(e,t)=>(e.msg=nt[t],t),Lt=e=>2*e-(e>4?9:0),Tt=e=>{let t=e.length;for(;--t>=0;)e[t]=0},St=e=>{let t,n,s,i=e.w_size;t=e.hash_size,s=t;do{n=e.head[--s],e.head[s]=n>=i?n-i:0}while(--t);t=i,s=t;do{n=e.prev[--s],e.prev[s]=n>=i?n-i:0}while(--t)};let Nt=(e,t,n)=>(t<<e.hash_shift^n)&e.hash_mask;const Pt=e=>{const t=e.state;let n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(e.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+n),e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))},It=(e,t)=>{at(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Pt(e.strm)},Yt=(e,t)=>{e.pending_buf[e.pending++]=t},Qt=(e,t)=>{e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t},jt=(e,t,n,s)=>{let i=e.avail_in;return i>s&&(i=s),0===i?0:(e.avail_in-=i,t.set(e.input.subarray(e.next_in,e.next_in+i),n),1===e.state.wrap?e.adler=$e(e.adler,t,i,n):2===e.state.wrap&&(e.adler=tt(e.adler,t,i,n)),e.next_in+=i,e.total_in+=i,i)},Ht=(e,t)=>{let n,s,i=e.max_chain_length,r=e.strstart,a=e.prev_length,o=e.nice_match;const l=e.strstart>e.w_size-Ft?e.strstart-(e.w_size-Ft):0,c=e.window,d=e.w_mask,u=e.prev,f=e.strstart+Bt;let h=c[r+a-1],p=c[r+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(n=t,c[n+a]===p&&c[n+a-1]===h&&c[n]===c[r]&&c[++n]===c[r+1]){r+=2,n++;do{}while(c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&r<f);if(s=Bt-(f-r),r=f-Bt,s>a){if(e.match_start=t,a=s,s>=o)break;h=c[r+a-1],p=c[r+a]}}}while((t=u[t&d])>l&&0!=--i);return a<=e.lookahead?a:e.lookahead},Ut=e=>{const t=e.w_size;let n,s,i;do{if(s=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-Ft)&&(e.window.set(e.window.subarray(t,t+t-s),0),e.match_start-=t,e.strstart-=t,e.block_start-=t,e.insert>e.strstart&&(e.insert=e.strstart),St(e),s+=t),0===e.strm.avail_in)break;if(n=jt(e.strm,e.window,e.strstart+e.lookahead,s),e.lookahead+=n,e.lookahead+e.insert>=3)for(i=e.strstart-e.insert,e.ins_h=e.window[i],e.ins_h=Nt(e,e.ins_h,e.window[i+1]);e.insert&&(e.ins_h=Nt(e,e.ins_h,e.window[i+3-1]),e.prev[i&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=i,i++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<Ft&&0!==e.strm.avail_in)},Rt=(e,t)=>{let n,s,i,r=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,a=0,o=e.strm.avail_in;do{if(n=65535,i=e.bi_valid+42>>3,e.strm.avail_out<i)break;if(i=e.strm.avail_out-i,s=e.strstart-e.block_start,n>s+e.strm.avail_in&&(n=s+e.strm.avail_in),n>i&&(n=i),n<r&&(0===n&&t!==ft||t===ct||n!==s+e.strm.avail_in))break;a=t===ft&&n===s+e.strm.avail_in?1:0,rt(e,0,0,a),e.pending_buf[e.pending-4]=n,e.pending_buf[e.pending-3]=n>>8,e.pending_buf[e.pending-2]=~n,e.pending_buf[e.pending-1]=~n>>8,Pt(e.strm),s&&(s>n&&(s=n),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+s),e.strm.next_out),e.strm.next_out+=s,e.strm.avail_out-=s,e.strm.total_out+=s,e.block_start+=s,n-=s),n&&(jt(e.strm,e.strm.output,e.strm.next_out,n),e.strm.next_out+=n,e.strm.avail_out-=n,e.strm.total_out+=n)}while(0===a);return o-=e.strm.avail_in,o&&(o>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=o&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-o,e.strm.next_in),e.strstart),e.strstart+=o,e.insert+=o>e.w_size-e.insert?e.w_size-e.insert:o),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),a?4:t!==ct&&t!==ft&&0===e.strm.avail_in&&e.strstart===e.block_start?2:(i=e.window_size-e.strstart,e.strm.avail_in>i&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,i+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),i>e.strm.avail_in&&(i=e.strm.avail_in),i&&(jt(e.strm,e.window,e.strstart,i),e.strstart+=i,e.insert+=i>e.w_size-e.insert?e.w_size-e.insert:i),e.high_water<e.strstart&&(e.high_water=e.strstart),i=e.bi_valid+42>>3,i=e.pending_buf_size-i>65535?65535:e.pending_buf_size-i,r=i>e.w_size?e.w_size:i,s=e.strstart-e.block_start,(s>=r||(s||t===ft)&&t!==ct&&0===e.strm.avail_in&&s<=i)&&(n=s>i?i:s,a=t===ft&&0===e.strm.avail_in&&n===s?1:0,rt(e,e.block_start,n,a),e.block_start+=n,Pt(e.strm)),a?3:1)},Gt=(e,t)=>{let n,s;for(;;){if(e.lookahead<Ft){if(Ut(e),e.lookahead<Ft&&t===ct)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=Nt(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-Ft&&(e.match_length=Ht(e,n)),e.match_length>=3)if(s=ot(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=Nt(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=Nt(e,e.ins_h,e.window[e.strstart+1]);else s=ot(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(s&&(It(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,t===ft?(It(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(It(e,!1),0===e.strm.avail_out)?1:2},Zt=(e,t)=>{let n,s,i;for(;;){if(e.lookahead<Ft){if(Ut(e),e.lookahead<Ft&&t===ct)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=Nt(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-Ft&&(e.match_length=Ht(e,n),e.match_length<=5&&(e.strategy===At||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-3,s=ot(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=Nt(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,s&&(It(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if(s=ot(e,0,e.window[e.strstart-1]),s&&It(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(s=ot(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,t===ft?(It(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(It(e,!1),0===e.strm.avail_out)?1:2};function Jt(e,t,n,s,i){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=s,this.func=i}const Xt=[new Jt(0,0,0,0,Rt),new Jt(4,4,8,4,Gt),new Jt(4,5,16,8,Gt),new Jt(4,6,32,32,Gt),new Jt(4,4,16,16,Zt),new Jt(8,16,32,32,Zt),new Jt(8,16,128,128,Zt),new Jt(8,32,128,256,Zt),new Jt(32,128,258,1024,Zt),new Jt(32,258,258,4096,Zt)];function Wt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=zt,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),Tt(this.dyn_ltree),Tt(this.dyn_dtree),Tt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),Tt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),Tt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Vt=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.status!==kt&&57!==t.status&&69!==t.status&&73!==t.status&&91!==t.status&&103!==t.status&&t.status!==Ct&&t.status!==Ot?1:0},qt=e=>{if(Vt(e))return Dt(e,gt);e.total_in=e.total_out=0,e.data_type=Mt;const t=e.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=2===t.wrap?57:t.wrap?kt:Ct,e.adler=2===t.wrap?0:1,t.last_flush=-2,it(t),pt},Kt=e=>{const t=qt(e);var n;return t===pt&&((n=e.state).window_size=2*n.w_size,Tt(n.head),n.max_lazy_match=Xt[n.level].max_lazy,n.good_match=Xt[n.level].good_length,n.nice_match=Xt[n.level].nice_length,n.max_chain_length=Xt[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=2,n.match_available=0,n.ins_h=0),t},$t=(e,t,n,s,i,r)=>{if(!e)return gt;let a=1;if(t===yt&&(t=6),s<0?(a=0,s=-s):s>15&&(a=2,s-=16),i<1||i>9||n!==zt||s<8||s>15||t<0||t>9||r<0||r>vt||8===s&&1!==a)return Dt(e,gt);8===s&&(s=9);const o=new Wt;return e.state=o,o.strm=e,o.status=kt,o.wrap=a,o.gzhead=null,o.w_bits=s,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=t,o.strategy=r,o.method=n,Kt(e)};var en={deflateInit:(e,t)=>$t(e,t,zt,15,8,Et),deflateInit2:$t,deflateReset:Kt,deflateResetKeep:qt,deflateSetHeader:(e,t)=>Vt(e)||2!==e.state.wrap?gt:(e.state.gzhead=t,pt),deflate:(e,t)=>{if(Vt(e)||t>ht||t<0)return e?Dt(e,gt):gt;const n=e.state;if(!e.output||0!==e.avail_in&&!e.input||n.status===Ot&&t!==ft)return Dt(e,0===e.avail_out?bt:gt);const s=n.last_flush;if(n.last_flush=t,0!==n.pending){if(Pt(e),0===e.avail_out)return n.last_flush=-1,pt}else if(0===e.avail_in&&Lt(t)<=Lt(s)&&t!==ft)return Dt(e,bt);if(n.status===Ot&&0!==e.avail_in)return Dt(e,bt);if(n.status===kt&&0===n.wrap&&(n.status=Ct),n.status===kt){let t=zt+(n.w_bits-8<<4)<<8,s=-1;if(s=n.strategy>=wt||n.level<2?0:n.level<6?1:6===n.level?2:3,t|=s<<6,0!==n.strstart&&(t|=32),t+=31-t%31,Qt(n,t),0!==n.strstart&&(Qt(n,e.adler>>>16),Qt(n,65535&e.adler)),e.adler=1,n.status=Ct,Pt(e),0!==n.pending)return n.last_flush=-1,pt}if(57===n.status)if(e.adler=0,Yt(n,31),Yt(n,139),Yt(n,8),n.gzhead)Yt(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),Yt(n,255&n.gzhead.time),Yt(n,n.gzhead.time>>8&255),Yt(n,n.gzhead.time>>16&255),Yt(n,n.gzhead.time>>24&255),Yt(n,9===n.level?2:n.strategy>=wt||n.level<2?4:0),Yt(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(Yt(n,255&n.gzhead.extra.length),Yt(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=tt(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69;else if(Yt(n,0),Yt(n,0),Yt(n,0),Yt(n,0),Yt(n,0),Yt(n,9===n.level?2:n.strategy>=wt||n.level<2?4:0),Yt(n,3),n.status=Ct,Pt(e),0!==n.pending)return n.last_flush=-1,pt;if(69===n.status){if(n.gzhead.extra){let t=n.pending,s=(65535&n.gzhead.extra.length)-n.gzindex;for(;n.pending+s>n.pending_buf_size;){let i=n.pending_buf_size-n.pending;if(n.pending_buf.set(n.gzhead.extra.subarray(n.gzindex,n.gzindex+i),n.pending),n.pending=n.pending_buf_size,n.gzhead.hcrc&&n.pending>t&&(e.adler=tt(e.adler,n.pending_buf,n.pending-t,t)),n.gzindex+=i,Pt(e),0!==n.pending)return n.last_flush=-1,pt;t=0,s-=i}let i=new Uint8Array(n.gzhead.extra);n.pending_buf.set(i.subarray(n.gzindex,n.gzindex+s),n.pending),n.pending+=s,n.gzhead.hcrc&&n.pending>t&&(e.adler=tt(e.adler,n.pending_buf,n.pending-t,t)),n.gzindex=0}n.status=73}if(73===n.status){if(n.gzhead.name){let t,s=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>s&&(e.adler=tt(e.adler,n.pending_buf,n.pending-s,s)),Pt(e),0!==n.pending)return n.last_flush=-1,pt;s=0}t=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,Yt(n,t)}while(0!==t);n.gzhead.hcrc&&n.pending>s&&(e.adler=tt(e.adler,n.pending_buf,n.pending-s,s)),n.gzindex=0}n.status=91}if(91===n.status){if(n.gzhead.comment){let t,s=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>s&&(e.adler=tt(e.adler,n.pending_buf,n.pending-s,s)),Pt(e),0!==n.pending)return n.last_flush=-1,pt;s=0}t=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,Yt(n,t)}while(0!==t);n.gzhead.hcrc&&n.pending>s&&(e.adler=tt(e.adler,n.pending_buf,n.pending-s,s))}n.status=103}if(103===n.status){if(n.gzhead.hcrc){if(n.pending+2>n.pending_buf_size&&(Pt(e),0!==n.pending))return n.last_flush=-1,pt;Yt(n,255&e.adler),Yt(n,e.adler>>8&255),e.adler=0}if(n.status=Ct,Pt(e),0!==n.pending)return n.last_flush=-1,pt}if(0!==e.avail_in||0!==n.lookahead||t!==ct&&n.status!==Ot){let s=0===n.level?Rt(n,t):n.strategy===wt?((e,t)=>{let n;for(;;){if(0===e.lookahead&&(Ut(e),0===e.lookahead)){if(t===ct)return 1;break}if(e.match_length=0,n=ot(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(It(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===ft?(It(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(It(e,!1),0===e.strm.avail_out)?1:2})(n,t):n.strategy===xt?((e,t)=>{let n,s,i,r;const a=e.window;for(;;){if(e.lookahead<=Bt){if(Ut(e),e.lookahead<=Bt&&t===ct)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(i=e.strstart-1,s=a[i],s===a[++i]&&s===a[++i]&&s===a[++i])){r=e.strstart+Bt;do{}while(s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&i<r);e.match_length=Bt-(r-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=ot(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=ot(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(It(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===ft?(It(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(It(e,!1),0===e.strm.avail_out)?1:2})(n,t):Xt[n.level].func(n,t);if(3!==s&&4!==s||(n.status=Ot),1===s||3===s)return 0===e.avail_out&&(n.last_flush=-1),pt;if(2===s&&(t===dt?lt(n):t!==ht&&(rt(n,0,0,!1),t===ut&&(Tt(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),Pt(e),0===e.avail_out))return n.last_flush=-1,pt}return t!==ft?pt:n.wrap<=0?mt:(2===n.wrap?(Yt(n,255&e.adler),Yt(n,e.adler>>8&255),Yt(n,e.adler>>16&255),Yt(n,e.adler>>24&255),Yt(n,255&e.total_in),Yt(n,e.total_in>>8&255),Yt(n,e.total_in>>16&255),Yt(n,e.total_in>>24&255)):(Qt(n,e.adler>>>16),Qt(n,65535&e.adler)),Pt(e),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?pt:mt)},deflateEnd:e=>{if(Vt(e))return gt;const t=e.state.status;return e.state=null,t===Ct?Dt(e,_t):pt},deflateSetDictionary:(e,t)=>{let n=t.length;if(Vt(e))return gt;const s=e.state,i=s.wrap;if(2===i||1===i&&s.status!==kt||s.lookahead)return gt;if(1===i&&(e.adler=$e(e.adler,t,n,0)),s.wrap=0,n>=s.w_size){0===i&&(Tt(s.head),s.strstart=0,s.block_start=0,s.insert=0);let e=new Uint8Array(s.w_size);e.set(t.subarray(n-s.w_size,n),0),t=e,n=s.w_size}const r=e.avail_in,a=e.next_in,o=e.input;for(e.avail_in=n,e.next_in=0,e.input=t,Ut(s);s.lookahead>=3;){let e=s.strstart,t=s.lookahead-2;do{s.ins_h=Nt(s,s.ins_h,s.window[e+3-1]),s.prev[e&s.w_mask]=s.head[s.ins_h],s.head[s.ins_h]=e,e++}while(--t);s.strstart=e,s.lookahead=2,Ut(s)}return s.strstart+=s.lookahead,s.block_start=s.strstart,s.insert=s.lookahead,s.lookahead=0,s.match_length=s.prev_length=2,s.match_available=0,e.next_in=a,e.input=o,e.avail_in=r,s.wrap=i,pt},deflateInfo:"pako deflate (from Nodeca project)"};const tn=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var nn={assign:function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(const t in n)tn(n,t)&&(e[t]=n[t])}}return e},flattenChunks:e=>{let t=0;for(let n=0,s=e.length;n<s;n++)t+=e[n].length;const n=new Uint8Array(t);for(let t=0,s=0,i=e.length;t<i;t++){let i=e[t];n.set(i,s),s+=i.length}return n}};let sn=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){sn=!1}const rn=new Uint8Array(256);for(let e=0;e<256;e++)rn[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;rn[254]=rn[254]=1;var an={string2buf:e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,n,s,i,r,a=e.length,o=0;for(i=0;i<a;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(s=e.charCodeAt(i+1),56320==(64512&s)&&(n=65536+(n-55296<<10)+(s-56320),i++)),o+=n<128?1:n<2048?2:n<65536?3:4;for(t=new Uint8Array(o),r=0,i=0;r<o;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(s=e.charCodeAt(i+1),56320==(64512&s)&&(n=65536+(n-55296<<10)+(s-56320),i++)),n<128?t[r++]=n:n<2048?(t[r++]=192|n>>>6,t[r++]=128|63&n):n<65536?(t[r++]=224|n>>>12,t[r++]=128|n>>>6&63,t[r++]=128|63&n):(t[r++]=240|n>>>18,t[r++]=128|n>>>12&63,t[r++]=128|n>>>6&63,t[r++]=128|63&n);return t},buf2string:(e,t)=>{const n=t||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));let s,i;const r=new Array(2*n);for(i=0,s=0;s<n;){let t=e[s++];if(t<128){r[i++]=t;continue}let a=rn[t];if(a>4)r[i++]=65533,s+=a-1;else{for(t&=2===a?31:3===a?15:7;a>1&&s<n;)t=t<<6|63&e[s++],a--;a>1?r[i++]=65533:t<65536?r[i++]=t:(t-=65536,r[i++]=55296|t>>10&1023,r[i++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&sn)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let n="";for(let s=0;s<t;s++)n+=String.fromCharCode(e[s]);return n})(r,i)},utf8border:(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let n=t-1;for(;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+rn[e[n]]>t?n:t}},on=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const ln=Object.prototype.toString,{Z_NO_FLUSH:cn,Z_SYNC_FLUSH:dn,Z_FULL_FLUSH:un,Z_FINISH:fn,Z_OK:hn,Z_STREAM_END:pn,Z_DEFAULT_COMPRESSION:mn,Z_DEFAULT_STRATEGY:gn,Z_DEFLATED:_n}=st;function bn(e){this.options=nn.assign({level:mn,method:_n,chunkSize:16384,windowBits:15,memLevel:8,strategy:gn},e||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new on,this.strm.avail_out=0;let n=en.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(n!==hn)throw new Error(nt[n]);if(t.header&&en.deflateSetHeader(this.strm,t.header),t.dictionary){let e;if(e="string"==typeof t.dictionary?an.string2buf(t.dictionary):"[object ArrayBuffer]"===ln.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,n=en.deflateSetDictionary(this.strm,e),n!==hn)throw new Error(nt[n]);this._dict_set=!0}}function yn(e,t){const n=new bn(t);if(n.push(e,!0),n.err)throw n.msg||nt[n.err];return n.result}bn.prototype.push=function(e,t){const n=this.strm,s=this.options.chunkSize;let i,r;if(this.ended)return!1;for(r=t===~~t?t:!0===t?fn:cn,"string"==typeof e?n.input=an.string2buf(e):"[object ArrayBuffer]"===ln.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;)if(0===n.avail_out&&(n.output=new Uint8Array(s),n.next_out=0,n.avail_out=s),(r===dn||r===un)&&n.avail_out<=6)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else{if(i=en.deflate(n,r),i===pn)return n.next_out>0&&this.onData(n.output.subarray(0,n.next_out)),i=en.deflateEnd(this.strm),this.onEnd(i),this.ended=!0,i===hn;if(0!==n.avail_out){if(r>0&&n.next_out>0)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else if(0===n.avail_in)break}else this.onData(n.output)}return!0},bn.prototype.onData=function(e){this.chunks.push(e)},bn.prototype.onEnd=function(e){e===hn&&(this.result=nn.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var An={Deflate:bn,deflate:yn,deflateRaw:function(e,t){return(t=t||{}).raw=!0,yn(e,t)},gzip:function(e,t){return(t=t||{}).gzip=!0,yn(e,t)},constants:st};const wn=16209;var xn=function(e,t){let n,s,i,r,a,o,l,c,d,u,f,h,p,m,g,_,b,y,A,w,x,v,E,M;const z=e.state;n=e.next_in,E=e.input,s=n+(e.avail_in-5),i=e.next_out,M=e.output,r=i-(t-e.avail_out),a=i+(e.avail_out-257),o=z.dmax,l=z.wsize,c=z.whave,d=z.wnext,u=z.window,f=z.hold,h=z.bits,p=z.lencode,m=z.distcode,g=(1<<z.lenbits)-1,_=(1<<z.distbits)-1;e:do{h<15&&(f+=E[n++]<<h,h+=8,f+=E[n++]<<h,h+=8),b=p[f&g];t:for(;;){if(y=b>>>24,f>>>=y,h-=y,y=b>>>16&255,0===y)M[i++]=65535&b;else{if(!(16&y)){if(64&y){if(32&y){z.mode=16191;break e}e.msg="invalid literal/length code",z.mode=wn;break e}b=p[(65535&b)+(f&(1<<y)-1)];continue t}for(A=65535&b,y&=15,y&&(h<y&&(f+=E[n++]<<h,h+=8),A+=f&(1<<y)-1,f>>>=y,h-=y),h<15&&(f+=E[n++]<<h,h+=8,f+=E[n++]<<h,h+=8),b=m[f&_];;){if(y=b>>>24,f>>>=y,h-=y,y=b>>>16&255,16&y){if(w=65535&b,y&=15,h<y&&(f+=E[n++]<<h,h+=8,h<y&&(f+=E[n++]<<h,h+=8)),w+=f&(1<<y)-1,w>o){e.msg="invalid distance too far back",z.mode=wn;break e}if(f>>>=y,h-=y,y=i-r,w>y){if(y=w-y,y>c&&z.sane){e.msg="invalid distance too far back",z.mode=wn;break e}if(x=0,v=u,0===d){if(x+=l-y,y<A){A-=y;do{M[i++]=u[x++]}while(--y);x=i-w,v=M}}else if(d<y){if(x+=l+d-y,y-=d,y<A){A-=y;do{M[i++]=u[x++]}while(--y);if(x=0,d<A){y=d,A-=y;do{M[i++]=u[x++]}while(--y);x=i-w,v=M}}}else if(x+=d-y,y<A){A-=y;do{M[i++]=u[x++]}while(--y);x=i-w,v=M}for(;A>2;)M[i++]=v[x++],M[i++]=v[x++],M[i++]=v[x++],A-=3;A&&(M[i++]=v[x++],A>1&&(M[i++]=v[x++]))}else{x=i-w;do{M[i++]=M[x++],M[i++]=M[x++],M[i++]=M[x++],A-=3}while(A>2);A&&(M[i++]=M[x++],A>1&&(M[i++]=M[x++]))}break}if(64&y){e.msg="invalid distance code",z.mode=wn;break e}b=m[(65535&b)+(f&(1<<y)-1)]}}break}}while(n<s&&i<a);A=h>>3,n-=A,h-=A<<3,f&=(1<<h)-1,e.next_in=n,e.next_out=i,e.avail_in=n<s?s-n+5:5-(n-s),e.avail_out=i<a?a-i+257:257-(i-a),z.hold=f,z.bits=h};const vn=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),En=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Mn=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),zn=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var Bn=(e,t,n,s,i,r,a,o)=>{const l=o.bits;let c,d,u,f,h,p,m=0,g=0,_=0,b=0,y=0,A=0,w=0,x=0,v=0,E=0,M=null;const z=new Uint16Array(16),B=new Uint16Array(16);let F,k,C,O=null;for(m=0;m<=15;m++)z[m]=0;for(g=0;g<s;g++)z[t[n+g]]++;for(y=l,b=15;b>=1&&0===z[b];b--);if(y>b&&(y=b),0===b)return i[r++]=20971520,i[r++]=20971520,o.bits=1,0;for(_=1;_<b&&0===z[_];_++);for(y<_&&(y=_),x=1,m=1;m<=15;m++)if(x<<=1,x-=z[m],x<0)return-1;if(x>0&&(0===e||1!==b))return-1;for(B[1]=0,m=1;m<15;m++)B[m+1]=B[m]+z[m];for(g=0;g<s;g++)0!==t[n+g]&&(a[B[t[n+g]]++]=g);if(0===e?(M=O=a,p=20):1===e?(M=vn,O=En,p=257):(M=Mn,O=zn,p=0),E=0,g=0,m=_,h=r,A=y,w=0,u=-1,v=1<<y,f=v-1,1===e&&v>852||2===e&&v>592)return 1;for(;;){F=m-w,a[g]+1<p?(k=0,C=a[g]):a[g]>=p?(k=O[a[g]-p],C=M[a[g]-p]):(k=96,C=0),c=1<<m-w,d=1<<A,_=d;do{d-=c,i[h+(E>>w)+d]=F<<24|k<<16|C}while(0!==d);for(c=1<<m-1;E&c;)c>>=1;if(0!==c?(E&=c-1,E+=c):E=0,g++,0==--z[m]){if(m===b)break;m=t[n+a[g]]}if(m>y&&(E&f)!==u){for(0===w&&(w=y),h+=_,A=m-w,x=1<<A;A+w<b&&(x-=z[A+w],!(x<=0));)A++,x<<=1;if(v+=1<<A,1===e&&v>852||2===e&&v>592)return 1;u=E&f,i[u]=y<<24|A<<16|h-r}}return 0!==E&&(i[h+E]=m-w<<24|64<<16),o.bits=y,0};const{Z_FINISH:Fn,Z_BLOCK:kn,Z_TREES:Cn,Z_OK:On,Z_STREAM_END:Dn,Z_NEED_DICT:Ln,Z_STREAM_ERROR:Tn,Z_DATA_ERROR:Sn,Z_MEM_ERROR:Nn,Z_BUF_ERROR:Pn,Z_DEFLATED:In}=st,Yn=16180,Qn=16190,jn=16191,Hn=16192,Un=16194,Rn=16199,Gn=16200,Zn=16206,Jn=16209,Xn=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function Wn(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Vn=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.mode<Yn||t.mode>16211?1:0},qn=e=>{if(Vn(e))return Tn;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=Yn,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,On},Kn=e=>{if(Vn(e))return Tn;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,qn(e)},$n=(e,t)=>{let n;if(Vn(e))return Tn;const s=e.state;return t<0?(n=0,t=-t):(n=5+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?Tn:(null!==s.window&&s.wbits!==t&&(s.window=null),s.wrap=n,s.wbits=t,Kn(e))},es=(e,t)=>{if(!e)return Tn;const n=new Wn;e.state=n,n.strm=e,n.window=null,n.mode=Yn;const s=$n(e,t);return s!==On&&(e.state=null),s};let ts,ns,ss=!0;const is=e=>{if(ss){ts=new Int32Array(512),ns=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(Bn(1,e.lens,0,288,ts,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;Bn(2,e.lens,0,32,ns,0,e.work,{bits:5}),ss=!1}e.lencode=ts,e.lenbits=9,e.distcode=ns,e.distbits=5},rs=(e,t,n,s)=>{let i;const r=e.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),s>=r.wsize?(r.window.set(t.subarray(n-r.wsize,n),0),r.wnext=0,r.whave=r.wsize):(i=r.wsize-r.wnext,i>s&&(i=s),r.window.set(t.subarray(n-s,n-s+i),r.wnext),(s-=i)?(r.window.set(t.subarray(n-s,n),0),r.wnext=s,r.whave=r.wsize):(r.wnext+=i,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=i))),0};var as={inflateReset:Kn,inflateReset2:$n,inflateResetKeep:qn,inflateInit:e=>es(e,15),inflateInit2:es,inflate:(e,t)=>{let n,s,i,r,a,o,l,c,d,u,f,h,p,m,g,_,b,y,A,w,x,v,E=0;const M=new Uint8Array(4);let z,B;const F=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Vn(e)||!e.output||!e.input&&0!==e.avail_in)return Tn;n=e.state,n.mode===jn&&(n.mode=Hn),a=e.next_out,i=e.output,l=e.avail_out,r=e.next_in,s=e.input,o=e.avail_in,c=n.hold,d=n.bits,u=o,f=l,v=On;e:for(;;)switch(n.mode){case Yn:if(0===n.wrap){n.mode=Hn;break}for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(2&n.wrap&&35615===c){0===n.wbits&&(n.wbits=15),n.check=0,M[0]=255&c,M[1]=c>>>8&255,n.check=tt(n.check,M,2,0),c=0,d=0,n.mode=16181;break}if(n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&c)<<8)+(c>>8))%31){e.msg="incorrect header check",n.mode=Jn;break}if((15&c)!==In){e.msg="unknown compression method",n.mode=Jn;break}if(c>>>=4,d-=4,x=8+(15&c),0===n.wbits&&(n.wbits=x),x>15||x>n.wbits){e.msg="invalid window size",n.mode=Jn;break}n.dmax=1<<n.wbits,n.flags=0,e.adler=n.check=1,n.mode=512&c?16189:jn,c=0,d=0;break;case 16181:for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(n.flags=c,(255&n.flags)!==In){e.msg="unknown compression method",n.mode=Jn;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=Jn;break}n.head&&(n.head.text=c>>8&1),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,n.check=tt(n.check,M,2,0)),c=0,d=0,n.mode=16182;case 16182:for(;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.head&&(n.head.time=c),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,M[2]=c>>>16&255,M[3]=c>>>24&255,n.check=tt(n.check,M,4,0)),c=0,d=0,n.mode=16183;case 16183:for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.head&&(n.head.xflags=255&c,n.head.os=c>>8),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,n.check=tt(n.check,M,2,0)),c=0,d=0,n.mode=16184;case 16184:if(1024&n.flags){for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.length=c,n.head&&(n.head.extra_len=c),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,n.check=tt(n.check,M,2,0)),c=0,d=0}else n.head&&(n.head.extra=null);n.mode=16185;case 16185:if(1024&n.flags&&(h=n.length,h>o&&(h=o),h&&(n.head&&(x=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Uint8Array(n.head.extra_len)),n.head.extra.set(s.subarray(r,r+h),x)),512&n.flags&&4&n.wrap&&(n.check=tt(n.check,s,h,r)),o-=h,r+=h,n.length-=h),n.length))break e;n.length=0,n.mode=16186;case 16186:if(2048&n.flags){if(0===o)break e;h=0;do{x=s[r+h++],n.head&&x&&n.length<65536&&(n.head.name+=String.fromCharCode(x))}while(x&&h<o);if(512&n.flags&&4&n.wrap&&(n.check=tt(n.check,s,h,r)),o-=h,r+=h,x)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=16187;case 16187:if(4096&n.flags){if(0===o)break e;h=0;do{x=s[r+h++],n.head&&x&&n.length<65536&&(n.head.comment+=String.fromCharCode(x))}while(x&&h<o);if(512&n.flags&&4&n.wrap&&(n.check=tt(n.check,s,h,r)),o-=h,r+=h,x)break e}else n.head&&(n.head.comment=null);n.mode=16188;case 16188:if(512&n.flags){for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(4&n.wrap&&c!==(65535&n.check)){e.msg="header crc mismatch",n.mode=Jn;break}c=0,d=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=jn;break;case 16189:for(;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}e.adler=n.check=Xn(c),c=0,d=0,n.mode=Qn;case Qn:if(0===n.havedict)return e.next_out=a,e.avail_out=l,e.next_in=r,e.avail_in=o,n.hold=c,n.bits=d,Ln;e.adler=n.check=1,n.mode=jn;case jn:if(t===kn||t===Cn)break e;case Hn:if(n.last){c>>>=7&d,d-=7&d,n.mode=Zn;break}for(;d<3;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}switch(n.last=1&c,c>>>=1,d-=1,3&c){case 0:n.mode=16193;break;case 1:if(is(n),n.mode=Rn,t===Cn){c>>>=2,d-=2;break e}break;case 2:n.mode=16196;break;case 3:e.msg="invalid block type",n.mode=Jn}c>>>=2,d-=2;break;case 16193:for(c>>>=7&d,d-=7&d;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if((65535&c)!=(c>>>16^65535)){e.msg="invalid stored block lengths",n.mode=Jn;break}if(n.length=65535&c,c=0,d=0,n.mode=Un,t===Cn)break e;case Un:n.mode=16195;case 16195:if(h=n.length,h){if(h>o&&(h=o),h>l&&(h=l),0===h)break e;i.set(s.subarray(r,r+h),a),o-=h,r+=h,l-=h,a+=h,n.length-=h;break}n.mode=jn;break;case 16196:for(;d<14;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(n.nlen=257+(31&c),c>>>=5,d-=5,n.ndist=1+(31&c),c>>>=5,d-=5,n.ncode=4+(15&c),c>>>=4,d-=4,n.nlen>286||n.ndist>30){e.msg="too many length or distance symbols",n.mode=Jn;break}n.have=0,n.mode=16197;case 16197:for(;n.have<n.ncode;){for(;d<3;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.lens[F[n.have++]]=7&c,c>>>=3,d-=3}for(;n.have<19;)n.lens[F[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,z={bits:n.lenbits},v=Bn(0,n.lens,0,19,n.lencode,0,n.work,z),n.lenbits=z.bits,v){e.msg="invalid code lengths set",n.mode=Jn;break}n.have=0,n.mode=16198;case 16198:for(;n.have<n.nlen+n.ndist;){for(;E=n.lencode[c&(1<<n.lenbits)-1],g=E>>>24,_=E>>>16&255,b=65535&E,!(g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(b<16)c>>>=g,d-=g,n.lens[n.have++]=b;else{if(16===b){for(B=g+2;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(c>>>=g,d-=g,0===n.have){e.msg="invalid bit length repeat",n.mode=Jn;break}x=n.lens[n.have-1],h=3+(3&c),c>>>=2,d-=2}else if(17===b){for(B=g+3;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=g,d-=g,x=0,h=3+(7&c),c>>>=3,d-=3}else{for(B=g+7;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=g,d-=g,x=0,h=11+(127&c),c>>>=7,d-=7}if(n.have+h>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=Jn;break}for(;h--;)n.lens[n.have++]=x}}if(n.mode===Jn)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=Jn;break}if(n.lenbits=9,z={bits:n.lenbits},v=Bn(1,n.lens,0,n.nlen,n.lencode,0,n.work,z),n.lenbits=z.bits,v){e.msg="invalid literal/lengths set",n.mode=Jn;break}if(n.distbits=6,n.distcode=n.distdyn,z={bits:n.distbits},v=Bn(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,z),n.distbits=z.bits,v){e.msg="invalid distances set",n.mode=Jn;break}if(n.mode=Rn,t===Cn)break e;case Rn:n.mode=Gn;case Gn:if(o>=6&&l>=258){e.next_out=a,e.avail_out=l,e.next_in=r,e.avail_in=o,n.hold=c,n.bits=d,xn(e,f),a=e.next_out,i=e.output,l=e.avail_out,r=e.next_in,s=e.input,o=e.avail_in,c=n.hold,d=n.bits,n.mode===jn&&(n.back=-1);break}for(n.back=0;E=n.lencode[c&(1<<n.lenbits)-1],g=E>>>24,_=E>>>16&255,b=65535&E,!(g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(_&&!(240&_)){for(y=g,A=_,w=b;E=n.lencode[w+((c&(1<<y+A)-1)>>y)],g=E>>>24,_=E>>>16&255,b=65535&E,!(y+g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=y,d-=y,n.back+=y}if(c>>>=g,d-=g,n.back+=g,n.length=b,0===_){n.mode=16205;break}if(32&_){n.back=-1,n.mode=jn;break}if(64&_){e.msg="invalid literal/length code",n.mode=Jn;break}n.extra=15&_,n.mode=16201;case 16201:if(n.extra){for(B=n.extra;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.length+=c&(1<<n.extra)-1,c>>>=n.extra,d-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=16202;case 16202:for(;E=n.distcode[c&(1<<n.distbits)-1],g=E>>>24,_=E>>>16&255,b=65535&E,!(g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(!(240&_)){for(y=g,A=_,w=b;E=n.distcode[w+((c&(1<<y+A)-1)>>y)],g=E>>>24,_=E>>>16&255,b=65535&E,!(y+g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=y,d-=y,n.back+=y}if(c>>>=g,d-=g,n.back+=g,64&_){e.msg="invalid distance code",n.mode=Jn;break}n.offset=b,n.extra=15&_,n.mode=16203;case 16203:if(n.extra){for(B=n.extra;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.offset+=c&(1<<n.extra)-1,c>>>=n.extra,d-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=Jn;break}n.mode=16204;case 16204:if(0===l)break e;if(h=f-l,n.offset>h){if(h=n.offset-h,h>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=Jn;break}h>n.wnext?(h-=n.wnext,p=n.wsize-h):p=n.wnext-h,h>n.length&&(h=n.length),m=n.window}else m=i,p=a-n.offset,h=n.length;h>l&&(h=l),l-=h,n.length-=h;do{i[a++]=m[p++]}while(--h);0===n.length&&(n.mode=Gn);break;case 16205:if(0===l)break e;i[a++]=n.length,l--,n.mode=Gn;break;case Zn:if(n.wrap){for(;d<32;){if(0===o)break e;o--,c|=s[r++]<<d,d+=8}if(f-=l,e.total_out+=f,n.total+=f,4&n.wrap&&f&&(e.adler=n.check=n.flags?tt(n.check,i,f,a-f):$e(n.check,i,f,a-f)),f=l,4&n.wrap&&(n.flags?c:Xn(c))!==n.check){e.msg="incorrect data check",n.mode=Jn;break}c=0,d=0}n.mode=16207;case 16207:if(n.wrap&&n.flags){for(;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(4&n.wrap&&c!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=Jn;break}c=0,d=0}n.mode=16208;case 16208:v=Dn;break e;case Jn:v=Sn;break e;case 16210:return Nn;default:return Tn}return e.next_out=a,e.avail_out=l,e.next_in=r,e.avail_in=o,n.hold=c,n.bits=d,(n.wsize||f!==e.avail_out&&n.mode<Jn&&(n.mode<Zn||t!==Fn))&&rs(e,e.output,e.next_out,f-e.avail_out),u-=e.avail_in,f-=e.avail_out,e.total_in+=u,e.total_out+=f,n.total+=f,4&n.wrap&&f&&(e.adler=n.check=n.flags?tt(n.check,i,f,e.next_out-f):$e(n.check,i,f,e.next_out-f)),e.data_type=n.bits+(n.last?64:0)+(n.mode===jn?128:0)+(n.mode===Rn||n.mode===Un?256:0),(0===u&&0===f||t===Fn)&&v===On&&(v=Pn),v},inflateEnd:e=>{if(Vn(e))return Tn;let t=e.state;return t.window&&(t.window=null),e.state=null,On},inflateGetHeader:(e,t)=>{if(Vn(e))return Tn;const n=e.state;return 2&n.wrap?(n.head=t,t.done=!1,On):Tn},inflateSetDictionary:(e,t)=>{const n=t.length;let s,i,r;return Vn(e)?Tn:(s=e.state,0!==s.wrap&&s.mode!==Qn?Tn:s.mode===Qn&&(i=1,i=$e(i,t,n,0),i!==s.check)?Sn:(r=rs(e,t,n,n),r?(s.mode=16210,Nn):(s.havedict=1,On)))},inflateInfo:"pako inflate (from Nodeca project)"},os=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const ls=Object.prototype.toString,{Z_NO_FLUSH:cs,Z_FINISH:ds,Z_OK:us,Z_STREAM_END:fs,Z_NEED_DICT:hs,Z_STREAM_ERROR:ps,Z_DATA_ERROR:ms,Z_MEM_ERROR:gs}=st;function _s(e){this.options=nn.assign({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new on,this.strm.avail_out=0;let n=as.inflateInit2(this.strm,t.windowBits);if(n!==us)throw new Error(nt[n]);if(this.header=new os,as.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=an.string2buf(t.dictionary):"[object ArrayBuffer]"===ls.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=as.inflateSetDictionary(this.strm,t.dictionary),n!==us)))throw new Error(nt[n])}function bs(e,t){const n=new _s(t);if(n.push(e),n.err)throw n.msg||nt[n.err];return n.result}_s.prototype.push=function(e,t){const n=this.strm,s=this.options.chunkSize,i=this.options.dictionary;let r,a,o;if(this.ended)return!1;for(a=t===~~t?t:!0===t?ds:cs,"[object ArrayBuffer]"===ls.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;){for(0===n.avail_out&&(n.output=new Uint8Array(s),n.next_out=0,n.avail_out=s),r=as.inflate(n,a),r===hs&&i&&(r=as.inflateSetDictionary(n,i),r===us?r=as.inflate(n,a):r===ms&&(r=hs));n.avail_in>0&&r===fs&&n.state.wrap>0&&0!==e[n.next_in];)as.inflateReset(n),r=as.inflate(n,a);switch(r){case ps:case ms:case hs:case gs:return this.onEnd(r),this.ended=!0,!1}if(o=n.avail_out,n.next_out&&(0===n.avail_out||r===fs))if("string"===this.options.to){let e=an.utf8border(n.output,n.next_out),t=n.next_out-e,i=an.buf2string(n.output,e);n.next_out=t,n.avail_out=s-t,t&&n.output.set(n.output.subarray(e,e+t),0),this.onData(i)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(r!==us||0!==o){if(r===fs)return r=as.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(0===n.avail_in)break}}return!0},_s.prototype.onData=function(e){this.chunks.push(e)},_s.prototype.onEnd=function(e){e===us&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=nn.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var ys={Inflate:_s,inflate:bs,inflateRaw:function(e,t){return(t=t||{}).raw=!0,bs(e,t)},ungzip:bs,constants:st};const{Deflate:As,deflate:ws,deflateRaw:xs,gzip:vs}=An,{Inflate:Es,inflate:Ms,inflateRaw:zs,ungzip:Bs}=ys;var Fs={Deflate:As,deflate:ws,deflateRaw:xs,gzip:vs,Inflate:Es,inflate:Ms,inflateRaw:zs,ungzip:Bs,constants:st};const ks=oe()("bb.js:wasm");async function Cs(e=32,t){const n=ue(),s=n?await async function(){if("undefined"!=typeof navigator&&navigator.hardwareConcurrency)return navigator.hardwareConcurrency;try{return(await o.e(522).then(o.t.bind(o,522,23))).cpus().length}catch(e){return ks("Could not detect environment. Falling back to one thread.: {e}"),1}}():1,i=Math.min(e,s,32),r=await async function(e,t){let n=e?"/barretenberg-threads.wasm.gz":"/barretenberg.wasm.gz";n=t?`${t}/${/[^/]+(?=\/$|$)/.exec(n)?.[0]}`:n;const s=await fetch(n),i=await s.arrayBuffer(),r=new Uint8Array(i);return 31===r[0]&&139===r[1]&&8===r[2]?Fs.ungzip(r).buffer:r}(n,t);return{module:await WebAssembly.compile(r),threads:i}}const Os=4,Ds=32,Ls=3*Ds;function Ts(e){const t=Ps(e.slice(4)),n=Number(t[1]),s=Ls+Os,i=e.slice(0,s),r=n*Ds,a=e.slice(s+r);return{proof:new Uint8Array([...i,...a]),publicInputs:e.slice(s,s+r)}}function Ss(e,t){const n=t.slice(0,Ls+Os),s=t.slice(Ls+Os);return Uint8Array.from([...n,...e,...s])}function Ns(e){const t=Is(e.publicInputs);return Uint8Array.from([...t,...e.proof])}function Ps(e){const t=[];for(let n=0;n<e.length;n+=32){const s=e.slice(n,n+32);t.push(s)}return t.map(Ys)}function Is(e){return function(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);let s=0;for(const t of e)n.set(t,s),s+=t.length;return n}(e.map(Qs))}function Ys(e){const t=[];return e.forEach((function(e){let n=e.toString(16);n.length%2&&(n="0"+n),t.push(n)})),"0x"+t.join("")}function Qs(e){const t=BigInt(e).toString(16).padStart(64,"0"),n=t.length/2,s=new Uint8Array(n);let i=0,r=0;for(;i<n;)s[i]=parseInt(t.slice(r,r+2),16),i+=1,r+=2;return s}class js{constructor(e={threads:1}){this.options=e}async instantiate(){if(!this.api){const e=await zi.new(this.options);await e.initSRSForCircuitSize(0),this.acirComposer=await e.acirNewAcirComposer(0),this.api=e}}async verifyUltraPlonkProof(e,t){await this.instantiate(),await this.api.acirLoadVerificationKey(this.acirComposer,new D(t));const n=Ns(e);return await this.api.acirVerifyProof(this.acirComposer,n)}async verifyUltraHonkProof(e,t){await this.instantiate();const n=Ss(Is(e.publicInputs),e.proof);return await this.api.acirVerifyUltraHonk(n,new D(t))}async destroy(){this.api&&await this.api.destroy()}}var Hs=Uint8Array,Us=Uint16Array,Rs=Int32Array,Gs=new Hs([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Zs=new Hs([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),Js=new Hs([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Xs=function(e,t){for(var n=new Us(31),s=0;s<31;++s)n[s]=t+=1<<e[s-1];var i=new Rs(n[30]);for(s=1;s<30;++s)for(var r=n[s];r<n[s+1];++r)i[r]=r-n[s]<<5|s;return{b:n,r:i}},Ws=Xs(Gs,2),Vs=Ws.b,qs=Ws.r;Vs[28]=258,qs[258]=28;for(var Ks=Xs(Zs,0),$s=Ks.b,ei=(Ks.r,new Us(32768)),ti=0;ti<32768;++ti){var ni=(43690&ti)>>1|(21845&ti)<<1;ni=(61680&(ni=(52428&ni)>>2|(13107&ni)<<2))>>4|(3855&ni)<<4,ei[ti]=((65280&ni)>>8|(255&ni)<<8)>>1}var si=function(e,t,n){for(var s=e.length,i=0,r=new Us(t);i<s;++i)e[i]&&++r[e[i]-1];var a,o=new Us(t);for(i=1;i<t;++i)o[i]=o[i-1]+r[i-1]<<1;if(n){a=new Us(1<<t);var l=15-t;for(i=0;i<s;++i)if(e[i])for(var c=i<<4|e[i],d=t-e[i],u=o[e[i]-1]++<<d,f=u|(1<<d)-1;u<=f;++u)a[ei[u]>>l]=c}else for(a=new Us(s),i=0;i<s;++i)e[i]&&(a[i]=ei[o[e[i]-1]++]>>15-e[i]);return a},ii=new Hs(288);for(ti=0;ti<144;++ti)ii[ti]=8;for(ti=144;ti<256;++ti)ii[ti]=9;for(ti=256;ti<280;++ti)ii[ti]=7;for(ti=280;ti<288;++ti)ii[ti]=8;var ri=new Hs(32);for(ti=0;ti<32;++ti)ri[ti]=5;var ai=si(ii,9,1),oi=si(ri,5,1),li=function(e){for(var t=e[0],n=1;n<e.length;++n)e[n]>t&&(t=e[n]);return t},ci=function(e,t,n){var s=t/8|0;return(e[s]|e[s+1]<<8)>>(7&t)&n},di=function(e,t){var n=t/8|0;return(e[n]|e[n+1]<<8|e[n+2]<<16)>>(7&t)},ui=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],fi=function(e,t,n){var s=new Error(t||ui[e]);if(s.code=e,Error.captureStackTrace&&Error.captureStackTrace(s,fi),!n)throw s;return s},hi=function(e,t,n,s){var i=e.length,r=s?s.length:0;if(!i||t.f&&!t.l)return n||new Hs(0);var a=!n,o=a||2!=t.i,l=t.i;a&&(n=new Hs(3*i));var c,d=function(e){var t=n.length;if(e>t){var s=new Hs(Math.max(2*t,e));s.set(n),n=s}},u=t.f||0,f=t.p||0,h=t.b||0,p=t.l,m=t.d,g=t.m,_=t.n,b=8*i;do{if(!p){u=ci(e,f,1);var y=ci(e,f+1,3);if(f+=3,!y){var A=e[(c=f,(O=4+((c+7)/8|0))-4)]|e[O-3]<<8,w=O+A;if(w>i){l&&fi(0);break}o&&d(h+A),n.set(e.subarray(O,w),h),t.b=h+=A,t.p=f=8*w,t.f=u;continue}if(1==y)p=ai,m=oi,g=9,_=5;else if(2==y){var x=ci(e,f,31)+257,v=ci(e,f+10,15)+4,E=x+ci(e,f+5,31)+1;f+=14;for(var M=new Hs(E),z=new Hs(19),B=0;B<v;++B)z[Js[B]]=ci(e,f+3*B,7);f+=3*v;var F=li(z),k=(1<<F)-1,C=si(z,F,1);for(B=0;B<E;){var O,D=C[ci(e,f,k)];if(f+=15&D,(O=D>>4)<16)M[B++]=O;else{var L=0,T=0;for(16==O?(T=3+ci(e,f,3),f+=2,L=M[B-1]):17==O?(T=3+ci(e,f,7),f+=3):18==O&&(T=11+ci(e,f,127),f+=7);T--;)M[B++]=L}}var S=M.subarray(0,x),N=M.subarray(x);g=li(S),_=li(N),p=si(S,g,1),m=si(N,_,1)}else fi(1);if(f>b){l&&fi(0);break}}o&&d(h+131072);for(var P=(1<<g)-1,I=(1<<_)-1,Y=f;;Y=f){var Q=(L=p[di(e,f)&P])>>4;if((f+=15&L)>b){l&&fi(0);break}if(L||fi(2),Q<256)n[h++]=Q;else{if(256==Q){Y=f,p=null;break}var j=Q-254;if(Q>264){var H=Gs[B=Q-257];j=ci(e,f,(1<<H)-1)+Vs[B],f+=H}var U=m[di(e,f)&I],R=U>>4;if(U||fi(3),f+=15&U,N=$s[R],R>3&&(H=Zs[R],N+=di(e,f)&(1<<H)-1,f+=H),f>b){l&&fi(0);break}o&&d(h+131072);var G=h+j;if(h<N){var Z=r-N,J=Math.min(N,G);for(Z+h<0&&fi(3);h<J;++h)n[h]=s[Z+h]}for(;h<G;++h)n[h]=n[h-N]}}t.l=p,t.p=Y,t.b=h,t.f=u,p&&(u=1,t.m=g,t.d=m,t.n=_)}while(!u);return h!=n.length&&a?function(e,t,n){return(null==t||t<0)&&(t=0),(null==n||n>e.length)&&(n=e.length),new Hs(e.subarray(t,n))}(n,0,h):n.subarray(0,h)},pi=new Hs(0),mi=function(e){31==e[0]&&139==e[1]&&8==e[2]||fi(6,"invalid gzip data");var t=e[3],n=10;4&t&&(n+=2+(e[10]|e[11]<<8));for(var s=(t>>3&1)+(t>>4&1);s>0;s-=!e[n++]);return n+(2&t)},gi=function(e){var t=e.length;return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0},_i=function(e,t){return(8!=(15&e[0])||e[0]>>4>7||(e[0]<<8|e[1])%31)&&fi(6,"invalid zlib data"),(e[1]>>5&1)==+!t&&fi(6,"invalid zlib data: "+(32&e[1]?"need":"unexpected")+" dictionary"),2+(e[1]>>3&4)};function bi(e,t){return 31==e[0]&&139==e[1]&&8==e[2]?function(e,t){var n=mi(e);return n+8>e.length&&fi(6,"invalid gzip data"),hi(e.subarray(n,-8),{i:2},t&&t.out||new Hs(gi(e)),t&&t.dictionary)}(e,t):8!=(15&e[0])||e[0]>>4>7||(e[0]<<8|e[1])%31?function(e,t){return hi(e,{i:2},t&&t.out,t&&t.dictionary)}(e,t):function(e,t){return hi(e.subarray(_i(e,t&&t.dictionary),-4),{i:2},t&&t.out,t&&t.dictionary)}(e,t)}var yi="undefined"!=typeof TextDecoder&&new TextDecoder;try{yi.decode(pi,{stream:!0})}catch(e){}"function"==typeof queueMicrotask?queueMicrotask:"function"==typeof setTimeout&&setTimeout;var Ai=o(764).lW;class wi{constructor(e,t={threads:1},n={recursive:!1}){this.backendOptions=t,this.circuitOptions=n,this.acirUncompressedBytecode=Ei(e)}async instantiate(){if(!this.api){const e=await zi.new(this.backendOptions),t=!1,[n,s]=await e.acirGetCircuitSizes(this.acirUncompressedBytecode,this.circuitOptions.recursive,t);await e.initSRSForCircuitSize(s),this.acirComposer=await e.acirNewAcirComposer(s),await e.acirInitProvingKey(this.acirComposer,this.acirUncompressedBytecode,this.circuitOptions.recursive),this.api=e}}async generateProof(e){await this.instantiate();const t=await this.api.acirCreateProof(this.acirComposer,this.acirUncompressedBytecode,this.circuitOptions.recursive,bi(e)),n=t.length-2144,s=t.slice(0,n);return{proof:t.slice(n),publicInputs:Ps(s)}}async generateRecursiveProofArtifacts(e,t=0){await this.instantiate();const n=Ns(e),s=(await this.api.acirSerializeProofIntoFields(this.acirComposer,n,t)).slice(t);await this.api.acirInitVerificationKey(this.acirComposer);const i=await this.api.acirSerializeVerificationKeyIntoFields(this.acirComposer);return{proofAsFields:s.map((e=>e.toString())),vkAsFields:i[0].map((e=>e.toString())),vkHash:i[1].toString()}}async verifyProof(e){await this.instantiate(),await this.api.acirInitVerificationKey(this.acirComposer);const t=Ns(e);return await this.api.acirVerifyProof(this.acirComposer,t)}async getVerificationKey(){return await this.instantiate(),await this.api.acirInitVerificationKey(this.acirComposer),await this.api.acirGetVerificationKey(this.acirComposer)}async getSolidityVerifier(){return await this.instantiate(),await this.api.acirInitVerificationKey(this.acirComposer),await this.api.acirGetSolidityVerifier(this.acirComposer)}async destroy(){this.api&&await this.api.destroy()}}class xi{constructor(e,t={threads:1},n={recursive:!1}){this.backendOptions=t,this.circuitOptions=n,this.acirUncompressedBytecode=Ei(e)}async instantiate(){if(!this.api){const e=await zi.new(this.backendOptions),t=!0;await e.acirInitSRS(this.acirUncompressedBytecode,this.circuitOptions.recursive,t),this.api=e}}async generateProof(e,t){await this.instantiate();const n=t?.keccak?this.api.acirProveUltraKeccakHonk.bind(this.api):this.api.acirProveUltraHonk.bind(this.api),s=await n(this.acirUncompressedBytecode,this.circuitOptions.recursive,bi(e)),i=Ps(s.slice(4)),r=Number(i[1]),a=100,o=s.slice(0,a),l=32*r,c=s.slice(a+l);return{proof:new Uint8Array([...o,...c]),publicInputs:Ps(s.slice(a,a+l))}}async generateProofForRecursiveAggregation(e,t){await this.instantiate();const n=t?.keccak?this.api.acirProveUltraKeccakHonk.bind(this.api):this.api.acirProveUltraHonk.bind(this.api),s=await n(this.acirUncompressedBytecode,this.circuitOptions.recursive,bi(e)),i=Ps(s.slice(4)),r=Number(i[1])-16,a=32*r,o=32*r,l=new Uint8Array(s.length-o);return l.set(s.subarray(0,100),0),l.set(s.subarray(100+o),100),{proof:Ps(l.slice(4)),publicInputs:Ps(s.slice(100,100+a))}}async verifyProof(e,t){await this.instantiate();const n=Ss(Is(e.publicInputs),e.proof),s=t?.keccak?this.api.acirWriteVkUltraKeccakHonk.bind(this.api):this.api.acirWriteVkUltraHonk.bind(this.api),i=t?.keccak?this.api.acirVerifyUltraKeccakHonk.bind(this.api):this.api.acirVerifyUltraHonk.bind(this.api),r=await s(this.acirUncompressedBytecode,this.circuitOptions.recursive);return await i(n,new D(r))}async getVerificationKey(){return await this.instantiate(),await this.api.acirWriteVkUltraHonk(this.acirUncompressedBytecode,this.circuitOptions.recursive)}async getSolidityVerifier(e){await this.instantiate();const t=e??await this.api.acirWriteVkUltraHonk(this.acirUncompressedBytecode,this.circuitOptions.recursive);return await this.api.acirHonkSolidityVerifier(this.acirUncompressedBytecode,new D(t))}async generateRecursiveProofArtifacts(e,t){await this.instantiate();const n=await this.api.acirWriteVkUltraHonk(this.acirUncompressedBytecode,this.circuitOptions.recursive);return{proofAsFields:[],vkAsFields:(await this.api.acirVkAsFieldsUltraHonk(n)).map((e=>e.toString())),vkHash:""}}async destroy(){this.api&&await this.api.destroy()}}class vi{constructor(e,t={threads:1}){this.acirMsgpack=e,this.options=t}async instantiate(){if(!this.api){const e=await zi.new(this.options);await e.initSRSClientIVC(),this.api=e}}async prove(e){return await this.instantiate(),this.api.acirProveAztecClient(this.acirMsgpack,e)}async verify(e,t){return await this.instantiate(),this.api.acirVerifyAztecClient(e,t)}async proveAndVerify(e){return await this.instantiate(),this.api.acirProveAndVerifyAztecClient(this.acirMsgpack,e)}async destroy(){this.api&&await this.api.destroy()}}function Ei(e){return bi(function(e){if(void 0!==Ai){const t=Ai.from(e,"base64");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}if("function"==typeof atob)return Uint8Array.from(atob(e),(e=>e.charCodeAt(0)));throw new Error("No implementation found for base64 decoding.")}(e))}const Mi=oe()("bb.js:wasm");class zi extends ie{constructor(e,t,n){super(t),this.worker=e,this.options=n}static async new(e={}){const t=function(){const e=new de,t=oe().disable();return oe().enable(t),e.postMessage({debug:t}),e}(),n=fe(t),{module:s,threads:i}=await Cs(e.threads,e.wasmPath);return await n.init(s,i,F(Mi),e.memory?.initial,e.memory?.maximum),new zi(t,n,e)}async getNumThreads(){return await this.wasm.getNumThreads()}async initSRSForCircuitSize(e){const t=await c.new(e+1,this.options.crsPath);await this.srsInitSrs(new D(t.getG1Data()),t.numPoints,new D(t.getG2Data()))}async initSRSClientIVC(){const e=await c.new(1048577,this.options.crsPath),t=await d.new(65537,this.options.crsPath);await this.srsInitSrs(new D(e.getG1Data()),e.numPoints,new D(e.getG2Data())),await this.srsInitGrumpkinSrs(new D(t.getG1Data()),t.numPoints)}async acirInitSRS(e,t,n){const[s,i]=await this.acirGetCircuitSizes(e,t,n);return this.initSRSForCircuitSize(i)}async destroy(){await this.wasm.destroy(),await this.worker.terminate()}}let Bi,Fi;class ki extends re{constructor(e){super(e)}static async new(e){const t=new ye,{module:n,threads:s}=await Cs(1,e);return await t.init(n,s),new ki(t)}static async initSingleton(e){return Bi||(Bi=ki.new(e)),Fi=await Bi,Fi}static getSingleton(){if(!Fi)throw new Error("First call BarretenbergSync.initSingleton() on @aztec/bb.js module.");return Fi}getWasm(){return this.wasm}}})();var c=l.AL,d=l.Fr,u=l.ld,f=i(7877),h=i(8891).Buffer;function p(e){const t=e.toString("hex");return 0===t.length?BigInt(0):BigInt(`0x${t}`)}function m(e,t){if(e<BigInt(0))throw new Error(`Cannot convert negative bigint ${e.toString()} to buffer with toBufferBE.`);const n=e.toString(16),s=h.from(n.padStart(2*t,"0").slice(0,2*t),"hex");if(s.length>t)throw new Error(`Number ${e.toString(16)} does not fit in ${t}`);return s}function g(e){if(!/^(0x)?[0-9a-fA-F]*$/.test(e)||e.length%2!=0)throw new Error(`Invalid hex string: ${e}`);return h.from(e.replace(/^0x/i,""),"hex")}var _=i(3023),b=i(6041),y=i(9777),A=i.t(y,2);const{env:w={},argv:x=[],platform:v=""}="undefined"==typeof process?{}:process,E="NO_COLOR"in w||x.includes("--no-color"),M="FORCE_COLOR"in w||x.includes("--color"),z="win32"===v,B="dumb"===w.TERM,F=A&&y.isatty&&y.isatty(1)&&w.TERM&&!B,k=!E&&(M||z&&!B||F||"CI"in w&&("GITHUB_ACTIONS"in w||"GITLAB_CI"in w||"CIRCLECI"in w)),C=(e,t,n,s,i=t.substring(0,e)+s,r=t.substring(e+n.length),a=r.indexOf(n))=>i+(a<0?r:C(a,r,n,s)),O=(e,t,n)=>((e,t,n=e,s=e.length+1)=>i=>i||""!==i&&void 0!==i?((e,t,n,s,i)=>e<0?n+t+s:n+C(e,t,s,i)+s)((""+i).indexOf(t,s),i,e,t,n):"")(`[${e}m`,`[${t}m`,n),D={reset:O(0,0),bold:O(1,22,"[22m[1m"),dim:O(2,22,"[22m[2m"),italic:O(3,23),underline:O(4,24),inverse:O(7,27),hidden:O(8,28),strikethrough:O(9,29),black:O(30,39),red:O(31,39),green:O(32,39),yellow:O(33,39),blue:O(34,39),magenta:O(35,39),cyan:O(36,39),white:O(37,39),gray:O(90,39),bgBlack:O(40,49),bgRed:O(41,49),bgGreen:O(42,49),bgYellow:O(43,49),bgBlue:O(44,49),bgMagenta:O(45,49),bgCyan:O(46,49),bgWhite:O(47,49),blackBright:O(90,39),redBright:O(91,39),greenBright:O(92,39),yellowBright:O(93,39),blueBright:O(94,39),magentaBright:O(95,39),cyanBright:O(96,39),whiteBright:O(97,39),bgBlackBright:O(100,49),bgRedBright:O(101,49),bgGreenBright:O(102,49),bgYellowBright:O(103,49),bgBlueBright:O(104,49),bgMagentaBright:O(105,49),bgCyanBright:O(106,49),bgWhiteBright:O(107,49)},L=({useColor:e=k}={})=>e?D:Object.keys(D).reduce(((e,t)=>({...e,[t]:String})),{}),{reset:T,bold:S,dim:N,italic:P,underline:I,inverse:Y,hidden:Q,strikethrough:j,black:H,red:U,green:R,yellow:G,blue:Z,magenta:J,cyan:X,white:W,gray:V,bgBlack:q,bgRed:K,bgGreen:$,bgYellow:ee,bgBlue:te,bgMagenta:ne,bgCyan:se,bgWhite:ie,blackBright:re,redBright:ae,greenBright:oe,yellowBright:le,blueBright:ce,magentaBright:de,cyanBright:ue,whiteBright:fe,bgBlackBright:he,bgRedBright:pe,bgGreenBright:me,bgYellowBright:ge,bgBlueBright:_e,bgMagentaBright:be,bgCyanBright:ye,bgWhiteBright:Ae}=L();var we=i(8968);function xe(e,t,n,s="Array size exceeds target length"){if(e.length>n)throw new Error(s);return[...e,...Array(n-e.length).fill(t)]}function ve(e,t){return[...Array(e).keys()].map((e=>t(e)))}async function Ee(e,t){return await Promise.all(Array(e).fill(0).map(((e,n)=>t(n))))}function Me(e){return e.filter((e=>e&&("isZero"in e?!e.isZero():!e.isEmpty()))).map((e=>e.toBuffer().length)).reduce(((e,t)=>e+t),0)}function ze(e){return{parseEnv:t=>function(e,t){const n=parseInt(e,10);return Number.isSafeInteger(n)?n:t}(t,e),defaultValue:e}}function Be(e){return{parseEnv:e=>BigInt(e),defaultValue:e}}function Fe(e){return void 0!==e&&["1","true","TRUE"].includes(e)}const ke="logging.googleapis.com/trace",Ce="logging.googleapis.com/spanId",Oe="logging.googleapis.com/trace_sampled",De={messageKey:"message",timestamp:()=>`,"timestamp":"${new Date(Date.now()).toISOString()}"`,formatters:{log(e){const{trace_id:t,span_id:n,trace_flags:s,...i}=e;return t&&n?{[ke]:t,[Ce]:n,[Oe]:s?"01"===s:void 0,trace_flags:s,...i}:e},level(e,t){let n;switch(e){case"trace":case"debug":n="DEBUG";break;case"verbose":case"info":n="INFO";break;case"warn":n="WARNING";break;case"error":n="ERROR";break;case"fatal":n="CRITICAL";break;default:n="DEFAULT"}return{severity:n,level:t}}}},Le=["silent","fatal","error","warn","info","verbose","debug","trace"];function Te(e,t){for(const[n,s]of e)if(t.startsWith(n))return s}function Se(e){if(!Le.includes(e))throw new Error(`Invalid log level: ${e}`)}function Ne(e){if(!e)return[];const t=e.split(";"),n=[];for(const e of t){const[t]=e.split(":",1),s=e.slice(t.length+1);if(!s||!t)throw new Error(`Invalid log filter statement: ${e}`);const i=t.trim().toLowerCase();Se(i);for(const e of s.split(","))n.push([e.trim().toLowerCase().replace(/^aztec:/,""),i])}return n.reverse()}function Pe(e){e=Ye.reduce(((e,t)=>t(e)),e.replace(/^aztec:/,""));const t=tt.child({module:e},{level:Te(He,e)}),n=(e,n,s)=>Qe(t,e)&&t[e](function(e){return Ie.reduce(((e,t)=>t(e)),e)}(s??{}),n);return{silent:()=>{},fatal:(e,t,s)=>n("fatal",nt(e,t),s),error:(e,t,s)=>n("error",nt(e,t),s),warn:(e,t)=>n("warn",e,t),info:(e,t)=>n("info",e,t),verbose:(e,t)=>n("verbose",e,t),debug:(e,t)=>n("debug",e,t),trace:(e,t)=>n("trace",e,t),level:t.level,isLevelEnabled:e=>Qe(t,e),module:e}}const Ie=[],Ye=[];function Qe(e,t){return"function"==typeof e.isLevelEnabled?e.isLevelEnabled(t):e.levels.values[t]>=e.levels.values[e.level]}const[je,He]=function(e,t){if(!e)return["info",[]];const[n]=e.split(";",1);return Se(n),[n,Ne(e.slice(n.length+1))]}({NODE_ENV:"production"}.LOG_LEVEL),Ue={verbose:25},Re=Fe({NODE_ENV:"production"}.USE_GCLOUD_OBSERVABILITY),Ge={customLevels:Ue,messageKey:"msg",useOnlyCustomLevels:!1,level:je,...Re?De:{}},Ze={labels:{...we.pino.levels.labels,...Object.fromEntries(Object.entries(Ue).map((e=>e.reverse())))},values:{...we.pino.levels.values,...Ue}},Je=!0,{bold:Xe,reset:We}=L({useColor:Je}),Ve={target:"pino-pretty",options:{destination:2,sync:!0,colorize:Je,ignore:"module,pid,hostname,trace_id,span_id,trace_flags,severity",messageFormat:`${Xe("{module}")} ${We("{msg}")}`,customLevels:"fatal:60,error:50,warn:40,info:30,verbose:25,debug:20,trace:10",customColors:"fatal:bgRed,error:red,warn:yellow,info:green,verbose:magenta,debug:blue,trace:gray",minimumLevel:"trace",singleLine:!Fe({NODE_ENV:"production"}.LOG_MULTILINE)},level:"trace"},qe={target:"pino/file",options:{destination:2},level:"trace"},Ke={NODE_ENV:"production"}.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT,$e=!!Ke&&!Re,et={target:"@aztec/telemetry-client/otel-pino-stream",options:{levels:Ze},level:"trace"},tt=function(){if(b){if({NODE_ENV:"production"}.JEST_WORKER_ID)return(0,we.pino)(Ge,we.pino.destination(2));{const e=[Fe({NODE_ENV:"production"}.LOG_JSON)?qe:Ve,$e?et:void 0].filter((e=>void 0!==e));return(0,we.pino)(Ge,we.pino.transport({targets:e,levels:Ze.values}))}}return(0,we.pino)({...Ge,browser:{asObject:!1}})}();function nt(e,t){return t?`${e}: ${(0,f.inspect)(t)}`:e}tt.verbose({module:"logger",...He.reduce(((e,[t,n])=>({...e,[`log.${t}`]:n})),{})},b?`Logger initialized with level ${je}`+($e?` with OTLP exporter to ${Ke}`:""):`Browser console logger initialized with level ${je}`);var st=i(8891).Buffer;class it{constructor(e,t=Pe("foundation:randomness_singleton")){this.seed=e,this.log=t,this.counter=0,void 0!==e?(this.log.debug(`Using pseudo-randomness with seed: ${e}`),this.counter=e):this.log.debug("Using true randomness")}static getInstance(){if(!it.instance){const e={NODE_ENV:"production"}.SEED?Number({NODE_ENV:"production"}.SEED):void 0;it.instance=new it(e)}return it.instance}isDeterministic(){return void 0!==this.seed}getBytes(e){if(void 0===this.seed)throw new Error("RandomnessSingleton is not implemented for non-deterministic mode");const t=st.alloc(e);for(let n=0;n<e;n++)t[n]=this.counter>>8*n&255;return this.counter++,t}}var rt=i(8891).Buffer;const at=65536,ot=e=>{const t=it.getInstance();if(t.isDeterministic())return t.getBytes(e);if(b)return _.randomBytes(e);const n="undefined"!=typeof window&&window.crypto?window.crypto:"undefined"!=typeof self&&self.crypto?self.crypto:void 0;if(!n)throw new Error("randomBytes UnsupportedEnvironment");const s=rt.allocUnsafe(e);if(e>at)for(let t=0;t<e;t+=at)n.getRandomValues(s.slice(t,t+at));else n.getRandomValues(s);return s},lt=e=>{const t=ot(6);return parseInt(t.toString("hex"),16)%e};var ct,dt;!function(e){e.assertEqual=e=>e,e.assertIs=function(e){},e.assertNever=function(e){throw new Error},e.arrayToEnum=e=>{const t={};for(const n of e)t[n]=n;return t},e.getValidEnumValues=t=>{const n=e.objectKeys(t).filter((e=>"number"!=typeof t[t[e]])),s={};for(const e of n)s[e]=t[e];return e.objectValues(s)},e.objectValues=t=>e.objectKeys(t).map((function(e){return t[e]})),e.objectKeys="function"==typeof Object.keys?e=>Object.keys(e):e=>{const t=[];for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t},e.find=(e,t)=>{for(const n of e)if(t(n))return n},e.isInteger="function"==typeof Number.isInteger?e=>Number.isInteger(e):e=>"number"==typeof e&&isFinite(e)&&Math.floor(e)===e,e.joinValues=function(e,t=" | "){return e.map((e=>"string"==typeof e?`'${e}'`:e)).join(t)},e.jsonStringifyReplacer=(e,t)=>"bigint"==typeof t?t.toString():t}(ct||(ct={})),function(e){e.mergeShapes=(e,t)=>({...e,...t})}(dt||(dt={}));const ut=ct.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),ft=e=>{switch(typeof e){case"undefined":return ut.undefined;case"string":return ut.string;case"number":return isNaN(e)?ut.nan:ut.number;case"boolean":return ut.boolean;case"function":return ut.function;case"bigint":return ut.bigint;case"symbol":return ut.symbol;case"object":return Array.isArray(e)?ut.array:null===e?ut.null:e.then&&"function"==typeof e.then&&e.catch&&"function"==typeof e.catch?ut.promise:"undefined"!=typeof Map&&e instanceof Map?ut.map:"undefined"!=typeof Set&&e instanceof Set?ut.set:"undefined"!=typeof Date&&e instanceof Date?ut.date:ut.object;default:return ut.unknown}},ht=ct.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class pt extends Error{constructor(e){super(),this.issues=[],this.addIssue=e=>{this.issues=[...this.issues,e]},this.addIssues=(e=[])=>{this.issues=[...this.issues,...e]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){const t=e||function(e){return e.message},n={_errors:[]},s=e=>{for(const i of e.issues)if("invalid_union"===i.code)i.unionErrors.map(s);else if("invalid_return_type"===i.code)s(i.returnTypeError);else if("invalid_arguments"===i.code)s(i.argumentsError);else if(0===i.path.length)n._errors.push(t(i));else{let e=n,s=0;for(;s<i.path.length;){const n=i.path[s];s===i.path.length-1?(e[n]=e[n]||{_errors:[]},e[n]._errors.push(t(i))):e[n]=e[n]||{_errors:[]},e=e[n],s++}}};return s(this),n}static assert(e){if(!(e instanceof pt))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,ct.jsonStringifyReplacer,2)}get isEmpty(){return 0===this.issues.length}flatten(e=(e=>e.message)){const t={},n=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):n.push(e(s));return{formErrors:n,fieldErrors:t}}get formErrors(){return this.flatten()}}pt.create=e=>new pt(e);const mt=(e,t)=>{let n;switch(e.code){case ht.invalid_type:n=e.received===ut.undefined?"Required":`Expected ${e.expected}, received ${e.received}`;break;case ht.invalid_literal:n=`Invalid literal value, expected ${JSON.stringify(e.expected,ct.jsonStringifyReplacer)}`;break;case ht.unrecognized_keys:n=`Unrecognized key(s) in object: ${ct.joinValues(e.keys,", ")}`;break;case ht.invalid_union:n="Invalid input";break;case ht.invalid_union_discriminator:n=`Invalid discriminator value. Expected ${ct.joinValues(e.options)}`;break;case ht.invalid_enum_value:n=`Invalid enum value. Expected ${ct.joinValues(e.options)}, received '${e.received}'`;break;case ht.invalid_arguments:n="Invalid function arguments";break;case ht.invalid_return_type:n="Invalid function return type";break;case ht.invalid_date:n="Invalid date";break;case ht.invalid_string:"object"==typeof e.validation?"includes"in e.validation?(n=`Invalid input: must include "${e.validation.includes}"`,"number"==typeof e.validation.position&&(n=`${n} at one or more positions greater than or equal to ${e.validation.position}`)):"startsWith"in e.validation?n=`Invalid input: must start with "${e.validation.startsWith}"`:"endsWith"in e.validation?n=`Invalid input: must end with "${e.validation.endsWith}"`:ct.assertNever(e.validation):n="regex"!==e.validation?`Invalid ${e.validation}`:"Invalid";break;case ht.too_small:n="array"===e.type?`Array must contain ${e.exact?"exactly":e.inclusive?"at least":"more than"} ${e.minimum} element(s)`:"string"===e.type?`String must contain ${e.exact?"exactly":e.inclusive?"at least":"over"} ${e.minimum} character(s)`:"number"===e.type?`Number must be ${e.exact?"exactly equal to ":e.inclusive?"greater than or equal to ":"greater than "}${e.minimum}`:"date"===e.type?`Date must be ${e.exact?"exactly equal to ":e.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(e.minimum))}`:"Invalid input";break;case ht.too_big:n="array"===e.type?`Array must contain ${e.exact?"exactly":e.inclusive?"at most":"less than"} ${e.maximum} element(s)`:"string"===e.type?`String must contain ${e.exact?"exactly":e.inclusive?"at most":"under"} ${e.maximum} character(s)`:"number"===e.type?`Number must be ${e.exact?"exactly":e.inclusive?"less than or equal to":"less than"} ${e.maximum}`:"bigint"===e.type?`BigInt must be ${e.exact?"exactly":e.inclusive?"less than or equal to":"less than"} ${e.maximum}`:"date"===e.type?`Date must be ${e.exact?"exactly":e.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(e.maximum))}`:"Invalid input";break;case ht.custom:n="Invalid input";break;case ht.invalid_intersection_types:n="Intersection results could not be merged";break;case ht.not_multiple_of:n=`Number must be a multiple of ${e.multipleOf}`;break;case ht.not_finite:n="Number must be finite";break;default:n=t.defaultError,ct.assertNever(e)}return{message:n}};let gt=mt;function _t(){return gt}const bt=e=>{const{data:t,path:n,errorMaps:s,issueData:i}=e,r=[...n,...i.path||[]],a={...i,path:r};if(void 0!==i.message)return{...i,path:r,message:i.message};let o="";const l=s.filter((e=>!!e)).slice().reverse();for(const e of l)o=e(a,{data:t,defaultError:o}).message;return{...i,path:r,message:o}};function yt(e,t){const n=_t(),s=bt({issueData:t,data:e.data,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,n,n===mt?void 0:mt].filter((e=>!!e))});e.common.issues.push(s)}class At{constructor(){this.value="valid"}dirty(){"valid"===this.value&&(this.value="dirty")}abort(){"aborted"!==this.value&&(this.value="aborted")}static mergeArray(e,t){const n=[];for(const s of t){if("aborted"===s.status)return wt;"dirty"===s.status&&e.dirty(),n.push(s.value)}return{status:e.value,value:n}}static async mergeObjectAsync(e,t){const n=[];for(const e of t){const t=await e.key,s=await e.value;n.push({key:t,value:s})}return At.mergeObjectSync(e,n)}static mergeObjectSync(e,t){const n={};for(const s of t){const{key:t,value:i}=s;if("aborted"===t.status)return wt;if("aborted"===i.status)return wt;"dirty"===t.status&&e.dirty(),"dirty"===i.status&&e.dirty(),"__proto__"===t.value||void 0===i.value&&!s.alwaysSet||(n[t.value]=i.value)}return{status:e.value,value:n}}}const wt=Object.freeze({status:"aborted"}),xt=e=>({status:"dirty",value:e}),vt=e=>({status:"valid",value:e}),Et=e=>"aborted"===e.status,Mt=e=>"dirty"===e.status,zt=e=>"valid"===e.status,Bt=e=>"undefined"!=typeof Promise&&e instanceof Promise;function Ft(e,t,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(e):s?s.value:t.get(e)}function kt(e,t,n,s,i){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?i.call(e,n):i?i.value=n:t.set(e,n),n}var Ct,Ot,Dt;"function"==typeof SuppressedError&&SuppressedError,function(e){e.errToObj=e=>"string"==typeof e?{message:e}:e||{},e.toString=e=>"string"==typeof e?e:null==e?void 0:e.message}(Ct||(Ct={}));class Lt{constructor(e,t,n,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=n,this._key=s}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const Tt=(e,t)=>{if(zt(t))return{success:!0,data:t.value};if(!e.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new pt(e.common.issues);return this._error=t,this._error}}};function St(e){if(!e)return{};const{errorMap:t,invalid_type_error:n,required_error:s,description:i}=e;if(t&&(n||s))throw new Error('Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.');return t?{errorMap:t,description:i}:{errorMap:(t,i)=>{var r,a;const{message:o}=e;return"invalid_enum_value"===t.code?{message:null!=o?o:i.defaultError}:void 0===i.data?{message:null!==(r=null!=o?o:s)&&void 0!==r?r:i.defaultError}:"invalid_type"!==t.code?{message:i.defaultError}:{message:null!==(a=null!=o?o:n)&&void 0!==a?a:i.defaultError}},description:i}}class Nt{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return ft(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:ft(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new At,ctx:{common:e.parent.common,data:e.data,parsedType:ft(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(Bt(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const n=this.safeParse(e,t);if(n.success)return n.data;throw n.error}safeParse(e,t){var n;const s={common:{issues:[],async:null!==(n=null==t?void 0:t.async)&&void 0!==n&&n,contextualErrorMap:null==t?void 0:t.errorMap},path:(null==t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:ft(e)},i=this._parseSync({data:e,path:s.path,parent:s});return Tt(s,i)}async parseAsync(e,t){const n=await this.safeParseAsync(e,t);if(n.success)return n.data;throw n.error}async safeParseAsync(e,t){const n={common:{issues:[],contextualErrorMap:null==t?void 0:t.errorMap,async:!0},path:(null==t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:ft(e)},s=this._parse({data:e,path:n.path,parent:n}),i=await(Bt(s)?s:Promise.resolve(s));return Tt(n,i)}refine(e,t){const n=e=>"string"==typeof t||void 0===t?{message:t}:"function"==typeof t?t(e):t;return this._refinement(((t,s)=>{const i=e(t),r=()=>s.addIssue({code:ht.custom,...n(t)});return"undefined"!=typeof Promise&&i instanceof Promise?i.then((e=>!!e||(r(),!1))):!!i||(r(),!1)}))}refinement(e,t){return this._refinement(((n,s)=>!!e(n)||(s.addIssue("function"==typeof t?t(n,s):t),!1)))}_refinement(e){return new On({schema:this,typeName:Un.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return Dn.create(this,this._def)}nullable(){return Ln.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return fn.create(this,this._def)}promise(){return Cn.create(this,this._def)}or(e){return mn.create([this,e],this._def)}and(e){return yn.create(this,e,this._def)}transform(e){return new On({...St(this._def),schema:this,typeName:Un.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t="function"==typeof e?e:()=>e;return new Tn({...St(this._def),innerType:this,defaultValue:t,typeName:Un.ZodDefault})}brand(){return new In({typeName:Un.ZodBranded,type:this,...St(this._def)})}catch(e){const t="function"==typeof e?e:()=>e;return new Sn({...St(this._def),innerType:this,catchValue:t,typeName:Un.ZodCatch})}describe(e){return new(0,this.constructor)({...this._def,description:e})}pipe(e){return Yn.create(this,e)}readonly(){return Qn.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Pt=/^c[^\s-]{8,}$/i,It=/^[0-9a-z]+$/,Yt=/^[0-9A-HJKMNP-TV-Z]{26}$/,Qt=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,jt=/^[a-z0-9_-]{21}$/i,Ht=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,Ut=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;let Rt;const Gt=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,Zt=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,Jt=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,Xt="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",Wt=new RegExp(`^${Xt}$`);function Vt(e){let t="([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";return e.precision?t=`${t}\\.\\d{${e.precision}}`:null==e.precision&&(t=`${t}(\\.\\d+)?`),t}function qt(e){let t=`${Xt}T${Vt(e)}`;const n=[];return n.push(e.local?"Z?":"Z"),e.offset&&n.push("([+-]\\d{2}:?\\d{2})"),t=`${t}(${n.join("|")})`,new RegExp(`^${t}$`)}class Kt extends Nt{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==ut.string){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.string,received:t.parsedType}),wt}const t=new At;let n;for(const r of this._def.checks)if("min"===r.kind)e.data.length<r.value&&(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.too_small,minimum:r.value,type:"string",inclusive:!0,exact:!1,message:r.message}),t.dirty());else if("max"===r.kind)e.data.length>r.value&&(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.too_big,maximum:r.value,type:"string",inclusive:!0,exact:!1,message:r.message}),t.dirty());else if("length"===r.kind){const s=e.data.length>r.value,i=e.data.length<r.value;(s||i)&&(n=this._getOrReturnCtx(e,n),s?yt(n,{code:ht.too_big,maximum:r.value,type:"string",inclusive:!0,exact:!0,message:r.message}):i&&yt(n,{code:ht.too_small,minimum:r.value,type:"string",inclusive:!0,exact:!0,message:r.message}),t.dirty())}else if("email"===r.kind)Ut.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"email",code:ht.invalid_string,message:r.message}),t.dirty());else if("emoji"===r.kind)Rt||(Rt=new RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),Rt.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"emoji",code:ht.invalid_string,message:r.message}),t.dirty());else if("uuid"===r.kind)Qt.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"uuid",code:ht.invalid_string,message:r.message}),t.dirty());else if("nanoid"===r.kind)jt.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"nanoid",code:ht.invalid_string,message:r.message}),t.dirty());else if("cuid"===r.kind)Pt.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"cuid",code:ht.invalid_string,message:r.message}),t.dirty());else if("cuid2"===r.kind)It.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"cuid2",code:ht.invalid_string,message:r.message}),t.dirty());else if("ulid"===r.kind)Yt.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"ulid",code:ht.invalid_string,message:r.message}),t.dirty());else if("url"===r.kind)try{new URL(e.data)}catch(s){n=this._getOrReturnCtx(e,n),yt(n,{validation:"url",code:ht.invalid_string,message:r.message}),t.dirty()}else"regex"===r.kind?(r.regex.lastIndex=0,r.regex.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"regex",code:ht.invalid_string,message:r.message}),t.dirty())):"trim"===r.kind?e.data=e.data.trim():"includes"===r.kind?e.data.includes(r.value,r.position)||(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.invalid_string,validation:{includes:r.value,position:r.position},message:r.message}),t.dirty()):"toLowerCase"===r.kind?e.data=e.data.toLowerCase():"toUpperCase"===r.kind?e.data=e.data.toUpperCase():"startsWith"===r.kind?e.data.startsWith(r.value)||(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.invalid_string,validation:{startsWith:r.value},message:r.message}),t.dirty()):"endsWith"===r.kind?e.data.endsWith(r.value)||(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.invalid_string,validation:{endsWith:r.value},message:r.message}),t.dirty()):"datetime"===r.kind?qt(r).test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.invalid_string,validation:"datetime",message:r.message}),t.dirty()):"date"===r.kind?Wt.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.invalid_string,validation:"date",message:r.message}),t.dirty()):"time"===r.kind?new RegExp(`^${Vt(r)}$`).test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.invalid_string,validation:"time",message:r.message}),t.dirty()):"duration"===r.kind?Ht.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"duration",code:ht.invalid_string,message:r.message}),t.dirty()):"ip"===r.kind?(s=e.data,("v4"!==(i=r.version)&&i||!Gt.test(s))&&("v6"!==i&&i||!Zt.test(s))&&(n=this._getOrReturnCtx(e,n),yt(n,{validation:"ip",code:ht.invalid_string,message:r.message}),t.dirty())):"base64"===r.kind?Jt.test(e.data)||(n=this._getOrReturnCtx(e,n),yt(n,{validation:"base64",code:ht.invalid_string,message:r.message}),t.dirty()):ct.assertNever(r);var s,i;return{status:t.value,value:e.data}}_regex(e,t,n){return this.refinement((t=>e.test(t)),{validation:t,code:ht.invalid_string,...Ct.errToObj(n)})}_addCheck(e){return new Kt({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...Ct.errToObj(e)})}url(e){return this._addCheck({kind:"url",...Ct.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...Ct.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...Ct.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...Ct.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...Ct.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...Ct.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...Ct.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...Ct.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...Ct.errToObj(e)})}datetime(e){var t,n;return"string"==typeof e?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:void 0===(null==e?void 0:e.precision)?null:null==e?void 0:e.precision,offset:null!==(t=null==e?void 0:e.offset)&&void 0!==t&&t,local:null!==(n=null==e?void 0:e.local)&&void 0!==n&&n,...Ct.errToObj(null==e?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return"string"==typeof e?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:void 0===(null==e?void 0:e.precision)?null:null==e?void 0:e.precision,...Ct.errToObj(null==e?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...Ct.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...Ct.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:null==t?void 0:t.position,...Ct.errToObj(null==t?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...Ct.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...Ct.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...Ct.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...Ct.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...Ct.errToObj(t)})}nonempty(e){return this.min(1,Ct.errToObj(e))}trim(){return new Kt({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Kt({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Kt({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find((e=>"datetime"===e.kind))}get isDate(){return!!this._def.checks.find((e=>"date"===e.kind))}get isTime(){return!!this._def.checks.find((e=>"time"===e.kind))}get isDuration(){return!!this._def.checks.find((e=>"duration"===e.kind))}get isEmail(){return!!this._def.checks.find((e=>"email"===e.kind))}get isURL(){return!!this._def.checks.find((e=>"url"===e.kind))}get isEmoji(){return!!this._def.checks.find((e=>"emoji"===e.kind))}get isUUID(){return!!this._def.checks.find((e=>"uuid"===e.kind))}get isNANOID(){return!!this._def.checks.find((e=>"nanoid"===e.kind))}get isCUID(){return!!this._def.checks.find((e=>"cuid"===e.kind))}get isCUID2(){return!!this._def.checks.find((e=>"cuid2"===e.kind))}get isULID(){return!!this._def.checks.find((e=>"ulid"===e.kind))}get isIP(){return!!this._def.checks.find((e=>"ip"===e.kind))}get isBase64(){return!!this._def.checks.find((e=>"base64"===e.kind))}get minLength(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}function $t(e,t){const n=(e.toString().split(".")[1]||"").length,s=(t.toString().split(".")[1]||"").length,i=n>s?n:s;return parseInt(e.toFixed(i).replace(".",""))%parseInt(t.toFixed(i).replace(".",""))/Math.pow(10,i)}Kt.create=e=>{var t;return new Kt({checks:[],typeName:Un.ZodString,coerce:null!==(t=null==e?void 0:e.coerce)&&void 0!==t&&t,...St(e)})};class en extends Nt{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==ut.number){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.number,received:t.parsedType}),wt}let t;const n=new At;for(const s of this._def.checks)"int"===s.kind?ct.isInteger(e.data)||(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.invalid_type,expected:"integer",received:"float",message:s.message}),n.dirty()):"min"===s.kind?(s.inclusive?e.data<s.value:e.data<=s.value)&&(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.too_small,minimum:s.value,type:"number",inclusive:s.inclusive,exact:!1,message:s.message}),n.dirty()):"max"===s.kind?(s.inclusive?e.data>s.value:e.data>=s.value)&&(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.too_big,maximum:s.value,type:"number",inclusive:s.inclusive,exact:!1,message:s.message}),n.dirty()):"multipleOf"===s.kind?0!==$t(e.data,s.value)&&(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.not_multiple_of,multipleOf:s.value,message:s.message}),n.dirty()):"finite"===s.kind?Number.isFinite(e.data)||(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.not_finite,message:s.message}),n.dirty()):ct.assertNever(s);return{status:n.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,Ct.toString(t))}gt(e,t){return this.setLimit("min",e,!1,Ct.toString(t))}lte(e,t){return this.setLimit("max",e,!0,Ct.toString(t))}lt(e,t){return this.setLimit("max",e,!1,Ct.toString(t))}setLimit(e,t,n,s){return new en({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:n,message:Ct.toString(s)}]})}_addCheck(e){return new en({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:Ct.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:Ct.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:Ct.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:Ct.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:Ct.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:Ct.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:Ct.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:Ct.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:Ct.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find((e=>"int"===e.kind||"multipleOf"===e.kind&&ct.isInteger(e.value)))}get isFinite(){let e=null,t=null;for(const n of this._def.checks){if("finite"===n.kind||"int"===n.kind||"multipleOf"===n.kind)return!0;"min"===n.kind?(null===t||n.value>t)&&(t=n.value):"max"===n.kind&&(null===e||n.value<e)&&(e=n.value)}return Number.isFinite(t)&&Number.isFinite(e)}}en.create=e=>new en({checks:[],typeName:Un.ZodNumber,coerce:(null==e?void 0:e.coerce)||!1,...St(e)});class tn extends Nt{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce&&(e.data=BigInt(e.data)),this._getType(e)!==ut.bigint){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.bigint,received:t.parsedType}),wt}let t;const n=new At;for(const s of this._def.checks)"min"===s.kind?(s.inclusive?e.data<s.value:e.data<=s.value)&&(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.too_small,type:"bigint",minimum:s.value,inclusive:s.inclusive,message:s.message}),n.dirty()):"max"===s.kind?(s.inclusive?e.data>s.value:e.data>=s.value)&&(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.too_big,type:"bigint",maximum:s.value,inclusive:s.inclusive,message:s.message}),n.dirty()):"multipleOf"===s.kind?e.data%s.value!==BigInt(0)&&(t=this._getOrReturnCtx(e,t),yt(t,{code:ht.not_multiple_of,multipleOf:s.value,message:s.message}),n.dirty()):ct.assertNever(s);return{status:n.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,Ct.toString(t))}gt(e,t){return this.setLimit("min",e,!1,Ct.toString(t))}lte(e,t){return this.setLimit("max",e,!0,Ct.toString(t))}lt(e,t){return this.setLimit("max",e,!1,Ct.toString(t))}setLimit(e,t,n,s){return new tn({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:n,message:Ct.toString(s)}]})}_addCheck(e){return new tn({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:Ct.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:Ct.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:Ct.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:Ct.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:Ct.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}tn.create=e=>{var t;return new tn({checks:[],typeName:Un.ZodBigInt,coerce:null!==(t=null==e?void 0:e.coerce)&&void 0!==t&&t,...St(e)})};class nn extends Nt{_parse(e){if(this._def.coerce&&(e.data=Boolean(e.data)),this._getType(e)!==ut.boolean){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.boolean,received:t.parsedType}),wt}return vt(e.data)}}nn.create=e=>new nn({typeName:Un.ZodBoolean,coerce:(null==e?void 0:e.coerce)||!1,...St(e)});class sn extends Nt{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==ut.date){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.date,received:t.parsedType}),wt}if(isNaN(e.data.getTime()))return yt(this._getOrReturnCtx(e),{code:ht.invalid_date}),wt;const t=new At;let n;for(const s of this._def.checks)"min"===s.kind?e.data.getTime()<s.value&&(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.too_small,message:s.message,inclusive:!0,exact:!1,minimum:s.value,type:"date"}),t.dirty()):"max"===s.kind?e.data.getTime()>s.value&&(n=this._getOrReturnCtx(e,n),yt(n,{code:ht.too_big,message:s.message,inclusive:!0,exact:!1,maximum:s.value,type:"date"}),t.dirty()):ct.assertNever(s);return{status:t.value,value:new Date(e.data.getTime())}}_addCheck(e){return new sn({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:Ct.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:Ct.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return null!=e?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return null!=e?new Date(e):null}}sn.create=e=>new sn({checks:[],coerce:(null==e?void 0:e.coerce)||!1,typeName:Un.ZodDate,...St(e)});class rn extends Nt{_parse(e){if(this._getType(e)!==ut.symbol){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.symbol,received:t.parsedType}),wt}return vt(e.data)}}rn.create=e=>new rn({typeName:Un.ZodSymbol,...St(e)});class an extends Nt{_parse(e){if(this._getType(e)!==ut.undefined){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.undefined,received:t.parsedType}),wt}return vt(e.data)}}an.create=e=>new an({typeName:Un.ZodUndefined,...St(e)});class on extends Nt{_parse(e){if(this._getType(e)!==ut.null){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.null,received:t.parsedType}),wt}return vt(e.data)}}on.create=e=>new on({typeName:Un.ZodNull,...St(e)});class ln extends Nt{constructor(){super(...arguments),this._any=!0}_parse(e){return vt(e.data)}}ln.create=e=>new ln({typeName:Un.ZodAny,...St(e)});class cn extends Nt{constructor(){super(...arguments),this._unknown=!0}_parse(e){return vt(e.data)}}cn.create=e=>new cn({typeName:Un.ZodUnknown,...St(e)});class dn extends Nt{_parse(e){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.never,received:t.parsedType}),wt}}dn.create=e=>new dn({typeName:Un.ZodNever,...St(e)});class un extends Nt{_parse(e){if(this._getType(e)!==ut.undefined){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.void,received:t.parsedType}),wt}return vt(e.data)}}un.create=e=>new un({typeName:Un.ZodVoid,...St(e)});class fn extends Nt{_parse(e){const{ctx:t,status:n}=this._processInputParams(e),s=this._def;if(t.parsedType!==ut.array)return yt(t,{code:ht.invalid_type,expected:ut.array,received:t.parsedType}),wt;if(null!==s.exactLength){const e=t.data.length>s.exactLength.value,i=t.data.length<s.exactLength.value;(e||i)&&(yt(t,{code:e?ht.too_big:ht.too_small,minimum:i?s.exactLength.value:void 0,maximum:e?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),n.dirty())}if(null!==s.minLength&&t.data.length<s.minLength.value&&(yt(t,{code:ht.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),n.dirty()),null!==s.maxLength&&t.data.length>s.maxLength.value&&(yt(t,{code:ht.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),n.dirty()),t.common.async)return Promise.all([...t.data].map(((e,n)=>s.type._parseAsync(new Lt(t,e,t.path,n))))).then((e=>At.mergeArray(n,e)));const i=[...t.data].map(((e,n)=>s.type._parseSync(new Lt(t,e,t.path,n))));return At.mergeArray(n,i)}get element(){return this._def.type}min(e,t){return new fn({...this._def,minLength:{value:e,message:Ct.toString(t)}})}max(e,t){return new fn({...this._def,maxLength:{value:e,message:Ct.toString(t)}})}length(e,t){return new fn({...this._def,exactLength:{value:e,message:Ct.toString(t)}})}nonempty(e){return this.min(1,e)}}function hn(e){if(e instanceof pn){const t={};for(const n in e.shape){const s=e.shape[n];t[n]=Dn.create(hn(s))}return new pn({...e._def,shape:()=>t})}return e instanceof fn?new fn({...e._def,type:hn(e.element)}):e instanceof Dn?Dn.create(hn(e.unwrap())):e instanceof Ln?Ln.create(hn(e.unwrap())):e instanceof An?An.create(e.items.map((e=>hn(e)))):e}fn.create=(e,t)=>new fn({type:e,minLength:null,maxLength:null,exactLength:null,typeName:Un.ZodArray,...St(t)});class pn extends Nt{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(null!==this._cached)return this._cached;const e=this._def.shape(),t=ct.objectKeys(e);return this._cached={shape:e,keys:t}}_parse(e){if(this._getType(e)!==ut.object){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.object,received:t.parsedType}),wt}const{status:t,ctx:n}=this._processInputParams(e),{shape:s,keys:i}=this._getCached(),r=[];if(!(this._def.catchall instanceof dn&&"strip"===this._def.unknownKeys))for(const e in n.data)i.includes(e)||r.push(e);const a=[];for(const e of i){const t=s[e],i=n.data[e];a.push({key:{status:"valid",value:e},value:t._parse(new Lt(n,i,n.path,e)),alwaysSet:e in n.data})}if(this._def.catchall instanceof dn){const e=this._def.unknownKeys;if("passthrough"===e)for(const e of r)a.push({key:{status:"valid",value:e},value:{status:"valid",value:n.data[e]}});else if("strict"===e)r.length>0&&(yt(n,{code:ht.unrecognized_keys,keys:r}),t.dirty());else if("strip"!==e)throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const e=this._def.catchall;for(const t of r){const s=n.data[t];a.push({key:{status:"valid",value:t},value:e._parse(new Lt(n,s,n.path,t)),alwaysSet:t in n.data})}}return n.common.async?Promise.resolve().then((async()=>{const e=[];for(const t of a){const n=await t.key,s=await t.value;e.push({key:n,value:s,alwaysSet:t.alwaysSet})}return e})).then((e=>At.mergeObjectSync(t,e))):At.mergeObjectSync(t,a)}get shape(){return this._def.shape()}strict(e){return Ct.errToObj,new pn({...this._def,unknownKeys:"strict",...void 0!==e?{errorMap:(t,n)=>{var s,i,r,a;const o=null!==(r=null===(i=(s=this._def).errorMap)||void 0===i?void 0:i.call(s,t,n).message)&&void 0!==r?r:n.defaultError;return"unrecognized_keys"===t.code?{message:null!==(a=Ct.errToObj(e).message)&&void 0!==a?a:o}:{message:o}}}:{}})}strip(){return new pn({...this._def,unknownKeys:"strip"})}passthrough(){return new pn({...this._def,unknownKeys:"passthrough"})}extend(e){return new pn({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new pn({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:Un.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new pn({...this._def,catchall:e})}pick(e){const t={};return ct.objectKeys(e).forEach((n=>{e[n]&&this.shape[n]&&(t[n]=this.shape[n])})),new pn({...this._def,shape:()=>t})}omit(e){const t={};return ct.objectKeys(this.shape).forEach((n=>{e[n]||(t[n]=this.shape[n])})),new pn({...this._def,shape:()=>t})}deepPartial(){return hn(this)}partial(e){const t={};return ct.objectKeys(this.shape).forEach((n=>{const s=this.shape[n];e&&!e[n]?t[n]=s:t[n]=s.optional()})),new pn({...this._def,shape:()=>t})}required(e){const t={};return ct.objectKeys(this.shape).forEach((n=>{if(e&&!e[n])t[n]=this.shape[n];else{let e=this.shape[n];for(;e instanceof Dn;)e=e._def.innerType;t[n]=e}})),new pn({...this._def,shape:()=>t})}keyof(){return Bn(ct.objectKeys(this.shape))}}pn.create=(e,t)=>new pn({shape:()=>e,unknownKeys:"strip",catchall:dn.create(),typeName:Un.ZodObject,...St(t)}),pn.strictCreate=(e,t)=>new pn({shape:()=>e,unknownKeys:"strict",catchall:dn.create(),typeName:Un.ZodObject,...St(t)}),pn.lazycreate=(e,t)=>new pn({shape:e,unknownKeys:"strip",catchall:dn.create(),typeName:Un.ZodObject,...St(t)});class mn extends Nt{_parse(e){const{ctx:t}=this._processInputParams(e),n=this._def.options;if(t.common.async)return Promise.all(n.map((async e=>{const n={...t,common:{...t.common,issues:[]},parent:null};return{result:await e._parseAsync({data:t.data,path:t.path,parent:n}),ctx:n}}))).then((function(e){for(const t of e)if("valid"===t.result.status)return t.result;for(const n of e)if("dirty"===n.result.status)return t.common.issues.push(...n.ctx.common.issues),n.result;const n=e.map((e=>new pt(e.ctx.common.issues)));return yt(t,{code:ht.invalid_union,unionErrors:n}),wt}));{let e;const s=[];for(const i of n){const n={...t,common:{...t.common,issues:[]},parent:null},r=i._parseSync({data:t.data,path:t.path,parent:n});if("valid"===r.status)return r;"dirty"!==r.status||e||(e={result:r,ctx:n}),n.common.issues.length&&s.push(n.common.issues)}if(e)return t.common.issues.push(...e.ctx.common.issues),e.result;const i=s.map((e=>new pt(e)));return yt(t,{code:ht.invalid_union,unionErrors:i}),wt}}get options(){return this._def.options}}mn.create=(e,t)=>new mn({options:e,typeName:Un.ZodUnion,...St(t)});const gn=e=>e instanceof Mn?gn(e.schema):e instanceof On?gn(e.innerType()):e instanceof zn?[e.value]:e instanceof Fn?e.options:e instanceof kn?ct.objectValues(e.enum):e instanceof Tn?gn(e._def.innerType):e instanceof an?[void 0]:e instanceof on?[null]:e instanceof Dn?[void 0,...gn(e.unwrap())]:e instanceof Ln?[null,...gn(e.unwrap())]:e instanceof In||e instanceof Qn?gn(e.unwrap()):e instanceof Sn?gn(e._def.innerType):[];class _n extends Nt{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==ut.object)return yt(t,{code:ht.invalid_type,expected:ut.object,received:t.parsedType}),wt;const n=this.discriminator,s=t.data[n],i=this.optionsMap.get(s);return i?t.common.async?i._parseAsync({data:t.data,path:t.path,parent:t}):i._parseSync({data:t.data,path:t.path,parent:t}):(yt(t,{code:ht.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[n]}),wt)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,n){const s=new Map;for(const n of t){const t=gn(n.shape[e]);if(!t.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const i of t){if(s.has(i))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(i)}`);s.set(i,n)}}return new _n({typeName:Un.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...St(n)})}}function bn(e,t){const n=ft(e),s=ft(t);if(e===t)return{valid:!0,data:e};if(n===ut.object&&s===ut.object){const n=ct.objectKeys(t),s=ct.objectKeys(e).filter((e=>-1!==n.indexOf(e))),i={...e,...t};for(const n of s){const s=bn(e[n],t[n]);if(!s.valid)return{valid:!1};i[n]=s.data}return{valid:!0,data:i}}if(n===ut.array&&s===ut.array){if(e.length!==t.length)return{valid:!1};const n=[];for(let s=0;s<e.length;s++){const i=bn(e[s],t[s]);if(!i.valid)return{valid:!1};n.push(i.data)}return{valid:!0,data:n}}return n===ut.date&&s===ut.date&&+e==+t?{valid:!0,data:e}:{valid:!1}}class yn extends Nt{_parse(e){const{status:t,ctx:n}=this._processInputParams(e),s=(e,s)=>{if(Et(e)||Et(s))return wt;const i=bn(e.value,s.value);return i.valid?((Mt(e)||Mt(s))&&t.dirty(),{status:t.value,value:i.data}):(yt(n,{code:ht.invalid_intersection_types}),wt)};return n.common.async?Promise.all([this._def.left._parseAsync({data:n.data,path:n.path,parent:n}),this._def.right._parseAsync({data:n.data,path:n.path,parent:n})]).then((([e,t])=>s(e,t))):s(this._def.left._parseSync({data:n.data,path:n.path,parent:n}),this._def.right._parseSync({data:n.data,path:n.path,parent:n}))}}yn.create=(e,t,n)=>new yn({left:e,right:t,typeName:Un.ZodIntersection,...St(n)});class An extends Nt{_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==ut.array)return yt(n,{code:ht.invalid_type,expected:ut.array,received:n.parsedType}),wt;if(n.data.length<this._def.items.length)return yt(n,{code:ht.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),wt;!this._def.rest&&n.data.length>this._def.items.length&&(yt(n,{code:ht.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const s=[...n.data].map(((e,t)=>{const s=this._def.items[t]||this._def.rest;return s?s._parse(new Lt(n,e,n.path,t)):null})).filter((e=>!!e));return n.common.async?Promise.all(s).then((e=>At.mergeArray(t,e))):At.mergeArray(t,s)}get items(){return this._def.items}rest(e){return new An({...this._def,rest:e})}}An.create=(e,t)=>{if(!Array.isArray(e))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new An({items:e,typeName:Un.ZodTuple,rest:null,...St(t)})};class wn extends Nt{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==ut.object)return yt(n,{code:ht.invalid_type,expected:ut.object,received:n.parsedType}),wt;const s=[],i=this._def.keyType,r=this._def.valueType;for(const e in n.data)s.push({key:i._parse(new Lt(n,e,n.path,e)),value:r._parse(new Lt(n,n.data[e],n.path,e)),alwaysSet:e in n.data});return n.common.async?At.mergeObjectAsync(t,s):At.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,n){return new wn(t instanceof Nt?{keyType:e,valueType:t,typeName:Un.ZodRecord,...St(n)}:{keyType:Kt.create(),valueType:e,typeName:Un.ZodRecord,...St(t)})}}class xn extends Nt{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==ut.map)return yt(n,{code:ht.invalid_type,expected:ut.map,received:n.parsedType}),wt;const s=this._def.keyType,i=this._def.valueType,r=[...n.data.entries()].map((([e,t],r)=>({key:s._parse(new Lt(n,e,n.path,[r,"key"])),value:i._parse(new Lt(n,t,n.path,[r,"value"]))})));if(n.common.async){const e=new Map;return Promise.resolve().then((async()=>{for(const n of r){const s=await n.key,i=await n.value;if("aborted"===s.status||"aborted"===i.status)return wt;"dirty"!==s.status&&"dirty"!==i.status||t.dirty(),e.set(s.value,i.value)}return{status:t.value,value:e}}))}{const e=new Map;for(const n of r){const s=n.key,i=n.value;if("aborted"===s.status||"aborted"===i.status)return wt;"dirty"!==s.status&&"dirty"!==i.status||t.dirty(),e.set(s.value,i.value)}return{status:t.value,value:e}}}}xn.create=(e,t,n)=>new xn({valueType:t,keyType:e,typeName:Un.ZodMap,...St(n)});class vn extends Nt{_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==ut.set)return yt(n,{code:ht.invalid_type,expected:ut.set,received:n.parsedType}),wt;const s=this._def;null!==s.minSize&&n.data.size<s.minSize.value&&(yt(n,{code:ht.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),null!==s.maxSize&&n.data.size>s.maxSize.value&&(yt(n,{code:ht.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const i=this._def.valueType;function r(e){const n=new Set;for(const s of e){if("aborted"===s.status)return wt;"dirty"===s.status&&t.dirty(),n.add(s.value)}return{status:t.value,value:n}}const a=[...n.data.values()].map(((e,t)=>i._parse(new Lt(n,e,n.path,t))));return n.common.async?Promise.all(a).then((e=>r(e))):r(a)}min(e,t){return new vn({...this._def,minSize:{value:e,message:Ct.toString(t)}})}max(e,t){return new vn({...this._def,maxSize:{value:e,message:Ct.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}vn.create=(e,t)=>new vn({valueType:e,minSize:null,maxSize:null,typeName:Un.ZodSet,...St(t)});class En extends Nt{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==ut.function)return yt(t,{code:ht.invalid_type,expected:ut.function,received:t.parsedType}),wt;function n(e,n){return bt({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,_t(),mt].filter((e=>!!e)),issueData:{code:ht.invalid_arguments,argumentsError:n}})}function s(e,n){return bt({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,_t(),mt].filter((e=>!!e)),issueData:{code:ht.invalid_return_type,returnTypeError:n}})}const i={errorMap:t.common.contextualErrorMap},r=t.data;if(this._def.returns instanceof Cn){const e=this;return vt((async function(...t){const a=new pt([]),o=await e._def.args.parseAsync(t,i).catch((e=>{throw a.addIssue(n(t,e)),a})),l=await Reflect.apply(r,this,o);return await e._def.returns._def.type.parseAsync(l,i).catch((e=>{throw a.addIssue(s(l,e)),a}))}))}{const e=this;return vt((function(...t){const a=e._def.args.safeParse(t,i);if(!a.success)throw new pt([n(t,a.error)]);const o=Reflect.apply(r,this,a.data),l=e._def.returns.safeParse(o,i);if(!l.success)throw new pt([s(o,l.error)]);return l.data}))}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new En({...this._def,args:An.create(e).rest(cn.create())})}returns(e){return new En({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,t,n){return new En({args:e||An.create([]).rest(cn.create()),returns:t||cn.create(),typeName:Un.ZodFunction,...St(n)})}}class Mn extends Nt{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}Mn.create=(e,t)=>new Mn({getter:e,typeName:Un.ZodLazy,...St(t)});class zn extends Nt{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return yt(t,{received:t.data,code:ht.invalid_literal,expected:this._def.value}),wt}return{status:"valid",value:e.data}}get value(){return this._def.value}}function Bn(e,t){return new Fn({values:e,typeName:Un.ZodEnum,...St(t)})}zn.create=(e,t)=>new zn({value:e,typeName:Un.ZodLiteral,...St(t)});class Fn extends Nt{constructor(){super(...arguments),Ot.set(this,void 0)}_parse(e){if("string"!=typeof e.data){const t=this._getOrReturnCtx(e),n=this._def.values;return yt(t,{expected:ct.joinValues(n),received:t.parsedType,code:ht.invalid_type}),wt}if(Ft(this,Ot,"f")||kt(this,Ot,new Set(this._def.values),"f"),!Ft(this,Ot,"f").has(e.data)){const t=this._getOrReturnCtx(e),n=this._def.values;return yt(t,{received:t.data,code:ht.invalid_enum_value,options:n}),wt}return vt(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return Fn.create(e,{...this._def,...t})}exclude(e,t=this._def){return Fn.create(this.options.filter((t=>!e.includes(t))),{...this._def,...t})}}Ot=new WeakMap,Fn.create=Bn;class kn extends Nt{constructor(){super(...arguments),Dt.set(this,void 0)}_parse(e){const t=ct.getValidEnumValues(this._def.values),n=this._getOrReturnCtx(e);if(n.parsedType!==ut.string&&n.parsedType!==ut.number){const e=ct.objectValues(t);return yt(n,{expected:ct.joinValues(e),received:n.parsedType,code:ht.invalid_type}),wt}if(Ft(this,Dt,"f")||kt(this,Dt,new Set(ct.getValidEnumValues(this._def.values)),"f"),!Ft(this,Dt,"f").has(e.data)){const e=ct.objectValues(t);return yt(n,{received:n.data,code:ht.invalid_enum_value,options:e}),wt}return vt(e.data)}get enum(){return this._def.values}}Dt=new WeakMap,kn.create=(e,t)=>new kn({values:e,typeName:Un.ZodNativeEnum,...St(t)});class Cn extends Nt{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==ut.promise&&!1===t.common.async)return yt(t,{code:ht.invalid_type,expected:ut.promise,received:t.parsedType}),wt;const n=t.parsedType===ut.promise?t.data:Promise.resolve(t.data);return vt(n.then((e=>this._def.type.parseAsync(e,{path:t.path,errorMap:t.common.contextualErrorMap}))))}}Cn.create=(e,t)=>new Cn({type:e,typeName:Un.ZodPromise,...St(t)});class On extends Nt{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===Un.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:n}=this._processInputParams(e),s=this._def.effect||null,i={addIssue:e=>{yt(n,e),e.fatal?t.abort():t.dirty()},get path(){return n.path}};if(i.addIssue=i.addIssue.bind(i),"preprocess"===s.type){const e=s.transform(n.data,i);if(n.common.async)return Promise.resolve(e).then((async e=>{if("aborted"===t.value)return wt;const s=await this._def.schema._parseAsync({data:e,path:n.path,parent:n});return"aborted"===s.status?wt:"dirty"===s.status||"dirty"===t.value?xt(s.value):s}));{if("aborted"===t.value)return wt;const s=this._def.schema._parseSync({data:e,path:n.path,parent:n});return"aborted"===s.status?wt:"dirty"===s.status||"dirty"===t.value?xt(s.value):s}}if("refinement"===s.type){const e=e=>{const t=s.refinement(e,i);if(n.common.async)return Promise.resolve(t);if(t instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return e};if(!1===n.common.async){const s=this._def.schema._parseSync({data:n.data,path:n.path,parent:n});return"aborted"===s.status?wt:("dirty"===s.status&&t.dirty(),e(s.value),{status:t.value,value:s.value})}return this._def.schema._parseAsync({data:n.data,path:n.path,parent:n}).then((n=>"aborted"===n.status?wt:("dirty"===n.status&&t.dirty(),e(n.value).then((()=>({status:t.value,value:n.value}))))))}if("transform"===s.type){if(!1===n.common.async){const e=this._def.schema._parseSync({data:n.data,path:n.path,parent:n});if(!zt(e))return e;const r=s.transform(e.value,i);if(r instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:r}}return this._def.schema._parseAsync({data:n.data,path:n.path,parent:n}).then((e=>zt(e)?Promise.resolve(s.transform(e.value,i)).then((e=>({status:t.value,value:e}))):e))}ct.assertNever(s)}}On.create=(e,t,n)=>new On({schema:e,typeName:Un.ZodEffects,effect:t,...St(n)}),On.createWithPreprocess=(e,t,n)=>new On({schema:t,effect:{type:"preprocess",transform:e},typeName:Un.ZodEffects,...St(n)});class Dn extends Nt{_parse(e){return this._getType(e)===ut.undefined?vt(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Dn.create=(e,t)=>new Dn({innerType:e,typeName:Un.ZodOptional,...St(t)});class Ln extends Nt{_parse(e){return this._getType(e)===ut.null?vt(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Ln.create=(e,t)=>new Ln({innerType:e,typeName:Un.ZodNullable,...St(t)});class Tn extends Nt{_parse(e){const{ctx:t}=this._processInputParams(e);let n=t.data;return t.parsedType===ut.undefined&&(n=this._def.defaultValue()),this._def.innerType._parse({data:n,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Tn.create=(e,t)=>new Tn({innerType:e,typeName:Un.ZodDefault,defaultValue:"function"==typeof t.default?t.default:()=>t.default,...St(t)});class Sn extends Nt{_parse(e){const{ctx:t}=this._processInputParams(e),n={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:n.data,path:n.path,parent:{...n}});return Bt(s)?s.then((e=>({status:"valid",value:"valid"===e.status?e.value:this._def.catchValue({get error(){return new pt(n.common.issues)},input:n.data})}))):{status:"valid",value:"valid"===s.status?s.value:this._def.catchValue({get error(){return new pt(n.common.issues)},input:n.data})}}removeCatch(){return this._def.innerType}}Sn.create=(e,t)=>new Sn({innerType:e,typeName:Un.ZodCatch,catchValue:"function"==typeof t.catch?t.catch:()=>t.catch,...St(t)});class Nn extends Nt{_parse(e){if(this._getType(e)!==ut.nan){const t=this._getOrReturnCtx(e);return yt(t,{code:ht.invalid_type,expected:ut.nan,received:t.parsedType}),wt}return{status:"valid",value:e.data}}}Nn.create=e=>new Nn({typeName:Un.ZodNaN,...St(e)});const Pn=Symbol("zod_brand");class In extends Nt{_parse(e){const{ctx:t}=this._processInputParams(e),n=t.data;return this._def.type._parse({data:n,path:t.path,parent:t})}unwrap(){return this._def.type}}class Yn extends Nt{_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.common.async)return(async()=>{const e=await this._def.in._parseAsync({data:n.data,path:n.path,parent:n});return"aborted"===e.status?wt:"dirty"===e.status?(t.dirty(),xt(e.value)):this._def.out._parseAsync({data:e.value,path:n.path,parent:n})})();{const e=this._def.in._parseSync({data:n.data,path:n.path,parent:n});return"aborted"===e.status?wt:"dirty"===e.status?(t.dirty(),{status:"dirty",value:e.value}):this._def.out._parseSync({data:e.value,path:n.path,parent:n})}}static create(e,t){return new Yn({in:e,out:t,typeName:Un.ZodPipeline})}}class Qn extends Nt{_parse(e){const t=this._def.innerType._parse(e),n=e=>(zt(e)&&(e.value=Object.freeze(e.value)),e);return Bt(t)?t.then((e=>n(e))):n(t)}unwrap(){return this._def.innerType}}function jn(e,t={},n){return e?ln.create().superRefine(((s,i)=>{var r,a;if(!e(s)){const e="function"==typeof t?t(s):"string"==typeof t?{message:t}:t,o=null===(a=null!==(r=e.fatal)&&void 0!==r?r:n)||void 0===a||a,l="string"==typeof e?{message:e}:e;i.addIssue({code:"custom",...l,fatal:o})}})):ln.create()}Qn.create=(e,t)=>new Qn({innerType:e,typeName:Un.ZodReadonly,...St(t)});const Hn={object:pn.lazycreate};var Un;!function(e){e.ZodString="ZodString",e.ZodNumber="ZodNumber",e.ZodNaN="ZodNaN",e.ZodBigInt="ZodBigInt",e.ZodBoolean="ZodBoolean",e.ZodDate="ZodDate",e.ZodSymbol="ZodSymbol",e.ZodUndefined="ZodUndefined",e.ZodNull="ZodNull",e.ZodAny="ZodAny",e.ZodUnknown="ZodUnknown",e.ZodNever="ZodNever",e.ZodVoid="ZodVoid",e.ZodArray="ZodArray",e.ZodObject="ZodObject",e.ZodUnion="ZodUnion",e.ZodDiscriminatedUnion="ZodDiscriminatedUnion",e.ZodIntersection="ZodIntersection",e.ZodTuple="ZodTuple",e.ZodRecord="ZodRecord",e.ZodMap="ZodMap",e.ZodSet="ZodSet",e.ZodFunction="ZodFunction",e.ZodLazy="ZodLazy",e.ZodLiteral="ZodLiteral",e.ZodEnum="ZodEnum",e.ZodEffects="ZodEffects",e.ZodNativeEnum="ZodNativeEnum",e.ZodOptional="ZodOptional",e.ZodNullable="ZodNullable",e.ZodDefault="ZodDefault",e.ZodCatch="ZodCatch",e.ZodPromise="ZodPromise",e.ZodBranded="ZodBranded",e.ZodPipeline="ZodPipeline",e.ZodReadonly="ZodReadonly"}(Un||(Un={}));const Rn=Kt.create,Gn=en.create,Zn=Nn.create,Jn=tn.create,Xn=nn.create,Wn=sn.create,Vn=rn.create,qn=an.create,Kn=on.create,$n=ln.create,es=cn.create,ts=dn.create,ns=un.create,ss=fn.create,is=pn.create,rs=pn.strictCreate,as=mn.create,os=_n.create,ls=yn.create,cs=An.create,ds=wn.create,us=xn.create,fs=vn.create,hs=En.create,ps=Mn.create,ms=zn.create,gs=Fn.create,_s=kn.create,bs=Cn.create,ys=On.create,As=Dn.create,ws=Ln.create,xs=On.createWithPreprocess,vs=Yn.create,Es={string:e=>Kt.create({...e,coerce:!0}),number:e=>en.create({...e,coerce:!0}),boolean:e=>nn.create({...e,coerce:!0}),bigint:e=>tn.create({...e,coerce:!0}),date:e=>sn.create({...e,coerce:!0})},Ms=wt;var zs=Object.freeze({__proto__:null,defaultErrorMap:mt,setErrorMap:function(e){gt=e},getErrorMap:_t,makeIssue:bt,EMPTY_PATH:[],addIssueToContext:yt,ParseStatus:At,INVALID:wt,DIRTY:xt,OK:vt,isAborted:Et,isDirty:Mt,isValid:zt,isAsync:Bt,get util(){return ct},get objectUtil(){return dt},ZodParsedType:ut,getParsedType:ft,ZodType:Nt,datetimeRegex:qt,ZodString:Kt,ZodNumber:en,ZodBigInt:tn,ZodBoolean:nn,ZodDate:sn,ZodSymbol:rn,ZodUndefined:an,ZodNull:on,ZodAny:ln,ZodUnknown:cn,ZodNever:dn,ZodVoid:un,ZodArray:fn,ZodObject:pn,ZodUnion:mn,ZodDiscriminatedUnion:_n,ZodIntersection:yn,ZodTuple:An,ZodRecord:wn,ZodMap:xn,ZodSet:vn,ZodFunction:En,ZodLazy:Mn,ZodLiteral:zn,ZodEnum:Fn,ZodNativeEnum:kn,ZodPromise:Cn,ZodEffects:On,ZodTransformer:On,ZodOptional:Dn,ZodNullable:Ln,ZodDefault:Tn,ZodCatch:Sn,ZodNaN:Nn,BRAND:Pn,ZodBranded:In,ZodPipeline:Yn,ZodReadonly:Qn,custom:jn,Schema:Nt,ZodSchema:Nt,late:Hn,get ZodFirstPartyTypeKind(){return Un},coerce:Es,any:$n,array:ss,bigint:Jn,boolean:Xn,date:Wn,discriminatedUnion:os,effect:ys,enum:gs,function:hs,instanceof:(e,t={message:`Input not instance of ${e.name}`})=>jn((t=>t instanceof e),t),intersection:ls,lazy:ps,literal:ms,map:us,nan:Zn,nativeEnum:_s,never:ts,null:Kn,nullable:ws,number:Gn,object:is,oboolean:()=>Xn().optional(),onumber:()=>Gn().optional(),optional:As,ostring:()=>Rn().optional(),pipeline:vs,preprocess:xs,promise:bs,record:ds,set:fs,strictObject:rs,string:Rn,symbol:Vn,transformer:ys,tuple:cs,undefined:qn,union:as,unknown:es,void:ns,NEVER:Ms,ZodIssueCode:ht,quotelessJson:e=>JSON.stringify(e,null,2).replace(/"([^"]+)":/g,"$1:"),ZodError:pt}),Bs=i(8891).Buffer;function Fs(e){return e.startsWith("0x")}function ks(e){return Fs(e)?e.slice(2):e}function Cs(e){return/^(0x)?[0-9a-fA-F]*$/.test(e)}function Os(e){return Bs.from(ks(e),"hex")}function Ds(e){return`0x${e.toString("hex")}`}var Ls=i(8891).Buffer;const Ts=zs.string().refine(Cs,"Not a valid hex string").transform(ks),Ss=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,Ns=zs.string().refine((e=>e.length>1024||Ss.test(e)),"Not a valid base64 string").transform((e=>Ls.from(e,"base64")));class Ps extends Dn{constructor(){super(...arguments),this._isNullableOptional=!0}_parse(e){const t=this._getType(e);return t===ut.undefined||t===ut.null?vt(void 0):this._def.innerType._parse(e)}static create(e){return new Ps({innerType:e,typeName:Un.ZodOptional})}}function Is(e){return Ps.create(e)}function Ys(e,t){const n=(t?zs.string().refine(t,"Not a valid instance"):zs.string()).refine(Cs,"Not a valid hex string");return"fromString"in e?n.transform(e.fromString.bind(e)):n.transform((e=>Ls.from(ks(e),"hex"))).transform(e.fromBuffer.bind(e))}function Qs(e){return Ns.transform(e.fromBuffer.bind(e))}function js(e,t){return zs.array(zs.tuple([e,t])).transform((e=>new Map(e)))}function Hs(e,t,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(e):s?s.value:t.get(e)}function Us(e,t,n,s,i){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?i.call(e,n):i?i.value=n:t.set(e,n),n}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var Rs,Gs,Zs=i(8891).Buffer;class Js{constructor(e,t=0){Rs.add(this),this.buffer=e,this.index=t}static asReader(e){if(e instanceof Js)return e;const t=Zs.isBuffer(e)?e:Zs.from(e.buffer,e.byteOffset,e.byteLength);return new Js(t)}isEmpty(){return this.index===this.buffer.length}readNumber(){return Hs(this,Rs,"m",Gs).call(this,4),this.index+=4,this.buffer.readUint32BE(this.index-4)}readNumbers(e){return Array.from({length:e},(()=>this.readNumber()))}readUInt256(){Hs(this,Rs,"m",Gs).call(this,32);let e=BigInt(0);for(let t=0;t<32;t++)e=e<<BigInt(8)|BigInt(this.buffer[this.index+t]);return this.index+=32,e}readUInt16(){return Hs(this,Rs,"m",Gs).call(this,2),this.index+=2,this.buffer.readUInt16BE(this.index-2)}readUInt8(){return Hs(this,Rs,"m",Gs).call(this,1),this.index+=1,this.buffer.readUInt8(this.index-1)}readBoolean(){return Hs(this,Rs,"m",Gs).call(this,1),this.index+=1,Boolean(this.buffer.at(this.index-1))}readBytes(e){return Hs(this,Rs,"m",Gs).call(this,e),this.index+=e,Zs.from(this.buffer.subarray(this.index-e,this.index))}readToEnd(){const e=this.buffer.subarray(this.index);return this.index=this.buffer.length,e}readNumberVector(){return this.readVector({fromBuffer:e=>e.readNumber()})}readVector(e){const t=this.readNumber(),n=new Array(t);for(let s=0;s<t;s++)n[s]=e.fromBuffer(this);return n}readVectorUint8Prefix(e){const t=this.readUInt8(),n=new Array(t);for(let s=0;s<t;s++)n[s]=e.fromBuffer(this);return n}readArray(e,t){return Array.from({length:e},(()=>t.fromBuffer(this)))}readBufferArray(e=-1){const t=[],n=e>=0?this.index+e:this.buffer.length;for(Hs(this,Rs,"m",Gs).call(this,n-this.index);this.index<n;){const e=this.readBuffer();t.push(e)}if(this.index!==n)throw new Error(`Reader buffer was not fully consumed. Consumed up to ${this.index} bytes. End of data: ${n} bytes.`);return t}readObject(e){return e.fromBuffer(this)}peekBytes(e){return Hs(this,Rs,"m",Gs).call(this,e||0),this.buffer.subarray(this.index,e?this.index+e:void 0)}readString(){return this.readBuffer().toString()}readBuffer(){const e=this.readNumber();return Hs(this,Rs,"m",Gs).call(this,e),this.readBytes(e)}readUint8Array(){const e=this.readNumber();return Hs(this,Rs,"m",Gs).call(this,e),this.readBytes(e)}readMap(e){const t=this.readNumber(),n={};for(let s=0;s<t;s++){const t=this.readString(),s=this.readObject(e);n[t]=s}return n}getLength(){return this.buffer.length}remainingBytes(){return this.buffer.length-this.index}}Rs=new WeakSet,Gs=function(e){if(this.index+e>this.buffer.length)throw new Error(`Attempted to read beyond buffer length. Start index: ${this.index}, Num bytes to read: ${e}, Buffer length: ${this.buffer.length}`)},i(8891).Buffer;class Xs{static register(e,t){this.registry.set(e,t)}static getConstructor(e){return this.registry.get(e)}}Xs.registry=new Map;var Ws,Vs=i(8891).Buffer;const qs=Vs.alloc(32);class Ks{get value(){return this.toBigInt()}get size(){return Ks.SIZE_IN_BYTES}constructor(e){if(Vs.isBuffer(e)){if(e.length>Ks.SIZE_IN_BYTES)throw new Error(`Value length ${e.length} exceeds ${Ks.SIZE_IN_BYTES}`);this.asBuffer=e.length===Ks.SIZE_IN_BYTES?e:Vs.concat([Vs.alloc(Ks.SIZE_IN_BYTES-e.length),e])}else if("bigint"==typeof e||"number"==typeof e||"boolean"==typeof e){if(this.asBigInt=BigInt(e),this.asBigInt>=this.modulus())throw new Error(`Value 0x${this.asBigInt.toString(16)} is greater or equal to field modulus.`)}else{if(!(e instanceof Ks))throw new Error(`Type '${typeof e}' with value '${e}' passed to BaseField ctor.`);this.asBuffer=e.asBuffer,this.asBigInt=e.asBigInt}}toBuffer(){return this.asBuffer||(this.asBuffer=m(this.asBigInt,32)),Vs.from(this.asBuffer)}toString(){return`0x${this.toBuffer().toString("hex")}`}toBigInt(){if(void 0===this.asBigInt&&(this.asBigInt=p(this.asBuffer),this.asBigInt>=this.modulus()))throw new Error(`Value 0x${this.asBigInt.toString(16)} is greater or equal to field modulus.`);return this.asBigInt}toBool(){return Boolean(this.toBigInt())}toNumber(){const e=this.toBigInt();if(e>Number.MAX_SAFE_INTEGER)throw new Error(`Value ${e.toString(16)} greater than than max safe integer`);return Number(e)}toNumberUnsafe(){const e=this.toBigInt();return Number(e)}toShortString(){const e=this.toString();return`${e.slice(0,10)}...${e.slice(-4)}`}equals(e){return this.toBuffer().equals(e.toBuffer())}lt(e){return this.toBigInt()<e.toBigInt()}cmp(e){const t=this.toBigInt(),n=e.toBigInt();return t===n?0:t<n?-1:1}isZero(){return this.toBuffer().equals(qs)}isEmpty(){return this.isZero()}toFriendlyJSON(){return this.toString()}toField(){return this}}function $s(e,t){return new t(Js.asReader(e).readBytes(Ks.SIZE_IN_BYTES))}function ei(e,t){return new t(p(e)%t.MODULUS)}function ti(e){return ei(ot(64),e)}function ni(e,t){const n=e.replace(/^0x/i,""),s=n.match(/^[0-9A-F]+$/i)?.[0];if(void 0===s)throw new Error(`Invalid hex-encoded string: "${e}"`);return new t(Vs.from(s.length%2==1?"0"+s:s,"hex"))}Ks.SIZE_IN_BYTES=32;class si extends Ks{constructor(e){super(e)}[f.inspect.custom](){return`Fr<${this.toString()}>`}modulus(){return Ws.MODULUS}static random(){return ti(Ws)}static zero(){return Ws.ZERO}static isZero(e){return e.isZero()}static fromBuffer(e){return $s(e,Ws)}static fromBufferReduce(e){return ei(e,Ws)}static fromString(e){if(null!==e.match(/^\d+$/))return new Ws(m(BigInt(e),32));if(null!==e.match(/^0x/i))return ni(e,Ws);throw new Error("Tried to create a Fr from an invalid string")}static fromHexString(e){return ni(e,Ws)}add(e){return new Ws((this.toBigInt()+e.toBigInt())%Ws.MODULUS)}square(){return new Ws(this.toBigInt()*this.toBigInt()%Ws.MODULUS)}negate(){return new Ws(Ws.MODULUS-this.toBigInt())}sub(e){const t=this.toBigInt()-e.toBigInt();return new Ws(t<0?t+Ws.MODULUS:t)}mul(e){return new Ws(this.toBigInt()*e.toBigInt()%Ws.MODULUS)}div(e){if(e.isZero())throw new Error("Division by zero");const t=function(e){const[t,n,s]=ri(e,si.MODULUS);if(1n!=t)throw Error("Inverse does not exist");return new si(n>0?n:n+si.MODULUS)}(e.toBigInt());return this.mul(t)}ediv(e){if(e.isZero())throw new Error("Division by zero");return new Ws(this.toBigInt()/e.toBigInt())}async sqrt(){const e=(await c.initSingleton()).getWasm(),[t]=e.callWasmExport("bn254_fr_sqrt",[this.toBuffer()],[Ws.SIZE_IN_BYTES+1]);return 1===t[0]?new Ws(Vs.from(t.slice(1))):null}toJSON(){return this.toString()}static get schema(){return Ys(Ws)}}Ws=si,si.ZERO=new Ws(0n),si.ONE=new Ws(1n),si.MODULUS=0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001n,si.MAX_FIELD_VALUE=new Ws(Ws.MODULUS-1n),Xs.register("Fr",si);class ii extends Ks{[f.inspect.custom](){return`Fq<${this.toString()}>`}get lo(){return new si(this.toBigInt()&ii.LOW_MASK)}get hi(){return new si(this.toBigInt()>>ii.HIGH_SHIFT)}constructor(e){super(e)}modulus(){return ii.MODULUS}static random(){return ti(ii)}static zero(){return ii.ZERO}static fromBuffer(e){return $s(e,ii)}static fromBufferReduce(e){return ei(e,ii)}static fromString(e){if(null!==e.match(/^\d+$/))return new ii(m(BigInt(e),32));if(null!==e.match(/^0x/i))return ni(e,ii);throw new Error("Tried to create a Fq from an invalid string")}static fromHexString(e){return ni(e,ii)}static fromHighLow(e,t){return new ii((e.toBigInt()<<ii.HIGH_SHIFT)+t.toBigInt())}add(e){return new ii((this.toBigInt()+e.toBigInt())%ii.MODULUS)}toJSON(){return this.toString()}static get schema(){return Ys(ii)}}function ri(e,t){if(0n==e)return[t,0n,1n];{const[n,s,i]=ri(t%e,e);return[n,i-t/e*s,s]}}ii.ZERO=new ii(0n),ii.MODULUS=0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47n,ii.HIGH_SHIFT=BigInt(Ks.SIZE_IN_BYTES/2*8),ii.LOW_MASK=(1n<<ii.HIGH_SHIFT)-1n,Xs.register("Fq",ii);const ai=ii;var oi=i(8891).Buffer;function li(e,t=4){const n=oi.alloc(t);return n.writeUInt32BE(e,t-4),n}function ci(e,t=4){const n=oi.alloc(t);return n.writeInt32BE(e,t-4),n}function di(e){const t=oi.alloc(1);return t.writeUInt8(e,0),t}function ui(e){const t=oi.alloc(4);return t.writeUInt32BE(e.length,0),oi.concat([t,e])}var fi=i(8891).Buffer;function hi(e,t=4){const n=mi(e);let s;if(1===t)s=fi.alloc(1),s.writeUInt8(n.length,0);else{if(4!==t)throw new Error(`Unsupported prefix length. Got ${t}, expected 1 or 4`);s=fi.alloc(4),s.writeUInt32BE(n.length,0)}return fi.concat([s,...n])}function pi(e,t=1){const n=fi.alloc(t);return n.writeUInt8(e?1:0,t-1),n}function mi(...e){const t=[];for(const n of e)if(Array.isArray(n))t.push(...mi(...n));else if(fi.isBuffer(n))t.push(n);else if("boolean"==typeof n)t.push(pi(n));else if("bigint"==typeof n){if(n>BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"))throw new Error(`BigInt ${n} does not fit into 32 bytes`);t.push(bi(n))}else if("number"==typeof n)t.push(li(n));else if("string"==typeof n)t.push(li(n.length)),t.push(fi.from(n));else{if(!("toBuffer"in n))throw new Error(`Cannot serialize input to buffer: ${typeof n} ${n.constructor?.name}`);t.push(n.toBuffer())}return t}function gi(...e){const t=[];for(const n of e)if(Array.isArray(n))t.push(...gi(...n));else if(n instanceof si)t.push(n);else if("boolean"==typeof n||"number"==typeof n||"bigint"==typeof n)t.push(new si(n));else if("toFields"in n)t.push(...n.toFields());else if("toFr"in n)t.push(n.toFr());else if("toField"in n)t.push(n.toField());else{if(!fi.isBuffer(n))throw new Error(`Cannot serialize input to field: ${typeof n} ${n.constructor?.name}`);t.push(si.fromBuffer(n))}return t}function _i(...e){return fi.concat(mi(...e))}function bi(e,t=32){return m(e,t)}var yi=i(8891).Buffer;async function Ai(e){const t=gi(e),n=(await c.initSingleton()).poseidon2Hash(t.map((e=>new d(e.toBuffer()))));return si.fromBuffer(yi.from(n.toBuffer()))}async function wi(e,t){const n=gi(e);n.unshift(new si(t));const s=(await c.initSingleton()).poseidon2Hash(n.map((e=>new d(e.toBuffer()))));return si.fromBuffer(yi.from(s.toBuffer()))}async function xi(e){const t=[];for(let n=0;n<e.length;n+=31){const s=yi.alloc(32,0);e.slice(n,n+31).copy(s),s.reverse(),t.push(si.fromBuffer(s))}const n=(await c.initSingleton()).poseidon2Hash(t.map((e=>new d(e.toBuffer()))));return si.fromBuffer(yi.from(n.toBuffer()))}class vi{constructor(e,t=0){if(this.fields=e,this.index=t,this.length=e.length,t>=this.length)throw new Error("Offset out of bounds.")}static asReader(e){return e instanceof vi?e:new vi(e)}skip(e){if(this.index+e>this.length)throw new Error("Not enough fields to be consumed.");this.index+=e}get cursor(){return this.index}readField(){if(this.index===this.length)throw new Error("Not enough fields to be consumed.");return this.fields[this.index++]}peekField(){if(this.index===this.length)throw new Error("Not enough fields to be consumed.");return this.fields[this.index]}readFq(){return ii.fromHighLow(this.readField(),this.readField())}readBoolean(){const e=this.readField().toBigInt();if(e>1n)throw new Error("Field is not a boolean.");return 1n==e}readU32(){const e=this.readField().toBigInt();if(e>=1n<<32n)throw new Error("Field is not a u32.");return Number(e)}readFieldArray(e){const t=[];for(let n=0;n<e;++n)t.push(this.readField());return t}readArray(e,t){return Array.from({length:e},(()=>t.fromFields(this)))}readObject(e){return e.fromFields(this)}isFinished(){return this.index>=this.length}}class Ei{constructor(e,t,n){this.x=e,this.y=t,this.isInfinite=n,this.kind="point"}toJSON(){return this.toString()}static get schema(){return Ys(Ei)}static async random(){for(;;)try{return await Ei.fromXAndSign(si.random(),ot(1)[0]%2==0)}catch(e){if(!(e instanceof Mi))throw e;continue}}static fromBuffer(e){const t=Js.asReader(e);return new this(si.fromBuffer(t),si.fromBuffer(t),!1)}static fromCompressedBuffer(e){const t=p(Js.asReader(e).readBytes(Ei.COMPRESSED_SIZE_IN_BYTES)),n=new si(t&(1n<<255n)-1n),s=0n!==(t&1n<<255n);return this.fromXAndSign(n,s)}static fromString(e){return this.fromBuffer(Os(e))}toFields(){return[this.x,this.y,new si(this.isInfinite)]}static fromFields(e){const t=vi.asReader(e);return new this(t.readField(),t.readField(),t.readBoolean())}static async fromXAndSign(e,t){const n=await Ei.YFromX(e);if(null==n)throw new Mi(e);const s=n.toBigInt()<=(si.MODULUS-1n)/2n?n.toBigInt():si.MODULUS-n.toBigInt(),i=si.MODULUS-s;return new this(e,new si(t?s:i),!1)}static YFromX(e){return e.square().mul(e).sub(new si(17)).sqrt()}toXAndSign(){return[this.x,this.y.toBigInt()<=(si.MODULUS-1n)/2n]}toBigInts(){return{x:this.x.toBigInt(),y:this.y.toBigInt(),isInfinite:this.isInfinite?1n:0n}}toBuffer(){if(this.isInfinite)throw new Error("Cannot serialize infinite point without isInfinite flag");const e=_i([this.x,this.y]);if(e.length!==Ei.SIZE_IN_BYTES)throw new Error(`Invalid buffer length for Point: ${e.length}`);return e}toCompressedBuffer(){const[e,t]=this.toXAndSign(),n=_i(e.toBigInt()+(t?2n**255n:0n));if(n.length!==Ei.COMPRESSED_SIZE_IN_BYTES)throw new Error(`Invalid buffer length for compressed Point: ${n.length}`);return n}toString(){return Ds(this.toBuffer())}toShortString(){const e=this.toString();return`${e.slice(0,10)}...${e.slice(-4)}`}toNoirStruct(){return{x:this.x,y:this.y,is_infinite:this.isInfinite}}toWrappedNoirStruct(){return{inner:this.toNoirStruct()}}equals(e){return this.x.equals(e.x)&&this.y.equals(e.y)}isZero(){return this.x.isZero()&&this.y.isZero()}hash(){return Ai(this.toFields())}get inf(){return this.isInfinite}isOnGrumpkin(){if(this.inf)return!0;const e=this.y.square(),t=this.x.mul(this.x).mul(this.x).sub(new si(17));return e.equals(t)}}Ei.ZERO=new Ei(si.ZERO,si.ZERO,!1),Ei.SIZE_IN_BYTES=2*si.SIZE_IN_BYTES,Ei.COMPRESSED_SIZE_IN_BYTES=si.SIZE_IN_BYTES;class Mi extends Error{constructor(e){super("The given x-coordinate is not on the Grumpkin curve: "+e.toString()),this.name="NotOnCurveError"}}var zi=i(8891).Buffer;class Bi{constructor(e){this.fields=e}toFields(){return this.fields}static random(){return this.fromField(si.random())}toFieldsBuffer(){return zi.concat([this.fields[0].toBuffer(),this.fields[1].toBuffer()])}toBuffer(){const e=this.fields[0].toBuffer(),t=this.fields[1].toBuffer();return e[0]=t[31],e}equals(e){return this.toBigInt()===e.toBigInt()}toBigInt(){return p(this.toBuffer())}static fromBuffer(e){if(32!=e.length)throw new Error("Invalid size of coordinate buffer");const t=zi.alloc(32);e.copy(t,0,0,32);const n=zi.alloc(32);return n[31]=t[0],t[0]=0,new Bi([si.fromBuffer(t),si.fromBuffer(n)])}static fromField(e){const t=e.toBuffer(),n=zi.alloc(32);return n[31]=t[0],t[0]=0,new Bi([si.fromBuffer(t),si.fromBuffer(n)])}}Bi.ZERO=new Bi([si.ZERO,si.ZERO]);const Fi=29,ki=5,Ci=40,Oi=40,Di=64,Li=64,Ti=32,Si=64,Ni=32,Pi=18,Ii=48,Yi=3578010381,Qi=3e3,ji=538,Hi=1e9,Ui=6e6;var Ri,Gi;function Zi(e){let t=e.length;for(;--t>=0;)e[t]=0}(Gi=Ri||(Ri={}))[Gi.NOTE_HASH=1]="NOTE_HASH",Gi[Gi.NOTE_HASH_NONCE=2]="NOTE_HASH_NONCE",Gi[Gi.UNIQUE_NOTE_HASH=3]="UNIQUE_NOTE_HASH",Gi[Gi.SILOED_NOTE_HASH=4]="SILOED_NOTE_HASH",Gi[Gi.MESSAGE_NULLIFIER=5]="MESSAGE_NULLIFIER",Gi[Gi.INITIALIZATION_NULLIFIER=6]="INITIALIZATION_NULLIFIER",Gi[Gi.OUTER_NULLIFIER=7]="OUTER_NULLIFIER",Gi[Gi.PUBLIC_DATA_READ=8]="PUBLIC_DATA_READ",Gi[Gi.PUBLIC_DATA_UPDATE_REQUEST=9]="PUBLIC_DATA_UPDATE_REQUEST",Gi[Gi.FUNCTION_DATA=10]="FUNCTION_DATA",Gi[Gi.FUNCTION_LEAF=11]="FUNCTION_LEAF",Gi[Gi.CONTRACT_DEPLOYMENT_DATA=12]="CONTRACT_DEPLOYMENT_DATA",Gi[Gi.CONSTRUCTOR=13]="CONSTRUCTOR",Gi[Gi.CONSTRUCTOR_ARGS=14]="CONSTRUCTOR_ARGS",Gi[Gi.CONTRACT_ADDRESS_V1=15]="CONTRACT_ADDRESS_V1",Gi[Gi.CONTRACT_LEAF=16]="CONTRACT_LEAF",Gi[Gi.CALL_CONTEXT=17]="CALL_CONTEXT",Gi[Gi.CALL_STACK_ITEM=18]="CALL_STACK_ITEM",Gi[Gi.CALL_STACK_ITEM_2=19]="CALL_STACK_ITEM_2",Gi[Gi.SECRET_HASH=20]="SECRET_HASH",Gi[Gi.L2_TO_L1_MSG=21]="L2_TO_L1_MSG",Gi[Gi.TX_CONTEXT=22]="TX_CONTEXT",Gi[Gi.PUBLIC_LEAF_INDEX=23]="PUBLIC_LEAF_INDEX",Gi[Gi.PUBLIC_DATA_LEAF=24]="PUBLIC_DATA_LEAF",Gi[Gi.SIGNED_TX_REQUEST=25]="SIGNED_TX_REQUEST",Gi[Gi.GLOBAL_VARIABLES=26]="GLOBAL_VARIABLES",Gi[Gi.PARTIAL_ADDRESS=27]="PARTIAL_ADDRESS",Gi[Gi.BLOCK_HASH=28]="BLOCK_HASH",Gi[Gi.SIDE_EFFECT=29]="SIDE_EFFECT",Gi[Gi.FEE_PAYLOAD=30]="FEE_PAYLOAD",Gi[Gi.COMBINED_PAYLOAD=31]="COMBINED_PAYLOAD",Gi[Gi.TX_NULLIFIER=32]="TX_NULLIFIER",Gi[Gi.TX_REQUEST=33]="TX_REQUEST",Gi[Gi.SIGNATURE_PAYLOAD=34]="SIGNATURE_PAYLOAD",Gi[Gi.VK=41]="VK",Gi[Gi.PRIVATE_CIRCUIT_PUBLIC_INPUTS=42]="PRIVATE_CIRCUIT_PUBLIC_INPUTS",Gi[Gi.PUBLIC_CIRCUIT_PUBLIC_INPUTS=43]="PUBLIC_CIRCUIT_PUBLIC_INPUTS",Gi[Gi.FUNCTION_ARGS=44]="FUNCTION_ARGS",Gi[Gi.AUTHWIT_INNER=45]="AUTHWIT_INNER",Gi[Gi.AUTHWIT_OUTER=46]="AUTHWIT_OUTER",Gi[Gi.AUTHWIT_NULLIFIER=47]="AUTHWIT_NULLIFIER",Gi[Gi.NSK_M=48]="NSK_M",Gi[Gi.IVSK_M=49]="IVSK_M",Gi[Gi.OVSK_M=50]="OVSK_M",Gi[Gi.TSK_M=51]="TSK_M",Gi[Gi.PUBLIC_KEYS_HASH=52]="PUBLIC_KEYS_HASH",Gi[Gi.NOTE_NULLIFIER=53]="NOTE_NULLIFIER",Gi[Gi.NOTE_HIDING_POINT=54]="NOTE_HIDING_POINT",Gi[Gi.SYMMETRIC_KEY=55]="SYMMETRIC_KEY",Gi[Gi.SYMMETRIC_KEY_2=56]="SYMMETRIC_KEY_2",Gi[Gi.PUBLIC_TX_HASH=57]="PUBLIC_TX_HASH",Gi[Gi.PRIVATE_TX_HASH=58]="PRIVATE_TX_HASH",BigInt(1e21);const Ji=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Xi=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Wi=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Vi=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),qi=new Array(576);Zi(qi);const Ki=new Array(60);Zi(Ki);const $i=new Array(512);Zi($i);const er=new Array(256);Zi(er);const tr=new Array(29);Zi(tr);const nr=new Array(30);function sr(e,t,n,s,i){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=s,this.max_length=i,this.has_stree=e&&e.length}let ir,rr,ar;function or(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}Zi(nr);const lr=e=>e<256?$i[e]:$i[256+(e>>>7)],cr=(e,t)=>{e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255},dr=(e,t,n)=>{e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,cr(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)},ur=(e,t,n)=>{dr(e,n[2*t],n[2*t+1])},fr=(e,t)=>{let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1},hr=(e,t,n)=>{const s=new Array(16);let i,r,a=0;for(i=1;i<=15;i++)a=a+n[i-1]<<1,s[i]=a;for(r=0;r<=t;r++){let t=e[2*r+1];0!==t&&(e[2*r]=fr(s[t]++,t))}},pr=e=>{let t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},mr=e=>{e.bi_valid>8?cr(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},gr=(e,t,n,s)=>{const i=2*t,r=2*n;return e[i]<e[r]||e[i]===e[r]&&s[t]<=s[n]},_r=(e,t,n)=>{const s=e.heap[n];let i=n<<1;for(;i<=e.heap_len&&(i<e.heap_len&&gr(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!gr(t,s,e.heap[i],e.depth));)e.heap[n]=e.heap[i],n=i,i<<=1;e.heap[n]=s},br=(e,t,n)=>{let s,i,r,a,o=0;if(0!==e.sym_next)do{s=255&e.pending_buf[e.sym_buf+o++],s+=(255&e.pending_buf[e.sym_buf+o++])<<8,i=e.pending_buf[e.sym_buf+o++],0===s?ur(e,i,t):(r=er[i],ur(e,r+256+1,t),a=Ji[r],0!==a&&(i-=tr[r],dr(e,i,a)),s--,r=lr(s),ur(e,r,n),a=Xi[r],0!==a&&(s-=nr[r],dr(e,s,a)))}while(o<e.sym_next);ur(e,256,t)},yr=(e,t)=>{const n=t.dyn_tree,s=t.stat_desc.static_tree,i=t.stat_desc.has_stree,r=t.stat_desc.elems;let a,o,l,c=-1;for(e.heap_len=0,e.heap_max=573,a=0;a<r;a++)0!==n[2*a]?(e.heap[++e.heap_len]=c=a,e.depth[a]=0):n[2*a+1]=0;for(;e.heap_len<2;)l=e.heap[++e.heap_len]=c<2?++c:0,n[2*l]=1,e.depth[l]=0,e.opt_len--,i&&(e.static_len-=s[2*l+1]);for(t.max_code=c,a=e.heap_len>>1;a>=1;a--)_r(e,n,a);l=r;do{a=e.heap[1],e.heap[1]=e.heap[e.heap_len--],_r(e,n,1),o=e.heap[1],e.heap[--e.heap_max]=a,e.heap[--e.heap_max]=o,n[2*l]=n[2*a]+n[2*o],e.depth[l]=(e.depth[a]>=e.depth[o]?e.depth[a]:e.depth[o])+1,n[2*a+1]=n[2*o+1]=l,e.heap[1]=l++,_r(e,n,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],((e,t)=>{const n=t.dyn_tree,s=t.max_code,i=t.stat_desc.static_tree,r=t.stat_desc.has_stree,a=t.stat_desc.extra_bits,o=t.stat_desc.extra_base,l=t.stat_desc.max_length;let c,d,u,f,h,p,m=0;for(f=0;f<=15;f++)e.bl_count[f]=0;for(n[2*e.heap[e.heap_max]+1]=0,c=e.heap_max+1;c<573;c++)d=e.heap[c],f=n[2*n[2*d+1]+1]+1,f>l&&(f=l,m++),n[2*d+1]=f,d>s||(e.bl_count[f]++,h=0,d>=o&&(h=a[d-o]),p=n[2*d],e.opt_len+=p*(f+h),r&&(e.static_len+=p*(i[2*d+1]+h)));if(0!==m){do{for(f=l-1;0===e.bl_count[f];)f--;e.bl_count[f]--,e.bl_count[f+1]+=2,e.bl_count[l]--,m-=2}while(m>0);for(f=l;0!==f;f--)for(d=e.bl_count[f];0!==d;)u=e.heap[--c],u>s||(n[2*u+1]!==f&&(e.opt_len+=(f-n[2*u+1])*n[2*u],n[2*u+1]=f),d--)}})(e,t),hr(n,c,e.bl_count)},Ar=(e,t,n)=>{let s,i,r=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),t[2*(n+1)+1]=65535,s=0;s<=n;s++)i=a,a=t[2*(s+1)+1],++o<l&&i===a||(o<c?e.bl_tree[2*i]+=o:0!==i?(i!==r&&e.bl_tree[2*i]++,e.bl_tree[32]++):o<=10?e.bl_tree[34]++:e.bl_tree[36]++,o=0,r=i,0===a?(l=138,c=3):i===a?(l=6,c=3):(l=7,c=4))},wr=(e,t,n)=>{let s,i,r=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),s=0;s<=n;s++)if(i=a,a=t[2*(s+1)+1],!(++o<l&&i===a)){if(o<c)do{ur(e,i,e.bl_tree)}while(0!=--o);else 0!==i?(i!==r&&(ur(e,i,e.bl_tree),o--),ur(e,16,e.bl_tree),dr(e,o-3,2)):o<=10?(ur(e,17,e.bl_tree),dr(e,o-3,3)):(ur(e,18,e.bl_tree),dr(e,o-11,7));o=0,r=i,0===a?(l=138,c=3):i===a?(l=6,c=3):(l=7,c=4)}};let xr=!1;const vr=(e,t,n,s)=>{dr(e,0+(s?1:0),3),mr(e),cr(e,n),cr(e,~n),n&&e.pending_buf.set(e.window.subarray(t,t+n),e.pending),e.pending+=n};var Er={_tr_init:e=>{xr||((()=>{let e,t,n,s,i;const r=new Array(16);for(n=0,s=0;s<28;s++)for(tr[s]=n,e=0;e<1<<Ji[s];e++)er[n++]=s;for(er[n-1]=s,i=0,s=0;s<16;s++)for(nr[s]=i,e=0;e<1<<Xi[s];e++)$i[i++]=s;for(i>>=7;s<30;s++)for(nr[s]=i<<7,e=0;e<1<<Xi[s]-7;e++)$i[256+i++]=s;for(t=0;t<=15;t++)r[t]=0;for(e=0;e<=143;)qi[2*e+1]=8,e++,r[8]++;for(;e<=255;)qi[2*e+1]=9,e++,r[9]++;for(;e<=279;)qi[2*e+1]=7,e++,r[7]++;for(;e<=287;)qi[2*e+1]=8,e++,r[8]++;for(hr(qi,287,r),e=0;e<30;e++)Ki[2*e+1]=5,Ki[2*e]=fr(e,5);ir=new sr(qi,Ji,257,286,15),rr=new sr(Ki,Xi,0,30,15),ar=new sr(new Array(0),Wi,0,19,7)})(),xr=!0),e.l_desc=new or(e.dyn_ltree,ir),e.d_desc=new or(e.dyn_dtree,rr),e.bl_desc=new or(e.bl_tree,ar),e.bi_buf=0,e.bi_valid=0,pr(e)},_tr_stored_block:vr,_tr_flush_block:(e,t,n,s)=>{let i,r,a=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=(e=>{let t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0})(e)),yr(e,e.l_desc),yr(e,e.d_desc),a=(e=>{let t;for(Ar(e,e.dyn_ltree,e.l_desc.max_code),Ar(e,e.dyn_dtree,e.d_desc.max_code),yr(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*Vi[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t})(e),i=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=i&&(i=r)):i=r=n+5,n+4<=i&&-1!==t?vr(e,t,n,s):4===e.strategy||r===i?(dr(e,2+(s?1:0),3),br(e,qi,Ki)):(dr(e,4+(s?1:0),3),((e,t,n,s)=>{let i;for(dr(e,t-257,5),dr(e,n-1,5),dr(e,s-4,4),i=0;i<s;i++)dr(e,e.bl_tree[2*Vi[i]+1],3);wr(e,e.dyn_ltree,t-1),wr(e,e.dyn_dtree,n-1)})(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),br(e,e.dyn_ltree,e.dyn_dtree)),pr(e),s&&mr(e)},_tr_tally:(e,t,n)=>(e.pending_buf[e.sym_buf+e.sym_next++]=t,e.pending_buf[e.sym_buf+e.sym_next++]=t>>8,e.pending_buf[e.sym_buf+e.sym_next++]=n,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(er[n]+256+1)]++,e.dyn_dtree[2*lr(t)]++),e.sym_next===e.sym_end),_tr_align:e=>{dr(e,2,3),ur(e,256,qi),(e=>{16===e.bi_valid?(cr(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)})(e)}},Mr=(e,t,n,s)=>{let i=65535&e,r=e>>>16&65535,a=0;for(;0!==n;){a=n>2e3?2e3:n,n-=a;do{i=i+t[s++]|0,r=r+i|0}while(--a);i%=65521,r%=65521}return i|r<<16};const zr=new Uint32Array((()=>{let e,t=[];for(var n=0;n<256;n++){e=n;for(var s=0;s<8;s++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t})());var Br=(e,t,n,s)=>{const i=zr,r=s+n;e^=-1;for(let n=s;n<r;n++)e=e>>>8^i[255&(e^t[n])];return~e},Fr={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},kr={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Cr,_tr_stored_block:Or,_tr_flush_block:Dr,_tr_tally:Lr,_tr_align:Tr}=Er,{Z_NO_FLUSH:Sr,Z_PARTIAL_FLUSH:Nr,Z_FULL_FLUSH:Pr,Z_FINISH:Ir,Z_BLOCK:Yr,Z_OK:Qr,Z_STREAM_END:jr,Z_STREAM_ERROR:Hr,Z_DATA_ERROR:Ur,Z_BUF_ERROR:Rr,Z_DEFAULT_COMPRESSION:Gr,Z_FILTERED:Zr,Z_HUFFMAN_ONLY:Jr,Z_RLE:Xr,Z_FIXED:Wr,Z_DEFAULT_STRATEGY:Vr,Z_UNKNOWN:qr,Z_DEFLATED:Kr}=kr,$r=258,ea=262,ta=42,na=113,sa=666,ia=(e,t)=>(e.msg=Fr[t],t),ra=e=>2*e-(e>4?9:0),aa=e=>{let t=e.length;for(;--t>=0;)e[t]=0},oa=e=>{let t,n,s,i=e.w_size;t=e.hash_size,s=t;do{n=e.head[--s],e.head[s]=n>=i?n-i:0}while(--t);t=i,s=t;do{n=e.prev[--s],e.prev[s]=n>=i?n-i:0}while(--t)};let la=(e,t,n)=>(t<<e.hash_shift^n)&e.hash_mask;const ca=e=>{const t=e.state;let n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(e.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+n),e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))},da=(e,t)=>{Dr(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,ca(e.strm)},ua=(e,t)=>{e.pending_buf[e.pending++]=t},fa=(e,t)=>{e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t},ha=(e,t,n,s)=>{let i=e.avail_in;return i>s&&(i=s),0===i?0:(e.avail_in-=i,t.set(e.input.subarray(e.next_in,e.next_in+i),n),1===e.state.wrap?e.adler=Mr(e.adler,t,i,n):2===e.state.wrap&&(e.adler=Br(e.adler,t,i,n)),e.next_in+=i,e.total_in+=i,i)},pa=(e,t)=>{let n,s,i=e.max_chain_length,r=e.strstart,a=e.prev_length,o=e.nice_match;const l=e.strstart>e.w_size-ea?e.strstart-(e.w_size-ea):0,c=e.window,d=e.w_mask,u=e.prev,f=e.strstart+$r;let h=c[r+a-1],p=c[r+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(n=t,c[n+a]===p&&c[n+a-1]===h&&c[n]===c[r]&&c[++n]===c[r+1]){r+=2,n++;do{}while(c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&r<f);if(s=$r-(f-r),r=f-$r,s>a){if(e.match_start=t,a=s,s>=o)break;h=c[r+a-1],p=c[r+a]}}}while((t=u[t&d])>l&&0!=--i);return a<=e.lookahead?a:e.lookahead},ma=e=>{const t=e.w_size;let n,s,i;do{if(s=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-ea)&&(e.window.set(e.window.subarray(t,t+t-s),0),e.match_start-=t,e.strstart-=t,e.block_start-=t,e.insert>e.strstart&&(e.insert=e.strstart),oa(e),s+=t),0===e.strm.avail_in)break;if(n=ha(e.strm,e.window,e.strstart+e.lookahead,s),e.lookahead+=n,e.lookahead+e.insert>=3)for(i=e.strstart-e.insert,e.ins_h=e.window[i],e.ins_h=la(e,e.ins_h,e.window[i+1]);e.insert&&(e.ins_h=la(e,e.ins_h,e.window[i+3-1]),e.prev[i&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=i,i++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<ea&&0!==e.strm.avail_in)},ga=(e,t)=>{let n,s,i,r=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,a=0,o=e.strm.avail_in;do{if(n=65535,i=e.bi_valid+42>>3,e.strm.avail_out<i)break;if(i=e.strm.avail_out-i,s=e.strstart-e.block_start,n>s+e.strm.avail_in&&(n=s+e.strm.avail_in),n>i&&(n=i),n<r&&(0===n&&t!==Ir||t===Sr||n!==s+e.strm.avail_in))break;a=t===Ir&&n===s+e.strm.avail_in?1:0,Or(e,0,0,a),e.pending_buf[e.pending-4]=n,e.pending_buf[e.pending-3]=n>>8,e.pending_buf[e.pending-2]=~n,e.pending_buf[e.pending-1]=~n>>8,ca(e.strm),s&&(s>n&&(s=n),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+s),e.strm.next_out),e.strm.next_out+=s,e.strm.avail_out-=s,e.strm.total_out+=s,e.block_start+=s,n-=s),n&&(ha(e.strm,e.strm.output,e.strm.next_out,n),e.strm.next_out+=n,e.strm.avail_out-=n,e.strm.total_out+=n)}while(0===a);return o-=e.strm.avail_in,o&&(o>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=o&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-o,e.strm.next_in),e.strstart),e.strstart+=o,e.insert+=o>e.w_size-e.insert?e.w_size-e.insert:o),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),a?4:t!==Sr&&t!==Ir&&0===e.strm.avail_in&&e.strstart===e.block_start?2:(i=e.window_size-e.strstart,e.strm.avail_in>i&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,i+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),i>e.strm.avail_in&&(i=e.strm.avail_in),i&&(ha(e.strm,e.window,e.strstart,i),e.strstart+=i,e.insert+=i>e.w_size-e.insert?e.w_size-e.insert:i),e.high_water<e.strstart&&(e.high_water=e.strstart),i=e.bi_valid+42>>3,i=e.pending_buf_size-i>65535?65535:e.pending_buf_size-i,r=i>e.w_size?e.w_size:i,s=e.strstart-e.block_start,(s>=r||(s||t===Ir)&&t!==Sr&&0===e.strm.avail_in&&s<=i)&&(n=s>i?i:s,a=t===Ir&&0===e.strm.avail_in&&n===s?1:0,Or(e,e.block_start,n,a),e.block_start+=n,ca(e.strm)),a?3:1)},_a=(e,t)=>{let n,s;for(;;){if(e.lookahead<ea){if(ma(e),e.lookahead<ea&&t===Sr)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=la(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-ea&&(e.match_length=pa(e,n)),e.match_length>=3)if(s=Lr(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=la(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=la(e,e.ins_h,e.window[e.strstart+1]);else s=Lr(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(s&&(da(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,t===Ir?(da(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(da(e,!1),0===e.strm.avail_out)?1:2},ba=(e,t)=>{let n,s,i;for(;;){if(e.lookahead<ea){if(ma(e),e.lookahead<ea&&t===Sr)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=la(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-ea&&(e.match_length=pa(e,n),e.match_length<=5&&(e.strategy===Zr||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-3,s=Lr(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=la(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,s&&(da(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if(s=Lr(e,0,e.window[e.strstart-1]),s&&da(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(s=Lr(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,t===Ir?(da(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(da(e,!1),0===e.strm.avail_out)?1:2};function ya(e,t,n,s,i){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=s,this.func=i}const Aa=[new ya(0,0,0,0,ga),new ya(4,4,8,4,_a),new ya(4,5,16,8,_a),new ya(4,6,32,32,_a),new ya(4,4,16,16,ba),new ya(8,16,32,32,ba),new ya(8,16,128,128,ba),new ya(8,32,128,256,ba),new ya(32,128,258,1024,ba),new ya(32,258,258,4096,ba)];function wa(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Kr,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),aa(this.dyn_ltree),aa(this.dyn_dtree),aa(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),aa(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),aa(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const xa=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.status!==ta&&57!==t.status&&69!==t.status&&73!==t.status&&91!==t.status&&103!==t.status&&t.status!==na&&t.status!==sa?1:0},va=e=>{if(xa(e))return ia(e,Hr);e.total_in=e.total_out=0,e.data_type=qr;const t=e.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=2===t.wrap?57:t.wrap?ta:na,e.adler=2===t.wrap?0:1,t.last_flush=-2,Cr(t),Qr},Ea=e=>{const t=va(e);var n;return t===Qr&&((n=e.state).window_size=2*n.w_size,aa(n.head),n.max_lazy_match=Aa[n.level].max_lazy,n.good_match=Aa[n.level].good_length,n.nice_match=Aa[n.level].nice_length,n.max_chain_length=Aa[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=2,n.match_available=0,n.ins_h=0),t},Ma=(e,t,n,s,i,r)=>{if(!e)return Hr;let a=1;if(t===Gr&&(t=6),s<0?(a=0,s=-s):s>15&&(a=2,s-=16),i<1||i>9||n!==Kr||s<8||s>15||t<0||t>9||r<0||r>Wr||8===s&&1!==a)return ia(e,Hr);8===s&&(s=9);const o=new wa;return e.state=o,o.strm=e,o.status=ta,o.wrap=a,o.gzhead=null,o.w_bits=s,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=t,o.strategy=r,o.method=n,Ea(e)};var za={deflateInit:(e,t)=>Ma(e,t,Kr,15,8,Vr),deflateInit2:Ma,deflateReset:Ea,deflateResetKeep:va,deflateSetHeader:(e,t)=>xa(e)||2!==e.state.wrap?Hr:(e.state.gzhead=t,Qr),deflate:(e,t)=>{if(xa(e)||t>Yr||t<0)return e?ia(e,Hr):Hr;const n=e.state;if(!e.output||0!==e.avail_in&&!e.input||n.status===sa&&t!==Ir)return ia(e,0===e.avail_out?Rr:Hr);const s=n.last_flush;if(n.last_flush=t,0!==n.pending){if(ca(e),0===e.avail_out)return n.last_flush=-1,Qr}else if(0===e.avail_in&&ra(t)<=ra(s)&&t!==Ir)return ia(e,Rr);if(n.status===sa&&0!==e.avail_in)return ia(e,Rr);if(n.status===ta&&0===n.wrap&&(n.status=na),n.status===ta){let t=Kr+(n.w_bits-8<<4)<<8,s=-1;if(s=n.strategy>=Jr||n.level<2?0:n.level<6?1:6===n.level?2:3,t|=s<<6,0!==n.strstart&&(t|=32),t+=31-t%31,fa(n,t),0!==n.strstart&&(fa(n,e.adler>>>16),fa(n,65535&e.adler)),e.adler=1,n.status=na,ca(e),0!==n.pending)return n.last_flush=-1,Qr}if(57===n.status)if(e.adler=0,ua(n,31),ua(n,139),ua(n,8),n.gzhead)ua(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),ua(n,255&n.gzhead.time),ua(n,n.gzhead.time>>8&255),ua(n,n.gzhead.time>>16&255),ua(n,n.gzhead.time>>24&255),ua(n,9===n.level?2:n.strategy>=Jr||n.level<2?4:0),ua(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(ua(n,255&n.gzhead.extra.length),ua(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=Br(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69;else if(ua(n,0),ua(n,0),ua(n,0),ua(n,0),ua(n,0),ua(n,9===n.level?2:n.strategy>=Jr||n.level<2?4:0),ua(n,3),n.status=na,ca(e),0!==n.pending)return n.last_flush=-1,Qr;if(69===n.status){if(n.gzhead.extra){let t=n.pending,s=(65535&n.gzhead.extra.length)-n.gzindex;for(;n.pending+s>n.pending_buf_size;){let i=n.pending_buf_size-n.pending;if(n.pending_buf.set(n.gzhead.extra.subarray(n.gzindex,n.gzindex+i),n.pending),n.pending=n.pending_buf_size,n.gzhead.hcrc&&n.pending>t&&(e.adler=Br(e.adler,n.pending_buf,n.pending-t,t)),n.gzindex+=i,ca(e),0!==n.pending)return n.last_flush=-1,Qr;t=0,s-=i}let i=new Uint8Array(n.gzhead.extra);n.pending_buf.set(i.subarray(n.gzindex,n.gzindex+s),n.pending),n.pending+=s,n.gzhead.hcrc&&n.pending>t&&(e.adler=Br(e.adler,n.pending_buf,n.pending-t,t)),n.gzindex=0}n.status=73}if(73===n.status){if(n.gzhead.name){let t,s=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>s&&(e.adler=Br(e.adler,n.pending_buf,n.pending-s,s)),ca(e),0!==n.pending)return n.last_flush=-1,Qr;s=0}t=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,ua(n,t)}while(0!==t);n.gzhead.hcrc&&n.pending>s&&(e.adler=Br(e.adler,n.pending_buf,n.pending-s,s)),n.gzindex=0}n.status=91}if(91===n.status){if(n.gzhead.comment){let t,s=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>s&&(e.adler=Br(e.adler,n.pending_buf,n.pending-s,s)),ca(e),0!==n.pending)return n.last_flush=-1,Qr;s=0}t=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,ua(n,t)}while(0!==t);n.gzhead.hcrc&&n.pending>s&&(e.adler=Br(e.adler,n.pending_buf,n.pending-s,s))}n.status=103}if(103===n.status){if(n.gzhead.hcrc){if(n.pending+2>n.pending_buf_size&&(ca(e),0!==n.pending))return n.last_flush=-1,Qr;ua(n,255&e.adler),ua(n,e.adler>>8&255),e.adler=0}if(n.status=na,ca(e),0!==n.pending)return n.last_flush=-1,Qr}if(0!==e.avail_in||0!==n.lookahead||t!==Sr&&n.status!==sa){let s=0===n.level?ga(n,t):n.strategy===Jr?((e,t)=>{let n;for(;;){if(0===e.lookahead&&(ma(e),0===e.lookahead)){if(t===Sr)return 1;break}if(e.match_length=0,n=Lr(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(da(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===Ir?(da(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(da(e,!1),0===e.strm.avail_out)?1:2})(n,t):n.strategy===Xr?((e,t)=>{let n,s,i,r;const a=e.window;for(;;){if(e.lookahead<=$r){if(ma(e),e.lookahead<=$r&&t===Sr)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(i=e.strstart-1,s=a[i],s===a[++i]&&s===a[++i]&&s===a[++i])){r=e.strstart+$r;do{}while(s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&i<r);e.match_length=$r-(r-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=Lr(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=Lr(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(da(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===Ir?(da(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(da(e,!1),0===e.strm.avail_out)?1:2})(n,t):Aa[n.level].func(n,t);if(3!==s&&4!==s||(n.status=sa),1===s||3===s)return 0===e.avail_out&&(n.last_flush=-1),Qr;if(2===s&&(t===Nr?Tr(n):t!==Yr&&(Or(n,0,0,!1),t===Pr&&(aa(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),ca(e),0===e.avail_out))return n.last_flush=-1,Qr}return t!==Ir?Qr:n.wrap<=0?jr:(2===n.wrap?(ua(n,255&e.adler),ua(n,e.adler>>8&255),ua(n,e.adler>>16&255),ua(n,e.adler>>24&255),ua(n,255&e.total_in),ua(n,e.total_in>>8&255),ua(n,e.total_in>>16&255),ua(n,e.total_in>>24&255)):(fa(n,e.adler>>>16),fa(n,65535&e.adler)),ca(e),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?Qr:jr)},deflateEnd:e=>{if(xa(e))return Hr;const t=e.state.status;return e.state=null,t===na?ia(e,Ur):Qr},deflateSetDictionary:(e,t)=>{let n=t.length;if(xa(e))return Hr;const s=e.state,i=s.wrap;if(2===i||1===i&&s.status!==ta||s.lookahead)return Hr;if(1===i&&(e.adler=Mr(e.adler,t,n,0)),s.wrap=0,n>=s.w_size){0===i&&(aa(s.head),s.strstart=0,s.block_start=0,s.insert=0);let e=new Uint8Array(s.w_size);e.set(t.subarray(n-s.w_size,n),0),t=e,n=s.w_size}const r=e.avail_in,a=e.next_in,o=e.input;for(e.avail_in=n,e.next_in=0,e.input=t,ma(s);s.lookahead>=3;){let e=s.strstart,t=s.lookahead-2;do{s.ins_h=la(s,s.ins_h,s.window[e+3-1]),s.prev[e&s.w_mask]=s.head[s.ins_h],s.head[s.ins_h]=e,e++}while(--t);s.strstart=e,s.lookahead=2,ma(s)}return s.strstart+=s.lookahead,s.block_start=s.strstart,s.insert=s.lookahead,s.lookahead=0,s.match_length=s.prev_length=2,s.match_available=0,e.next_in=a,e.input=o,e.avail_in=r,s.wrap=i,Qr},deflateInfo:"pako deflate (from Nodeca project)"};const Ba=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var Fa={assign:function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(const t in n)Ba(n,t)&&(e[t]=n[t])}}return e},flattenChunks:e=>{let t=0;for(let n=0,s=e.length;n<s;n++)t+=e[n].length;const n=new Uint8Array(t);for(let t=0,s=0,i=e.length;t<i;t++){let i=e[t];n.set(i,s),s+=i.length}return n}};let ka=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){ka=!1}const Ca=new Uint8Array(256);for(let e=0;e<256;e++)Ca[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;Ca[254]=Ca[254]=1;var Oa={string2buf:e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,n,s,i,r,a=e.length,o=0;for(i=0;i<a;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(s=e.charCodeAt(i+1),56320==(64512&s)&&(n=65536+(n-55296<<10)+(s-56320),i++)),o+=n<128?1:n<2048?2:n<65536?3:4;for(t=new Uint8Array(o),r=0,i=0;r<o;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(s=e.charCodeAt(i+1),56320==(64512&s)&&(n=65536+(n-55296<<10)+(s-56320),i++)),n<128?t[r++]=n:n<2048?(t[r++]=192|n>>>6,t[r++]=128|63&n):n<65536?(t[r++]=224|n>>>12,t[r++]=128|n>>>6&63,t[r++]=128|63&n):(t[r++]=240|n>>>18,t[r++]=128|n>>>12&63,t[r++]=128|n>>>6&63,t[r++]=128|63&n);return t},buf2string:(e,t)=>{const n=t||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));let s,i;const r=new Array(2*n);for(i=0,s=0;s<n;){let t=e[s++];if(t<128){r[i++]=t;continue}let a=Ca[t];if(a>4)r[i++]=65533,s+=a-1;else{for(t&=2===a?31:3===a?15:7;a>1&&s<n;)t=t<<6|63&e[s++],a--;a>1?r[i++]=65533:t<65536?r[i++]=t:(t-=65536,r[i++]=55296|t>>10&1023,r[i++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&ka)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let n="";for(let s=0;s<t;s++)n+=String.fromCharCode(e[s]);return n})(r,i)},utf8border:(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let n=t-1;for(;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+Ca[e[n]]>t?n:t}},Da=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const La=Object.prototype.toString,{Z_NO_FLUSH:Ta,Z_SYNC_FLUSH:Sa,Z_FULL_FLUSH:Na,Z_FINISH:Pa,Z_OK:Ia,Z_STREAM_END:Ya,Z_DEFAULT_COMPRESSION:Qa,Z_DEFAULT_STRATEGY:ja,Z_DEFLATED:Ha}=kr;function Ua(e){this.options=Fa.assign({level:Qa,method:Ha,chunkSize:16384,windowBits:15,memLevel:8,strategy:ja},e||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Da,this.strm.avail_out=0;let n=za.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(n!==Ia)throw new Error(Fr[n]);if(t.header&&za.deflateSetHeader(this.strm,t.header),t.dictionary){let e;if(e="string"==typeof t.dictionary?Oa.string2buf(t.dictionary):"[object ArrayBuffer]"===La.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,n=za.deflateSetDictionary(this.strm,e),n!==Ia)throw new Error(Fr[n]);this._dict_set=!0}}function Ra(e,t){const n=new Ua(t);if(n.push(e,!0),n.err)throw n.msg||Fr[n.err];return n.result}Ua.prototype.push=function(e,t){const n=this.strm,s=this.options.chunkSize;let i,r;if(this.ended)return!1;for(r=t===~~t?t:!0===t?Pa:Ta,"string"==typeof e?n.input=Oa.string2buf(e):"[object ArrayBuffer]"===La.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;)if(0===n.avail_out&&(n.output=new Uint8Array(s),n.next_out=0,n.avail_out=s),(r===Sa||r===Na)&&n.avail_out<=6)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else{if(i=za.deflate(n,r),i===Ya)return n.next_out>0&&this.onData(n.output.subarray(0,n.next_out)),i=za.deflateEnd(this.strm),this.onEnd(i),this.ended=!0,i===Ia;if(0!==n.avail_out){if(r>0&&n.next_out>0)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else if(0===n.avail_in)break}else this.onData(n.output)}return!0},Ua.prototype.onData=function(e){this.chunks.push(e)},Ua.prototype.onEnd=function(e){e===Ia&&(this.result=Fa.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Ga={Deflate:Ua,deflate:Ra,deflateRaw:function(e,t){return(t=t||{}).raw=!0,Ra(e,t)},gzip:function(e,t){return(t=t||{}).gzip=!0,Ra(e,t)},constants:kr};const Za=16209;var Ja=function(e,t){let n,s,i,r,a,o,l,c,d,u,f,h,p,m,g,_,b,y,A,w,x,v,E,M;const z=e.state;n=e.next_in,E=e.input,s=n+(e.avail_in-5),i=e.next_out,M=e.output,r=i-(t-e.avail_out),a=i+(e.avail_out-257),o=z.dmax,l=z.wsize,c=z.whave,d=z.wnext,u=z.window,f=z.hold,h=z.bits,p=z.lencode,m=z.distcode,g=(1<<z.lenbits)-1,_=(1<<z.distbits)-1;e:do{h<15&&(f+=E[n++]<<h,h+=8,f+=E[n++]<<h,h+=8),b=p[f&g];t:for(;;){if(y=b>>>24,f>>>=y,h-=y,y=b>>>16&255,0===y)M[i++]=65535&b;else{if(!(16&y)){if(64&y){if(32&y){z.mode=16191;break e}e.msg="invalid literal/length code",z.mode=Za;break e}b=p[(65535&b)+(f&(1<<y)-1)];continue t}for(A=65535&b,y&=15,y&&(h<y&&(f+=E[n++]<<h,h+=8),A+=f&(1<<y)-1,f>>>=y,h-=y),h<15&&(f+=E[n++]<<h,h+=8,f+=E[n++]<<h,h+=8),b=m[f&_];;){if(y=b>>>24,f>>>=y,h-=y,y=b>>>16&255,16&y){if(w=65535&b,y&=15,h<y&&(f+=E[n++]<<h,h+=8,h<y&&(f+=E[n++]<<h,h+=8)),w+=f&(1<<y)-1,w>o){e.msg="invalid distance too far back",z.mode=Za;break e}if(f>>>=y,h-=y,y=i-r,w>y){if(y=w-y,y>c&&z.sane){e.msg="invalid distance too far back",z.mode=Za;break e}if(x=0,v=u,0===d){if(x+=l-y,y<A){A-=y;do{M[i++]=u[x++]}while(--y);x=i-w,v=M}}else if(d<y){if(x+=l+d-y,y-=d,y<A){A-=y;do{M[i++]=u[x++]}while(--y);if(x=0,d<A){y=d,A-=y;do{M[i++]=u[x++]}while(--y);x=i-w,v=M}}}else if(x+=d-y,y<A){A-=y;do{M[i++]=u[x++]}while(--y);x=i-w,v=M}for(;A>2;)M[i++]=v[x++],M[i++]=v[x++],M[i++]=v[x++],A-=3;A&&(M[i++]=v[x++],A>1&&(M[i++]=v[x++]))}else{x=i-w;do{M[i++]=M[x++],M[i++]=M[x++],M[i++]=M[x++],A-=3}while(A>2);A&&(M[i++]=M[x++],A>1&&(M[i++]=M[x++]))}break}if(64&y){e.msg="invalid distance code",z.mode=Za;break e}b=m[(65535&b)+(f&(1<<y)-1)]}}break}}while(n<s&&i<a);A=h>>3,n-=A,h-=A<<3,f&=(1<<h)-1,e.next_in=n,e.next_out=i,e.avail_in=n<s?s-n+5:5-(n-s),e.avail_out=i<a?a-i+257:257-(i-a),z.hold=f,z.bits=h};const Xa=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Wa=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Va=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),qa=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var Ka=(e,t,n,s,i,r,a,o)=>{const l=o.bits;let c,d,u,f,h,p,m=0,g=0,_=0,b=0,y=0,A=0,w=0,x=0,v=0,E=0,M=null;const z=new Uint16Array(16),B=new Uint16Array(16);let F,k,C,O=null;for(m=0;m<=15;m++)z[m]=0;for(g=0;g<s;g++)z[t[n+g]]++;for(y=l,b=15;b>=1&&0===z[b];b--);if(y>b&&(y=b),0===b)return i[r++]=20971520,i[r++]=20971520,o.bits=1,0;for(_=1;_<b&&0===z[_];_++);for(y<_&&(y=_),x=1,m=1;m<=15;m++)if(x<<=1,x-=z[m],x<0)return-1;if(x>0&&(0===e||1!==b))return-1;for(B[1]=0,m=1;m<15;m++)B[m+1]=B[m]+z[m];for(g=0;g<s;g++)0!==t[n+g]&&(a[B[t[n+g]]++]=g);if(0===e?(M=O=a,p=20):1===e?(M=Xa,O=Wa,p=257):(M=Va,O=qa,p=0),E=0,g=0,m=_,h=r,A=y,w=0,u=-1,v=1<<y,f=v-1,1===e&&v>852||2===e&&v>592)return 1;for(;;){F=m-w,a[g]+1<p?(k=0,C=a[g]):a[g]>=p?(k=O[a[g]-p],C=M[a[g]-p]):(k=96,C=0),c=1<<m-w,d=1<<A,_=d;do{d-=c,i[h+(E>>w)+d]=F<<24|k<<16|C}while(0!==d);for(c=1<<m-1;E&c;)c>>=1;if(0!==c?(E&=c-1,E+=c):E=0,g++,0==--z[m]){if(m===b)break;m=t[n+a[g]]}if(m>y&&(E&f)!==u){for(0===w&&(w=y),h+=_,A=m-w,x=1<<A;A+w<b&&(x-=z[A+w],!(x<=0));)A++,x<<=1;if(v+=1<<A,1===e&&v>852||2===e&&v>592)return 1;u=E&f,i[u]=y<<24|A<<16|h-r}}return 0!==E&&(i[h+E]=m-w<<24|64<<16),o.bits=y,0};const{Z_FINISH:$a,Z_BLOCK:eo,Z_TREES:to,Z_OK:no,Z_STREAM_END:so,Z_NEED_DICT:io,Z_STREAM_ERROR:ro,Z_DATA_ERROR:ao,Z_MEM_ERROR:oo,Z_BUF_ERROR:lo,Z_DEFLATED:co}=kr,uo=16180,fo=16190,ho=16191,po=16192,mo=16194,go=16199,_o=16200,bo=16206,yo=16209,Ao=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function wo(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const xo=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.mode<uo||t.mode>16211?1:0},vo=e=>{if(xo(e))return ro;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=uo,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,no},Eo=e=>{if(xo(e))return ro;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,vo(e)},Mo=(e,t)=>{let n;if(xo(e))return ro;const s=e.state;return t<0?(n=0,t=-t):(n=5+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?ro:(null!==s.window&&s.wbits!==t&&(s.window=null),s.wrap=n,s.wbits=t,Eo(e))},zo=(e,t)=>{if(!e)return ro;const n=new wo;e.state=n,n.strm=e,n.window=null,n.mode=uo;const s=Mo(e,t);return s!==no&&(e.state=null),s};let Bo,Fo,ko=!0;const Co=e=>{if(ko){Bo=new Int32Array(512),Fo=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(Ka(1,e.lens,0,288,Bo,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;Ka(2,e.lens,0,32,Fo,0,e.work,{bits:5}),ko=!1}e.lencode=Bo,e.lenbits=9,e.distcode=Fo,e.distbits=5},Oo=(e,t,n,s)=>{let i;const r=e.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),s>=r.wsize?(r.window.set(t.subarray(n-r.wsize,n),0),r.wnext=0,r.whave=r.wsize):(i=r.wsize-r.wnext,i>s&&(i=s),r.window.set(t.subarray(n-s,n-s+i),r.wnext),(s-=i)?(r.window.set(t.subarray(n-s,n),0),r.wnext=s,r.whave=r.wsize):(r.wnext+=i,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=i))),0};var Do={inflateReset:Eo,inflateReset2:Mo,inflateResetKeep:vo,inflateInit:e=>zo(e,15),inflateInit2:zo,inflate:(e,t)=>{let n,s,i,r,a,o,l,c,d,u,f,h,p,m,g,_,b,y,A,w,x,v,E=0;const M=new Uint8Array(4);let z,B;const F=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(xo(e)||!e.output||!e.input&&0!==e.avail_in)return ro;n=e.state,n.mode===ho&&(n.mode=po),a=e.next_out,i=e.output,l=e.avail_out,r=e.next_in,s=e.input,o=e.avail_in,c=n.hold,d=n.bits,u=o,f=l,v=no;e:for(;;)switch(n.mode){case uo:if(0===n.wrap){n.mode=po;break}for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(2&n.wrap&&35615===c){0===n.wbits&&(n.wbits=15),n.check=0,M[0]=255&c,M[1]=c>>>8&255,n.check=Br(n.check,M,2,0),c=0,d=0,n.mode=16181;break}if(n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&c)<<8)+(c>>8))%31){e.msg="incorrect header check",n.mode=yo;break}if((15&c)!==co){e.msg="unknown compression method",n.mode=yo;break}if(c>>>=4,d-=4,x=8+(15&c),0===n.wbits&&(n.wbits=x),x>15||x>n.wbits){e.msg="invalid window size",n.mode=yo;break}n.dmax=1<<n.wbits,n.flags=0,e.adler=n.check=1,n.mode=512&c?16189:ho,c=0,d=0;break;case 16181:for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(n.flags=c,(255&n.flags)!==co){e.msg="unknown compression method",n.mode=yo;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=yo;break}n.head&&(n.head.text=c>>8&1),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,n.check=Br(n.check,M,2,0)),c=0,d=0,n.mode=16182;case 16182:for(;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.head&&(n.head.time=c),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,M[2]=c>>>16&255,M[3]=c>>>24&255,n.check=Br(n.check,M,4,0)),c=0,d=0,n.mode=16183;case 16183:for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.head&&(n.head.xflags=255&c,n.head.os=c>>8),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,n.check=Br(n.check,M,2,0)),c=0,d=0,n.mode=16184;case 16184:if(1024&n.flags){for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.length=c,n.head&&(n.head.extra_len=c),512&n.flags&&4&n.wrap&&(M[0]=255&c,M[1]=c>>>8&255,n.check=Br(n.check,M,2,0)),c=0,d=0}else n.head&&(n.head.extra=null);n.mode=16185;case 16185:if(1024&n.flags&&(h=n.length,h>o&&(h=o),h&&(n.head&&(x=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Uint8Array(n.head.extra_len)),n.head.extra.set(s.subarray(r,r+h),x)),512&n.flags&&4&n.wrap&&(n.check=Br(n.check,s,h,r)),o-=h,r+=h,n.length-=h),n.length))break e;n.length=0,n.mode=16186;case 16186:if(2048&n.flags){if(0===o)break e;h=0;do{x=s[r+h++],n.head&&x&&n.length<65536&&(n.head.name+=String.fromCharCode(x))}while(x&&h<o);if(512&n.flags&&4&n.wrap&&(n.check=Br(n.check,s,h,r)),o-=h,r+=h,x)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=16187;case 16187:if(4096&n.flags){if(0===o)break e;h=0;do{x=s[r+h++],n.head&&x&&n.length<65536&&(n.head.comment+=String.fromCharCode(x))}while(x&&h<o);if(512&n.flags&&4&n.wrap&&(n.check=Br(n.check,s,h,r)),o-=h,r+=h,x)break e}else n.head&&(n.head.comment=null);n.mode=16188;case 16188:if(512&n.flags){for(;d<16;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(4&n.wrap&&c!==(65535&n.check)){e.msg="header crc mismatch",n.mode=yo;break}c=0,d=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=ho;break;case 16189:for(;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}e.adler=n.check=Ao(c),c=0,d=0,n.mode=fo;case fo:if(0===n.havedict)return e.next_out=a,e.avail_out=l,e.next_in=r,e.avail_in=o,n.hold=c,n.bits=d,io;e.adler=n.check=1,n.mode=ho;case ho:if(t===eo||t===to)break e;case po:if(n.last){c>>>=7&d,d-=7&d,n.mode=bo;break}for(;d<3;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}switch(n.last=1&c,c>>>=1,d-=1,3&c){case 0:n.mode=16193;break;case 1:if(Co(n),n.mode=go,t===to){c>>>=2,d-=2;break e}break;case 2:n.mode=16196;break;case 3:e.msg="invalid block type",n.mode=yo}c>>>=2,d-=2;break;case 16193:for(c>>>=7&d,d-=7&d;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if((65535&c)!=(c>>>16^65535)){e.msg="invalid stored block lengths",n.mode=yo;break}if(n.length=65535&c,c=0,d=0,n.mode=mo,t===to)break e;case mo:n.mode=16195;case 16195:if(h=n.length,h){if(h>o&&(h=o),h>l&&(h=l),0===h)break e;i.set(s.subarray(r,r+h),a),o-=h,r+=h,l-=h,a+=h,n.length-=h;break}n.mode=ho;break;case 16196:for(;d<14;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(n.nlen=257+(31&c),c>>>=5,d-=5,n.ndist=1+(31&c),c>>>=5,d-=5,n.ncode=4+(15&c),c>>>=4,d-=4,n.nlen>286||n.ndist>30){e.msg="too many length or distance symbols",n.mode=yo;break}n.have=0,n.mode=16197;case 16197:for(;n.have<n.ncode;){for(;d<3;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.lens[F[n.have++]]=7&c,c>>>=3,d-=3}for(;n.have<19;)n.lens[F[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,z={bits:n.lenbits},v=Ka(0,n.lens,0,19,n.lencode,0,n.work,z),n.lenbits=z.bits,v){e.msg="invalid code lengths set",n.mode=yo;break}n.have=0,n.mode=16198;case 16198:for(;n.have<n.nlen+n.ndist;){for(;E=n.lencode[c&(1<<n.lenbits)-1],g=E>>>24,_=E>>>16&255,b=65535&E,!(g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(b<16)c>>>=g,d-=g,n.lens[n.have++]=b;else{if(16===b){for(B=g+2;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(c>>>=g,d-=g,0===n.have){e.msg="invalid bit length repeat",n.mode=yo;break}x=n.lens[n.have-1],h=3+(3&c),c>>>=2,d-=2}else if(17===b){for(B=g+3;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=g,d-=g,x=0,h=3+(7&c),c>>>=3,d-=3}else{for(B=g+7;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=g,d-=g,x=0,h=11+(127&c),c>>>=7,d-=7}if(n.have+h>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=yo;break}for(;h--;)n.lens[n.have++]=x}}if(n.mode===yo)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=yo;break}if(n.lenbits=9,z={bits:n.lenbits},v=Ka(1,n.lens,0,n.nlen,n.lencode,0,n.work,z),n.lenbits=z.bits,v){e.msg="invalid literal/lengths set",n.mode=yo;break}if(n.distbits=6,n.distcode=n.distdyn,z={bits:n.distbits},v=Ka(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,z),n.distbits=z.bits,v){e.msg="invalid distances set",n.mode=yo;break}if(n.mode=go,t===to)break e;case go:n.mode=_o;case _o:if(o>=6&&l>=258){e.next_out=a,e.avail_out=l,e.next_in=r,e.avail_in=o,n.hold=c,n.bits=d,Ja(e,f),a=e.next_out,i=e.output,l=e.avail_out,r=e.next_in,s=e.input,o=e.avail_in,c=n.hold,d=n.bits,n.mode===ho&&(n.back=-1);break}for(n.back=0;E=n.lencode[c&(1<<n.lenbits)-1],g=E>>>24,_=E>>>16&255,b=65535&E,!(g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(_&&!(240&_)){for(y=g,A=_,w=b;E=n.lencode[w+((c&(1<<y+A)-1)>>y)],g=E>>>24,_=E>>>16&255,b=65535&E,!(y+g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=y,d-=y,n.back+=y}if(c>>>=g,d-=g,n.back+=g,n.length=b,0===_){n.mode=16205;break}if(32&_){n.back=-1,n.mode=ho;break}if(64&_){e.msg="invalid literal/length code",n.mode=yo;break}n.extra=15&_,n.mode=16201;case 16201:if(n.extra){for(B=n.extra;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.length+=c&(1<<n.extra)-1,c>>>=n.extra,d-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=16202;case 16202:for(;E=n.distcode[c&(1<<n.distbits)-1],g=E>>>24,_=E>>>16&255,b=65535&E,!(g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(!(240&_)){for(y=g,A=_,w=b;E=n.distcode[w+((c&(1<<y+A)-1)>>y)],g=E>>>24,_=E>>>16&255,b=65535&E,!(y+g<=d);){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}c>>>=y,d-=y,n.back+=y}if(c>>>=g,d-=g,n.back+=g,64&_){e.msg="invalid distance code",n.mode=yo;break}n.offset=b,n.extra=15&_,n.mode=16203;case 16203:if(n.extra){for(B=n.extra;d<B;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}n.offset+=c&(1<<n.extra)-1,c>>>=n.extra,d-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=yo;break}n.mode=16204;case 16204:if(0===l)break e;if(h=f-l,n.offset>h){if(h=n.offset-h,h>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=yo;break}h>n.wnext?(h-=n.wnext,p=n.wsize-h):p=n.wnext-h,h>n.length&&(h=n.length),m=n.window}else m=i,p=a-n.offset,h=n.length;h>l&&(h=l),l-=h,n.length-=h;do{i[a++]=m[p++]}while(--h);0===n.length&&(n.mode=_o);break;case 16205:if(0===l)break e;i[a++]=n.length,l--,n.mode=_o;break;case bo:if(n.wrap){for(;d<32;){if(0===o)break e;o--,c|=s[r++]<<d,d+=8}if(f-=l,e.total_out+=f,n.total+=f,4&n.wrap&&f&&(e.adler=n.check=n.flags?Br(n.check,i,f,a-f):Mr(n.check,i,f,a-f)),f=l,4&n.wrap&&(n.flags?c:Ao(c))!==n.check){e.msg="incorrect data check",n.mode=yo;break}c=0,d=0}n.mode=16207;case 16207:if(n.wrap&&n.flags){for(;d<32;){if(0===o)break e;o--,c+=s[r++]<<d,d+=8}if(4&n.wrap&&c!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=yo;break}c=0,d=0}n.mode=16208;case 16208:v=so;break e;case yo:v=ao;break e;case 16210:return oo;default:return ro}return e.next_out=a,e.avail_out=l,e.next_in=r,e.avail_in=o,n.hold=c,n.bits=d,(n.wsize||f!==e.avail_out&&n.mode<yo&&(n.mode<bo||t!==$a))&&Oo(e,e.output,e.next_out,f-e.avail_out),u-=e.avail_in,f-=e.avail_out,e.total_in+=u,e.total_out+=f,n.total+=f,4&n.wrap&&f&&(e.adler=n.check=n.flags?Br(n.check,i,f,e.next_out-f):Mr(n.check,i,f,e.next_out-f)),e.data_type=n.bits+(n.last?64:0)+(n.mode===ho?128:0)+(n.mode===go||n.mode===mo?256:0),(0===u&&0===f||t===$a)&&v===no&&(v=lo),v},inflateEnd:e=>{if(xo(e))return ro;let t=e.state;return t.window&&(t.window=null),e.state=null,no},inflateGetHeader:(e,t)=>{if(xo(e))return ro;const n=e.state;return 2&n.wrap?(n.head=t,t.done=!1,no):ro},inflateSetDictionary:(e,t)=>{const n=t.length;let s,i,r;return xo(e)?ro:(s=e.state,0!==s.wrap&&s.mode!==fo?ro:s.mode===fo&&(i=1,i=Mr(i,t,n,0),i!==s.check)?ao:(r=Oo(e,t,n,n),r?(s.mode=16210,oo):(s.havedict=1,no)))},inflateInfo:"pako inflate (from Nodeca project)"},Lo=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const To=Object.prototype.toString,{Z_NO_FLUSH:So,Z_FINISH:No,Z_OK:Po,Z_STREAM_END:Io,Z_NEED_DICT:Yo,Z_STREAM_ERROR:Qo,Z_DATA_ERROR:jo,Z_MEM_ERROR:Ho}=kr;function Uo(e){this.options=Fa.assign({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Da,this.strm.avail_out=0;let n=Do.inflateInit2(this.strm,t.windowBits);if(n!==Po)throw new Error(Fr[n]);if(this.header=new Lo,Do.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=Oa.string2buf(t.dictionary):"[object ArrayBuffer]"===To.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=Do.inflateSetDictionary(this.strm,t.dictionary),n!==Po)))throw new Error(Fr[n])}function Ro(e,t){const n=new Uo(t);if(n.push(e),n.err)throw n.msg||Fr[n.err];return n.result}Uo.prototype.push=function(e,t){const n=this.strm,s=this.options.chunkSize,i=this.options.dictionary;let r,a,o;if(this.ended)return!1;for(a=t===~~t?t:!0===t?No:So,"[object ArrayBuffer]"===To.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;){for(0===n.avail_out&&(n.output=new Uint8Array(s),n.next_out=0,n.avail_out=s),r=Do.inflate(n,a),r===Yo&&i&&(r=Do.inflateSetDictionary(n,i),r===Po?r=Do.inflate(n,a):r===jo&&(r=Yo));n.avail_in>0&&r===Io&&n.state.wrap>0&&0!==e[n.next_in];)Do.inflateReset(n),r=Do.inflate(n,a);switch(r){case Qo:case jo:case Yo:case Ho:return this.onEnd(r),this.ended=!0,!1}if(o=n.avail_out,n.next_out&&(0===n.avail_out||r===Io))if("string"===this.options.to){let e=Oa.utf8border(n.output,n.next_out),t=n.next_out-e,i=Oa.buf2string(n.output,e);n.next_out=t,n.avail_out=s-t,t&&n.output.set(n.output.subarray(e,e+t),0),this.onData(i)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(r!==Po||0!==o){if(r===Io)return r=Do.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(0===n.avail_in)break}}return!0},Uo.prototype.onData=function(e){this.chunks.push(e)},Uo.prototype.onEnd=function(e){e===Po&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Fa.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Go={Inflate:Uo,inflate:Ro,inflateRaw:function(e,t){return(t=t||{}).raw=!0,Ro(e,t)},ungzip:Ro,constants:kr};const{Deflate:Zo,deflate:Jo,deflateRaw:Xo,gzip:Wo}=Ga,{Inflate:Vo,inflate:qo,inflateRaw:Ko,ungzip:$o}=Go;var el=qo;let tl;i(7989),new class{constructor(){this.logs=[]}enable(){tl=(...e)=>{this.logs.push([(new Date).toISOString(),...e])}}getLogs(e=0){return e?this.logs.slice(-e):this.logs}clear(e=this.logs.length){this.logs=this.logs.slice(e)}};var nl=i(3322),sl=i(8891).Buffer;class il{constructor(e){if(this.buffer=e,e.length!==il.SIZE)throw new Error(`Expected buffer to have length ${il.SIZE} but was ${e.length}`)}toBuffer(){return this.buffer}static fromBuffer(e){const t=Js.asReader(e);return new il(t.readBytes(il.SIZE))}equals(e){return this.buffer.equals(e.buffer)}isZero(){return this.buffer.equals(sl.alloc(32,0))}toString(){return Ds(this.buffer)}toJSON(){return this.toString()}toBigInt(){return function(e,t=0,n=32){return{elem:p(e.subarray(t,t+n)),adv:n}}(this.buffer,0,il.SIZE).elem}static fromBigInt(e){return new il(bi(e,il.SIZE))}static fromField(e){return new il(bi(e.toBigInt()))}static fromBuffer28(e){if(28!=e.length)throw new Error("Expected Buffer32 input buffer to be 28 bytes");const t=sl.concat([sl.alloc(this.SIZE-28),e]);return new il(t)}static fromString(e){if(e.startsWith("0x")&&(e=e.slice(2)),64!==e.length)throw new Error(`Expected string to be 64 characters long, but was ${e.length}`);return new il(sl.from(e,"hex"))}static fromNumber(e){return new il(bi(BigInt(e),il.SIZE))}static random(){return new il(sl.from(ot(il.SIZE)))}}function rl(e){return e instanceof il&&(e=e.buffer),new nl.vm(256).update(e).digest()}function al(e){const t=new nl.vm(256);return t.reset(),t.update(e),t.digest("hex")}il.SIZE=32,il.ZERO=new il(sl.alloc(il.SIZE));var ol=i(6460),ll=i(8891).Buffer;function cl(e){return ll.from(ol.sha256().update(e).digest())}function dl(e){return function(e){if(32!==e.length)throw new Error("Buffer to truncate must be 32 bytes");return oi.concat([oi.alloc(1),e.subarray(0,31)])}(cl(e))}var ul=i(8891).Buffer;const fl=e=>{const t=_i(e);return ai.fromBufferReduce((e=>ul.from(ol.sha512().update(e).digest()))(t))};var hl=i(8891).Buffer;async function pl(e,t=0){const n=gi(e),s=(await c.initSingleton()).pedersenHash(n.map((e=>new d(e.toBuffer()))),t);return si.fromBuffer(hl.from(s.toBuffer()))}function ml(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`positive integer expected, not ${e}`)}function gl(e,...t){if(!((n=e)instanceof Uint8Array||null!=n&&"object"==typeof n&&"Uint8Array"===n.constructor.name))throw new Error("Uint8Array expected");var n;if(t.length>0&&!t.includes(e.length))throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`)}function _l(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}const bl="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,yl=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),Al=(e,t)=>e<<32-t|e>>>t;function wl(e){return"string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),gl(e),e}new Uint8Array(new Uint32Array([287454020]).buffer)[0];class xl{clone(){return this._cloneInto()}}function vl(e){const t=t=>e().update(wl(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}function El(e=32){if(bl&&"function"==typeof bl.getRandomValues)return bl.getRandomValues(new Uint8Array(e));throw new Error("crypto.getRandomValues must be defined")}const Ml=(e,t,n)=>e&t^e&n^t&n;class zl extends xl{constructor(e,t,n,s){super(),this.blockLen=e,this.outputLen=t,this.padOffset=n,this.isLE=s,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=yl(this.buffer)}update(e){_l(this);const{view:t,buffer:n,blockLen:s}=this,i=(e=wl(e)).length;for(let r=0;r<i;){const a=Math.min(s-this.pos,i-r);if(a!==s)n.set(e.subarray(r,r+a),this.pos),this.pos+=a,r+=a,this.pos===s&&(this.process(t,0),this.pos=0);else{const t=yl(e);for(;s<=i-r;r+=s)this.process(t,r)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){_l(this),function(e,t){gl(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}(e,this),this.finished=!0;const{buffer:t,view:n,blockLen:s,isLE:i}=this;let{pos:r}=this;t[r++]=128,this.buffer.subarray(r).fill(0),this.padOffset>s-r&&(this.process(n,0),r=0);for(let e=r;e<s;e++)t[e]=0;!function(e,t,n,s){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,n,s);const i=BigInt(32),r=BigInt(4294967295),a=Number(n>>i&r),o=Number(n&r),l=s?4:0,c=s?0:4;e.setUint32(t+l,a,s),e.setUint32(t+c,o,s)}(n,s-8,BigInt(8*this.length),i),this.process(n,0);const a=yl(e),o=this.outputLen;if(o%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const l=o/4,c=this.get();if(l>c.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<l;e++)a.setUint32(4*e,c[e],i)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const n=e.slice(0,t);return this.destroy(),n}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:n,length:s,finished:i,destroyed:r,pos:a}=this;return e.length=s,e.pos=a,e.finished=i,e.destroyed=r,s%t&&e.buffer.set(n),e}}const Bl=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Fl=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),kl=new Uint32Array(64);class Cl extends zl{constructor(){super(64,32,8,!1),this.A=0|Fl[0],this.B=0|Fl[1],this.C=0|Fl[2],this.D=0|Fl[3],this.E=0|Fl[4],this.F=0|Fl[5],this.G=0|Fl[6],this.H=0|Fl[7]}get(){const{A:e,B:t,C:n,D:s,E:i,F:r,G:a,H:o}=this;return[e,t,n,s,i,r,a,o]}set(e,t,n,s,i,r,a,o){this.A=0|e,this.B=0|t,this.C=0|n,this.D=0|s,this.E=0|i,this.F=0|r,this.G=0|a,this.H=0|o}process(e,t){for(let n=0;n<16;n++,t+=4)kl[n]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=kl[e-15],n=kl[e-2],s=Al(t,7)^Al(t,18)^t>>>3,i=Al(n,17)^Al(n,19)^n>>>10;kl[e]=i+kl[e-7]+s+kl[e-16]|0}let{A:n,B:s,C:i,D:r,E:a,F:o,G:l,H:c}=this;for(let e=0;e<64;e++){const t=c+(Al(a,6)^Al(a,11)^Al(a,25))+((d=a)&o^~d&l)+Bl[e]+kl[e]|0,u=(Al(n,2)^Al(n,13)^Al(n,22))+Ml(n,s,i)|0;c=l,l=o,o=a,a=r+t|0,r=i,i=s,s=n,n=t+u|0}var d;n=n+this.A|0,s=s+this.B|0,i=i+this.C|0,r=r+this.D|0,a=a+this.E|0,o=o+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(n,s,i,r,a,o,l,c)}roundClean(){kl.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Ol=vl((()=>new Cl)),Dl=(BigInt(0),BigInt(1)),Ll=BigInt(2);function Tl(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name}function Sl(e){if(!Tl(e))throw new Error("Uint8Array expected")}const Nl=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function Pl(e){Sl(e);let t="";for(let n=0;n<e.length;n++)t+=Nl[e[n]];return t}function Il(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);return BigInt(""===e?"0":`0x${e}`)}const Yl={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function Ql(e){return e>=Yl._0&&e<=Yl._9?e-Yl._0:e>=Yl._A&&e<=Yl._F?e-(Yl._A-10):e>=Yl._a&&e<=Yl._f?e-(Yl._a-10):void 0}function jl(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const t=e.length,n=t/2;if(t%2)throw new Error("padded hex string expected, got unpadded hex of length "+t);const s=new Uint8Array(n);for(let t=0,i=0;t<n;t++,i+=2){const n=Ql(e.charCodeAt(i)),r=Ql(e.charCodeAt(i+1));if(void 0===n||void 0===r){const t=e[i]+e[i+1];throw new Error('hex string expected, got non-hex character "'+t+'" at index '+i)}s[t]=16*n+r}return s}function Hl(e){return Il(Pl(e))}function Ul(e){return Sl(e),Il(Pl(Uint8Array.from(e).reverse()))}function Rl(e,t){return jl(e.toString(16).padStart(2*t,"0"))}function Gl(e,t){return Rl(e,t).reverse()}function Zl(e,t,n){let s;if("string"==typeof t)try{s=jl(t)}catch(n){throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${n}`)}else{if(!Tl(t))throw new Error(`${e} must be hex string or Uint8Array`);s=Uint8Array.from(t)}const i=s.length;if("number"==typeof n&&i!==n)throw new Error(`${e} expected ${n} bytes, got ${i}`);return s}function Jl(...e){let t=0;for(let n=0;n<e.length;n++){const s=e[n];Sl(s),t+=s.length}const n=new Uint8Array(t);for(let t=0,s=0;t<e.length;t++){const i=e[t];n.set(i,s),s+=i.length}return n}const Xl=e=>(Ll<<BigInt(e-1))-Dl,Wl=e=>new Uint8Array(e),Vl=e=>Uint8Array.from(e);function ql(e,t,n){if("number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof t||t<2)throw new Error("qByteLen must be a number");if("function"!=typeof n)throw new Error("hmacFn must be a function");let s=Wl(e),i=Wl(e),r=0;const a=()=>{s.fill(1),i.fill(0),r=0},o=(...e)=>n(i,s,...e),l=(e=Wl())=>{i=o(Vl([0]),e),s=o(),0!==e.length&&(i=o(Vl([1]),e),s=o())},c=()=>{if(r++>=1e3)throw new Error("drbg: tried 1000 values");let e=0;const n=[];for(;e<t;){s=o();const t=s.slice();n.push(t),e+=s.length}return Jl(...n)};return(e,t)=>{let n;for(a(),l(e);!(n=t(c()));)l();return a(),n}}const Kl={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||Tl(e),isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};function $l(e,t,n={}){const s=(t,n,s)=>{const i=Kl[n];if("function"!=typeof i)throw new Error(`Invalid validator "${n}", expected function`);const r=e[t];if(!(s&&void 0===r||i(r,e)))throw new Error(`Invalid param ${String(t)}=${r} (${typeof r}), expected ${n}`)};for(const[e,n]of Object.entries(t))s(e,n,!1);for(const[e,t]of Object.entries(n))s(e,t,!0);return e}const ec=BigInt(0),tc=BigInt(1),nc=BigInt(2),sc=BigInt(3),ic=BigInt(4),rc=BigInt(5),ac=BigInt(8);function oc(e,t){const n=e%t;return n>=ec?n:t+n}function lc(e,t,n){if(n<=ec||t<ec)throw new Error("Expected power/modulo > 0");if(n===tc)return ec;let s=tc;for(;t>ec;)t&tc&&(s=s*e%n),e=e*e%n,t>>=tc;return s}function cc(e,t,n){let s=e;for(;t-- >ec;)s*=s,s%=n;return s}function dc(e,t){if(e===ec||t<=ec)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=oc(e,t),s=t,i=ec,r=tc,a=tc,o=ec;for(;n!==ec;){const e=s/n,t=s%n,l=i-a*e,c=r-o*e;s=n,n=t,i=a,r=o,a=l,o=c}if(s!==tc)throw new Error("invert: does not exist");return oc(i,t)}BigInt(9),BigInt(16);const uc=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function fc(e,t){const n=void 0!==t?t:e.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function hc(e){if("bigint"!=typeof e)throw new Error("field order must be bigint");const t=e.toString(2).length;return Math.ceil(t/8)}function pc(e){const t=hc(e);return t+Math.ceil(t/2)}class mc extends xl{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");ml(e.outputLen),ml(e.blockLen)}(e);const n=wl(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const s=this.blockLen,i=new Uint8Array(s);i.set(n.length>s?e.create().update(n).digest():n);for(let e=0;e<i.length;e++)i[e]^=54;this.iHash.update(i),this.oHash=e.create();for(let e=0;e<i.length;e++)i[e]^=106;this.oHash.update(i),i.fill(0)}update(e){return _l(this),this.iHash.update(e),this}digestInto(e){_l(this),gl(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:n,finished:s,destroyed:i,blockLen:r,outputLen:a}=this;return e.finished=s,e.destroyed=i,e.blockLen=r,e.outputLen=a,e.oHash=t._cloneInto(e.oHash),e.iHash=n._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const gc=(e,t,n)=>new mc(e,t).update(n).digest();gc.create=(e,t)=>new mc(e,t);const _c=BigInt(0),bc=BigInt(1);function yc(e){return $l(e.Fp,uc.reduce(((e,t)=>(e[t]="function",e)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"})),$l(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...fc(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}const{bytesToNumberBE:Ac,hexToBytes:wc}=e,xc={Err:class extends Error{constructor(e=""){super(e)}},_parseInt(e){const{Err:t}=xc;if(e.length<2||2!==e[0])throw new t("Invalid signature integer tag");const n=e[1],s=e.subarray(2,n+2);if(!n||s.length!==n)throw new t("Invalid signature integer: wrong length");if(128&s[0])throw new t("Invalid signature integer: negative");if(0===s[0]&&!(128&s[1]))throw new t("Invalid signature integer: unnecessary leading zero");return{d:Ac(s),l:e.subarray(n+2)}},toSig(e){const{Err:t}=xc,n="string"==typeof e?wc(e):e;Sl(n);let s=n.length;if(s<2||48!=n[0])throw new t("Invalid signature tag");if(n[1]!==s-2)throw new t("Invalid signature: incorrect length");const{d:i,l:r}=xc._parseInt(n.subarray(2)),{d:a,l:o}=xc._parseInt(r);if(o.length)throw new t("Invalid signature: left bytes after parsing");return{r:i,s:a}},hexFromSig(e){const t=e=>8&Number.parseInt(e[0],16)?"00"+e:e,n=e=>{const t=e.toString(16);return 1&t.length?`0${t}`:t},s=t(n(e.s)),i=t(n(e.r)),r=s.length/2,a=i.length/2,o=n(r),l=n(a);return`30${n(a+r+4)}02${l}${i}02${o}${s}`}},vc=BigInt(0),Ec=BigInt(1),Mc=(BigInt(2),BigInt(3));function zc(e){const t=function(e){const t=yc(e);return $l(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:n,n:s}=t,i=n.BYTES+1,r=2*n.BYTES+1;function a(e){return oc(e,s)}function o(e){return dc(e,s)}const{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:d,isWithinCurveOrder:u}=function(e){const t=function(e){const t=yc(e);$l(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:n,Fp:s,a:i}=t;if(n){if(!s.eql(i,s.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof n||"bigint"!=typeof n.beta||"function"!=typeof n.splitScalar)throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:n}=t,s=t.toBytes||((e,t,s)=>{const i=t.toAffine();return Jl(Uint8Array.from([4]),n.toBytes(i.x),n.toBytes(i.y))}),i=t.fromBytes||(e=>{const t=e.subarray(1);return{x:n.fromBytes(t.subarray(0,n.BYTES)),y:n.fromBytes(t.subarray(n.BYTES,2*n.BYTES))}});function r(e){const{a:s,b:i}=t,r=n.sqr(e),a=n.mul(r,e);return n.add(n.add(a,n.mul(e,s)),i)}if(!n.eql(n.sqr(t.Gy),r(t.Gx)))throw new Error("bad generator point: equation left != right");function a(e){return"bigint"==typeof e&&vc<e&&e<t.n}function o(e){if(!a(e))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function l(e){const{allowedPrivateKeyLengths:n,nByteLength:s,wrapPrivateKey:i,n:r}=t;if(n&&"bigint"!=typeof e){if(Tl(e)&&(e=Pl(e)),"string"!=typeof e||!n.includes(e.length))throw new Error("Invalid key");e=e.padStart(2*s,"0")}let a;try{a="bigint"==typeof e?e:Hl(Zl("private key",e,s))}catch(t){throw new Error(`private key must be ${s} bytes, hex or bigint, not ${typeof e}`)}return i&&(a=oc(a,r)),o(a),a}const c=new Map;function d(e){if(!(e instanceof u))throw new Error("ProjectivePoint expected")}class u{constructor(e,t,s){if(this.px=e,this.py=t,this.pz=s,null==e||!n.isValid(e))throw new Error("x required");if(null==t||!n.isValid(t))throw new Error("y required");if(null==s||!n.isValid(s))throw new Error("z required")}static fromAffine(e){const{x:t,y:s}=e||{};if(!e||!n.isValid(t)||!n.isValid(s))throw new Error("invalid affine point");if(e instanceof u)throw new Error("projective point not allowed");const i=e=>n.eql(e,n.ZERO);return i(t)&&i(s)?u.ZERO:new u(t,s,n.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(u.fromAffine)}static fromHex(e){const t=u.fromAffine(i(Zl("pointHex",e)));return t.assertValidity(),t}static fromPrivateKey(e){return u.BASE.multiply(l(e))}_setWindowSize(e){this._WINDOW_SIZE=e,c.delete(this)}assertValidity(){if(this.is0()){if(t.allowInfinityPoint&&!n.is0(this.py))return;throw new Error("bad point: ZERO")}const{x:e,y:s}=this.toAffine();if(!n.isValid(e)||!n.isValid(s))throw new Error("bad point: x or y not FE");const i=n.sqr(s),a=r(e);if(!n.eql(i,a))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y:e}=this.toAffine();if(n.isOdd)return!n.isOdd(e);throw new Error("Field doesn't support isOdd")}equals(e){d(e);const{px:t,py:s,pz:i}=this,{px:r,py:a,pz:o}=e,l=n.eql(n.mul(t,o),n.mul(r,i)),c=n.eql(n.mul(s,o),n.mul(a,i));return l&&c}negate(){return new u(this.px,n.neg(this.py),this.pz)}double(){const{a:e,b:s}=t,i=n.mul(s,Mc),{px:r,py:a,pz:o}=this;let l=n.ZERO,c=n.ZERO,d=n.ZERO,f=n.mul(r,r),h=n.mul(a,a),p=n.mul(o,o),m=n.mul(r,a);return m=n.add(m,m),d=n.mul(r,o),d=n.add(d,d),l=n.mul(e,d),c=n.mul(i,p),c=n.add(l,c),l=n.sub(h,c),c=n.add(h,c),c=n.mul(l,c),l=n.mul(m,l),d=n.mul(i,d),p=n.mul(e,p),m=n.sub(f,p),m=n.mul(e,m),m=n.add(m,d),d=n.add(f,f),f=n.add(d,f),f=n.add(f,p),f=n.mul(f,m),c=n.add(c,f),p=n.mul(a,o),p=n.add(p,p),f=n.mul(p,m),l=n.sub(l,f),d=n.mul(p,h),d=n.add(d,d),d=n.add(d,d),new u(l,c,d)}add(e){d(e);const{px:s,py:i,pz:r}=this,{px:a,py:o,pz:l}=e;let c=n.ZERO,f=n.ZERO,h=n.ZERO;const p=t.a,m=n.mul(t.b,Mc);let g=n.mul(s,a),_=n.mul(i,o),b=n.mul(r,l),y=n.add(s,i),A=n.add(a,o);y=n.mul(y,A),A=n.add(g,_),y=n.sub(y,A),A=n.add(s,r);let w=n.add(a,l);return A=n.mul(A,w),w=n.add(g,b),A=n.sub(A,w),w=n.add(i,r),c=n.add(o,l),w=n.mul(w,c),c=n.add(_,b),w=n.sub(w,c),h=n.mul(p,A),c=n.mul(m,b),h=n.add(c,h),c=n.sub(_,h),h=n.add(_,h),f=n.mul(c,h),_=n.add(g,g),_=n.add(_,g),b=n.mul(p,b),A=n.mul(m,A),_=n.add(_,b),b=n.sub(g,b),b=n.mul(p,b),A=n.add(A,b),g=n.mul(_,A),f=n.add(f,g),g=n.mul(w,A),c=n.mul(y,c),c=n.sub(c,g),g=n.mul(y,_),h=n.mul(w,h),h=n.add(h,g),new u(c,f,h)}subtract(e){return this.add(e.negate())}is0(){return this.equals(u.ZERO)}wNAF(e){return h.wNAFCached(this,c,e,(e=>{const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(u.fromAffine)}))}multiplyUnsafe(e){const s=u.ZERO;if(e===vc)return s;if(o(e),e===Ec)return this;const{endo:i}=t;if(!i)return h.unsafeLadder(this,e);let{k1neg:r,k1:a,k2neg:l,k2:c}=i.splitScalar(e),d=s,f=s,p=this;for(;a>vc||c>vc;)a&Ec&&(d=d.add(p)),c&Ec&&(f=f.add(p)),p=p.double(),a>>=Ec,c>>=Ec;return r&&(d=d.negate()),l&&(f=f.negate()),f=new u(n.mul(f.px,i.beta),f.py,f.pz),d.add(f)}multiply(e){o(e);let s,i,r=e;const{endo:a}=t;if(a){const{k1neg:e,k1:t,k2neg:o,k2:l}=a.splitScalar(r);let{p:c,f:d}=this.wNAF(t),{p:f,f:p}=this.wNAF(l);c=h.constTimeNegate(e,c),f=h.constTimeNegate(o,f),f=new u(n.mul(f.px,a.beta),f.py,f.pz),s=c.add(f),i=d.add(p)}else{const{p:e,f:t}=this.wNAF(r);s=e,i=t}return u.normalizeZ([s,i])[0]}multiplyAndAddUnsafe(e,t,n){const s=u.BASE,i=(e,t)=>t!==vc&&t!==Ec&&e.equals(s)?e.multiply(t):e.multiplyUnsafe(t),r=i(this,t).add(i(e,n));return r.is0()?void 0:r}toAffine(e){const{px:t,py:s,pz:i}=this,r=this.is0();null==e&&(e=r?n.ONE:n.inv(i));const a=n.mul(t,e),o=n.mul(s,e),l=n.mul(i,e);if(r)return{x:n.ZERO,y:n.ZERO};if(!n.eql(l,n.ONE))throw new Error("invZ was invalid");return{x:a,y:o}}isTorsionFree(){const{h:e,isTorsionFree:n}=t;if(e===Ec)return!0;if(n)return n(u,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:e,clearCofactor:n}=t;return e===Ec?this:n?n(u,this):this.multiplyUnsafe(t.h)}toRawBytes(e=!0){return this.assertValidity(),s(u,this,e)}toHex(e=!0){return Pl(this.toRawBytes(e))}}u.BASE=new u(t.Gx,t.Gy,n.ONE),u.ZERO=new u(n.ZERO,n.ONE,n.ZERO);const f=t.nBitLength,h=function(e,t){const n=(e,t)=>{const n=t.negate();return e?n:t},s=e=>({windows:Math.ceil(t/e)+1,windowSize:2**(e-1)});return{constTimeNegate:n,unsafeLadder(t,n){let s=e.ZERO,i=t;for(;n>_c;)n&bc&&(s=s.add(i)),i=i.double(),n>>=bc;return s},precomputeWindow(e,t){const{windows:n,windowSize:i}=s(t),r=[];let a=e,o=a;for(let e=0;e<n;e++){o=a,r.push(o);for(let e=1;e<i;e++)o=o.add(a),r.push(o);a=o.double()}return r},wNAF(t,i,r){const{windows:a,windowSize:o}=s(t);let l=e.ZERO,c=e.BASE;const d=BigInt(2**t-1),u=2**t,f=BigInt(t);for(let e=0;e<a;e++){const t=e*o;let s=Number(r&d);r>>=f,s>o&&(s-=u,r+=bc);const a=t,h=t+Math.abs(s)-1,p=e%2!=0,m=s<0;0===s?c=c.add(n(p,i[a])):l=l.add(n(m,i[h]))}return{p:l,f:c}},wNAFCached(e,t,n,s){const i=e._WINDOW_SIZE||1;let r=t.get(e);return r||(r=this.precomputeWindow(e,i),1!==i&&t.set(e,s(r))),this.wNAF(i,r,n)}}}(u,t.endo?Math.ceil(f/2):f);return{CURVE:t,ProjectivePoint:u,normPrivateKeyToScalar:l,weierstrassEquation:r,isWithinCurveOrder:a}}({...t,toBytes(e,t,s){const i=t.toAffine(),r=n.toBytes(i.x),a=Jl;return s?a(Uint8Array.from([t.hasEvenY()?2:3]),r):a(Uint8Array.from([4]),r,n.toBytes(i.y))},fromBytes(e){const t=e.length,s=e[0],a=e.subarray(1);if(t!==i||2!==s&&3!==s){if(t===r&&4===s)return{x:n.fromBytes(a.subarray(0,n.BYTES)),y:n.fromBytes(a.subarray(n.BYTES,2*n.BYTES))};throw new Error(`Point of length ${t} was invalid. Expected ${i} compressed bytes or ${r} uncompressed bytes`)}{const e=Hl(a);if(!(vc<(o=e)&&o<n.ORDER))throw new Error("Point is not on curve");const t=d(e);let i;try{i=n.sqrt(t)}catch(e){const t=e instanceof Error?": "+e.message:"";throw new Error("Point is not on curve"+t)}return!(1&~s)!=((i&Ec)===Ec)&&(i=n.neg(i)),{x:e,y:i}}var o}}),f=e=>Pl(Rl(e,t.nByteLength));function h(e){return e>s>>Ec}const p=(e,t,n)=>Hl(e.slice(t,n));class m{constructor(e,t,n){this.r=e,this.s=t,this.recovery=n,this.assertValidity()}static fromCompact(e){const n=t.nByteLength;return e=Zl("compactSignature",e,2*n),new m(p(e,0,n),p(e,n,2*n))}static fromDER(e){const{r:t,s:n}=xc.toSig(Zl("DER",e));return new m(t,n)}assertValidity(){if(!u(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!u(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(e){return new m(this.r,this.s,e)}recoverPublicKey(e){const{r:s,s:i,recovery:r}=this,c=y(Zl("msgHash",e));if(null==r||![0,1,2,3].includes(r))throw new Error("recovery id invalid");const d=2===r||3===r?s+t.n:s;if(d>=n.ORDER)throw new Error("recovery id 2 or 3 invalid");const u=1&r?"03":"02",h=l.fromHex(u+f(d)),p=o(d),m=a(-c*p),g=a(i*p),_=l.BASE.multiplyAndAddUnsafe(h,m,g);if(!_)throw new Error("point at infinify");return _.assertValidity(),_}hasHighS(){return h(this.s)}normalizeS(){return this.hasHighS()?new m(this.r,a(-this.s),this.recovery):this}toDERRawBytes(){return jl(this.toDERHex())}toDERHex(){return xc.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return jl(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}const g={isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,randomPrivateKey:()=>{const e=pc(t.n);return function(e,t,n=!1){const s=e.length,i=hc(t),r=pc(t);if(s<16||s<r||s>1024)throw new Error(`expected ${r}-1024 bytes of input, got ${s}`);const a=oc(n?Hl(e):Ul(e),t-tc)+tc;return n?Gl(a,i):Rl(a,i)}(t.randomBytes(e),t.n)},precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};function _(e){const t=Tl(e),n="string"==typeof e,s=(t||n)&&e.length;return t?s===i||s===r:n?s===2*i||s===2*r:e instanceof l}const b=t.bits2int||function(e){const n=Hl(e),s=8*e.length-t.nBitLength;return s>0?n>>BigInt(s):n},y=t.bits2int_modN||function(e){return a(b(e))},A=Xl(t.nBitLength);function w(e){if("bigint"!=typeof e)throw new Error("bigint expected");if(!(vc<=e&&e<A))throw new Error(`bigint expected < 2^${t.nBitLength}`);return Rl(e,t.nByteLength)}const x={lowS:t.lowS,prehash:!1},v={lowS:t.lowS,prehash:!1};return l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:function(e,t,n=!0){if(_(e))throw new Error("first arg must be private key");if(!_(t))throw new Error("second arg must be public key");return l.fromHex(t).multiply(c(e)).toRawBytes(n)},sign:function(e,s,i=x){const{seed:r,k2sig:d}=function(e,s,i=x){if(["recovered","canonical"].some((e=>e in i)))throw new Error("sign() legacy options not supported");const{hash:r,randomBytes:d}=t;let{lowS:f,prehash:p,extraEntropy:g}=i;null==f&&(f=!0),e=Zl("msgHash",e),p&&(e=Zl("prehashed msgHash",r(e)));const _=y(e),A=c(s),v=[w(A),w(_)];if(null!=g&&!1!==g){const e=!0===g?d(n.BYTES):g;v.push(Zl("extraEntropy",e))}const E=Jl(...v),M=_;return{seed:E,k2sig:function(e){const t=b(e);if(!u(t))return;const n=o(t),s=l.BASE.multiply(t).toAffine(),i=a(s.x);if(i===vc)return;const r=a(n*a(M+i*A));if(r===vc)return;let c=(s.x===i?0:2)|Number(s.y&Ec),d=r;return f&&h(r)&&(d=function(e){return h(e)?a(-e):e}(r),c^=1),new m(i,d,c)}}}(e,s,i),f=t;return ql(f.hash.outputLen,f.nByteLength,f.hmac)(r,d)},verify:function(e,n,s,i=v){const r=e;if(n=Zl("msgHash",n),s=Zl("publicKey",s),"strict"in i)throw new Error("options.strict was renamed to lowS");const{lowS:c,prehash:d}=i;let u,f;try{if("string"==typeof r||Tl(r))try{u=m.fromDER(r)}catch(e){if(!(e instanceof xc.Err))throw e;u=m.fromCompact(r)}else{if("object"!=typeof r||"bigint"!=typeof r.r||"bigint"!=typeof r.s)throw new Error("PARSE");{const{r:e,s:t}=r;u=new m(e,t)}}f=l.fromHex(s)}catch(e){if("PARSE"===e.message)throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(c&&u.hasHighS())return!1;d&&(n=t.hash(n));const{r:h,s:p}=u,g=y(n),_=o(p),b=a(g*_),A=a(h*_),w=l.BASE.multiplyAndAddUnsafe(f,b,A)?.toAffine();return!!w&&a(w.x)===h},ProjectivePoint:l,Signature:m,utils:g}}function Bc(e){return{hash:e,hmac:(t,...n)=>gc(e,t,function(...e){let t=0;for(let n=0;n<e.length;n++){const s=e[n];gl(s),t+=s.length}const n=new Uint8Array(t);for(let t=0,s=0;t<e.length;t++){const i=e[t];n.set(i,s),s+=i.length}return n}(...n)),randomBytes:El}}BigInt(4);const Fc=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),kc=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Cc=BigInt(1),Oc=BigInt(2),Dc=(e,t)=>(e+t/Oc)/t;const Lc=function(e,t,n=!1,s={}){if(e<=ec)throw new Error(`Expected Field ORDER > 0, got ${e}`);const{nBitLength:i,nByteLength:r}=fc(e,t);if(r>2048)throw new Error("Field lengths over 2048 bytes are not supported");const a=function(e){if(e%ic===sc){const t=(e+tc)/ic;return function(e,n){const s=e.pow(n,t);if(!e.eql(e.sqr(s),n))throw new Error("Cannot find square root");return s}}if(e%ac===rc){const t=(e-rc)/ac;return function(e,n){const s=e.mul(n,nc),i=e.pow(s,t),r=e.mul(n,i),a=e.mul(e.mul(r,nc),i),o=e.mul(r,e.sub(a,e.ONE));if(!e.eql(e.sqr(o),n))throw new Error("Cannot find square root");return o}}return function(e){const t=(e-tc)/nc;let n,s,i;for(n=e-tc,s=0;n%nc===ec;n/=nc,s++);for(i=nc;i<e&&lc(i,t,e)!==e-tc;i++);if(1===s){const t=(e+tc)/ic;return function(e,n){const s=e.pow(n,t);if(!e.eql(e.sqr(s),n))throw new Error("Cannot find square root");return s}}const r=(n+tc)/nc;return function(e,a){if(e.pow(a,t)===e.neg(e.ONE))throw new Error("Cannot find square root");let o=s,l=e.pow(e.mul(e.ONE,i),n),c=e.pow(a,r),d=e.pow(a,n);for(;!e.eql(d,e.ONE);){if(e.eql(d,e.ZERO))return e.ZERO;let t=1;for(let n=e.sqr(d);t<o&&!e.eql(n,e.ONE);t++)n=e.sqr(n);const n=e.pow(l,tc<<BigInt(o-t-1));l=e.sqr(n),c=e.mul(c,n),d=e.mul(d,l),o=t}return c}}(e)}(e),o=Object.freeze({ORDER:e,BITS:i,BYTES:r,MASK:Xl(i),ZERO:ec,ONE:tc,create:t=>oc(t,e),isValid:t=>{if("bigint"!=typeof t)throw new Error("Invalid field element: expected bigint, got "+typeof t);return ec<=t&&t<e},is0:e=>e===ec,isOdd:e=>(e&tc)===tc,neg:t=>oc(-t,e),eql:(e,t)=>e===t,sqr:t=>oc(t*t,e),add:(t,n)=>oc(t+n,e),sub:(t,n)=>oc(t-n,e),mul:(t,n)=>oc(t*n,e),pow:(e,t)=>function(e,t,n){if(n<ec)throw new Error("Expected power > 0");if(n===ec)return e.ONE;if(n===tc)return t;let s=e.ONE,i=t;for(;n>ec;)n&tc&&(s=e.mul(s,i)),i=e.sqr(i),n>>=tc;return s}(o,e,t),div:(t,n)=>oc(t*dc(n,e),e),sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>dc(t,e),sqrt:s.sqrt||(e=>a(o,e)),invertBatch:e=>function(e,t){const n=new Array(t.length),s=t.reduce(((t,s,i)=>e.is0(s)?t:(n[i]=t,e.mul(t,s))),e.ONE),i=e.inv(s);return t.reduceRight(((t,s,i)=>e.is0(s)?t:(n[i]=e.mul(t,n[i]),e.mul(t,s))),i),n}(o,e),cmov:(e,t,n)=>n?t:e,toBytes:e=>n?Gl(e,r):Rl(e,r),fromBytes:e=>{if(e.length!==r)throw new Error(`Fp.fromBytes: expected ${r}, got ${e.length}`);return n?Ul(e):Hl(e)}});return Object.freeze(o)}(Fc,void 0,void 0,{sqrt:function(e){const t=Fc,n=BigInt(3),s=BigInt(6),i=BigInt(11),r=BigInt(22),a=BigInt(23),o=BigInt(44),l=BigInt(88),c=e*e*e%t,d=c*c*e%t,u=cc(d,n,t)*d%t,f=cc(u,n,t)*d%t,h=cc(f,Oc,t)*c%t,p=cc(h,i,t)*h%t,m=cc(p,r,t)*p%t,g=cc(m,o,t)*m%t,_=cc(g,l,t)*g%t,b=cc(_,o,t)*m%t,y=cc(b,n,t)*d%t,A=cc(y,a,t)*p%t,w=cc(A,s,t)*c%t,x=cc(w,Oc,t);if(!Lc.eql(Lc.sqr(x),e))throw new Error("Cannot find square root");return x}}),Tc=function(e,t){const n=t=>zc({...e,...Bc(t)});return Object.freeze({...n(t),create:n})}({a:BigInt(0),b:BigInt(7),Fp:Lc,n:kc,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{const t=kc,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),s=-Cc*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),i=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),r=n,a=BigInt("0x100000000000000000000000000000000"),o=Dc(r*e,t),l=Dc(-s*e,t);let c=oc(e-o*n-l*i,t),d=oc(-o*s-l*r,t);const u=c>a,f=d>a;if(u&&(c=t-c),f&&(d=t-d),c>a||d>a)throw new Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:u,k1:c,k2neg:f,k2:d}}}},Ol);BigInt(0),Tc.ProjectivePoint;var Sc=i(8891).Buffer;class Nc{constructor(e){if(this.buffer=e,e.length!==Nc.SIZE_IN_BYTES)throw new Error(`Expect buffer size to be ${Nc.SIZE_IN_BYTES}. Got ${e.length}.`)}static fromString(e){if(!Nc.isAddress(e))throw new Error(`Invalid address string: ${e}`);return new Nc(Sc.from(e.replace(/^0x/i,""),"hex"))}static random(){return new Nc(ot(20))}static isAddress(e){return!!/^(0x)?[0-9a-f]{40}$/i.test(e)&&(!(!/^(0x|0X)?[0-9a-f]{40}$/.test(e)&&!/^(0x|0X)?[0-9A-F]{40}$/.test(e))||Nc.checkAddressChecksum(e))}isZero(){return this.equals(Nc.ZERO)}static checkAddressChecksum(e){const t=al((e=e.replace(/^0x/i,"")).toLowerCase());for(let n=0;n<40;n++)if(parseInt(t[n],16)>7&&e[n].toUpperCase()!==e[n]||parseInt(t[n],16)<=7&&e[n].toLowerCase()!==e[n])return!1;return!0}static toChecksumAddress(e){if(!Nc.isAddress(e))throw new Error("Invalid address string.");const t=al(e=e.toLowerCase().replace(/^0x/i,""));let n="0x";for(let s=0;s<e.length;s++)parseInt(t[s],16)>7?n+=e[s].toUpperCase():n+=e[s];return n}equals(e){return this.buffer.equals(e.buffer)}toString(){return Ds(this.buffer)}[f.inspect.custom](){return`EthAddress<${this.toString()}>`}toChecksumString(){return Nc.toChecksumAddress(this.buffer.toString("hex"))}toBuffer(){return this.buffer}toBuffer32(){const e=Sc.alloc(32);return this.buffer.copy(e,12),e}toField(){return si.fromBuffer(this.toBuffer32())}static fromField(e){return new Nc(e.toBuffer().slice(-Nc.SIZE_IN_BYTES))}static fromFields(e){const t=vi.asReader(e);return Nc.fromField(t.readField())}static fromBuffer(e){const t=Js.asReader(e);return new Nc(t.readBytes(Nc.SIZE_IN_BYTES))}toJSON(){return this.toString()}static get schema(){return Ys(Nc,Nc.isAddress)}}Nc.SIZE_IN_BYTES=20,Nc.ZERO=new Nc(Sc.alloc(Nc.SIZE_IN_BYTES)),Xs.register("EthAddress",Nc);class Pc{constructor(e,t,n,s=!1){this.r=e,this.s=t,this.v=n,this.isEmpty=s}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(il),s=t.readObject(il),i=t.readNumber(),r=n.isZero()&&s.isZero();return new Pc(n,s,i,r)}static isValidString(e){return/^0x[0-9a-f]{129,}$/i.test(e)}static fromString(e){const t=Os(e),n=Js.asReader(t),s=n.readObject(il),i=n.readObject(il),r=parseInt(e.slice(130),16),a=s.isZero()&&i.isZero();return new Pc(s,i,r,a)}static random(){return new Pc(il.random(),il.random(),Math.floor(2*Math.random()),!1)}static empty(){return new Pc(il.ZERO,il.ZERO,0,!0)}equals(e){return this.r.equals(e.r)&&this.s.equals(e.s)&&this.v===e.v&&this.isEmpty===e.isEmpty}toBuffer(){const e=_i([this.r,this.s,this.v]);return this.size=e.length,e}getSize(){return this.size||(this.size=this.toBuffer().length),this.size}toString(){return`0x${this.r.buffer.toString("hex")}${this.s.buffer.toString("hex")}${this.v.toString(16)}`}toViemSignature(){return{r:this.r.toString(),s:this.s.toString(),v:this.v,isEmpty:this.isEmpty}}toJSON(){return this.toString()}static get schema(){return zs.string().refine(Fs,"No hex prefix").refine(Pc.isValidString,"Not a valid Ethereum signature").transform(Pc.fromString)}}var Ic=i(8891).Buffer;function Yc(e,t){const n=function(e,t){const{r:n,s,v:i}=t,r=function(e){if(0===e||1===e)return e;if(27===e)return 0;if(28===e)return 1;throw new Error("Invalid yParityOrV value")}(i),a=new Tc.Signature(n.toBigInt(),s.toBigInt()).addRecoveryBit(r).recoverPublicKey(e.buffer).toHex(!1);return Ic.from(a,"hex")}(e,t);return function(e){const t=rl(e.subarray(1));return new Nc(t.subarray(12))}(n)}var Qc=i(8891).Buffer;class jc{constructor(e){if(this.value=e,e>2**(8*jc.SIZE)-1)throw new Error(`Selector must fit in ${jc.SIZE} bytes (got value ${e}).`)}isEmpty(){return 0===this.value}toBuffer(e=jc.SIZE){return m(BigInt(this.value),e)}toString(){return Ds(this.toBuffer())}[f.inspect.custom](){return`Selector<${this.toString()}>`}equals(e){return this.value===e.value}toField(){return new si(BigInt(this.value))}}jc.SIZE=4;var Hc=i(8891).Buffer;class Uc extends jc{static fromBuffer(e){const t=Js.asReader(e),n=Number(p(t.readBytes(jc.SIZE)));return new Uc(n)}static fromField(e){return new Uc(Number(e.toBigInt()))}static async fromSignature(e){if(/\s/.test(e))throw new Error("Signature cannot contain whitespace");const t=(await xi(Hc.from(e))).toBuffer().slice(-jc.SIZE);return Uc.fromBuffer(t)}static fromString(e){const t=g(e);if(t.length!==jc.SIZE)throw new Error(`Invalid EventSelector length ${t.length} (expected ${jc.SIZE}).`);return Uc.fromBuffer(t)}static empty(){return new Uc(0)}static random(){return Uc.fromBuffer(ot(jc.SIZE))}toJSON(){return this.toString()}static get schema(){return Ys(Uc)}}var Rc=i(8891).Buffer;class Gc{constructor(e){if("length"in e&&32!==e.length)throw new Error(`Invalid AztecAddress length ${e.length}.`);this.xCoord=new si(e)}[f.inspect.custom](){return`AztecAddress<${this.toString()}>`}static isAddress(e){return/^(0x)?[a-fA-F0-9]{64}$/.test(e)}static zero(){return Gc.ZERO}static fromField(e){return new Gc(e)}static fromBuffer(e){return new Gc($s(e,si))}static fromFields(e){const t=vi.asReader(e);return new Gc(t.readField())}static fromBigInt(e){return new Gc(new si(e))}static fromNumber(e){return new Gc(new si(e))}static fromString(e){return new Gc(Os(e))}static async random(){for(;;){const e=new Gc(si.random());if(await e.isValid())return e}}get size(){return this.xCoord.size}equals(e){return this.xCoord.equals(e.xCoord)}isZero(){return this.xCoord.isZero()}async isValid(){return null!==await Ei.YFromX(this.xCoord)}toAddressPoint(){return Ei.fromXAndSign(this.xCoord,!0)}toBuffer(){return this.xCoord.toBuffer()}toBigInt(){return this.xCoord.toBigInt()}toField(){return this.xCoord}toString(){return this.xCoord.toString()}toJSON(){return this.toString()}static get schema(){return Ys(Gc,Gc.isAddress)}}Gc.SIZE_IN_BYTES=si.SIZE_IN_BYTES,Gc.ZERO=new Gc(Rc.alloc(32,0)),Xs.register("AztecAddress",Gc);class Zc{constructor(e){if("bigint"!=typeof e&&(e=BigInt(e)),e<0n||e>=2n**128n)throw new Error(`Value ${e} is not within 128 bits and hence cannot be converted to U128.`);this.value=e}static fromU64sLE(e,t){if(e<0n||e>=2n**64n)throw new Error(`Lower limb ${e} is not within valid range (0 to 2^64-1)`);if(t<0n||t>=2n**64n)throw new Error(`Higher limb ${t} is not within valid range (0 to 2^64-1)`);return new Zc(t<<64n|e)}get lo(){return 0xffffffffffffffffn&this.value}get hi(){return this.value>>64n}toInteger(){return this.value}toFields(){return[new si(this.lo),new si(this.hi)]}static fromFields(e){if(2!==e.length)throw new Error(`Expected 2 fields for U128, got ${e.length}`);return Zc.fromU64sLE(e[0].toBigInt(),e[1].toBigInt())}static getLimbNames(){return["lo","hi"]}}var Jc=i(8891).Buffer;function Xc(e){return"struct"===e.kind&&e.path.endsWith("address::AztecAddress")}function Wc(e){return"struct"===e.kind&&e.path.endsWith("U128")}class Vc{constructor(e,t){this.types=e,this.flattened=t}decodeNext(e){switch(e.kind){case"field":return this.getNextField().toBigInt();case"integer":{const t=this.getNextField();return"signed"===e.sign?function(e,t){const n=Jc.from(e),s=void 0!==t?n.subarray(-t/8):n;if(128&s.subarray(0,1).readUInt8()){for(let e=0;e<s.length;e++)s[e]=~s[e];return-(BigInt(`0x${s.toString("hex")}`)+1n)}return BigInt(`0x${s.toString("hex")}`)}(t.toBuffer(),e.width):t.toBigInt()}case"boolean":return!this.getNextField().isZero();case"array":{const t=[];for(let n=0;n<e.length;n+=1)t.push(this.decodeNext(e.type));return t}case"struct":{if(Wc(e)){const e=[new si(this.decodeNext({kind:"field"})),new si(this.decodeNext({kind:"field"}))];return Zc.fromFields(e).toInteger()}const t={};if(Xc(e))return new Gc(this.getNextField().toBuffer());for(const n of e.fields)t[n.name]=this.decodeNext(n.type);return t}case"string":{const t=[];for(let n=0;n<e.length;n+=1)t.push(this.getNextField().toBigInt());return t}case"tuple":{const t=[];for(const n of e.fields)t.push(this.decodeNext(n));return t}default:throw new Error(`Unsupported type: ${e}`)}}getNextField(){const e=this.flattened.shift();if(!e)throw new Error("Not enough return values");return e}decode(){if(this.types.length>1)throw new Error("Multiple types not supported");return 0===this.types.length?[]:this.decodeNext(this.types[0])}}function qc(e,t){return new Vc(e,t.slice()).decode()}class Kc{constructor(e,t,n=!1){this.name=e,this.parameters=t,this.includeNames=n,this.separator=n?", ":","}getParameterType(e){switch(e.kind){case"field":return"Field";case"integer":if("signed"===e.sign)throw new Error("Unsupported type: signed integer");return`u${e.width}`;case"boolean":return"bool";case"array":return`[${this.getParameterType(e.type)};${e.length}]`;case"string":return`str<${e.length}>`;case"struct":return`(${e.fields.map((e=>`${this.decodeParameter(e)}`)).join(this.separator)})`;default:throw new Error(`Unsupported type: ${e}`)}}decodeParameter(e){const t=this.getParameterType(e.type);return this.includeNames?`${e.name}: ${t}`:t}decode(){return`${this.name}(${this.parameters.map((e=>this.decodeParameter(e))).join(this.separator)})`}}var $c=i(8891).Buffer;class ed extends jc{static fromBuffer(e){const t=Js.asReader(e),n=Number(p(t.readBytes(jc.SIZE)));return new ed(n)}static fromField(e){return new ed(Number(e.toBigInt()))}static fromFields(e){const t=vi.asReader(e);return ed.fromField(t.readField())}static async fromSignature(e){if(/\s/.test(e))throw new Error("Signature cannot contain whitespace");const t=(await xi($c.from(e))).toBuffer().slice(-jc.SIZE);return ed.fromBuffer(t)}static fromString(e){const t=g(e);if(t.length!==jc.SIZE)throw new Error(`Invalid FunctionSelector length ${t.length} (expected ${jc.SIZE}).`);return ed.fromBuffer(t)}static empty(){return new ed(0)}static async fromNameAndParameters(e,t){const{name:n,parameters:s}="string"==typeof e?{name:e,parameters:t}:e,i=function(e,t){return new Kc(e,t).decode()}(n,s);return await this.fromSignature(i)}static random(){return ed.fromBuffer(ot(jc.SIZE))}toJSON(){return this.toString()}static get schema(){return Ys(ed)}}Xs.register("FunctionSelector",ed);var td=i(8891).Buffer;class nd extends jc{static fromBuffer(e){const t=Js.asReader(e),n=Number(p(t.readBytes(jc.SIZE)));if(n>=128)throw new Error(`Invalid note selector: ${n}`);return new nd(n)}static fromString(e){const t=e.replace(/^0x/i,"").slice(-8),n=td.from(t,"hex");return nd.fromBuffer(n)}static fromField(e){return new nd(Number(e.toBigInt()))}static empty(){return new nd(0)}static random(){const e=lt(128);return nd.fromField(new si(e))}toJSON(){return this.toString()}static get schema(){return Ys(nd)}}Xs.register("NoteSelector",nd);var sd=i(8891).Buffer;const id={EthAddress:Nc.schema,AztecAddress:Gc.schema,FunctionSelector:ed.schema,NoteSelector:nd.schema,EventSelector:Uc.schema,Fr:si.schema,Fq:ii.schema,Point:Ei.schema,BigInt:zs.union([zs.bigint(),zs.number(),zs.string()]).pipe(zs.coerce.bigint()),Integer:zs.union([zs.bigint(),zs.number(),zs.string()]).pipe(zs.coerce.number().int()),UInt32:zs.union([zs.bigint(),zs.number(),zs.string()]).pipe(zs.coerce.number().int().min(0).max(2**32-1)),Buffer32:zs.string().refine(Cs,"Not a valid hex string").transform(il.fromString),Buffer:zs.union([Ns,zs.object({type:zs.literal("Buffer"),data:zs.array(zs.number().int().min(0).max(255))}).transform((({data:e})=>sd.from(e)))]),BufferHex:zs.string().refine(Cs,"Not a valid hex string").transform(ks).transform((e=>sd.from(e,"hex"))),HexString:Ts},rd=zs.union([id.BigInt,zs.boolean(),id.AztecAddress,zs.array(zs.lazy((()=>rd))),zs.record(zs.lazy((()=>rd)))]);var ad=i(8891).Buffer;const od=Pe("aztec:foundation:abi"),ld=zs.discriminatedUnion("kind",[zs.object({kind:zs.literal("boolean"),value:zs.boolean()}),zs.object({kind:zs.literal("string"),value:zs.string()}),zs.object({kind:zs.literal("array"),value:zs.array(zs.lazy((()=>ld)))}),zs.object({kind:zs.literal("tuple"),fields:zs.array(zs.lazy((()=>ld)))}),zs.object({kind:zs.literal("integer"),value:zs.string(),sign:zs.boolean()}),zs.object({kind:zs.literal("struct"),fields:zs.array(zs.object({name:zs.string(),value:zs.lazy((()=>ld))}))})]),cd=["public","private","databus"],dd=zs.discriminatedUnion("kind",[zs.object({kind:zs.literal("field")}),zs.object({kind:zs.literal("boolean")}),zs.object({kind:zs.literal("integer"),sign:zs.enum(["unsigned","signed"]),width:zs.number()}),zs.object({kind:zs.literal("array"),length:zs.number(),type:zs.lazy((()=>dd))}),zs.object({kind:zs.literal("string"),length:zs.number()}),zs.object({kind:zs.literal("struct"),fields:zs.array(zs.lazy((()=>ud))),path:zs.string()}),zs.object({kind:zs.literal("tuple"),fields:zs.array(zs.lazy((()=>dd)))})]),ud=zs.object({name:zs.string(),type:dd}),fd=(ud.and(zs.object({visibility:zs.enum(cd)})),zs.union([zs.object({error_kind:zs.literal("string"),string:zs.string()}),zs.object({error_kind:zs.literal("fmtstring"),length:zs.number(),item_types:zs.array(dd)}),zs.object({error_kind:zs.literal("custom")}).and(dd)]));var hd,pd;(pd=hd||(hd={})).PRIVATE="private",pd.PUBLIC="public",pd.UNCONSTRAINED="unconstrained";const md=zs.object({name:zs.string(),functionType:zs.nativeEnum(hd),isInternal:zs.boolean(),isStatic:zs.boolean(),isInitializer:zs.boolean(),parameters:zs.array(zs.object({name:zs.string(),type:dd,visibility:zs.enum(cd)})),returnTypes:zs.array(dd),errorTypes:zs.record(fd)}),gd=zs.object({debugSymbols:zs.object({locations:zs.record(zs.array(zs.object({span:zs.object({start:zs.number(),end:zs.number()}),file:zs.number()}))),brillig_locations:zs.record(zs.record(zs.array(zs.object({span:zs.object({start:zs.number(),end:zs.number()}),file:zs.number()}))))}),files:zs.record(zs.object({source:zs.string(),path:zs.string()}))}),_d=md.and(zs.object({bytecode:id.Buffer,verificationKey:zs.string().optional(),debugSymbols:zs.string(),debug:gd.optional()})),bd=zs.object({name:zs.string(),index:zs.number(),nullable:zs.boolean()}),yd=zs.object({id:id.NoteSelector,typ:zs.string(),fields:zs.array(bd)}),Ad=zs.object({name:zs.string(),aztecNrVersion:zs.string().optional(),functions:zs.array(_d),outputs:zs.object({structs:zs.record(zs.array(dd)).transform((e=>{for(const[t,n]of Object.entries(e))"events"!==t&&"functions"!==t||(e[t]=n.sort(((e,t)=>e.path>t.path?-1:1)));return e})),globals:zs.record(zs.array(ld))}),storageLayout:zs.record(zs.object({slot:id.Fr})),notes:zs.record(yd),fileMap:zs.record(zs.coerce.number(),zs.object({source:zs.string(),path:zs.string()}))});function wd(e){const t=e.functions.filter((e=>e.isInitializer));return t.length>1?t.find((e=>"constructor"===e.name))??t.find((e=>"initializer"===e.name))??t.find((e=>0===e.parameters?.length))??t.find((e=>e.functionType===hd.PRIVATE))??t[0]:t[0]}var xd=i(4247),vd=i(8891).Buffer;function Ed(e,t){const n=[new si(e.length),...xd(e,si.SIZE_IN_BYTES-1).map((e=>{const t=vd.alloc(si.SIZE_IN_BYTES);return vd.from(e).copy(t,1),si.fromBuffer(t)}))];if(n.length>t)throw new Error(`Input buffer exceeds maximum size: got ${n.length} but max is ${t}`);return[...n,...Array(t-n.length).fill(si.ZERO)]}var Md=i(8891).Buffer;class zd{constructor(e,t){this.abi=e,this.args=t,this.flattened=[]}static typeSize(e){switch(e.kind){case"field":case"boolean":case"integer":return 1;case"string":return e.length;case"array":return e.length*zd.typeSize(e.type);case"struct":return e.fields.reduce(((e,t)=>e+zd.typeSize(t.type)),0);case"tuple":return e.fields.reduce(((e,t)=>e+zd.typeSize(t)),0);default:throw new Error(`Unhandled abi type: ${e}`)}}encodeArgument(e,t,n){if(void 0===t||null==t)throw new Error(`Undefined argument ${n??"unnamed"} of type ${e.kind}`);switch(e.kind){case"field":if("number"==typeof t)this.flattened.push(new si(BigInt(t)));else if("bigint"==typeof t)this.flattened.push(new si(t));else if("string"==typeof t)this.flattened.push(si.fromString(t));else if("boolean"==typeof t)this.flattened.push(new si(t?1n:0n));else{if("object"!=typeof t)throw new Error(`Invalid argument "${t}" of type ${e.kind}`);if(Md.isBuffer(t))this.flattened.push(si.fromBuffer(t));else if("function"==typeof t.toField)this.flattened.push(t.toField());else{if("string"!=typeof t.value)throw new Error(`Argument for ${n} cannot be serialized to a field`);this.flattened.push(si.fromHexString(t.value))}}break;case"boolean":this.flattened.push(new si(t?1n:0n));break;case"array":for(let s=0;s<e.length;s+=1)this.encodeArgument(e.type,t[s],`${n}[${s}]`);break;case"string":for(let n=0;n<e.length;n+=1){const e=n<t.length?BigInt(t.charCodeAt(n)):0n;this.flattened.push(new si(e))}break;case"struct":{if(void 0!==t.encodeToNoir){this.flattened.push(...t.encodeToNoir());break}const s=function(e){return function(e){return"struct"===e.kind&&e.path.endsWith("address::EthAddress")}(e)||Xc(e)}(e);if(s&&void 0===t.address&&void 0===t.inner){this.encodeArgument({kind:"field"},t,`${n}.inner`);break}if(s&&void 0!==t.address){this.encodeArgument({kind:"field"},t.address,`${n}.address`);break}if(function(e){return"struct"===e.kind&&e.path.endsWith("types::abis::function_selector::FunctionSelector")}(e)){this.encodeArgument({kind:"integer",sign:"unsigned",width:32},t.value??t,`${n}.inner`);break}if(Wc(e)){const e=new Zc(t).toFields(),s=Zc.getLimbNames();this.encodeArgument({kind:"field"},e[0],`${n}.${s[0]}`),this.encodeArgument({kind:"field"},e[1],`${n}.${s[1]}`);break}if(function(e){return"struct"===e.kind&&1===e.fields.length&&"inner"===e.fields[0].name&&"field"===e.fields[0].type.kind}(e)){this.encodeArgument({kind:"field"},t.inner??t,`${n}.inner`);break}for(const s of e.fields)this.encodeArgument(s.type,t[s.name],`${n}.${s.name}`);break}case"integer":if("string"==typeof t){const e=BigInt(t);this.flattened.push(new si(e))}else this.flattened.push(new si(t));break;default:throw new Error(`Unsupported type: ${e}`)}}encode(){for(let e=0;e<this.abi.parameters.length;e+=1){const t=this.abi.parameters[e];this.encodeArgument(t.type,this.args[e],t.name)}return this.flattened}}function Bd(e,t){return new zd(e,t).encode()}var Fd=i(8891).Buffer;class kd{constructor(e,t){this.height=e,this.nodes=t;const n=2**(e+1)-1;if(t.length!==n)throw new Error(`Invalid node count for Merkle tree: got ${t.length} but expected ${n}`)}get root(){return this.nodes[this.nodes.length-1]}get leaves(){return this.nodes.slice(0,2**this.height)}getSiblingPath(e){if(Fd.isBuffer(e))return this.getSiblingPath(this.getIndex(e));const t=e;if(t<0||t>=2**this.height)throw new Error(`Invalid leaf index: got ${t} but leaves count is ${2**this.height}`);const n=this.nodes;let s=Math.ceil(n.length/2),i=0,r=t;const a=[];for(;s>1;){const e=1&r;a.push(n[i+r+(e?-1:1)]),i+=s,s>>=1,r>>=1}return a}getIndex(e){return this.leaves.findIndex((t=>t.equals(e)))}drawTree(e=8){const t=[],n=this.nodes,s=Math.ceil(n.length/2);let i=1,r=s,a=0;for(;r>0;)t.push(n.slice(a,a+r).map((t=>t.toString("hex").slice(0,e)+" ".repeat((i-1)*(e+1))))),a+=r,i<<=1,r>>=1;return t.reverse().map((e=>e.join(" "))).join("\n")}}var Cd=i(8891).Buffer;class Od{constructor(e,t,n){this.height=e,this.zeroHashes=t,this.hasher=n,this.hasher=n}static async create(e,t=Cd.alloc(32),n=(async(e,t)=>(await pl([e,t])).toBuffer())){const s=[t];for(let t=0;t<e;t++)s.push(await n(s[t],s[t]));return new Od(e,s,n)}async computeTree(e=[]){0===e.length&&(e=new Array(2**this.height).fill(this.zeroHashes[0]));let t=e.slice();for(let n=0;n<this.height;++n){const s=2**(this.height-n),i=[];for(let t=0;t<e.length/2;++t){const s=e[2*t],r=e[2*t+1]||this.zeroHashes[n];i[t]=await this.hasher(s,r)}t=t.concat(new Array(s-e.length).fill(this.zeroHashes[n]),i),e=i}return new kd(this.height,t)}async computeTreeRoot(e=[]){if(0===e.length)return this.zeroHashes[this.zeroHashes.length-1];e=e.slice();for(let t=0;t<this.height;++t){let n=0;for(;n<e.length/2;++n){const s=e[2*n],i=e[2*n+1]||this.zeroHashes[t];e[n]=await this.hasher(s,i)}e=e.slice(0,n)}return e[0]}}var Dd=i(8891).Buffer;const Ld=1,Td=(Sd=cl,Nd=si,e=>ei(Sd(e),Nd));var Sd,Nd;async function Pd(e){if("privateFunctionRoot"in e&&"unconstrainedFunctionRoot"in e&&"metadataHash"in e){const{privateFunctionRoot:t,unconstrainedFunctionRoot:n,metadataHash:s}=e,i=[t,n,s].map((e=>e.toBuffer()));return Td(Dd.concat([di(Ld),...i]))}const t=await async function(e){const t=await Id(e,hd.PRIVATE),n=await Id(e,hd.UNCONSTRAINED),s=function(e){return Td(Dd.from(JSON.stringify({name:e.name,outputs:e.outputs}),"utf-8"))}(e);return{privateFunctionRoot:t,unconstrainedFunctionRoot:n,metadataHash:s}}(e),n=Pd(t);return Pe("circuits:artifact_hash").trace("Computed artifact hash",{artifactHash:n,...t}),n}async function Id(e,t){const n=await async function(e,t){const n=await async function(e,t){const n=await Promise.all(e.functions.filter((e=>e.functionType===t)).map((async e=>({...e,selector:await ed.fromNameAndParameters(e.name,e.parameters)}))));return n.sort(((e,t)=>e.selector.value-t.selector.value)),await Promise.all(n.map(Yd))}(e,t);if(0===n.length)return;const s=Math.ceil(Math.log2(n.length));return(await Od.create(s,Dd.alloc(32),((e,t)=>Promise.resolve(Td(Dd.concat([e,t])).toBuffer())))).computeTree(n.map((e=>e.toBuffer())))}(e,t);return n?.root?si.fromBuffer(n.root):si.ZERO}async function Yd(e){const t="selector"in e?e.selector:await ed.fromNameAndParameters(e),n=Td(e.bytecode).toBuffer(),s="functionMetadataHash"in e?e.functionMetadataHash:function(e){return Td(Dd.from(JSON.stringify(e.returnTypes),"utf8"))}(e);return Td(Dd.concat([di(Ld),t.toBuffer(),s.toBuffer(),n]))}function Qd(e){return 0===e.length?Promise.resolve(si.ZERO):wi(e,Ri.FUNCTION_ARGS)}i(8891).Buffer;var jd=i(8891).Buffer;class Hd{generator(){return Hd.generator}async mul(e,t){const n=await c.initSingleton(),[s]=n.getWasm().callWasmExport("ecc_grumpkin__mul",[e.toBuffer(),t.toBuffer()],[64]);return Ei.fromBuffer(jd.from(s))}async add(e,t){const n=await c.initSingleton(),[s]=n.getWasm().callWasmExport("ecc_grumpkin__add",[e.toBuffer(),t.toBuffer()],[64]);return Ei.fromBuffer(jd.from(s))}async batchMul(e,t){const n=jd.concat(e.map((e=>e.toBuffer()))),s=e.length*Ei.SIZE_IN_BYTES,i=await c.initSingleton(),[r]=i.getWasm().callWasmExport("ecc_grumpkin__batch_mul",[n,t.toBuffer(),e.length],[s]),a=[];for(let e=0;e<s;e+=64)a.push(Ei.fromBuffer(jd.from(r.subarray(e,e+64))));return a}async getRandomFr(){const e=await c.initSingleton(),[t]=e.getWasm().callWasmExport("ecc_grumpkin__get_random_scalar_mod_circuit_modulus",[],[32]);return si.fromBuffer(jd.from(t))}async reduce512BufferToFr(e){const t=await c.initSingleton(),[n]=t.getWasm().callWasmExport("ecc_grumpkin__reduce512_buffer_mod_circuit_modulus",[e],[32]);return si.fromBuffer(jd.from(n))}}Hd.generator=Ei.fromBuffer(jd.from([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,207,19,94,117,6,164,93,99,45,39,13,69,241,24,18,148,131,63,196,141,130,63,39,44]));var Ud=i(8891).Buffer;class Rd{constructor(e,t,n,s){this.masterNullifierPublicKey=e,this.masterIncomingViewingPublicKey=t,this.masterOutgoingViewingPublicKey=n,this.masterTaggingPublicKey=s}static get schema(){return zs.object({masterNullifierPublicKey:id.Point,masterIncomingViewingPublicKey:id.Point,masterOutgoingViewingPublicKey:id.Point,masterTaggingPublicKey:id.Point}).transform(Rd.from)}static from(e){return new Rd(e.masterNullifierPublicKey,e.masterIncomingViewingPublicKey,e.masterOutgoingViewingPublicKey,e.masterTaggingPublicKey)}hash(){return this.isEmpty()?si.ZERO:wi([this.masterNullifierPublicKey,this.masterIncomingViewingPublicKey,this.masterOutgoingViewingPublicKey,this.masterTaggingPublicKey],Ri.PUBLIC_KEYS_HASH)}isEmpty(){return this.masterNullifierPublicKey.isZero()&&this.masterIncomingViewingPublicKey.isZero()&&this.masterOutgoingViewingPublicKey.isZero()&&this.masterTaggingPublicKey.isZero()}static default(){return new Rd(new Ei(new si(582240093077765400562621227108555700500271598878376310175765873770292988861n),new si(10422444662424639723529825114205836958711284159673861467999592572974769103684n),!1),new Ei(new si(339708709767762472786445938838804872781183545349360029270386718856175781484n),new si(12719619215050539905199178334954929730355853796706924300730604757520758976849n),!1),new Ei(new si(12212787719617305570587928860288475454328008955283046946846066128763901043335n),new si(3646747884782549389807830220601404629716007431341772952958971658285958854707n),!1),new Ei(new si(728059161893070741164607238299536939695876538801885465230641192969135857403n),new si(14575718736702206050102425029229426215631664471161015518982549597389390371695n),!1))}static async random(){return new Rd(await Ei.random(),await Ei.random(),await Ei.random(),await Ei.random())}equals(e){return this.masterNullifierPublicKey.equals(e.masterNullifierPublicKey)&&this.masterIncomingViewingPublicKey.equals(e.masterIncomingViewingPublicKey)&&this.masterOutgoingViewingPublicKey.equals(e.masterOutgoingViewingPublicKey)&&this.masterTaggingPublicKey.equals(e.masterTaggingPublicKey)}toBuffer(){return _i([this.masterNullifierPublicKey,this.masterIncomingViewingPublicKey,this.masterOutgoingViewingPublicKey,this.masterTaggingPublicKey])}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(Ei),s=t.readObject(Ei),i=t.readObject(Ei),r=t.readObject(Ei);return new Rd(n,s,i,r)}toNoirStruct(){return{npk_m:this.masterNullifierPublicKey.toWrappedNoirStruct(),ivpk_m:this.masterIncomingViewingPublicKey.toWrappedNoirStruct(),ovpk_m:this.masterOutgoingViewingPublicKey.toWrappedNoirStruct(),tpk_m:this.masterTaggingPublicKey.toWrappedNoirStruct()}}toFields(){return[...this.masterNullifierPublicKey.toFields(),...this.masterIncomingViewingPublicKey.toFields(),...this.masterOutgoingViewingPublicKey.toFields(),...this.masterTaggingPublicKey.toFields()]}encodeToNoir(){return this.toFields()}static fromFields(e){const t=vi.asReader(e);return new Rd(t.readObject(Ei),t.readObject(Ei),t.readObject(Ei),t.readObject(Ei))}toString(){return Ds(this.toBuffer())}static fromString(e){return Rd.fromBuffer(Ud.from(ks(e),"hex"))}}function Gd(e){return fl([e,Ri.IVSK_M])}function Zd(e,t){return wi([e,t],Ri.CONTRACT_ADDRESS_V1)}async function Jd(e,t){const n=await Zd(await e.hash(),t),s=await(new Hd).add(await Xd(new ii(n.toBigInt())),e.masterIncomingViewingPublicKey);return new Gc(s.x)}function Xd(e){const t=new Hd;return t.mul(t.generator(),e)}async function Wd(e){const t=function(e){return fl([e,Ri.NSK_M])}(e),n=Gd(e),s=function(e){return fl([e,Ri.OVSK_M])}(e),i=fl([e,Ri.TSK_M]),r=await Xd(t),a=await Xd(n),o=await Xd(s),l=await Xd(i);return{masterNullifierSecretKey:t,masterIncomingViewingSecretKey:n,masterOutgoingViewingSecretKey:s,masterTaggingSecretKey:i,publicKeys:new Rd(r,a,o,l)}}async function Vd(e){const t=await qd(e);return Jd(e.publicKeys,t)}async function qd(e){const t="saltedInitializationHash"in e?e.saltedInitializationHash:await function(e){return wi([e.salt,e.initializationHash,e.deployer],Ri.PARTIAL_ADDRESS)}(e);return wi([e.contractClassId,t],Ri.PARTIAL_ADDRESS)}async function Kd(e,t){return wi([e,await Qd(t)],Ri.CONSTRUCTOR)}var $d=i(5949);let eu;const tu=2;async function nu(e){return(await wi([e.selector,e.vkHash],Ri.FUNCTION_LEAF)).toBuffer()}async function su(e){const t=e.artifactHash,n="privateFunctionsRoot"in e?e.privateFunctionsRoot:await async function(e){const t=await async function(){if(!eu){const e=(await pl(new Array(tu).fill(0))).toBuffer();eu=await Od.create(ki,e,(async(e,t)=>(await Ai([e,t])).toBuffer()))}return eu}(),n=await function(e){const t=[...e].sort(((e,t)=>e.selector.value-t.selector.value));return Promise.all(t.map(nu))}(e);return si.fromBuffer(await t.computeTreeRoot(n))}(e.privateFunctions),s="publicBytecodeCommitment"in e?e.publicBytecodeCommitment:await async function(e){const t=Ed(e,Qi),n=Math.ceil(t[0].toNumber()/(si.SIZE_IN_BYTES-1));return(0,$d.strict)(n<Qi,"Bytecode exceeds maximum deployable size"),0==n?new si(0):await async function(e){const t=gi(e),n=(await c.initSingleton()).poseidon2HashAccumulate(t.map((e=>new d(e.toBuffer()))));return si.fromBuffer(yi.from(n.toBuffer()))}(t.slice(0,n+1))}(e.packedBytecode);return{id:await wi([t,n,s],Ri.CONTRACT_LEAF),artifactHash:t,privateFunctionsRoot:n,publicBytecodeCommitment:s}}var iu=i(8891).Buffer;const ru=(e,t)=>e.selector.toField().cmp(t.selector.toField());async function au(e){const t="artifactHash"in e?e.artifactHash:await Pd(e),n=e.functions.filter((e=>e.functionType===hd.PUBLIC)),s=await Promise.all(n.map((async e=>({selector:await ed.fromNameAndParameters(e.name,e.parameters),bytecode:e.bytecode}))));s.sort(ru);let i,r=iu.alloc(0);if(s.length>0){if(i=s.find((e=>e.selector.equals(ed.fromField(new si(Yi))))),!i)throw new Error(`A contract with public functions should define a public_dispatch(Field) function as its public entrypoint. Contract: ${e.name}`);r=i.bytecode}const a=e.functions.filter((e=>e.functionType===hd.PRIVATE)),o=await Promise.all(a.map(ou));o.sort(ru);const l={version:1,artifactHash:t,publicFunctions:i?[i]:[],packedBytecode:r,privateFunctions:o};return{...l,...await su(l)}}async function ou(e){return{selector:await ed.fromNameAndParameters(e.name,e.parameters),vkHash:await lu(e)}}async function lu(e){if(!e.verificationKey)throw new Error(`Private function ${e.name} must have a verification key`);return Ai(await async function(e){return(await c.initSingleton()).acirVkAsFieldsMegaHonk(new u(e)).map((e=>si.fromBuffer(Qc.from(e.toBuffer()))))}(iu.from(e.verificationKey,"base64")))}async function cu(e,t){const n=t.constructorArgs??[],s=t.salt??si.random(),i=function(e,t){if("string"==typeof t){const n=e.functions.find((e=>e.name===t));if(!n)throw new Error(`No constructor found with name ${t}`);return n}return t??wd(e)}(e,t.constructorArtifact),r=t.deployer??Gc.ZERO,a=await au(e),o=await async function(e){return(await su(e)).id}(a),l=i&&t?.skipArgsDecoding?await Kd(await ed.fromNameAndParameters(i?.name,i?.parameters),n):await async function(e,t){return e?Kd(await ed.fromNameAndParameters(e.name,e.parameters),Bd(e,t)):si.ZERO}(i,n),c={contractClassId:o,initializationHash:l,publicKeys:t.publicKeys??Rd.default(),salt:s,deployer:r,version:1};return{...c,address:await Vd(c)}}const du=zs.object({selector:id.FunctionSelector,vkHash:id.Fr}),uu=du.and(zs.object({bytecode:id.Buffer})),fu=zs.object({selector:id.FunctionSelector,bytecode:id.Buffer}),hu=zs.object({selector:id.FunctionSelector,bytecode:id.Buffer}),pu=zs.object({artifactMetadataHash:id.Fr,functionMetadataHash:id.Fr,unconstrainedFunctionsArtifactTreeRoot:id.Fr,privateFunctionTreeSiblingPath:zs.array(id.Fr),privateFunctionTreeLeafIndex:id.Integer,artifactTreeSiblingPath:zs.array(id.Fr),artifactTreeLeafIndex:id.Integer}),mu=zs.object({artifactMetadataHash:id.Fr,functionMetadataHash:id.Fr,privateFunctionsArtifactTreeRoot:id.Fr,artifactTreeSiblingPath:zs.array(id.Fr),artifactTreeLeafIndex:id.Integer}),gu=zs.object({version:zs.literal(1),artifactHash:id.Fr,privateFunctions:zs.array(du),publicFunctions:zs.array(fu),packedBytecode:id.Buffer}),_u=gu.extend({id:id.Fr}),bu=zs.object({id:id.Fr,privateFunctionsRoot:id.Fr,privateFunctions:zs.array(uu.and(pu)),unconstrainedFunctions:zs.array(hu.and(mu))}).and(gu.omit({privateFunctions:!0})),yu=zs.object({version:zs.literal(1),salt:id.Fr,deployer:id.AztecAddress,contractClassId:id.Fr,initializationHash:id.Fr,publicKeys:Rd.schema}).and(zs.object({address:id.AztecAddress})),Au=zs.object({rollupAddress:id.EthAddress,registryAddress:id.EthAddress,inboxAddress:id.EthAddress,outboxAddress:id.EthAddress,feeJuiceAddress:id.EthAddress,stakingAssetAddress:id.EthAddress,feeJuicePortalAddress:id.EthAddress,coinIssuerAddress:id.EthAddress,rewardDistributorAddress:id.EthAddress,governanceProposerAddress:id.EthAddress,governanceAddress:id.EthAddress,slashFactoryAddress:id.EthAddress}),wu=zs.object({classRegisterer:id.AztecAddress,feeJuice:id.AztecAddress,instanceDeployer:id.AztecAddress,multiCallEntrypoint:id.AztecAddress}),xu=zs.object({nodeVersion:zs.string(),l1ChainId:zs.number(),protocolVersion:zs.number(),enr:zs.string().optional(),l1ContractAddresses:Au,protocolContractAddresses:wu}).transform((e=>({enr:void 0,...e})));var vu,Eu,Mu,zu=i(8891).Buffer;try{vu=new TextDecoder}catch(e){}var Bu=0;const Fu=[];var ku,Cu,Ou,Du,Lu,Tu=Fu,Su=0,Nu={},Pu=0,Iu=0,Yu=[],Qu={useRecords:!1,mapsAsObjects:!0};class ju{}const Hu=new ju;Hu.name="MessagePack 0xC1";var Uu,Ru=!1,Gu=2;try{new Function("")}catch(e){Gu=1/0}class Zu{constructor(e){e&&(!1===e.useRecords&&void 0===e.mapsAsObjects&&(e.mapsAsObjects=!0),e.sequential&&!1!==e.trusted&&(e.trusted=!0,e.structures||0==e.useRecords||(e.structures=[],e.maxSharedStructures||(e.maxSharedStructures=0))),e.structures?e.structures.sharedLength=e.structures.length:e.getStructures&&((e.structures=[]).uninitialized=!0,e.structures.sharedLength=0),e.int64AsNumber&&(e.int64AsType="number")),Object.assign(this,e)}unpack(e,t){if(Eu)return xf((()=>(vf(),this?this.unpack(e,t):Zu.prototype.unpack.call(Qu,e,t))));e.buffer||e.constructor!==ArrayBuffer||(e=void 0!==zu?zu.from(e):new Uint8Array(e)),"object"==typeof t?(Mu=t.end||e.length,Bu=t.start||0):(Bu=0,Mu=t>-1?t:e.length),Su=0,Iu=0,Cu=null,Tu=Fu,Ou=null,Eu=e;try{Lu=e.dataView||(e.dataView=new DataView(e.buffer,e.byteOffset,e.byteLength))}catch(t){if(Eu=null,e instanceof Uint8Array)throw t;throw new Error("Source must be a Uint8Array or Buffer but was a "+(e&&"object"==typeof e?e.constructor.name:typeof e))}if(this instanceof Zu){if(Nu=this,this.structures)return ku=this.structures,Ju(t);(!ku||ku.length>0)&&(ku=[])}else Nu=Qu,(!ku||ku.length>0)&&(ku=[]);return Ju(t)}unpackMultiple(e,t){let n,s=0;try{Ru=!0;let i=e.length,r=this?this.unpack(e,i):Mf.unpack(e,i);if(!t){for(n=[r];Bu<i;)s=Bu,n.push(Ju());return n}if(!1===t(r,s,Bu))return;for(;Bu<i;)if(s=Bu,!1===t(Ju(),s,Bu))return}catch(e){throw e.lastPosition=s,e.values=n,e}finally{Ru=!1,vf()}}_mergeStructures(e,t){e=e||[],Object.isFrozen(e)&&(e=e.map((e=>e.slice(0))));for(let t=0,n=e.length;t<n;t++){let n=e[t];n&&(n.isShared=!0,t>=32&&(n.highByte=t-32>>5))}e.sharedLength=e.length;for(let n in t||[])if(n>=0){let s=e[n],i=t[n];i&&(s&&((e.restoreStructures||(e.restoreStructures=[]))[n]=s),e[n]=i)}return this.structures=e}decode(e,t){return this.unpack(e,t)}}function Ju(e){try{if(!Nu.trusted&&!Ru){let e=ku.sharedLength||0;e<ku.length&&(ku.length=e)}let e;if(Nu.randomAccessStructure&&Eu[Bu]<64&&Eu[Bu],e=Wu(),Ou&&(Bu=Ou.postBundlePosition,Ou=null),Ru&&(ku.restoreStructures=null),Bu==Mu)ku&&ku.restoreStructures&&Xu(),ku=null,Eu=null,Du&&(Du=null);else{if(Bu>Mu)throw new Error("Unexpected end of MessagePack data");if(!Ru){let t;try{t=JSON.stringify(e,((e,t)=>"bigint"==typeof t?`${t}n`:t)).slice(0,100)}catch(e){t="(JSON view not available "+e+")"}throw new Error("Data read, but end of buffer not reached "+t)}}return e}catch(e){throw ku&&ku.restoreStructures&&Xu(),vf(),(e instanceof RangeError||e.message.startsWith("Unexpected end of buffer")||Bu>Mu)&&(e.incomplete=!0),e}}function Xu(){for(let e in ku.restoreStructures)ku[e]=ku.restoreStructures[e];ku.restoreStructures=null}function Wu(){let e=Eu[Bu++];if(e<160){if(e<128){if(e<64)return e;{let t=ku[63&e]||Nu.getStructures&&$u()[63&e];return t?(t.read||(t.read=qu(t,63&e)),t.read()):e}}if(e<144){if(e-=128,Nu.mapsAsObjects){let t={};for(let n=0;n<e;n++){let e=mf();"__proto__"===e&&(e="__proto_"),t[e]=Wu()}return t}{let t=new Map;for(let n=0;n<e;n++)t.set(Wu(),Wu());return t}}{e-=144;let t=new Array(e);for(let n=0;n<e;n++)t[n]=Wu();return Nu.freezeData?Object.freeze(t):t}}if(e<192){let t=e-160;if(Iu>=Bu)return Cu.slice(Bu-Pu,(Bu+=t)-Pu);if(0==Iu&&Mu<140){let e=t<16?df(t):cf(t);if(null!=e)return e}return ef(t)}{let t;switch(e){case 192:return null;case 193:return Ou?(t=Wu(),t>0?Ou[1].slice(Ou.position1,Ou.position1+=t):Ou[0].slice(Ou.position0,Ou.position0-=t)):Hu;case 194:return!1;case 195:return!0;case 196:if(t=Eu[Bu++],void 0===t)throw new Error("Unexpected end of buffer");return ff(t);case 197:return t=Lu.getUint16(Bu),Bu+=2,ff(t);case 198:return t=Lu.getUint32(Bu),Bu+=4,ff(t);case 199:return hf(Eu[Bu++]);case 200:return t=Lu.getUint16(Bu),Bu+=2,hf(t);case 201:return t=Lu.getUint32(Bu),Bu+=4,hf(t);case 202:if(t=Lu.getFloat32(Bu),Nu.useFloat32>2){let e=Ef[(127&Eu[Bu])<<1|Eu[Bu+1]>>7];return Bu+=4,(e*t+(t>0?.5:-.5)|0)/e}return Bu+=4,t;case 203:return t=Lu.getFloat64(Bu),Bu+=8,t;case 204:return Eu[Bu++];case 205:return t=Lu.getUint16(Bu),Bu+=2,t;case 206:return t=Lu.getUint32(Bu),Bu+=4,t;case 207:return"number"===Nu.int64AsType?(t=4294967296*Lu.getUint32(Bu),t+=Lu.getUint32(Bu+4)):"string"===Nu.int64AsType?t=Lu.getBigUint64(Bu).toString():"auto"===Nu.int64AsType?(t=Lu.getBigUint64(Bu),t<=BigInt(2)<<BigInt(52)&&(t=Number(t))):t=Lu.getBigUint64(Bu),Bu+=8,t;case 208:return Lu.getInt8(Bu++);case 209:return t=Lu.getInt16(Bu),Bu+=2,t;case 210:return t=Lu.getInt32(Bu),Bu+=4,t;case 211:return"number"===Nu.int64AsType?(t=4294967296*Lu.getInt32(Bu),t+=Lu.getUint32(Bu+4)):"string"===Nu.int64AsType?t=Lu.getBigInt64(Bu).toString():"auto"===Nu.int64AsType?(t=Lu.getBigInt64(Bu),t>=BigInt(-2)<<BigInt(52)&&t<=BigInt(2)<<BigInt(52)&&(t=Number(t))):t=Lu.getBigInt64(Bu),Bu+=8,t;case 212:if(t=Eu[Bu++],114==t)return _f(63&Eu[Bu++]);{let e=Yu[t];if(e)return e.read?(Bu++,e.read(Wu())):e.noBuffer?(Bu++,e()):e(Eu.subarray(Bu,++Bu));throw new Error("Unknown extension "+t)}case 213:return t=Eu[Bu],114==t?(Bu++,_f(63&Eu[Bu++],Eu[Bu++])):hf(2);case 214:return hf(4);case 215:return hf(8);case 216:return hf(16);case 217:return t=Eu[Bu++],Iu>=Bu?Cu.slice(Bu-Pu,(Bu+=t)-Pu):tf(t);case 218:return t=Lu.getUint16(Bu),Iu>=(Bu+=2)?Cu.slice(Bu-Pu,(Bu+=t)-Pu):nf(t);case 219:return t=Lu.getUint32(Bu),Iu>=(Bu+=4)?Cu.slice(Bu-Pu,(Bu+=t)-Pu):sf(t);case 220:return t=Lu.getUint16(Bu),Bu+=2,af(t);case 221:return t=Lu.getUint32(Bu),Bu+=4,af(t);case 222:return t=Lu.getUint16(Bu),Bu+=2,of(t);case 223:return t=Lu.getUint32(Bu),Bu+=4,of(t);default:if(e>=224)return e-256;if(void 0===e){let e=new Error("Unexpected end of MessagePack data");throw e.incomplete=!0,e}throw new Error("Unknown MessagePack token "+e)}}}const Vu=/^[a-zA-Z_$][a-zA-Z\d_$]*$/;function qu(e,t){function n(){if(n.count++>Gu){let n=e.read=new Function("r","return function(){return "+(Nu.freezeData?"Object.freeze":"")+"({"+e.map((e=>"__proto__"===e?"__proto_:r()":Vu.test(e)?e+":r()":"["+JSON.stringify(e)+"]:r()")).join(",")+"})}")(Wu);return 0===e.highByte&&(e.read=Ku(t,e.read)),n()}let s={};for(let t=0,n=e.length;t<n;t++){let n=e[t];"__proto__"===n&&(n="__proto_"),s[n]=Wu()}return Nu.freezeData?Object.freeze(s):s}return n.count=0,0===e.highByte?Ku(t,n):n}const Ku=(e,t)=>function(){let n=Eu[Bu++];if(0===n)return t();let s=e<32?-(e+(n<<5)):e+(n<<5),i=ku[s]||$u()[s];if(!i)throw new Error("Record id is not defined for "+s);return i.read||(i.read=qu(i,e)),i.read()};function $u(){let e=xf((()=>(Eu=null,Nu.getStructures())));return ku=Nu._mergeStructures(e,ku)}var ef=rf,tf=rf,nf=rf,sf=rf;function rf(e){let t;if(e<16&&(t=df(e)))return t;if(e>64&&vu)return vu.decode(Eu.subarray(Bu,Bu+=e));const n=Bu+e,s=[];for(t="";Bu<n;){const e=Eu[Bu++];if(128&e)if(192==(224&e)){const t=63&Eu[Bu++];s.push((31&e)<<6|t)}else if(224==(240&e)){const t=63&Eu[Bu++],n=63&Eu[Bu++];s.push((31&e)<<12|t<<6|n)}else if(240==(248&e)){let t=(7&e)<<18|(63&Eu[Bu++])<<12|(63&Eu[Bu++])<<6|63&Eu[Bu++];t>65535&&(t-=65536,s.push(t>>>10&1023|55296),t=56320|1023&t),s.push(t)}else s.push(e);else s.push(e);s.length>=4096&&(t+=lf.apply(String,s),s.length=0)}return s.length>0&&(t+=lf.apply(String,s)),t}function af(e){let t=new Array(e);for(let n=0;n<e;n++)t[n]=Wu();return Nu.freezeData?Object.freeze(t):t}function of(e){if(Nu.mapsAsObjects){let t={};for(let n=0;n<e;n++){let e=mf();"__proto__"===e&&(e="__proto_"),t[e]=Wu()}return t}{let t=new Map;for(let n=0;n<e;n++)t.set(Wu(),Wu());return t}}var lf=String.fromCharCode;function cf(e){let t=Bu,n=new Array(e);for(let s=0;s<e;s++){const e=Eu[Bu++];if((128&e)>0)return void(Bu=t);n[s]=e}return lf.apply(String,n)}function df(e){if(e<4){if(e<2){if(0===e)return"";{let e=Eu[Bu++];return(128&e)>1?void(Bu-=1):lf(e)}}{let t=Eu[Bu++],n=Eu[Bu++];if((128&t)>0||(128&n)>0)return void(Bu-=2);if(e<3)return lf(t,n);let s=Eu[Bu++];return(128&s)>0?void(Bu-=3):lf(t,n,s)}}{let t=Eu[Bu++],n=Eu[Bu++],s=Eu[Bu++],i=Eu[Bu++];if((128&t)>0||(128&n)>0||(128&s)>0||(128&i)>0)return void(Bu-=4);if(e<6){if(4===e)return lf(t,n,s,i);{let e=Eu[Bu++];return(128&e)>0?void(Bu-=5):lf(t,n,s,i,e)}}if(e<8){let r=Eu[Bu++],a=Eu[Bu++];if((128&r)>0||(128&a)>0)return void(Bu-=6);if(e<7)return lf(t,n,s,i,r,a);let o=Eu[Bu++];return(128&o)>0?void(Bu-=7):lf(t,n,s,i,r,a,o)}{let r=Eu[Bu++],a=Eu[Bu++],o=Eu[Bu++],l=Eu[Bu++];if((128&r)>0||(128&a)>0||(128&o)>0||(128&l)>0)return void(Bu-=8);if(e<10){if(8===e)return lf(t,n,s,i,r,a,o,l);{let e=Eu[Bu++];return(128&e)>0?void(Bu-=9):lf(t,n,s,i,r,a,o,l,e)}}if(e<12){let c=Eu[Bu++],d=Eu[Bu++];if((128&c)>0||(128&d)>0)return void(Bu-=10);if(e<11)return lf(t,n,s,i,r,a,o,l,c,d);let u=Eu[Bu++];return(128&u)>0?void(Bu-=11):lf(t,n,s,i,r,a,o,l,c,d,u)}{let c=Eu[Bu++],d=Eu[Bu++],u=Eu[Bu++],f=Eu[Bu++];if((128&c)>0||(128&d)>0||(128&u)>0||(128&f)>0)return void(Bu-=12);if(e<14){if(12===e)return lf(t,n,s,i,r,a,o,l,c,d,u,f);{let e=Eu[Bu++];return(128&e)>0?void(Bu-=13):lf(t,n,s,i,r,a,o,l,c,d,u,f,e)}}{let h=Eu[Bu++],p=Eu[Bu++];if((128&h)>0||(128&p)>0)return void(Bu-=14);if(e<15)return lf(t,n,s,i,r,a,o,l,c,d,u,f,h,p);let m=Eu[Bu++];return(128&m)>0?void(Bu-=15):lf(t,n,s,i,r,a,o,l,c,d,u,f,h,p,m)}}}}}function uf(){let e,t=Eu[Bu++];if(t<192)e=t-160;else switch(t){case 217:e=Eu[Bu++];break;case 218:e=Lu.getUint16(Bu),Bu+=2;break;case 219:e=Lu.getUint32(Bu),Bu+=4;break;default:throw new Error("Expected string")}return rf(e)}function ff(e){return Nu.copyBuffers?Uint8Array.prototype.slice.call(Eu,Bu,Bu+=e):Eu.subarray(Bu,Bu+=e)}function hf(e){let t=Eu[Bu++];if(Yu[t]){let n;return Yu[t](Eu.subarray(Bu,n=Bu+=e),(e=>{Bu=e;try{return Wu()}finally{Bu=n}}))}throw new Error("Unknown extension type "+t)}var pf=new Array(4096);function mf(){let e=Eu[Bu++];if(!(e>=160&&e<192))return Bu--,gf(Wu());if(e-=160,Iu>=Bu)return Cu.slice(Bu-Pu,(Bu+=e)-Pu);if(!(0==Iu&&Mu<180))return ef(e);let t,n=4095&(e<<5^(e>1?Lu.getUint16(Bu):e>0?Eu[Bu]:0)),s=pf[n],i=Bu,r=Bu+e-3,a=0;if(s&&s.bytes==e){for(;i<r;){if(t=Lu.getUint32(i),t!=s[a++]){i=1879048192;break}i+=4}for(r+=3;i<r;)if(t=Eu[i++],t!=s[a++]){i=1879048192;break}if(i===r)return Bu=i,s.string;r-=3,i=Bu}for(s=[],pf[n]=s,s.bytes=e;i<r;)t=Lu.getUint32(i),s.push(t),i+=4;for(r+=3;i<r;)t=Eu[i++],s.push(t);let o=e<16?df(e):cf(e);return s.string=null!=o?o:ef(e)}function gf(e){if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e||"bigint"==typeof e)return e.toString();if(null==e)return e+"";throw new Error("Invalid property type for record",typeof e)}const _f=(e,t)=>{let n=Wu().map(gf),s=e;void 0!==t&&(e=e<32?-((t<<5)+e):(t<<5)+e,n.highByte=t);let i=ku[e];return i&&(i.isShared||Ru)&&((ku.restoreStructures||(ku.restoreStructures=[]))[e]=i),ku[e]=n,n.read=qu(n,s),n.read()};Yu[0]=()=>{},Yu[0].noBuffer=!0,Yu[66]=e=>{let t=e.length,n=BigInt(128&e[0]?e[0]-256:e[0]);for(let s=1;s<t;s++)n<<=BigInt(8),n+=BigInt(e[s]);return n};let bf={Error,TypeError,ReferenceError};Yu[101]=()=>{let e=Wu();return(bf[e[0]]||Error)(e[1],{cause:e[2]})},Yu[105]=e=>{if(!1===Nu.structuredClone)throw new Error("Structured clone extension is disabled");let t=Lu.getUint32(Bu-4);Du||(Du=new Map);let n,s=Eu[Bu];n=s>=144&&s<160||220==s||221==s?[]:{};let i={target:n};Du.set(t,i);let r=Wu();return i.used?Object.assign(n,r):(i.target=r,r)},Yu[112]=e=>{if(!1===Nu.structuredClone)throw new Error("Structured clone extension is disabled");let t=Lu.getUint32(Bu-4),n=Du.get(t);return n.used=!0,n.target},Yu[115]=()=>new Set(Wu());const yf=["Int8","Uint8","Uint8Clamped","Int16","Uint16","Int32","Uint32","Float32","Float64","BigInt64","BigUint64"].map((e=>e+"Array"));let Af="object"==typeof globalThis?globalThis:window;Yu[116]=e=>{let t=e[0],n=yf[t];if(!n){if(16===t){let t=new ArrayBuffer(e.length-1);return new Uint8Array(t).set(e.subarray(1)),t}throw new Error("Could not find typed array for code "+t)}return new Af[n](Uint8Array.prototype.slice.call(e,1).buffer)},Yu[120]=()=>{let e=Wu();return new RegExp(e[0],e[1])};const wf=[];function xf(e){Uu&&Uu();let t=Mu,n=Bu,s=Su,i=Pu,r=Iu,a=Cu,o=Tu,l=Du,c=Ou,d=new Uint8Array(Eu.slice(0,Mu)),u=ku,f=ku.slice(0,ku.length),h=Nu,p=Ru,m=e();return Mu=t,Bu=n,Su=s,Pu=i,Iu=r,Cu=a,Tu=o,Du=l,Ou=c,Eu=d,Ru=p,(ku=u).splice(0,ku.length,...f),Nu=h,Lu=new DataView(Eu.buffer,Eu.byteOffset,Eu.byteLength),m}function vf(){Eu=null,Du=null,ku=null}Yu[98]=e=>{let t=(e[0]<<24)+(e[1]<<16)+(e[2]<<8)+e[3],n=Bu;return Bu+=t-e.length,Ou=wf,(Ou=[uf(),uf()]).position0=0,Ou.position1=0,Ou.postBundlePosition=Bu,Bu=n,Wu()},Yu[255]=e=>4==e.length?new Date(1e3*(16777216*e[0]+(e[1]<<16)+(e[2]<<8)+e[3])):8==e.length?new Date(((e[0]<<22)+(e[1]<<14)+(e[2]<<6)+(e[3]>>2))/1e6+1e3*(4294967296*(3&e[3])+16777216*e[4]+(e[5]<<16)+(e[6]<<8)+e[7])):12==e.length?new Date(((e[0]<<24)+(e[1]<<16)+(e[2]<<8)+e[3])/1e6+1e3*((128&e[4]?-281474976710656:0)+1099511627776*e[6]+4294967296*e[7]+16777216*e[8]+(e[9]<<16)+(e[10]<<8)+e[11])):new Date("invalid");const Ef=new Array(147);for(let e=0;e<256;e++)Ef[e]=+("1e"+Math.floor(45.15-.30103*e));var Mf=new Zu({useRecords:!1});Mf.unpack,Mf.unpackMultiple,Mf.unpack;let zf=new Float32Array(1);new Uint8Array(zf.buffer,0,4);var Bf=i(8891).Buffer;let Ff,kf,Cf;try{Ff=new TextEncoder}catch(e){}const Of=void 0!==Bf,Df=Of?function(e){return Bf.allocUnsafeSlow(e)}:Uint8Array,Lf=Of?Bf:Uint8Array,Tf=Of?4294967296:2144337920;let Sf,Nf,Pf,If,Yf=0,Qf=null;const jf=/[\u0080-\uFFFF]/,Hf=Symbol("record-id");class Uf extends Zu{constructor(e){let t,n,s,i;super(e),this.offset=0;let r=Lf.prototype.utf8Write?function(e,t){return Sf.utf8Write(e,t,Sf.byteLength-t)}:!(!Ff||!Ff.encodeInto)&&function(e,t){return Ff.encodeInto(e,Sf.subarray(t)).written},a=this;e||(e={});let o=e&&e.sequential,l=e.structures||e.saveStructures,c=e.maxSharedStructures;if(null==c&&(c=l?32:0),c>8160)throw new Error("Maximum maxSharedStructure is 8160");e.structuredClone&&null==e.moreTypes&&(this.moreTypes=!0);let d=e.maxOwnStructures;null==d&&(d=l?32:64),this.structures||0==e.useRecords||(this.structures=[]);let u=c>32||d+c>64,f=c+64,h=c+d+64;if(h>8256)throw new Error("Maximum maxSharedStructure + maxOwnStructure is 8192");let p=[],m=0,g=0;this.pack=this.encode=function(e,r){if(Sf||(Sf=new Df(8192),Pf=Sf.dataView||(Sf.dataView=new DataView(Sf.buffer,0,8192)),Yf=0),If=Sf.length-10,If-Yf<2048?(Sf=new Df(Sf.length),Pf=Sf.dataView||(Sf.dataView=new DataView(Sf.buffer,0,Sf.length)),If=Sf.length-10,Yf=0):Yf=Yf+7&2147483640,t=Yf,r&sh&&(Yf+=255&r),i=a.structuredClone?new Map:null,a.bundleStrings&&"string"!=typeof e?(Qf=[],Qf.size=1/0):Qf=null,s=a.structures,s){s.uninitialized&&(s=a._mergeStructures(a.getStructures()));let e=s.sharedLength||0;if(e>c)throw new Error("Shared structures is larger than maximum shared structures, try increasing maxSharedStructures to "+s.sharedLength);if(!s.transitions){s.transitions=Object.create(null);for(let t=0;t<e;t++){let e=s[t];if(!e)continue;let n,i=s.transitions;for(let t=0,s=e.length;t<s;t++){let s=e[t];n=i[s],n||(n=i[s]=Object.create(null)),i=n}i[Hf]=t+64}this.lastNamedStructuresLength=e}o||(s.nextId=e+64)}let l;n&&(n=!1);try{a.randomAccessStructure&&e&&e.constructor&&e.constructor===Object?B(e):y(e);let n=Qf;if(Qf&&Jf(t,y,0),i&&i.idsToInsert){let e=i.idsToInsert.sort(((e,t)=>e.offset>t.offset?1:-1)),s=e.length,r=-1;for(;n&&s>0;){let i=e[--s].offset+t;i<n.stringsPosition+t&&-1===r&&(r=0),i>n.position+t?r>=0&&(r+=6):(r>=0&&(Pf.setUint32(n.position+t,Pf.getUint32(n.position+t)+r),r=-1),n=n.previous,s++)}r>=0&&n&&Pf.setUint32(n.position+t,Pf.getUint32(n.position+t)+r),Yf+=6*e.length,Yf>If&&E(Yf),a.offset=Yf;let o=function(e,t){let n,s=6*t.length,i=e.length-s;for(;n=t.pop();){let t=n.offset,r=n.id;e.copyWithin(t+s,t,i),s-=6;let a=t+s;e[a++]=214,e[a++]=105,e[a++]=r>>24,e[a++]=r>>16&255,e[a++]=r>>8&255,e[a++]=255&r,i=t}return e}(Sf.subarray(t,Yf),e);return i=null,o}return a.offset=Yf,r&th?(Sf.start=t,Sf.end=Yf,Sf):Sf.subarray(t,Yf)}catch(e){throw l=e,e}finally{if(s&&(_(),n&&a.saveStructures)){let n=s.sharedLength||0,i=Sf.subarray(t,Yf),o=function(e,t){return e.isCompatible=e=>{let n=!e||(t.lastNamedStructuresLength||0)===e.length;return n||t._mergeStructures(e),n},e}(s,a);if(!l)return!1===a.saveStructures(o,o.isCompatible)?a.pack(e,r):(a.lastNamedStructuresLength=n,Sf.length>1073741824&&(Sf=null),i)}Sf.length>1073741824&&(Sf=null),r&nh&&(Yf=t)}};const _=()=>{g<10&&g++;let e=s.sharedLength||0;if(s.length>e&&!o&&(s.length=e),m>1e4)s.transitions=null,g=0,m=0,p.length>0&&(p=[]);else if(p.length>0&&!o){for(let e=0,t=p.length;e<t;e++)p[e][Hf]=0;p=[]}},b=e=>{var t=e.length;t<16?Sf[Yf++]=144|t:t<65536?(Sf[Yf++]=220,Sf[Yf++]=t>>8,Sf[Yf++]=255&t):(Sf[Yf++]=221,Pf.setUint32(Yf,t),Yf+=4);for(let n=0;n<t;n++)y(e[n])},y=e=>{Yf>If&&(Sf=E(Yf));var n,s=typeof e;if("string"===s){let s,i=e.length;if(Qf&&i>=4&&i<4096){if((Qf.size+=i)>21760){let e,n,s=(Qf[0]?3*Qf[0].length+Qf[1].length:0)+10;Yf+s>If&&(Sf=E(Yf+s)),Qf.position?(n=Qf,Sf[Yf]=200,Yf+=3,Sf[Yf++]=98,e=Yf-t,Yf+=4,Jf(t,y,0),Pf.setUint16(e+t-3,Yf-t-e)):(Sf[Yf++]=214,Sf[Yf++]=98,e=Yf-t,Yf+=4),Qf=["",""],Qf.previous=n,Qf.size=0,Qf.position=e}let n=jf.test(e);return Qf[n?0:1]+=e,Sf[Yf++]=193,void y(n?-i:i)}s=i<32?1:i<256?2:i<65536?3:5;let a=3*i;if(Yf+a>If&&(Sf=E(Yf+a)),i<64||!r){let t,r,a,o=Yf+s;for(t=0;t<i;t++)r=e.charCodeAt(t),r<128?Sf[o++]=r:r<2048?(Sf[o++]=r>>6|192,Sf[o++]=63&r|128):55296==(64512&r)&&56320==(64512&(a=e.charCodeAt(t+1)))?(r=65536+((1023&r)<<10)+(1023&a),t++,Sf[o++]=r>>18|240,Sf[o++]=r>>12&63|128,Sf[o++]=r>>6&63|128,Sf[o++]=63&r|128):(Sf[o++]=r>>12|224,Sf[o++]=r>>6&63|128,Sf[o++]=63&r|128);n=o-Yf-s}else n=r(e,Yf+s);n<32?Sf[Yf++]=160|n:n<256?(s<2&&Sf.copyWithin(Yf+2,Yf+1,Yf+1+n),Sf[Yf++]=217,Sf[Yf++]=n):n<65536?(s<3&&Sf.copyWithin(Yf+3,Yf+2,Yf+2+n),Sf[Yf++]=218,Sf[Yf++]=n>>8,Sf[Yf++]=255&n):(s<5&&Sf.copyWithin(Yf+5,Yf+3,Yf+3+n),Sf[Yf++]=219,Pf.setUint32(Yf,n),Yf+=4),Yf+=n}else if("number"===s)if(e>>>0===e)e<32||e<128&&!1===this.useRecords||e<64&&!this.randomAccessStructure?Sf[Yf++]=e:e<256?(Sf[Yf++]=204,Sf[Yf++]=e):e<65536?(Sf[Yf++]=205,Sf[Yf++]=e>>8,Sf[Yf++]=255&e):(Sf[Yf++]=206,Pf.setUint32(Yf,e),Yf+=4);else if((0|e)===e)e>=-32?Sf[Yf++]=256+e:e>=-128?(Sf[Yf++]=208,Sf[Yf++]=e+256):e>=-32768?(Sf[Yf++]=209,Pf.setInt16(Yf,e),Yf+=2):(Sf[Yf++]=210,Pf.setInt32(Yf,e),Yf+=4);else{let t;if((t=this.useFloat32)>0&&e<4294967296&&e>=-2147483648){let n;if(Sf[Yf++]=202,Pf.setFloat32(Yf,e),t<4||(0|(n=e*Ef[(127&Sf[Yf])<<1|Sf[Yf+1]>>7]))===n)return void(Yf+=4);Yf--}Sf[Yf++]=203,Pf.setFloat64(Yf,e),Yf+=8}else if("object"===s||"function"===s)if(e){if(i){let n=i.get(e);if(n){if(!n.id){let e=i.idsToInsert||(i.idsToInsert=[]);n.id=e.push(n)}return Sf[Yf++]=214,Sf[Yf++]=112,Pf.setUint32(Yf,n.id),void(Yf+=4)}i.set(e,{offset:Yf-t})}let r=e.constructor;if(r===Object)v(e);else if(r===Array)b(e);else if(r===Map)if(this.mapAsEmptyObject)Sf[Yf++]=128;else{(n=e.size)<16?Sf[Yf++]=128|n:n<65536?(Sf[Yf++]=222,Sf[Yf++]=n>>8,Sf[Yf++]=255&n):(Sf[Yf++]=223,Pf.setUint32(Yf,n),Yf+=4);for(let[t,n]of e)y(t),y(n)}else{for(let t=0,n=kf.length;t<n;t++)if(e instanceof Cf[t]){let n=kf[t];if(n.write){n.type&&(Sf[Yf++]=212,Sf[Yf++]=n.type,Sf[Yf++]=0);let t=n.write.call(this,e);return void(t===e?Array.isArray(e)?b(e):v(e):y(t))}let s,i=Sf,r=Pf,a=Yf;Sf=null;try{s=n.pack.call(this,e,(e=>(Sf=i,i=null,Yf+=e,Yf>If&&E(Yf),{target:Sf,targetView:Pf,position:Yf-e})),y)}finally{i&&(Sf=i,Pf=r,Yf=a,If=Sf.length-10)}return void(s&&(s.length+Yf>If&&E(s.length+Yf),Yf=Zf(s,Sf,Yf,n.type)))}if(Array.isArray(e))b(e);else{if(e.toJSON){const t=e.toJSON();if(t!==e)return y(t)}if("function"===s)return y(this.writeFunction&&this.writeFunction(e));v(e)}}}else Sf[Yf++]=192;else if("boolean"===s)Sf[Yf++]=e?195:194;else if("bigint"===s){if(e<BigInt(1)<<BigInt(63)&&e>=-(BigInt(1)<<BigInt(63)))Sf[Yf++]=211,Pf.setBigInt64(Yf,e);else if(e<BigInt(1)<<BigInt(64)&&e>0)Sf[Yf++]=207,Pf.setBigUint64(Yf,e);else{if(!this.largeBigIntToFloat){if(this.largeBigIntToString)return y(e.toString());if(this.useBigIntExtension&&e<BigInt(2)**BigInt(1023)&&e>-(BigInt(2)**BigInt(1023))){Sf[Yf++]=199,Yf++,Sf[Yf++]=66;let t,n=[];do{let s=e&BigInt(255);t=(s&BigInt(128))===(e<BigInt(0)?BigInt(128):BigInt(0)),n.push(s),e>>=BigInt(8)}while(e!==BigInt(0)&&e!==BigInt(-1)||!t);Sf[Yf-2]=n.length;for(let e=n.length;e>0;)Sf[Yf++]=Number(n[--e]);return}throw new RangeError(e+" was too large to fit in MessagePack 64-bit integer format, use useBigIntExtension, or set largeBigIntToFloat to convert to float-64, or set largeBigIntToString to convert to string")}Sf[Yf++]=203,Pf.setFloat64(Yf,Number(e))}Yf+=8}else{if("undefined"!==s)throw new Error("Unknown type: "+s);this.encodeUndefinedAsNil?Sf[Yf++]=192:(Sf[Yf++]=212,Sf[Yf++]=0,Sf[Yf++]=0)}},A=this.variableMapSize||this.coercibleKeyAsNumber||this.skipValues?e=>{let t;if(this.skipValues){t=[];for(let n in e)"function"==typeof e.hasOwnProperty&&!e.hasOwnProperty(n)||this.skipValues.includes(e[n])||t.push(n)}else t=Object.keys(e);let n,s=t.length;if(s<16?Sf[Yf++]=128|s:s<65536?(Sf[Yf++]=222,Sf[Yf++]=s>>8,Sf[Yf++]=255&s):(Sf[Yf++]=223,Pf.setUint32(Yf,s),Yf+=4),this.coercibleKeyAsNumber)for(let i=0;i<s;i++){n=t[i];let s=Number(n);y(isNaN(s)?n:s),y(e[n])}else for(let i=0;i<s;i++)y(n=t[i]),y(e[n])}:e=>{Sf[Yf++]=222;let n=Yf-t;Yf+=2;let s=0;for(let t in e)("function"!=typeof e.hasOwnProperty||e.hasOwnProperty(t))&&(y(t),y(e[t]),s++);if(s>65535)throw new Error('Object is too large to serialize with fast 16-bit map size, use the "variableMapSize" option to serialize this object');Sf[n+++t]=s>>8,Sf[n+t]=255&s},w=!1===this.useRecords?A:e.progressiveRecords&&!u?e=>{let n,i,r=s.transitions||(s.transitions=Object.create(null)),a=Yf++-t;for(let o in e)if("function"!=typeof e.hasOwnProperty||e.hasOwnProperty(o)){if(n=r[o],n)r=n;else{let l=Object.keys(e),c=r;r=s.transitions;let d=0;for(let e=0,t=l.length;e<t;e++){let t=l[e];n=r[t],n||(n=r[t]=Object.create(null),d++),r=n}a+t+1==Yf?(Yf--,M(r,l,d)):z(r,l,a,d),i=!0,r=c[o]}y(e[o])}if(!i){let n=r[Hf];n?Sf[a+t]=n:z(r,Object.keys(e),a,0)}}:e=>{let t,n=s.transitions||(s.transitions=Object.create(null)),i=0;for(let s in e)("function"!=typeof e.hasOwnProperty||e.hasOwnProperty(s))&&(t=n[s],t||(t=n[s]=Object.create(null),i++),n=t);let r=n[Hf];r?r>=96&&u?(Sf[Yf++]=96+(31&(r-=96)),Sf[Yf++]=r>>5):Sf[Yf++]=r:M(n,n.__keys__||Object.keys(e),i);for(let t in e)("function"!=typeof e.hasOwnProperty||e.hasOwnProperty(t))&&y(e[t])},x="function"==typeof this.useRecords&&this.useRecords,v=x?e=>{x(e)?w(e):A(e)}:w,E=e=>{let n;if(e>16777216){if(e-t>Tf)throw new Error("Packed buffer would be larger than maximum buffer size");n=Math.min(Tf,4096*Math.round(Math.max((e-t)*(e>67108864?1.25:2),4194304)/4096))}else n=1+(Math.max(e-t<<2,Sf.length-1)>>12)<<12;let s=new Df(n);return Pf=s.dataView||(s.dataView=new DataView(s.buffer,0,n)),e=Math.min(e,Sf.length),Sf.copy?Sf.copy(s,0,t,e):s.set(Sf.slice(t,e)),Yf-=t,t=0,If=s.length-10,Sf=s},M=(e,t,i)=>{let r=s.nextId;r||(r=64),r<f&&this.shouldShareStructure&&!this.shouldShareStructure(t)?(r=s.nextOwnId,r<h||(r=f),s.nextOwnId=r+1):(r>=h&&(r=f),s.nextId=r+1);let a=t.highByte=r>=96&&u?r-96>>5:-1;e[Hf]=r,e.__keys__=t,s[r-64]=t,r<f?(t.isShared=!0,s.sharedLength=r-63,n=!0,a>=0?(Sf[Yf++]=96+(31&r),Sf[Yf++]=a):Sf[Yf++]=r):(a>=0?(Sf[Yf++]=213,Sf[Yf++]=114,Sf[Yf++]=96+(31&r),Sf[Yf++]=a):(Sf[Yf++]=212,Sf[Yf++]=114,Sf[Yf++]=r),i&&(m+=g*i),p.length>=d&&(p.shift()[Hf]=0),p.push(e),y(t))},z=(e,n,s,i)=>{let r=Sf,a=Yf,o=If,l=t;Sf=Nf,Yf=0,t=0,Sf||(Nf=Sf=new Df(8192)),If=Sf.length-10,M(e,n,i),Nf=Sf;let c=Yf;if(Sf=r,Yf=a,If=o,t=l,c>1){let e=Yf+c-1;e>If&&E(e);let n=s+t;Sf.copyWithin(n+c,n+1,Yf),Sf.set(Nf.slice(0,c),n),Yf=e}else Sf[s+t]=Nf[0]},B=e=>{let i=undefined(e,Sf,t,Yf,s,E,((e,t,s)=>{if(s)return n=!0;Yf=t;let i=Sf;return y(e),_(),i!==Sf?{position:Yf,targetView:Pf,target:Sf}:Yf}),this);if(0===i)return v(e);Yf=i}}useBuffer(e){Sf=e,Sf.dataView||(Sf.dataView=new DataView(Sf.buffer,Sf.byteOffset,Sf.byteLength)),Yf=0}set position(e){Yf=e}get position(){return Yf}clearSharedData(){this.structures&&(this.structures=[]),this.typedStructs&&(this.typedStructs=[])}}function Rf(e,t,n,s){let i=e.byteLength;if(i+1<256){var{target:r,position:a}=n(4+i);r[a++]=199,r[a++]=i+1}else if(i+1<65536){var{target:r,position:a}=n(5+i);r[a++]=200,r[a++]=i+1>>8,r[a++]=i+1&255}else{var{target:r,position:a,targetView:o}=n(7+i);r[a++]=201,o.setUint32(a,i+1),a+=4}r[a++]=116,r[a++]=t,e.buffer||(e=new Uint8Array(e)),r.set(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),a)}function Gf(e,t){let n=e.byteLength;var s,i;if(n<256){var{target:s,position:i}=t(n+2);s[i++]=196,s[i++]=n}else if(n<65536){var{target:s,position:i}=t(n+3);s[i++]=197,s[i++]=n>>8,s[i++]=255&n}else{var{target:s,position:i,targetView:r}=t(n+5);s[i++]=198,r.setUint32(i,n),i+=4}s.set(e,i)}function Zf(e,t,n,s){let i=e.length;switch(i){case 1:t[n++]=212;break;case 2:t[n++]=213;break;case 4:t[n++]=214;break;case 8:t[n++]=215;break;case 16:t[n++]=216;break;default:i<256?(t[n++]=199,t[n++]=i):i<65536?(t[n++]=200,t[n++]=i>>8,t[n++]=255&i):(t[n++]=201,t[n++]=i>>24,t[n++]=i>>16&255,t[n++]=i>>8&255,t[n++]=255&i)}return t[n++]=s,t.set(e,n),n+i}function Jf(e,t,n){if(Qf.length>0){Pf.setUint32(Qf.position+e,Yf+n-Qf.position-e),Qf.stringsPosition=Yf-e;let s=Qf;Qf=null,t(s[0]),t(s[1])}}function Xf(e){if(e.Class){if(!e.pack&&!e.write)throw new Error("Extension has no pack or write function");if(e.pack&&!e.type)throw new Error("Extension has no type (numeric code to identify the extension)");Cf.unshift(e.Class),kf.unshift(e)}!function(e){e.unpack?Yu[e.type]=e.unpack:Yu[e.type]=e}(e)}Cf=[Date,Set,Error,RegExp,ArrayBuffer,Object.getPrototypeOf(Uint8Array.prototype).constructor,ju],kf=[{pack(e,t,n){let s=e.getTime()/1e3;if((this.useTimestamp32||0===e.getMilliseconds())&&s>=0&&s<4294967296){let{target:e,targetView:n,position:i}=t(6);e[i++]=214,e[i++]=255,n.setUint32(i,s)}else if(s>0&&s<4294967296){let{target:n,targetView:i,position:r}=t(10);n[r++]=215,n[r++]=255,i.setUint32(r,4e6*e.getMilliseconds()+(s/1e3/4294967296|0)),i.setUint32(r+4,s)}else if(isNaN(s)){if(this.onInvalidDate)return t(0),n(this.onInvalidDate());let{target:e,targetView:s,position:i}=t(3);e[i++]=212,e[i++]=255,e[i++]=255}else{let{target:n,targetView:i,position:r}=t(15);n[r++]=199,n[r++]=12,n[r++]=255,i.setUint32(r,1e6*e.getMilliseconds()),i.setBigInt64(r+4,BigInt(Math.floor(s)))}}},{pack(e,t,n){if(this.setAsEmptyObject)return t(0),n({});let s=Array.from(e),{target:i,position:r}=t(this.moreTypes?3:0);this.moreTypes&&(i[r++]=212,i[r++]=115,i[r++]=0),n(s)}},{pack(e,t,n){let{target:s,position:i}=t(this.moreTypes?3:0);this.moreTypes&&(s[i++]=212,s[i++]=101,s[i++]=0),n([e.name,e.message,e.cause])}},{pack(e,t,n){let{target:s,position:i}=t(this.moreTypes?3:0);this.moreTypes&&(s[i++]=212,s[i++]=120,s[i++]=0),n([e.source,e.flags])}},{pack(e,t){this.moreTypes?Rf(e,16,t):Gf(Of?Bf.from(e):new Uint8Array(e),t)}},{pack(e,t){let n=e.constructor;n!==Lf&&this.moreTypes?Rf(e,yf.indexOf(n.name),t):Gf(e,t)}},{pack(e,t){let{target:n,position:s}=t(1);n[s]=193}}];let Wf=new Uf({useRecords:!1});Wf.pack,Wf.pack;const Vf=Uf,{NEVER:qf,ALWAYS:Kf,DECIMAL_ROUND:$f,DECIMAL_FIT:eh}={NEVER:0,ALWAYS:1,DECIMAL_ROUND:3,DECIMAL_FIT:4},th=512,nh=1024,sh=2048;i(8891).Buffer;class ih{constructor(e){this.items=e}toBuffer(){return _i(this.items.length,this.items)}toFriendlyJSON(){return this.items}}var rh,ah,oh;!function(e){e[e.STANDARD=0]="STANDARD",e[e.ULTRA=1]="ULTRA"}(rh||(rh={})),(oh=ah||(ah={}))[oh.Base=0]="Base",oh[oh.Merge=1]="Merge",oh[oh.Root=2]="Root";var lh=i(8891).Buffer;class ch{constructor(e,t,n){this.nullifier=e,this.nextNullifier=t,this.nextIndex=n}static get schema(){return zs.object({nullifier:id.Fr,nextNullifier:id.Fr,nextIndex:id.BigInt}).transform((({nullifier:e,nextNullifier:t,nextIndex:n})=>new ch(e,t,n)))}getKey(){return this.nullifier.toBigInt()}getNextKey(){return this.nextNullifier.toBigInt()}getNextIndex(){return this.nextIndex}asLeaf(){return new dh(this.nullifier)}toBuffer(){return lh.concat(this.toHashInputs())}toHashInputs(){return[lh.from(this.nullifier.toBuffer()),lh.from(this.nextNullifier.toBuffer()),lh.from(m(this.nextIndex,32))]}toFields(){return this.toHashInputs().map((e=>si.fromBuffer(e)))}clone(){return new ch(this.nullifier,this.nextNullifier,this.nextIndex)}static random(){return new ch(si.random(),si.random(),BigInt(Math.floor(1e3*Math.random())))}static empty(){return new ch(si.ZERO,si.ZERO,0n)}static fromBuffer(e){const t=Js.asReader(e);return new ch(t.readObject(si),t.readObject(si),p(t.readBytes(32)))}static fromLeaf(e,t,n){return new ch(e.nullifier,new si(t),n)}static clone(e){return new ch(e.nullifier,e.nextNullifier,e.nextIndex)}}class dh{constructor(e){this.nullifier=e}getKey(){return this.nullifier.toBigInt()}toBuffer(){return this.nullifier.toBuffer()}isEmpty(){return this.nullifier.isZero()}updateTo(e){throw new Error("Nullifiers are create only")}static buildDummy(e){return new dh(new si(e))}static fromBuffer(e){return new dh(si.fromBuffer(e))}}function uh(e,t,n=0){return Array.from({length:e},((e,s)=>t(s+n)))}const fh=["da","l2"];class hh{constructor(e,t){this.daGas=e,this.l2Gas=t}static get schema(){return zs.object({daGas:id.UInt32,l2Gas:id.UInt32}).transform(hh.from)}clone(){return new hh(this.daGas,this.l2Gas)}get(e){return this[`${e}Gas`]}equals(e){return this.daGas===e.daGas&&this.l2Gas===e.l2Gas}static from(e){return new hh(e.daGas??0,e.l2Gas??0)}static empty(){return new hh(0,0)}static random(){return new hh(Math.floor(1e9*Math.random()),Math.floor(1e9*Math.random()))}isEmpty(){return 0===this.daGas&&0===this.l2Gas}static fromBuffer(e){const t=Js.asReader(e);return new hh(t.readNumber(),t.readNumber())}toBuffer(){return _i(this.daGas,this.l2Gas)}[f.inspect.custom](){return`Gas { daGas=${this.daGas} l2Gas=${this.l2Gas} }`}add(e){return new hh(this.daGas+e.daGas,this.l2Gas+e.l2Gas)}sub(e){return new hh(this.daGas-e.daGas,this.l2Gas-e.l2Gas)}mul(e){return new hh(Math.ceil(this.daGas*e),Math.ceil(this.l2Gas*e))}gtAny(e){return this.daGas>e.daGas||this.l2Gas>e.l2Gas}computeFee(e){return fh.reduce(((t,n)=>t.add(e.get(n).mul(new si(this.get(n))))),si.ZERO)}toFields(){return gi(this.daGas,this.l2Gas)}static fromFields(e){const t=vi.asReader(e);return new hh(t.readU32(),t.readU32())}}class ph{constructor(e,t){this.feePerDaGas=new si(e),this.feePerL2Gas=new si(t)}static get schema(){return zs.object({feePerDaGas:id.Fr,feePerL2Gas:id.Fr}).transform(ph.from)}clone(){return new ph(this.feePerDaGas,this.feePerL2Gas)}equals(e){return this.feePerDaGas.equals(e.feePerDaGas)&&this.feePerL2Gas.equals(e.feePerL2Gas)}get(e){switch(e){case"da":return this.feePerDaGas;case"l2":return this.feePerL2Gas}}mul(e){return 1===e||1n===e?this.clone():"bigint"==typeof e?new ph(new si(this.feePerDaGas.toBigInt()*e),new si(this.feePerL2Gas.toBigInt()*e)):new ph(new si(this.feePerDaGas.toNumberUnsafe()*e),new si(this.feePerL2Gas.toNumberUnsafe()*e))}static from(e){return new ph(e.feePerDaGas,e.feePerL2Gas)}static random(){return new ph(si.random(),si.random())}static empty(){return new ph(si.ZERO,si.ZERO)}isEmpty(){return this.feePerDaGas.isZero()&&this.feePerL2Gas.isZero()}static fromBuffer(e){const t=Js.asReader(e);return new ph(t.readObject(si),t.readObject(si))}toBuffer(){return _i(this.feePerDaGas,this.feePerL2Gas)}static fromFields(e){const t=vi.asReader(e);return new ph(t.readField(),t.readField())}toFields(){return gi(this.feePerDaGas,this.feePerL2Gas)}[f.inspect.custom](){return`GasFees { feePerDaGas=${this.feePerDaGas} feePerL2Gas=${this.feePerL2Gas} }`}}class mh{constructor(e,t,n,s){this.gasLimits=e,this.teardownGasLimits=t,this.maxFeesPerGas=n,this.maxPriorityFeesPerGas=s}static get schema(){return zs.object({gasLimits:hh.schema,teardownGasLimits:hh.schema,maxFeesPerGas:ph.schema,maxPriorityFeesPerGas:ph.schema}).transform(mh.from)}getSize(){return this.toBuffer().length}static from(e){return new mh(hh.from(e.gasLimits),hh.from(e.teardownGasLimits),ph.from(e.maxFeesPerGas),ph.from(e.maxPriorityFeesPerGas))}clone(){return new mh(this.gasLimits.clone(),this.teardownGasLimits.clone(),this.maxFeesPerGas.clone(),this.maxPriorityFeesPerGas.clone())}getFeeLimit(){return fh.reduce(((e,t)=>this.maxFeesPerGas.get(t).mul(new si(this.gasLimits.get(t))).add(e)),si.ZERO)}static empty(){return new mh(hh.empty(),hh.empty(),ph.empty(),ph.empty())}static default(e){return mh.from({gasLimits:e.gasLimits??{l2Gas:Hi,daGas:Hi},teardownGasLimits:e.teardownGasLimits??{l2Gas:Ui,daGas:Ui},maxFeesPerGas:e.maxFeesPerGas,maxPriorityFeesPerGas:e.maxPriorityFeesPerGas??ph.empty()})}isEmpty(){return this.gasLimits.isEmpty()&&this.teardownGasLimits.isEmpty()&&this.maxFeesPerGas.isEmpty()&&this.maxPriorityFeesPerGas.isEmpty()}equals(e){return this.gasLimits.equals(e.gasLimits)&&this.teardownGasLimits.equals(e.teardownGasLimits)&&this.maxFeesPerGas.equals(e.maxFeesPerGas)&&this.maxPriorityFeesPerGas.equals(e.maxPriorityFeesPerGas)}static fromBuffer(e){const t=Js.asReader(e);return new mh(t.readObject(hh),t.readObject(hh),t.readObject(ph),t.readObject(ph))}toBuffer(){return _i(...mh.getFields(this))}static fromFields(e){const t=vi.asReader(e);return new mh(t.readObject(hh),t.readObject(hh),t.readObject(ph),t.readObject(ph))}toFields(){const e=gi(...mh.getFields(this));if(8!==e.length)throw new Error(`Invalid number of fields for GasSettings. Expected 8 but got ${e.length}`);return e}static getFields(e){return[e.gasLimits,e.teardownGasLimits,e.maxFeesPerGas,e.maxPriorityFeesPerGas]}}var gh=i(8891);function _h(e,t){return JSON.stringify(e,((e,t)=>"bigint"==typeof t?t.toString():"object"==typeof t&&t&&"Buffer"===t.type&&Array.isArray(t.data)?gh.Buffer.from(t.data).toString("base64"):"object"==typeof t&&t&&gh.Buffer.isBuffer(t)?t.toString("base64"):"object"==typeof t&&t instanceof Map?Array.from(t.entries()):"object"==typeof t&&t instanceof Set?Array.from(t.values()):t),t?2:0)}class bh{constructor(e,t,n,s,i,r,a,o){this.chainId=e,this.version=t,this.blockNumber=n,this.slotNumber=s,this.timestamp=i,this.coinbase=r,this.feeRecipient=a,this.gasFees=o}static get schema(){return zs.object({chainId:id.Fr,version:id.Fr,blockNumber:id.Fr,slotNumber:id.Fr,timestamp:id.Fr,coinbase:id.EthAddress,feeRecipient:id.AztecAddress,gasFees:ph.schema}).transform(bh.from)}getSize(){return this.toBuffer().length}static from(e){return new bh(...bh.getFields(e))}static empty(){return new bh(si.ZERO,si.ZERO,si.ZERO,si.ZERO,si.ZERO,Nc.ZERO,Gc.ZERO,ph.empty())}static fromBuffer(e){const t=Js.asReader(e);return new bh(si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),t.readObject(Nc),t.readObject(Gc),t.readObject(ph))}static fromFields(e){const t=vi.asReader(e);return new bh(t.readField(),t.readField(),t.readField(),t.readField(),t.readField(),Nc.fromField(t.readField()),Gc.fromField(t.readField()),ph.fromFields(t))}static getFields(e){return[e.chainId,e.version,e.blockNumber,e.slotNumber,e.timestamp,e.coinbase,e.feeRecipient,e.gasFees]}toBuffer(){return _i(...bh.getFields(this))}toFields(){const e=gi(...bh.getFields(this));if(9!==e.length)throw new Error(`Invalid number of fields for GlobalVariables. Expected 9, got ${e.length}`);return e}toFriendlyJSON(){return{blockNumber:this.blockNumber.toNumber(),slotNumber:this.slotNumber.toNumber(),timestamp:this.timestamp.toString(),coinbase:this.coinbase.toString(),gasFees:_h(this.gasFees)}}clone(){return bh.fromBuffer(this.toBuffer())}isEmpty(){return this.chainId.isZero()&&this.version.isZero()&&this.blockNumber.isZero()&&this.slotNumber.isZero()&&this.timestamp.isZero()&&this.coinbase.isZero()&&this.feeRecipient.isZero()&&this.gasFees.isEmpty()}toInspect(){return{chainId:this.chainId.toNumber(),version:this.version.toNumber(),blockNumber:this.blockNumber.toNumber(),slotNumber:this.slotNumber.toNumber(),timestamp:this.timestamp.toNumber(),coinbase:this.coinbase.toString(),feeRecipient:this.feeRecipient.toString(),feePerDaGas:this.gasFees.feePerDaGas.toNumber(),feePerL2Gas:this.gasFees.feePerL2Gas.toNumber()}}[f.inspect.custom](){return`GlobalVariables ${(0,f.inspect)(this.toInspect())}`}equals(e){return this.chainId.equals(e.chainId)&&this.version.equals(e.version)&&this.blockNumber.equals(e.blockNumber)&&this.slotNumber.equals(e.slotNumber)&&this.timestamp.equals(e.timestamp)&&this.coinbase.equals(e.coinbase)&&this.feeRecipient.equals(e.feeRecipient)&&this.gasFees.equals(e.gasFees)}}class yh{constructor(e,t,n){this.recipient=e,this.content=t,this.counter=n}static empty(){return new yh(Nc.ZERO,si.zero(),0)}equals(e){return this.recipient.equals(e.recipient)&&this.content.equals(e.content)&&this.counter===e.counter}toBuffer(){return _i(this.recipient,this.content,this.counter)}toFields(){const e=[this.recipient.toField(),this.content,new si(this.counter)];if(3!==e.length)throw new Error(`Invalid number of fields for L2ToL1Message. Expected 3, got ${e.length}`);return e}static fromFields(e){const t=vi.asReader(e);return new yh(t.readObject(Nc),t.readField(),t.readU32())}static fromBuffer(e){const t=Js.asReader(e);return new yh(t.readObject(Nc),t.readObject(si),t.readNumber())}isEmpty(){return this.recipient.isZero()&&this.content.isZero()&&!this.counter}scope(e){return new Ah(this,e)}}class Ah{constructor(e,t){this.message=e,this.contractAddress=t}static getFields(e){return[e.message,e.contractAddress]}static empty(){return new Ah(yh.empty(),Gc.ZERO)}equals(e){return this.message.equals(e.message)&&this.contractAddress.equals(e.contractAddress)}toBuffer(){return _i(this.message,this.contractAddress)}static fromBuffer(e){const t=Js.asReader(e);return new Ah(t.readObject(yh),t.readObject(Gc))}static fromFields(e){const t=vi.asReader(e);return new Ah(t.readObject(yh),t.readObject(Gc))}toFields(){const e=gi(...Ah.getFields(this));if(4!==e.length)throw new Error(`Invalid number of fields for ScopedL2ToL1Message. Expected 4, got ${e.length}`);return e}isEmpty(){return this.message.isEmpty()&&this.contractAddress.isZero()}}class wh{constructor(e,t,n){this.noteHashes=e,this.nullifiers=t,this.l2ToL1Msgs=n}getSize(){return Me(this.noteHashes)+Me(this.nullifiers)+Me(this.l2ToL1Msgs)}static getFields(e){return[e.noteHashes,e.nullifiers,e.l2ToL1Msgs]}static fromFields(e){const t=vi.asReader(e);return new this(t.readFieldArray(Di),t.readFieldArray(Li),t.readArray(8,Ah))}toFields(){const e=gi(...wh.getFields(this));if(160!==e.length)throw new Error(`Invalid number of fields for PrivateToAvmAccumulatedData. Expected 160, got ${e.length}`);return e}static from(e){return new wh(...wh.getFields(e))}static fromBuffer(e){const t=Js.asReader(e);return new wh(t.readArray(Di,si),t.readArray(Li,si),t.readArray(8,Ah))}toBuffer(){return _i(...wh.getFields(this))}static empty(){return new wh(uh(Di,si.zero),uh(Li,si.zero),uh(8,Ah.empty))}[f.inspect.custom](){return`PrivateToAvmAccumulatedData {\n      noteHashes: [${this.noteHashes.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      nullifiers: [${this.nullifiers.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      l2ToL1Msgs: [${this.l2ToL1Msgs.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n    }`}}class xh{constructor(e,t,n){this.noteHashes=e,this.nullifiers=t,this.l2ToL1Msgs=n}getSize(){return 12}static getFields(e){return[e.noteHashes,e.nullifiers,e.l2ToL1Msgs]}static fromFields(e){const t=vi.asReader(e);return new this(t.readU32(),t.readU32(),t.readU32())}static from(e){return new xh(...xh.getFields(e))}static fromBuffer(e){const t=Js.asReader(e);return new xh(t.readNumber(),t.readNumber(),t.readNumber())}toBuffer(){return _i(...xh.getFields(this))}static empty(){return new xh(0,0,0)}[f.inspect.custom](){return`PrivateToAvmAccumulatedDataArrayLengths {\n      noteHashes: ${this.noteHashes},\n      nullifiers: ${this.nullifiers},\n      l2ToL1Msgs: ${this.l2ToL1Msgs},\n    }`}}class vh{constructor(e,t,n,s,i){this.msgSender=e,this.contractAddress=t,this.functionSelector=n,this.isStaticCall=s,this.argsHash=i}getSize(){return this.isEmpty()?0:this.toBuffer().length}static from(e){return new vh(...vh.getFields(e))}static getFields(e){return[e.msgSender,e.contractAddress,e.functionSelector,e.isStaticCall,e.argsHash]}static fromFields(e){const t=vi.asReader(e);return new vh(t.readObject(Gc),t.readObject(Gc),t.readObject(ed),t.readBoolean(),t.readField())}toFields(){const e=gi(...vh.getFields(this));if(5!==e.length)throw new Error(`Invalid number of fields for PublicCallRequest. Expected 5, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new vh(t.readObject(Gc),t.readObject(Gc),t.readObject(ed),t.readBoolean(),t.readObject(si))}toBuffer(){return _i(...vh.getFields(this))}static empty(){return new vh(Gc.ZERO,Gc.ZERO,ed.empty(),!1,si.ZERO)}isEmpty(){return this.msgSender.isZero()&&this.contractAddress.isZero()&&this.functionSelector.isEmpty()&&!this.isStaticCall&&this.argsHash.isEmpty()}[f.inspect.custom](){return`PublicCallRequest {\n      msgSender: ${this.msgSender}\n      contractAddress: ${this.contractAddress}\n      functionSelector: ${this.functionSelector}\n      isStaticCall: ${this.isStaticCall}\n      argsHash: ${this.argsHash}\n    }`}}class Eh{constructor(e,t){this.inner=e,this.counter=t}getSize(){return this.isEmpty()?0:this.toBuffer().length}static getFields(e){return[e.inner,e.counter]}static fromFields(e){const t=vi.asReader(e);return new Eh(t.readObject(vh),t.readU32())}toFields(){const e=gi(...Eh.getFields(this));if(6!==e.length)throw new Error(`Invalid number of fields for CountedPublicCallRequest. Expected 6, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new Eh(t.readObject(vh),t.readNumber())}toBuffer(){return _i(...Eh.getFields(this))}static empty(){return new Eh(vh.empty(),0)}isEmpty(){return this.inner.isEmpty()&&0==this.counter}}class Mh{constructor(e,t){this.root=e,this.nextAvailableLeafIndex=t}static get schema(){return zs.object({root:id.Fr,nextAvailableLeafIndex:id.UInt32}).transform((({root:e,nextAvailableLeafIndex:t})=>new Mh(e,t)))}getSize(){return this.root.size+4}toBuffer(){return _i(this.root,this.nextAvailableLeafIndex)}toFields(){return[this.root,new si(this.nextAvailableLeafIndex)]}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new Mh(si.fromBuffer(t),t.readNumber())}static fromString(e){return Mh.fromBuffer(Os(e))}static fromFields(e){const t=vi.asReader(e);return new Mh(t.readField(),Number(t.readField().toBigInt()))}static zero(){return new Mh(si.ZERO,0)}isZero(){return this.root.isZero()&&0===this.nextAvailableLeafIndex}[f.inspect.custom](){return`AppendOnlyTreeSnapshot { root: ${this.root.toString()}, nextAvailableLeafIndex: ${this.nextAvailableLeafIndex} }`}equals(e){return this.root.equals(e.root)&&this.nextAvailableLeafIndex===e.nextAvailableLeafIndex}static random(){return new Mh(si.random(),Math.floor(1e3*Math.random()))}}class zh{constructor(e,t,n,s){this.l1ToL2MessageTree=e,this.noteHashTree=t,this.nullifierTree=n,this.publicDataTree=s}getSize(){return this.l1ToL2MessageTree.getSize()+this.noteHashTree.getSize()+this.nullifierTree.getSize()+this.publicDataTree.getSize()}static fromBuffer(e){const t=Js.asReader(e);return new zh(t.readObject(Mh),t.readObject(Mh),t.readObject(Mh),t.readObject(Mh))}toBuffer(){return _i(this.l1ToL2MessageTree,this.noteHashTree,this.nullifierTree,this.publicDataTree)}static fromFields(e){const t=vi.asReader(e),n=Mh.fromFields(t),s=Mh.fromFields(t),i=Mh.fromFields(t),r=Mh.fromFields(t);return new zh(n,s,i,r)}toFields(){const e=[...this.l1ToL2MessageTree.toFields(),...this.noteHashTree.toFields(),...this.nullifierTree.toFields(),...this.publicDataTree.toFields()];if(8!==e.length)throw new Error(`Invalid number of fields for TreeSnapshots. Expected 8, got ${e.length}`);return e}static empty(){return new zh(Mh.zero(),Mh.zero(),Mh.zero(),Mh.zero())}isEmpty(){return this.l1ToL2MessageTree.isZero()&&this.noteHashTree.isZero()&&this.nullifierTree.isZero()&&this.publicDataTree.isZero()}[f.inspect.custom](){return`TreeSnapshots {\n  l1ToL2MessageTree: ${(0,f.inspect)(this.l1ToL2MessageTree)},\n  noteHashTree: ${(0,f.inspect)(this.noteHashTree)},\n  nullifierTree: ${(0,f.inspect)(this.nullifierTree)},\n  publicDataTree: ${(0,f.inspect)(this.publicDataTree)},\n}`}}class Bh{constructor(e,t){this.leafSlot=e,this.value=t}static get schema(){return zs.object({leafSlot:id.Fr,value:id.Fr}).transform(Bh.from)}static from(e){return new Bh(...Bh.getFields(e))}static getFields(e){return[e.leafSlot,e.value]}static fromFields(e){const t=vi.asReader(e);return new Bh(t.readField(),t.readField())}static fromBuffer(e){const t=Js.asReader(e);return new Bh(si.fromBuffer(t),si.fromBuffer(t))}toBuffer(){return _i(...Bh.getFields(this))}static fromString(e){return Bh.fromBuffer(Os(e))}toString(){return Ds(this.toBuffer())}static empty(){return new Bh(si.ZERO,si.ZERO)}static isEmpty(e){return e.isEmpty()}isEmpty(){return this.leafSlot.isZero()&&this.value.isZero()}}Bh.SIZE_IN_BYTES=2*si.SIZE_IN_BYTES;class Fh{constructor(e,t){this.contractAddress=e,this.log=t}toFields(){return gi(...Fh.getFields(this))}static getFields(e){return[e.contractAddress,e.log]}static fromFields(e){const t=vi.asReader(e);return new Fh(t.readObject(Gc),t.readFieldArray(13))}isEmpty(){return this.contractAddress.isZero()&&this.log.every((e=>e.isZero()))}static empty(){return new Fh(Gc.ZERO,uh(13,si.zero))}toBuffer(){return _i(...Fh.getFields(this))}static fromBuffer(e){const t=Js.asReader(e);return new Fh(t.readObject(Gc),t.readArray(13,si))}static async random(){return new Fh(await Gc.random(),uh(13,si.random))}equals(e){return this.contractAddress.equals(e.contractAddress)&&this.log.reduce(((t,n,s)=>t&&n.equals(e.log[s])),!0)}toHumanReadable(){return`PublicLog: (contractAddress: ${this.contractAddress} log: ${this.log})`}static get schema(){return zs.object({contractAddress:Gc.schema,log:zs.array(id.Fr)}).transform((({contractAddress:e,log:t})=>Fh.fromFields([e.toField(),...t])))}[f.inspect.custom](){return`PublicLog {\n      contractAddress: ${(0,f.inspect)(this.contractAddress)},\n      log: [${this.log.map((e=>(0,f.inspect)(e))).join(", ")}],\n    }`}}Fh.SIZE_IN_BYTES=14*si.SIZE_IN_BYTES;class kh{constructor(e,t,n,s,i){this.noteHashes=e,this.nullifiers=t,this.l2ToL1Msgs=n,this.publicLogs=s,this.publicDataWrites=i}getSize(){return Me(this.noteHashes)+Me(this.nullifiers)+Me(this.l2ToL1Msgs)+Me(this.publicLogs)+Me(this.publicDataWrites)}static fromBuffer(e){const t=Js.asReader(e);return new this(t.readArray(Di,si),t.readArray(Li,si),t.readArray(8,Ah),t.readArray(8,Fh),t.readArray(Si,Bh))}toBuffer(){return _i(this.noteHashes,this.nullifiers,this.l2ToL1Msgs,this.publicLogs,this.publicDataWrites)}static fromFields(e){const t=vi.asReader(e);return new this(t.readFieldArray(Di),t.readFieldArray(Li),t.readArray(8,Ah),t.readArray(8,Fh),t.readArray(Si,Bh))}static fromString(e){return this.fromBuffer(Os(e))}toString(){return Ds(this.toBuffer())}static empty(){return new this(uh(Di,si.zero),uh(Li,si.zero),uh(8,Ah.empty),uh(8,Fh.empty),uh(Si,Bh.empty))}isEmpty(){return this.noteHashes.every((e=>e.isZero()))&&this.nullifiers.every((e=>e.isZero()))&&this.l2ToL1Msgs.every((e=>e.isEmpty()))&&this.publicLogs.every((e=>e.isEmpty()))&&this.publicDataWrites.every((e=>e.isEmpty()))}[f.inspect.custom](){return`AvmAccumulatedData {\n  noteHashes: [${this.noteHashes.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n  nullifiers: [${this.nullifiers.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n  l2ToL1Msgs: [${this.l2ToL1Msgs.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n  publicLogs: [${this.publicLogs.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n  publicDataWrites: [${this.publicDataWrites.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n}`}}class Ch{constructor(e,t,n,s,i,r,a,o,l,c,d,u,f,h,p,m,g){this.globalVariables=e,this.startTreeSnapshots=t,this.startGasUsed=n,this.gasSettings=s,this.feePayer=i,this.publicSetupCallRequests=r,this.publicAppLogicCallRequests=a,this.publicTeardownCallRequest=o,this.previousNonRevertibleAccumulatedDataArrayLengths=l,this.previousRevertibleAccumulatedDataArrayLengths=c,this.previousNonRevertibleAccumulatedData=d,this.previousRevertibleAccumulatedData=u,this.endTreeSnapshots=f,this.endGasUsed=h,this.accumulatedData=p,this.transactionFee=m,this.reverted=g}static fromBuffer(e){const t=Js.asReader(e);return new Ch(t.readObject(bh),t.readObject(zh),t.readObject(hh),t.readObject(mh),t.readObject(Gc),t.readArray(Ti,vh),t.readArray(Ti,vh),t.readObject(vh),t.readObject(xh),t.readObject(xh),t.readObject(wh),t.readObject(wh),t.readObject(zh),t.readObject(hh),t.readObject(kh),t.readObject(si),t.readBoolean())}toBuffer(){return _i(this.globalVariables,this.startTreeSnapshots,this.startGasUsed,this.gasSettings,this.feePayer,this.publicSetupCallRequests,this.publicAppLogicCallRequests,this.publicTeardownCallRequest,this.previousNonRevertibleAccumulatedDataArrayLengths,this.previousRevertibleAccumulatedDataArrayLengths,this.previousNonRevertibleAccumulatedData,this.previousRevertibleAccumulatedData,this.endTreeSnapshots,this.endGasUsed,this.accumulatedData,this.transactionFee,this.reverted)}static fromString(e){return Ch.fromBuffer(Os(e))}toString(){return Ds(this.toBuffer())}static fromFields(e){const t=vi.asReader(e);return new Ch(bh.fromFields(t),zh.fromFields(t),hh.fromFields(t),mh.fromFields(t),Gc.fromFields(t),t.readArray(Ti,vh),t.readArray(Ti,vh),vh.fromFields(t),xh.fromFields(t),xh.fromFields(t),wh.fromFields(t),wh.fromFields(t),zh.fromFields(t),hh.fromFields(t),kh.fromFields(t),t.readField(),t.readBoolean())}static empty(){return new Ch(bh.empty(),zh.empty(),hh.empty(),mh.empty(),Gc.zero(),uh(Ti,vh.empty),uh(Ti,vh.empty),vh.empty(),xh.empty(),xh.empty(),wh.empty(),wh.empty(),zh.empty(),hh.empty(),kh.empty(),si.zero(),!1)}[f.inspect.custom](){return`AvmCircuitPublicInputs {\n      globalVariables: ${(0,f.inspect)(this.globalVariables)},\n      startTreeSnapshots: ${(0,f.inspect)(this.startTreeSnapshots)},\n      startGasUsed: ${(0,f.inspect)(this.startGasUsed)},\n      gasSettings: ${(0,f.inspect)(this.gasSettings)},\n      feePayer: ${(0,f.inspect)(this.feePayer)},\n      publicSetupCallRequests: [${this.publicSetupCallRequests.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}]},\n      publicAppLogicCallRequests: [${this.publicAppLogicCallRequests.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}]},\n      publicTeardownCallRequest: ${(0,f.inspect)(this.publicTeardownCallRequest)},\n      previousNonRevertibleAccumulatedDataArrayLengths: ${(0,f.inspect)(this.previousNonRevertibleAccumulatedDataArrayLengths)},\n      previousRevertibleAccumulatedDataArrayLengths: ${(0,f.inspect)(this.previousRevertibleAccumulatedDataArrayLengths)},\n      previousNonRevertibleAccumulatedData: ${(0,f.inspect)(this.previousNonRevertibleAccumulatedData)},\n      previousRevertibleAccumulatedData: ${(0,f.inspect)(this.previousRevertibleAccumulatedData)},\n      endTreeSnapshots: ${(0,f.inspect)(this.endTreeSnapshots)},\n      endGasUsed: ${(0,f.inspect)(this.endGasUsed)},\n      accumulatedData: ${(0,f.inspect)(this.accumulatedData)},\n      transactionFee: ${(0,f.inspect)(this.transactionFee)},\n      reverted: ${this.reverted},\n      }`}}var Oh=i(8891).Buffer;class Dh{constructor(e,t){this.contractAddress=e,this.calldata=new ih(t)}toBuffer(){return _i(...Dh.getFields(this))}toString(){return Ds(this.toBuffer())}isEmpty(){return this.contractAddress.isZero()&&0==this.calldata.items.length}static from(e){return new Dh(e.contractAddress,e.calldata.items)}static getFields(e){return[e.contractAddress,e.calldata]}static fromBuffer(e){const t=Js.asReader(e);return new Dh(Gc.fromBuffer(t),t.readVector(si))}static fromString(e){return Dh.fromBuffer(Os(e))}}class Lh{constructor(e,t,n,s,i,r,a,o=Ph.empty()){this.address=e,this.exists=t,this.salt=n,this.deployer=s,this.contractClassId=i,this.initializationHash=r,this.publicKeys=a,this.membershipHint=o}toBuffer(){return _i(...Lh.getFields(this))}toString(){return Ds(this.toBuffer())}isEmpty(){return this.address.isZero()&&!this.exists&&this.salt.isZero()&&this.deployer.isZero()&&this.contractClassId.isZero()&&this.initializationHash.isZero()&&this.publicKeys.isEmpty()&&this.membershipHint.isEmpty()}static from(e){return new Lh(...Lh.getFields(e))}static getFields(e){return[e.address,e.exists,e.salt,e.deployer,e.contractClassId,e.initializationHash,e.publicKeys,e.membershipHint]}static fromBuffer(e){const t=Js.asReader(e);return new Lh(Gc.fromBuffer(t),t.readBoolean(),si.fromBuffer(t),Gc.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),Rd.fromBuffer(t),Ph.fromBuffer(t))}static fromString(e){return Lh.fromBuffer(Os(e))}}class Th{constructor(e,t,n){this.bytecode=e,this.contractInstanceHint=t,this.contractClassHint=n}toBuffer(){return _i(...Th.getFields(this))}toString(){return Ds(this.toBuffer())}isEmpty(){return 0==this.bytecode.length}static from(e){return new Th(e.bytecode,e.contractInstanceHint,e.contractClassHint)}static getFields(e){const t=Oh.alloc(e.bytecode.length+4);return t.writeUInt32BE(e.bytecode.length),e.bytecode.copy(t,4),[t,e.contractInstanceHint,e.contractClassHint.artifactHash,e.contractClassHint.privateFunctionsRoot,e.contractClassHint.publicBytecodeCommitment]}static fromBuffer(e){const t=Js.asReader(e),n=t.readBuffer(),s=Lh.fromBuffer(t),i={artifactHash:si.fromBuffer(t),privateFunctionsRoot:si.fromBuffer(t),publicBytecodeCommitment:si.fromBuffer(t)};return new Th(n,s,i)}static fromString(e){return Th.fromBuffer(Os(e))}}class Sh{constructor(e,t,n){this.leafIndex=e,this.value=t,this._siblingPath=n,this.siblingPath=new ih(n)}toBuffer(){return _i(...Sh.getFields(this))}toString(){return this.toBuffer().toString("hex")}isEmpty(){return this.value.isZero()&&0==this.siblingPath.items.length}static from(e){return new Sh(e.leafIndex,e.value,e.siblingPath.items)}static getFields(e){return[e.leafIndex,e.value,e.siblingPath]}static fromBuffer(e){return new Sh(si.fromBuffer(e),si.fromBuffer(e),Js.asReader(e).readVector(si))}static fromString(e){return Sh.fromBuffer(Oh.from(e,"hex"))}}class Nh{constructor(e,t){this.lowLeafRead=e,this._insertionPath=t,this.insertionPath=new ih(t)}toBuffer(){return _i(...Nh.getFields(this))}toString(){return this.toBuffer().toString("hex")}isEmpty(){return 0==this.insertionPath.items.length}static from(e){return new Nh(e.lowLeafRead,e.insertionPath.items)}static getFields(e){return[...Ph.getFields(e.lowLeafRead),e.insertionPath]}static fromBuffer(e){const t=Js.asReader(e),n=Ph.fromBuffer(t),s=t.readVector(si);return new Nh(n,s)}static fromString(e){return Nh.fromBuffer(Oh.from(e,"hex"))}}class Ph{constructor(e,t,n){this.lowLeafPreimage=e,this.lowLeafIndex=t,this._lowLeafSiblingPath=n,this.lowLeafSiblingPath=new ih(n)}toBuffer(){return _i(...Ph.getFields(this))}toString(){return this.toBuffer().toString("hex")}isEmpty(){return 0==this.lowLeafSiblingPath.items.length}static from(e){return new Ph(e.lowLeafPreimage,e.lowLeafIndex,e.lowLeafSiblingPath.items)}static empty(){return new Ph(ch.empty(),si.ZERO,[])}static getFields(e){return[e.lowLeafPreimage.nullifier,e.lowLeafPreimage.nextNullifier,new si(e.lowLeafPreimage.nextIndex),e.lowLeafIndex,e.lowLeafSiblingPath]}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(ch),s=si.fromBuffer(t),i=t.readVector(si);return new Ph(n,s,i)}static fromString(e){return Ph.fromBuffer(Oh.from(e,"hex"))}}class Ih{constructor(e,t,n){this.leafPreimage=e,this.leafIndex=t,this._siblingPath=n,this.siblingPath=new ih(n)}toBuffer(){return _i(...Ih.getFields(this))}toString(){return this.toBuffer().toString("hex")}isEmpty(){return 0==this.siblingPath.items.length}static from(e){return new Ih(e.leafPreimage,e.leafIndex,e.siblingPath.items)}static getFields(e){return[e.leafPreimage.slot,e.leafPreimage.value,new si(e.leafPreimage.nextIndex),e.leafPreimage.nextSlot,e.leafIndex,e.siblingPath]}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(Ip),s=si.fromBuffer(t),i=t.readVector(si);return new Ih(n,s,i)}static fromString(e){return Ih.fromBuffer(Oh.from(e,"hex"))}}class Yh{constructor(e,t,n){this.lowLeafRead=e,this.newLeafPreimage=t,this._insertionPath=n,this.insertionPath=new ih(n)}toBuffer(){return _i(...Yh.getFields(this))}toString(){return this.toBuffer().toString("hex")}isEmpty(){return 0==this.insertionPath.items.length}static from(e){return new Yh(e.lowLeafRead,e.newLeafPreimage,e.insertionPath.items)}static getFields(e){return[...Ih.getFields(e.lowLeafRead),e.newLeafPreimage.slot,e.newLeafPreimage.value,new si(e.newLeafPreimage.nextIndex),e.newLeafPreimage.nextSlot,e.insertionPath]}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(Ih),s=t.readObject(Ip),i=t.readVector(si);return new Yh(n,s,i)}static fromString(e){return Yh.fromBuffer(Oh.from(e,"hex"))}}class Qh{constructor(e,t,n,s,i,r,a,o,l,c){this.contractBytecodeHints=n,this.enqueuedCalls=new ih(e),this.contractInstances=new ih(t),this.publicDataReads=new ih(s),this.publicDataWrites=new ih(i),this.nullifierReads=new ih(r),this.nullifierWrites=new ih(a),this.noteHashReads=new ih(o),this.noteHashWrites=new ih(l),this.l1ToL2MessageReads=new ih(c)}static empty(){return new Qh([],[],new Map,[],[],[],[],[],[],[])}toBuffer(){return _i(...Qh.getFields(this))}toString(){return Ds(this.toBuffer())}isEmpty(){return 0==this.enqueuedCalls.items.length&&0==this.contractInstances.items.length&&0==this.contractBytecodeHints.size&&0==this.publicDataReads.items.length&&0==this.publicDataWrites.items.length&&0==this.nullifierReads.items.length&&0==this.nullifierWrites.items.length&&0==this.noteHashReads.items.length&&0==this.noteHashWrites.items.length&&0==this.l1ToL2MessageReads.items.length}static from(e){return new Qh(e.enqueuedCalls.items,e.contractInstances.items,e.contractBytecodeHints,e.publicDataReads.items,e.publicDataWrites.items,e.nullifierReads.items,e.nullifierWrites.items,e.noteHashReads.items,e.noteHashWrites.items,e.l1ToL2MessageReads.items)}static getFields(e){return[e.enqueuedCalls,e.contractInstances,new ih(Array.from(e.contractBytecodeHints.values())),e.publicDataReads,e.publicDataWrites,e.nullifierReads,e.nullifierWrites,e.noteHashReads,e.noteHashWrites,e.l1ToL2MessageReads]}static fromBuffer(e){const t=Js.asReader(e);return new Qh(t.readVector(Dh),t.readVector(Lh),(e=>{const t=new Map,n=e.readVector(Th);for(const e of n)t.set(e.contractInstanceHint.address.toString(),e);return t})(t),t.readVector(Ih),t.readVector(Yh),t.readVector(Ph),t.readVector(Nh),t.readVector(Sh),t.readVector(Sh),t.readVector(Sh))}static fromString(e){return jh.fromBuffer(Os(e))}}class jh{constructor(e,t,n,s){this.functionName=e,this.calldata=t,this.avmHints=n,this.publicInputs=s}toBuffer(){const e=Oh.from(this.functionName);return _i(e.length,e,this.calldata.length,this.calldata,this.avmHints.toBuffer(),this.publicInputs)}toString(){return Ds(this.toBuffer())}static empty(){return new jh("",[],Qh.empty(),Ch.empty())}static from(e){return new jh(...jh.getFields(e))}static getFields(e){return[e.functionName,e.calldata,e.avmHints,e.publicInputs]}static fromBuffer(e){const t=Js.asReader(e);return new jh(t.readBuffer().toString(),t.readVector(si),Qh.fromBuffer(t),Ch.fromBuffer(t))}static fromString(e){return jh.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(jh)}serializeForAvm2(){const e={contractInstances:[],contractClasses:[],initialTreeRoots:{publicDataTree:this.publicInputs.startTreeSnapshots.publicDataTree.root,nullifierTree:this.publicInputs.startTreeSnapshots.nullifierTree.root,noteHashTree:this.publicInputs.startTreeSnapshots.noteHashTree.root,l1ToL2MessageTree:this.publicInputs.startTreeSnapshots.l1ToL2MessageTree.root}},t={hints:e,enqueuedCalls:[],publicInputs:{dummy:[]}};for(const t of this.avmHints.contractBytecodeHints.values())e.contractInstances.push(t.contractInstanceHint),e.contractClasses.push({artifactHash:t.contractClassHint.artifactHash,privateFunctionsRoot:t.contractClassHint.privateFunctionsRoot,publicBytecodeCommitment:t.contractClassHint.publicBytecodeCommitment,packedBytecode:t.bytecode});for(const e of this.avmHints.enqueuedCalls.items)t.enqueuedCalls.push({contractAddress:e.contractAddress,sender:new si(0),args:e.calldata.items,isStatic:!1});const n=(s=t,Xf({Class:si,write:e=>e.toBuffer()}),Xf({Class:ii,write:e=>e.toBuffer()}),Xf({Class:Gc,write:e=>e.toField()}),Xf({Class:ih,write:e=>e.items}),Xf({Class:Ei,write:e=>((0,$d.strict)(!e.inf,"Cannot serialize infinity"),{x:new ii(e.x.toBigInt()),y:new ii(e.y.toBigInt())})}),new Vf({useRecords:!1,int64AsType:"bigint"}).encode(s));var s;return n}}class Hh{constructor(e,t,n,s){this.msgSender=e,this.contractAddress=t,this.functionSelector=n,this.isStaticCall=s}static empty(){return new Hh(Gc.ZERO,Gc.ZERO,ed.empty(),!1)}static async random(){return new Hh(await Gc.random(),await Gc.random(),ed.random(),Math.random()>.5)}static get schema(){return zs.object({msgSender:id.AztecAddress,contractAddress:id.AztecAddress,functionSelector:id.FunctionSelector,isStaticCall:zs.boolean()}).transform(Hh.from)}isEmpty(){return this.msgSender.isZero()&&this.contractAddress.isZero()&&this.functionSelector.isEmpty()&&!this.isStaticCall}static from(e){return new Hh(...Hh.getFields(e))}static getFields(e){return[e.msgSender,e.contractAddress,e.functionSelector,e.isStaticCall]}toBuffer(){return _i(...Hh.getFields(this))}toFields(){const e=gi(...Hh.getFields(this));if(4!==e.length)throw new Error(`Invalid number of fields for CallContext. Expected 4, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new Hh(t.readObject(Gc),t.readObject(Gc),t.readObject(ed),t.readBoolean())}static fromFields(e){const t=vi.asReader(e);return new Hh(t.readObject(Gc),t.readObject(Gc),t.readObject(ed),t.readBoolean())}equals(e){return e.msgSender.equals(this.msgSender)&&e.contractAddress.equals(this.contractAddress)&&e.functionSelector.equals(this.functionSelector)&&e.isStaticCall===this.isStaticCall}[f.inspect.custom](){return`CallContext {\n      msgSender: ${this.msgSender}\n      contractAddress: ${this.contractAddress}\n      functionSelector: ${this.functionSelector}\n      isStaticCall: ${this.isStaticCall}\n    }`}}var Uh=i(8891).Buffer;class Rh{constructor(e,t){this.clientIvcProofBuffer=e,this.clientIvcVkBuffer=t}isEmpty(){return 0===this.clientIvcProofBuffer.length}static empty(){return new Rh(Uh.from(""),Uh.from(""))}static fake(e=Math.floor(255*Math.random())){return new Rh(Uh.alloc(1,e),Uh.alloc(1,e))}static get schema(){return Qs(Rh)}toJSON(){return this.toBuffer()}static fromBuffer(e){const t=Js.asReader(e);return new Rh(t.readBuffer(),t.readBuffer())}toBuffer(){return _i(this.clientIvcProofBuffer.length,this.clientIvcProofBuffer,this.clientIvcVkBuffer.length,this.clientIvcVkBuffer)}}var Gh=i(8891).Buffer;class Zh{constructor(e,t,n){this.address=e,this.publicKeys=t,this.partialAddress=n}static async create(e,t,n){const s=new Zh(e,t,n);return await s.validate(),s}static get schema(){return Ys(Zh)}toJSON(){return this.toString()}static async random(){return await this.fromSecretKeyAndPartialAddress(si.random(),si.random())}static async fromSecretKeyAndPartialAddress(e,t){const{publicKeys:n}=await Wd(e),s=await Jd(n,t);return new Zh(s,n,t)}async getPreaddress(){return Zd(await this.publicKeys.hash(),this.partialAddress)}static async fromSecretKeyAndInstance(e,t){const n=await qd(t);return Zh.fromSecretKeyAndPartialAddress(e,n)}async validate(){const e=await Jd(this.publicKeys,this.partialAddress);if(!e.equals(this.address))throw new Error(`Address cannot be derived from public keys and partial address (received ${this.address.toString()}, derived ${e.toString()})`)}toReadableString(){return`Address: ${this.address.toString()}\nMaster Nullifier Public Key: ${this.publicKeys.masterNullifierPublicKey.toString()}\nMaster Incoming Viewing Public Key: ${this.publicKeys.masterIncomingViewingPublicKey.toString()}\nMaster Outgoing Viewing Public Key: ${this.publicKeys.masterOutgoingViewingPublicKey.toString()}\nMaster Tagging Public Key: ${this.publicKeys.masterTaggingPublicKey.toString()}\nPartial Address: ${this.partialAddress.toString()}\n`}equals(e){return this.address.equals(e.address)&&this.publicKeys.equals(e.publicKeys)&&this.partialAddress.equals(e.partialAddress)}toBuffer(){return _i([this.address,this.publicKeys,this.partialAddress])}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(Gc),s=t.readObject(Rd),i=t.readObject(si);return Zh.create(n,s,i)}static fromString(e){return Zh.fromBuffer(Gh.from(e.replace(/^0x/i,""),"hex"))}toString(){return Ds(this.toBuffer())}}Zh.SIZE_IN_BYTES=320;var Jh=i(8891).Buffer;const Xh=32;class Wh{constructor(e,t,n,s){if(this.numTxs=e,this.blobsHash=t,this.inHash=n,this.outHash=s,t.length!==Xh)throw new Error("blobsHash buffer must be 32 bytes");if(0!==t[0])throw new Error("blobsHash buffer should be truncated and left padded");if(n.length!==Xh)throw new Error("inHash buffer must be 32 bytes");if(0!==n[0])throw new Error("inHash buffer should be truncated and left padded");if(s.length!==Xh)throw new Error("outHash buffer must be 32 bytes");if(0!==s[0])throw new Error("outHash buffer should be truncated and left padded")}static get schema(){return zs.object({numTxs:id.Fr,blobsHash:id.Buffer,inHash:id.Buffer,outHash:id.Buffer}).transform((({numTxs:e,blobsHash:t,inHash:n,outHash:s})=>new Wh(e,t,n,s)))}getSize(){return this.toBuffer().length}toBuffer(){return _i(this.numTxs,this.blobsHash,this.inHash,this.outHash)}toInspect(){return{numTxs:this.numTxs.toNumber(),blobsHash:Ds(this.blobsHash),inHash:Ds(this.inHash),outHash:Ds(this.outHash)}}toFields(){const e=[this.numTxs,si.fromBuffer(this.blobsHash),si.fromBuffer(this.inHash),si.fromBuffer(this.outHash)];if(4!==e.length)throw new Error(`Expected content commitment to have 4 fields, but it has ${e.length} fields`);return e}static fromBuffer(e){const t=Js.asReader(e);return new Wh(t.readObject(si),t.readBytes(Xh),t.readBytes(Xh),t.readBytes(Xh))}static fromFields(e){const t=vi.asReader(e);return new Wh(t.readField(),t.readField().toBuffer(),t.readField().toBuffer(),t.readField().toBuffer())}static empty(){return new Wh(si.zero(),Jh.alloc(Xh),Jh.alloc(Xh),Jh.alloc(Xh))}isEmpty(){return this.numTxs.isZero()&&this.blobsHash.equals(Jh.alloc(Xh))&&this.inHash.equals(Jh.alloc(Xh))&&this.outHash.equals(Jh.alloc(Xh))}toString(){return Ds(this.toBuffer())}static fromString(e){const t=Jh.from(e.replace(/^0x/i,""),"hex");return Wh.fromBuffer(t)}equals(e){return this.inHash.equals(e.inHash)&&this.outHash.equals(e.outHash)&&this.numTxs.equals(e.numTxs)&&this.blobsHash.equals(e.blobsHash)}}class Vh{constructor(e,t,n){this.noteHashTree=e,this.nullifierTree=t,this.publicDataTree=n}static get schema(){return zs.object({noteHashTree:Mh.schema,nullifierTree:Mh.schema,publicDataTree:Mh.schema}).transform((({noteHashTree:e,nullifierTree:t,publicDataTree:n})=>new Vh(e,t,n)))}getSize(){return this.noteHashTree.getSize()+this.nullifierTree.getSize()+this.publicDataTree.getSize()}static fromBuffer(e){const t=Js.asReader(e);return new Vh(t.readObject(Mh),t.readObject(Mh),t.readObject(Mh))}static fromFields(e){const t=vi.asReader(e),n=Mh.fromFields(t),s=Mh.fromFields(t),i=Mh.fromFields(t);return new Vh(n,s,i)}static empty(){return new Vh(Mh.zero(),Mh.zero(),Mh.zero())}toBuffer(){return _i(this.noteHashTree,this.nullifierTree,this.publicDataTree)}toFields(){const e=[...this.noteHashTree.toFields(),...this.nullifierTree.toFields(),...this.publicDataTree.toFields()];if(6!==e.length)throw new Error(`Invalid number of fields for PartialStateReference. Expected 6, got ${e.length}`);return e}isEmpty(){return this.noteHashTree.isZero()&&this.nullifierTree.isZero()&&this.publicDataTree.isZero()}equals(e){return this.noteHashTree.equals(e.noteHashTree)&&this.nullifierTree.equals(e.nullifierTree)&&this.publicDataTree.equals(e.publicDataTree)}}class qh{constructor(e,t){this.l1ToL2MessageTree=e,this.partial=t}static get schema(){return zs.object({l1ToL2MessageTree:Mh.schema,partial:Vh.schema}).transform((({l1ToL2MessageTree:e,partial:t})=>new qh(e,t)))}getSize(){return this.l1ToL2MessageTree.getSize()+this.partial.getSize()}toBuffer(){return _i(this.l1ToL2MessageTree,this.partial)}toFields(){const e=[...this.l1ToL2MessageTree.toFields(),...this.partial.toFields()];if(8!==e.length)throw new Error(`Invalid number of fields for StateReference. Expected 8, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new qh(t.readObject(Mh),t.readObject(Vh))}static fromFields(e){const t=vi.asReader(e),n=Mh.fromFields(t),s=Vh.fromFields(t);return new qh(n,s)}static empty(){return new qh(Mh.zero(),Vh.empty())}isEmpty(){return this.l1ToL2MessageTree.isZero()&&this.partial.isEmpty()}toInspect(){return{l1ToL2MessageTree:this.l1ToL2MessageTree.root.toString(),noteHashTree:this.partial.noteHashTree.root.toString(),nullifierTree:this.partial.nullifierTree.root.toString(),publicDataTree:this.partial.publicDataTree.root.toString()}}[f.inspect.custom](){return`StateReference {\n  l1ToL2MessageTree: ${(0,f.inspect)(this.l1ToL2MessageTree)},\n  noteHashTree: ${(0,f.inspect)(this.partial.noteHashTree)},\n  nullifierTree: ${(0,f.inspect)(this.partial.nullifierTree)},\n  publicDataTree: ${(0,f.inspect)(this.partial.publicDataTree)},\n}`}equals(e){return this.l1ToL2MessageTree.root.equals(e.l1ToL2MessageTree.root)&&this.partial.equals(e.partial)}}class Kh{constructor(e,t,n,s,i,r){this.lastArchive=e,this.contentCommitment=t,this.state=n,this.globalVariables=s,this.totalFees=i,this.totalManaUsed=r}static get schema(){return zs.object({lastArchive:Mh.schema,contentCommitment:Wh.schema,state:qh.schema,globalVariables:bh.schema,totalFees:id.Fr,totalManaUsed:id.Fr}).transform(Kh.from)}static getFields(e){return[e.lastArchive,e.contentCommitment,e.state,e.globalVariables,e.totalFees,e.totalManaUsed]}static from(e){return new Kh(...Kh.getFields(e))}getSize(){return this.lastArchive.getSize()+this.contentCommitment.getSize()+this.state.getSize()+this.globalVariables.getSize()+this.totalFees.size+this.totalManaUsed.size}toBuffer(){return _i(...Kh.getFields(this))}toFields(){const e=gi(...Kh.getFields(this));if(25!==e.length)throw new Error(`Invalid number of fields for Header. Expected 25, got ${e.length}`);return e}clone(){return Kh.fromBuffer(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new Kh(t.readObject(Mh),t.readObject(Wh),t.readObject(qh),t.readObject(bh),t.readObject(si),t.readObject(si))}static fromFields(e){const t=vi.asReader(e);return new Kh(Mh.fromFields(t),Wh.fromFields(t),qh.fromFields(t),bh.fromFields(t),t.readField(),t.readField())}static empty(e={}){return Kh.from({lastArchive:Mh.zero(),contentCommitment:Wh.empty(),state:qh.empty(),globalVariables:bh.empty(),totalFees:si.ZERO,totalManaUsed:si.ZERO,...e})}isEmpty(){return this.lastArchive.isZero()&&this.contentCommitment.isEmpty()&&this.state.isEmpty()&&this.globalVariables.isEmpty()&&this.totalFees.isZero()&&this.totalManaUsed.isZero()}toString(){return Ds(this.toBuffer())}static fromString(e){return Kh.fromBuffer(Os(e))}hash(){return wi(this.toFields(),Ri.BLOCK_HASH)}toInspect(){return{lastArchive:this.lastArchive.root.toString(),contentCommitment:this.contentCommitment.toInspect(),state:this.state.toInspect(),globalVariables:this.globalVariables.toInspect(),totalFees:this.totalFees.toBigInt(),totalManaUsed:this.totalManaUsed.toBigInt()}}[f.inspect.custom](){return`Header {\n  lastArchive: ${(0,f.inspect)(this.lastArchive)},\n  contentCommitment.numTxs: ${this.contentCommitment.numTxs.toNumber()},\n  contentCommitment.blobsHash: ${this.contentCommitment.blobsHash.toString("hex")},\n  contentCommitment.inHash: ${this.contentCommitment.inHash.toString("hex")},\n  contentCommitment.outHash: ${this.contentCommitment.outHash.toString("hex")},\n  state.l1ToL2MessageTree: ${(0,f.inspect)(this.state.l1ToL2MessageTree)},\n  state.noteHashTree: ${(0,f.inspect)(this.state.partial.noteHashTree)},\n  state.nullifierTree: ${(0,f.inspect)(this.state.partial.nullifierTree)},\n  state.publicDataTree: ${(0,f.inspect)(this.state.partial.publicDataTree)},\n  globalVariables: ${(0,f.inspect)(this.globalVariables)},\n  totalFees: ${this.totalFees},\n  totalManaUsed: ${this.totalManaUsed},\n}`}equals(e){return this.contentCommitment.equals(e.contentCommitment)&&this.state.equals(e.state)&&this.globalVariables.equals(e.globalVariables)&&this.totalFees.equals(e.totalFees)&&this.totalManaUsed.equals(e.totalManaUsed)&&this.lastArchive.equals(e.lastArchive)}}class $h{constructor(e,t,n){this.gasSettings=n,this.chainId=new si(e),this.version=new si(t)}static get schema(){return zs.object({chainId:id.Fr,version:id.Fr,gasSettings:mh.schema}).transform($h.from)}getSize(){return this.chainId.size+this.version.size+this.gasSettings.getSize()}clone(){return new $h(this.chainId,this.version,this.gasSettings.clone())}toBuffer(){return _i(...$h.getFields(this))}static fromFields(e){const t=vi.asReader(e);return new $h(t.readField(),t.readField(),t.readObject(mh))}toFields(){const e=gi(...$h.getFields(this));if(10!==e.length)throw new Error(`Invalid number of fields for TxContext. Expected 10, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new $h(si.fromBuffer(t),si.fromBuffer(t),t.readObject(mh))}static empty(e=0,t=0){return new $h(new si(e),new si(t),mh.empty())}isEmpty(){return this.chainId.isZero()&&this.version.isZero()&&this.gasSettings.isEmpty()}static from(e){return new $h(...$h.getFields(e))}static getFields(e){return[e.chainId,e.version,e.gasSettings]}}class ep{constructor(e,t){this.selector=e,this.isPrivate=t}static async fromAbi(e){return new ep(await ed.fromNameAndParameters(e.name,e.parameters),e.functionType===hd.PRIVATE)}static get schema(){return zs.object({selector:id.FunctionSelector,isPrivate:zs.boolean()}).transform((({selector:e,isPrivate:t})=>new ep(e,t)))}toBuffer(){return _i(this.selector,this.isPrivate)}toFields(){const e=[this.selector.toField(),new si(this.isPrivate)];if(2!==e.length)throw new Error(`Invalid number of fields for FunctionData. Expected 2, got ${e.length}`);return e}isEmpty(){return this.selector.isEmpty()}equals(e){return this.selector.equals(e.selector)&&this.isPrivate===e.isPrivate}static empty(e){return new ep(ed.empty(),e?.isPrivate??!1)}static fromBuffer(e){const t=Js.asReader(e);return new ep(t.readObject(ed),t.readBoolean())}static fromFields(e){const t=vi.asReader(e),n=ed.fromFields(t),s=t.readBoolean();return new ep(n,s)}}var tp=i(8891).Buffer;class np{constructor(e,t,n){this.value=e,this.counter=t,this.length=n}toFields(){return[this.value,new si(this.counter),this.length]}static fromFields(e){const t=vi.asReader(e);return new np(t.readField(),t.readU32(),t.readField())}isEmpty(){return this.value.isZero()&&this.length.isZero()&&!this.counter}static empty(){return new np(si.zero(),0,si.zero())}toBuffer(){return _i(this.value,this.counter,this.length)}static fromBuffer(e){const t=Js.asReader(e);return new np(si.fromBuffer(t),t.readNumber(),si.fromBuffer(t))}toString(){return`value=${this.value} counter=${this.counter} length=${this.length}`}scope(e){return new sp(this,e)}[f.inspect.custom](){return`LogHash { ${this.toString()} }`}}class sp{constructor(e,t){this.logHash=e,this.contractAddress=t}get counter(){return this.logHash.counter}get value(){return this.logHash.value}toFields(){return[...this.logHash.toFields(),this.contractAddress.toField()]}static fromFields(e){const t=vi.asReader(e);return new sp(t.readObject(np),Gc.fromField(t.readField()))}isEmpty(){return this.logHash.isEmpty()&&this.contractAddress.isZero()}static empty(){return new sp(np.empty(),Gc.ZERO)}toBuffer(){return _i(this.logHash,this.contractAddress)}static fromBuffer(e){const t=Js.asReader(e);return new sp(np.fromBuffer(t),Gc.fromBuffer(t))}toString(){return`logHash=${this.logHash} contractAddress=${this.contractAddress}`}getSiloedHash(){return dl(tp.concat([this.contractAddress.toBuffer(),this.value.toBuffer()]))}}class ip{constructor(e){this.fields=e}toFields(){return this.fields}static fromFields(e){const t=vi.asReader(e);return new ip(t.readFieldArray(Pi))}isEmpty(){return this.fields.every((e=>e.isZero()))}static empty(){return new ip(uh(Pi,si.zero))}toBuffer(){return _i(this.fields)}static fromBuffer(e){const t=Js.asReader(e);return new ip(t.readArray(Pi,si))}static random(){return new ip(uh(Pi,si.random))}static get schema(){return zs.object({fields:zs.array(id.Fr)}).transform((({fields:e})=>ip.fromFields(e)))}[f.inspect.custom](){return`PrivateLog {\n      fields: [${this.fields.map((e=>(0,f.inspect)(e))).join(", ")}],\n    }`}}ip.SIZE_IN_BYTES=si.SIZE_IN_BYTES*Pi;class rp{constructor(e,t,n,s,i,r){this.noteHashes=e,this.nullifiers=t,this.l2ToL1Msgs=n,this.privateLogs=s,this.contractClassLogsHashes=i,this.contractClassLogPreimagesLength=r}getSize(){return Me(this.noteHashes)+Me(this.nullifiers)+Me(this.l2ToL1Msgs)+Me(this.privateLogs)+Me(this.contractClassLogsHashes)+this.contractClassLogPreimagesLength.size}static getFields(e){return[e.noteHashes,e.nullifiers,e.l2ToL1Msgs,e.privateLogs,e.contractClassLogsHashes,e.contractClassLogPreimagesLength]}static from(e){return new rp(...rp.getFields(e))}static get schema(){return Qs(rp)}toJSON(){return this.toBuffer()}toBuffer(){return _i(...rp.getFields(this))}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new rp(t.readArray(Di,si),t.readArray(Li,si),t.readArray(8,Ah),t.readArray(Ni,ip),t.readArray(1,sp),si.fromBuffer(t))}static fromString(e){return rp.fromBuffer(Os(e))}static empty(){return new rp(uh(Di,si.zero),uh(Li,si.zero),uh(8,Ah.empty),uh(Ni,ip.empty),uh(1,sp.empty),si.zero())}toFields(){const e=gi(...rp.getFields(this));if(741!==e.length)throw new Error(`Invalid number of fields for PrivateToRollupAccumulatedData. Expected 741, got ${e.length}`);return e}[f.inspect.custom](){return`PrivateToRollupAccumulatedData {\n      noteHashes: [${this.noteHashes.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      nullifiers: [${this.nullifiers.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      l2ToL1Msgs: [${this.l2ToL1Msgs.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      privateLogs:  [${this.privateLogs.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}]\n      contractClassLogsHashes: : [${this.contractClassLogsHashes.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      contractClassLogPreimagesLength: ${this.contractClassLogPreimagesLength.toString()},\n    }`}}class ap{constructor(e,t,n,s,i){this.historicalHeader=e,this.txContext=t,this.vkTreeRoot=n,this.protocolContractTreeRoot=s,this.globalVariables=i}static combine(e,t){return new ap(e.historicalHeader,e.txContext,e.vkTreeRoot,e.protocolContractTreeRoot,t)}static get schema(){return zs.object({historicalHeader:Kh.schema,txContext:$h.schema,vkTreeRoot:id.Fr,protocolContractTreeRoot:id.Fr,globalVariables:bh.schema}).transform(ap.from).or(Ys(ap))}toBuffer(){return _i(this.historicalHeader,this.txContext,this.vkTreeRoot,this.protocolContractTreeRoot,this.globalVariables)}clone(){return ap.fromBuffer(this.toBuffer())}getSize(){return this.historicalHeader.getSize()+this.txContext.getSize()+this.vkTreeRoot.size+this.protocolContractTreeRoot.size+this.globalVariables.getSize()}static from({historicalHeader:e,txContext:t,vkTreeRoot:n,protocolContractTreeRoot:s,globalVariables:i}){return new ap(e,t,n,s,i)}static fromBuffer(e){const t=Js.asReader(e);return new ap(t.readObject(Kh),t.readObject($h),si.fromBuffer(t),si.fromBuffer(t),t.readObject(bh))}static fromFields(e){const t=vi.asReader(e);return new ap(t.readObject(Kh),t.readObject($h),t.readField(),t.readField(),t.readObject(bh))}static empty(){return new ap(Kh.empty(),$h.empty(),si.ZERO,si.ZERO,bh.empty())}}class op{constructor(e,t){this.isSome=e,this.value=t}toBuffer(){return _i(...op.getFields(this))}toFields(){const e=gi(...op.getFields(this));if(2!==e.length)throw new Error(`Invalid number of fields for MaxBlockNumber. Expected 2, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new op(t.readBoolean(),si.fromBuffer(t))}static fromFields(e){const t=vi.asReader(e);return new op(t.readBoolean(),t.readField())}static empty(){return new op(!1,si.ZERO)}isEmpty(){return!this.isSome&&this.value.isZero()}static from(e){return new op(...op.getFields(e))}static getFields(e){return[e.isSome,e.value]}}class lp{constructor(e){this.maxBlockNumber=e}getSize(){return this.toBuffer().length}toBuffer(){return _i(this.maxBlockNumber)}toString(){return Ds(this.toBuffer())}static getFields(e){return[e.maxBlockNumber]}static fromFields(e){const t=vi.asReader(e);return new lp(op.fromFields(t))}toFields(){const e=gi(...lp.getFields(this));if(2!==e.length)throw new Error(`Invalid number of fields for RollupValidationRequests. Expected 2, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new lp(t.readObject(op))}static fromString(e){return lp.fromBuffer(Os(e))}static empty(){return new lp(op.empty())}}class cp{constructor(e,t,n,s){this.historicalHeader=e,this.txContext=t,this.vkTreeRoot=n,this.protocolContractTreeRoot=s}static from(e){return new cp(...cp.getFields(e))}static getFields(e){return[e.historicalHeader,e.txContext,e.vkTreeRoot,e.protocolContractTreeRoot]}static fromFields(e){const t=vi.asReader(e);return new cp(t.readObject(Kh),t.readObject($h),t.readField(),t.readField())}toFields(){const e=gi(...cp.getFields(this));if(37!==e.length)throw new Error(`Invalid number of fields for TxConstantData. Expected 37, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new cp(t.readObject(Kh),t.readObject($h),si.fromBuffer(t),si.fromBuffer(t))}toBuffer(){return _i(...cp.getFields(this))}static empty(){return new cp(Kh.empty(),$h.empty(),si.ZERO,si.ZERO)}getSize(){return this.historicalHeader.getSize()+this.txContext.getSize()+this.vkTreeRoot.size+this.protocolContractTreeRoot.size}clone(){return cp.fromBuffer(this.toBuffer())}}class dp{constructor(e,t,n,s,i){this.constants=e,this.rollupValidationRequests=t,this.end=n,this.gasUsed=s,this.feePayer=i}getNonEmptyNullifiers(){return this.end.nullifiers.filter((e=>!e.isZero()))}toBuffer(){return _i(this.constants,this.rollupValidationRequests,this.end,this.gasUsed,this.feePayer)}static fromBuffer(e){const t=Js.asReader(e);return new dp(t.readObject(cp),t.readObject(lp),t.readObject(rp),t.readObject(hh),t.readObject(Gc))}static empty(){return new dp(cp.empty(),lp.empty(),rp.empty(),hh.empty(),Gc.ZERO)}toString(){return Ds(this.toBuffer())}static fromString(e){return dp.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static getFields(e){return[e.constants,e.rollupValidationRequests,e.end,e.gasUsed,e.feePayer]}static get schema(){return Qs(dp)}toFields(){const e=gi(...dp.getFields(this));if(783!==e.length)throw new Error(`Invalid number of fields for PrivateToRollupKernelCircuitPublicInputs. Expected 783, got ${e.length}`);return e}hash(){return wi(this.toFields(),Ri.PRIVATE_TX_HASH)}}class up{constructor(e,t){this.value=e,this.counter=t}toFields(){return[this.value,new si(this.counter)]}static fromFields(e){const t=vi.asReader(e);return new up(t.readField(),t.readU32())}isEmpty(){return this.value.isZero()&&!this.counter}static empty(){return new up(si.zero(),0)}toBuffer(){return _i(this.value,this.counter)}static fromBuffer(e){const t=Js.asReader(e);return new up(si.fromBuffer(t),t.readNumber())}toString(){return`value=${this.value} counter=${this.counter}`}scope(e){return new fp(this,e)}}class fp{constructor(e,t){this.noteHash=e,this.contractAddress=t}get counter(){return this.noteHash.counter}get value(){return this.noteHash.value}toFields(){return[...this.noteHash.toFields(),this.contractAddress.toField()]}static fromFields(e){const t=vi.asReader(e);return new fp(t.readObject(up),Gc.fromField(t.readField()))}isEmpty(){return this.noteHash.isEmpty()&&this.contractAddress.isZero()}static empty(){return new fp(up.empty(),Gc.ZERO)}toBuffer(){return _i(this.noteHash,this.contractAddress)}static fromBuffer(e){const t=Js.asReader(e);return new fp(up.fromBuffer(t),Gc.fromBuffer(t))}toString(){return`noteHash=${this.noteHash} contractAddress=${this.contractAddress}`}}class hp{constructor(e,t,n){this.value=e,this.counter=t,this.noteHash=n}toFields(){return[this.value,new si(this.counter),this.noteHash]}static fromFields(e){const t=vi.asReader(e);return new hp(t.readField(),t.readU32(),t.readField())}isEmpty(){return this.value.isZero()&&!this.counter&&this.noteHash.isZero()}static empty(){return new hp(si.zero(),0,si.zero())}toBuffer(){return _i(this.value,this.counter,this.noteHash)}static fromBuffer(e){const t=Js.asReader(e);return new hp(si.fromBuffer(t),t.readNumber(),si.fromBuffer(t))}toString(){return`value=${this.value} counter=${this.counter} noteHash=${this.noteHash}`}scope(e){return new pp(this,e)}}class pp{constructor(e,t){this.nullifier=e,this.contractAddress=t}get counter(){return this.nullifier.counter}get value(){return this.nullifier.value}get nullifiedNoteHash(){return this.nullifier.noteHash}toFields(){return[...this.nullifier.toFields(),this.contractAddress.toField()]}static fromFields(e){const t=vi.asReader(e);return new pp(t.readObject(hp),Gc.fromField(t.readField()))}isEmpty(){return this.nullifier.isEmpty()&&this.contractAddress.isZero()}static empty(){return new pp(hp.empty(),Gc.ZERO)}toBuffer(){return _i(this.nullifier,this.contractAddress)}static fromBuffer(e){const t=Js.asReader(e);return new pp(hp.fromBuffer(t),Gc.fromBuffer(t))}toString(){return`nullifier=${this.nullifier} contractAddress=${this.contractAddress}`}}class mp{constructor(e,t,n,s,i){this.callContext=e,this.argsHash=t,this.returnsHash=n,this.startSideEffectCounter=s,this.endSideEffectCounter=i}toFields(){return gi([this.callContext,this.argsHash,this.returnsHash,this.startSideEffectCounter,this.endSideEffectCounter])}static fromFields(e){const t=vi.asReader(e);return new mp(t.readObject(Hh),t.readField(),t.readField(),t.readU32(),t.readU32())}toBuffer(){return _i(this.callContext,this.argsHash,this.returnsHash,this.startSideEffectCounter,this.endSideEffectCounter)}static fromBuffer(e){const t=Js.asReader(e);return new mp(t.readObject(Hh),si.fromBuffer(t),si.fromBuffer(t),t.readNumber(),t.readNumber())}isEmpty(){return this.callContext.isEmpty()&&this.argsHash.isZero()&&this.returnsHash.isZero()&&0===this.startSideEffectCounter&&0===this.endSideEffectCounter}static empty(){return new mp(Hh.empty(),si.ZERO,si.ZERO,0,0)}equals(e){return e.callContext.equals(this.callContext)&&e.argsHash.equals(this.argsHash)&&e.returnsHash.equals(this.returnsHash)&&e.startSideEffectCounter===this.startSideEffectCounter&&e.endSideEffectCounter===this.endSideEffectCounter}toString(){return`PrivateCallRequest(callContext: ${this.callContext}, argsHash: ${this.argsHash}, returnsHash: ${this.returnsHash}, startSideEffectCounter: ${this.startSideEffectCounter}, endSideEffectCounter: ${this.endSideEffectCounter})`}}class gp{constructor(e,t,n){this.log=e,this.noteHashCounter=t,this.counter=n}static from(e){return new gp(...gp.getFields(e))}static getFields(e){return[e.log,e.noteHashCounter,e.counter]}static fromFields(e){const t=vi.asReader(e);return new gp(t.readObject(ip),t.readU32(),t.readU32())}toFields(){const e=gi(...gp.getFields(this));if(20!==e.length)throw new Error(`Invalid number of fields for PrivateLogData. Expected 20, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new gp(t.readObject(ip),t.readNumber(),t.readNumber())}toBuffer(){return _i(...gp.getFields(this))}static empty(){return new gp(ip.empty(),0,0)}isEmpty(){return this.log.isEmpty()&&!this.noteHashCounter&&!this.counter}[f.inspect.custom](){return`PrivateLogData {\n      log: ${this.log}\n      noteHashCounter: ${this.noteHashCounter}\n      counter: ${this.counter}\n    }`}}f.inspect.custom;class _p{constructor(e,t,n){this.leafIndex=t,this.siblingPath=n,function(e,t,n){if(e[t].length!==n)throw new Error(`Expected ${t} to have length ${n} but was ${e[t].length}`)}(this,"siblingPath",e)}toBuffer(){return _i(m(this.leafIndex,32),...this.siblingPath)}static random(e){return new _p(e,0n,Array(e).fill(0).map((()=>si.random())))}static empty(e,t=0n){const n=Array(e).fill(0).map((()=>si.ZERO));return new _p(e,t,n)}static fromBufferArray(e,t){return new _p(t.length,e,t.map((e=>si.fromBuffer(e))))}static fromBuffer(e,t){const n=Js.asReader(e),s=p(n.readBytes(32)),i=n.readArray(t,si);return new _p(t,s,i)}static deserializer(e){return{fromBuffer:t=>{const n=Js.asReader(t),s=p(n.readBytes(32)),i=n.readArray(e,si);return new _p(e,s,i)}}}}function bp(e){return e.reduce(((e,t,n)=>{if(!t.isEmpty()){if(e!==n)throw new Error("Non-empty items must be placed continuously from index 0.");return e+1}return e}),0)}function yp(e,t,n=e.length){const s=bp(e),i=bp(t);if(s+i>n)throw new Error("Combined non-empty items exceeded the maximum allowed.");const r=[...e];return t.slice(0,i).forEach(((e,t)=>r[t+s]=e)),r}function Ap(e,t){return e.counter-t.counter}function wp(e,t=!0){return function(e,t,n=!0){return[...e].sort(((e,s)=>e.isEmpty()?1:s.isEmpty()?-1:n?t(e,s):t(s,e)))}(e,Ap,t)}function xp(e){return e.every((e=>e.isEmpty()))}class vp{constructor(e,t){this.pkM=e,this.skApp=t instanceof si?t:new si(t.toBigInt())}toBuffer(){return _i(this.pkM,this.skApp)}get skAppAsGrumpkinScalar(){return new ai(this.skApp.toBigInt())}static fromBuffer(e){const t=Js.asReader(e);return new vp(Ei.fromBuffer(t),si.fromBuffer(t))}toFields(){const e=[this.pkM.toFields(),this.skApp].flat();if(4!==e.length)throw new Error(`Invalid number of fields for KeyValidationRequest. Expected 4, got ${e.length}`);return e}static fromFields(e){const t=vi.asReader(e);return new vp(Ei.fromFields(t),t.readField())}isEmpty(){return this.pkM.isZero()&&this.skApp.isZero()}static empty(){return new vp(Ei.ZERO,si.ZERO)}static async random(){return new vp(await Ei.random(),si.random())}}class Ep{constructor(e,t){this.request=e,this.skAppGenerator=t}toBuffer(){return _i(this.request,this.skAppGenerator)}static fromBuffer(e){const t=Js.asReader(e);return new Ep(t.readObject(vp),si.fromBuffer(t))}toFields(){const e=[...this.request.toFields(),this.skAppGenerator];if(5!==e.length)throw new Error(`Invalid number of fields for KeyValidationRequestAndGenerator. Expected 5, got ${e.length}`);return e}static fromFields(e){const t=vi.asReader(e);return new Ep(vp.fromFields(t),t.readField())}isEmpty(){return this.request.isEmpty()&&this.skAppGenerator.isZero()}static empty(){return new Ep(vp.empty(),si.ZERO)}}class Mp{constructor(e,t){this.value=e,this.counter=t}toBuffer(){return _i(this.value,this.counter)}static fromBuffer(e){const t=Js.asReader(e);return new Mp(si.fromBuffer(t),t.readNumber())}toFields(){return[this.value,new si(this.counter)]}static fromFields(e){const t=vi.asReader(e);return new Mp(t.readField(),t.readU32())}isEmpty(){return this.value.isZero()&&!this.counter}static empty(){return new Mp(si.zero(),0)}scope(e){return new zp(this,e)}}class zp{constructor(e,t){this.readRequest=e,this.contractAddress=t}get value(){return this.readRequest.value}get counter(){return this.readRequest.counter}toBuffer(){return _i(this.readRequest,this.contractAddress)}static fromBuffer(e){const t=Js.asReader(e);return new zp(Mp.fromBuffer(t),Gc.fromBuffer(t))}toFields(){return[...this.readRequest.toFields(),this.contractAddress.toField()]}static fromFields(e){const t=vi.asReader(e);return new zp(t.readObject(Mp),Gc.fromField(t.readField()))}isEmpty(){return this.readRequest.isEmpty()&&this.contractAddress.isZero()}static empty(){return new zp(Mp.empty(),Gc.ZERO)}}class Bp{constructor(e,t,n,s,i,r,a,o,l,c,d,u,f,h,p,m,g,_,b,y,A){this.callContext=e,this.argsHash=t,this.returnsHash=n,this.minRevertibleSideEffectCounter=s,this.isFeePayer=i,this.maxBlockNumber=r,this.noteHashReadRequests=a,this.nullifierReadRequests=o,this.keyValidationRequestsAndGenerators=l,this.noteHashes=c,this.nullifiers=d,this.privateCallRequests=u,this.publicCallRequests=f,this.publicTeardownCallRequest=h,this.l2ToL1Msgs=p,this.privateLogs=m,this.contractClassLogsHashes=g,this.startSideEffectCounter=_,this.endSideEffectCounter=b,this.historicalHeader=y,this.txContext=A}static from(e){return new Bp(...Bp.getFields(e))}static fromBuffer(e){const t=Js.asReader(e);return new Bp(t.readObject(Hh),t.readObject(si),t.readObject(si),t.readObject(si),t.readBoolean(),t.readObject(op),t.readArray(16,Mp),t.readArray(16,Mp),t.readArray(16,Ep),t.readArray(16,up),t.readArray(16,hp),t.readArray(5,mp),t.readArray(16,Eh),t.readObject(vh),t.readArray(2,yh),t.readArray(16,gp),t.readArray(1,np),t.readObject(si),t.readObject(si),t.readObject(Kh),t.readObject($h))}static fromFields(e){const t=vi.asReader(e);return new Bp(t.readObject(Hh),t.readField(),t.readField(),t.readField(),t.readBoolean(),t.readObject(op),t.readArray(16,Mp),t.readArray(16,Mp),t.readArray(16,Ep),t.readArray(16,up),t.readArray(16,hp),t.readArray(5,mp),t.readArray(16,Eh),t.readObject(vh),t.readArray(2,yh),t.readArray(16,gp),t.readArray(1,np),t.readField(),t.readField(),t.readObject(Kh),t.readObject($h))}static empty(){return new Bp(Hh.empty(),si.ZERO,si.ZERO,si.ZERO,!1,op.empty(),uh(16,Mp.empty),uh(16,Mp.empty),uh(16,Ep.empty),uh(16,up.empty),uh(16,hp.empty),uh(5,mp.empty),uh(16,Eh.empty),vh.empty(),uh(2,yh.empty),uh(16,gp.empty),uh(1,np.empty),si.ZERO,si.ZERO,Kh.empty(),$h.empty())}isEmpty(){return this.callContext.isEmpty()&&this.argsHash.isZero()&&this.returnsHash.isZero()&&this.minRevertibleSideEffectCounter.isZero()&&!this.isFeePayer&&this.maxBlockNumber.isEmpty()&&xp(this.noteHashReadRequests)&&xp(this.nullifierReadRequests)&&xp(this.keyValidationRequestsAndGenerators)&&xp(this.noteHashes)&&xp(this.nullifiers)&&xp(this.privateCallRequests)&&xp(this.publicCallRequests)&&this.publicTeardownCallRequest.isEmpty()&&xp(this.l2ToL1Msgs)&&xp(this.privateLogs)&&xp(this.contractClassLogsHashes)&&this.startSideEffectCounter.isZero()&&this.endSideEffectCounter.isZero()&&this.historicalHeader.isEmpty()&&this.txContext.isEmpty()}static getFields(e){return[e.callContext,e.argsHash,e.returnsHash,e.minRevertibleSideEffectCounter,e.isFeePayer,e.maxBlockNumber,e.noteHashReadRequests,e.nullifierReadRequests,e.keyValidationRequestsAndGenerators,e.noteHashes,e.nullifiers,e.privateCallRequests,e.publicCallRequests,e.publicTeardownCallRequest,e.l2ToL1Msgs,e.privateLogs,e.contractClassLogsHashes,e.startSideEffectCounter,e.endSideEffectCounter,e.historicalHeader,e.txContext]}toBuffer(){return _i(...Bp.getFields(this))}toFields(){const e=gi(...Bp.getFields(this));if(741!==e.length)throw new Error(`Invalid number of fields for PrivateCircuitPublicInputs. Expected 741, got ${e.length}`);return e}toJSON(){return this.toBuffer()}static get schema(){return Qs(Bp)}}var Fp,kp,Cp=i(8891).Buffer;class Op{constructor(e,t){this.x="bigint"==typeof e?new ii(e):e,this.y="bigint"==typeof t?new ii(t):t}toBuffer(){return _i(this.x,this.y)}static fromBuffer(e){const t=Js.asReader(e);return new Op(ii.fromBuffer(t),ii.fromBuffer(t))}}class Dp{constructor(e){this.record=e}toBuffer(){const e=Object.entries(this.record);return _i(e.length,...e.flat())}static fromBuffer(e){const t=Js.asReader(e);return new Dp(t.readMap(Op))}}class Lp{constructor(e,t){this.key=e,this.hash=t}get numPublicInputs(){return Number(this.key[1])}get circuitSize(){return Number(this.key[0])}get isRecursive(){return this.key[3].equals(si.ONE)}static get schema(){return Qs(Lp)}toJSON(){return this.toBuffer()}toBuffer(){return _i(...this.toFields())}toFields(){return[this.key.length,...this.key,this.hash]}static fromBuffer(e){const t=Js.asReader(e);return new Lp(t.readVector(si),t.readObject(si))}static makeFake(e,t=1){return new Lp(uh(e,si.random,t),si.random())}static makeFakeHonk(e=1){return new Lp(uh(128,si.random,e),si.random())}static makeFakeRollupHonk(e=1){return new Lp(uh(139,si.random,e),si.random())}static makeEmpty(e){return new Lp(uh(e,si.zero),si.zero())}}class Tp{constructor(e,t,n,s,i,r){this.circuitType=e,this.circuitSize=t,this.numPublicInputs=n,this.commitments=s,this.containsRecursiveProof=i,this.recursiveProofPublicInputIndices=r}toBuffer(){return _i(this.circuitType,this.circuitSize,this.numPublicInputs,new Dp(this.commitments),this.containsRecursiveProof,_i(this.recursiveProofPublicInputIndices.length,this.recursiveProofPublicInputIndices))}static fromBuffer(e){const t=Js.asReader(e);return new Tp(t.readNumber(),t.readNumber(),t.readNumber(),t.readObject(Dp).record,t.readBoolean(),t.readNumberVector())}static makeRollupFake(){return new Tp(rh.ULTRA,2048,116,{},!1,ve(16,(e=>e)))}static makeFake(){return new Tp(rh.ULTRA,2048,116,{},!1,ve(16,(e=>e)))}}class Sp{constructor(e,t){this.keyAsFields=e,this.keyAsBytes=t}get numPublicInputs(){return this.keyAsFields.numPublicInputs}get circuitSize(){return this.keyAsFields.circuitSize}get isRecursive(){return this.keyAsFields.isRecursive}static empty(){return new Sp(Lp.makeEmpty(0),Cp.alloc(0))}static makeFakeHonk(){return new Sp(Lp.makeFakeHonk(),Tp.makeFake().toBuffer())}static makeFakeRollupHonk(){return new Sp(Lp.makeFakeRollupHonk(),Tp.makeRollupFake().toBuffer())}static makeFake(e=139){return new Sp(Lp.makeFake(e),Tp.makeFake().toBuffer())}toBuffer(){return _i(this.keyAsFields,this.keyAsBytes.length,this.keyAsBytes)}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(Lp),s=t.readNumber(),i=t.readBytes(s);return new Sp(n,i)}static fromString(e){return Sp.fromBuffer(Os(e))}clone(){return Sp.fromBuffer(this.toBuffer())}toJSON(){return this.toBuffer()}static get schema(){return Qs(Sp)}}f.inspect.custom;class Np{constructor(e,t,n,s){this.origin=e,this.functionData=t,this.argsHash=n,this.txContext=s}static getFields(e){return[e.origin,e.functionData,e.argsHash,e.txContext]}static from(e){return new Np(...Np.getFields(e))}toBuffer(){return _i([...Np.getFields(this)])}toFields(){const e=gi(...Np.getFields(this));if(14!==e.length)throw new Error(`Invalid number of fields for TxRequest. Expected 14, got ${e.length}`);return e}static fromBuffer(e){const t=Js.asReader(e);return new Np(t.readObject(Gc),t.readObject(ep),si.fromBuffer(t),t.readObject($h))}hash(){return wi(this.toFields(),Ri.TX_REQUEST)}static empty(){return new Np(Gc.ZERO,ep.empty(),si.zero(),$h.empty())}isEmpty(){return this.origin.isZero()&&this.functionData.isEmpty()&&this.argsHash.isZero()&&this.txContext.isEmpty()}}(kp=Fp||(Fp={}))[kp.NADA=0]="NADA",kp[kp.PENDING=1]="PENDING",kp[kp.SETTLED=2]="SETTLED";var Pp=i(8891).Buffer;class Ip{constructor(e,t,n,s){this.slot=e,this.value=t,this.nextSlot=n,this.nextIndex=s}static get schema(){return zs.object({slot:id.Fr,value:id.Fr,nextSlot:id.Fr,nextIndex:id.BigInt}).transform((({slot:e,value:t,nextSlot:n,nextIndex:s})=>new Ip(e,t,n,s)))}getKey(){return this.slot.toBigInt()}getNextKey(){return this.nextSlot.toBigInt()}getNextIndex(){return this.nextIndex}asLeaf(){return new Yp(this.slot,this.value)}toBuffer(){return Pp.concat(this.toHashInputs())}toHashInputs(){return[Pp.from(this.slot.toBuffer()),Pp.from(this.value.toBuffer()),Pp.from(m(this.nextIndex,32)),Pp.from(this.nextSlot.toBuffer())]}clone(){return new Ip(this.slot,this.value,this.nextSlot,this.nextIndex)}static random(){return new Ip(si.random(),si.random(),si.random(),BigInt(Math.floor(1e3*Math.random())))}static empty(){return new Ip(si.ZERO,si.ZERO,si.ZERO,0n)}static fromBuffer(e){const t=Js.asReader(e),n=si.fromBuffer(t),s=si.fromBuffer(t),i=p(t.readBytes(32)),r=si.fromBuffer(t);return new Ip(n,s,r,i)}static fromLeaf(e,t,n){return new Ip(e.slot,e.value,new si(t),n)}static clone(e){return new Ip(e.slot,e.value,e.nextSlot,e.nextIndex)}}class Yp{constructor(e,t){this.slot=e,this.value=t}getKey(){return this.slot.toBigInt()}toBuffer(){return _i([this.slot,this.value])}static fromBuffer(e){const t=Js.asReader(e);return new Yp(si.fromBuffer(t),si.fromBuffer(t))}equals(e){return this.slot.equals(e.slot)&&this.value.equals(e.value)}toString(){return`PublicDataTreeLeaf(${this.slot.toString()}, ${this.value.toString()})`}isEmpty(){return this.slot.isZero()&&this.value.isZero()}updateTo(e){if(!this.slot.equals(e.slot))throw new Error("Invalid update: slots do not match");return new Yp(this.slot,e.value)}static buildDummy(e){return new Yp(new si(e),new si(0))}static empty(){return new Yp(si.ZERO,si.ZERO)}}f.inspect.custom;class Qp{constructor(e,t,n,s,i,r){this.noteHashes=e,this.nullifiers=t,this.l2ToL1Msgs=n,this.privateLogs=s,this.contractClassLogsHashes=i,this.publicCallRequests=r}getSize(){return Me(this.noteHashes)+Me(this.nullifiers)+Me(this.l2ToL1Msgs)+Me(this.privateLogs)+Me(this.contractClassLogsHashes)+Me(this.publicCallRequests)}static getFields(e){return[e.noteHashes,e.nullifiers,e.l2ToL1Msgs,e.privateLogs,e.contractClassLogsHashes,e.publicCallRequests]}static fromFields(e){const t=vi.asReader(e);return new this(t.readFieldArray(Di),t.readFieldArray(Li),t.readArray(8,Ah),t.readArray(Ni,ip),t.readArray(1,sp),t.readArray(Ti,vh))}static from(e){return new Qp(...Qp.getFields(e))}static fromBuffer(e){const t=Js.asReader(e);return new Qp(t.readArray(Di,si),t.readArray(Li,si),t.readArray(8,Ah),t.readArray(Ni,ip),t.readArray(1,sp),t.readArray(Ti,vh))}toBuffer(){return _i(...Qp.getFields(this))}toFields(){const e=gi(...Qp.getFields(this));if(900!==e.length)throw new Error(`Invalid number of fields for PrivateToPublicAccumulatedData. Expected 900, got ${e.length}`);return e}static empty(){return new Qp(uh(Di,si.zero),uh(Li,si.zero),uh(8,Ah.empty),uh(Ni,ip.empty),uh(1,sp.empty),uh(Ti,vh.empty))}[f.inspect.custom](){return`PrivateToPublicAccumulatedData {\n      noteHashes: [${this.noteHashes.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      nullifiers: [${this.nullifiers.filter((e=>!e.isZero())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      l2ToL1Msgs: [${this.l2ToL1Msgs.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      privateLogs: [${this.privateLogs.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      contractClassLogsHashes: [${this.contractClassLogsHashes.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n      publicCallRequests: [${this.publicCallRequests.filter((e=>!e.isEmpty())).map((e=>(0,f.inspect)(e))).join(", ")}],\n    }`}}class jp{constructor(e,t,n,s,i,r,a){this.constants=e,this.rollupValidationRequests=t,this.nonRevertibleAccumulatedData=n,this.revertibleAccumulatedData=s,this.publicTeardownCallRequest=i,this.gasUsed=r,this.feePayer=a}toBuffer(){return _i(this.constants,this.rollupValidationRequests,this.nonRevertibleAccumulatedData,this.revertibleAccumulatedData,this.publicTeardownCallRequest,this.gasUsed,this.feePayer)}static getFields(e){return[e.constants,e.rollupValidationRequests,e.nonRevertibleAccumulatedData,e.revertibleAccumulatedData,e.publicTeardownCallRequest,e.gasUsed,e.feePayer]}static fromBuffer(e){const t=Js.asReader(e);return new jp(t.readObject(cp),t.readObject(lp),t.readObject(Qp),t.readObject(Qp),t.readObject(vh),t.readObject(hh),t.readObject(Gc))}static empty(){return new jp(cp.empty(),lp.empty(),Qp.empty(),Qp.empty(),vh.empty(),hh.empty(),Gc.ZERO)}static fromString(e){return jp.fromBuffer(Os(e))}toString(){return Ds(this.toBuffer())}toFields(){const e=gi(...jp.getFields(this));if(1847!==e.length)throw new Error(`Invalid number of fields for PrivateToPublicKernelCircuitPublicInputs. Expected 1847, got ${e.length}`);return e}hash(){return wi(this.toFields(),Ri.PUBLIC_TX_HASH)}}class Hp{constructor(e,t,n){this.nonRevertibleAccumulatedData=e,this.revertibleAccumulatedData=t,this.publicTeardownCallRequest=n}getSize(){return this.nonRevertibleAccumulatedData.getSize()+this.revertibleAccumulatedData.getSize()+this.publicTeardownCallRequest.getSize()}get needsSetup(){return!this.nonRevertibleAccumulatedData.publicCallRequests[0].isEmpty()}get needsAppLogic(){return!this.revertibleAccumulatedData.publicCallRequests[0].isEmpty()}get needsTeardown(){return!this.publicTeardownCallRequest.isEmpty()}static fromBuffer(e){const t=Js.asReader(e);return new Hp(t.readObject(Qp),t.readObject(Qp),t.readObject(vh))}toBuffer(){return _i(this.nonRevertibleAccumulatedData,this.revertibleAccumulatedData,this.publicTeardownCallRequest)}static empty(){return new Hp(Qp.empty(),Qp.empty(),vh.empty())}}class Up{constructor(e){this.end=e}static fromBuffer(e){const t=Js.asReader(e);return new Up(t.readObject(rp))}getSize(){return this.end.getSize()}toBuffer(){return _i(this.end)}static empty(){return new Up(rp.empty())}}class Rp{constructor(e,t,n,s,i,r){if(this.constants=e,this.rollupValidationRequests=t,this.gasUsed=n,this.feePayer=s,this.forPublic=i,this.forRollup=r,!i&&!r)throw new Error("Missing partial public inputs for private tail circuit.");if(i&&r)throw new Error("Cannot create PrivateKernelTailCircuitPublicInputs that is for both public kernel circuit and rollup circuit.")}static get schema(){return Qs(Rp)}toJSON(){return this.toBuffer()}getSize(){return(this.forPublic?.getSize()??0)+(this.forRollup?.getSize()??0)+this.constants.getSize()+this.rollupValidationRequests.getSize()+this.feePayer.size}toPrivateToPublicKernelCircuitPublicInputs(){if(!this.forPublic)throw new Error("Private tail public inputs is not for public circuit.");return new jp(this.constants,this.rollupValidationRequests,this.forPublic.nonRevertibleAccumulatedData,this.forPublic.revertibleAccumulatedData,this.forPublic.publicTeardownCallRequest,this.gasUsed,this.feePayer)}toPrivateToRollupKernelCircuitPublicInputs(){if(!this.forRollup)throw new Error("Private tail public inputs is not for rollup circuit.");const e=new cp(this.constants.historicalHeader,this.constants.txContext,this.constants.vkTreeRoot,this.constants.protocolContractTreeRoot);return new dp(e,this.rollupValidationRequests,this.forRollup.end,this.gasUsed,this.feePayer)}numberOfPublicCallRequests(){return this.numberOfNonRevertiblePublicCallRequests()+this.numberOfRevertiblePublicCallRequests()+(this.hasTeardownPublicCallRequest()?1:0)}numberOfNonRevertiblePublicCallRequests(){return this.forPublic?bp(this.forPublic.nonRevertibleAccumulatedData.publicCallRequests):0}numberOfRevertiblePublicCallRequests(){return this.forPublic?bp(this.forPublic.revertibleAccumulatedData.publicCallRequests):0}hasTeardownPublicCallRequest(){return!!this.forPublic&&!this.forPublic.publicTeardownCallRequest.isEmpty()}getNonRevertiblePublicCallRequests(){return this.forPublic?this.forPublic.nonRevertibleAccumulatedData.publicCallRequests.filter((e=>!e.isEmpty())):[]}getRevertiblePublicCallRequests(){return this.forPublic?this.forPublic.revertibleAccumulatedData.publicCallRequests.filter((e=>!e.isEmpty())):[]}getTeardownPublicCallRequest(){const e=this.forPublic?.publicTeardownCallRequest;return e?.isEmpty()?void 0:e}getNonEmptyNoteHashes(){return(this.forPublic?yp(this.forPublic.nonRevertibleAccumulatedData.noteHashes,this.forPublic.revertibleAccumulatedData.noteHashes):this.forRollup.end.noteHashes).filter((e=>!e.isZero()))}getNonEmptyNullifiers(){return(this.forPublic?yp(this.forPublic.nonRevertibleAccumulatedData.nullifiers,this.forPublic.revertibleAccumulatedData.nullifiers):this.forRollup.end.nullifiers).filter((e=>!e.isZero()))}getNonEmptyPrivateLogs(){return(this.forPublic?yp(this.forPublic.nonRevertibleAccumulatedData.privateLogs,this.forPublic.revertibleAccumulatedData.privateLogs):this.forRollup.end.privateLogs).filter((e=>!e.isEmpty()))}static fromBuffer(e){const t=Js.asReader(e),n=t.readBoolean();return new Rp(t.readObject(cp),t.readObject(lp),t.readObject(hh),t.readObject(Gc),n?t.readObject(Hp):void 0,n?void 0:t.readObject(Up))}toBuffer(){const e=!!this.forPublic;return _i(e,this.constants,this.rollupValidationRequests,this.gasUsed,this.feePayer,e?this.forPublic.toBuffer():this.forRollup.toBuffer())}static empty(){return new Rp(cp.empty(),lp.empty(),hh.empty(),Gc.ZERO,void 0,Up.empty())}static emptyWithNullifier(){const e=rp.empty();return e.nullifiers[0]=si.random(),new Rp(cp.empty(),lp.empty(),hh.empty(),Gc.ZERO,void 0,new Up(e))}}class Gp{constructor(e,t){this.msgs=e,this.vkTreeRoot=t}static fromSlice(e,t,n){const s=4*t,i=s+4,r=e.slice(s,i);return new Gp(r,n)}toBuffer(){return _i(this.msgs,this.vkTreeRoot)}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new Gp(t.readArray(4,si),si.fromBuffer(t))}static fromString(e){return Gp.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Gp)}}class Zp{constructor(e,t,n){if(this.shaRoot=e,this.convertedRoot=t,this.vkTreeRoot=n,0!=e.toBuffer()[0])throw new Error("shaRoot buffer must be 31 bytes. Got 32 bytes")}toBuffer(){return _i(...Zp.getFields(this))}toString(){return Ds(this.toBuffer())}toJSON(){return this.toBuffer()}static from(e){return new Zp(...Zp.getFields(e))}static getFields(e){return[e.shaRoot,e.convertedRoot,e.vkTreeRoot]}static fromBuffer(e){const t=Js.asReader(e);return new Zp(t.readObject(si),t.readObject(si),si.fromBuffer(t))}static fromString(e){return Zp.fromBuffer(Os(e))}static get schema(){return Qs(Zp)}}var Jp=i(8891).Buffer;const Xp=42;class Wp{constructor(e,t){this.buffer=e,this.numPublicInputs=t,this.metadataOffset=4,this.publicInputsOffset=100}static fromBuffer(e){const t=Js.asReader(e),n=t.readNumber(),s=t.readBytes(n),i=t.readNumber();return new Wp(s,i)}toBuffer(){return _i(this.buffer.length,this.buffer,this.numPublicInputs)}toString(){return Ds(this.toBuffer())}withoutPublicInputs(){return Jp.concat([this.buffer.subarray(this.metadataOffset,this.publicInputsOffset),this.buffer.subarray(this.publicInputsOffset+si.SIZE_IN_BYTES*this.numPublicInputs)])}extractPublicInputs(){return Js.asReader(this.buffer.subarray(this.publicInputsOffset,this.publicInputsOffset+si.SIZE_IN_BYTES*this.numPublicInputs)).readArray(this.numPublicInputs,si)}extractAggregationObject(){return this.extractPublicInputs().slice(-16)}static fromString(e){return Wp.fromBuffer(Os(e))}isEmpty(){return this.buffer.length===Xp&&this.buffer.every((e=>0===e))&&0===this.numPublicInputs}static empty(){return Vp()}}function Vp(){return new Wp(Jp.alloc(Xp,0),0)}class qp{constructor(e,t,n,s){if(this.proof=e,this.binaryProof=t,this.fieldsValid=n,this.proofLength=s,e.length!==s)throw new Error(`Proof length ${e.length} does not match expected length ${s}.`)}static fromBuffer(e,t){const n=Js.asReader(e),s=n.readNumber();if("number"==typeof t&&t!==s)throw new Error(`Expected proof length ${t}, got ${s}`);return new qp(n.readArray(s,si),Wp.fromBuffer(n),n.readBoolean(),s)}toBuffer(){return _i(this.proof.length,this.proof,this.binaryProof,this.fieldsValid)}toString(){return Ds(this.toBuffer())}static fromString(e,t){return qp.fromBuffer(Os(e),t)}toJSON(){return this.toBuffer()}static schemaFor(e){return id.Buffer.transform((t=>qp.fromBuffer(t,e)))}}function Kp(e){return new qp(uh(e,si.zero),Vp(),!0,e)}class $p{constructor(e,t,n,s){this.proof=e,this.verificationKey=t,this.vkPath=n,this.publicInputs=s}toBuffer(){return _i(...$p.getFields(this))}toString(){return Ds(this.toBuffer())}static from(e){return new $p(...$p.getFields(e))}static getFields(e){return[e.proof,e.verificationKey,e.vkPath,e.publicInputs]}static fromBuffer(e,t){const n=Js.asReader(e);return new $p(qp.fromBuffer(n,t),n.readObject(Lp),n.readArray(6,si),n.readObject(Zp))}static fromString(e,t){return $p.fromBuffer(Os(e),t)}toJSON(){return this.toBuffer()}static schemaFor(e){return id.Buffer.transform((t=>$p.fromBuffer(t,e)))}}class em{constructor(e){this.children=e}toBuffer(){return _i(...this.children)}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e),n=Array.from({length:4},(()=>$p.fromBuffer(t,459)));return new em(n)}static fromString(e){return em.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(em)}}var tm,nm=i(8891).Buffer;function sm(e){return e===tm.OK||e===tm.APP_LOGIC_REVERTED||e===tm.TEARDOWN_REVERTED||e===tm.BOTH_REVERTED}!function(e){e[e.OK=0]="OK",e[e.APP_LOGIC_REVERTED=1]="APP_LOGIC_REVERTED",e[e.TEARDOWN_REVERTED=2]="TEARDOWN_REVERTED",e[e.BOTH_REVERTED=3]="BOTH_REVERTED"}(tm||(tm={}));class im{constructor(e){this.code=e.valueOf()}getCode(){return this.code}equals(e){return this.code===e.code}isOK(){return this.equals(im.OK)}getDescription(){switch(this.code){case tm.OK:return"OK";case tm.APP_LOGIC_REVERTED:return"Application logic reverted";case tm.TEARDOWN_REVERTED:return"Teardown reverted";case tm.BOTH_REVERTED:return"Both reverted";default:return`Unknown RevertCode: ${this.code}`}}toJSON(){return this.code}static get schema(){return zs.nativeEnum(tm).transform((e=>new im(e)))}toHashPreimage(){const e=nm.alloc(im.PREIMAGE_SIZE_IN_BYTES-im.PACKED_SIZE_IN_BYTES);return nm.concat([e,this.toBuffer()])}toBuffer(){const e=nm.alloc(im.PACKED_SIZE_IN_BYTES);return e.writeUInt8(this.code,0),e}toField(){return new si(this.toBuffer())}getSerializedLength(){return this.toBuffer().length}static fromField(e){if(!sm(e.toNumber()))throw new Error(`Invalid RevertCode: ${e.toNumber()}`);return new im(e.toNumber())}static fromFields(e){const t=vi.asReader(e);return im.fromField(t.readField())}static fromBuffer(e){const t=Js.asReader(e).readBytes(im.PACKED_SIZE_IN_BYTES).readUInt8(0);if(!sm(t))throw new Error(`Invalid RevertCode: ${t}`);return new im(t)}static random(){return new im(Math.floor(Math.random()*im.NUM_OPTIONS))}[f.inspect.custom](){return`RevertCode<${this.code.toString()}>`}}im.OK=new im(tm.OK),im.APP_LOGIC_REVERTED=new im(tm.APP_LOGIC_REVERTED),im.TEARDOWN_REVERTED=new im(tm.TEARDOWN_REVERTED),im.BOTH_REVERTED=new im(tm.BOTH_REVERTED),im.PREIMAGE_SIZE_IN_BYTES=32,im.PACKED_SIZE_IN_BYTES=1,im.NUM_OPTIONS=4;class rm{constructor(e,t,n,s){this.leafSlot=e,this.value=t,this.membershipWitness=n,this.leafPreimage=s}static empty(){return new rm(si.ZERO,si.ZERO,_p.empty(Ci),Ip.empty())}static fromBuffer(e){const t=Js.asReader(e);return new rm(t.readObject(si),t.readObject(si),_p.fromBuffer(t,Ci),t.readObject(Ip))}toBuffer(){return _i(this.leafSlot,this.value,this.membershipWitness,this.leafPreimage)}}f.inspect.custom,f.inspect.custom;class am{constructor(e,t,n){this.vk=e,this.vkIndex=t,this.vkPath=n}static empty(){return new am(Sp.empty(),0,uh(6,si.zero))}static fromBuffer(e){const t=Js.asReader(e);return new am(t.readObject(Sp),t.readNumber(),t.readArray(6,si))}toBuffer(){return _i(this.vk,this.vkIndex,this.vkPath)}toString(){return Ds(this.toBuffer())}}class om{async encryptBufferCBC(e,t,n){const s=16-e.length%16,i=gh.Buffer.alloc(s);i.fill(s);const r=gh.Buffer.concat([e,i]),a=await c.initSingleton();return gh.Buffer.from(a.aesEncryptBufferCbc(new u(r),new u(t),new u(n),r.length))}async decryptBufferCBC(e,t,n){const s=await c.initSingleton(),i=gh.Buffer.from(s.aesDecryptBufferCbc(new u(e),new u(t),new u(n),e.length)),r=i[i.length-1];return i.subarray(0,i.length-r)}}function lm(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);let s=0;for(const t of e)n.set(t,s),s+=t.length;return n}i(8891).Buffer,i(8891).Buffer;var cm=i(8891).Buffer;class dm{generator(){return dm.generator}async mul(e,t){const n=await c.initSingleton(),[s]=n.getWasm().callWasmExport("ecc_secp256k1__mul",[e,t],[64]);return cm.from(s)}async getRandomFr(){const e=await c.initSingleton(),[t]=e.getWasm().callWasmExport("ecc_secp256k1__get_random_scalar_mod_circuit_modulus",[],[32]);return cm.from(t)}async reduce512BufferToFr(e){const t=await c.initSingleton(),[n]=t.getWasm().callWasmExport("ecc_secp256k1__reduce512_buffer_mod_circuit_modulus",[e],[32]);return cm.from(n)}}dm.generator=cm.from([121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184]);var um=i(8891).Buffer;class fm{constructor(e){if(this.buffer=e,e.length!==fm.SIZE)throw new Error(`Invalid signature buffer of length ${e.length}.`)}static isSignature(e){return/^(0x)?[0-9a-f]{128}$/i.test(e)}static fromString(e){if(!fm.isSignature(e))throw new Error(`Invalid signature string: ${e}`);return new fm(um.from(e.replace(/^0x/i,""),"hex"))}static random(){return new fm(ot(64))}get s(){return this.buffer.subarray(0,32)}get e(){return this.buffer.subarray(32)}toBuffer(){return this.buffer}static fromBuffer(e){const t=Js.asReader(e);return new fm(t.readBytes(fm.SIZE))}toString(){return`0x${this.buffer.toString("hex")}`}toFields(){const e=this.toBuffer(),t=um.alloc(32),n=um.alloc(32),s=um.alloc(32);return e.copy(t,1,0,31),e.copy(n,1,31,62),e.copy(s,1,62,64),function(e,t){return e.map(t)}([t,n,s],si.fromBuffer)}}fm.SIZE=64,fm.EMPTY=new fm(um.alloc(64));var hm=i(8891).Buffer;class pm{async computePublicKey(e){const t=await c.initSingleton(),[n]=t.getWasm().callWasmExport("schnorr_compute_public_key",[e.toBuffer()],[64]);return Ei.fromBuffer(hm.from(n))}async constructSignature(e,t){const n=await c.initSingleton(),s=lm([ci(e.length),e]),[i,r]=n.getWasm().callWasmExport("schnorr_construct_signature",[s,t.toBuffer()],[32,32]);return new fm(hm.from([...i,...r]))}async verifySignature(e,t,n){const s=await c.initSingleton(),i=lm([ci(e.length),e]),[r]=s.getWasm().callWasmExport("schnorr_verify_signature",[i,t.toBuffer(),n.s,n.e],[1]);return 1===r[0]}}var mm=i(8891).Buffer;function gm(e){return cl(mm.concat([e.toCompressedBuffer(),di(Ri.SYMMETRIC_KEY)]))}function _m(e){return function(e,t){const n=t(e);return[n.subarray(0,16),n.subarray(16,32)]}(e,gm)}function bm(e,t,n){return(new om).encryptBufferCBC(e,t,n)}function ym(e,t,n){return(new om).decryptBufferCBC(e,t,n)}async function Am(e,t){if(t.isZero())throw new Error("Attempting to derive a shared secret with a zero public key. You have probably passed a zero public key in your Noir code somewhere thinking that the note won't be broadcast... but it was.");const n=new Hd;return await n.mul(t,e)}var wm,xm,vm=i(8891).Buffer;function Em(e){const t=[],n=Math.ceil(e.length/31);for(let s=0;s<n;s++)t.push(new si(e.subarray(31*s,31*(s+1))));return t}class Mm{constructor(e,t,n){this.tag=e,this.contractAddress=t,this.incomingBodyPlaintext=n}async generatePayload(e,t,n=ot){const s=await Xd(e),[i,r]=s.toXAndSign(),a=vm.from([Number(r)]),o=await async function(e,t){const n=await t.toAddressPoint();return await Am(e,n)}(e,t),[l,c]=_m(o);if(this.incomingBodyPlaintext.length>448)throw new Error("Incoming body plaintext cannot be more than 448 bytes.");const d=this.incomingBodyPlaintext,u=await bm(d,c,l),f=_i(this.contractAddress.toBuffer(),function(e,t=2){const n=oi.alloc(t);return n.writeUInt16BE(e,t-2),n}(u.length)),h=await bm(f,c,l);if(48!==h.length)throw new Error(`Invalid header ciphertext size: ${h.length}`);const p=49+u.length,m=_i(a,h,u,n(31*Math.ceil(p/31)-p));if(m.length%31!=0)throw new Error(`logBytes.length should be divisible by 31, got: ${m.length}`);const g=Array.from({length:16-m.length/31},(()=>si.fromBuffer(n(32)))),_=[this.tag,i,...Em(m),...g];if(_.length!==Pi)throw new Error(`Expected private log payload to have 18 fields. Got ${_.length}.`);return new ip(_)}static async decryptAsIncoming(e,t){try{const s=e,i=s[0],r=s[1],a=Js.asReader((n=s.slice(2),vm.concat(n.map((e=>e.toBuffer().subarray(1)))))),o=!!a.readBytes(1)[0],l=await Ei.fromXAndSign(r,o),c=a.readBytes(48);let d=Gc.ZERO;if(!t)throw new Error("Cannot decrypt without an address secret.");const u=await Am(t,l),[f,h]=_m(u),p=await ym(c,h,f),m=Js.asReader(p),g=m.readBytes(32);d=Gc.fromBuffer(g);const _=m.readBytes(2),b=(_[0]<<8)+_[1],y=a.readBytes(b),A=await ym(y,h,f);return new Mm(i,d,A)}catch(e){if(!this.isAcceptableError(e))throw e;return}var n}static isAcceptableError(e){return e instanceof Mi||e.message.endsWith("is greater or equal to field modulus.")||e.message.startsWith("Invalid AztecAddress length")||e.message.startsWith("Selector must fit in")||e.message.startsWith("Attempted to read beyond buffer length")||e.message.startsWith("RangeError [ERR_BUFFER_OUT_OF_BOUNDS]:")}toBuffer(){return _i(this.tag,this.contractAddress.toBuffer(),this.incomingBodyPlaintext)}}class zm extends ih{toJSON(){return this.toBuffer()}static get schema(){return id.Buffer.transform(zm.fromBuffer)}static fromBuffer(e){const t=Js.asReader(e);return new zm(t.readVector(si))}static random(){const e=lt(10)+1,t=Array.from({length:e},(()=>si.random()));return new zm(t)}toString(){return Ds(this.toBuffer())}static fromString(e){return zm.fromBuffer(Os(e))}get length(){return this.items.length}equals(e){return this.items.every(((t,n)=>t.equals(e.items[n])))}}class Bm extends zm{static get schema(){return id.Buffer.transform(Bm.fromBuffer)}static fromBuffer(e){const t=Js.asReader(e);return new Bm(t.readVector(si))}}class Fm extends zm{static get schema(){return id.Buffer.transform(Fm.fromBuffer)}static fromBuffer(e){const t=Js.asReader(e);return new Fm(t.readVector(si))}}wm=class{constructor(e,t,n){this.event=e,this.contractAddress=t,this.eventTypeId=n}static async decryptAsIncoming(e,t){const n=await Mm.decryptAsIncoming(e.fields,t);if(n)return Hs(this,wm,"m",xm).call(this,n.incomingBodyPlaintext,n.contractAddress)}toIncomingBodyPlaintext(){return _i([this.eventTypeId.toField(),...this.event.items])}static async random(e){return new wm(Bm.random(),e??await Gc.random(),Uc.random())}equals(e){return this.event.equals(e.event)&&this.contractAddress.equals(e.contractAddress)&&this.eventTypeId.equals(e.eventTypeId)}},xm=function(e,t){let n;try{const s=Js.asReader(e).readArray(e.length/si.SIZE_IN_BYTES,si),i=Uc.fromField(s[0]),r=new Bm(s.slice(1));n=new wm(r,t,i)}catch(e){return}return n};class km{constructor(e){this.hash=e}static random(){return new km(si.random())}static fromBuffer(e){return new this(Js.asReader(e).readObject(si))}static fromString(e){return new km(si.fromString(e))}static fromBigInt(e){return new km(new si(e))}toBuffer(){return this.hash.toBuffer()}toString(){return this.hash.toString()}toBigInt(){return this.hash.toBigInt()}toJSON(){return this.toString()}equals(e){return this.hash.equals(e.hash)}static get schema(){return id.BufferHex.transform((e=>new km(si.fromBuffer(e))))}static zero(){return new km(si.ZERO)}static get SIZE(){return si.SIZE_IN_BYTES}}var Cm=i(7842),Om=i(8891).Buffer;class Dm{constructor(e,t,n){if(this.blockNumber=e,this.txIndex=t,this.logIndex=n,!Number.isInteger(e)||e<1)throw new Error(`Invalid block number: ${e}`);if(!Number.isInteger(t))throw new Error(`Invalid tx index: ${t}`);if(!Number.isInteger(n))throw new Error(`Invalid log index: ${n}`)}static random(){return new Dm(Math.floor(1e3*Math.random())+1,Math.floor(1e3*Math.random()),Math.floor(100*Math.random()))}static get schema(){return zs.object({blockNumber:id.Integer,txIndex:id.Integer,logIndex:id.Integer}).transform((({blockNumber:e,txIndex:t,logIndex:n})=>new Dm(e,t,n)))}toBuffer(){return Om.concat([m(BigInt(this.blockNumber),4),m(BigInt(this.txIndex),4),m(BigInt(this.logIndex),4)])}static fromBuffer(e){const t=Js.asReader(e),n=t.readNumber(),s=t.readNumber(),i=t.readNumber();return new Dm(n,s,i)}toString(){return`${this.blockNumber}-${this.txIndex}-${this.logIndex}`}static fromString(e){const[t,n,s]=e.split("-"),i=Number(t),r=Number(n),a=Number(s);return new Dm(i,r,a)}toHumanReadable(){return`logId: (blockNumber: ${this.blockNumber}, txIndex: ${this.txIndex}, logIndex: ${this.logIndex})`}}var Lm=i(8891).Buffer;class Tm{constructor(e,t){this.id=e,this.log=t}static async random(){return new Tm(Dm.random(),await Fh.random())}static get schema(){return zs.object({id:Dm.schema,log:Fh.schema}).transform(Tm.from)}static from(e){return new Tm(e.id,e.log)}toBuffer(){return Lm.concat([this.id.toBuffer(),this.log.toBuffer()])}toString(){return Ds(this.toBuffer())}toHumanReadable(){return`${this.id.toHumanReadable()}, ${this.log.toHumanReadable()}`}equals(e){return Cm(this,e)}static fromBuffer(e){const t=Js.asReader(e),n=Dm.fromBuffer(t),s=Fh.fromBuffer(t);return new Tm(n,s)}static fromString(e){return Tm.fromBuffer(Os(e))}}var Sm=i(8891).Buffer;class Nm{constructor(e,t){this.contractAddress=e,this.data=t}get length(){return this.data.length+Gc.SIZE_IN_BYTES+4}toBuffer(){return Sm.concat([this.contractAddress.toBuffer(),ui(this.data)])}toHumanReadable(){const e=function(e,t){const n=e.every((e=>e>=32&&e<=126))?e.toString("ascii"):`0x${e.toString("hex")}`;return n}(this.data);return`UnencryptedL2Log(contractAddress: ${this.contractAddress.toString()}, data: ${e})`}static get schema(){return zs.object({contractAddress:id.AztecAddress,data:id.Buffer}).transform((({contractAddress:e,data:t})=>new Nm(e,t)))}static fromBuffer(e){const t=Js.asReader(e),n=Gc.fromBuffer(t),s=t.readBuffer();return new Nm(n,s)}hash(){return dl(this.toBuffer())}getSiloedHash(){const e=this.hash();return dl(Sm.concat([this.contractAddress.toBuffer(),e]))}static async random(){const e=await Gc.random(),t=ot(1)[0],n=ot(t);return new Nm(e,n)}}var Pm=i(8891).Buffer;class Im{constructor(e,t){this.id=e,this.log=t}static async random(){return new Im(Dm.random(),await Nm.random())}static get schema(){return zs.object({id:Dm.schema,log:Nm.schema}).transform(Im.from)}static from(e){return new Im(e.id,e.log)}toBuffer(){return Pm.concat([this.id.toBuffer(),this.log.toBuffer()])}toString(){return Ds(this.toBuffer())}toHumanReadable(){return`${this.id.toHumanReadable()}, ${this.log.toHumanReadable()}`}equals(e){return Cm(this,e)}static fromBuffer(e){const t=Js.asReader(e),n=Dm.fromBuffer(t),s=Nm.fromBuffer(t);return new Im(n,s)}static fromString(e){return Im.fromBuffer(Os(e))}}var Ym=i(8891).Buffer;const Qm=zs.object({logs:zs.array(Im.schema),maxLogsHit:zs.boolean()}),jm=zs.object({logs:zs.array(Tm.schema),maxLogsHit:zs.boolean()});class Hm{constructor(e,t,n,s,i){this.txHash=e,this.dataStartIndexForTx=t,this.blockNumber=n,this.isFromPublic=s,this.logData=i}static get schema(){return zs.object({txHash:km.schema,dataStartIndexForTx:zs.number(),blockNumber:zs.number(),isFromPublic:zs.boolean(),logData:id.Buffer}).transform((({txHash:e,dataStartIndexForTx:t,blockNumber:n,isFromPublic:s,logData:i})=>new Hm(e,t,n,s,i)))}toBuffer(){return Ym.concat([this.txHash.toBuffer(),li(this.dataStartIndexForTx),li(this.blockNumber),pi(this.isFromPublic),this.logData])}static fromBuffer(e){const t=Js.asReader(e);return new Hm(t.readObject(km),t.readNumber(),t.readNumber(),t.readBoolean(),t.readToEnd())}static random(){return new Hm(km.random(),1,1,!1,si.random().toBuffer())}equals(e){return this.txHash.equals(e.txHash)&&this.dataStartIndexForTx===e.dataStartIndexForTx&&this.blockNumber===e.blockNumber&&this.isFromPublic===e.isFromPublic&&this.logData.equals(e.logData)}}var Um=i(8891).Buffer;class Rm{constructor(e){this.logs=e}toBuffer(){const e=this.logs.map((e=>ui(e.toBuffer())));return ui(Um.concat(e))}getSerializedLength(){return this.getKernelLength()+4}getKernelLength(){return this.logs.reduce(((e,t)=>e+t.length+4),0)}hash(){return dl(Um.concat(this.logs.map((e=>e.hash()))))}static get schema(){return zs.object({logs:zs.array(Nm.schema)}).transform((({logs:e})=>new Rm(e)))}static empty(){return new Rm([])}static fromBuffer(e,t=!0){const n=new Js(e,0),s=t?n.readNumber():-1,i=n.readBufferArray(s);return new Rm(i.map(Nm.fromBuffer))}static async random(e){if(e>1)throw new Error(`Trying to create ${e} logs for one call (max: 1)`);const t=[];for(let n=0;n<e;n++)t.push(await Nm.random());return new Rm(t)}}var Gm=i(8891).Buffer;class Zm{constructor(e){this.functionLogs=e}toBuffer(){const e=this.functionLogs.map((e=>e.toBuffer()));return ui(Gm.concat(e))}getSerializedLength(){return this.functionLogs.reduce(((e,t)=>e+t.getSerializedLength()),0)+4}getKernelLength(){return this.functionLogs.reduce(((e,t)=>e+t.getKernelLength()),0)}getTotalLogCount(){return this.functionLogs.reduce(((e,t)=>e+t.logs.length),0)}addFunctionLogs(e){this.functionLogs.push(...e)}unrollLogs(){return this.functionLogs.flatMap((e=>e.logs))}equals(e){return Cm(this,e)}filter(e,t){for(const n of this.functionLogs){let s=!1;for(const t of n.logs)-1!==e.findIndex((e=>e.value.equals(si.fromBuffer(t.getSiloedHash()))))&&(s=!0);s&&t.addFunctionLogs([n])}return t}filterScoped(e,t){for(const n of this.functionLogs){let s=!1;for(const t of n.logs){let n;if(!("contractAddress"in t))throw new Error("Can't run filterScoped in logs without contractAddress or maskedContractAddress");n=t.contractAddress,-1!=e.findIndex((e=>e.contractAddress.equals(n)&&e.value.equals(si.fromBuffer(t.hash()))))&&(s=!0)}s&&t.addFunctionLogs([n])}return t}}class Jm extends Zm{static get schema(){return zs.object({functionLogs:zs.array(Rm.schema)}).transform((({functionLogs:e})=>new Jm(e)))}static empty(){return new Jm([])}static fromBuffer(e,t=!0){const n=Js.asReader(e),s=t?n.readNumber():-1,i=n.readBufferArray(s).map((e=>Rm.fromBuffer(e,!1)));return new Jm(i)}static async random(e,t){if(e*t>1)throw new Error(`Trying to create ${e*t} logs for one tx (max: 1)`);const n=[];for(let s=0;s<e;s++)n.push(await Rm.random(t));return new Jm(n)}hash(){const e=this.unrollLogs();return Jm.hashSiloedLogs(e.map((e=>e.getSiloedHash())))}static hashSiloedLogs(e){if(0==e.length)return Gm.alloc(32);let t=Gm.alloc(0);for(const n of e)t=Gm.concat([t,n]);for(let n=0;n<1-e.length;n++)t=Gm.concat([t,Gm.alloc(32)]);return dl(t)}}var Xm=i(8891).Buffer;class Wm{constructor(e){this.txLogs=e}toBuffer(){const e=this.txLogs.map((e=>e.toBuffer()));return ui(Xm.concat(e))}getSerializedLength(){return this.txLogs.reduce(((e,t)=>e+t.getSerializedLength()),0)+4}getTotalLogCount(){return this.txLogs.reduce(((e,t)=>e+t.getTotalLogCount()),0)}toString(){return Ds(this.toBuffer())}equals(e){return Cm(this,e)}static getTotalLogCount(e){return e.reduce(((e,t)=>e+t.getTotalLogCount()),0)}}class Vm extends Wm{static get schema(){return zs.object({txLogs:zs.array(Jm.schema)}).transform((({txLogs:e})=>new Vm(e)))}get type(){return"ContractClass"}static fromBuffer(e){const t=Js.asReader(e),n=t.readNumber(),s=t.readBufferArray(n).map((e=>Jm.fromBuffer(e,!1)));return new Vm(s)}static fromString(e){return Vm.fromBuffer(Os(e))}static async random(e,t,n){const s=[];for(let i=0;i<e;i++)s.push(await Jm.random(t,n));return new Vm(s)}static unrollLogs(e){const t=[];for(const n of e)if(n)for(const e of n.txLogs)t.push(...e.unrollLogs());return t}}const qm=zs.object({txHash:km.schema.optional(),fromBlock:id.Integer.optional(),toBlock:id.Integer.optional(),afterLog:Dm.schema.optional(),contractAddress:id.AztecAddress.optional()});class Km{constructor(e,t){this.callContext=e,this.args=t}getSize(){return this.isEmpty()?0:this.toBuffer().length}toBuffer(){return _i(this.callContext,new ih(this.args))}static get schema(){return zs.object({callContext:Hh.schema,args:zs.array(id.Fr)}).transform(Km.from)}static fromBuffer(e){const t=Js.asReader(e);return new Km(Hh.fromBuffer(t),t.readVector(si))}static from(e){return new Km(...Km.getFields(e))}static getFields(e){return[e.callContext,e.args]}static empty(){return new Km(Hh.empty(),[])}static async random(){return new Km(await Hh.random(),[si.random(),si.random()])}isEmpty(){return this.callContext.isEmpty()&&0===this.args.length}async isForCallRequest(e){return this.callContext.msgSender.equals(e.msgSender)&&this.callContext.contractAddress.equals(e.contractAddress)&&this.callContext.functionSelector.equals(e.functionSelector)&&this.callContext.isStaticCall==e.isStaticCall&&(await Qd(this.args)).equals(e.argsHash)}async toCallRequest(){return new vh(this.callContext.msgSender,this.callContext.contractAddress,this.callContext.functionSelector,this.callContext.isStaticCall,await Qd(this.args))}[f.inspect.custom](){return`PublicExecutionRequest {\n      callContext: ${(0,f.inspect)(this.callContext)}\n      args: ${this.args}\n    }`}}class $m{constructor(e,t,n){this.note=e,this.storageSlot=t,this.noteTypeId=n}static get schema(){return zs.object({note:Fm.schema,storageSlot:id.Fr,noteTypeId:id.NoteSelector}).transform($m.from)}static from(e){return new $m(e.note,e.storageSlot,e.noteTypeId)}static random(){return new $m(Fm.random(),si.random(),nd.random())}}class eg{constructor(e,t){this.log=e,this.counter=t}static get schema(){return zs.object({log:Nm.schema,counter:id.Integer}).transform(eg.from)}static from(e){return new eg(e.log,e.counter)}isEmpty(){return!this.log.data.length&&!this.counter}}class tg{constructor(e,t){this.request=e,this.counter=t}static get schema(){return zs.object({request:Km.schema,counter:id.Integer}).transform(tg.from)}static from(e){return new tg(e.request,e.counter)}isEmpty(){return this.request.isEmpty()&&!this.counter}static async random(){return new tg(await Km.random(),0)}}class ng{constructor(e,t){this.entrypoint=e,this.firstNullifier=t}static get schema(){return zs.object({entrypoint:sg.schema,firstNullifier:si.schema}).transform(ng.from)}static from(e){return new ng(e.entrypoint,e.firstNullifier)}static async random(e=1){return new ng(await sg.random(e),si.random())}}class sg{constructor(e,t,n,s,i,r,a,o,l,c,d,u){this.acir=e,this.vk=t,this.partialWitness=n,this.publicInputs=s,this.noteHashLeafIndexMap=i,this.newNotes=r,this.noteHashNullifierCounterMap=a,this.returnValues=o,this.nestedExecutions=l,this.enqueuedPublicFunctionCalls=c,this.publicTeardownFunctionCall=d,this.contractClassLogs=u}static get schema(){return zs.object({acir:id.Buffer,vk:id.Buffer,partialWitness:js(zs.coerce.number(),zs.string()),publicInputs:Bp.schema,noteHashLeafIndexMap:js(id.BigInt,id.BigInt),newNotes:zs.array($m.schema),noteHashNullifierCounterMap:js(zs.coerce.number(),zs.number()),returnValues:zs.array(id.Fr),nestedExecutions:zs.array(zs.lazy((()=>sg.schema))),enqueuedPublicFunctionCalls:zs.array(tg.schema),publicTeardownFunctionCall:Km.schema,contractClassLogs:zs.array(eg.schema)}).transform(sg.from)}static from(e){return new sg(e.acir,e.vk,e.partialWitness,e.publicInputs,e.noteHashLeafIndexMap,e.newNotes,e.noteHashNullifierCounterMap,e.returnValues,e.nestedExecutions,e.enqueuedPublicFunctionCalls,e.publicTeardownFunctionCall,e.contractClassLogs)}static async random(e=1){return new sg(ot(4),ot(4),new Map([[1,"one"]]),Bp.empty(),new Map([[1n,1n]]),[$m.random()],new Map([[0,0]]),[si.random()],await Ee(e,(()=>sg.random(0))),[await tg.random()],await Km.random(),[new eg(await Nm.random(),lt(10))])}}function ig(e){return[e.contractClassLogs,...e.nestedExecutions.flatMap(ig)].flat()}function rg(e){const t=wp(ig(e.entrypoint));return new Rm(t.map((e=>e.log)))}function ag(e){return[...e.enqueuedPublicFunctionCalls,...e.nestedExecutions.flatMap(ag)]}function og(e){return wp(ag(e.entrypoint),!1).map((e=>e.request))}function lg(e){const t=e=>[e.publicTeardownFunctionCall,...e.nestedExecutions.flatMap(t)].filter((e=>!e.isEmpty())),n=t(e.entrypoint);if(1===n.length)return n[0];if(n.length>1)throw new Error("Multiple public teardown calls detected");return Km.empty()}const cg=zs.object({l1StartBlock:id.BigInt,l1GenesisTime:id.BigInt,slotDuration:zs.number(),epochDuration:zs.number(),ethereumSlotDuration:zs.number()});function dg(e){return zs.object({data:e,l2BlockNumber:id.Integer,l2BlockHash:zs.string()})}var ug=i(8891).Buffer;const fg=8392562855083340404n,hg=fg.toString(16).length/2,pg=hg+7;class mg{constructor(e,t,n,s,i,r,a,o,l,c,d){if(this.revertCode=e,this.txHash=t,this.transactionFee=n,this.noteHashes=s,this.nullifiers=i,this.l2ToL1Msgs=r,this.publicDataWrites=a,this.privateLogs=o,this.publicLogs=l,this.contractClassLogsLength=c,this.contractClassLogs=d,s.length>Di)throw new Error(`Too many note hashes: ${s.length}, max: 64`);if(s.forEach((e=>{if(e.isZero())throw new Error("Note hash is zero")})),i.length>Li)throw new Error(`Too many nullifiers: ${i.length}, max: 64`);if(i.forEach((e=>{if(e.isZero())throw new Error("Nullifier is zero")})),r.length>8)throw new Error(`Too many L2 to L1 messages: ${r.length}, max: 8`);if(r.forEach((e=>{if(e.isZero())throw new Error("L2 to L1 message is zero")})),a.length>Si)throw new Error(`Too many public data writes: ${a.length}, max: 64`);if(a.forEach((e=>{if(e.isEmpty())throw new Error("Public data write is empty")})),o.length>Ni)throw new Error(`Too many private logs: ${o.length}, max: 32`);o.forEach((e=>{if(e.isEmpty())throw new Error("Private log is empty")}))}toBuffer(){return _i([this.revertCode,this.txHash,this.transactionFee,hi(this.noteHashes,1),hi(this.nullifiers,1),hi(this.l2ToL1Msgs,1),hi(this.publicDataWrites,1),hi(this.privateLogs,1),hi(this.publicLogs,1),this.contractClassLogsLength,this.contractClassLogs])}getDASize(){return this.toBlobFields().length*si.SIZE_IN_BYTES}static fromBuffer(e){const t=Js.asReader(e);return new mg(im.fromBuffer(t),km.fromBuffer(t),si.fromBuffer(t),t.readVectorUint8Prefix(si),t.readVectorUint8Prefix(si),t.readVectorUint8Prefix(si),t.readVectorUint8Prefix(Bh),t.readVectorUint8Prefix(ip),t.readVectorUint8Prefix(Fh),si.fromBuffer(t),t.readObject(Jm))}txOutHash(){const{l2ToL1Msgs:e}=this;if(0==e.length)return ug.alloc(32);const t=1==e.length?1:Math.ceil(Math.log2(e.length));let n=xe(e.map((e=>e.toBuffer())),ug.alloc(32),2**t),s=[];for(let e=0;e<t;e++){for(let e=0;e<n.length;e+=2)s[e/2]=dl(ug.concat([n[e],n[e+1]]));n=s,s=[]}return n[0]}static async random(e=3,t=1){const n=await Jm.random(1,1);return new mg(im.random(),km.random(),new si(Math.floor(1e5*Math.random())),uh(Di,si.random),uh(Li,si.random),uh(8,si.random),uh(Si,(()=>new Bh(si.random(),si.random()))),uh(Ni,(()=>new ip(uh(Pi,si.random)))),await async function(e,t,n=0){return await Promise.all(Array(e).fill(0).map((async(e,s)=>await t(s+n))))}(e*t,Fh.random),new si(n.getKernelLength()),n)}static empty(){return new mg(im.OK,km.zero(),si.ZERO,[],[],[],[],[],[],si.ZERO,Jm.empty())}isEmpty(){return 0===this.nullifiers.length}toString(){return Ds(this.toBuffer())}toPrefix(e,t){const n=ug.alloc(4);return n.writeUint8(e),n.writeUInt16BE(t,2),new si(n)}static fromPrefix(e){const t=e.toBuffer().subarray(-4);return{type:t[0],length:new si(t.subarray(-2)).toNumber()}}encodeFirstField(e,t){const n=ug.alloc(2);return n.writeUInt16BE(e,0),new si(ug.concat([m(fg,hg),ug.alloc(1),n,ug.alloc(1),ug.from([1]),ug.alloc(1),t.toBuffer()]))}static decodeFirstField(e){const t=e.toBuffer().subarray(-pg);return{length:new si(t.subarray(hg+1,hg+3)).toNumber(),revertCode:t[t.length-1]}}static isFirstField(e){const t=e.toBuffer();if(!t.subarray(0,e.size-pg).equals(ug.alloc(e.size-pg)))return!1;const n=t.subarray(-pg);return!(!new si(n.subarray(0,hg)).equals(new si(fg))||1!==n[n.length-3]||n[n.length-1]>4)}toBlobFields(){if(this.isEmpty())return[];const e=[];return e.push(si.ZERO),e.push(this.txHash.hash),e.push(new si(ug.concat([ug.from([2]),ug.alloc(1),this.transactionFee.toBuffer().subarray(3)]))),this.noteHashes.length&&(e.push(this.toPrefix(3,this.noteHashes.length)),e.push(...this.noteHashes)),this.nullifiers.length&&(e.push(this.toPrefix(4,this.nullifiers.length)),e.push(...this.nullifiers)),this.l2ToL1Msgs.length&&(e.push(this.toPrefix(5,this.l2ToL1Msgs.length)),e.push(...this.l2ToL1Msgs)),this.publicDataWrites.length&&(e.push(this.toPrefix(6,2*this.publicDataWrites.length)),e.push(...this.publicDataWrites.map((e=>[e.leafSlot,e.value])).flat())),this.privateLogs.length&&(e.push(this.toPrefix(7,this.privateLogs.length*Pi)),e.push(...this.privateLogs.map((e=>e.fields)).flat())),this.publicLogs.length&&(e.push(this.toPrefix(8,14*this.publicLogs.length)),e.push(...this.publicLogs.map((e=>e.toFields())).flat())),this.contractClassLogs.unrollLogs().length&&(e.push(this.toPrefix(9,this.contractClassLogs.unrollLogs().length)),e.push(...this.contractClassLogs.unrollLogs().map((e=>si.fromBuffer(e.getSiloedHash()))))),e[0]=this.encodeFirstField(e.length,this.revertCode),e}static fromBlobFields(e,t){const n=e=>{if(e.length)throw new Error("Invalid fields given to TxEffect.fromBlobFields(): Attempted to assign property twice.")},s=this.empty();if(!(e instanceof vi||e.length))return s;const i=vi.asReader(e),r=i.readField();if(!this.isFirstField(r))throw new Error("Invalid fields given to TxEffect.fromBlobFields(): First field invalid.");const{length:a,revertCode:o}=this.decodeFirstField(r);s.revertCode=im.fromField(new si(o)),s.txHash=new km(i.readField());const l=i.readField();for(s.transactionFee=si.fromBuffer(ug.concat([ug.alloc(3),l.toBuffer().subarray(3)]));!i.isFinished();){const{type:e,length:r}=this.fromPrefix(i.readField());switch(e){case 3:n(s.noteHashes),s.noteHashes=i.readFieldArray(r);break;case 4:n(s.nullifiers),s.nullifiers=i.readFieldArray(r);break;case 5:n(s.l2ToL1Msgs),s.l2ToL1Msgs=i.readFieldArray(r);break;case 6:{n(s.publicDataWrites);const e=i.readFieldArray(r);for(let t=0;t<r;t+=2)s.publicDataWrites.push(new Bh(e[t],e[t+1]));break}case 7:{n(s.privateLogs);const e=i.readFieldArray(r);for(let t=0;t<r;t+=Pi)s.privateLogs.push(ip.fromFields(e.slice(t,t+Pi)));break}case 8:{n(s.publicLogs);const e=i.readFieldArray(r);for(let t=0;t<r;t+=14)s.publicLogs.push(Fh.fromFields(e.slice(t,t+14)));break}case 9:if(n(s.contractClassLogs.functionLogs),!t)throw new Error("Tx effect has contractClassLogs logs, but they were not passed raw to .fromBlobFields()");this.checkInjectedLogs(t,i.readFieldArray(r)),s.contractClassLogs=t,s.contractClassLogsLength=new si(t.getKernelLength());break;default:throw new Error("Too many fields to decode given to TxEffect.fromBlobFields()")}}return s.contractClassLogs=!s.contractClassLogs.getTotalLogCount()&&t?t:s.contractClassLogs,s}static checkInjectedLogs(e,t){e.unrollLogs().forEach(((e,n)=>{const s=e.getSiloedHash();if(!si.fromBuffer(s).equals(t[n]))throw new Error(`Log hash mismatch when reconstructing tx effect. Expected: ${si.fromBuffer(s)}, Got: ${t[n]}`)}))}static from(e){return new mg(e.revertCode,e.txHash,e.transactionFee,e.noteHashes,e.nullifiers,e.l2ToL1Msgs,e.publicDataWrites,e.privateLogs,e.publicLogs,e.contractClassLogsLength,e.contractClassLogs)}static get schema(){return zs.object({revertCode:im.schema,txHash:km.schema,transactionFee:id.Fr,noteHashes:zs.array(id.Fr),nullifiers:zs.array(id.Fr),l2ToL1Msgs:zs.array(id.Fr),publicDataWrites:zs.array(Bh.schema),privateLogs:zs.array(ip.schema),publicLogs:zs.array(Fh.schema),contractClassLogsLength:id.Fr,contractClassLogs:Jm.schema}).transform(mg.from)}[f.inspect.custom](){return`TxEffect {\n      revertCode: ${this.revertCode},\n      txHash: ${this.txHash},\n      transactionFee: ${this.transactionFee},\n      note hashes: [${this.noteHashes.map((e=>e.toString())).join(", ")}],\n      nullifiers: [${this.nullifiers.map((e=>e.toString())).join(", ")}],\n      l2ToL1Msgs: [${this.l2ToL1Msgs.map((e=>e.toString())).join(", ")}],\n      publicDataWrites: [${this.publicDataWrites.map((e=>e.toString())).join(", ")}],\n      privateLogs: [${this.privateLogs.map((e=>e.toString())).join(", ")}],\n      publicLogs: [${this.publicLogs.map((e=>e.toString())).join(", ")}],\n      contractClassLogsLength: ${this.contractClassLogsLength},\n      contractClassLogs: ${_h(this.contractClassLogs)}\n     }`}static fromString(e){return mg.fromBuffer(Os(e))}}class gg{constructor(e){this.txEffects=e,e.forEach((e=>{if(e.isEmpty())throw new Error("Empty tx effect not allowed in Body")}))}static get schema(){return zs.object({txEffects:zs.array(mg.schema)}).transform((({txEffects:e})=>new gg(e)))}toBuffer(){return _i(this.txEffects.length,this.txEffects)}static fromBuffer(e){return new this(Js.asReader(e).readVector(mg))}toBlobFields(){let e=[];return this.txEffects.forEach((t=>{e=e.concat(t.toBlobFields())})),e}static fromBlobFields(e,t){const n=[];let s=0;for(;s!==e.length;){if(!mg.isFirstField(e[s]))throw new Error("Invalid fields given to Body.fromBlobFields(): First field invalid.");const t=mg.decodeFirstField(e[s]).length;n.push(e.slice(s,s+t)),s+=t}return new this(n.filter((e=>e.length)).map(((e,n)=>mg.fromBlobFields(e,t?.txLogs[n]))))}[f.inspect.custom](){return`Body {\n  txEffects: ${(0,f.inspect)(this.txEffects)},\n}`}get contractClassLogs(){const e=this.txEffects.map((e=>e.contractClassLogs));return new Vm(e)}static async random(e=4,t=3,n=1){const s=await Ee(e,(()=>mg.random(t,n)));return new gg(s)}static empty(){return new gg([])}}var _g=i(8891).Buffer;class bg{constructor(e,t,n){this.z=e,this.y=t,this.kzgCommitment=n}static empty(){return new bg(si.ZERO,0n,[si.ZERO,si.ZERO])}isEmpty(){return this.z.isZero()&&0n==this.y&&this.kzgCommitment[0].isZero()&&this.kzgCommitment[1].isZero()}static fromBuffer(e){const t=Js.asReader(e);return new bg(si.fromBuffer(t),p(t.readBytes(32)),t.readArray(2,si))}toBuffer(){return _i(...bg.getFields(this))}static fromFields(e){const t=vi.asReader(e);return new bg(t.readField(),(n=t.readFieldArray(3),BigInt(n[2].toString().concat(n[1].toString().substring(2),n[0].toString().substring(2)))),t.readFieldArray(2));var n}toFields(){const e=function(e,t=!1){const n=e.toString(16),s=n.length%2==0?n.length:n.length+1;return`0x${n.padStart(t?64:s,"0")}`}(this.y,!0),t=[si.fromString("0x"+e.substring(36)),si.fromString("0x"+e.substring(6,36)),si.fromString(e.substring(0,6))];return[this.z,...t,...this.kzgCommitment]}static getFields(e){return[e.z,e.y,e.kzgCommitment]}static fromBlob(e){return new bg(e.challengeZ,p(e.evaluationY),e.commitmentToFields())}getBlobHash(){const e=cl(this.commitmentToBuffer());return e[0]=1,e}commitmentToBuffer(){return _g.concat([this.kzgCommitment[0].toBuffer().subarray(1),this.kzgCommitment[1].toBuffer().subarray(-17)])}equals(e){return this.z.equals(e.z)&&this.y==e.y&&this.kzgCommitment[0].equals(e.kzgCommitment[0])&&this.kzgCommitment[1].equals(e.kzgCommitment[1])}}class yg{constructor(e){this.inner=e}static empty(){return new yg(uh(3,bg.empty))}static fromBuffer(e){const t=Js.asReader(e);return new yg(t.readArray(3,bg))}toBuffer(){return _i(...yg.getFields(this))}static fromFields(e){const t=vi.asReader(e);return new yg(t.readArray(3,bg))}toFields(){return this.inner.map((e=>e.toFields())).flat()}static getFields(e){return[e.inner]}static fromBlobs(e){const t=uh(3,bg.empty);if(e.length>3)throw new Error(`Can only fit 3 in one BlockBlobPublicInputs instance (given ${e.length})`);return e.forEach(((e,n)=>{t[n]=bg.fromBlob(e)})),new yg(t)}getBlobsHash(){return dl(_i(this.inner.map((e=>e.isEmpty()?_g.alloc(0):e.getBlobHash()))))}toString(){const e=this.inner.filter((e=>!e.isEmpty()));let t=_g.alloc(1);return t.writeUInt8(e.length),e.forEach((e=>{t=_g.concat([t,e.z.toBuffer(),m(e.y,32),e.commitmentToBuffer()])})),t.toString("hex")}}class Ag{constructor(e,t,n){this.sponge=e,this.fields=t,this.expectedFields=n}static fromBuffer(e){const t=Js.asReader(e);return new Ag(t.readObject(wg),t.readNumber(),t.readNumber())}toBuffer(){return _i(this.sponge,this.fields,this.expectedFields)}static getFields(e){return[e.sponge,e.fields,e.expectedFields]}toFields(){return gi(...Ag.getFields(this))}static fromFields(e){const t=vi.asReader(e);return new Ag(t.readObject(wg),t.readField().toNumber(),t.readField().toNumber())}clone(){return Ag.fromBuffer(this.toBuffer())}async absorb(e){if(this.fields+e.length>this.expectedFields)throw new Error(`Attempted to fill spongeblob with ${this.fields+e.length}, but it has a max of ${this.expectedFields}`);await this.sponge.absorb(e),this.fields+=e.length}async squeeze(){return this.fields!=this.expectedFields&&await this.sponge.absorb([si.ONE]),this.sponge.squeeze()}static empty(){return new Ag(wg.empty(),0,0)}static init(e){return new Ag(wg.init(e),0,e)}}class wg{constructor(e,t,n,s){this.cache=e,this.state=t,this.cacheSize=n,this.squeezeMode=s}static fromBuffer(e){const t=Js.asReader(e);return new wg(t.readArray(3,si),t.readArray(4,si),t.readNumber(),t.readBoolean())}toBuffer(){return _i(this.cache,this.state,this.cacheSize,this.squeezeMode)}static getFields(e){return[e.cache,e.state,e.cacheSize,e.squeezeMode]}toFields(){return gi(...wg.getFields(this))}static fromFields(e){const t=vi.asReader(e);return new wg(t.readFieldArray(3),t.readFieldArray(4),t.readField().toNumber(),t.readBoolean())}static empty(){return new wg(uh(3,(()=>si.ZERO)),uh(4,(()=>si.ZERO)),0,!1)}static init(e){const t=new si(e).mul(new si(BigInt("18446744073709551616"))),n=wg.empty();return n.state[3]=t,n}async performDuplex(){for(let e=0;e<this.cache.length;e++)e<this.cacheSize&&(this.state[e]=this.state[e].add(this.cache[e]));const e=await async function(e){const t=gi(e);return(await c.initSingleton()).poseidon2Permutation(t.map((e=>new d(e.toBuffer())))).map((e=>si.fromBuffer(yi.from(e.toBuffer()))))}(this.state);this.state=[e[0],e[1],e[2],e[3]]}async absorb(e){if(this.squeezeMode)throw new Error("Poseidon sponge is not able to absorb more inputs.");for(const t of e)this.cacheSize==this.cache.length?(await this.performDuplex(),this.cache[0]=t,this.cacheSize=1):this.cache[this.cacheSize++]=t}async squeeze(){if(this.squeezeMode)throw new Error("Poseidon sponge has already been squeezed.");return await this.performDuplex(),this.squeezeMode=!0,this.state[0]}}class xg{constructor(e,t,n){this.publicInputs=e,this.proof=t,this.vkData=n}static fromBuffer(e){const t=Js.asReader(e);return new xg(t.readObject(Ch),qp.fromBuffer(t),t.readObject(am))}toBuffer(){return _i(this.publicInputs,this.proof,this.vkData)}static empty(){return new xg(Ch.empty(),Kp(4154),am.empty())}}class vg{constructor(e,t,n,s){this.lastArchive=e,this.vkTreeRoot=t,this.protocolContractTreeRoot=n,this.globalVariables=s}static from(e){return new vg(...vg.getFields(e))}static fromBuffer(e){const t=Js.asReader(e);return new vg(t.readObject(Mh),si.fromBuffer(t),si.fromBuffer(t),t.readObject(bh))}static getFields(e){return[e.lastArchive,e.vkTreeRoot,e.protocolContractTreeRoot,e.globalVariables]}static empty(){return new vg(Mh.zero(),si.ZERO,si.ZERO,bh.empty())}toBuffer(){return _i(...vg.getFields(this))}}class Eg{constructor(e,t,n,s,i,r,a,o,l,c){this.rollupType=e,this.numTxs=t,this.constants=n,this.start=s,this.end=i,this.startSpongeBlob=r,this.endSpongeBlob=a,this.outHash=o,this.accumulatedFees=l,this.accumulatedManaUsed=c}static empty(){return new Eg(ah.Base,0,vg.empty(),Vh.empty(),Vh.empty(),Ag.empty(),Ag.empty(),si.zero(),si.zero(),si.zero())}static fromBuffer(e){const t=Js.asReader(e);return new Eg(t.readNumber(),t.readNumber(),t.readObject(vg),t.readObject(Vh),t.readObject(Vh),t.readObject(Ag),t.readObject(Ag),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t))}toBuffer(){return _i(this.rollupType,this.numTxs,this.constants,this.start,this.end,this.startSpongeBlob,this.endSpongeBlob,this.outHash,this.accumulatedFees,this.accumulatedManaUsed)}toString(){return Ds(this.toBuffer())}static fromString(e){return Eg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Eg)}}class Mg{constructor(e,t,n,s,i,r,a,o,l){this.nullifierPredecessorPreimages=e,this.nullifierPredecessorMembershipWitnesses=t,this.sortedNullifiers=n,this.sortedNullifierIndexes=s,this.noteHashSubtreeSiblingPath=i,this.nullifierSubtreeSiblingPath=r,this.feeWriteLowLeafPreimage=a,this.feeWriteLowLeafMembershipWitness=o,this.feeWriteSiblingPath=l}static from(e){return new Mg(...Mg.getFields(e))}static getFields(e){return[e.nullifierPredecessorPreimages,e.nullifierPredecessorMembershipWitnesses,e.sortedNullifiers,e.sortedNullifierIndexes,e.noteHashSubtreeSiblingPath,e.nullifierSubtreeSiblingPath,e.feeWriteLowLeafPreimage,e.feeWriteLowLeafMembershipWitness,e.feeWriteSiblingPath]}toBuffer(){return _i(...Mg.getFields(this))}static fromBuffer(e){const t=Js.asReader(e);return new Mg(t.readArray(Li,ch),t.readArray(Li,{fromBuffer:e=>_p.fromBuffer(e,Oi)}),t.readArray(Li,si),t.readNumbers(Li),t.readArray(34,si),t.readArray(34,si),t.readObject(Ip),_p.fromBuffer(t,Ci),t.readArray(Ci,si))}static empty(){return new Mg(uh(Li,ch.empty),uh(Li,(()=>_p.empty(Oi))),uh(Li,si.zero),uh(Li,(()=>0)),uh(34,si.zero),uh(34,si.zero),Ip.empty(),_p.empty(Ci),uh(Ci,si.zero))}}class zg{constructor(e,t,n,s,i,r,a,o,l){this.nullifierPredecessorPreimages=e,this.nullifierPredecessorMembershipWitnesses=t,this.sortedNullifiers=n,this.sortedNullifierIndexes=s,this.noteHashSubtreeSiblingPath=i,this.nullifierSubtreeSiblingPath=r,this.lowPublicDataWritesPreimages=a,this.lowPublicDataWritesMembershipWitnesses=o,this.publicDataTreeSiblingPaths=l}static from(e){return new zg(...zg.getFields(e))}static getFields(e){return[e.nullifierPredecessorPreimages,e.nullifierPredecessorMembershipWitnesses,e.sortedNullifiers,e.sortedNullifierIndexes,e.noteHashSubtreeSiblingPath,e.nullifierSubtreeSiblingPath,e.lowPublicDataWritesPreimages,e.lowPublicDataWritesMembershipWitnesses,e.publicDataTreeSiblingPaths]}toBuffer(){return _i(...zg.getFields(this))}static fromBuffer(e){const t=Js.asReader(e);return new zg(t.readArray(Li,ch),t.readArray(Li,{fromBuffer:e=>_p.fromBuffer(e,Oi)}),t.readArray(Li,si),t.readNumbers(Li),t.readArray(34,si),t.readArray(34,si),t.readArray(Si,Ip),t.readArray(Si,{fromBuffer:e=>_p.fromBuffer(e,Ci)}),t.readArray(Si,{fromBuffer:e=>Js.asReader(e).readArray(Ci,si)}))}static empty(){return new zg(uh(Li,ch.empty),uh(Li,(()=>_p.empty(Oi))),uh(Li,si.zero),uh(Li,(()=>0)),uh(34,si.zero),uh(34,si.zero),uh(Si,Ip.empty),uh(Si,(()=>_p.empty(Ci))),uh(Si,(()=>uh(Ci,si.zero))))}}class Bg{constructor(e,t,n,s,i,r){this.start=e,this.startSpongeBlob=t,this.stateDiffHints=n,this.feePayerFeeJuiceBalanceReadHint=s,this.archiveRootMembershipWitness=i,this.constants=r}static from(e){return new Bg(...Bg.getFields(e))}static getFields(e){return[e.start,e.startSpongeBlob,e.stateDiffHints,e.feePayerFeeJuiceBalanceReadHint,e.archiveRootMembershipWitness,e.constants]}toBuffer(){return _i(...Bg.getFields(this))}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new Bg(t.readObject(Vh),t.readObject(Ag),t.readObject(Mg),t.readObject(rm),_p.fromBuffer(t,Fi),t.readObject(vg))}static fromString(e){return Bg.fromBuffer(Os(e))}static empty(){return new Bg(Vh.empty(),Ag.empty(),Mg.empty(),rm.empty(),_p.empty(Fi),vg.empty())}}class Fg{constructor(e,t,n,s,i){this.start=e,this.startSpongeBlob=t,this.stateDiffHints=n,this.archiveRootMembershipWitness=s,this.constants=i}static from(e){return new Fg(...Fg.getFields(e))}static getFields(e){return[e.start,e.startSpongeBlob,e.stateDiffHints,e.archiveRootMembershipWitness,e.constants]}toBuffer(){return _i(...Fg.getFields(this))}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new Fg(t.readObject(Vh),t.readObject(Ag),t.readObject(zg),_p.fromBuffer(t,Fi),t.readObject(vg))}static fromString(e){return Fg.fromBuffer(Os(e))}static empty(){return new Fg(Vh.empty(),Ag.empty(),zg.empty(),_p.empty(Fi),vg.empty())}}class kg{constructor(e,t,n,s,i,r,a,o,l,c,d,u){this.previousArchive=e,this.newArchive=t,this.previousBlockHash=n,this.endBlockHash=s,this.startGlobalVariables=i,this.endGlobalVariables=r,this.outHash=a,this.fees=o,this.vkTreeRoot=l,this.protocolContractTreeRoot=c,this.proverId=d,this.blobPublicInputs=u}static fromBuffer(e){const t=Js.asReader(e);return new kg(t.readObject(Mh),t.readObject(Mh),si.fromBuffer(t),si.fromBuffer(t),t.readObject(bh),t.readObject(bh),si.fromBuffer(t),t.readArray(Ii,Cg),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),t.readArray(Ii,yg))}toBuffer(){return _i(this.previousArchive,this.newArchive,this.previousBlockHash,this.endBlockHash,this.startGlobalVariables,this.endGlobalVariables,this.outHash,this.fees,this.vkTreeRoot,this.protocolContractTreeRoot,this.proverId,this.blobPublicInputs)}toString(){return Ds(this.toBuffer())}static fromString(e){return kg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(kg)}}class Cg{constructor(e,t){this.recipient=e,this.value=t}static fromBuffer(e){const t=Js.asReader(e);return new Cg(t.readObject(Nc),si.fromBuffer(t))}toBuffer(){return _i(this.recipient,this.value)}static getFields(e){return[e.recipient,e.value]}toFields(){return gi(...Cg.getFields(this))}isEmpty(){return this.value.isZero()&&this.recipient.isZero()}toFriendlyJSON(){return this.isEmpty()?{}:{recipient:this.recipient.toString(),value:this.value.toString()}}static random(){return new Cg(Nc.random(),si.random())}}class Og{constructor(e,t,n,s){this.blockRootOrBlockMergePublicInputs=e,this.proof=t,this.vk=n,this.vkWitness=s}toBuffer(){return _i(this.blockRootOrBlockMergePublicInputs,this.proof,this.vk,this.vkWitness)}static fromBuffer(e){const t=Js.asReader(e);return new Og(t.readObject(kg),qp.fromBuffer(t,ji),t.readObject(Lp),_p.fromBuffer(t,6))}}class Dg{constructor(e){this.previousRollupData=e}toBuffer(){return _i(this.previousRollupData)}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new Dg([t.readObject(Og),t.readObject(Og)])}static fromString(e){return Dg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Dg)}}class Lg{constructor(e,t,n,s){this.baseOrMergeRollupPublicInputs=e,this.proof=t,this.vk=n,this.vkWitness=s}toBuffer(){return _i(this.baseOrMergeRollupPublicInputs,this.proof,this.vk,this.vkWitness)}static fromBuffer(e){const t=Js.asReader(e);return new Lg(t.readObject(Eg),qp.fromBuffer(t,ji),t.readObject(Lp),_p.fromBuffer(t,6))}}class Tg{constructor(e,t,n,s,i){this.l1ToL2Roots=e,this.l1ToL2MessageSubtreeSiblingPath=t,this.newArchiveSiblingPath=n,this.previousBlockHeader=s,this.proverId=i}toBuffer(){return _i(...Tg.getFields(this))}toString(){return Ds(this.toBuffer())}static from(e){return new Tg(...Tg.getFields(e))}static getFields(e){return[e.l1ToL2Roots,e.l1ToL2MessageSubtreeSiblingPath,e.newArchiveSiblingPath,e.previousBlockHeader,e.proverId]}static fromBuffer(e){const t=Js.asReader(e);return new Tg($p.fromBuffer(t,459),t.readArray(35,si),t.readArray(Fi,si),Kh.fromBuffer(t),si.fromBuffer(t))}static fromString(e){return Tg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Tg)}}class Sg{constructor(e,t,n){this.blobFields=e,this.blobCommitments=t,this.blobsHash=n}toBuffer(){return _i(...Sg.getFields(this))}toString(){return Ds(this.toBuffer())}static from(e){return new Sg(...Sg.getFields(e))}static getFields(e){return[e.blobFields,e.blobCommitments,e.blobsHash]}static fromBuffer(e){const t=Js.asReader(e);return new Sg(Array.from({length:12288},(()=>si.fromBuffer(t))),t.readArray(3,{fromBuffer:()=>t.readArray(2,si)}),si.fromBuffer(t))}static fromString(e){return Sg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Sg)}}class Ng{constructor(e,t,n){this.previousRollupData=e,this.data=t,this.blobData=n}toBuffer(){return _i(...Ng.getFields(this))}toString(){return Ds(this.toBuffer())}static from(e){return new Ng(...Ng.getFields(e))}static getFields(e){return[e.previousRollupData,e.data,e.blobData]}static fromBuffer(e){const t=Js.asReader(e);return new Ng([t.readObject(Lg),t.readObject(Lg)],t.readObject(Tg),t.readObject(Sg))}static fromString(e){return Ng.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Ng)}}class Pg{constructor(e,t,n){this.previousRollupData=e,this.data=t,this.blobData=n}toBuffer(){return _i(...Pg.getFields(this))}toString(){return Ds(this.toBuffer())}static from(e){return new Pg(...Pg.getFields(e))}static getFields(e){return[e.previousRollupData,e.data,e.blobData]}static fromBuffer(e){const t=Js.asReader(e);return new Pg([t.readObject(Lg)],t.readObject(Tg),t.readObject(Sg))}static fromString(e){return Pg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Pg)}}class Ig{constructor(e,t,n){this.data=e,this.constants=t,this.isPadding=n}toBuffer(){return _i(...Ig.getFields(this))}toString(){return Ds(this.toBuffer())}static from(e){return new Ig(...Ig.getFields(e))}static getFields(e){return[e.data,e.constants,e.isPadding]}static fromBuffer(e){const t=Js.asReader(e);return new Ig(t.readObject(Tg),t.readObject(vg),t.readBoolean())}static fromString(e){return Ig.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Ig)}}class Yg{constructor(e){this.previousRollupData=e}toBuffer(){return _i(this.previousRollupData)}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new Yg([t.readObject(Lg),t.readObject(Lg)])}static fromString(e){return Yg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Yg)}}class Qg{constructor(e,t,n){this.publicInputs=e,this.proof=t,this.vkData=n}static empty(){return new Qg(dp.empty(),Kp(ji),am.empty())}static fromBuffer(e){const t=Js.asReader(e);return new Qg(t.readObject(dp),qp.fromBuffer(t,ji),t.readObject(am))}toBuffer(){return _i(this.publicInputs,this.proof,this.vkData)}}class jg{constructor(e,t){this.tubeData=e,this.hints=t}static from(e){return new jg(...jg.getFields(e))}static getFields(e){return[e.tubeData,e.hints]}static fromBuffer(e){const t=Js.asReader(e);return new jg(t.readObject(Qg),t.readObject(Bg))}toBuffer(){return _i(...jg.getFields(this))}static fromString(e){return jg.fromBuffer(Os(e))}toString(){return Ds(this.toBuffer())}static empty(){return new jg(Qg.empty(),Bg.empty())}toJSON(){return this.toBuffer()}static get schema(){return Qs(jg)}}class Hg{constructor(e,t,n){this.publicInputs=e,this.proof=t,this.vkData=n}static empty(){return new Hg(jp.empty(),Kp(ji),am.empty())}static fromBuffer(e){const t=Js.asReader(e);return new Hg(t.readObject(jp),qp.fromBuffer(t,ji),t.readObject(am))}toBuffer(){return _i(this.publicInputs,this.proof,this.vkData)}}class Ug{constructor(e,t,n){this.tubeData=e,this.avmProofData=t,this.hints=n}static from(e){return new Ug(...Ug.getFields(e))}static getFields(e){return[e.tubeData,e.avmProofData,e.hints]}static fromBuffer(e){const t=Js.asReader(e);return new Ug(t.readObject(Hg),t.readObject(xg),t.readObject(Fg))}toBuffer(){return _i(...Ug.getFields(this))}static fromString(e){return Ug.fromBuffer(Os(e))}toString(){return Ds(this.toBuffer())}static empty(){return new Ug(Hg.empty(),xg.empty(),Fg.empty())}toJSON(){return this.toBuffer()}static get schema(){return Qs(Ug)}}class Rg{constructor(e,t){this.previousRollupData=e,this.proverId=t}toBuffer(){return _i(...Rg.getFields(this))}toString(){return Ds(this.toBuffer())}static from(e){return new Rg(...Rg.getFields(e))}static getFields(e){return[e.previousRollupData,e.proverId]}static fromBuffer(e){const t=Js.asReader(e);return new Rg([t.readObject(Og),t.readObject(Og)],si.fromBuffer(t))}static fromString(e){return Rg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Rg)}}class Gg{constructor(e,t,n,s,i,r,a,o,l,c,d,u){this.previousArchive=e,this.endArchive=t,this.previousBlockHash=n,this.endBlockHash=s,this.endTimestamp=i,this.endBlockNumber=r,this.outHash=a,this.fees=o,this.vkTreeRoot=l,this.protocolContractTreeRoot=c,this.proverId=d,this.blobPublicInputs=u}static getFields(e){return[e.previousArchive,e.endArchive,e.previousBlockHash,e.endBlockHash,e.endTimestamp,e.endBlockNumber,e.outHash,e.fees,e.vkTreeRoot,e.protocolContractTreeRoot,e.proverId,e.blobPublicInputs]}toBuffer(){return _i(...Gg.getFields(this))}toFields(){return gi(...Gg.getFields(this))}static from(e){return new Gg(...Gg.getFields(e))}static fromBuffer(e){const t=Js.asReader(e);return new Gg(t.readObject(Mh),t.readObject(Mh),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),t.readArray(Ii,Cg),si.fromBuffer(t),si.fromBuffer(t),si.fromBuffer(t),t.readArray(Ii,yg))}toString(){return Ds(this.toBuffer())}static fromString(e){return Gg.fromBuffer(Os(e))}toJSON(){return this.toBuffer()}static get schema(){return Qs(Gg)}static random(){return new Gg(Mh.random(),Mh.random(),si.random(),si.random(),si.random(),si.random(),si.random(),uh(Ii,Cg.random),si.random(),si.random(),si.random(),uh(Ii,yg.empty))}}function Zg(e){return new si(BigInt(e))}function Jg(e=1){return new Mh(new si(e),e)}i(8891).Buffer;class Xg{constructor(e,t,n){this.archive=e,this.header=t,this.body=n}static get schema(){return zs.object({archive:Mh.schema,header:Kh.schema,body:gg.schema}).transform((({archive:e,header:t,body:n})=>new Xg(e,t,n)))}static fromBuffer(e){const t=Js.asReader(e),n=t.readObject(Kh),s=t.readObject(Mh),i=t.readObject(gg);return new Xg(s,n,i)}toBuffer(){return _i(this.header,this.archive,this.body)}static fromString(e){return Xg.fromBuffer(Os(e))}toString(){return Ds(this.toBuffer())}static async random(e,t=4,n=3,s=1,i=void 0,r=void 0){const a=await gg.random(t,n,s);return new Xg(Jg(e+1),function(e=0,t,n,s,i){return new Kh(Jg(e+256),function(e=0,t,n){return new Wh(new si(t||e),m(BigInt(e+256),Xh),n??m(BigInt(e+512),Xh),m(BigInt(e+768),Xh))}(e+512,t,i),function(e=0){return new qh(Jg(e),function(e=0){return new Vh(Jg(e),Jg(e+1),Jg(e+2))}(e+1))}(e+1536),function(e=1,t,n){return new bh(new si(e),new si(e+1),new si(t??e+2),new si(n??e+3),new si(e+4),Nc.fromField(new si(e+5)),Gc.fromField(new si(e+6)),new ph(new si(e+7),new si(e+8)))}(e+=1792,n,s??n),Zg(e+2048),Zg(e+2304))}(0,t,e,r??e,i),a)}static empty(){return new Xg(Mh.zero(),Kh.empty(),gg.empty())}get number(){return Number(this.header.globalVariables.blockNumber.toBigInt())}hash(){return this.header.hash()}getPublicInputsHash(){return function(e){const t=_i(e);return si.fromBuffer(dl(t))}([this.header.globalVariables,Mh.zero(),Mh.zero(),Mh.zero(),Mh.zero(),this.header.lastArchive,this.header.state.partial.noteHashTree,this.header.state.partial.nullifierTree,this.header.state.partial.publicDataTree,this.header.state.l1ToL2MessageTree,this.archive])}getStartStateHash(){return cl(_i(new si(Number(this.header.globalVariables.blockNumber.toBigInt())-1),Mh.zero(),Mh.zero(),Mh.zero(),Mh.zero(),this.header.lastArchive))}getEndStateHash(){return cl(_i(this.header.globalVariables.blockNumber,this.header.state.partial.noteHashTree,this.header.state.partial.nullifierTree,this.header.state.partial.publicDataTree,this.header.state.l1ToL2MessageTree,this.archive))}getStats(){const e={privateLogCount:this.body.txEffects.reduce(((e,t)=>e+t.privateLogs.length),0),publicLogCount:this.body.txEffects.reduce(((e,t)=>e+t.publicLogs.length),0),contractClassLogCount:this.body.txEffects.reduce(((e,t)=>e+t.contractClassLogs.getTotalLogCount()),0),contractClassLogSize:this.body.txEffects.reduce(((e,t)=>e+t.contractClassLogs.getSerializedLength()),0)};return{txCount:this.body.txEffects.length,blockNumber:this.number,blockTimestamp:this.header.globalVariables.timestamp.toNumber(),...e}}}const Wg=zs.union([zs.object({number:zs.literal(0),hash:zs.undefined()}),zs.object({number:zs.number(),hash:zs.string()})]),Vg=zs.object({latest:Wg,proven:Wg,finalized:Wg});class qg extends il{constructor(e){super(e)}static random(){return new qg(si.random().toBuffer())}static get schema(){return id.BufferHex.transform((e=>new qg(e)))}static zero(){return new qg(il.ZERO.toBuffer())}static fromField(e){return new qg(e.toBuffer())}}var Kg;!function(e){e.DROPPED="dropped",e.PENDING="pending",e.SUCCESS="success",e.APP_LOGIC_REVERTED="app_logic_reverted",e.TEARDOWN_REVERTED="teardown_reverted",e.BOTH_REVERTED="both_reverted"}(Kg||(Kg={}));class $g{constructor(e,t,n,s,i,r,a){this.txHash=e,this.status=t,this.error=n,this.transactionFee=s,this.blockHash=i,this.blockNumber=r,this.debugInfo=a}static empty(){return new $g(km.zero(),Kg.DROPPED,"")}static get schema(){return zs.object({txHash:km.schema,status:zs.nativeEnum(Kg),error:zs.string(),blockHash:qg.schema.optional(),blockNumber:zs.number().optional(),transactionFee:id.BigInt.optional(),debugInfo:e_.optional()}).transform($g.from)}static from(e){return new $g(e.txHash,e.status,e.error,e.transactionFee,e.blockHash,e.blockNumber,e.debugInfo)}static statusFromRevertCode(e){if(e.equals(im.OK))return Kg.SUCCESS;if(e.equals(im.APP_LOGIC_REVERTED))return Kg.APP_LOGIC_REVERTED;if(e.equals(im.TEARDOWN_REVERTED))return Kg.TEARDOWN_REVERTED;if(e.equals(im.BOTH_REVERTED))return Kg.BOTH_REVERTED;throw new Error(`Unknown revert code: ${e}`)}}const e_=zs.object({noteHashes:zs.array(id.Fr),nullifiers:zs.array(id.Fr),publicDataWrites:zs.array(Bh.schema),l2ToL1Msgs:zs.array(id.Fr)});zs.function().args().returns(id.EthAddress),zs.function().args().returns(id.EthAddress),zs.function().args().returns(id.Integer),zs.function().args().returns(id.Integer),zs.function().args().returns(id.Integer.optional()),zs.function().args(id.Integer).returns(Xg.schema.optional()),zs.function().args(zs.union([id.Integer,zs.literal("latest")])).returns(Kh.schema.optional()),zs.function().args(id.Integer,id.Integer,Is(zs.boolean())).returns(zs.array(Xg.schema)),zs.function().args(km.schema).returns(dg(mg.schema).optional()),zs.function().args(km.schema).returns($g.schema.optional()),zs.function().args().returns(id.BigInt),zs.function().args().returns(id.BigInt),zs.function().args(id.BigInt).returns(zs.array(Xg.schema)),zs.function().args(id.BigInt).returns(zs.boolean()),zs.function().args().returns(Vg),zs.function().args(zs.number(),zs.number()).returns(zs.array(ip.schema)),zs.function().args(zs.array(id.Fr)).returns(zs.array(zs.array(Hm.schema))),zs.function().args(zs.number(),zs.array(id.Fr)).returns(zs.array(Is(dg(id.BigInt)))),zs.function().args(qm).returns(jm),zs.function().args(qm).returns(Qm),zs.function().args(id.AztecAddress,id.FunctionSelector).returns(fu.optional()),zs.function().args(id.Fr).returns(bu.optional()),zs.function().args(id.Fr).returns(id.Fr),zs.function().args(id.AztecAddress).returns(yu.optional()),zs.function().args().returns(zs.array(id.Fr)),zs.function().args(id.AztecAddress,zs.array(zs.string())).returns(zs.void()),zs.function().args(id.BigInt).returns(zs.array(id.Fr)),zs.function().args(id.Fr).returns(id.BigInt.optional()),zs.function().args(bu).returns(zs.void()),zs.function().args(id.AztecAddress,id.FunctionSelector).returns(Is(zs.string())),zs.function().args().returns(cg),Error;class t_ extends Error{constructor(){super(...arguments),this.name="TimeoutError"}}function n_(e,t){return new Promise((n=>setTimeout((()=>n(t)),e)))}Error;class s_{constructor(){this.start=performance?performance.now():Date.now()}us(){return 1e3*this.ms()}ms(){return(performance?performance.now():Date.now())-this.start}s(){return this.ms()/1e3}}class i_ extends Error{}async function r_(e,t="",n=0,s=1){const i=new s_;for(;;){const r=await e();if(r)return r;if(await n_(1e3*s),n&&i.s()>n)throw new t_(t?`Timeout awaiting ${t}`:"Timeout")}}const a_=Pe("json-rpc:json_rpc_client");async function o_(e,t,n,s,i={},r=!1){let a,o;a_.debug((0,f.format)("JsonRpcClient.fetch",e,t,"->",n));try{a=s?await fetch(`${e}/${t}`,{method:"POST",body:_h(n),headers:{"content-type":"application/json",...i}}):await fetch(e,{method:"POST",body:_h({...n,method:t}),headers:{"content-type":"application/json",...i}})}catch(n){const s=`Error fetching from host ${e} with method ${t}: ${(0,f.inspect)(n)}`;throw new Error(s)}try{o=await a.json()}catch(e){if(!a.ok)throw new Error(a.statusText);throw new Error(`Failed to parse body as JSON: ${a.text()}`)}if(!a.ok){const n=`Error ${a.status} from server ${e} on ${t}: ${o.error.message}`;throw r||a.status>=400&&a.status<500?new i_(n):new Error(n)}return o}var l_,c_,d_,u_,f_;(c_=l_||(l_={}))[c_.NULLIFIER_TREE=0]="NULLIFIER_TREE",c_[c_.NOTE_HASH_TREE=1]="NOTE_HASH_TREE",c_[c_.PUBLIC_DATA_TREE=2]="PUBLIC_DATA_TREE",c_[c_.L1_TO_L2_MESSAGE_TREE=3]="L1_TO_L2_MESSAGE_TREE",c_[c_.ARCHIVE=4]="ARCHIVE",l_.NOTE_HASH_TREE,l_.ARCHIVE,l_.L1_TO_L2_MESSAGE_TREE,l_.NULLIFIER_TREE,l_.PUBLIC_DATA_TREE;class h_{}function p_(e){return"/aztec/"+e+"/0.1.0"}(f_=d_||(d_={}))[f_.Full=0]="Full",f_[f_.Prover=1]="Prover",function(e){e.tx="tx",e.block_proposal="block_proposal",e.block_attestation="block_attestation",e.epoch_proof_quote="epoch_proof_quote"}(u_||(u_={}));var m_,g_=i(7563);class __{constructor(e,t,n,s,i){if(this.epochToProve=e,this.validUntilSlot=t,this.bondAmount=n,this.prover=s,this.basisPointFee=i,i<0||i>1e4)throw new Error(`Invalid basisPointFee ${i}`)}static empty(){return new __(0n,0n,0n,Nc.ZERO,0)}static random(){return new __(BigInt(Math.floor(1e3*Math.random())),BigInt(Math.floor(1e6*Math.random())),BigInt(Math.floor(1e9*Math.random())),Nc.random(),Math.floor(1e4*Math.random()))}static getFields(e){return[e.epochToProve,e.validUntilSlot,e.bondAmount,e.prover,e.basisPointFee]}toBuffer(){return this.asBuffer||(this.asBuffer=_i(...__.getFields(this)),this.size=this.asBuffer.length),this.asBuffer}static fromBuffer(e){const t=Js.asReader(e);return new __(t.readUInt256(),t.readUInt256(),t.readUInt256(),t.readObject(Nc),t.readNumber())}static from(e){return new __(e.epochToProve,e.validUntilSlot,e.bondAmount,e.prover,e.basisPointFee)}toJSON(){return g_(this,"asBuffer","size")}static get schema(){return zs.object({epochToProve:id.BigInt,validUntilSlot:id.BigInt,bondAmount:id.BigInt,prover:id.EthAddress,basisPointFee:id.Integer}).transform(__.from)}toViemArgs(){return{epochToProve:this.epochToProve,validUntilSlot:this.validUntilSlot,bondAmount:this.bondAmount,prover:this.prover.toString(),basisPointFee:this.basisPointFee}}toInspect(){return{epochToProve:Number(this.epochToProve),validUntilSlot:this.validUntilSlot.toString(),bondAmount:this.bondAmount.toString(),prover:this.prover.toString(),basisPointFee:this.basisPointFee}}getSize(){return this.size||this.toBuffer(),this.size}[f.inspect.custom](){return`EpochProofQuotePayload { epochToProve: ${this.epochToProve}, validUntilSlot: ${this.validUntilSlot}, bondAmount: ${this.bondAmount}, prover: ${this.prover}, basisPointFee: ${this.basisPointFee} }`}}class b_ extends h_{constructor(e,t){super(),this.payload=e,this.signature=t}static empty(){return new b_(__.empty(),Pc.empty())}static random(){return new b_(__.random(),Pc.random())}static getFields(e){return[e.payload,e.signature]}p2pMessageIdentifier(){return Promise.resolve(new il(rl(this.signature.toBuffer())))}toBuffer(){return _i(...b_.getFields(this))}static fromBuffer(e){const t=Js.asReader(e);return new b_(t.readObject(__),t.readObject(Pc))}static get schema(){return zs.object({payload:__.schema,signature:Pc.schema}).transform((({payload:e,signature:t})=>new b_(e,t)))}static new(e,t,n){if(!t.prover.equals(n.address))throw new Error(`Quote prover does not match signer. Prover [${t.prover}], Signer [${n.address}]`);const s=n.sign(e);return new b_(t,s)}toViemArgs(){return{quote:this.payload.toViemArgs(),signature:this.signature.toViemSignature()}}toInspect(){return{signature:this.signature.toString(),...this.payload.toInspect()}}getSize(){return this.payload.getSize()+this.signature.getSize()}}b_.p2pTopic=p_(u_.epoch_proof_quote);class y_{constructor(e,t){this.pathSize=e,this.data=function(e,t){if(e.length!==t)throw new Error(`Wrong 'fixed array' size. Expected ${t}, got ${e.length}.`);return e}(t,e)}static get schema(){return id.Buffer.transform((e=>y_.fromBuffer(e)))}static schemaFor(e){return id.Buffer.transform((e=>y_.fromBuffer(e))).refine((t=>t.pathSize===e),(t=>({message:`Expected sibling path size ${e} but got ${t.pathSize}`})))}toJSON(){return this.toBuffer()}static ZERO(e,t,n){const s=[];let i=t;for(let t=0;t<e;++t)s.push(i),i=n.hash(i,i);return new y_(e,s)}static random(e){const t=Array.from({length:e},(()=>si.random().toBuffer()));return new y_(e,t)}toBuffer(){return hi(this.data)}toBufferArray(){return this.data}toFields(){return this.data.map((e=>si.fromBuffer(e)))}toTuple(){const e=this.toFields();return uh(e.length,(t=>e[t]),0)}static fromBuffer(e,t=0){const{elem:n}=y_.deserialize(e,t);return n}static deserialize(e,t=0){const{elem:n,adv:s}=function(e,t,n=0){let s=n;const i=t.readUInt32BE(s);s+=4;const r=new Array(i);for(let n=0;n<i;++n){const{elem:i,adv:a}=e(t,s);s+=a,r[n]=i}return{elem:r,adv:s-n}}(((e,t)=>({elem:e.slice(t,t+32),adv:32})),e,t),i=n.length;return{elem:new y_(i,n),adv:s}}toString(){return Ds(this.toBuffer())}static fromString(e){return y_.fromBuffer(Os(e))}getSubtreeSiblingPath(e){const t=this.data.slice(e),n=this.pathSize-e;return new y_(n,t)}}class A_{constructor(e,t,n){this.index=e,this.leafPreimage=t,this.siblingPath=n}static get schema(){return zs.object({index:id.BigInt,leafPreimage:Ip.schema,siblingPath:y_.schemaFor(Ci)}).transform((({index:e,leafPreimage:t,siblingPath:n})=>new A_(e,t,n)))}toFields(){return[new si(this.index),new si(this.leafPreimage.slot),new si(this.leafPreimage.value),new si(this.leafPreimage.nextIndex),new si(this.leafPreimage.nextSlot),...this.siblingPath.toFields()]}toBuffer(){return _i([this.index,this.leafPreimage,this.siblingPath])}toString(){return Ds(this.toBuffer())}static random(){return new A_(BigInt(Math.floor(1e3*Math.random())),Ip.random(),y_.random(Ci))}static fromBuffer(e){const t=Js.asReader(e);return new A_(p(t.readBytes(32)),t.readObject(Ip),y_.fromBuffer(t.readBytes(1284)))}static fromString(e){return A_.fromBuffer(Os(e))}}!function(e){e[e.SETUP=0]="SETUP",e[e.APP_LOGIC=1]="APP_LOGIC",e[e.TEARDOWN=2]="TEARDOWN"}(m_||(m_={}));var w_=i(5732);const x_=zs.object({filePath:zs.string(),line:zs.number(),column:zs.number(),fileSource:zs.string(),locationText:zs.string()}),v_=zs.union([zs.array(x_),zs.array(zs.string())]);class E_ extends Error{constructor(e,t,n=[],s,i){super(e,i),this.originalMessage=e,this.functionErrorStack=t,this.revertData=n,this.noirErrorStack=s,this.aztecContext="";const r=()=>this.getMessage(),a=()=>this.getStack();Object.defineProperties(this,{message:{configurable:!1,enumerable:!0,get:()=>r()},stack:{configurable:!1,enumerable:!0,get:()=>a(),set(e){}}})}getMessage(){return this.noirErrorStack&&"string"!=typeof this.noirErrorStack[0]&&this.noirErrorStack.length?`${this.originalMessage} '${this.noirErrorStack[this.noirErrorStack.length-1].locationText}'${this.aztecContext}`:this.originalMessage}getOriginalMessage(){return this.originalMessage}setOriginalMessage(e){this.originalMessage=e}enrichWithContractName(e,t){this.functionErrorStack.forEach((n=>{n.contractAddress.equals(e)&&(n.contractName=t)}))}enrichWithFunctionName(e,t,n){this.functionErrorStack.forEach((s=>{s.contractAddress.equals(e)&&s.functionSelector&&s.functionSelector.equals(t)&&(s.functionName=n)}))}getStack(){const e=this.getCallStack(),t=this.getNoirCallStack(),n=[...e.map((e=>`at ${e.contractName??e.contractAddress.toString()}.${e.functionName??e.functionSelector?.toString()??"unknown"}`)),...t.map((e=>"string"==typeof e?`at opcode ${e}`:`at ${e.locationText} (${e.filePath}:${e.line}:${e.column})`))];return[`Simulation error: ${this.message}`,...n.reverse()].join("\n")}getCallStack(){return this.functionErrorStack}getNoirCallStack(){return this.noirErrorStack||[]}setNoirCallStack(e){this.noirErrorStack=e}setAztecContext(e){this.aztecContext=e}toJSON(){return{originalMessage:this.originalMessage,functionErrorStack:this.functionErrorStack,noirErrorStack:this.noirErrorStack,revertData:this.revertData.map((e=>e.toString()))}}static get schema(){return zs.object({originalMessage:zs.string(),functionErrorStack:zs.array(zs.object({contractAddress:id.AztecAddress,contractName:zs.string().optional(),functionSelector:id.FunctionSelector,functionName:zs.string().optional()})),noirErrorStack:v_.optional(),revertData:zs.array(id.Fr)}).transform((({originalMessage:e,functionErrorStack:t,noirErrorStack:n,revertData:s})=>new E_(e,t,s,n)))}static async random(){return new E_("Random simulation error",[{contractAddress:await Gc.random(),functionSelector:ed.random()}])}}class M_{constructor(e,t){this.values=e,this.nested=t??[]}static get schema(){return zs.object({values:zs.array(id.Fr).optional(),nested:zs.array(zs.lazy((()=>M_.schema)))}).transform((({values:e,nested:t})=>new M_(e,t)))}static empty(){return new M_([])}static random(e=1){return new M_(w_(3,si.random),e>0?[M_.random(e-1)]:[])}}class z_{constructor(e,t,n,s,i){this.revertReason=e,this.constants=t,this.txEffect=n,this.publicReturnValues=s,this.gasUsed=i}static get schema(){return zs.object({revertReason:E_.schema.optional(),constants:ap.schema,txEffect:mg.schema,publicReturnValues:zs.array(M_.schema),gasUsed:zs.object({totalGas:hh.schema,teardownGas:hh.schema,publicGas:hh.schema})}).transform((e=>new z_(e.revertReason,e.constants,e.txEffect,e.publicReturnValues,e.gasUsed)))}static async random(){return new z_(await E_.random(),ap.empty(),mg.empty(),w_(2,M_.random),{teardownGas:hh.random(),totalGas:hh.random(),publicGas:hh.random()})}}const B_=zs.object({gateCounts:zs.array(zs.object({circuitName:zs.string(),gateCount:zs.number()}))});var F_;class k_ extends h_{constructor(e,t,n,s,i){super(),this.data=e,this.clientIvcProof=t,this.contractClassLogs=n,this.enqueuedPublicFunctionCalls=s,this.publicTeardownFunctionCall=i}async p2pMessageIdentifier(){return new il((await this.getTxHash()).toBuffer())}hasPublicCalls(){return this.data.numberOfPublicCallRequests()>0}getNonRevertiblePublicExecutionRequests(){const e=this.data.numberOfRevertiblePublicCallRequests();return this.enqueuedPublicFunctionCalls.slice(e)}getRevertiblePublicExecutionRequests(){const e=this.data.numberOfRevertiblePublicCallRequests();return this.enqueuedPublicFunctionCalls.slice(0,e)}getPublicTeardownExecutionRequest(){return this.publicTeardownFunctionCall.isEmpty()?void 0:this.publicTeardownFunctionCall}getGasSettings(){return this.data.constants.txContext.gasSettings}static fromBuffer(e){const t=Js.asReader(e);return new F_(t.readObject(Rp),t.readObject(Rh),t.readObject(Jm),t.readVectorUint8Prefix(Km),t.readObject(Km))}static newWithTxData(e,t){return new F_(e,Rh.empty(),Jm.empty(),[],t||Km.empty())}toBuffer(){return _i([this.data,this.clientIvcProof,this.contractClassLogs,hi(this.enqueuedPublicFunctionCalls,1),this.publicTeardownFunctionCall])}static get schema(){return zs.object({data:Rp.schema,clientIvcProof:Rh.schema,contractClassLogs:Jm.schema,enqueuedPublicFunctionCalls:zs.array(Km.schema),publicTeardownFunctionCall:Km.schema}).transform(F_.from)}static from(e){return new F_(e.data,e.clientIvcProof,e.contractClassLogs,e.enqueuedPublicFunctionCalls,e.publicTeardownFunctionCall)}async getPublicLogs(e){return e.getPublicLogs({txHash:await this.getTxHash()})}async getTxHash(e=!1){if(!this.txHash||e){const e=this.data.forPublic?await this.data.toPrivateToPublicKernelCircuitPublicInputs().hash():await this.data.toPrivateToRollupKernelCircuitPublicInputs().hash();this.txHash=new km(e)}return this.txHash}setTxHash(e){this.txHash=e}async getStats(){return{txHash:(await this.getTxHash()).toString(),noteHashCount:this.data.getNonEmptyNoteHashes().length,nullifierCount:this.data.getNonEmptyNullifiers().length,privateLogCount:this.data.getNonEmptyPrivateLogs().length,proofSize:this.clientIvcProof.clientIvcProofBuffer.length,size:this.toBuffer().length,feePaymentMethod:this.data.forPublic?.needsTeardown?this.data.forPublic?.needsSetup?0x43417bb1n===this.data.getNonRevertiblePublicCallRequests().at(-1).functionSelector.toField().toBigInt()?"fpc_public":"fpc_private":"fee_juice":"none",classRegisteredCount:this.contractClassLogs.unrollLogs().length,contractClassLogSize:this.contractClassLogs.getSerializedLength()}}getSize(){return this.data.getSize()+this.clientIvcProof.clientIvcProofBuffer.length+this.contractClassLogs.getSerializedLength()+Me(this.enqueuedPublicFunctionCalls)+Me([this.publicTeardownFunctionCall])}getEstimatedPrivateTxEffectsSize(){return this.contractClassLogs.getSerializedLength()+this.data.getNonEmptyNoteHashes().length*si.SIZE_IN_BYTES+this.data.getNonEmptyNullifiers().length*si.SIZE_IN_BYTES+this.data.getNonEmptyPrivateLogs().length*ip.SIZE_IN_BYTES}static async getHash(e){return function(e){return void 0!==e.hash}(e)?e.hash:await e.getTxHash()}static async getHashes(e){return await Promise.all(e.map(F_.getHash))}static clone(e){const t=Rp.fromBuffer(e.data.toBuffer()),n=Rh.fromBuffer(e.clientIvcProof.toBuffer()),s=Jm.fromBuffer(e.contractClassLogs.toBuffer()),i=e.enqueuedPublicFunctionCalls.map((e=>Km.fromBuffer(e.toBuffer()))),r=Km.fromBuffer(e.publicTeardownFunctionCall.toBuffer()),a=new F_(t,n,s,i,r);return e.txHash&&a.setTxHash(km.fromBuffer(e.txHash.toBuffer())),a}static async random(){return new F_(Rp.emptyWithNullifier(),Rh.empty(),await Jm.random(1,1),[await Km.random()],await Km.random())}filterRevertedLogs(e){this.contractClassLogs=this.contractClassLogs.filterScoped(e.contractClassLogsHashes,Jm.empty())}}(F_=k_).p2pTopic=p_(u_.tx);class C_{constructor(e,t){this.privateExecutionResult=e,this.publicInputs=t}getPrivateReturnValues(){return function(e){const t=e=>{const n=new M_(e.returnValues);return n.nested=e.nestedExecutions.map((e=>t(e))),n};return t(e.entrypoint)}(this.privateExecutionResult)}toSimulatedTx(){const e=new Jm([rg(this.privateExecutionResult)]),t=og(this.privateExecutionResult),n=lg(this.privateExecutionResult);return new k_(this.publicInputs,Rh.empty(),e,t,n)}}class O_ extends C_{constructor(e,t,n,s){super(e,t),this.publicOutput=n,this.profileResult=s}get gasUsed(){return this.publicOutput?.gasUsed??{totalGas:this.publicInputs.gasUsed,teardownGas:hh.empty(),publicGas:hh.empty()}}static get schema(){return zs.object({privateExecutionResult:ng.schema,publicInputs:Rp.schema,publicOutput:z_.schema.optional(),profileResult:B_.optional()}).transform(O_.from)}static from(e){return new O_(e.privateExecutionResult,e.publicInputs,e.publicOutput,e.profileResult)}getPublicReturnValues(){return this.publicOutput?this.publicOutput.publicReturnValues:[]}static fromPrivateSimulationResultAndPublicOutput(e,t,n){return new O_(e.privateExecutionResult,e.publicInputs,t,n)}static async random(){return new O_(await ng.random(),Rp.empty(),await z_.random())}}class D_{constructor(e,t,n){this.privateExecutionResult=e,this.publicInputs=t,this.clientIvcProof=n}toTx(){const e=new Jm([rg(this.privateExecutionResult)]),t=og(this.privateExecutionResult),n=lg(this.privateExecutionResult);return new k_(this.publicInputs,this.clientIvcProof,e,t,n)}static get schema(){return zs.object({privateExecutionResult:ng.schema,publicInputs:Rp.schema,clientIvcProof:Rh.schema}).transform(D_.from)}static from(e){return new D_(e.privateExecutionResult,e.publicInputs,e.clientIvcProof)}static async random(){return new D_(await ng.random(),Rp.empty(),Rh.empty())}}const L_=zs.discriminatedUnion("result",[zs.object({result:zs.literal("valid"),reason:zs.array(zs.string()).optional()}),zs.object({result:zs.literal("invalid"),reason:zs.array(zs.string())}),zs.object({result:zs.literal("skipped"),reason:zs.array(zs.string())})]),T_=zs.union([zs.object({address:id.AztecAddress,selector:id.FunctionSelector}),zs.object({address:id.AztecAddress}),zs.object({classId:id.Fr,selector:id.FunctionSelector}),zs.object({classId:id.Fr})]),S_=zs.object({transactionPollingIntervalMS:zs.number().optional(),maxTxsPerBlock:zs.number().optional(),minTxsPerBlock:zs.number().optional(),maxL2BlockGas:zs.number().optional(),maxDABlockGas:zs.number().optional(),coinbase:id.EthAddress.optional(),feeRecipient:id.AztecAddress.optional(),acvmWorkingDirectory:zs.string().optional(),acvmBinaryPath:zs.string().optional(),allowedInSetup:zs.array(T_).optional(),maxBlockSizeInBytes:zs.number().optional(),enforceFees:zs.boolean().optional(),governanceProposerPayload:id.EthAddress.optional(),maxL1TxInclusionTimeIntoSlot:zs.number().optional(),enforceTimeTable:zs.boolean().optional()}),N_=zs.union([id.Integer,zs.literal("latest")]);class P_{constructor(e,t,n){this.index=e,this.leafPreimage=t,this.siblingPath=n}static get schema(){return zs.object({index:id.BigInt,leafPreimage:ch.schema,siblingPath:y_.schemaFor(Oi)}).transform((({index:e,leafPreimage:t,siblingPath:n})=>new P_(e,t,n)))}static random(){return new P_(BigInt(Math.floor(1e3*Math.random())),ch.random(),y_.random(Oi))}toFields(){return[new si(this.index),...this.leafPreimage.toFields(),...this.siblingPath.toFields()]}}var I_,Y_;i(8891).Buffer;const Q_=zs.object({nodeUrl:zs.string().optional(),realProofs:zs.boolean(),proverId:id.Fr,proverTestDelayMs:zs.number(),proverAgentCount:zs.number()});si.ZERO,ze(0),ze(1);class j_ extends Error{constructor(e,t){super(e),this.txHashes=t,this.name=Hs(I_,I_,"f",Y_)}static isBlockProofError(e){return e&&"object"==typeof e&&e.name===Hs(I_,I_,"f",Y_)}}I_=j_,Y_={value:"BlockProofError"},zs.function().args(km.schema).returns(k_.schema.optional()),zs.function().args(b_.schema).returns(zs.void()),zs.function().args().returns(Vg),zs.function().args(N_,zs.nativeEnum(l_),zs.array(id.Fr)).returns(zs.array(Is(id.BigInt))),zs.function().args(N_,zs.nativeEnum(l_),zs.array(id.BigInt)).returns(zs.array(Is(id.BigInt))),zs.function().args(N_,zs.array(id.Fr)).returns(zs.array(Is(dg(id.BigInt)))),zs.function().args(N_,id.BigInt).returns(y_.schemaFor(Oi)),zs.function().args(N_,id.BigInt).returns(y_.schemaFor(40)),zs.function().args(N_,id.Fr).returns(zs.tuple([id.BigInt,y_.schemaFor(39)]).optional()),zs.function().args(id.Fr).returns(zs.boolean()),zs.function().args(N_,id.Fr).returns(zs.tuple([id.BigInt,y_.schema])),zs.function().args(N_,id.BigInt).returns(y_.schemaFor(Fi)),zs.function().args(N_,id.BigInt).returns(y_.schemaFor(Ci)),zs.function().args(N_,id.Fr).returns(P_.schema.optional()),zs.function().args(N_,id.Fr).returns(P_.schema.optional()),zs.function().args(N_,id.Fr).returns(A_.schema.optional()),zs.function().args(zs.number()).returns(Xg.schema.optional()),zs.function().returns(zs.number()),zs.function().returns(zs.number()),zs.function().returns(zs.boolean()),zs.function().returns(xu),zs.function().args(zs.number(),zs.number()).returns(zs.array(Xg.schema)),zs.function().returns(ph.schema),zs.function().returns(zs.string()),zs.function().returns(zs.number()),zs.function().returns(zs.number()),zs.function().returns(Au),zs.function().returns(wu),zs.function().args(id.AztecAddress,zs.array(zs.string())).returns(zs.void()),zs.function().args(zs.number(),zs.number()).returns(zs.array(ip.schema)),zs.function().args(qm).returns(jm),zs.function().args(qm).returns(Qm),zs.function().args(zs.array(id.Fr)).returns(zs.array(zs.array(Hm.schema))),zs.function().args(k_.schema).returns(zs.void()),zs.function().args(km.schema).returns($g.schema),zs.function().args(km.schema).returns(dg(mg.schema).optional()),zs.function().returns(zs.array(k_.schema)),zs.function().returns(zs.number()),zs.function().args(km.schema).returns(k_.schema.optional()),zs.function().args(id.AztecAddress,id.Fr,N_).returns(id.Fr),zs.function().args(Is(N_)).returns(Kh.schema),zs.function().args(k_.schema,Is(zs.boolean())).returns(z_.schema),zs.function().args(k_.schema,Is(zs.boolean())).returns(L_),zs.function().args(S_.merge(Q_).partial()).returns(zs.void()),zs.function().args(id.Fr).returns(bu.optional()),zs.function().args(id.AztecAddress).returns(yu.optional()),zs.function().returns(zs.void()),zs.function().returns(zs.string().optional()),zs.function().args(b_.schema).returns(zs.void()),zs.function().args(id.BigInt).returns(zs.array(b_.schema)),zs.function().args(bu).returns(zs.void()),zs.function().args(zs.number().min(1).int()).returns(zs.void()),zs.function().args().returns(zs.boolean()),zs.function().args().returns(zs.array(zs.object({id:zs.string(),type:zs.string()}))),zs.function().args().returns(zs.array(zs.object({uuid:zs.string(),status:zs.enum(["initialized","processing","awaiting-prover","publishing-proof","completed","failed","stopped","timed-out"])}))),zs.function().args(id.Integer).returns(zs.void()),zs.function().args(id.Integer).returns(zs.void()),zs.function().args(b_.schema).returns(zs.void());class H_{constructor(e){this.clientIVCData=e}static from(e){return new H_(...H_.getFields(e))}static getFields(e){return[e.clientIVCData]}toBuffer(){return _i(...H_.getFields(this))}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new H_(t.readObject(Rh))}isEmpty(){return this.clientIVCData.isEmpty()}static fromString(e){return H_.fromBuffer(Os(e))}static empty(){return new H_(Rh.empty())}toJSON(){return this.toBuffer()}static get schema(){return Qs(H_)}}function U_(e){return zs.object({proof:qp.schemaFor(e),verificationKey:Sp.schema})}function R_(e,t){return zs.object({inputs:e,proof:qp.schemaFor(t),verificationKey:Sp.schema})}var G_;!function(e){e[e.PUBLIC_VM=0]="PUBLIC_VM",e[e.PRIVATE_BASE_ROLLUP=1]="PRIVATE_BASE_ROLLUP",e[e.PUBLIC_BASE_ROLLUP=2]="PUBLIC_BASE_ROLLUP",e[e.MERGE_ROLLUP=3]="MERGE_ROLLUP",e[e.EMPTY_BLOCK_ROOT_ROLLUP=4]="EMPTY_BLOCK_ROOT_ROLLUP",e[e.BLOCK_ROOT_ROLLUP=5]="BLOCK_ROOT_ROLLUP",e[e.SINGLE_TX_BLOCK_ROOT_ROLLUP=6]="SINGLE_TX_BLOCK_ROOT_ROLLUP",e[e.BLOCK_MERGE_ROLLUP=7]="BLOCK_MERGE_ROLLUP",e[e.ROOT_ROLLUP=8]="ROOT_ROLLUP",e[e.BASE_PARITY=9]="BASE_PARITY",e[e.ROOT_PARITY=10]="ROOT_PARITY",e[e.TUBE_PROOF=11]="TUBE_PROOF"}(G_||(G_={}));const Z_=zs.object({type:zs.literal(G_.PUBLIC_VM),inputs:jh.schema});zs.discriminatedUnion("type",[Z_,zs.object({type:zs.literal(G_.BASE_PARITY),inputs:Gp.schema}),zs.object({type:zs.literal(G_.ROOT_PARITY),inputs:em.schema}),zs.object({type:zs.literal(G_.PRIVATE_BASE_ROLLUP),inputs:jg.schema}),zs.object({type:zs.literal(G_.PUBLIC_BASE_ROLLUP),inputs:Ug.schema}),zs.object({type:zs.literal(G_.MERGE_ROLLUP),inputs:Yg.schema}),zs.object({type:zs.literal(G_.BLOCK_ROOT_ROLLUP),inputs:Ng.schema}),zs.object({type:zs.literal(G_.SINGLE_TX_BLOCK_ROOT_ROLLUP),inputs:Pg.schema}),zs.object({type:zs.literal(G_.EMPTY_BLOCK_ROOT_ROLLUP),inputs:Ig.schema}),zs.object({type:zs.literal(G_.BLOCK_MERGE_ROLLUP),inputs:Dg.schema}),zs.object({type:zs.literal(G_.ROOT_ROLLUP),inputs:Rg.schema}),zs.object({type:zs.literal(G_.TUBE_PROOF),inputs:H_.schema})]);const J_=zs.discriminatedUnion("type",[zs.object({type:zs.literal(G_.PUBLIC_VM),result:U_(4154)}),zs.object({type:zs.literal(G_.PRIVATE_BASE_ROLLUP),result:R_(Eg.schema,ji)}),zs.object({type:zs.literal(G_.PUBLIC_BASE_ROLLUP),result:R_(Eg.schema,ji)}),zs.object({type:zs.literal(G_.MERGE_ROLLUP),result:R_(Eg.schema,ji)}),zs.object({type:zs.literal(G_.EMPTY_BLOCK_ROOT_ROLLUP),result:R_(kg.schema,ji)}),zs.object({type:zs.literal(G_.BLOCK_ROOT_ROLLUP),result:R_(kg.schema,ji)}),zs.object({type:zs.literal(G_.SINGLE_TX_BLOCK_ROOT_ROLLUP),result:R_(kg.schema,ji)}),zs.object({type:zs.literal(G_.BLOCK_MERGE_ROLLUP),result:R_(kg.schema,ji)}),zs.object({type:zs.literal(G_.ROOT_ROLLUP),result:R_(Gg.schema,459)}),zs.object({type:zs.literal(G_.BASE_PARITY),result:R_(Zp.schema,459)}),zs.object({type:zs.literal(G_.ROOT_PARITY),result:R_(Zp.schema,459)}),zs.object({type:zs.literal(G_.TUBE_PROOF),result:U_(538)})]),X_=zs.string(),W_=zs.string().brand("ProvingJobUri"),V_=zs.object({id:X_,type:zs.nativeEnum(G_),epochNumber:zs.number(),inputsUri:W_}),q_=zs.object({status:zs.literal("fulfilled"),value:W_}),K_=zs.object({status:zs.literal("rejected"),reason:zs.string()});zs.discriminatedUnion("status",[q_,K_]),zs.discriminatedUnion("status",[zs.object({status:zs.literal("in-queue")}),zs.object({status:zs.literal("in-progress")}),zs.object({status:zs.literal("not-found")}),q_,K_]),zs.function().args().returns(V_.optional()),zs.function().args(X_).returns(zs.void()),zs.function().args(X_,J_).returns(zs.void()),zs.function().args(X_,zs.string()).returns(zs.void());class $_{constructor(e,t){this.requestHash=e,this.witness=t.map((e=>new si(e)))}static get schema(){return Ys($_)}toJSON(){return this.toString()}toBuffer(){return _i(this.requestHash,new ih(this.witness))}static fromBuffer(e){const t=Js.asReader(e);return new $_(si.fromBuffer(t),t.readVector(si))}toString(){return Ds(this.toBuffer())}static fromString(e){return $_.fromBuffer(Os(e))}static random(){return new $_(si.random(),[si.random(),si.random(),si.random()])}}var eb,tb;!function(e){e[e.EQ=1]="EQ",e[e.NEQ=2]="NEQ",e[e.LT=3]="LT",e[e.LTE=4]="LTE",e[e.GT=5]="GT",e[e.GTE=6]="GTE"}(eb||(eb={}));class nb{constructor(e,t,n,s,i,r){this.note=e,this.owner=t,this.contractAddress=n,this.storageSlot=s,this.noteTypeId=i,this.txHash=r}toBuffer(){return _i([this.note,this.owner,this.contractAddress,this.storageSlot,this.noteTypeId,this.txHash])}static fromBuffer(e){const t=Js.asReader(e);return new this(t.readObject(Fm),t.readObject(Gc),t.readObject(Gc),t.readObject(si),t.readObject(nd),t.readObject(km))}static get schema(){return zs.object({note:Fm.schema,owner:id.AztecAddress,contractAddress:id.AztecAddress,storageSlot:id.Fr,noteTypeId:id.NoteSelector,txHash:km.schema}).transform((({note:e,owner:t,contractAddress:n,storageSlot:s,noteTypeId:i,txHash:r})=>new nb(e,t,n,s,i,r)))}toString(){return Ds(this.toBuffer())}static fromString(e){return nb.fromBuffer(Os(e))}static async random(){return new nb(Fm.random(),await Gc.random(),await Gc.random(),si.random(),nd.random(),km.random())}}class sb extends nb{constructor(e,t,n,s,i,r,a){super(e,t,n,s,i,r),this.nonce=a}static get schema(){return zs.object({note:Fm.schema,owner:id.AztecAddress,contractAddress:id.AztecAddress,storageSlot:id.Fr,noteTypeId:id.NoteSelector,txHash:km.schema,nonce:id.Fr}).transform((({note:e,owner:t,contractAddress:n,storageSlot:s,noteTypeId:i,txHash:r,nonce:a})=>new sb(e,t,n,s,i,r,a)))}toBuffer(){return _i([this.note,this.owner,this.contractAddress,this.storageSlot,this.noteTypeId,this.txHash,this.nonce])}static async random(){return new sb(Fm.random(),await Gc.random(),await Gc.random(),si.random(),nd.random(),km.random(),si.random())}static fromBuffer(e){const t=Js.asReader(e);return new this(t.readObject(Fm),t.readObject(Gc),t.readObject(Gc),t.readObject(si),t.readObject(nd),t.readObject(km),t.readObject(si))}static fromString(e){return sb.fromBuffer(Os(e))}}!function(e){e[e.ACTIVE=1]="ACTIVE",e[e.ACTIVE_OR_NULLIFIED=2]="ACTIVE_OR_NULLIFIED"}(tb||(tb={}));const ib=zs.object({txHash:km.schema.optional(),contractAddress:id.AztecAddress.optional(),storageSlot:id.Fr.optional(),owner:id.AztecAddress.optional(),status:zs.nativeEnum(tb).optional(),siloedNullifier:id.Fr.optional(),scopes:zs.array(id.AztecAddress).optional()});class rb{constructor(e,t){this.values=e,this.hash=t}static get schema(){return zs.array(id.Fr).transform(rb.fromValues)}toJSON(){return this.values}static random(){return rb.fromValues([si.random(),si.random()])}static async fromValues(e){return new rb(e,await Qd(e))}toBuffer(){return _i(new ih(this.values),this.hash)}static fromBuffer(e){const t=Js.asReader(e);return new rb(t.readVector(si),si.fromBuffer(t))}}class ab{constructor(e,t,n,s,i,r){this.origin=e,this.functionSelector=t,this.firstCallArgsHash=n,this.txContext=s,this.argsOfCalls=i,this.authWitnesses=r}static get schema(){return zs.object({origin:id.AztecAddress,functionSelector:id.FunctionSelector,firstCallArgsHash:id.Fr,txContext:$h.schema,argsOfCalls:zs.array(rb.schema),authWitnesses:zs.array($_.schema)}).transform(ab.from)}toTxRequest(){return new Np(this.origin,new ep(this.functionSelector,!0),this.firstCallArgsHash,this.txContext)}static getFields(e){return[e.origin,e.functionSelector,e.firstCallArgsHash,e.txContext,e.argsOfCalls,e.authWitnesses]}static from(e){return new ab(...ab.getFields(e))}toBuffer(){return _i(this.origin,this.functionSelector,this.firstCallArgsHash,this.txContext,new ih(this.argsOfCalls),new ih(this.authWitnesses))}toString(){return Ds(this.toBuffer())}static fromBuffer(e){const t=Js.asReader(e);return new ab(t.readObject(Gc),t.readObject(ed),si.fromBuffer(t),t.readObject($h),t.readVector(rb),t.readVector($_))}static fromString(e){return ab.fromBuffer(Os(e))}static async random(){return new ab(await Gc.random(),ed.random(),si.random(),$h.empty(),[await rb.random()],[$_.random()])}[f.inspect.custom](){return`TxExecutionRequest(${this.origin} called ${this.functionSelector})`}}const ob=zs.object({eventSelector:id.EventSelector,abiType:dd,fieldNames:zs.array(zs.string())});var lb;!function(e){e.Encrypted="Encrypted",e.Unencrypted="Unencrypted"}(lb||(lb={}));const cb=zs.object({contractInstance:zs.union([yu,zs.undefined()]),isContractInitialized:zs.boolean(),isContractPubliclyDeployed:zs.boolean()}),db=zs.object({contractClass:zs.union([_u,zs.undefined()]),isContractClassPubliclyRegistered:zs.boolean(),artifact:zs.union([Ad,zs.undefined()])}),ub=zs.object({pxeVersion:zs.string(),protocolContractAddresses:wu}),fb={isL1ToL2MessageSynced:zs.function().args(id.Fr).returns(zs.boolean()),addAuthWitness:zs.function().args($_.schema).returns(zs.void()),getAuthWitness:zs.function().args(id.Fr).returns(zs.union([zs.undefined(),zs.array(id.Fr)])),addCapsule:zs.function().args(zs.array(id.Fr)).returns(zs.void()),registerAccount:zs.function().args(id.Fr,id.Fr).returns(Zh.schema),getRegisteredAccounts:zs.function().returns(zs.array(Zh.schema)),registerSender:zs.function().args(id.AztecAddress).returns(id.AztecAddress),getSenders:zs.function().returns(zs.array(id.AztecAddress)),removeSender:zs.function().args(id.AztecAddress).returns(zs.void()),registerContractClass:zs.function().args(Ad).returns(zs.void()),registerContract:zs.function().args(zs.object({instance:yu,artifact:zs.optional(Ad)})).returns(zs.void()),getContracts:zs.function().returns(zs.array(id.AztecAddress)),proveTx:zs.function().args(ab.schema,ng.schema).returns(D_.schema),simulateTx:zs.function().args(ab.schema,zs.boolean(),Is(id.AztecAddress),Is(zs.boolean()),Is(zs.boolean()),Is(zs.boolean()),Is(zs.array(id.AztecAddress))).returns(O_.schema),sendTx:zs.function().args(k_.schema).returns(km.schema),getTxReceipt:zs.function().args(km.schema).returns($g.schema),getTxEffect:zs.function().args(km.schema).returns(zs.union([dg(mg.schema),zs.undefined()])),getPublicStorageAt:zs.function().args(id.AztecAddress,id.Fr).returns(id.Fr),getNotes:zs.function().args(ib).returns(zs.array(sb.schema)),getL1ToL2MembershipWitness:zs.function().args(id.AztecAddress,id.Fr,id.Fr).returns(zs.tuple([id.BigInt,y_.schemaFor(39)])),getL2ToL1MembershipWitness:zs.function().args(zs.number(),id.Fr).returns(zs.tuple([id.BigInt,y_.schema])),addNote:zs.function().args(nb.schema,Is(id.AztecAddress)).returns(zs.void()),addNullifiedNote:zs.function().args(nb.schema).returns(zs.void()),getBlock:zs.function().args(zs.number()).returns(zs.union([Xg.schema,zs.undefined()])),getCurrentBaseFees:zs.function().returns(ph.schema),simulateUnconstrained:zs.function().args(zs.string(),zs.array(zs.any()),id.AztecAddress,Is(id.AztecAddress),Is(zs.array(id.AztecAddress))).returns(rd),getPublicLogs:zs.function().args(qm).returns(jm),getContractClassLogs:zs.function().args(qm).returns(Qm),getBlockNumber:zs.function().returns(zs.number()),getProvenBlockNumber:zs.function().returns(zs.number()),getNodeInfo:zs.function().returns(xu),getPXEInfo:zs.function().returns(ub),getContractMetadata:zs.function().args(id.AztecAddress).returns(cb),getContractClassMetadata:zs.function().args(id.Fr,Is(zs.boolean())).returns(db),getPrivateEvents:zs.function().args(ob,zs.number(),zs.number(),zs.array(id.Point)).returns(zs.array(rd)),getPublicEvents:zs.function().args(ob,zs.number(),zs.number()).returns(zs.array(rd))};var hb;!function(e){e[e.IDLE=0]="IDLE",e[e.SYNCHING=1]="SYNCHING",e[e.RUNNING=2]="RUNNING",e[e.STOPPED=3]="STOPPED"}(hb||(hb={}));var pb,mb,gb=i(4246),_b=i(3021),bb=(i(7775),i(1542)),yb=i(2142);class Ab{constructor(e,t,n){this.header=e,this.archive=t,this.txHashes=n}static get schema(){return zs.object({header:Kh.schema,archive:si.schema,txHashes:zs.array(km.schema)}).transform((e=>new Ab(e.header,e.archive,e.txHashes)))}static getFields(e){return[e.header,e.archive,e.txHashes]}async getPayloadToSign(e){const t=function(e){const t=[];{const n=(0,bb.NV)(e),s=n.length;for(let e=0;e<s;e++)t.push((0,bb.Pj)(n[e],{modifiers:_b.Dv}))}if(0===t.length)throw new gb.A9({params:e});return t}("uint8, (bytes32, bytes32, (uint256, uint256), bytes, bytes32[])"),n=this.txHashes.map((e=>e.toString()));return Os((0,yb.h)(t,[e,[this.archive.toString(),(await this.header.hash()).toString(),[0n,0n],this.header.toString(),n]]))}toBuffer(){const e=_i([this.header,this.archive,this.txHashes.length,this.txHashes]);return this.size=e.length,e}static fromBuffer(e){const t=Js.asReader(e);return new Ab(t.readObject(Kh),t.readObject(si),t.readArray(t.readNumber(),km))}static fromFields(e){return new Ab(e.header,e.archive,e.txHashes)}static empty(){return new Ab(Kh.empty(),si.ZERO,[])}getSize(){return this.size||(this.size=this.toBuffer().length),this.size}}async function wb(e,t){return il.fromBuffer(rl(await e.getPayloadToSign(t)))}async function xb(e,t){return function(e){const t=Ic.from("Ethereum Signed Message:\n32");return il.fromBuffer(rl(Ic.concat([t,e.buffer])))}(await wb(e,t))}(mb=pb||(pb={}))[mb.blockProposal=0]="blockProposal",mb[mb.blockAttestation=1]="blockAttestation";class vb extends il{constructor(e){super(e)}}class Eb extends h_{constructor(e,t){super(),this.payload=e,this.signature=t}static get schema(){return zs.object({payload:Ab.schema,signature:Pc.schema}).transform((e=>new Eb(e.payload,e.signature)))}p2pMessageIdentifier(){return Promise.resolve(new vb(rl(this.signature.toBuffer())))}get archive(){return this.payload.archive}get slotNumber(){return this.payload.header.globalVariables.slotNumber}get blockNumber(){return this.payload.header.globalVariables.blockNumber}async getSender(){if(!this.sender){const e=await xb(this.payload,pb.blockAttestation);this.sender=Yc(e,this.signature)}return this.sender}getPayload(){return this.payload.getPayloadToSign(pb.blockAttestation)}toBuffer(){return _i([this.payload,this.signature])}static fromBuffer(e){const t=Js.asReader(e);return new Eb(t.readObject(Ab),t.readObject(Pc))}static empty(){return new Eb(Ab.empty(),Pc.empty())}getSize(){return this.payload.getSize()+this.signature.getSize()}}Eb.p2pTopic=p_(u_.block_attestation);const Mb=zs.discriminatedUnion("status",[zs.object({status:zs.literal("connected"),score:zs.number(),id:zs.string()}),zs.object({status:zs.literal("dialing"),dialStatus:zs.string(),id:zs.string(),addresses:zs.array(zs.string())}),zs.object({status:zs.literal("cached"),id:zs.string(),addresses:zs.array(zs.string()),enr:zs.string(),dialAttempts:zs.number()})]);function zb(e,t=function(e,t,n){return async(t,n,s,i,r={},a)=>await async function(e,t="Operation",n=function*(){const e=[1,1,1,2,4,8,16,32,64];let t=0;for(;;)yield e[Math.min(t++,e.length-1)]}(),s=Pe("foundation:retry"),i=!1){for(;;)try{return await e()}catch(e){if(e instanceof i_)throw e;const r=n.next().value;if(void 0===r)throw e;s.verbose(`${t} failed. Will retry in ${r}s...`),!i&&s.error(`Error while retrying ${t}`,e),await n_(1e3*r);continue}}((()=>o_(t,n,s,i,r,a??false)),`JsonRpcClient request ${n} to ${t}`,function*(e){for(const t of e)yield t}(e),undefined,!1)}([1,2,3])){return function(e,t,n=!1,s,i=o_,r=Pe("json-rpc:client")){let a=0;const o=async(o,l)=>{if(!function(e,t){return"string"==typeof t&&Object.hasOwn(e,t)&&"function"==typeof e[t].parameters&&"function"==typeof e[t].returnType}(t,o))throw new Error(`Unspecified method ${o} in client schema`);const c=s?`${s}_${o}`:o,d={jsonrpc:"2.0",id:a++,method:c,params:l};r.debug((0,f.format)("request",c,l));const u=await i(e,c,d,n);if(r.debug((0,f.format)("result",c,u)),u.error)throw u.error;if(![null,void 0,"null","undefined"].includes(u.result))return t[o].returnType().parseAsync(u.result)},l={};for(const e of Object.keys(t))l[e]=(...t)=>o(e,t);return l}(e,fb,!1,"pxe",t)}zs.function().args(id.BigInt,Is(zs.string())).returns(zs.array(Eb.schema)),zs.function().args(id.BigInt).returns(zs.array(b_.schema)),zs.function().returns(zs.array(k_.schema)),zs.function().returns(zs.string().optional()),zs.function().args(Is(zs.boolean())).returns(zs.array(Mb)),zs.function().returns(zs.string()),zs.function().returns(zs.array(zs.string())),i(9331);class Bb{constructor(e,t,n,s,i,r,a){this.name=e,this.to=t,this.selector=n,this.type=s,this.isStatic=i,this.args=r,this.returnTypes=a}static getFields(e){return[e.name,e.to,e.selector,e.type,e.isStatic,e.args,e.returnTypes]}static from(e){return new Bb(...Bb.getFields(e))}static empty(){return{name:"",to:Gc.ZERO,selector:ed.empty(),type:hd.PUBLIC,isStatic:!1,args:[],returnTypes:[]}}}Pe("types:l2_block_downloader"),i(8891).Buffer,i(8891).Buffer;class Fb extends il{constructor(e){super(e)}}class kb extends h_{constructor(e,t){super(),this.payload=e,this.signature=t}p2pMessageIdentifier(){return Promise.resolve(new Fb(rl(this.signature.toBuffer())))}get archive(){return this.payload.archive}get slotNumber(){return this.payload.header.globalVariables.slotNumber}get blockNumber(){return this.payload.header.globalVariables.blockNumber}static async createProposalFromSigner(e,t){const n=await wb(e,pb.blockProposal),s=await t(n);return new kb(e,s)}async getSender(){if(!this.sender){const e=await xb(this.payload,pb.blockProposal);this.sender=Yc(e,this.signature)}return this.sender}getPayload(){return this.payload.getPayloadToSign(pb.blockProposal)}toBuffer(){return _i([this.payload,this.signature])}static fromBuffer(e){const t=Js.asReader(e);return new kb(t.readObject(Ab),t.readObject(Pc))}getSize(){return this.payload.getSize()+this.signature.getSize()}}var Cb;kb.p2pTopic=p_(u_.block_proposal),u_.tx,u_.block_proposal,u_.block_attestation,u_.epoch_proof_quote,k_.p2pTopic,k_.fromBuffer,kb.p2pTopic,kb.fromBuffer,Eb.p2pTopic,Eb.fromBuffer,b_.p2pTopic,b_.fromBuffer,function(e){e.LowToleranceError="LowToleranceError",e.MidToleranceError="MidToleranceError",e.HighToleranceError="HighToleranceError"}(Cb||(Cb={}));class Ob extends Error{constructor(e,t,n=!1){super(e),this.retry=n,this.name=Ob.NAME,this.cause=t}}Ob.NAME="ProvingError";const Db={ignoreDroppedReceiptsFor:5,timeout:60,provenTimeout:600,interval:1,debug:!1};class Lb{constructor(e,t){this.pxe=e,this.txHashPromise=t}getTxHash(){return this.txHashPromise}async getReceipt(){const e=await this.getTxHash();return await this.pxe.getTxReceipt(e)}async wait(e){const t=await this.waitForReceipt(e);if(t.status!==Kg.SUCCESS&&!e?.dontThrowOnRevert)throw new Error(`Transaction ${await this.getTxHash()} was ${t.status}. Reason: ${t.error??"unknown"}`);if(e?.proven&&void 0!==t.blockNumber&&await this.waitForProven(t.blockNumber,e),e?.debug){const e=await this.getTxHash(),{data:n}=await this.pxe.getTxEffect(e);t.debugInfo={noteHashes:n.noteHashes,nullifiers:n.nullifiers,publicDataWrites:n.publicDataWrites,l2ToL1Msgs:n.l2ToL1Msgs}}return t}async getPublicLogs(){return await this.wait(),this.pxe.getPublicLogs({txHash:await this.getTxHash()})}async waitForReceipt(e){const t=await this.getTxHash(),n=Date.now(),s=e?.ignoreDroppedReceiptsFor??Db.ignoreDroppedReceiptsFor;return await r_((async()=>{const e=await this.pxe.getTxReceipt(t);if(e.status!==Kg.PENDING){if(e.status===Kg.DROPPED){const t=(Date.now()-n)/1e3;return!s||t>s?e:void 0}return e}}),"isMined",e?.timeout??Db.timeout,e?.interval??Db.interval)}async waitForProven(e,t){return await r_((async()=>{const t=await this.pxe.getProvenBlockNumber();return t>=e?t:void 0}),"isProven",t?.provenTimeout??Db.provenTimeout,t?.interval??Db.interval)}}var Tb;class Sb{constructor(e,t,n,s){this.functionCalls=e,this._hashedArguments=t,this.generatorIndex=n,this._nonce=s}static async create(e){const t=[];for(const n of e)t.push(await rb.fromValues(n.args));return{encodedFunctionCalls:e.map(((e,n)=>({args_hash:t[n].hash,function_selector:e.selector.toField(),target_address:e.to.toField(),is_public:e.type==hd.PUBLIC,is_static:e.isStatic}))),hashedArguments:t}}get function_calls(){return this.functionCalls}get nonce(){return this._nonce}get hashedArguments(){return this._hashedArguments}hash(){return wi(this.toFields(),this.generatorIndex)}functionCallsToFields(){return this.functionCalls.flatMap((e=>[e.args_hash,e.function_selector,e.target_address,new si(e.is_public),new si(e.is_static)]))}static async fromFunctionCalls(e){const{encodedFunctionCalls:t,hashedArguments:n}=await this.create(e);return new Nb(t,n,0,si.random())}static async fromAppExecution(e,t=si.random()){if(e.length>4)throw new Error(`Expected at most 4 function calls, got ${e.length}`);const n=xe(e,Bb.empty(),4),{encodedFunctionCalls:s,hashedArguments:i}=await this.create(n);return new Nb(s,i,Ri.SIGNATURE_PAYLOAD,t)}static async fromFeeOptions(e,t){const n=await(t?.paymentMethod.getFunctionCalls(t?.gasSettings))??[],s=await(t?.paymentMethod.getFeePayer(t?.gasSettings)),i=!!s&&s.equals(e),r=xe(n,Bb.empty(),2),{encodedFunctionCalls:a,hashedArguments:o}=await this.create(r);return new Pb(a,o,Ri.FEE_PAYLOAD,si.random(),i)}}class Nb extends Sb{toFields(){return[...this.functionCallsToFields(),this.nonce]}}class Pb extends Sb{constructor(e,t,n,s,i){super(e,t,n,s),Tb.set(this,void 0),Us(this,Tb,i,"f")}toFields(){return[...this.functionCallsToFields(),this.nonce,new si(Hs(this,Tb,"f"))]}get is_fee_payer(){return Hs(this,Tb,"f")}}async function Ib(e,t){return wi([await e.hash(),await t.hash()],Ri.COMBINED_PAYLOAD)}Tb=new WeakMap;class Yb{constructor(e,t){this.chainId=e,this.protocolVersion=t}async createTxExecutionRequest(e){const{fee:t,calls:n,authWitnesses:s=[],hashedArguments:i=[]}=e;if(n.length>1)throw new Error(`Expected a single call, got ${n.length}`);const r=n[0];if(r.type!==hd.PRIVATE)throw new Error("Public entrypoints are not allowed");const a=await rb.fromValues(r.args),o=new $h(this.chainId,this.protocolVersion,t.gasSettings);return Promise.resolve(new ab(r.to,r.selector,a.hash,o,[...i,a],s))}}const Qb={AuthRegistry:new si(1),ContractInstanceDeployer:new si(1),ContractClassRegisterer:new si(1),MultiCallEntrypoint:new si(1),FeeJuice:new si(1),Router:new si(1)},jb={AuthRegistry:Gc.fromBigInt(1n),ContractInstanceDeployer:Gc.fromBigInt(2n),ContractClassRegisterer:Gc.fromBigInt(3n),MultiCallEntrypoint:Gc.fromBigInt(4n),FeeJuice:Gc.fromBigInt(5n),Router:Gc.fromBigInt(6n)};si.fromHexString("0x05aacae6775e3a713c38f2a8e39bf013f9cee72e38f3befa36bea9c7eca97122"),si.fromHexString("0x1690597a03eee6329599f421bdbb6b0c43bda1db2e114dcdf039ac5eb4c9dde2"),si.fromHexString("0x05e31fb75618f83df4717ded7456ccff11c6419dd56a58a00eb8df2bcc635516"),si.fromHexString("0x130a8231f562282c5c228a51dcc383b2a3d171715fa3131f30e956d7af9844d7"),si.fromHexString("0x1afcd58afb3ea3f37604fcd481af1a7d6fa353d62598120fc04c85cf29821354"),si.fromHexString("0x158c2016352bbee2941e759f8a687b27f9284e8a78a37c74d1f61b2c3e716d3a"),si.fromHexString("0x0c8b9a6369d51ef4d43bce40898037d472f2362bb45157671b58456c23d8ceb9"),new si(11121068431693264234253912047066709627593769337094408533543930778360n),new si(2889881020989534926461066592611988634597302675057895885580456197069n),new si(24399338136397901754495080759185489776044879232766421623673792970137n),si.fromHexString("0x2ec28b91a5f838506d6042915005ff55cf7a0a5f889a83b11faed33a31b486f2"),i(8891).Buffer;class Hb{constructor(e,t,n=jb.MultiCallEntrypoint){this.chainId=e,this.version=t,this.address=n}async createTxExecutionRequest(e){const{fee:t,calls:n,authWitnesses:s=[],hashedArguments:i=[]}=e,r=await Sb.fromAppExecution(n),a=this.getEntrypointAbi(),o=await rb.fromValues(Bd(a,[r])),l=ab.from({firstCallArgsHash:o.hash,origin:this.address,functionSelector:await ed.fromNameAndParameters(a.name,a.parameters),txContext:new $h(this.chainId,this.version,t.gasSettings),argsOfCalls:[...r.hashedArguments,...i,o],authWitnesses:s});return Promise.resolve(l)}getEntrypointAbi(){return{name:"entrypoint",isInitializer:!1,functionType:"private",isInternal:!1,isStatic:!1,parameters:[{name:"app_payload",type:{kind:"struct",path:"authwit::entrypoint::app::AppPayload",fields:[{name:"function_calls",type:{kind:"array",length:4,type:{kind:"struct",path:"authwit::entrypoint::function_call::FunctionCall",fields:[{name:"args_hash",type:{kind:"field"}},{name:"function_selector",type:{kind:"struct",path:"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"target_address",type:{kind:"struct",path:"authwit::aztec::protocol_types::address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_public",type:{kind:"boolean"}},{name:"is_static",type:{kind:"boolean"}}]}}},{name:"nonce",type:{kind:"field"}}]},visibility:"public"}],returnTypes:[],errorTypes:{}}}}class Ub{constructor(){}getAsset(){return Promise.resolve(Gc.ZERO)}getFunctionCalls(){return Promise.resolve([])}getFeePayer(){return Promise.resolve(Gc.ZERO)}}function Rb(e,t=.1){return{totalGas:e.gasUsed.totalGas.mul(1+t),teardownGas:e.gasUsed.teardownGas.mul(1+t)}}class Gb extends k_{constructor(e,t){super(t.data,t.clientIvcProof,t.contractClassLogs,t.enqueuedPublicFunctionCalls,t.publicTeardownFunctionCall),this.wallet=e}getPlainDataTx(){return new k_(this.data,this.clientIvcProof,this.contractClassLogs,this.enqueuedPublicFunctionCalls,this.publicTeardownFunctionCall)}send(){const e=(()=>this.wallet.sendTx(this.getPlainDataTx()))();return new Lb(this.wallet,e)}}class Zb{constructor(e){this.wallet=e,this.log=Pe("aztecjs:contract_interaction")}async proveInternal(e={}){const t=await this.create(e),n=await this.wallet.simulateTx(t,!e.skipPublicSimulation,void 0,!0);return await this.wallet.proveTx(t,n.privateExecutionResult)}async prove(e={}){const t=await this.proveInternal(e);return new Gb(this.wallet,t.toTx())}send(e={}){const t=(async()=>{const t=await this.proveInternal(e);return this.wallet.sendTx(t.toTx())})();return new Lb(this.wallet,t)}async estimateGas(e){const t=await this.create({...e,fee:{...e?.fee,estimateGas:!1}}),n=await this.wallet.simulateTx(t,!0,void 0,void 0,!1),{totalGas:s,teardownGas:i}=Rb(n,e?.fee?.estimatedGasPadding);return{gasLimits:s,teardownGasLimits:i}}async getDefaultFeeOptions(e){const t=e?.gasSettings?.maxFeesPerGas??(await this.wallet.getCurrentBaseFees()).mul(1+(e?.baseFeePadding??.5)),n=e?.paymentMethod??new Ub,s=mh.default({...e?.gasSettings,maxFeesPerGas:t});return this.log.debug("Using L2 gas settings",s),{gasSettings:s,paymentMethod:n}}async getFeeOptions(e){const t=await this.getDefaultFeeOptions(e.fee),n=t.paymentMethod,s=t.gasSettings.maxFeesPerGas,i=t.gasSettings.maxPriorityFeesPerGas;let r=t.gasSettings;if(e.fee?.estimateGas){const t={paymentMethod:n,gasSettings:r},a=await this.wallet.createTxExecutionRequest({...e,fee:t}),o=await this.wallet.simulateTx(a,!0,void 0,void 0,!1),{totalGas:l,teardownGas:c}=Rb(o,e.fee?.estimatedGasPadding);r=mh.from({maxFeesPerGas:s,maxPriorityFeesPerGas:i,gasLimits:l,teardownGasLimits:c}),this.log.verbose(`Estimated gas limits for tx: DA=${l.daGas} L2=${l.l2Gas} teardownDA=${c.daGas} teardownL2=${c.l2Gas}`)}return{gasSettings:r,paymentMethod:n}}}class Jb extends Zb{constructor(e,t,n,s){if(super(e),this.contractAddress=t,this.functionDao=n,this.args=s,s.some((e=>null==e)))throw new Error("All function interaction arguments must be defined and not null. Received: "+s)}async create(e={}){if(this.functionDao.functionType===hd.UNCONSTRAINED)throw new Error("Can't call `create` on an unconstrained function.");const t=[await this.request()],n=await this.getFeeOptions({calls:t,...e}),{nonce:s,cancellable:i}=e;return await this.wallet.createTxExecutionRequest({calls:t,fee:n,nonce:s,cancellable:i})}async request(){const e=Bd(this.functionDao,this.args);return{name:this.functionDao.name,args:e,selector:await ed.fromNameAndParameters(this.functionDao.name,this.functionDao.parameters),type:this.functionDao.functionType,to:this.contractAddress,isStatic:this.functionDao.isStatic,returnTypes:this.functionDao.returnTypes}}async simulate(e={}){if(this.functionDao.functionType==hd.UNCONSTRAINED)return this.wallet.simulateUnconstrained(this.functionDao.name,this.args,this.contractAddress,e?.from);const t=await this.create(),n=await this.wallet.simulateTx(t,!0,e?.from,e?.skipTxValidation);let s;return s=this.functionDao.functionType==hd.PRIVATE?n.getPrivateReturnValues().nested.length>0?n.getPrivateReturnValues().nested[0].values:n.getPrivateReturnValues().values:n.getPublicReturnValues()?.[0].values,s?qc(this.functionDao.returnTypes,s):[]}async simulateWithProfile(e={}){if(this.functionDao.functionType==hd.UNCONSTRAINED)throw new Error("Can't profile an unconstrained function.");const t=await this.create(),n=await this.wallet.simulateTx(t,!0,e?.from,e?.skipTxValidation,void 0,!0),s=this.functionDao.functionType==hd.PRIVATE?n.getPrivateReturnValues().nested?.[0].values:n.getPublicReturnValues()?.[0].values;return{returnValues:s?qc(this.functionDao.returnTypes,s):[],gateCounts:n.profileResult.gateCounts}}}var Xb=i(8891).Buffer;const Wb=async(e,t)=>Vb([e.toField(),t.selector.toField(),(await rb.fromValues(t.args)).hash]),Vb=e=>wi(e,Ri.AUTHWIT_INNER),qb=(e,t,n,s)=>wi([e.toField(),t,n,s],Ri.AUTHWIT_OUTER);class Kb{constructor(e,t){this.pxe=e,this.scopes=t}setScopes(e){this.scopes=e}getScopes(){return this.scopes}getAddress(){return this.getCompleteAddress().address}addCapsule(e){return this.pxe.addCapsule(e)}registerAccount(e,t){return this.pxe.registerAccount(e,t)}getRegisteredAccounts(){return this.pxe.getRegisteredAccounts()}registerSender(e){return this.pxe.registerSender(e)}getSenders(){return this.pxe.getSenders()}async removeSender(e){await this.pxe.removeSender(e)}registerContract(e){return this.pxe.registerContract(e)}registerContractClass(e){return this.pxe.registerContractClass(e)}getContracts(){return this.pxe.getContracts()}proveTx(e,t){return this.pxe.proveTx(e,t)}simulateTx(e,t,n,s,i,r){return this.pxe.simulateTx(e,t,n,s,i,r,this.scopes)}sendTx(e){return this.pxe.sendTx(e)}getTxEffect(e){return this.pxe.getTxEffect(e)}getTxReceipt(e){return this.pxe.getTxReceipt(e)}getNotes(e){return this.pxe.getNotes(e)}getPublicStorageAt(e,t){return this.pxe.getPublicStorageAt(e,t)}addNote(e){return this.pxe.addNote(e,this.getAddress())}addNullifiedNote(e){return this.pxe.addNullifiedNote(e)}getBlock(e){return this.pxe.getBlock(e)}getCurrentBaseFees(){return this.pxe.getCurrentBaseFees()}simulateUnconstrained(e,t,n,s){return this.pxe.simulateUnconstrained(e,t,n,s)}getPublicLogs(e){return this.pxe.getPublicLogs(e)}getContractClassLogs(e){return this.pxe.getContractClassLogs(e)}getBlockNumber(){return this.pxe.getBlockNumber()}getProvenBlockNumber(){return this.pxe.getProvenBlockNumber()}getNodeInfo(){return this.pxe.getNodeInfo()}addAuthWitness(e){return this.pxe.addAuthWitness(e)}getAuthWitness(e){return this.pxe.getAuthWitness(e)}getPXEInfo(){return this.pxe.getPXEInfo()}getContractClassMetadata(e,t=!1){return this.pxe.getContractClassMetadata(e,t)}getContractMetadata(e){return this.pxe.getContractMetadata(e)}getPrivateEvents(e,t,n,s=[this.getCompleteAddress().publicKeys.masterIncomingViewingPublicKey]){return this.pxe.getPrivateEvents(e,t,n,s)}getPublicEvents(e,t,n){return this.pxe.getPublicEvents(e,t,n)}getL1ToL2MembershipWitness(e,t,n){return this.pxe.getL1ToL2MembershipWitness(e,t,n)}getL2ToL1MembershipWitness(e,t){return this.pxe.getL2ToL1MembershipWitness(e,t)}}var $b=i(8891).Buffer;class ey extends Kb{constructor(e,t){super(e,[t.getAddress()]),this.account=t}createTxExecutionRequest(e){return this.account.createTxExecutionRequest(e)}getChainId(){return this.account.getChainId()}getVersion(){return this.account.getVersion()}isL1ToL2MessageSynced(e){return this.pxe.isL1ToL2MessageSynced(e)}async createAuthWit(e){let t;t=$b.isBuffer(e)?si.fromBuffer(e):e instanceof si?e:await this.getMessageHash(e);const n=await this.account.createAuthWit(t);return await this.pxe.addAuthWitness(n),n}async setPublicAuthWit(e,t){let n;return n=$b.isBuffer(e)?si.fromBuffer(e):e instanceof si?e:await this.getMessageHash(e),new Jb(this,jb.AuthRegistry,this.getSetAuthorizedAbi(),[n,t])}async getInnerHashAndConsumer(e){if("caller"in e&&"action"in e){const t=e.action instanceof Jb?await e.action.request():e.action;return{innerHash:await Wb(e.caller,t),consumer:t.to}}return $b.isBuffer(e.innerHash)?{innerHash:si.fromBuffer(e.innerHash),consumer:e.consumer}:{innerHash:e.innerHash,consumer:e.consumer}}getMessageHash(e){return(async(e,t)=>{const n=t.chainId,s=t.version;if("caller"in e){const t=e.action instanceof Jb?await e.action.request():e.action;return qb(t.to,n,s,await Wb(e.caller,t))}{const t=Xb.isBuffer(e.innerHash)?si.fromBuffer(e.innerHash):e.innerHash;return qb(e.consumer,n,s,t)}})(e,{chainId:this.getChainId(),version:this.getVersion()})}async lookupValidity(e,t){const{innerHash:n,consumer:s}=await this.getInnerHashAndConsumer(t),i=await this.getMessageHash(t),r={isValidInPrivate:!1,isValidInPublic:!1};return void 0!==await this.getAuthWitness(i)&&(r.isValidInPrivate=await new Jb(this,e,this.getLookupValidityAbi(),[s,n]).simulate()),r.isValidInPublic=await new Jb(this,jb.AuthRegistry,this.getIsConsumableAbi(),[e,i]).simulate(),r}getCompleteAddress(){return this.account.getCompleteAddress()}getAddress(){return this.getCompleteAddress().address}getSetAuthorizedAbi(){return{name:"set_authorized",isInitializer:!1,functionType:hd.PUBLIC,isInternal:!0,isStatic:!1,parameters:[{name:"message_hash",type:{kind:"field"},visibility:"private"},{name:"authorize",type:{kind:"boolean"},visibility:"private"}],returnTypes:[],errorTypes:{}}}getLookupValidityAbi(){return{name:"lookup_validity",isInitializer:!1,functionType:hd.UNCONSTRAINED,isInternal:!1,isStatic:!1,parameters:[{name:"message_hash",type:{kind:"field"},visibility:"private"}],returnTypes:[{kind:"boolean"}],errorTypes:{}}}getIsConsumableAbi(){return{name:"unconstrained_is_consumable",isInitializer:!1,functionType:hd.UNCONSTRAINED,isInternal:!1,isStatic:!1,parameters:[{name:"address",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},visibility:"private"},{name:"message_hash",type:{kind:"field"},visibility:"private"}],returnTypes:[{kind:"boolean"}],errorTypes:{}}}}class ty extends ey{constructor(e,t,n,s){super(e,t),this.secretKey=n,this.salt=s}getSecretKey(){return this.secretKey}async getEncryptionSecret(){return async function(e,t){const n=t.add(new ii(e.toBigInt()));return(await Xd(n)).y.toBigInt()<=(si.MODULUS-1n)/2n?n:new ii(ii.MODULUS-n.toBigInt())}(await this.getCompleteAddress().getPreaddress(),Gd(this.getSecretKey()))}}class ny extends Kb{constructor(e,t){super(e),this.entrypoint=t}async createTxExecutionRequest(e){let t=this.entrypoint;if(!t){const{l1ChainId:e,protocolVersion:n}=await this.pxe.getNodeInfo();t=new Yb(e,n)}return t.createTxExecutionRequest(e)}getChainId(){throw new Error("SignerlessWallet: Method getChainId not implemented.")}getVersion(){throw new Error("SignerlessWallet: Method getVersion not implemented.")}getPublicKeysHash(){throw new Error("SignerlessWallet: Method getPublicKeysHash not implemented.")}getCompleteAddress(){throw new Error("SignerlessWallet: Method getCompleteAddress not implemented.")}createAuthWit(e){throw new Error("SignerlessWallet: Method createAuthWit not implemented.")}isL1ToL2MessageSynced(e){return this.pxe.isL1ToL2MessageSynced(e)}}class sy{constructor(e,t,n){this.instance=e,this.artifact=t,this.wallet=n,this.methods={},t.functions.forEach((e=>{this.methods[e.name]=Object.assign(((...t)=>new Jb(this.wallet,this.instance.address,e,t)),{selector:()=>ed.fromNameAndParameters(e.name,e.parameters)})}))}get address(){return this.instance.address}get partialAddress(){return qd(this.instance)}withWallet(e){return new sy(this.instance,this.artifact,e)}}function iy(e){return t=e.toString("utf-8"),Ad.parseAsync(JSON.parse(t));var t}function ry(e){return function(e){if("object"!=typeof e)return!1;const t=e;if("string"!=typeof t.name)return!1;if(!Array.isArray(t.functions))return!1;for(const e of t.functions){if("string"!=typeof e.name)return!1;if("string"!=typeof e.functionType)return!1}return!0}(e)?e:function(e,t){try{return Ad.parse({name:e.name,functions:e.functions.map((t=>function(e,t){if(void 0===e.custom_attributes)throw new Error(`No custom attributes found for contract function ${e.name}. Try rebuilding the contract with the latest nargo version.`);const n=function(e){return e.custom_attributes.includes("private")?hd.PRIVATE:e.custom_attributes.includes("public")?hd.PUBLIC:e.is_unconstrained?hd.UNCONSTRAINED:hd.PRIVATE}(e),s=e.custom_attributes.includes("internal"),i=e.custom_attributes.includes("view");let r=e.abi.parameters.map(ay);(function(e){const t=e[0];return"struct"===t?.type.kind&&t.type.path.includes("ContextInputs")})(r)&&(r=r.slice(1));let a=[];if(n===hd.UNCONSTRAINED&&e.abi.return_type)a=[e.abi.return_type.abi_type];else{const n=`${t.name}::${e.name}_abi`,s=t.outputs.structs.functions.find((e=>"struct"===e.kind&&e.path===n));if(s){if("struct"!==s.kind)throw new Error("Could not generate contract function artifact");const e=s.fields.find((e=>"return_type"===e.name));e&&(a=[e.type])}}return{name:e.name,functionType:n,isInternal:s,isStatic:i,isInitializer:e.custom_attributes.includes("initializer"),parameters:r,returnTypes:a,bytecode:e.bytecode,debugSymbols:e.debug_symbols,errorTypes:e.abi.error_types,...e.assert_messages?{assertMessages:e.assert_messages}:void 0,...e.verification_key?{verificationKey:e.verification_key}:void 0}}(t,e))),outputs:e.outputs,storageLayout:oy(e),notes:ly(e),fileMap:e.file_map})}catch(t){throw new Error(`Could not generate contract artifact for ${e.name}: ${t}`)}}(e)}function ay(e){const{visibility:t}=e;if("databus"===t)throw new Error(`Unsupported visibility ${e.visibility} for noir contract function parameter ${e.name}.`);return{...e,visibility:t}}function oy(e){const t=(e.outputs.globals.storage?e.outputs.globals.storage:[]).find((t=>{const n=t.fields.find((e=>"contract_name"===e.name))?.value;return n.value===e.name})),n=t?t.fields.find((e=>"fields"==e.name)).value.fields:[];return 0===n.length?{}:n.reduce(((e,t)=>{const n=t.name,s=t.value.fields[0].value;return e[n]={slot:s.value},e}),{})}function ly(e){const t=e.outputs.globals.notes;return t?t.reduce(((e,t)=>{const n=t.fields,s=n.find((e=>"integer"===e.kind)),i=n.find((e=>"string"===e.kind)),r=n.find((e=>"struct"===e.kind));if(!s||!i||!r)throw new Error(`Could not find note type id, name or fields for note ${t}`);const a=s.value,o=i.value,l=r.fields.map((e=>({name:e.name,index:parseInt(e.value.fields[0].value.value,16),nullable:e.value.fields[1].value.value})));return e[o]={id:a,typ:o,fields:l},e}),{}):{}}i(8891).Buffer;const cy=JSON.parse('{"transpiled":true,"noir_version":"1.0.0-beta.1+c4e38215cedb5afb","name":"ContractClassRegisterer","functions":[{"name":"assert_class_id_is_registered","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZXLioQwEEX/JWsXVqVMrP6VYWh8xCYgKj4GBul/nyjGdmjtzTDQC3ep1Mm9xaUgo8hNOtyutirqTlw+RlHWWdLbunLVKEDOd12TVFPZ9UnbiwsohYEwVT4dNd4DUdjSiIvS9+AJRlR6gRFjXmGGPZgpXmAZIryGQZGM1jmIHtqocE8cUPlJgKIHrXlPXSrpxQnCX/RnIIDOZA6Sic5kDpJRZzIHyeg/J0Mhe5gA4xXW0WwQ/7cB7xmwI5c3TKRfG0AI2kfqziy3FnurEDOvu8BPE2H4XhO5Im1tWdrbdfvHuOuvpLVJWpqlLIYq23T778Z3/PumrTOTD62ZlOaek/8B","brillig_names":[],"verification_key":"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"},{"name":"broadcast_private_function","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"},"visibility":"private"},{"name":"artifact_metadata_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unconstrained_functions_artifact_tree_root","type":{"kind":"field"},"visibility":"private"},{"name":"private_function_tree_sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"},{"name":"private_function_tree_leaf_index","type":{"kind":"field"},"visibility":"private"},{"name":"artifact_function_tree_sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"},{"name":"artifact_function_tree_leaf_index","type":{"kind":"field"},"visibility":"private"},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"metadata_hash","type":{"kind":"field"}},{"name":"vk_hash","type":{"kind":"field"}}],"kind":"struct","path":"events::private_function_broadcasted::InnerPrivateFunction"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"7ZndquowEIXfpde9yCSTn/FVDpuNP92bgqhUPXAQ3/0kYtotdpRGDseLuRHTrmWmX5POop6qVbM4fn+2m6/tvpr9OlXr7XJ+aLebODpVgJdj+918k4b7w7w7VDNwTtdVs1mlr16f6+qrXTfVzPlzfSfW2vmrWOtAvZhgTEwYrmKjNDwWgzMU+joQBrl2elRvB7n3g9rTmNo4k9UI6kb9UVdghQxDxgkZhowXMgyZIGQYMiRkxsloJWQYMiBkGDJayDBkjJBhyKCQYchIBubISAbmyEgG5shIBubISAZmyBjJwBwZycAcGcnAHBnJwBwZFDIMGcnAHBnJwByZ987AaOxABukJGQ3a5UoA7Ytk3jsD/08yr2dgVJTFCDr0Ym/TBKj+9QSjicxqmy/baud+TpA8o1nFEuDV44wxj4sKKt+EgD93OVx+f7TjO4O5pvhoeHLRAQzlCcDSs8UZiPrVSfeM8M3qsS/XQwryfqS4Pm5ucBwsuna9br8/b/52Vulj/L2bcZA3bBhuZ9x/H9z7qIcON9nhJzvCZAdNc8QBJGEYrY1C37mUutsBIRR4aLqHVIEHCjy6wGMKPFjgsQUeV+ApWAdUsA6oYB3EYyUmKDHpEpMpMWGJaXw1ODeY8N7kSky+xBRKTFRgAlVigqmmONJJOt5jDWUnhqFJxSTGt8EHlnMc/p537XyxblJHS2ePm2VucHF4+LPLZ3IL3HXbZbM6dk1qhkMfTAvSQI1wARwHqGv0/UM/nfaqDiqfBjA1QOivNwm0r43v/aG2JpYYy/wL","brillig_names":["pop_capsule","debug_log_oracle_wrapper","emit_contract_class_unencrypted_log_private"],"verification_key":"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"},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"bY/dCoMwDIXfJde9aDp101eRIVWjFEortQ6G+O6LQ6T7uQnnhC+HnBV6apexMW7wM1T1CtZ3Ohrv2K2bgDYYa83YpGuQ+8DLm58n7XY7Rx0iVPlNALkeqqLg68FYYnndxA+IEqU6WNaqPHHMsv98iSevUH7w943tQwejW0vH68PiuqRJfE70VWoKvqN+CbTXS5rxrDEXSnIsR78A","brillig_names":["sync_notes"]},{"name":"broadcast_unconstrained_function","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"},"visibility":"private"},{"name":"artifact_metadata_hash","type":{"kind":"field"},"visibility":"private"},{"name":"private_functions_artifact_tree_root","type":{"kind":"field"},"visibility":"private"},{"name":"artifact_function_tree_sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"},{"name":"artifact_function_tree_leaf_index","type":{"kind":"field"},"visibility":"private"},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"metadata_hash","type":{"kind":"field"}}],"kind":"struct","path":"events::unconstrained_function_broadcasted::InnerUnconstrainedFunction"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"7ZjdyuIwEIbvpcc9yEwmP+OtLMuHP/0+CqVK1YVFvPdNxLSKqdLIYg9yIk7zPs34ZuoMPRWbanX8+arb7+2+WPw6Fc12vTzU29ZFpwLocm2/W7Y+3B+W3aFYgNZYFlW78V8Nnsviu26qYqHNuXwQI2pzFSNa7sUMMTGTvYqlQHguBi3Z9nkQDHLUGNWrQW7MoDYcU0stg5pA3Kl/lwWo7MyIMzo7M+KMyc6MOGOzMyPOcHYm7gyK7MyIM5CdGXEGszMjzsjszIgzlJ0ZcWbeMzBJNThD/MIZBNQhEyD1pjPznoE/6cy8Z+BPOjPvGfiTzrw/A5PgICZA24uN8htI8b83iE5kmgmujGZFtxt4JjqrGDKBMVbB86SsCIdg6bYzwOX+0Y5vrO7vz1K8uD9IDhuA4lfFaZn76uRHj2hm+ai382EB4XlkVx93B+yCVVc3Tf3zdffKTfiP+Mwh+62lvTl5HO/FTwk9mTCTCTuZ4GmEC8ALOVrNbPtpR4iHJ4ApgVEJjE5gTAJjExiezrhrKRCkQJgCyRSIUiCVAukUyKRANgVKqQhIqQiIV4TWA0SPEKZAMgWiFEilQHoq5CL0Uoo3Cg4k2aHruNHK70ZqInJ24Z9lVy9XTeVblF89tuvQsVx4+LsLK6Gn7brtutocu8p3t6Gx+XOQUBJcKs0FhCWZ/l/cLxtdWh2WAWwJKPvf6wVoSml63pbKLZ9dmv8A","brillig_names":["pop_capsule","debug_log_oracle_wrapper","emit_contract_class_unencrypted_log_private"],"verification_key":"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"},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAA/92c927bMBDG5URKIieOndG9927leHeme+/W/dsdfosWAtqHSPu09Zfw7DPDAilCovkqQJCto+9+PFHUiTy6EG1s3cFeMJ9jc5w2R5xfjMY3Kbtqjtn2tqpHXVkoxgIB4wQB4yQBY0zAmBAwThEwThMwzhAwpgSMRQLGWQLGOQLGEgHjPAFjmYCxQsC4EIAxBOciCeeSR04d24fiXY52fhvdRcC4m4BxDwHjXgLGfQSM+wkYDxAwHiRgPETAeJiA8QgB41ECxmMEjMcJGE8QMJ4kYDxFwHiagPEMAeNZAsZzBIznCRgvEDBeJGC8RMB4mYDxCgFjRsBYJWBcIWCsETDWCRgbBIxNAsYWAWObgLFDwHiVgPEaAeN1AsYbBIw3CRhvETCuEjDeJmC8Q8B4l4DxHgHjfQLGBwSMDwkYHxEwPiZgfELA+JSA8RkB43MCxhcEjC8JGF8RML4mYHxDwPg2AGMIzncknO9JOLuBOKMPFvTEYMfCLSyMwsIjLOzBwhksTMHCDyyswMIFLAxA4j0S25E4XhnsSHxGUjESdpEEiyRTJHEiSRJJiEjyQxIdktSQBIYkKyQxIUno6GA/NtiRRIIkDSRBIMkAk/iYJMckNCZ5MYmKSUpMAmKSDZNYmCRCrTDJgUkEDNJjEByDzBjExSApBiExyIdBNAxSYRAIgywYxJBBArzk4iUSL2l4CcJLBoJ4BMkIQhHkIYhCkIIgAA9ZPMTwkEAnjE4OnQhuUtwAaFzd6M+bNJIf5pia44SSe1xEV00tuz71t7POx9RRP4/8tdTonAmiv9ES/WkY/kwW2t7LR/p1XcTupDl285Evu/k4k5RZU2XWrDJSnzDXu14P66/qSsnyUaTqIraLYWzXCpY9fV20TOwXo5Btc2NRsrYnPLZ/pO8oSZl8xFOwZHG+uR4iS5RMri/snFfl7LY1Y8mEBZu035LyjWwfjEyuaax0+muvjXbY9lrP/l17rVf/x/YaW7I431yPv22vum3Z7TWJRpv0pSKbUrKflmxayX7lI9sNxdE0n8P2yRvPYH3v+X6GLTn4tS1s0/nIH9IGJ9W5RPlv3T+6vCVLlSzOx+0UzfdY2dG6hCOxytfN97I5TqnfyO8rDvtTlv0xbsc52y+po3zqKI+2dsl8njU72tA3+U20+d7Fvmq+Z9vamh1XP+lPf6vm6gs98n8R/bNB9NeH+ufC8A/jqlIY/w/1z4fh74v+chj9TdFfCaO/IfoXguhfGcYJ+s927DhhSZ33GNduOU4Q+0WLNVScsGTx2P7RcQJkyw7WikNm9wHLDjvLDjsuXfMedS141FXcoXUsedRV8agr9ajL53Wc86jLp7/KHnXNeNTls9379Jdcx7DjVVnmitOiAPqLYfQP+37po/W7ma6T2E+s8l8tP88F8fNoHEr6M+0LVyzl0/ZWn9div+TgEe6iQ7adP0D70mj3O+1GZxDSV5srnaxg6RdW+5x+L9L9iy7veva74j6Pvs5cYxBl5VdssZLNW7JEyYRRj0G44mKf/Fvxv7Zfccjs/nmr13IxGm9r+n6cjUb3c5z7r3urvfHHLuuMRn8SjY8xRpb9xCr/3Xy3+7rt3iP9Vq/ar/X6vUbv8+f6p96ipV/7EH76DXVGL3ipUwAA","debug_symbols":"tZZBCoMwEEXvknUWzrQa61VKkahRAiFK1EIR794o0kq7/puQCZM3ZPHCX0RjqrkrrW/7URT3Rbi+1pPtfayWVYoqWOdsV56PRbItlPB+YRy03+px0mESRZpLYXwjiiyL11vrTNyqVf41Kj4alfo0prw+ZCRfYOQrjJzCyBmMrGDkHEa+ociUwMgEI8McJJiDBHOQYA4SzEGCOUgwBwnmIMMcZJiDDHOQYQ4yxsE1Vk8drK6cOQJEO/v6lCem12B+osUQ+to0czBbyPjmi+3tV5Yp779+LIgzSReKQ+KgNw==","brillig_names":["process_log"]},{"name":"register","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"artifact_hash","type":{"kind":"field"},"visibility":"private"},{"name":"private_functions_root","type":{"kind":"field"},"visibility":"private"},{"name":"public_bytecode_commitment","type":{"kind":"field"},"visibility":"private"},{"name":"emit","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"","brillig_names":["pop_capsule","notify_created_nullifier_oracle_wrapper","debug_log_oracle_wrapper","emit_contract_class_unencrypted_log_private","directive_integer_quotient","directive_invert"],"verification_key":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VZy67aQAwdSEJIuAEKn3Cl7tomXJ47Fn3c30AFPqHrrLppP7qMGCcH46siYVfFEpoknhyfOXZmJqHjztY//TrhOA5tz10b9dmGtrzPKkWs0pJn50F4dh+EZ/QgPGNFnh2Bp2/peUvc+ZlL3fl5bC7iTT7BEdzk/gYAwX6HNgttF/yKCakyYZBa+Otyvs/cpSnzf8kCZmqDvyD8vg1+Sbw/1y0+joXiRqF9rVstX+Eeb0U4xuIlXPJ1wfeF+SLwfWU+rOFvzId1T5xIN1qYlOtqY50XGlsKY+u80TrXaofXSOvcmdZoRTnPGB/On/gU1Kdu+fSYLwZfxnwJ+Eh/3z5DP577FPp9hONP0IfXZ+Su65n8lH/U3aK+YgP8k82lHPD8xPVlbPRhDmLQ85npY7FuoD4W+nt9pm/wp2Nvae0ai5ieqBFp1sf+zJeBL64v4+ThPIY4iEU8Etb/QzgfhbYH99D9YyF+j8W/4C1cQ404ViRco/7++Xwfjgfh52voJ93jructvc31ci7N4Xr4qwY/s+F/JPzcBn9J+AMb/GZv82SCPysJv7Dh38xBQ5v6afaWIxv+B8Ifm+DPD7QOv3OtNXNEOJ7Adb35u6pu2SNh/JxxtdojTRgfrg+uwd43FbiOBR/P4VSIMxXiSFiZItaTItboPx1jXxFroIg1VMTSzGOqiKWpV66IVShiada9pl6UR2mf5m0b2vJOk/ZpiviVtE/TfJcnram+YkFDHF/C+v9gOg9MeFYzWnPoWacYGLswin3rek3xC4EP8c4F3z0fZw+L9XGzXmxOW7JqOds0+SwYV34N34twPsb+0tov7fsUtS6ld/8h6OotBl/BfAn4iKP07j804n+L/hh/LPj4+n9rLifuej0csHHjN6+typjb74HSt3rj+Wtx67NJ8XN3PV//q++NqA/fS+cC17Hg4/uTXIiTC3EeEYt/s0cNfV2TTnHd+rVyuVq3f3TRXJS4y/8BHIufsP6/wjmOjdp75vzjalcdX3bH3WK338+/7yYM31sXdPoDg5oBSR0fAAA=","debug_symbols":"tdfBaoQwFIXhd8k6C29iEuOrlDJEjUMgRIlaKOK7Nw7SDp3lcDbDRK6fG3/w7mzw3Xa/hTROC2s/dhan3q1hSuW0H5x1OcQY7rfny6w6f6x6zC+zS+dxWV1eWasaznwaWKt1uXsM0Ze/5uAvg0Zcg8b8DipxfHJmNQo2KLhBwRYEU1XBZILJAiZLmFzDZAWTNUw2MLmBybAGCdYgwRokWIMEa5BgDRKsQYI1SLAG6b0GrbwGy6vwQlsYLSocTTha4GiJo2scrXC0xtEGR+NqFLgaJa5GCarxKKcvl4Pror+2pnFL/dMStX7P/t8+Neep98OW/blZ/S1VZ3pS8Vo9vjzKgWTNSdrykPKgHw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"globals":{},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"artifact_hash","type":{"kind":"field"}},{"name":"private_functions_root","type":{"kind":"field"}},{"name":"public_bytecode_commitment","type":{"kind":"field"}},{"name":"emit","type":{"kind":"boolean"}}],"kind":"struct","path":"ContractClassRegisterer::register_parameters"}}],"kind":"struct","path":"ContractClassRegisterer::register_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"}}],"kind":"struct","path":"ContractClassRegisterer::assert_class_id_is_registered_parameters"}}],"kind":"struct","path":"ContractClassRegisterer::assert_class_id_is_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"}},{"name":"artifact_metadata_hash","type":{"kind":"field"}},{"name":"private_functions_artifact_tree_root","type":{"kind":"field"}},{"name":"artifact_function_tree_sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}}},{"name":"artifact_function_tree_leaf_index","type":{"kind":"field"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"metadata_hash","type":{"kind":"field"}}],"kind":"struct","path":"events::unconstrained_function_broadcasted::InnerUnconstrainedFunction"}}],"kind":"struct","path":"ContractClassRegisterer::broadcast_unconstrained_function_parameters"}}],"kind":"struct","path":"ContractClassRegisterer::broadcast_unconstrained_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"}},{"name":"artifact_metadata_hash","type":{"kind":"field"}},{"name":"unconstrained_functions_artifact_tree_root","type":{"kind":"field"}},{"name":"private_function_tree_sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}}},{"name":"private_function_tree_leaf_index","type":{"kind":"field"}},{"name":"artifact_function_tree_sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}}},{"name":"artifact_function_tree_leaf_index","type":{"kind":"field"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"metadata_hash","type":{"kind":"field"}},{"name":"vk_hash","type":{"kind":"field"}}],"kind":"struct","path":"events::private_function_broadcasted::InnerPrivateFunction"}}],"kind":"struct","path":"ContractClassRegisterer::broadcast_private_function_parameters"}}],"kind":"struct","path":"ContractClassRegisterer::broadcast_private_function_abi"}]}},"file_map":{"26":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\\nuse crate::hash::Hasher;\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2 {\\n    cache: [Field; 3],\\n    state: [Field; 4],\\n    cache_size: u32,\\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2 {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub fn new(iv: Field) -> Poseidon2 {\\n        let mut result =\\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let two_pow_64 = 18446744073709551616;\\n        let iv: Field = (in_len as Field) * two_pow_64;\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n\\npub struct Poseidon2Hasher {\\n    _state: [Field],\\n}\\n\\nimpl Hasher for Poseidon2Hasher {\\n    fn finish(self) -> Field {\\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..self._state.len() {\\n            sponge.absorb(self._state[i]);\\n        }\\n        sponge.squeeze()\\n    }\\n\\n    fn write(&mut self, input: Field) {\\n        self._state = self._state.push_back(input);\\n    }\\n}\\n\\nimpl Default for Poseidon2Hasher {\\n    fn default() -> Self {\\n        Poseidon2Hasher { _state: &[] }\\n    }\\n}\\n"},"52":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\\n    assert(false, message);\\n    crate::mem::zeroed()\\n}\\n"},"62":{"path":"/build-volume/noir-projects/noir-contracts/contracts/contract_class_registerer_contract/src/capsule.nr","source":"// We should extract this to a shared lib in aztec-nr once we settle on a design for capsules\\n\\n// docs:start:pop_capsule\\n#[oracle(popCapsule)]\\nunconstrained fn pop_capsule_oracle<let N: u32>() -> [Field; N] {}\\n\\n// A capsule is a \\"blob\\" of data that is passed to the contract through an oracle.\\npub unconstrained fn pop_capsule<let N: u32>() -> [Field; N] {\\n    pop_capsule_oracle()\\n}\\n// docs:end:pop_capsule\\n"},"67":{"path":"/build-volume/noir-projects/noir-contracts/contracts/contract_class_registerer_contract/src/main.nr","source":"mod events;\\nmod capsule;\\n\\nuse dep::aztec::macros::aztec;\\n\\n#[aztec]\\npub contract ContractClassRegisterer {\\n    use dep::aztec::protocol_types::{\\n        abis::log_hash::LogHash,\\n        constants::{\\n            ARTIFACT_FUNCTION_TREE_MAX_HEIGHT, FUNCTION_TREE_HEIGHT,\\n            MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS,\\n            MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS,\\n            MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\\n        },\\n        contract_class_id::ContractClassId,\\n    };\\n\\n    use dep::aztec::{\\n        context::PrivateContext, macros::functions::private,\\n        oracle::logs::emit_contract_class_unencrypted_log_private,\\n    };\\n\\n    use crate::events::{\\n        class_registered::ContractClassRegistered,\\n        private_function_broadcasted::{\\n            ClassPrivateFunctionBroadcasted, InnerPrivateFunction, PrivateFunction,\\n        },\\n        unconstrained_function_broadcasted::{\\n            ClassUnconstrainedFunctionBroadcasted, InnerUnconstrainedFunction,\\n            UnconstrainedFunction,\\n        },\\n    };\\n\\n    // docs:start:import_pop_capsule\\n    use crate::capsule::pop_capsule;\\n\\n    // docs:end:import_pop_capsule\\n\\n    #[private]\\n    fn register(\\n        artifact_hash: Field,\\n        private_functions_root: Field,\\n        public_bytecode_commitment: Field,\\n        emit: bool,\\n    ) {\\n        // TODO: Validate public_bytecode_commitment is the correct commitment of packed_public_bytecode\\n        // TODO: We should be able to remove public_bytecode_commitment from the input if it\'s calculated in this function\\n        // docs:start:pop_capsule\\n        let packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] =\\n            unsafe { pop_capsule() };\\n        // docs:end:pop_capsule\\n        // First field element contains the length of the bytecode\\n        let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\\n        let bytecode_length_in_fields: u32 =\\n            (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\\n        assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\\n\\n        // The first value in the running hash is the bytecode length in bytes\\n        let mut computed_public_bytecode_commitment = packed_public_bytecode[0];\\n        // We can hash up to MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS - 1, since the first element is the length\\n        for i in 0..(MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS - 1) {\\n            // While we are forced to run the hash MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS times in the circuit,\\n            // we want the bytecode commitment to be based on the actual length\\n            if (i < bytecode_length_in_fields) {\\n                // We skip the first element when hashing since it is the length\\n                computed_public_bytecode_commitment = std::hash::poseidon2::Poseidon2::hash(\\n                    [packed_public_bytecode[i + 1], computed_public_bytecode_commitment],\\n                    2,\\n                );\\n            } else {\\n                // Any bytes after the bytecode length must be 0\\n                assert_eq(packed_public_bytecode[i + 1], 0);\\n            }\\n        }\\n        assert_eq(computed_public_bytecode_commitment, public_bytecode_commitment);\\n\\n        // Compute contract class id from preimage\\n        let contract_class_id = ContractClassId::compute(\\n            artifact_hash,\\n            private_functions_root,\\n            public_bytecode_commitment,\\n        );\\n\\n        // Emit the contract class id as a nullifier to be able to prove that this class has been (not) registered\\n        context.push_nullifier(contract_class_id.to_field());\\n\\n        // Broadcast class info including public bytecode\\n        dep::aztec::oracle::debug_log::debug_log_format(\\n            \\"ContractClassRegistered: {}\\",\\n            [\\n                contract_class_id.to_field(),\\n                artifact_hash,\\n                private_functions_root,\\n                public_bytecode_commitment,\\n            ],\\n        );\\n\\n        // TODO(#10007): Drop this conditional and always emit the bytecode. We allow skipping the broadcast\\n        // as a stopgap solution to allow txs to fit in Sepolia when we broadcast public bytecode.\\n        if emit {\\n            let event = ContractClassRegistered {\\n                contract_class_id,\\n                version: 1,\\n                artifact_hash,\\n                private_functions_root,\\n                packed_public_bytecode,\\n            };\\n            emit_contract_class_log(&mut context, event.serialize_non_standard());\\n        }\\n    }\\n\\n    #[private]\\n    fn broadcast_private_function(\\n        contract_class_id: ContractClassId,\\n        artifact_metadata_hash: Field,\\n        unconstrained_functions_artifact_tree_root: Field,\\n        private_function_tree_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\\n        private_function_tree_leaf_index: Field,\\n        artifact_function_tree_sibling_path: [Field; ARTIFACT_FUNCTION_TREE_MAX_HEIGHT],\\n        artifact_function_tree_leaf_index: Field,\\n        function_data: InnerPrivateFunction,\\n    ) {\\n        let private_bytecode: [Field; MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS] =\\n            unsafe { pop_capsule() };\\n\\n        let event = ClassPrivateFunctionBroadcasted {\\n            contract_class_id,\\n            artifact_metadata_hash,\\n            unconstrained_functions_artifact_tree_root,\\n            private_function_tree_sibling_path,\\n            private_function_tree_leaf_index,\\n            artifact_function_tree_sibling_path,\\n            artifact_function_tree_leaf_index,\\n            function: PrivateFunction {\\n                selector: function_data.selector,\\n                metadata_hash: function_data.metadata_hash,\\n                vk_hash: function_data.vk_hash,\\n                bytecode: private_bytecode,\\n            },\\n        };\\n        dep::aztec::oracle::debug_log::debug_log_format(\\n            \\"ClassPrivateFunctionBroadcasted: {}\\",\\n            [\\n                contract_class_id.to_field(),\\n                artifact_metadata_hash,\\n                unconstrained_functions_artifact_tree_root,\\n                function_data.selector.to_field(),\\n                function_data.vk_hash,\\n                function_data.metadata_hash,\\n            ],\\n        );\\n        emit_contract_class_log(&mut context, event.serialize_non_standard());\\n    }\\n\\n    #[private]\\n    fn broadcast_unconstrained_function(\\n        contract_class_id: ContractClassId,\\n        artifact_metadata_hash: Field,\\n        private_functions_artifact_tree_root: Field,\\n        artifact_function_tree_sibling_path: [Field; ARTIFACT_FUNCTION_TREE_MAX_HEIGHT],\\n        artifact_function_tree_leaf_index: Field,\\n        function_data: InnerUnconstrainedFunction,\\n    ) {\\n        let unconstrained_bytecode: [Field; MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS] =\\n            unsafe { pop_capsule() };\\n        let event = ClassUnconstrainedFunctionBroadcasted {\\n            contract_class_id,\\n            artifact_metadata_hash,\\n            private_functions_artifact_tree_root,\\n            artifact_function_tree_sibling_path,\\n            artifact_function_tree_leaf_index,\\n            function: UnconstrainedFunction {\\n                selector: function_data.selector,\\n                metadata_hash: function_data.metadata_hash,\\n                bytecode: unconstrained_bytecode,\\n            },\\n        };\\n        dep::aztec::oracle::debug_log::debug_log_format(\\n            \\"ClassUnconstrainedFunctionBroadcasted: {}\\",\\n            [\\n                contract_class_id.to_field(),\\n                artifact_metadata_hash,\\n                private_functions_artifact_tree_root,\\n                function_data.selector.to_field(),\\n                function_data.metadata_hash,\\n            ],\\n        );\\n        emit_contract_class_log(&mut context, event.serialize_non_standard());\\n    }\\n\\n    #[contract_library_method]\\n    fn emit_contract_class_log<let N: u32>(context: &mut PrivateContext, log: [Field; N]) {\\n        let contract_address = context.this_address();\\n        let counter = context.next_counter();\\n\\n        // The log preimage is too large for the hash to compile (16,200 fields, 518,400 bytes), so we do this via a\\n        // specialized oracle.\\n        // A malicious oracle cannot force us to use an incorrect bytecode:\\n        // - Contract class -> we will commit to the packed bytecode (currently a TODO)\\n        // - Private function -> we provide a membership proof\\n        // - Unconstrained function -> we provide a membership proof\\n        // However, the sequencer will be required to know a contract\'s preimage if it is called and the sequencer\\n        // cannot prove non-registration. Therefore, it is possible that a malicious oracle might prevent sequencers\\n        // from including transactions with calls to certain badly-broadcasted contracts.\\n        // TODO(#8978): review correctness\\n        let log_hash =\\n            unsafe { emit_contract_class_unencrypted_log_private(contract_address, log, counter) };\\n\\n        // 40 = addr (32) + raw log len (4) + processed log len (4)\\n        context.contract_class_logs_hashes.push(\\n            LogHash { value: log_hash, counter, length: 40 + (N as Field) * 32 },\\n        );\\n    }\\n\\n    #[private]\\n    fn assert_class_id_is_registered(contract_class_id: ContractClassId) {\\n        context.push_nullifier_read_request(contract_class_id.to_field());\\n    }\\n}\\n"},"75":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use dep::protocol_types::debug_log::debug_log_format;\\n\\nuse crate::{\\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\\n    hash::{ArgsHasher, hash_args_array},\\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\\n    messaging::process_l1_to_l2_message,\\n    oracle::{\\n        block_header::get_block_header_at,\\n        call_private_function::call_private_function_internal,\\n        enqueue_public_function_call::{\\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\\n            set_public_teardown_function_call_internal,\\n        },\\n        execution_cache,\\n        key_validation_request::get_key_validation_request,\\n        notes::{notify_created_nullifier, notify_nullified_note},\\n    },\\n};\\nuse dep::protocol_types::{\\n    abis::{\\n        call_context::CallContext,\\n        function_selector::FunctionSelector,\\n        log::Log,\\n        log_hash::LogHash,\\n        max_block_number::MaxBlockNumber,\\n        note_hash::NoteHash,\\n        nullifier::Nullifier,\\n        private_call_request::PrivateCallRequest,\\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\\n        private_log::PrivateLogData,\\n        public_call_request::PublicCallRequest,\\n        read_request::ReadRequest,\\n        side_effect::Counted,\\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    block_header::BlockHeader,\\n    constants::{\\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\\n    },\\n    messaging::l2_to_l1_message::L2ToL1Message,\\n    traits::Empty,\\n};\\n\\n// When finished, one can call .finish() to convert back to the abi\\npub struct PrivateContext {\\n    // docs:start:private-context\\n    pub inputs: PrivateContextInputs,\\n    pub side_effect_counter: u32,\\n\\n    pub min_revertible_side_effect_counter: u32,\\n    pub is_fee_payer: bool,\\n\\n    pub args_hash: Field,\\n    pub return_hash: Field,\\n\\n    pub max_block_number: MaxBlockNumber,\\n\\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\\n\\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\\n\\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\\n    pub public_teardown_call_request: PublicCallRequest,\\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\\n    // docs:end:private-context\\n\\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\\n    pub historical_header: BlockHeader,\\n\\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\\n\\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\\n    // fetching the same request multiple times.\\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\\n}\\n\\nimpl PrivateContext {\\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\\n        PrivateContext {\\n            inputs,\\n            side_effect_counter: inputs.start_side_effect_counter + 1,\\n            min_revertible_side_effect_counter: 0,\\n            is_fee_payer: false,\\n            args_hash,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            historical_header: inputs.historical_header,\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n\\n    pub fn msg_sender(self) -> AztecAddress {\\n        self.inputs.call_context.msg_sender\\n    }\\n\\n    pub fn this_address(self) -> AztecAddress {\\n        self.inputs.call_context.contract_address\\n    }\\n\\n    pub fn chain_id(self) -> Field {\\n        self.inputs.tx_context.chain_id\\n    }\\n\\n    pub fn version(self) -> Field {\\n        self.inputs.tx_context.version\\n    }\\n\\n    pub fn selector(self) -> FunctionSelector {\\n        self.inputs.call_context.function_selector\\n    }\\n\\n    pub fn get_args_hash(self) -> Field {\\n        self.args_hash\\n    }\\n\\n    pub fn push_note_hash(&mut self, note_hash: Field) {\\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\\n\\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\\n        debug_log_format(\\n            \\"Context.note_hashes, after pushing new note hash: {0}\\",\\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\\n        );\\n    }\\n\\n    pub fn push_nullifier(&mut self, nullifier: Field) {\\n        notify_created_nullifier(nullifier);\\n        self.nullifiers.push(\\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\\n        );\\n    }\\n\\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\\n        let nullifier_counter = self.next_counter();\\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\\n        self.nullifiers.push(\\n            Nullifier {\\n                value: nullifier,\\n                note_hash: nullified_note_hash,\\n                counter: nullifier_counter,\\n            },\\n        );\\n    }\\n\\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\\n    // included in).\\n    pub fn get_block_header(self) -> BlockHeader {\\n        self.historical_header\\n    }\\n\\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\\n    // of historical header.\\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\\n        get_block_header_at(block_number, self)\\n    }\\n\\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\\n        execution_cache::store(returns_hasher.fields);\\n        self.return_hash = returns_hasher.hash();\\n    }\\n\\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\\n        PrivateCircuitPublicInputs {\\n            call_context: self.inputs.call_context,\\n            args_hash: self.args_hash,\\n            returns_hash: self.return_hash,\\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\\n            is_fee_payer: self.is_fee_payer,\\n            max_block_number: self.max_block_number,\\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\\n            key_validation_requests_and_generators: self\\n                .key_validation_requests_and_generators\\n                .storage(),\\n            note_hashes: self.note_hashes.storage(),\\n            nullifiers: self.nullifiers.storage(),\\n            private_call_requests: self.private_call_requests.storage(),\\n            public_call_requests: self.public_call_requests.storage(),\\n            public_teardown_call_request: self.public_teardown_call_request,\\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\\n            end_side_effect_counter: self.side_effect_counter,\\n            private_logs: self.private_logs.storage(),\\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\\n            historical_header: self.historical_header,\\n            tx_context: self.inputs.tx_context,\\n        }\\n    }\\n\\n    pub fn set_as_fee_payer(&mut self) {\\n        dep::protocol_types::debug_log::debug_log_format(\\n            \\"Setting {0} as fee payer\\",\\n            [self.this_address().to_field()],\\n        );\\n        self.is_fee_payer = true;\\n    }\\n\\n    pub fn end_setup(&mut self) {\\n        // dep::protocol_types::debug_log::debug_log_format(\\n        //     \\"Ending setup at counter {0}\\",\\n        //     [self.side_effect_counter as Field]\\n        // );\\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\\n    }\\n\\n    // docs:start:max-block-number\\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\\n        // docs:end:max-block-number\\n        self.max_block_number =\\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\\n    }\\n\\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\\n        self.note_hash_read_requests.push(side_effect);\\n    }\\n\\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\\n        self.nullifier_read_requests.push(request);\\n    }\\n\\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\\n    }\\n\\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\\n    }\\n\\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\\n        let cached_request =\\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\\n\\n        if cached_request.pk_m.hash() == pk_m_hash {\\n            // We get a match so the cached request is the latest one\\n            cached_request.sk_app\\n        } else {\\n            // We didn\'t get a match meaning the cached result is stale\\n            // Typically we\'d validate keys by showing that they are the preimage of `pk_m_hash`, but that\'d require\\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\\n            // to `pk_m_hash`.\\n\\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\\n            /// for the correct public key has been received.\\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\\n            assert_eq(request.pk_m.hash(), pk_m_hash, \\"Obtained invalid key validation request\\");\\n\\n            self.key_validation_requests_and_generators.push(\\n                KeyValidationRequestAndGenerator {\\n                    request,\\n                    sk_app_generator: sk_generators[key_index],\\n                },\\n            );\\n            self.last_key_validation_requests[key_index] = Option::some(request);\\n            request.sk_app\\n        }\\n    }\\n\\n    // docs:start:context_message_portal\\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\\n        // docs:end:context_message_portal\\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\\n        self.l2_to_l1_msgs.push(message);\\n    }\\n\\n    // docs:start:context_consume_l1_to_l2_message\\n    // docs:start:consume_l1_to_l2_message\\n    pub fn consume_l1_to_l2_message(\\n        &mut self,\\n        content: Field,\\n        secret: Field,\\n        sender: EthAddress,\\n        leaf_index: Field,\\n    ) {\\n        // docs:end:context_consume_l1_to_l2_message\\n        let nullifier = process_l1_to_l2_message(\\n            self.historical_header.state.l1_to_l2_message_tree.root,\\n            self.this_address(),\\n            sender,\\n            self.chain_id(),\\n            self.version(),\\n            content,\\n            secret,\\n            leaf_index,\\n        );\\n\\n        // Push nullifier (and the \\"commitment\\" corresponding to this can be \\"empty\\")\\n        self.push_nullifier(nullifier)\\n    }\\n    // docs:end:consume_l1_to_l2_message\\n\\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn emit_raw_note_log(\\n        &mut self,\\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\\n        note_hash_counter: u32,\\n    ) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_private_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) -> ReturnsHash {\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        let start_side_effect_counter = self.side_effect_counter;\\n\\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\\n        /// to `returns_hash` and the side effects counter to increment from start to end.\\n        let (end_side_effect_counter, returns_hash) = unsafe {\\n            call_private_function_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                start_side_effect_counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        self.private_call_requests.push(\\n            PrivateCallRequest {\\n                call_context: CallContext {\\n                    msg_sender: self.this_address(),\\n                    contract_address,\\n                    function_selector,\\n                    is_static_call,\\n                },\\n                args_hash,\\n                returns_hash,\\n                start_side_effect_counter,\\n                end_side_effect_counter,\\n            },\\n        );\\n\\n        // TODO (fees) figure out why this crashes the prover and enable it\\n        // we need this in order to pay fees inside child call contexts\\n        // assert(\\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\\n        //     | (item.public_inputs.min_revertible_side_effect_counter\\n        //         > self.min_revertible_side_effect_counter)\\n        // );\\n        // if item.public_inputs.min_revertible_side_effect_counter\\n        //     > self.min_revertible_side_effect_counter {\\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\\n        // }\\n        self.side_effect_counter = end_side_effect_counter + 1;\\n        ReturnsHash::new(returns_hash)\\n    }\\n\\n    pub fn call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_public_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            enqueue_public_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        // Public calls are rerouted through the dispatch function.\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        let call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n\\n        self.public_call_requests.push(Counted::new(call_request, counter));\\n    }\\n\\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.set_public_teardown_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn set_public_teardown_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            set_public_teardown_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        self.public_teardown_call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n    }\\n\\n    fn next_counter(&mut self) -> u32 {\\n        let counter = self.side_effect_counter;\\n        self.side_effect_counter += 1;\\n        counter\\n    }\\n}\\n\\nimpl Empty for PrivateContext {\\n    fn empty() -> Self {\\n        PrivateContext {\\n            inputs: PrivateContextInputs::empty(),\\n            side_effect_counter: 0 as u32,\\n            min_revertible_side_effect_counter: 0 as u32,\\n            is_fee_payer: false,\\n            args_hash: 0,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            historical_header: BlockHeader::empty(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n}\\n"},"91":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\\nuse dep::protocol_types::{\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\\n        GENERATOR_INDEX__SECRET_HASH,\\n    },\\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\\n    point::Point,\\n    traits::Hash,\\n};\\n\\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\\n\\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\\n}\\n\\npub fn compute_secret_hash(secret: Field) -> Field {\\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\\n}\\n\\npub fn compute_l1_to_l2_message_hash(\\n    sender: EthAddress,\\n    chain_id: Field,\\n    recipient: AztecAddress,\\n    version: Field,\\n    content: Field,\\n    secret_hash: Field,\\n    leaf_index: Field,\\n) -> Field {\\n    let mut hash_bytes = [0 as u8; 224];\\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\\n    let version_bytes: [u8; 32] = version.to_be_bytes();\\n    let content_bytes: [u8; 32] = content.to_be_bytes();\\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\\n\\n    for i in 0..32 {\\n        hash_bytes[i] = sender_bytes[i];\\n        hash_bytes[i + 32] = chain_id_bytes[i];\\n        hash_bytes[i + 64] = recipient_bytes[i];\\n        hash_bytes[i + 96] = version_bytes[i];\\n        hash_bytes[i + 128] = content_bytes[i];\\n        hash_bytes[i + 160] = secret_hash_bytes[i];\\n        hash_bytes[i + 192] = leaf_index_bytes[i];\\n    }\\n\\n    sha256_to_field(hash_bytes)\\n}\\n\\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\\n}\\n\\npub struct ArgsHasher {\\n    pub fields: [Field],\\n}\\n\\nimpl Hash for ArgsHasher {\\n    fn hash(self) -> Field {\\n        hash_args(self.fields)\\n    }\\n}\\n\\nimpl ArgsHasher {\\n    pub fn new() -> Self {\\n        Self { fields: [] }\\n    }\\n\\n    pub fn add(&mut self, field: Field) {\\n        self.fields = self.fields.push_back(field);\\n    }\\n\\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\\n        for i in 0..N {\\n            self.fields = self.fields.push_back(fields[i]);\\n        }\\n    }\\n}\\n\\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\npub fn hash_args(args: [Field]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_var_args_hash() {\\n    let mut input = ArgsHasher::new();\\n    for i in 0..100 {\\n        input.add(i as Field);\\n    }\\n    let hash = input.hash();\\n    dep::std::println(hash);\\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\\n}\\n"},"141":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\\n\\n/// Temporary substitute that is used for handling contract class registration. This\\n/// variant returns the log hash, which would be too large to compute inside a circuit.\\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\\n    contract_address: AztecAddress,\\n    message: [Field; N],\\n    counter: u32,\\n) -> Field {\\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\\n}\\n\\n#[oracle(emitContractClassLog)]\\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\\n    contract_address: AztecAddress,\\n    message: [Field; N],\\n    counter: u32,\\n) -> Field {}\\n"},"144":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\\n\\nuse dep::protocol_types::{\\n    address::AztecAddress,\\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\\n};\\n\\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\\npub fn notify_created_note<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        notify_created_note_oracle_wrapper(\\n            storage_slot,\\n            note_type_id,\\n            packed_note_content,\\n            note_hash,\\n            counter,\\n        )\\n    };\\n}\\n\\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\\n/// actual block.\\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\\n}\\n\\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\\npub fn notify_created_nullifier(nullifier: Field) {\\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\\n}\\n\\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_created_note_oracle(\\n        storage_slot,\\n        note_type_id,\\n        packed_note_content,\\n        note_hash,\\n        counter,\\n    );\\n}\\n\\n#[oracle(notifyCreatedNote)]\\nunconstrained fn notify_created_note_oracle<let N: u32>(\\n    _storage_slot: Field,\\n    _note_type_id: Field,\\n    _packed_note_content: [Field; N],\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_nullified_note_oracle_wrapper(\\n    nullifier: Field,\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\\n}\\n\\n#[oracle(notifyNullifiedNote)]\\nunconstrained fn notify_nullified_note_oracle(\\n    _nullifier: Field,\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\\n    let _ = notify_created_nullifier_oracle(nullifier);\\n}\\n\\n#[oracle(notifyCreatedNullifier)]\\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\\n\\n#[oracle(getNotes)]\\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\\n    _storage_slot: Field,\\n    _num_selects: u8,\\n    _select_by_indexes: [u8; N],\\n    _select_by_offsets: [u8; N],\\n    _select_by_lengths: [u8; N],\\n    _select_values: [Field; N],\\n    _select_comparators: [u8; N],\\n    _sort_by_indexes: [u8; N],\\n    _sort_by_offsets: [u8; N],\\n    _sort_by_lengths: [u8; N],\\n    _sort_order: [u8; N],\\n    _limit: u32,\\n    _offset: u32,\\n    _status: u8,\\n    _return_size: u32,\\n    _placeholder_fields: [Field; S],\\n) -> [Field; S] {}\\n\\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; N],\\n    select_by_offsets: [u8; N],\\n    select_by_lengths: [u8; N],\\n    select_values: [Field; N],\\n    select_comparators: [u8; N],\\n    sort_by_indexes: [u8; N],\\n    sort_by_offsets: [u8; N],\\n    sort_by_lengths: [u8; N],\\n    sort_order: [u8; N],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_fields: [Field; S],\\n) -> [Field; S] {\\n    let return_size = placeholder_fields.len() as u32;\\n    get_notes_oracle(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        return_size,\\n        placeholder_fields,\\n    )\\n}\\n\\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; M],\\n    select_by_offsets: [u8; M],\\n    select_by_lengths: [u8; M],\\n    select_values: [Field; M],\\n    select_comparators: [u8; M],\\n    sort_by_indexes: [u8; M],\\n    sort_by_offsets: [u8; M],\\n    sort_by_lengths: [u8; M],\\n    sort_order: [u8; M],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\\n) -> [Option<Note>; S]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    sync_notes_oracle_wrapper();\\n    let fields = get_notes_oracle_wrapper(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        placeholder_fields,\\n    );\\n    let num_notes = fields[0] as u32;\\n    let contract_address = AztecAddress::from_field(fields[1]);\\n    for i in 0..placeholder_opt_notes.len() {\\n        if i < num_notes {\\n            // lengths named as per typescript.\\n            let return_header_length: u32 = 2; // num_notes & contract_address.\\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\\n\\n            let nonce = fields[read_offset];\\n            let note_hash_counter = fields[read_offset + 1] as u32;\\n            let note_content = array::subarray(fields, read_offset + 2);\\n\\n            let mut note = Note::unpack_content(note_content);\\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\\n\\n            placeholder_opt_notes[i] = Option::some(note);\\n        };\\n    }\\n    placeholder_opt_notes\\n}\\n\\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\\n    check_nullifier_exists_oracle(inner_nullifier) == 1\\n}\\n\\n#[oracle(checkNullifierExists)]\\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\\n\\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\\n}\\n\\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\\n/// Includes the last known index used to send a note tagged with this secret.\\n/// For this to work, PXE must know the ivsk_m of the sender.\\n/// For the recipient\'s side, only the address is needed.\\npub unconstrained fn get_indexed_tagging_secret_as_sender(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) -> IndexedTaggingSecret {\\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\\n    IndexedTaggingSecret::deserialize(result)\\n}\\n\\n#[oracle(getIndexedTaggingSecretAsSender)]\\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\\n\\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\\n/// future notes get a different tag and can be discovered by the recipient.\\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\\n/// that are not found by the recipient.\\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\\n    }\\n}\\n\\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) {\\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\\n}\\n\\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) {}\\n\\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\\n/// for later querying via the `get_notes` oracle.\\npub fn sync_notes() {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        sync_notes_oracle_wrapper();\\n    }\\n}\\n\\nunconstrained fn sync_notes_oracle_wrapper() {\\n    sync_notes_oracle();\\n}\\n\\n#[oracle(syncNotes)]\\nunconstrained fn sync_notes_oracle() {}\\n"},"254":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/contract_class_id.nr","source":"use crate::constants::GENERATOR_INDEX__CONTRACT_LEAF;\\nuse crate::traits::{Deserialize, FromField, Packable, Serialize, ToField};\\n\\npub struct ContractClassId {\\n    pub inner: Field,\\n}\\n\\nimpl Eq for ContractClassId {\\n    fn eq(self, other: ContractClassId) -> bool {\\n        other.inner == self.inner\\n    }\\n}\\n\\nimpl ToField for ContractClassId {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl FromField for ContractClassId {\\n    fn from_field(value: Field) -> Self {\\n        Self { inner: value }\\n    }\\n}\\n\\nimpl Serialize<1> for ContractClassId {\\n    fn serialize(self: Self) -> [Field; 1] {\\n        [self.inner]\\n    }\\n}\\n\\nimpl Deserialize<1> for ContractClassId {\\n    fn deserialize(fields: [Field; 1]) -> Self {\\n        Self { inner: fields[0] }\\n    }\\n}\\n\\n// Implement the Packable trait so ContractClassId can be stored in contract\'s storage.\\nimpl Packable<1> for ContractClassId {\\n    fn pack(self) -> [Field; 1] {\\n        self.serialize()\\n    }\\n\\n    fn unpack(fields: [Field; 1]) -> Self {\\n        Self::deserialize(fields)\\n    }\\n}\\n\\nimpl ContractClassId {\\n    pub fn compute(\\n        artifact_hash: Field,\\n        private_functions_root: Field,\\n        public_bytecode_commitment: Field,\\n    ) -> Self {\\n        let hash = crate::hash::poseidon2_hash_with_separator(\\n            [artifact_hash, private_functions_root, public_bytecode_commitment],\\n            GENERATOR_INDEX__CONTRACT_LEAF,\\n        ); // TODO(@spalladino): Update generator index\\n        ContractClassId::from_field(hash)\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n"},"261":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\\n/// Example:\\n///   debug_log(\\"blah blah this is a debug string\\");\\npub fn debug_log<let N: u32>(msg: str<N>) {\\n    debug_log_format(msg, []);\\n}\\n\\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\\n/// Examples:\\n///   debug_log_format(\\"get_2(slot:{0}) =>\\\\n\\\\t0:{1}\\\\n\\\\t1:{2}\\", [storage_slot, note0_hash, note1_hash]);\\n///   debug_log_format(\\"whole array: {}\\", [e1, e2, e3, e4]);\\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { debug_log_oracle_wrapper(msg, args) };\\n}\\n\\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\\n    msg: str<M>,\\n    args: [Field; N],\\n) {\\n    debug_log_oracle(msg, args.as_slice());\\n}\\n\\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \\"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\\"`\\n#[oracle(debugLog)]\\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\\n"},"262":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\\n    abis::{\\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\\n        function_selector::FunctionSelector,\\n        log_hash::{LogHash, ScopedLogHash},\\n        note_hash::ScopedNoteHash,\\n        nullifier::ScopedNullifier,\\n        private_log::{PrivateLog, PrivateLogData},\\n        side_effect::{OrderedValue, scoped::Scoped},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\\n    },\\n    merkle_tree::root::root_from_sibling_path,\\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\\n    poseidon2::Poseidon2Sponge,\\n    traits::{FromField, Hash, is_empty, ToField},\\n    utils::field::field_from_bytes_32_trunc,\\n};\\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\\n\\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\\n    let sha256_hashed = sha256::digest(bytes_to_hash);\\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\\n\\n    hash_in_a_field\\n}\\n\\npub fn private_functions_root_from_siblings(\\n    selector: FunctionSelector,\\n    vk_hash: Field,\\n    function_leaf_index: Field,\\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\\n) -> Field {\\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\\n    let function_leaf = function_leaf_preimage.hash();\\n    root_from_sibling_path(\\n        function_leaf,\\n        function_leaf_index,\\n        function_leaf_sibling_path,\\n    )\\n}\\n\\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\\n    // unique).\\n    poseidon2_hash_with_separator(\\n        [first_nullifier_in_tx, note_index_in_tx as Field],\\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\\n    )\\n}\\n\\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\\n    let inputs = [nonce, siloed_note_hash];\\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\\n}\\n\\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), note_hash],\\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\\n    )\\n}\\n\\n/// Computes unique note hashes from siloed note hashes\\npub fn compute_unique_siloed_note_hash(\\n    siloed_note_hash: Field,\\n    first_nullifier: Field,\\n    note_index_in_tx: u32,\\n) -> Field {\\n    if siloed_note_hash == 0 {\\n        0\\n    } else {\\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\\n        compute_unique_note_hash(nonce, siloed_note_hash)\\n    }\\n}\\n\\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\\n    if note_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\\n    }\\n}\\n\\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), nullifier],\\n        GENERATOR_INDEX__OUTER_NULLIFIER,\\n    )\\n}\\n\\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\\n    if nullifier.contract_address.is_zero() {\\n        nullifier.value() // Return value instead of 0 because the first nullifier\'s contract address is zero.\\n    } else {\\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\\n    }\\n}\\n\\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\\n    poseidon2_hash([contract_address.to_field(), field])\\n}\\n\\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\\n    if private_log.contract_address.is_zero() {\\n        private_log.inner.log\\n    } else {\\n        let mut fields = private_log.inner.log.fields;\\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\\n        PrivateLog { fields }\\n    }\\n}\\n\\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\\n    accumulate_sha256([address.to_field(), log_hash])\\n}\\n\\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\\n    if log_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\\n    }\\n}\\n\\npub fn merkle_hash(left: Field, right: Field) -> Field {\\n    poseidon2_hash([left, right])\\n}\\n\\npub fn compute_l2_to_l1_hash(\\n    contract_address: AztecAddress,\\n    recipient: EthAddress,\\n    content: Field,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    let mut bytes: [u8; 160] = std::mem::zeroed();\\n\\n    let inputs =\\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\\n    for i in 0..5 {\\n        // TODO are bytes be in fr.to_buffer() ?\\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\\n        for j in 0..32 {\\n            bytes[32 * i + j] = item_bytes[j];\\n        }\\n    }\\n\\n    sha256_to_field(bytes)\\n}\\n\\npub fn silo_l2_to_l1_message(\\n    msg: ScopedL2ToL1Message,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    if msg.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_l2_to_l1_hash(\\n            msg.contract_address,\\n            msg.message.recipient,\\n            msg.message.content,\\n            rollup_version_id,\\n            chain_id,\\n        )\\n    }\\n}\\n\\n// Computes sha256 hash of 2 input hashes.\\n//\\n// NB: This method now takes in two 31 byte fields - it assumes that any input\\n// is the result of a sha_to_field hash and => is truncated\\n//\\n// TODO(Jan and David): This is used for the encrypted_log hashes.\\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\\n//\\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\\n    // This is a note about the cpp code, since it takes an array of Fields\\n    // instead of a U128.\\n    // 4 Field elements when converted to bytes will usually\\n    // occupy 4 * 32 = 128 bytes.\\n    // However, this function is making the assumption that each Field\\n    // only occupies 128 bits.\\n    //\\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\\n    // Concatentate two fields into 32x2 = 64 bytes\\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\\n    let mut hash_input_flattened = [0; 64];\\n    for offset in 0..input.len() {\\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n\\n    sha256_to_field(hash_input_flattened)\\n}\\n\\n// Computes the final logs hash for a tx.\\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\\n    let mut hash_input_flattened = [0; N * 32];\\n    for offset in 0..N {\\n        // TODO: This is not checking that the decomposition is smaller than P\\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n    // Ideally we would push to a slice then hash, but there is no sha_slice\\n    // Hardcode to 256 bytes for now\\n    let mut hash = sha256_to_field(hash_input_flattened);\\n    // Not having a 0 value hash for empty logs causes issues with empty txs\\n    // used for padding. Returning early is currently unsupported.\\n    // We always provide sorted logs here, so 0 being empty means all are empty.\\n    if is_empty(logs[0]) {\\n        hash = 0;\\n    }\\n    hash\\n}\\n\\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\\n    crate::hash::poseidon2_hash(key)\\n}\\n\\n#[inline_always]\\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\\n}\\n\\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\\n    poseidon2_hash(inputs_with_separator)\\n}\\n\\n// Performs a fixed length hash with a subarray of the given input.\\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\\n// Using stdlib poseidon, this will always absorb an extra 1 as a \'variable\' hash, and not match spongeblob.squeeze()\\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\\n#[no_predicates]\\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\\n    sponge.squeeze()\\n}\\n\\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\\n// and absorbing in chunks of 3 below.\\n#[no_predicates]\\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n    // fixed-length and variable-length hashes do not collide)\\n    if in_len != N {\\n        sponge.absorb(1);\\n    }\\n    sponge.squeeze()\\n}\\n\\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\\n// The below code forces the compiler to:\\n//  - absorb normally up to 2 times to set cache_size to 1\\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\\n//  - absorb normally up to 2 times to add any remaining values to the hash\\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\\n\\n#[no_predicates]\\nfn poseidon2_absorb_chunks<let N: u32>(\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n) -> Poseidon2Sponge {\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\\n    // since we cannot isolate computation branches. The below is just to avoid that.\\n    let shift = if in_len == 0 { 0 } else { 1 };\\n    if in_len != 0 {\\n        // cache_size = 0, init absorb\\n        sponge.cache[0] = input[0];\\n        sponge.cache_size = 1;\\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\\n        // max_remainder = (N - 1) % 3;\\n        // max_chunks = (N - 1 - max_remainder) / 3;\\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            variable,\\n            shift,\\n        );\\n    }\\n    sponge\\n}\\n\\n// NB: If it\'s not required to check that the non-absorbed elts of \'input\' are 0s, set skip_0_check=true\\n#[no_predicates]\\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    skip_0_check: bool,\\n) -> Poseidon2Sponge {\\n    let mut sponge = in_sponge;\\n    // \'shift\' is to account for already added inputs\\n    let mut shift = 0;\\n    // \'stop\' is to avoid an underflow when inputting in_len = 0\\n    let mut stop = false;\\n    for i in 0..3 {\\n        if shift == in_len {\\n            stop = true;\\n        }\\n        if (sponge.cache_size != 1) & (!stop) {\\n            sponge.absorb(input[i]);\\n            shift += 1;\\n        }\\n    }\\n    sponge = if stop {\\n        sponge\\n    } else {\\n        // max_chunks = (N - (N % 3)) / 3;\\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            skip_0_check,\\n            shift,\\n        )\\n    };\\n    sponge\\n}\\n\\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\\n// shift - the num of elts already absorbed to ensure the sponge\'s cache_size = 1\\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\\n// NB: The 0 checks (\'Found non-zero field...\') are messy, but having a separate loop over N to check\\n// for 0s costs 3N gates. Current approach is approx 2N gates.\\n#[no_predicates]\\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n    shift: u32,\\n) -> Poseidon2Sponge {\\n    assert(in_len <= N, \\"Given in_len to absorb is larger than the input array len\\");\\n    // When we have an existing sponge, we may have a shift of 0, and the final \'k+2\' below = N\\n    // The below avoids an overflow\\n    let skip_last = 3 * M == N;\\n    // Writing in_sponge: &mut does not compile\\n    let mut sponge = in_sponge;\\n    let mut should_add = true;\\n    // The num of things left over after absorbing in 3s\\n    let remainder = (in_len - shift) % 3;\\n    // The num of chunks of 3 to absorb (maximum M)\\n    let chunks = (in_len - shift - remainder) / 3;\\n    for i in 0..M {\\n        // Now we loop through cache size = 1 -> 3\\n        should_add &= i != chunks;\\n        // This is the index at the start of the chunk (for readability)\\n        let k = 3 * i + shift;\\n        if should_add {\\n            // cache_size = 1, 2 => just assign\\n            sponge.cache[1] = input[k];\\n            sponge.cache[2] = input[k + 1];\\n            // cache_size = 3 => duplex + perm\\n            for j in 0..3 {\\n                sponge.state[j] += sponge.cache[j];\\n            }\\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\\n            sponge.cache[0] = input[k + 2];\\n            // cache_size is now 1 again, repeat loop\\n        } else if (!variable) & (i != chunks) {\\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\\n            // NB: we don\'t check at i == chunks, because that chunk contains elts to be absorbed or checked below\\n            let last_0 = if (i == M - 1) & (skip_last) {\\n                0\\n            } else {\\n                input[k + 2]\\n            };\\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\\n            assert(all_0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    // we have \'remainder\' num of items left to absorb\\n    should_add = true;\\n    // below is to avoid overflows (i.e. if inlen is close to N)\\n    let mut should_check = !variable;\\n    for i in 0..3 {\\n        should_add &= i != remainder;\\n        should_check &= in_len - remainder + i != N;\\n        if should_add {\\n            // we want to absorb the final \'remainder\' items\\n            sponge.absorb(input[in_len - remainder + i]);\\n        } else if should_check {\\n            assert(input[in_len - remainder + i] == 0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    sponge\\n}\\n\\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let in_len = inputs.len() + 1;\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    sponge.absorb(separator.to_field());\\n\\n    for i in 0..inputs.len() {\\n        sponge.absorb(inputs[i]);\\n    }\\n\\n    sponge.squeeze()\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\\n    let mut fields = [0; (N + 30) / 31];\\n    let mut field_index = 0;\\n    let mut current_field = [0; 31];\\n    for i in 0..inputs.len() {\\n        let index = i % 31;\\n        current_field[index] = inputs[i];\\n        if index == 30 {\\n            fields[field_index] = field_from_bytes(current_field, false);\\n            current_field = [0; 31];\\n            field_index += 1;\\n        }\\n    }\\n    if field_index != fields.len() {\\n        fields[field_index] = field_from_bytes(current_field, false);\\n    }\\n    poseidon2_hash(fields)\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\\n    assert(sub_chunk_hash == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_variable() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\\n    assert(variable_chunk_hash == variable_len_hash);\\n}\\n\\n#[test]\\nfn existing_sponge_poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    // absorb 250 of the 501 things\\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\\n    assert(final_sponge.squeeze() == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_empty_inputs() {\\n    let in_len = 0;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    let mut first_sponge =\\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\\n}\\n\\n#[test]\\nfn smoke_sha256_to_field() {\\n    let full_buffer = [\\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\\n    ];\\n    let result = sha256_to_field(full_buffer);\\n\\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\\n\\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\\n    let result_bytes = sha256::digest(full_buffer);\\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\\n    assert(truncated_field == result);\\n    let mod_res = result + (result_bytes[31] as Field);\\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\\n}\\n\\n#[test]\\nfn compute_l2_l1_hash() {\\n    // All zeroes\\n    let hash_result =\\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\\n\\n    // Non-zero case\\n    let hash_result = compute_l2_to_l1_hash(\\n        AztecAddress::from_field(1),\\n        EthAddress::from_field(3),\\n        5,\\n        2,\\n        4,\\n    );\\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\\n}\\n\\n#[test]\\nfn silo_l2_to_l1_message_matches_typescript() {\\n    let version = 4;\\n    let chainId = 5;\\n\\n    let hash = silo_l2_to_l1_message(\\n        ScopedL2ToL1Message {\\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\\n            contract_address: AztecAddress::from_field(3),\\n        },\\n        version,\\n        chainId,\\n    );\\n\\n    // The following value was generated by `l2_to_l1_message.test.ts`\\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\\n\\n    assert_eq(hash, hash_from_typescript);\\n}\\n"},"279":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr","source":"use crate::constants::TWO_POW_64;\\n\\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\\n// has a private absorb() method (it\'s also designed to just be a hasher)\\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2Sponge {\\n    pub cache: [Field; 3],\\n    pub state: [Field; 4],\\n    pub cache_size: u32,\\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2Sponge {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\\n        let mut result =\\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    pub fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    pub fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let iv: Field = (in_len as Field) * TWO_POW_64;\\n        let mut sponge = Poseidon2Sponge::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n"}}}');async function dy(e,t){const n=jb[e],s=Qb[e],i=await au(t);return{instance:{...await cu(t,{salt:s}),address:n},contractClass:i,artifact:t,address:n}}i(8891).Buffer,i(8891).Buffer,i(8891).Buffer;const uy=ry(cy);let fy;const hy=ry(JSON.parse('{"transpiled":true,"noir_version":"1.0.0-beta.1+c4e38215cedb5afb","name":"ContractInstanceDeployer","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VZy67aQAwdSEJIuAEKn3Cl7tomXJ47Fn3c30AFPqHrrLppP7qMGCcH46siYVfFEpoknhyfOXZmJqHjztY//TrhOA5tz10b9dmGtrzPKkWs0pJn50F4dh+EZ/QgPGNFnh2Bp2/peUvc+ZlL3fl5bC7iTT7BEdzk/gYAwX6HNgttF/yKCakyYZBa+Otyvs/cpSnzf8kCZmqDvyD8vg1+Sbw/1y0+joXiRqF9rVstX+Eeb0U4xuIlXPJ1wfeF+SLwfWU+rOFvzId1T5xIN1qYlOtqY50XGlsKY+u80TrXaofXSOvcmdZoRTnPGB/On/gU1Kdu+fSYLwZfxnwJ+Eh/3z5DP577FPp9hONP0IfXZ+Su65n8lH/U3aK+YgP8k82lHPD8xPVlbPRhDmLQ85npY7FuoD4W+nt9pm/wp2Nvae0ai5ieqBFp1sf+zJeBL64v4+ThPIY4iEU8Etb/QzgfhbYH99D9YyF+j8W/4C1cQ404ViRco/7++Xwfjgfh52voJ93jructvc31ci7N4Xr4qwY/s+F/JPzcBn9J+AMb/GZv82SCPysJv7Dh38xBQ5v6afaWIxv+B8Ifm+DPD7QOv3OtNXNEOJ7Adb35u6pu2SNh/JxxtdojTRgfrg+uwd43FbiOBR/P4VSIMxXiSFiZItaTItboPx1jXxFroIg1VMTSzGOqiKWpV66IVShiada9pl6UR2mf5m0b2vJOk/ZpiviVtE/TfJcnram+YkFDHF/C+v9gOg9MeFYzWnPoWacYGLswin3rek3xC4EP8c4F3z0fZw+L9XGzXmxOW7JqOds0+SwYV34N34twPsb+0tov7fsUtS6ld/8h6OotBl/BfAn4iKP07j804n+L/hh/LPj4+n9rLifuej0csHHjN6+typjb74HSt3rj+Wtx67NJ8XN3PV//q++NqA/fS+cC17Hg4/uTXIiTC3EeEYt/s0cNfV2TTnHd+rVyuVq3f3TRXJS4y/8BHIufsP6/wjmOjdp75vzjalcdX3bH3WK338+/7yYM31sXdPoDg5oBSR0fAAA=","debug_symbols":"tdfNaoQwFIbhe8k6i5z8mIm3UsoQNQ6BECVqoYj33jhM26GzLN9GiBwfN77g2dkQuu12jXmcFta+7SxNvV/jlOtpPzjrSkwp3q7Pt5k4L87c55fZ5/O4rL6srFWSs5AH1mpRnx5jCqxt5MFfBu33oLU/g0Ye75y5BgVbFHxBwQ4EkxAwmWCyhMkKJmuYbGByA5MtTL7AZFiDBGuQYA0SrEGCNUiwBgnWIMEaJFiD9L8GnXoM1k/hhXYwWgocTTha4miFozWONji6wdEWR+NqlLgaFa5GBarxqKcPX6LvUnhsTeOW+6clav2cw599ai5TH4athHOz+l2qzvSU4drc/zzqgZTmpFx9SX3RFw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"deploy","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"},"visibility":"private"},{"name":"initialization_hash","type":{"kind":"field"},"visibility":"private"},{"name":"public_keys","type":{"fields":[{"name":"npk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::NpkM"}},{"name":"ivpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::IvpkM"}},{"name":"ovpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::OvpkM"}},{"name":"tpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::TpkM"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::PublicKeys"},"visibility":"private"},{"name":"universal_deploy","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"7V3bbts4EP0XP/uBc+Fw2F9ZLBZpmxYBgrRI0wUWRf99KSekGJuSQNluqYZ9KCJ7DnV4Dk1SI4r6sft4+/7753/uHj59+bZ799eP3f2XDzdPd18ewtGPHejhs29fbx6Gw29PN49Pu3cggvvd7cPH4U+HP/e7T3f3t7t3Ev48CUYU9xKMqD4Fq5SCPetLMBmE+WAQ8pp4MIzhaF0x3o7hzo3RjkvRJBSjGcyr6L/3O/BdmbIyaLoyE8pAV2ZCGezKTChDXZkJZbgrM6GM7cpMKCNdmQllXFdmQpk+B55Sps+BJ5ShPgeeUqbPgaeU6XPgKWX6HHhKGe7KTCjT58BTyvQ58JQybc+BmeyoDPsFZRBQIhNge6Yybc+Bf6cybc+Bf6MyfP4cmI2PwQyoKdiZwwng2icozsgo9ErRAZtVu3iC1DuJpEBis21jqctSkoW7LCVZ7KIs7BY6SEYT+bClMZgKwZQ6UwZOocOPeyAjFyCTqosWzTyZoLYZlZfMqJcexjXGR38xH+d8tBacgjvm49viY81F+YjaeT7oJf3Ks9EJD1yKwx85ThBFO88Fwnwj1hb9eALkEhmRWEs1WRcydBAnsSqJuTqihQ5HOXU4yo4XosnGYM78xOJsCdP4jmTsfDAQpJkDESwEG/Ax2IjmwYM32L1p1hvq3jTrDXdvFr1xSUF8RUPKA5qk8czbs7yx3ZtmvZHzvYHRG3qld3GiZJOCIDn3YvRbd8d1dxp2p3zNozZeCJA3MO8OkYlz+jAA5u6Urt3DBXscLwk4o6Mtu/O7ZgS+u9OuO2K6Ow27A92dht3B7k7D7lB3p2F3uLvTsDu2u9OwO9Ldadgd191p2J2eK2jZnZ4raNgd13MFLbvTcwUtu9NzBS2703MFDd/fcdzdadidS+QKxmCbPzFSdOet6y1d71+q9wWu562kYDG8oDcyp4qyjotRobjSm3EM5nHRORxWSzttm3t6UgxttpI5cD8Nti524NaP/Xfoyodq+qaraZlTNcWtr6aapqsp6beMonjUEhWa5u40PcClKPMWgY4r8BXpuKL4VipKf05FvY0LFcFnY1b9L5S7Jiea2D9IE5+e/DAgZ2giXZMTTS4xz2IcNbELmjCn/AGHf/OakEtPpZEC5cEDd22au/r0dJM/5e63y92bDXOHDXPHDXOnDXPnDXO3G+YuG+Z+6XF1KXsKhtMTuMbBPHcLPl4chxQAH3PXDXP32+UOxmyZPDRNHtNTQxazbSIiedwyedoyed4yeds0eXFxhLIOFoYzJxRr6kTppKbyZmra9sitac8MqxbPq2nb43xdTX1MFDgHcFLTtmcFF6wptD2FmK7pgXzbU4gF8o1fnXNaiqHWnZBv/PJ8njyXyLOBeJ+TDS/sICaQaiqQ7S7kiq1GxzvX4Tb9SIf8Mx97Pp+QAo58MEvaFvkMux+mPDP6k/34AKQ1QsUxljmZwJZ0npCaccFDvtupPJ+gOLSxpFtrHGoxfwIgNrGnDX8jn1tn3xalcPD+8e7+/u7zP6/eXWWG/8qbZFlINxLy/u95j7jy3k3zEKqHcD3EVkLCEQyR5d3ohaKmmvVygHZ6m/Z5CNZDqB7C9RBbDyl2NJoWy2i2rC9CXD1E6yG+GlLeh3UeAvUQrIdQPYTrIbYeUnZfY9ZI87uPWNqOiCR2hpTd/Cak6U0fL1e8Xrd4f9XiyzssXq54uG7xeN3i6brF8wWLzy7TY/H2usXLdYsv/mp9Wq7qyR33I+WdheYhvhpS3oNlHgL1EKyHUD2EqyHlBeTzEKmHFN1Hjg0Gs5WZLw2mvHp2HuKrIeVVnfMQqIdgPYTqIUX30aXlRP7kV1leHjYPkXqIq4doPcRXQ8orWGYg4QiHyInXSpqUGQo3Y7JZcWk1ljOxZ3VwvF534t2MFyvenl88xcsml+2H/lK8XKB4TAnr46WvE6/aqype4/TVeXdcvF63eH928Zo943Fs7cSb0+qKj32M2uNHGiZeP1ZVvMM0ozgWZ+IdXuuK90ftPhzQzG833PuNJ4Fss/DZJg2pOw65taWlmiGzPEabbPvWYQVmOOADufLg4k16VsPbMUV3yDSGIzvElkcMr2njS2NOEmTlIWMBY1dgZAXGrcDoCoyvx5QHjgUMrMDgCsyKduBXtAO/oh34Fe3Ar2gHfkU78CvawcRSnSVQuSWIjCA+BeEaEK0B8RqQXQOSWtDPcPjvzePdzfv72yFNPXz7/eFDzFqHw6f/vsZvYl776+OXD7cfvz/eDhnuMbk9aEOwZzhQCQfW7QVT2vfwkeje0fD9YJmXvdc0Bzx8H26sB3wcWp4/4j351KEfPkLao6aOejiv0Eu5w9dhvNmHW2+hcqGC/wM=","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","decompose_hint","lte_hint","notify_created_nullifier_oracle_wrapper","debug_log_oracle_wrapper","directive_integer_quotient","directive_invert"],"verification_key":"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"},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"bY/dCoMwDIXfJde9aOo2sK8iQ6pGKZRWah0M8d2Xjk26n5tDTvhyyNlgoG6dWuvHsIBuNnChN8kGz27bBXTROmentlyDzILVk19m47NdkokJdKUEkB9AnyRfj9YR6IvaxQ+IEuWb5VnVB45V/Z+v8eAVyg/+urO9mWhN5+j1+rj6vmiS7jN9lZpj6GlYI+V6RTPWBs9CSY7l6Ac=","brillig_names":["sync_notes"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAA/92c927bMBDG5URKIieOndG9927leHeme+/W/dsdfosWAtqHSPu09Zfw7DPDAilCovkqQJCto+9+PFHUiTy6EG1s3cFeMJ9jc5w2R5xfjMY3Kbtqjtn2tqpHXVkoxgIB4wQB4yQBY0zAmBAwThEwThMwzhAwpgSMRQLGWQLGOQLGEgHjPAFjmYCxQsC4EIAxBOciCeeSR04d24fiXY52fhvdRcC4m4BxDwHjXgLGfQSM+wkYDxAwHiRgPETAeJiA8QgB41ECxmMEjMcJGE8QMJ4kYDxFwHiagPEMAeNZAsZzBIznCRgvEDBeJGC8RMB4mYDxCgFjRsBYJWBcIWCsETDWCRgbBIxNAsYWAWObgLFDwHiVgPEaAeN1AsYbBIw3CRhvETCuEjDeJmC8Q8B4l4DxHgHjfQLGBwSMDwkYHxEwPiZgfELA+JSA8RkB43MCxhcEjC8JGF8RML4mYHxDwPg2AGMIzncknO9JOLuBOKMPFvTEYMfCLSyMwsIjLOzBwhksTMHCDyyswMIFLAxA4j0S25E4XhnsSHxGUjESdpEEiyRTJHEiSRJJiEjyQxIdktSQBIYkKyQxIUno6GA/NtiRRIIkDSRBIMkAk/iYJMckNCZ5MYmKSUpMAmKSDZNYmCRCrTDJgUkEDNJjEByDzBjExSApBiExyIdBNAxSYRAIgywYxJBBArzk4iUSL2l4CcJLBoJ4BMkIQhHkIYhCkIIgAA9ZPMTwkEAnjE4OnQhuUtwAaFzd6M+bNJIf5pia44SSe1xEV00tuz71t7POx9RRP4/8tdTonAmiv9ES/WkY/kwW2t7LR/p1XcTupDl285Evu/k4k5RZU2XWrDJSnzDXu14P66/qSsnyUaTqIraLYWzXCpY9fV20TOwXo5Btc2NRsrYnPLZ/pO8oSZl8xFOwZHG+uR4iS5RMri/snFfl7LY1Y8mEBZu035LyjWwfjEyuaax0+muvjXbY9lrP/l17rVf/x/YaW7I431yPv22vum3Z7TWJRpv0pSKbUrKflmxayX7lI9sNxdE0n8P2yRvPYH3v+X6GLTn4tS1s0/nIH9IGJ9W5RPlv3T+6vCVLlSzOx+0UzfdY2dG6hCOxytfN97I5TqnfyO8rDvtTlv0xbsc52y+po3zqKI+2dsl8njU72tA3+U20+d7Fvmq+Z9vamh1XP+lPf6vm6gs98n8R/bNB9NeH+ufC8A/jqlIY/w/1z4fh74v+chj9TdFfCaO/IfoXguhfGcYJ+s927DhhSZ33GNduOU4Q+0WLNVScsGTx2P7RcQJkyw7WikNm9wHLDjvLDjsuXfMedS141FXcoXUsedRV8agr9ajL53Wc86jLp7/KHnXNeNTls9379Jdcx7DjVVnmitOiAPqLYfQP+37po/W7ma6T2E+s8l8tP88F8fNoHEr6M+0LVyzl0/ZWn9div+TgEe6iQ7adP0D70mj3O+1GZxDSV5srnaxg6RdW+5x+L9L9iy7veva74j6Pvs5cYxBl5VdssZLNW7JEyYRRj0G44mKf/Fvxv7Zfccjs/nmr13IxGm9r+n6cjUb3c5z7r3urvfHHLuuMRn8SjY8xRpb9xCr/3Xy3+7rt3iP9Vq/ar/X6vUbv8+f6p96ipV/7EH76DXVGL3ipUwAA","debug_symbols":"tZbLCoMwEEX/ZdZZOOOr9VdKKVFjCYQoUQtF/PfG0oe067sJTJg5QxYn3IVaU8/Xi/VdP1J1Wsj1jZ5s72O1rIrqYJ2z18v+mpLt4ESeA+Og/VaPkw4TVakoMr6lKkvieGedoaqQVf01lu/Gsvw05rKeVSSnMHIGI+cwcgEjlzDyAUY+osicwMgMI8McZJiDDHOQYQ4yzEGGOcgwBxnmoMAcFJiDAnNQYA4KxsE1VjcdrK6deQWIbvbNLk9M98H8RIsh9I1p52C2kPHNF9vbM1G5PH/9WLAUilOOS+KiBw==","brillig_names":["process_log"]}],"outputs":{"globals":{},"structs":{"events":[{"fields":[{"name":"DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE","type":{"kind":"field"}},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"version","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"salt","type":{"kind":"field"}},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"public_keys","type":{"fields":[{"name":"npk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::NpkM"}},{"name":"ivpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::IvpkM"}},{"name":"ovpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::OvpkM"}},{"name":"tpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::TpkM"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::PublicKeys"}},{"name":"deployer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ContractInstanceDeployer::ContractInstanceDeployed"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"salt","type":{"kind":"field"}},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"public_keys","type":{"fields":[{"name":"npk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::NpkM"}},{"name":"ivpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::IvpkM"}},{"name":"ovpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::OvpkM"}},{"name":"tpk_m","type":{"fields":[{"name":"inner","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::TpkM"}}],"kind":"struct","path":"aztec::protocol_types::public_keys::PublicKeys"}},{"name":"universal_deploy","type":{"kind":"boolean"}}],"kind":"struct","path":"ContractInstanceDeployer::deploy_parameters"}}],"kind":"struct","path":"ContractInstanceDeployer::deploy_abi"}]}},"file_map":{"17":{"path":"std/embedded_curve_ops.nr","source":"use crate::cmp::Eq;\\nuse crate::ops::arith::{Add, Neg, Sub};\\n\\n/// A point on the embedded elliptic curve\\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\\npub struct EmbeddedCurvePoint {\\n    pub x: Field,\\n    pub y: Field,\\n    pub is_infinite: bool,\\n}\\n\\nimpl EmbeddedCurvePoint {\\n    /// Elliptic curve point doubling operation\\n    /// returns the doubled point of a point P, i.e P+P\\n    pub fn double(self) -> EmbeddedCurvePoint {\\n        embedded_curve_add(self, self)\\n    }\\n\\n    /// Returns the null element of the curve; \'the point at infinity\'\\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\\n    }\\n}\\n\\nimpl Add for EmbeddedCurvePoint {\\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\\n        embedded_curve_add(self, other)\\n    }\\n}\\n\\nimpl Sub for EmbeddedCurvePoint {\\n    /// Points subtraction operation, using addition and negation\\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\\n        self + other.neg()\\n    }\\n}\\n\\nimpl Neg for EmbeddedCurvePoint {\\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\\n    /// If the point is at infinity, then the result is also at infinity.\\n    fn neg(self) -> EmbeddedCurvePoint {\\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\\n    }\\n}\\n\\nimpl Eq for EmbeddedCurvePoint {\\n    /// Checks whether two points are equal\\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\\n        (self.is_infinite & b.is_infinite)\\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\\n    }\\n}\\n\\n/// Scalar for the embedded curve represented as low and high limbs\\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\\npub struct EmbeddedCurveScalar {\\n    pub lo: Field,\\n    pub hi: Field,\\n}\\n\\nimpl EmbeddedCurveScalar {\\n    pub fn new(lo: Field, hi: Field) -> Self {\\n        EmbeddedCurveScalar { lo, hi }\\n    }\\n\\n    #[field(bn254)]\\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\\n        let (a, b) = crate::field::bn254::decompose(scalar);\\n        EmbeddedCurveScalar { lo: a, hi: b }\\n    }\\n\\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\\n    #[field(bn254)]\\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\\n        let mut v = 1;\\n        let mut lo = 0 as Field;\\n        let mut hi = 0 as Field;\\n        for i in 0..16 {\\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\\n            v = v * 256;\\n        }\\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\\n        sig_s\\n    }\\n}\\n\\nimpl Eq for EmbeddedCurveScalar {\\n    fn eq(self, other: Self) -> bool {\\n        (other.hi == self.hi) & (other.lo == self.lo)\\n    }\\n}\\n\\n// Computes a multi scalar multiplication over the embedded curve.\\n// For bn254, We have Grumpkin and Baby JubJub.\\n// For bls12-381, we have JubJub and Bandersnatch.\\n//\\n// The embedded curve being used is decided by the\\n// underlying proof system.\\n// docs:start:multi_scalar_mul\\npub fn multi_scalar_mul<let N: u32>(\\n    points: [EmbeddedCurvePoint; N],\\n    scalars: [EmbeddedCurveScalar; N],\\n) -> EmbeddedCurvePoint\\n// docs:end:multi_scalar_mul\\n{\\n    let point_array = multi_scalar_mul_array_return(points, scalars);\\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\\n}\\n\\n#[foreign(multi_scalar_mul)]\\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\\n    points: [EmbeddedCurvePoint; N],\\n    scalars: [EmbeddedCurveScalar; N],\\n) -> [Field; 3] {}\\n\\n// docs:start:fixed_base_scalar_mul\\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\\n// docs:end:fixed_base_scalar_mul\\n{\\n    let g1 = EmbeddedCurvePoint {\\n        x: 1,\\n        y: 17631683881184975370165255887551781615748388533673675138860,\\n        is_infinite: false,\\n    };\\n    multi_scalar_mul([g1], [scalar])\\n}\\n\\n/// This function only assumes that the points are on the curve\\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\\n// docs:start:embedded_curve_add\\npub fn embedded_curve_add(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    // docs:end:embedded_curve_add\\n    let x_coordinates_match = point1.x == point2.x;\\n    let y_coordinates_match = point1.y == point2.y;\\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\\n    let point1_1 = EmbeddedCurvePoint {\\n        x: point1.x + (x_coordinates_match as Field),\\n        y: point1.y,\\n        is_infinite: x_coordinates_match,\\n    };\\n    // point1_1 is guaranteed to have a different abscissa than point2\\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\\n    result.is_infinite = x_coordinates_match;\\n\\n    // dbl if x_match, y_match\\n    let double = embedded_curve_add_unsafe(point1, point1);\\n    result = if double_predicate { double } else { result };\\n\\n    // infinity if x_match, !y_match\\n    if point1.is_infinite {\\n        result = point2;\\n    }\\n    if point2.is_infinite {\\n        result = point1;\\n    }\\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\\n    result\\n}\\n\\n#[foreign(embedded_curve_add)]\\nfn embedded_curve_add_array_return(\\n    _point1: EmbeddedCurvePoint,\\n    _point2: EmbeddedCurvePoint,\\n) -> [Field; 3] {}\\n\\n/// This function assumes that:\\n/// The points are on the curve, and\\n/// The points don\'t share an x-coordinate, and\\n/// Neither point is the infinity point.\\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\\npub fn embedded_curve_add_not_nul(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    assert(point1.x != point2.x);\\n    assert(!point1.is_infinite);\\n    assert(!point2.is_infinite);\\n    embedded_curve_add_unsafe(point1, point2)\\n}\\n\\n/// Unsafe ec addition\\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\\n/// If they have the same value but are different variables, the result will be incorrect because in this case\\n/// it assumes (but does not check) that the points\' x-coordinates are not equal.\\n/// It also assumes neither point is the infinity point.\\npub fn embedded_curve_add_unsafe(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    let point_array = embedded_curve_add_array_return(point1, point2);\\n    let x = point_array[0];\\n    let y = point_array[1];\\n\\n    EmbeddedCurvePoint { x, y, is_infinite: false }\\n}\\n"},"18":{"path":"std/field/bn254.nr","source":"use crate::field::field_less_than;\\nuse crate::runtime::is_unconstrained;\\n\\n// The low and high decomposition of the field modulus\\nglobal PLO: Field = 53438638232309528389504892708671455233;\\nglobal PHI: Field = 64323764613183177041862057485226039389;\\n\\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\\nglobal TWO_POW_64: Field = 0x10000000000000000;\\n\\n// Decomposes a single field into two 16 byte fields.\\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\\n    // Here\'s we\'re taking advantage of truncating 64 bit limbs from the input field\\n    // and then subtracting them from the input such the field division is equivalent to integer division.\\n    let low_lower_64 = (x as u64) as Field;\\n    x = (x - low_lower_64) / TWO_POW_64;\\n    let low_upper_64 = (x as u64) as Field;\\n\\n    let high = (x - low_upper_64) / TWO_POW_64;\\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\\n\\n    (low, high)\\n}\\n\\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\\n    compute_decomposition(x)\\n}\\n\\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\\n    if x == y {\\n        true\\n    } else {\\n        field_less_than(x, y)\\n    }\\n}\\n\\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\\n    let (alo, ahi) = a;\\n    let (blo, bhi) = b;\\n    /// Safety: borrow is enforced to be boolean due to its type.\\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n    unsafe {\\n        /*@safety: borrow is enforced to be boolean due to its type.\\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n        */\\n        let borrow = lte_hint(alo, blo);\\n\\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\\n        let rhi = ahi - bhi - (borrow as Field);\\n\\n        rlo.assert_max_bit_size::<128>();\\n        rhi.assert_max_bit_size::<128>();\\n    }\\n}\\n\\n/// Decompose a single field into two 16 byte fields.\\npub fn decompose(x: Field) -> (Field, Field) {\\n    if is_unconstrained() {\\n        compute_decomposition(x)\\n    } else {\\n        /// Safety: decomposition is properly checked below\\n        unsafe {\\n            /*@safety: decomposition is properly checked below*/\\n            // Take hints of the decomposition\\n            let (xlo, xhi) = decompose_hint(x);\\n\\n            // Range check the limbs\\n            xlo.assert_max_bit_size::<128>();\\n            xhi.assert_max_bit_size::<128>();\\n\\n            // Check that the decomposition is correct\\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\\n\\n            // Assert that the decomposition of P is greater than the decomposition of x\\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\\n            (xlo, xhi)\\n        }\\n    }\\n}\\n\\npub fn assert_gt(a: Field, b: Field) {\\n    if is_unconstrained() {\\n        assert(\\n            /// Safety: already unconstrained\\n            unsafe { field_less_than(b, a) },\\n        );\\n    } else {\\n        // Decompose a and b\\n        let a_limbs = decompose(a);\\n        let b_limbs = decompose(b);\\n\\n        // Assert that a_limbs is greater than b_limbs\\n        assert_gt_limbs(a_limbs, b_limbs)\\n    }\\n}\\n\\npub fn assert_lt(a: Field, b: Field) {\\n    assert_gt(b, a);\\n}\\n\\npub fn gt(a: Field, b: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unsafe in unconstrained\\n        unsafe {\\n            //@safety: unsafe in unconstrained\\n            field_less_than(b, a)\\n        }\\n    } else if a == b {\\n        false\\n    } else {\\n        /// Safety: Take a hint of the comparison and verify it\\n        unsafe {\\n            //@safety: Take a hint of the comparison and verify it\\n            if field_less_than(a, b) {\\n                assert_gt(b, a);\\n                false\\n            } else {\\n                assert_gt(a, b);\\n                true\\n            }\\n        }\\n    }\\n}\\n\\npub fn lt(a: Field, b: Field) -> bool {\\n    gt(b, a)\\n}\\n\\nmod tests {\\n    // TODO: Allow imports from \\"super\\"\\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\\n\\n    #[test]\\n    fn check_decompose() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_decompose_unconstrained() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_lte_hint() {\\n        assert(lte_hint(0, 1));\\n        assert(lte_hint(0, 0x100));\\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\\n        assert(!lte_hint(0 - 1, 0));\\n\\n        assert(lte_hint(0, 0));\\n        assert(lte_hint(0x100, 0x100));\\n        assert(lte_hint(0 - 1, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_assert_gt() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    unconstrained fn check_assert_gt_unconstrained() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    fn check_gt() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_gt_unconstrained() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_plo_phi() {\\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\\n        let p_bytes = crate::field::modulus_le_bytes();\\n        let mut p_low: Field = 0;\\n        let mut p_high: Field = 0;\\n\\n        let mut offset = 1;\\n        for i in 0..16 {\\n            p_low += (p_bytes[i] as Field) * offset;\\n            p_high += (p_bytes[i + 16] as Field) * offset;\\n            offset *= 256;\\n        }\\n        assert_eq(p_low, PLO);\\n        assert_eq(p_high, PHI);\\n    }\\n}\\n"},"19":{"path":"std/field/mod.nr","source":"pub mod bn254;\\nuse crate::{runtime::is_unconstrained, static_assert};\\nuse bn254::lt as bn254_lt;\\n\\nimpl Field {\\n    /// Asserts that `self` can be represented in `bit_size` bits.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\\n    // docs:start:assert_max_bit_size\\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\\n        // docs:end:assert_max_bit_size\\n        static_assert(\\n            BIT_SIZE < modulus_num_bits() as u32,\\n            \\"BIT_SIZE must be less than modulus_num_bits\\",\\n        );\\n        self.__assert_max_bit_size(BIT_SIZE);\\n    }\\n\\n    #[builtin(apply_range_constraint)]\\n    fn __assert_max_bit_size(self, bit_size: u32) {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_le_bits)]\\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_be_bits)]\\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_le_bits\\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_le_bits\\n        let bits = self._to_le_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(p[N - 1 - i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_be_bits\\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_be_bits\\n        let bits = self._to_be_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the decomposition does not overflow the modulus\\n            let p = modulus_be_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[i] != p[i]) {\\n                        assert(p[i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_le_bytes\\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_le_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_le_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_be_bytes\\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_be_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_be_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_be_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[i] != p[i]) {\\n                        assert(bytes[i] < p[i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    // docs:start:to_le_radix\\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            static_assert(1 < radix, \\"radix must be greater than 1\\");\\n            static_assert(radix <= 256, \\"radix must be less than or equal to 256\\");\\n            static_assert(radix & (radix - 1) == 0, \\"radix must be a power of 2\\");\\n        }\\n        self.__to_le_radix(radix)\\n    }\\n    // docs:end:to_le_radix\\n\\n    // docs:start:to_be_radix\\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            crate::assert_constant(radix);\\n        }\\n        self.__to_be_radix(radix)\\n    }\\n    // docs:end:to_be_radix\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_le_radix)]\\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_be_radix)]\\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // Returns self to the power of the given exponent value.\\n    // Caution: we assume the exponent fits into 32 bits\\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\\n    pub fn pow_32(self, exponent: Field) -> Field {\\n        let mut r: Field = 1;\\n        let b: [u1; 32] = exponent.to_le_bits();\\n\\n        for i in 1..33 {\\n            r *= r;\\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\\n        }\\n        r\\n    }\\n\\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\\n    pub fn sgn0(self) -> u1 {\\n        self as u1\\n    }\\n\\n    pub fn lt(self, another: Field) -> bool {\\n        if crate::compat::is_bn254() {\\n            bn254_lt(self, another)\\n        } else {\\n            lt_fallback(self, another)\\n        }\\n    }\\n\\n    /// Convert a little endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n\\n    /// Convert a big endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[N - 1 - i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n}\\n\\n#[builtin(modulus_num_bits)]\\npub comptime fn modulus_num_bits() -> u64 {}\\n\\n#[builtin(modulus_be_bits)]\\npub comptime fn modulus_be_bits() -> [u1] {}\\n\\n#[builtin(modulus_le_bits)]\\npub comptime fn modulus_le_bits() -> [u1] {}\\n\\n#[builtin(modulus_be_bytes)]\\npub comptime fn modulus_be_bytes() -> [u8] {}\\n\\n#[builtin(modulus_le_bytes)]\\npub comptime fn modulus_le_bytes() -> [u8] {}\\n\\n/// An unconstrained only built in to efficiently compare fields.\\n#[builtin(field_less_than)]\\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\\n\\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\\n    __field_less_than(x, y)\\n}\\n\\n// Convert a 32 byte array to a field element by modding\\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\\n    // Convert it to a field element\\n    let mut v = 1;\\n    let mut high = 0 as Field;\\n    let mut low = 0 as Field;\\n\\n    for i in 0..16 {\\n        high = high + (bytes32[15 - i] as Field) * v;\\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\\n        v = v * 256;\\n    }\\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\\n    low + high * v\\n}\\n\\nfn lt_fallback(x: Field, y: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unconstrained context\\n        unsafe {\\n            //@safety : unconstrained context\\n            field_less_than(x, y)\\n        }\\n    } else {\\n        let x_bytes: [u8; 32] = x.to_le_bytes();\\n        let y_bytes: [u8; 32] = y.to_le_bytes();\\n        let mut x_is_lt = false;\\n        let mut done = false;\\n        for i in 0..32 {\\n            if (!done) {\\n                let x_byte = x_bytes[32 - 1 - i] as u8;\\n                let y_byte = y_bytes[32 - 1 - i] as u8;\\n                let bytes_match = x_byte == y_byte;\\n                if !bytes_match {\\n                    x_is_lt = x_byte < y_byte;\\n                    done = true;\\n                }\\n            }\\n        }\\n        x_is_lt\\n    }\\n}\\n\\nmod tests {\\n    use crate::{panic::panic, runtime};\\n    use super::field_less_than;\\n\\n    #[test]\\n    // docs:start:to_be_bits_example\\n    fn test_to_be_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_be_bits();\\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\\n    }\\n    // docs:end:to_be_bits_example\\n\\n    #[test]\\n    // docs:start:to_le_bits_example\\n    fn test_to_le_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_le_bits();\\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\\n    }\\n    // docs:end:to_le_bits_example\\n\\n    #[test]\\n    // docs:start:to_be_bytes_example\\n    fn test_to_be_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_bytes();\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_bytes_example\\n\\n    #[test]\\n    // docs:start:to_le_bytes_example\\n    fn test_to_le_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_bytes();\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_bytes_example\\n\\n    #[test]\\n    // docs:start:to_be_radix_example\\n    fn test_to_be_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_radix(256);\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_radix_example\\n\\n    #[test]\\n    // docs:start:to_le_radix_example\\n    fn test_to_le_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_radix(256);\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_radix_example\\n\\n    #[test(should_fail_with = \\"radix must be greater than 1\\")]\\n    fn test_to_le_radix_1() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(1);\\n        } else {\\n            panic(f\\"radix must be greater than 1\\");\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\\n    // #[test]\\n    // fn test_to_le_radix_brillig_1() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(1);\\n    //         crate::println(out);\\n    //         let expected = [0; 8];\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test(should_fail_with = \\"radix must be a power of 2\\")]\\n    fn test_to_le_radix_3() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(3);\\n        } else {\\n            panic(f\\"radix must be a power of 2\\");\\n        }\\n    }\\n\\n    #[test]\\n    fn test_to_le_radix_brillig_3() {\\n        // this test should only fail in constrained mode\\n        if runtime::is_unconstrained() {\\n            let field = 1;\\n            let out: [u8; 8] = field.to_le_radix(3);\\n            let mut expected = [0; 8];\\n            expected[0] = 1;\\n            assert(out == expected, \\"unexpected result\\");\\n        }\\n    }\\n\\n    #[test(should_fail_with = \\"radix must be less than or equal to 256\\")]\\n    fn test_to_le_radix_512() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(512);\\n        } else {\\n            panic(f\\"radix must be less than or equal to 256\\")\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\\n    // #[test]\\n    // fn test_to_le_radix_brillig_512() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(512);\\n    //         let mut expected = [0; 8];\\n    //         expected[0] = 1;\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test]\\n    unconstrained fn test_field_less_than() {\\n        assert(field_less_than(0, 1));\\n        assert(field_less_than(0, 0x100));\\n        assert(field_less_than(0x100, 0 - 1));\\n        assert(!field_less_than(0 - 1, 0));\\n    }\\n}\\n"},"26":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\\nuse crate::hash::Hasher;\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2 {\\n    cache: [Field; 3],\\n    state: [Field; 4],\\n    cache_size: u32,\\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2 {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub fn new(iv: Field) -> Poseidon2 {\\n        let mut result =\\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let two_pow_64 = 18446744073709551616;\\n        let iv: Field = (in_len as Field) * two_pow_64;\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n\\npub struct Poseidon2Hasher {\\n    _state: [Field],\\n}\\n\\nimpl Hasher for Poseidon2Hasher {\\n    fn finish(self) -> Field {\\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..self._state.len() {\\n            sponge.absorb(self._state[i]);\\n        }\\n        sponge.squeeze()\\n    }\\n\\n    fn write(&mut self, input: Field) {\\n        self._state = self._state.push_back(input);\\n    }\\n}\\n\\nimpl Default for Poseidon2Hasher {\\n    fn default() -> Self {\\n        Poseidon2Hasher { _state: &[] }\\n    }\\n}\\n"},"52":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\\n    assert(false, message);\\n    crate::mem::zeroed()\\n}\\n"},"62":{"path":"/build-volume/noir-projects/noir-contracts/contracts/contract_instance_deployer_contract/src/main.nr","source":"use dep::aztec::macros::aztec;\\n\\n#[aztec]\\npub contract ContractInstanceDeployer {\\n    use dep::aztec::macros::{events::event, functions::private};\\n    use dep::aztec::protocol_types::{\\n        address::{AztecAddress, PartialAddress},\\n        constants::{DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE, REGISTERER_CONTRACT_ADDRESS},\\n        contract_class_id::ContractClassId,\\n        public_keys::PublicKeys,\\n        traits::Serialize,\\n        utils::arrays::array_concat,\\n    };\\n    use dep::contract_class_registerer::ContractClassRegisterer;\\n    use std::meta::derive;\\n\\n    #[derive(Serialize)]\\n    #[event]\\n    struct ContractInstanceDeployed {\\n        DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE: Field,\\n        address: AztecAddress,\\n        version: u8,\\n        salt: Field,\\n        contract_class_id: ContractClassId,\\n        initialization_hash: Field,\\n        public_keys: PublicKeys,\\n        deployer: AztecAddress,\\n    }\\n\\n    // We need to impl this separately because ts deserializes a point as two fields only.\\n    // We had issues that:\\n    // Notice how the \'is_infinite\' field is deserialized as the next point.\\n    // {\\n    //     masterNullifierPublicKey: Point {\\n    //   x: Fr<0x0000000000000000000000000000000000000000000000000000000000000012>,\\n    //   y: Fr<0x0000000000000000000000000000000000000000000000000000000000000034>,\\n    //   isInfinite: false,\\n    //   kind: \'point\'\\n    // },\\n    // masterIncomingViewingPublicKey: Point {\\n    //   x: Fr<0x0000000000000000000000000000000000000000000000000000000000000000>,\\n    //   y: Fr<0x0000000000000000000000000000000000000000000000000000000000000056>,\\n    //   isInfinite: false,\\n    //   kind: \'point\'\\n    // },\\n    // masterOutgoingViewingPublicKey: Point {\\n    //   x: Fr<0x0000000000000000000000000000000000000000000000000000000000000078>,\\n    //   y: Fr<0x0000000000000000000000000000000000000000000000000000000000000000>,\\n    //   isInfinite: false,\\n    //   kind: \'point\'\\n    // },\\n    // masterTaggingPublicKey: Point {\\n    //   x: Fr<0x0000000000000000000000000000000000000000000000000000000000000910>,\\n    //   y: Fr<0x0000000000000000000000000000000000000000000000000000000000001112>,\\n    //   isInfinite: false,\\n    //   kind: \'point\'\\n    // }\\n\\n    impl ContractInstanceDeployed {\\n        fn serialize_non_standard(self) -> [Field; 15] {\\n            [\\n                self.DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE,\\n                self.address.to_field(),\\n                self.version.to_field(),\\n                self.salt,\\n                self.contract_class_id.to_field(),\\n                self.initialization_hash,\\n                self.public_keys.npk_m.serialize()[0],\\n                self.public_keys.npk_m.serialize()[1],\\n                self.public_keys.ivpk_m.serialize()[0],\\n                self.public_keys.ivpk_m.serialize()[1],\\n                self.public_keys.ovpk_m.serialize()[0],\\n                self.public_keys.ovpk_m.serialize()[1],\\n                self.public_keys.tpk_m.serialize()[0],\\n                self.public_keys.tpk_m.serialize()[1],\\n                self.deployer.to_field(),\\n            ]\\n        }\\n    }\\n\\n    #[private]\\n    fn deploy(\\n        salt: Field,\\n        contract_class_id: ContractClassId,\\n        initialization_hash: Field,\\n        public_keys: PublicKeys,\\n        universal_deploy: bool,\\n    ) {\\n        // contract class must be registered to deploy an instance\\n        ContractClassRegisterer::at(REGISTERER_CONTRACT_ADDRESS)\\n            .assert_class_id_is_registered(contract_class_id)\\n            .call(&mut context);\\n\\n        let deployer = if universal_deploy {\\n            AztecAddress::zero()\\n        } else {\\n            context.msg_sender()\\n        };\\n\\n        let partial_address =\\n            PartialAddress::compute(contract_class_id, salt, initialization_hash, deployer);\\n\\n        let address = AztecAddress::compute(public_keys, partial_address);\\n\\n        // Emit the address as a nullifier to be able to prove that this instance has been (not) deployed\\n        context.push_nullifier(address.to_field());\\n\\n        // Broadcast the event\\n        let event = ContractInstanceDeployed {\\n            DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE,\\n            contract_class_id,\\n            address,\\n            public_keys,\\n            initialization_hash,\\n            salt,\\n            deployer,\\n            version: 1,\\n        };\\n\\n        let payload = event.serialize_non_standard();\\n        dep::aztec::oracle::debug_log::debug_log_format(\\"ContractInstanceDeployed: {}\\", payload);\\n\\n        let padded_log = array_concat(payload, [0; 3]);\\n        context.emit_private_log(padded_log);\\n    }\\n}\\n"},"63":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\\n};\\n\\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\\n\\nuse crate::hash::hash_args;\\nuse crate::oracle::execution_cache;\\n\\npub trait CallInterface<let N: u32> {\\n    fn get_args(self) -> [Field];\\n    fn get_selector(self) -> FunctionSelector;\\n    fn get_name(self) -> str<N>;\\n    fn get_contract_address(self) -> AztecAddress;\\n    fn get_is_static(self) -> bool;\\n}\\n\\npub struct PrivateCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: T,\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        execution_cache::store(self.args);\\n        let returns_hash = context.call_private_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            self.args_hash,\\n            false,\\n        );\\n        let returns: T = returns_hash.get_preimage();\\n        returns\\n    }\\n\\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        execution_cache::store(self.args);\\n        let returns_hash = context.call_private_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            self.args_hash,\\n            true,\\n        );\\n        returns_hash.get_preimage()\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PrivateVoidCallInterface<let N: u32> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: (),\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32> PrivateVoidCallInterface<N> {\\n    pub fn call(self, context: &mut PrivateContext) {\\n        execution_cache::store(self.args);\\n        context\\n            .call_private_function_with_args_hash(\\n                self.target_contract,\\n                self.selector,\\n                self.args_hash,\\n                false,\\n            )\\n            .assert_empty();\\n    }\\n\\n    pub fn view(self, context: &mut PrivateContext) {\\n        execution_cache::store(self.args);\\n        context\\n            .call_private_function_with_args_hash(\\n                self.target_contract,\\n                self.selector,\\n                self.args_hash,\\n                true,\\n            )\\n            .assert_empty();\\n    }\\n}\\n\\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PrivateStaticCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: T,\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        execution_cache::store(self.args);\\n        let returns = context.call_private_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            self.args_hash,\\n            true,\\n        );\\n        returns.get_preimage()\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PrivateStaticVoidCallInterface<let N: u32> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: (),\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\\n    pub fn view(self, context: &mut PrivateContext) {\\n        execution_cache::store(self.args);\\n        context\\n            .call_private_function_with_args_hash(\\n                self.target_contract,\\n                self.selector,\\n                self.args_hash,\\n                true,\\n            )\\n            .assert_empty();\\n    }\\n}\\n\\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args: [Field],\\n    pub gas_opts: GasOpts,\\n    pub return_type: T,\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32, T> PublicCallInterface<N, T> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        let returns = context.call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        Deserialize::deserialize(returns.as_array::<M>())\\n    }\\n\\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        Deserialize::deserialize(returns.as_array::<M>())\\n    }\\n\\n    pub fn enqueue(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            false,\\n        )\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicVoidCallInterface<let N: u32> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args: [Field],\\n    pub return_type: (),\\n    pub is_static: bool,\\n    pub gas_opts: GasOpts,\\n}\\n\\nimpl<let N: u32> PublicVoidCallInterface<N> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn call(self, context: &mut PublicContext) {\\n        let returns = context.call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        assert(returns.len() == 0);\\n    }\\n\\n    pub unconstrained fn view(self, context: &mut PublicContext) {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        assert(returns.len() == 0);\\n    }\\n\\n    pub fn enqueue(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            false,\\n        )\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n\\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicStaticCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args: [Field],\\n    pub return_type: T,\\n    pub is_static: bool,\\n    pub gas_opts: GasOpts,\\n}\\n\\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        Deserialize::deserialize(returns.as_array::<M>())\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicStaticVoidCallInterface<let N: u32> {\\n    target_contract: AztecAddress,\\n    selector: FunctionSelector,\\n    name: str<N>,\\n    args: [Field],\\n    return_type: (),\\n    is_static: bool,\\n    gas_opts: GasOpts,\\n}\\n\\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn view(self, context: &mut PublicContext) {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        assert(returns.len() == 0);\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n"},"70":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use dep::protocol_types::debug_log::debug_log_format;\\n\\nuse crate::{\\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\\n    hash::{ArgsHasher, hash_args_array},\\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\\n    messaging::process_l1_to_l2_message,\\n    oracle::{\\n        block_header::get_block_header_at,\\n        call_private_function::call_private_function_internal,\\n        enqueue_public_function_call::{\\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\\n            set_public_teardown_function_call_internal,\\n        },\\n        execution_cache,\\n        key_validation_request::get_key_validation_request,\\n        notes::{notify_created_nullifier, notify_nullified_note},\\n    },\\n};\\nuse dep::protocol_types::{\\n    abis::{\\n        call_context::CallContext,\\n        function_selector::FunctionSelector,\\n        log::Log,\\n        log_hash::LogHash,\\n        max_block_number::MaxBlockNumber,\\n        note_hash::NoteHash,\\n        nullifier::Nullifier,\\n        private_call_request::PrivateCallRequest,\\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\\n        private_log::PrivateLogData,\\n        public_call_request::PublicCallRequest,\\n        read_request::ReadRequest,\\n        side_effect::Counted,\\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    block_header::BlockHeader,\\n    constants::{\\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\\n    },\\n    messaging::l2_to_l1_message::L2ToL1Message,\\n    traits::Empty,\\n};\\n\\n// When finished, one can call .finish() to convert back to the abi\\npub struct PrivateContext {\\n    // docs:start:private-context\\n    pub inputs: PrivateContextInputs,\\n    pub side_effect_counter: u32,\\n\\n    pub min_revertible_side_effect_counter: u32,\\n    pub is_fee_payer: bool,\\n\\n    pub args_hash: Field,\\n    pub return_hash: Field,\\n\\n    pub max_block_number: MaxBlockNumber,\\n\\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\\n\\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\\n\\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\\n    pub public_teardown_call_request: PublicCallRequest,\\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\\n    // docs:end:private-context\\n\\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\\n    pub historical_header: BlockHeader,\\n\\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\\n\\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\\n    // fetching the same request multiple times.\\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\\n}\\n\\nimpl PrivateContext {\\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\\n        PrivateContext {\\n            inputs,\\n            side_effect_counter: inputs.start_side_effect_counter + 1,\\n            min_revertible_side_effect_counter: 0,\\n            is_fee_payer: false,\\n            args_hash,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            historical_header: inputs.historical_header,\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n\\n    pub fn msg_sender(self) -> AztecAddress {\\n        self.inputs.call_context.msg_sender\\n    }\\n\\n    pub fn this_address(self) -> AztecAddress {\\n        self.inputs.call_context.contract_address\\n    }\\n\\n    pub fn chain_id(self) -> Field {\\n        self.inputs.tx_context.chain_id\\n    }\\n\\n    pub fn version(self) -> Field {\\n        self.inputs.tx_context.version\\n    }\\n\\n    pub fn selector(self) -> FunctionSelector {\\n        self.inputs.call_context.function_selector\\n    }\\n\\n    pub fn get_args_hash(self) -> Field {\\n        self.args_hash\\n    }\\n\\n    pub fn push_note_hash(&mut self, note_hash: Field) {\\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\\n\\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\\n        debug_log_format(\\n            \\"Context.note_hashes, after pushing new note hash: {0}\\",\\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\\n        );\\n    }\\n\\n    pub fn push_nullifier(&mut self, nullifier: Field) {\\n        notify_created_nullifier(nullifier);\\n        self.nullifiers.push(\\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\\n        );\\n    }\\n\\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\\n        let nullifier_counter = self.next_counter();\\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\\n        self.nullifiers.push(\\n            Nullifier {\\n                value: nullifier,\\n                note_hash: nullified_note_hash,\\n                counter: nullifier_counter,\\n            },\\n        );\\n    }\\n\\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\\n    // included in).\\n    pub fn get_block_header(self) -> BlockHeader {\\n        self.historical_header\\n    }\\n\\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\\n    // of historical header.\\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\\n        get_block_header_at(block_number, self)\\n    }\\n\\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\\n        execution_cache::store(returns_hasher.fields);\\n        self.return_hash = returns_hasher.hash();\\n    }\\n\\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\\n        PrivateCircuitPublicInputs {\\n            call_context: self.inputs.call_context,\\n            args_hash: self.args_hash,\\n            returns_hash: self.return_hash,\\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\\n            is_fee_payer: self.is_fee_payer,\\n            max_block_number: self.max_block_number,\\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\\n            key_validation_requests_and_generators: self\\n                .key_validation_requests_and_generators\\n                .storage(),\\n            note_hashes: self.note_hashes.storage(),\\n            nullifiers: self.nullifiers.storage(),\\n            private_call_requests: self.private_call_requests.storage(),\\n            public_call_requests: self.public_call_requests.storage(),\\n            public_teardown_call_request: self.public_teardown_call_request,\\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\\n            end_side_effect_counter: self.side_effect_counter,\\n            private_logs: self.private_logs.storage(),\\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\\n            historical_header: self.historical_header,\\n            tx_context: self.inputs.tx_context,\\n        }\\n    }\\n\\n    pub fn set_as_fee_payer(&mut self) {\\n        dep::protocol_types::debug_log::debug_log_format(\\n            \\"Setting {0} as fee payer\\",\\n            [self.this_address().to_field()],\\n        );\\n        self.is_fee_payer = true;\\n    }\\n\\n    pub fn end_setup(&mut self) {\\n        // dep::protocol_types::debug_log::debug_log_format(\\n        //     \\"Ending setup at counter {0}\\",\\n        //     [self.side_effect_counter as Field]\\n        // );\\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\\n    }\\n\\n    // docs:start:max-block-number\\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\\n        // docs:end:max-block-number\\n        self.max_block_number =\\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\\n    }\\n\\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\\n        self.note_hash_read_requests.push(side_effect);\\n    }\\n\\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\\n        self.nullifier_read_requests.push(request);\\n    }\\n\\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\\n    }\\n\\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\\n    }\\n\\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\\n        let cached_request =\\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\\n\\n        if cached_request.pk_m.hash() == pk_m_hash {\\n            // We get a match so the cached request is the latest one\\n            cached_request.sk_app\\n        } else {\\n            // We didn\'t get a match meaning the cached result is stale\\n            // Typically we\'d validate keys by showing that they are the preimage of `pk_m_hash`, but that\'d require\\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\\n            // to `pk_m_hash`.\\n\\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\\n            /// for the correct public key has been received.\\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\\n            assert_eq(request.pk_m.hash(), pk_m_hash, \\"Obtained invalid key validation request\\");\\n\\n            self.key_validation_requests_and_generators.push(\\n                KeyValidationRequestAndGenerator {\\n                    request,\\n                    sk_app_generator: sk_generators[key_index],\\n                },\\n            );\\n            self.last_key_validation_requests[key_index] = Option::some(request);\\n            request.sk_app\\n        }\\n    }\\n\\n    // docs:start:context_message_portal\\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\\n        // docs:end:context_message_portal\\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\\n        self.l2_to_l1_msgs.push(message);\\n    }\\n\\n    // docs:start:context_consume_l1_to_l2_message\\n    // docs:start:consume_l1_to_l2_message\\n    pub fn consume_l1_to_l2_message(\\n        &mut self,\\n        content: Field,\\n        secret: Field,\\n        sender: EthAddress,\\n        leaf_index: Field,\\n    ) {\\n        // docs:end:context_consume_l1_to_l2_message\\n        let nullifier = process_l1_to_l2_message(\\n            self.historical_header.state.l1_to_l2_message_tree.root,\\n            self.this_address(),\\n            sender,\\n            self.chain_id(),\\n            self.version(),\\n            content,\\n            secret,\\n            leaf_index,\\n        );\\n\\n        // Push nullifier (and the \\"commitment\\" corresponding to this can be \\"empty\\")\\n        self.push_nullifier(nullifier)\\n    }\\n    // docs:end:consume_l1_to_l2_message\\n\\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn emit_raw_note_log(\\n        &mut self,\\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\\n        note_hash_counter: u32,\\n    ) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_private_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) -> ReturnsHash {\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        let start_side_effect_counter = self.side_effect_counter;\\n\\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\\n        /// to `returns_hash` and the side effects counter to increment from start to end.\\n        let (end_side_effect_counter, returns_hash) = unsafe {\\n            call_private_function_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                start_side_effect_counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        self.private_call_requests.push(\\n            PrivateCallRequest {\\n                call_context: CallContext {\\n                    msg_sender: self.this_address(),\\n                    contract_address,\\n                    function_selector,\\n                    is_static_call,\\n                },\\n                args_hash,\\n                returns_hash,\\n                start_side_effect_counter,\\n                end_side_effect_counter,\\n            },\\n        );\\n\\n        // TODO (fees) figure out why this crashes the prover and enable it\\n        // we need this in order to pay fees inside child call contexts\\n        // assert(\\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\\n        //     | (item.public_inputs.min_revertible_side_effect_counter\\n        //         > self.min_revertible_side_effect_counter)\\n        // );\\n        // if item.public_inputs.min_revertible_side_effect_counter\\n        //     > self.min_revertible_side_effect_counter {\\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\\n        // }\\n        self.side_effect_counter = end_side_effect_counter + 1;\\n        ReturnsHash::new(returns_hash)\\n    }\\n\\n    pub fn call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_public_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            enqueue_public_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        // Public calls are rerouted through the dispatch function.\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        let call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n\\n        self.public_call_requests.push(Counted::new(call_request, counter));\\n    }\\n\\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.set_public_teardown_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn set_public_teardown_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            set_public_teardown_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        self.public_teardown_call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n    }\\n\\n    fn next_counter(&mut self) -> u32 {\\n        let counter = self.side_effect_counter;\\n        self.side_effect_counter += 1;\\n        counter\\n    }\\n}\\n\\nimpl Empty for PrivateContext {\\n    fn empty() -> Self {\\n        PrivateContext {\\n            inputs: PrivateContextInputs::empty(),\\n            side_effect_counter: 0 as u32,\\n            min_revertible_side_effect_counter: 0 as u32,\\n            is_fee_payer: false,\\n            args_hash: 0,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            historical_header: BlockHeader::empty(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n}\\n"},"72":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr","source":"use crate::{hash::hash_args_array, oracle::execution_cache};\\nuse dep::protocol_types::traits::Deserialize;\\n\\npub struct ReturnsHash {\\n    hash: Field,\\n}\\n\\nimpl ReturnsHash {\\n    pub fn new(hash: Field) -> Self {\\n        ReturnsHash { hash }\\n    }\\n\\n    pub fn assert_empty(self) {\\n        assert_eq(self.hash, 0);\\n    }\\n\\n    pub fn raw(self) -> Field {\\n        self.hash\\n    }\\n\\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\\n    /// values.\\n    pub fn get_preimage<T, let N: u32>(self) -> T\\n    where\\n        T: Deserialize<N>,\\n    {\\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\\n        assert_eq(self.hash, hash_args_array(preimage));\\n\\n        Deserialize::deserialize(preimage)\\n    }\\n}\\n"},"86":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\\nuse dep::protocol_types::{\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\\n        GENERATOR_INDEX__SECRET_HASH,\\n    },\\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\\n    point::Point,\\n    traits::Hash,\\n};\\n\\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\\n\\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\\n}\\n\\npub fn compute_secret_hash(secret: Field) -> Field {\\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\\n}\\n\\npub fn compute_l1_to_l2_message_hash(\\n    sender: EthAddress,\\n    chain_id: Field,\\n    recipient: AztecAddress,\\n    version: Field,\\n    content: Field,\\n    secret_hash: Field,\\n    leaf_index: Field,\\n) -> Field {\\n    let mut hash_bytes = [0 as u8; 224];\\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\\n    let version_bytes: [u8; 32] = version.to_be_bytes();\\n    let content_bytes: [u8; 32] = content.to_be_bytes();\\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\\n\\n    for i in 0..32 {\\n        hash_bytes[i] = sender_bytes[i];\\n        hash_bytes[i + 32] = chain_id_bytes[i];\\n        hash_bytes[i + 64] = recipient_bytes[i];\\n        hash_bytes[i + 96] = version_bytes[i];\\n        hash_bytes[i + 128] = content_bytes[i];\\n        hash_bytes[i + 160] = secret_hash_bytes[i];\\n        hash_bytes[i + 192] = leaf_index_bytes[i];\\n    }\\n\\n    sha256_to_field(hash_bytes)\\n}\\n\\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\\n}\\n\\npub struct ArgsHasher {\\n    pub fields: [Field],\\n}\\n\\nimpl Hash for ArgsHasher {\\n    fn hash(self) -> Field {\\n        hash_args(self.fields)\\n    }\\n}\\n\\nimpl ArgsHasher {\\n    pub fn new() -> Self {\\n        Self { fields: [] }\\n    }\\n\\n    pub fn add(&mut self, field: Field) {\\n        self.fields = self.fields.push_back(field);\\n    }\\n\\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\\n        for i in 0..N {\\n            self.fields = self.fields.push_back(fields[i]);\\n        }\\n    }\\n}\\n\\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\npub fn hash_args(args: [Field]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_var_args_hash() {\\n    let mut input = ArgsHasher::new();\\n    for i in 0..100 {\\n        input.add(i as Field);\\n    }\\n    let hash = input.hash();\\n    dep::std::println(hash);\\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\\n}\\n"},"125":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\\n};\\n\\n#[oracle(callPrivateFunction)]\\nunconstrained fn call_private_function_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _start_side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> [Field; 2] {}\\n\\npub unconstrained fn call_private_function_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    start_side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> (u32, Field) {\\n    let fields = call_private_function_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        start_side_effect_counter,\\n        is_static_call,\\n    );\\n\\n    let mut reader = Reader::new(fields);\\n    let end_side_effect_counter = reader.read_u32();\\n    let returns_hash = reader.read();\\n\\n    (end_side_effect_counter, returns_hash)\\n}\\n"},"128":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr","source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\\npub fn store(values: [Field]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\\n}\\n\\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\\n    let _ = store_in_execution_cache_oracle(values);\\n}\\n\\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\\n    load_from_execution_cache_oracle(hash)\\n}\\n\\n#[oracle(storeInExecutionCache)]\\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\\n\\n#[oracle(loadFromExecutionCache)]\\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\\n"},"139":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\\n\\nuse dep::protocol_types::{\\n    address::AztecAddress,\\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\\n};\\n\\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\\npub fn notify_created_note<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        notify_created_note_oracle_wrapper(\\n            storage_slot,\\n            note_type_id,\\n            packed_note_content,\\n            note_hash,\\n            counter,\\n        )\\n    };\\n}\\n\\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\\n/// actual block.\\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\\n}\\n\\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\\npub fn notify_created_nullifier(nullifier: Field) {\\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\\n}\\n\\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_created_note_oracle(\\n        storage_slot,\\n        note_type_id,\\n        packed_note_content,\\n        note_hash,\\n        counter,\\n    );\\n}\\n\\n#[oracle(notifyCreatedNote)]\\nunconstrained fn notify_created_note_oracle<let N: u32>(\\n    _storage_slot: Field,\\n    _note_type_id: Field,\\n    _packed_note_content: [Field; N],\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_nullified_note_oracle_wrapper(\\n    nullifier: Field,\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\\n}\\n\\n#[oracle(notifyNullifiedNote)]\\nunconstrained fn notify_nullified_note_oracle(\\n    _nullifier: Field,\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\\n    let _ = notify_created_nullifier_oracle(nullifier);\\n}\\n\\n#[oracle(notifyCreatedNullifier)]\\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\\n\\n#[oracle(getNotes)]\\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\\n    _storage_slot: Field,\\n    _num_selects: u8,\\n    _select_by_indexes: [u8; N],\\n    _select_by_offsets: [u8; N],\\n    _select_by_lengths: [u8; N],\\n    _select_values: [Field; N],\\n    _select_comparators: [u8; N],\\n    _sort_by_indexes: [u8; N],\\n    _sort_by_offsets: [u8; N],\\n    _sort_by_lengths: [u8; N],\\n    _sort_order: [u8; N],\\n    _limit: u32,\\n    _offset: u32,\\n    _status: u8,\\n    _return_size: u32,\\n    _placeholder_fields: [Field; S],\\n) -> [Field; S] {}\\n\\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; N],\\n    select_by_offsets: [u8; N],\\n    select_by_lengths: [u8; N],\\n    select_values: [Field; N],\\n    select_comparators: [u8; N],\\n    sort_by_indexes: [u8; N],\\n    sort_by_offsets: [u8; N],\\n    sort_by_lengths: [u8; N],\\n    sort_order: [u8; N],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_fields: [Field; S],\\n) -> [Field; S] {\\n    let return_size = placeholder_fields.len() as u32;\\n    get_notes_oracle(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        return_size,\\n        placeholder_fields,\\n    )\\n}\\n\\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; M],\\n    select_by_offsets: [u8; M],\\n    select_by_lengths: [u8; M],\\n    select_values: [Field; M],\\n    select_comparators: [u8; M],\\n    sort_by_indexes: [u8; M],\\n    sort_by_offsets: [u8; M],\\n    sort_by_lengths: [u8; M],\\n    sort_order: [u8; M],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\\n) -> [Option<Note>; S]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    sync_notes_oracle_wrapper();\\n    let fields = get_notes_oracle_wrapper(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        placeholder_fields,\\n    );\\n    let num_notes = fields[0] as u32;\\n    let contract_address = AztecAddress::from_field(fields[1]);\\n    for i in 0..placeholder_opt_notes.len() {\\n        if i < num_notes {\\n            // lengths named as per typescript.\\n            let return_header_length: u32 = 2; // num_notes & contract_address.\\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\\n\\n            let nonce = fields[read_offset];\\n            let note_hash_counter = fields[read_offset + 1] as u32;\\n            let note_content = array::subarray(fields, read_offset + 2);\\n\\n            let mut note = Note::unpack_content(note_content);\\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\\n\\n            placeholder_opt_notes[i] = Option::some(note);\\n        };\\n    }\\n    placeholder_opt_notes\\n}\\n\\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\\n    check_nullifier_exists_oracle(inner_nullifier) == 1\\n}\\n\\n#[oracle(checkNullifierExists)]\\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\\n\\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\\n}\\n\\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\\n/// Includes the last known index used to send a note tagged with this secret.\\n/// For this to work, PXE must know the ivsk_m of the sender.\\n/// For the recipient\'s side, only the address is needed.\\npub unconstrained fn get_indexed_tagging_secret_as_sender(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) -> IndexedTaggingSecret {\\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\\n    IndexedTaggingSecret::deserialize(result)\\n}\\n\\n#[oracle(getIndexedTaggingSecretAsSender)]\\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\\n\\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\\n/// future notes get a different tag and can be discovered by the recipient.\\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\\n/// that are not found by the recipient.\\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\\n    }\\n}\\n\\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) {\\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\\n}\\n\\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) {}\\n\\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\\n/// for later querying via the `get_notes` oracle.\\npub fn sync_notes() {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        sync_notes_oracle_wrapper();\\n    }\\n}\\n\\nunconstrained fn sync_notes_oracle_wrapper() {\\n    sync_notes_oracle();\\n}\\n\\n#[oracle(syncNotes)]\\nunconstrained fn sync_notes_oracle() {}\\n"},"240":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\\n    abis::function_selector::FunctionSelector,\\n    address::{\\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\\n    },\\n    constants::{\\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        MAX_FIELD_VALUE,\\n    },\\n    contract_class_id::ContractClassId,\\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\\n    merkle_tree::membership::MembershipWitness,\\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\\n};\\n\\n// We do below because `use crate::point::Point;` does not work\\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\n\\nuse crate::public_keys::AddressPoint;\\nuse ec::{pow, sqrt};\\nuse std::{\\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\\n    ops::Add,\\n};\\n\\n// Aztec address\\npub struct AztecAddress {\\n    pub inner: Field,\\n}\\n\\nimpl Eq for AztecAddress {\\n    fn eq(self, other: Self) -> bool {\\n        self.to_field() == other.to_field()\\n    }\\n}\\n\\nimpl Empty for AztecAddress {\\n    fn empty() -> Self {\\n        Self { inner: 0 }\\n    }\\n}\\n\\nimpl ToField for AztecAddress {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl FromField for AztecAddress {\\n    fn from_field(value: Field) -> AztecAddress {\\n        AztecAddress { inner: value }\\n    }\\n}\\n\\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        [self.to_field()]\\n    }\\n}\\n\\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        FromField::from_field(fields[0])\\n    }\\n}\\n\\n/// We implement the Packable trait for AztecAddress because it can be stored in contract\'s storage (and there\\n/// the implementation of Packable is required).\\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        self.serialize()\\n    }\\n\\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        Self::deserialize(fields)\\n    }\\n}\\n\\nimpl AztecAddress {\\n    pub fn zero() -> Self {\\n        Self { inner: 0 }\\n    }\\n\\n    pub fn to_address_point(self) -> AddressPoint {\\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\\n        // equation which defines our bn curve:\\n        // y^2 = x^3 - 17; x = address\\n        let x = self.inner;\\n        let y_squared = pow(x, 3) - 17;\\n\\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\\n        let mut y = sqrt(y_squared);\\n\\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\\n        // note: The field modulus is MAX_FIELD_VALUE + 1\\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\\n            y = (MAX_FIELD_VALUE + 1) - y;\\n        }\\n\\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\\n    }\\n\\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\\n        let public_keys_hash = public_keys.hash();\\n\\n        let pre_address = poseidon2_hash_with_separator(\\n            [public_keys_hash.to_field(), partial_address.to_field()],\\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        );\\n\\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\\n            public_keys.ivpk_m.to_point(),\\n        );\\n\\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\\n        AztecAddress::from_field(address_point.x)\\n    }\\n\\n    pub fn compute_from_private_function(\\n        function_selector: FunctionSelector,\\n        function_vk_hash: Field,\\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\\n        contract_class_artifact_hash: Field,\\n        contract_class_public_bytecode_commitment: Field,\\n        salted_initialization_hash: SaltedInitializationHash,\\n        public_keys: PublicKeys,\\n    ) -> Self {\\n        let private_functions_root = private_functions_root_from_siblings(\\n            function_selector,\\n            function_vk_hash,\\n            function_leaf_membership_witness.leaf_index,\\n            function_leaf_membership_witness.sibling_path,\\n        );\\n\\n        let contract_class_id = ContractClassId::compute(\\n            contract_class_artifact_hash,\\n            private_functions_root,\\n            contract_class_public_bytecode_commitment,\\n        );\\n\\n        // Compute contract address using the preimage which includes the class_id.\\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\\n            contract_class_id,\\n            salted_initialization_hash,\\n        );\\n\\n        AztecAddress::compute(public_keys, partial_address)\\n    }\\n\\n    pub fn is_zero(self) -> bool {\\n        self.inner == 0\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n\\n#[test]\\nfn compute_address_from_partial_and_pub_keys() {\\n    let public_keys = PublicKeys {\\n        npk_m: NpkM {\\n            inner: Point {\\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\\n                is_infinite: false,\\n            },\\n        },\\n        ivpk_m: IvpkM {\\n            inner: Point {\\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\\n                is_infinite: false,\\n            },\\n        },\\n        ovpk_m: OvpkM {\\n            inner: Point {\\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\\n                is_infinite: false,\\n            },\\n        },\\n        tpk_m: TpkM {\\n            inner: Point {\\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\\n                is_infinite: false,\\n            },\\n        },\\n    };\\n\\n    let partial_address = PartialAddress::from_field(\\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\\n    );\\n\\n    let address = AztecAddress::compute(public_keys, partial_address);\\n\\n    // The following value was generated by `derivation.test.ts`.\\n    // --\x3e Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\\n    let expected_computed_address_from_partial_and_pubkeys =\\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\\n}\\n\\n#[test]\\nfn compute_preaddress_from_partial_and_pub_keys() {\\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\\n    let expected_computed_preaddress_from_partial_and_pubkey =\\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\\n}\\n\\n#[test]\\nfn from_field_to_field() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(FromField::from_field(address.to_field()), address);\\n}\\n\\n#[test]\\nfn serde() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\\n}\\n"},"243":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\\n    contract_class_id::ContractClassId,\\n    hash::poseidon2_hash_with_separator,\\n    traits::{Deserialize, Serialize, ToField},\\n};\\n\\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\\n\\n// Partial address\\npub struct PartialAddress {\\n    pub inner: Field,\\n}\\n\\nimpl ToField for PartialAddress {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\\n        [self.to_field()]\\n    }\\n}\\n\\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\\n        PartialAddress { inner: fields[0] }\\n    }\\n}\\n\\nimpl PartialAddress {\\n    pub fn from_field(field: Field) -> Self {\\n        Self { inner: field }\\n    }\\n\\n    pub fn compute(\\n        contract_class_id: ContractClassId,\\n        salt: Field,\\n        initialization_hash: Field,\\n        deployer: AztecAddress,\\n    ) -> Self {\\n        PartialAddress::compute_from_salted_initialization_hash(\\n            contract_class_id,\\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\\n        )\\n    }\\n\\n    pub fn compute_from_salted_initialization_hash(\\n        contract_class_id: ContractClassId,\\n        salted_initialization_hash: SaltedInitializationHash,\\n    ) -> Self {\\n        PartialAddress::from_field(poseidon2_hash_with_separator(\\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\\n        ))\\n    }\\n\\n    pub fn to_field(self) -> Field {\\n        self.inner\\n    }\\n\\n    pub fn is_zero(self) -> bool {\\n        self.to_field() == 0\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n"},"245":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\\n    hash::poseidon2_hash_with_separator, traits::ToField,\\n};\\n\\n// Salted initialization hash. Used in the computation of a partial address.\\npub struct SaltedInitializationHash {\\n    pub inner: Field,\\n}\\n\\nimpl ToField for SaltedInitializationHash {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl SaltedInitializationHash {\\n    pub fn from_field(field: Field) -> Self {\\n        Self { inner: field }\\n    }\\n\\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\\n            [salt, initialization_hash, deployer.to_field()],\\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\\n        ))\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n"},"256":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\\n/// Example:\\n///   debug_log(\\"blah blah this is a debug string\\");\\npub fn debug_log<let N: u32>(msg: str<N>) {\\n    debug_log_format(msg, []);\\n}\\n\\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\\n/// Examples:\\n///   debug_log_format(\\"get_2(slot:{0}) =>\\\\n\\\\t0:{1}\\\\n\\\\t1:{2}\\", [storage_slot, note0_hash, note1_hash]);\\n///   debug_log_format(\\"whole array: {}\\", [e1, e2, e3, e4]);\\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { debug_log_oracle_wrapper(msg, args) };\\n}\\n\\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\\n    msg: str<M>,\\n    args: [Field; N],\\n) {\\n    debug_log_oracle(msg, args.as_slice());\\n}\\n\\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \\"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\\"`\\n#[oracle(debugLog)]\\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\\n"},"257":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\\n    abis::{\\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\\n        function_selector::FunctionSelector,\\n        log_hash::{LogHash, ScopedLogHash},\\n        note_hash::ScopedNoteHash,\\n        nullifier::ScopedNullifier,\\n        private_log::{PrivateLog, PrivateLogData},\\n        side_effect::{OrderedValue, scoped::Scoped},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\\n    },\\n    merkle_tree::root::root_from_sibling_path,\\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\\n    poseidon2::Poseidon2Sponge,\\n    traits::{FromField, Hash, is_empty, ToField},\\n    utils::field::field_from_bytes_32_trunc,\\n};\\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\\n\\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\\n    let sha256_hashed = sha256::digest(bytes_to_hash);\\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\\n\\n    hash_in_a_field\\n}\\n\\npub fn private_functions_root_from_siblings(\\n    selector: FunctionSelector,\\n    vk_hash: Field,\\n    function_leaf_index: Field,\\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\\n) -> Field {\\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\\n    let function_leaf = function_leaf_preimage.hash();\\n    root_from_sibling_path(\\n        function_leaf,\\n        function_leaf_index,\\n        function_leaf_sibling_path,\\n    )\\n}\\n\\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\\n    // unique).\\n    poseidon2_hash_with_separator(\\n        [first_nullifier_in_tx, note_index_in_tx as Field],\\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\\n    )\\n}\\n\\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\\n    let inputs = [nonce, siloed_note_hash];\\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\\n}\\n\\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), note_hash],\\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\\n    )\\n}\\n\\n/// Computes unique note hashes from siloed note hashes\\npub fn compute_unique_siloed_note_hash(\\n    siloed_note_hash: Field,\\n    first_nullifier: Field,\\n    note_index_in_tx: u32,\\n) -> Field {\\n    if siloed_note_hash == 0 {\\n        0\\n    } else {\\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\\n        compute_unique_note_hash(nonce, siloed_note_hash)\\n    }\\n}\\n\\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\\n    if note_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\\n    }\\n}\\n\\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), nullifier],\\n        GENERATOR_INDEX__OUTER_NULLIFIER,\\n    )\\n}\\n\\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\\n    if nullifier.contract_address.is_zero() {\\n        nullifier.value() // Return value instead of 0 because the first nullifier\'s contract address is zero.\\n    } else {\\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\\n    }\\n}\\n\\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\\n    poseidon2_hash([contract_address.to_field(), field])\\n}\\n\\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\\n    if private_log.contract_address.is_zero() {\\n        private_log.inner.log\\n    } else {\\n        let mut fields = private_log.inner.log.fields;\\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\\n        PrivateLog { fields }\\n    }\\n}\\n\\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\\n    accumulate_sha256([address.to_field(), log_hash])\\n}\\n\\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\\n    if log_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\\n    }\\n}\\n\\npub fn merkle_hash(left: Field, right: Field) -> Field {\\n    poseidon2_hash([left, right])\\n}\\n\\npub fn compute_l2_to_l1_hash(\\n    contract_address: AztecAddress,\\n    recipient: EthAddress,\\n    content: Field,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    let mut bytes: [u8; 160] = std::mem::zeroed();\\n\\n    let inputs =\\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\\n    for i in 0..5 {\\n        // TODO are bytes be in fr.to_buffer() ?\\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\\n        for j in 0..32 {\\n            bytes[32 * i + j] = item_bytes[j];\\n        }\\n    }\\n\\n    sha256_to_field(bytes)\\n}\\n\\npub fn silo_l2_to_l1_message(\\n    msg: ScopedL2ToL1Message,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    if msg.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_l2_to_l1_hash(\\n            msg.contract_address,\\n            msg.message.recipient,\\n            msg.message.content,\\n            rollup_version_id,\\n            chain_id,\\n        )\\n    }\\n}\\n\\n// Computes sha256 hash of 2 input hashes.\\n//\\n// NB: This method now takes in two 31 byte fields - it assumes that any input\\n// is the result of a sha_to_field hash and => is truncated\\n//\\n// TODO(Jan and David): This is used for the encrypted_log hashes.\\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\\n//\\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\\n    // This is a note about the cpp code, since it takes an array of Fields\\n    // instead of a U128.\\n    // 4 Field elements when converted to bytes will usually\\n    // occupy 4 * 32 = 128 bytes.\\n    // However, this function is making the assumption that each Field\\n    // only occupies 128 bits.\\n    //\\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\\n    // Concatentate two fields into 32x2 = 64 bytes\\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\\n    let mut hash_input_flattened = [0; 64];\\n    for offset in 0..input.len() {\\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n\\n    sha256_to_field(hash_input_flattened)\\n}\\n\\n// Computes the final logs hash for a tx.\\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\\n    let mut hash_input_flattened = [0; N * 32];\\n    for offset in 0..N {\\n        // TODO: This is not checking that the decomposition is smaller than P\\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n    // Ideally we would push to a slice then hash, but there is no sha_slice\\n    // Hardcode to 256 bytes for now\\n    let mut hash = sha256_to_field(hash_input_flattened);\\n    // Not having a 0 value hash for empty logs causes issues with empty txs\\n    // used for padding. Returning early is currently unsupported.\\n    // We always provide sorted logs here, so 0 being empty means all are empty.\\n    if is_empty(logs[0]) {\\n        hash = 0;\\n    }\\n    hash\\n}\\n\\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\\n    crate::hash::poseidon2_hash(key)\\n}\\n\\n#[inline_always]\\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\\n}\\n\\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\\n    poseidon2_hash(inputs_with_separator)\\n}\\n\\n// Performs a fixed length hash with a subarray of the given input.\\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\\n// Using stdlib poseidon, this will always absorb an extra 1 as a \'variable\' hash, and not match spongeblob.squeeze()\\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\\n#[no_predicates]\\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\\n    sponge.squeeze()\\n}\\n\\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\\n// and absorbing in chunks of 3 below.\\n#[no_predicates]\\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n    // fixed-length and variable-length hashes do not collide)\\n    if in_len != N {\\n        sponge.absorb(1);\\n    }\\n    sponge.squeeze()\\n}\\n\\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\\n// The below code forces the compiler to:\\n//  - absorb normally up to 2 times to set cache_size to 1\\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\\n//  - absorb normally up to 2 times to add any remaining values to the hash\\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\\n\\n#[no_predicates]\\nfn poseidon2_absorb_chunks<let N: u32>(\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n) -> Poseidon2Sponge {\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\\n    // since we cannot isolate computation branches. The below is just to avoid that.\\n    let shift = if in_len == 0 { 0 } else { 1 };\\n    if in_len != 0 {\\n        // cache_size = 0, init absorb\\n        sponge.cache[0] = input[0];\\n        sponge.cache_size = 1;\\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\\n        // max_remainder = (N - 1) % 3;\\n        // max_chunks = (N - 1 - max_remainder) / 3;\\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            variable,\\n            shift,\\n        );\\n    }\\n    sponge\\n}\\n\\n// NB: If it\'s not required to check that the non-absorbed elts of \'input\' are 0s, set skip_0_check=true\\n#[no_predicates]\\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    skip_0_check: bool,\\n) -> Poseidon2Sponge {\\n    let mut sponge = in_sponge;\\n    // \'shift\' is to account for already added inputs\\n    let mut shift = 0;\\n    // \'stop\' is to avoid an underflow when inputting in_len = 0\\n    let mut stop = false;\\n    for i in 0..3 {\\n        if shift == in_len {\\n            stop = true;\\n        }\\n        if (sponge.cache_size != 1) & (!stop) {\\n            sponge.absorb(input[i]);\\n            shift += 1;\\n        }\\n    }\\n    sponge = if stop {\\n        sponge\\n    } else {\\n        // max_chunks = (N - (N % 3)) / 3;\\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            skip_0_check,\\n            shift,\\n        )\\n    };\\n    sponge\\n}\\n\\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\\n// shift - the num of elts already absorbed to ensure the sponge\'s cache_size = 1\\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\\n// NB: The 0 checks (\'Found non-zero field...\') are messy, but having a separate loop over N to check\\n// for 0s costs 3N gates. Current approach is approx 2N gates.\\n#[no_predicates]\\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n    shift: u32,\\n) -> Poseidon2Sponge {\\n    assert(in_len <= N, \\"Given in_len to absorb is larger than the input array len\\");\\n    // When we have an existing sponge, we may have a shift of 0, and the final \'k+2\' below = N\\n    // The below avoids an overflow\\n    let skip_last = 3 * M == N;\\n    // Writing in_sponge: &mut does not compile\\n    let mut sponge = in_sponge;\\n    let mut should_add = true;\\n    // The num of things left over after absorbing in 3s\\n    let remainder = (in_len - shift) % 3;\\n    // The num of chunks of 3 to absorb (maximum M)\\n    let chunks = (in_len - shift - remainder) / 3;\\n    for i in 0..M {\\n        // Now we loop through cache size = 1 -> 3\\n        should_add &= i != chunks;\\n        // This is the index at the start of the chunk (for readability)\\n        let k = 3 * i + shift;\\n        if should_add {\\n            // cache_size = 1, 2 => just assign\\n            sponge.cache[1] = input[k];\\n            sponge.cache[2] = input[k + 1];\\n            // cache_size = 3 => duplex + perm\\n            for j in 0..3 {\\n                sponge.state[j] += sponge.cache[j];\\n            }\\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\\n            sponge.cache[0] = input[k + 2];\\n            // cache_size is now 1 again, repeat loop\\n        } else if (!variable) & (i != chunks) {\\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\\n            // NB: we don\'t check at i == chunks, because that chunk contains elts to be absorbed or checked below\\n            let last_0 = if (i == M - 1) & (skip_last) {\\n                0\\n            } else {\\n                input[k + 2]\\n            };\\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\\n            assert(all_0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    // we have \'remainder\' num of items left to absorb\\n    should_add = true;\\n    // below is to avoid overflows (i.e. if inlen is close to N)\\n    let mut should_check = !variable;\\n    for i in 0..3 {\\n        should_add &= i != remainder;\\n        should_check &= in_len - remainder + i != N;\\n        if should_add {\\n            // we want to absorb the final \'remainder\' items\\n            sponge.absorb(input[in_len - remainder + i]);\\n        } else if should_check {\\n            assert(input[in_len - remainder + i] == 0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    sponge\\n}\\n\\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let in_len = inputs.len() + 1;\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    sponge.absorb(separator.to_field());\\n\\n    for i in 0..inputs.len() {\\n        sponge.absorb(inputs[i]);\\n    }\\n\\n    sponge.squeeze()\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\\n    let mut fields = [0; (N + 30) / 31];\\n    let mut field_index = 0;\\n    let mut current_field = [0; 31];\\n    for i in 0..inputs.len() {\\n        let index = i % 31;\\n        current_field[index] = inputs[i];\\n        if index == 30 {\\n            fields[field_index] = field_from_bytes(current_field, false);\\n            current_field = [0; 31];\\n            field_index += 1;\\n        }\\n    }\\n    if field_index != fields.len() {\\n        fields[field_index] = field_from_bytes(current_field, false);\\n    }\\n    poseidon2_hash(fields)\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\\n    assert(sub_chunk_hash == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_variable() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\\n    assert(variable_chunk_hash == variable_len_hash);\\n}\\n\\n#[test]\\nfn existing_sponge_poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    // absorb 250 of the 501 things\\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\\n    assert(final_sponge.squeeze() == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_empty_inputs() {\\n    let in_len = 0;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    let mut first_sponge =\\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\\n}\\n\\n#[test]\\nfn smoke_sha256_to_field() {\\n    let full_buffer = [\\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\\n    ];\\n    let result = sha256_to_field(full_buffer);\\n\\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\\n\\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\\n    let result_bytes = sha256::digest(full_buffer);\\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\\n    assert(truncated_field == result);\\n    let mod_res = result + (result_bytes[31] as Field);\\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\\n}\\n\\n#[test]\\nfn compute_l2_l1_hash() {\\n    // All zeroes\\n    let hash_result =\\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\\n\\n    // Non-zero case\\n    let hash_result = compute_l2_to_l1_hash(\\n        AztecAddress::from_field(1),\\n        EthAddress::from_field(3),\\n        5,\\n        2,\\n        4,\\n    );\\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\\n}\\n\\n#[test]\\nfn silo_l2_to_l1_message_matches_typescript() {\\n    let version = 4;\\n    let chainId = 5;\\n\\n    let hash = silo_l2_to_l1_message(\\n        ScopedL2ToL1Message {\\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\\n            contract_address: AztecAddress::from_field(3),\\n        },\\n        version,\\n        chainId,\\n    );\\n\\n    // The following value was generated by `l2_to_l1_message.test.ts`\\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\\n\\n    assert_eq(hash, hash_from_typescript);\\n}\\n"},"274":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr","source":"use crate::constants::TWO_POW_64;\\n\\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\\n// has a private absorb() method (it\'s also designed to just be a hasher)\\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2Sponge {\\n    pub cache: [Field; 3],\\n    pub state: [Field; 4],\\n    pub cache_size: u32,\\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2Sponge {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\\n        let mut result =\\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    pub fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    pub fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let iv: Field = (in_len as Field) * TWO_POW_64;\\n        let mut sponge = Poseidon2Sponge::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n"},"283":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\\n    address::public_keys_hash::PublicKeysHash,\\n    constants::{\\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\\n    },\\n    hash::poseidon2_hash_with_separator,\\n    point::POINT_LENGTH,\\n    traits::{Deserialize, Hash, Serialize},\\n};\\n\\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\nuse std::default::Default;\\n\\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\\n\\npub struct PublicKeys {\\n    pub npk_m: NpkM,\\n    pub ivpk_m: IvpkM,\\n    pub ovpk_m: OvpkM,\\n    pub tpk_m: TpkM,\\n}\\n\\npub trait ToPoint {\\n    fn to_point(self) -> Point;\\n}\\n\\npub struct NpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for NpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for NpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\\nimpl Hash for NpkM {\\n    fn hash(self) -> Field {\\n        self.inner.hash()\\n    }\\n}\\n\\npub struct IvpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for IvpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for IvpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\npub struct OvpkM {\\n    pub inner: Point,\\n}\\n\\nimpl Hash for OvpkM {\\n    fn hash(self) -> Field {\\n        self.inner.hash()\\n    }\\n}\\n\\nimpl ToPoint for OvpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for OvpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\npub struct TpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for TpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for TpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\nimpl Default for PublicKeys {\\n    fn default() -> Self {\\n        PublicKeys {\\n            npk_m: NpkM {\\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\\n            },\\n            ivpk_m: IvpkM {\\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\\n            },\\n            ovpk_m: OvpkM {\\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\\n            },\\n            tpk_m: TpkM {\\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\\n            },\\n        }\\n    }\\n}\\n\\nimpl Eq for PublicKeys {\\n    fn eq(self, other: PublicKeys) -> bool {\\n        (self.npk_m.inner == other.npk_m.inner)\\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\\n            & (self.tpk_m.inner == other.tpk_m.inner)\\n    }\\n}\\n\\nimpl PublicKeys {\\n    pub fn hash(self) -> PublicKeysHash {\\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\\n            self.serialize(),\\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\\n        ))\\n    }\\n}\\n\\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\\n        [\\n            self.npk_m.inner.x,\\n            self.npk_m.inner.y,\\n            self.npk_m.inner.is_infinite as Field,\\n            self.ivpk_m.inner.x,\\n            self.ivpk_m.inner.y,\\n            self.ivpk_m.inner.is_infinite as Field,\\n            self.ovpk_m.inner.x,\\n            self.ovpk_m.inner.y,\\n            self.ovpk_m.inner.is_infinite as Field,\\n            self.tpk_m.inner.x,\\n            self.tpk_m.inner.y,\\n            self.tpk_m.inner.is_infinite as Field,\\n        ]\\n    }\\n}\\n\\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\\n        PublicKeys {\\n            npk_m: NpkM {\\n                inner: Point {\\n                    x: serialized[0],\\n                    y: serialized[1],\\n                    is_infinite: serialized[2] as bool,\\n                },\\n            },\\n            ivpk_m: IvpkM {\\n                inner: Point {\\n                    x: serialized[3],\\n                    y: serialized[4],\\n                    is_infinite: serialized[5] as bool,\\n                },\\n            },\\n            ovpk_m: OvpkM {\\n                inner: Point {\\n                    x: serialized[6],\\n                    y: serialized[7],\\n                    is_infinite: serialized[8] as bool,\\n                },\\n            },\\n            tpk_m: TpkM {\\n                inner: Point {\\n                    x: serialized[9],\\n                    y: serialized[10],\\n                    is_infinite: serialized[11] as bool,\\n                },\\n            },\\n        }\\n    }\\n}\\n\\npub struct AddressPoint {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for AddressPoint {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_public_keys_hash() {\\n    let keys = PublicKeys {\\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\\n    };\\n\\n    let actual = keys.hash();\\n    let expected_public_keys_hash =\\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\\n\\n    assert(actual.to_field() == expected_public_keys_hash);\\n}\\n\\n#[test]\\nunconstrained fn compute_default_hash() {\\n    let keys = PublicKeys::default();\\n\\n    let actual = keys.hash();\\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\\n\\n    assert(actual.to_field() == test_data_default_hash);\\n}\\n\\n#[test]\\nunconstrained fn test_public_keys_serialization() {\\n    let keys = PublicKeys {\\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\\n    };\\n\\n    let serialized = keys.serialize();\\n    let deserialized = PublicKeys::deserialize(serialized);\\n\\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\\n}\\n"},"323":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\\n    data: [Field; N],\\n    offset: u32,\\n}\\n\\nimpl<let N: u32> Reader<N> {\\n    pub fn new(data: [Field; N]) -> Self {\\n        Self { data, offset: 0 }\\n    }\\n\\n    pub fn read(&mut self) -> Field {\\n        let result = self.data[self.offset];\\n        self.offset += 1;\\n        result\\n    }\\n\\n    pub fn read_u32(&mut self) -> u32 {\\n        self.read() as u32\\n    }\\n\\n    pub fn read_bool(&mut self) -> bool {\\n        self.read() as bool\\n    }\\n\\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\\n        let mut result = [0; K];\\n        for i in 0..K {\\n            result[i] = self.data[self.offset + i];\\n        }\\n        self.offset += K;\\n        result\\n    }\\n\\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\\n        let result = deserialise(self.read_array());\\n        result\\n    }\\n\\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\\n        &mut self,\\n        deserialise: fn([Field; K]) -> T,\\n        mut result: [T; C],\\n    ) -> [T; C] {\\n        for i in 0..C {\\n            result[i] = self.read_struct(deserialise);\\n        }\\n        result\\n    }\\n\\n    pub fn finish(self) {\\n        assert(self.offset == self.data.len(), \\"Reader did not read all data\\");\\n    }\\n}\\n"},"340":{"path":"/build-volume/noir-projects/noir-contracts/contracts/contract_class_registerer_contract/src/main.nr","source":"mod events;\\nmod capsule;\\n\\nuse dep::aztec::macros::aztec;\\n\\n#[aztec]\\npub contract ContractClassRegisterer {\\n    use dep::aztec::protocol_types::{\\n        abis::log_hash::LogHash,\\n        constants::{\\n            ARTIFACT_FUNCTION_TREE_MAX_HEIGHT, FUNCTION_TREE_HEIGHT,\\n            MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS,\\n            MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS,\\n            MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\\n        },\\n        contract_class_id::ContractClassId,\\n    };\\n\\n    use dep::aztec::{\\n        context::PrivateContext, macros::functions::private,\\n        oracle::logs::emit_contract_class_unencrypted_log_private,\\n    };\\n\\n    use crate::events::{\\n        class_registered::ContractClassRegistered,\\n        private_function_broadcasted::{\\n            ClassPrivateFunctionBroadcasted, InnerPrivateFunction, PrivateFunction,\\n        },\\n        unconstrained_function_broadcasted::{\\n            ClassUnconstrainedFunctionBroadcasted, InnerUnconstrainedFunction,\\n            UnconstrainedFunction,\\n        },\\n    };\\n\\n    // docs:start:import_pop_capsule\\n    use crate::capsule::pop_capsule;\\n\\n    // docs:end:import_pop_capsule\\n\\n    #[private]\\n    fn register(\\n        artifact_hash: Field,\\n        private_functions_root: Field,\\n        public_bytecode_commitment: Field,\\n        emit: bool,\\n    ) {\\n        // TODO: Validate public_bytecode_commitment is the correct commitment of packed_public_bytecode\\n        // TODO: We should be able to remove public_bytecode_commitment from the input if it\'s calculated in this function\\n        // docs:start:pop_capsule\\n        let packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] =\\n            unsafe { pop_capsule() };\\n        // docs:end:pop_capsule\\n        // First field element contains the length of the bytecode\\n        let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\\n        let bytecode_length_in_fields: u32 =\\n            (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\\n        assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\\n\\n        // The first value in the running hash is the bytecode length in bytes\\n        let mut computed_public_bytecode_commitment = packed_public_bytecode[0];\\n        // We can hash up to MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS - 1, since the first element is the length\\n        for i in 0..(MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS - 1) {\\n            // While we are forced to run the hash MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS times in the circuit,\\n            // we want the bytecode commitment to be based on the actual length\\n            if (i < bytecode_length_in_fields) {\\n                // We skip the first element when hashing since it is the length\\n                computed_public_bytecode_commitment = std::hash::poseidon2::Poseidon2::hash(\\n                    [packed_public_bytecode[i + 1], computed_public_bytecode_commitment],\\n                    2,\\n                );\\n            } else {\\n                // Any bytes after the bytecode length must be 0\\n                assert_eq(packed_public_bytecode[i + 1], 0);\\n            }\\n        }\\n        assert_eq(computed_public_bytecode_commitment, public_bytecode_commitment);\\n\\n        // Compute contract class id from preimage\\n        let contract_class_id = ContractClassId::compute(\\n            artifact_hash,\\n            private_functions_root,\\n            public_bytecode_commitment,\\n        );\\n\\n        // Emit the contract class id as a nullifier to be able to prove that this class has been (not) registered\\n        context.push_nullifier(contract_class_id.to_field());\\n\\n        // Broadcast class info including public bytecode\\n        dep::aztec::oracle::debug_log::debug_log_format(\\n            \\"ContractClassRegistered: {}\\",\\n            [\\n                contract_class_id.to_field(),\\n                artifact_hash,\\n                private_functions_root,\\n                public_bytecode_commitment,\\n            ],\\n        );\\n\\n        // TODO(#10007): Drop this conditional and always emit the bytecode. We allow skipping the broadcast\\n        // as a stopgap solution to allow txs to fit in Sepolia when we broadcast public bytecode.\\n        if emit {\\n            let event = ContractClassRegistered {\\n                contract_class_id,\\n                version: 1,\\n                artifact_hash,\\n                private_functions_root,\\n                packed_public_bytecode,\\n            };\\n            emit_contract_class_log(&mut context, event.serialize_non_standard());\\n        }\\n    }\\n\\n    #[private]\\n    fn broadcast_private_function(\\n        contract_class_id: ContractClassId,\\n        artifact_metadata_hash: Field,\\n        unconstrained_functions_artifact_tree_root: Field,\\n        private_function_tree_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\\n        private_function_tree_leaf_index: Field,\\n        artifact_function_tree_sibling_path: [Field; ARTIFACT_FUNCTION_TREE_MAX_HEIGHT],\\n        artifact_function_tree_leaf_index: Field,\\n        function_data: InnerPrivateFunction,\\n    ) {\\n        let private_bytecode: [Field; MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS] =\\n            unsafe { pop_capsule() };\\n\\n        let event = ClassPrivateFunctionBroadcasted {\\n            contract_class_id,\\n            artifact_metadata_hash,\\n            unconstrained_functions_artifact_tree_root,\\n            private_function_tree_sibling_path,\\n            private_function_tree_leaf_index,\\n            artifact_function_tree_sibling_path,\\n            artifact_function_tree_leaf_index,\\n            function: PrivateFunction {\\n                selector: function_data.selector,\\n                metadata_hash: function_data.metadata_hash,\\n                vk_hash: function_data.vk_hash,\\n                bytecode: private_bytecode,\\n            },\\n        };\\n        dep::aztec::oracle::debug_log::debug_log_format(\\n            \\"ClassPrivateFunctionBroadcasted: {}\\",\\n            [\\n                contract_class_id.to_field(),\\n                artifact_metadata_hash,\\n                unconstrained_functions_artifact_tree_root,\\n                function_data.selector.to_field(),\\n                function_data.vk_hash,\\n                function_data.metadata_hash,\\n            ],\\n        );\\n        emit_contract_class_log(&mut context, event.serialize_non_standard());\\n    }\\n\\n    #[private]\\n    fn broadcast_unconstrained_function(\\n        contract_class_id: ContractClassId,\\n        artifact_metadata_hash: Field,\\n        private_functions_artifact_tree_root: Field,\\n        artifact_function_tree_sibling_path: [Field; ARTIFACT_FUNCTION_TREE_MAX_HEIGHT],\\n        artifact_function_tree_leaf_index: Field,\\n        function_data: InnerUnconstrainedFunction,\\n    ) {\\n        let unconstrained_bytecode: [Field; MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS] =\\n            unsafe { pop_capsule() };\\n        let event = ClassUnconstrainedFunctionBroadcasted {\\n            contract_class_id,\\n            artifact_metadata_hash,\\n            private_functions_artifact_tree_root,\\n            artifact_function_tree_sibling_path,\\n            artifact_function_tree_leaf_index,\\n            function: UnconstrainedFunction {\\n                selector: function_data.selector,\\n                metadata_hash: function_data.metadata_hash,\\n                bytecode: unconstrained_bytecode,\\n            },\\n        };\\n        dep::aztec::oracle::debug_log::debug_log_format(\\n            \\"ClassUnconstrainedFunctionBroadcasted: {}\\",\\n            [\\n                contract_class_id.to_field(),\\n                artifact_metadata_hash,\\n                private_functions_artifact_tree_root,\\n                function_data.selector.to_field(),\\n                function_data.metadata_hash,\\n            ],\\n        );\\n        emit_contract_class_log(&mut context, event.serialize_non_standard());\\n    }\\n\\n    #[contract_library_method]\\n    fn emit_contract_class_log<let N: u32>(context: &mut PrivateContext, log: [Field; N]) {\\n        let contract_address = context.this_address();\\n        let counter = context.next_counter();\\n\\n        // The log preimage is too large for the hash to compile (16,200 fields, 518,400 bytes), so we do this via a\\n        // specialized oracle.\\n        // A malicious oracle cannot force us to use an incorrect bytecode:\\n        // - Contract class -> we will commit to the packed bytecode (currently a TODO)\\n        // - Private function -> we provide a membership proof\\n        // - Unconstrained function -> we provide a membership proof\\n        // However, the sequencer will be required to know a contract\'s preimage if it is called and the sequencer\\n        // cannot prove non-registration. Therefore, it is possible that a malicious oracle might prevent sequencers\\n        // from including transactions with calls to certain badly-broadcasted contracts.\\n        // TODO(#8978): review correctness\\n        let log_hash =\\n            unsafe { emit_contract_class_unencrypted_log_private(contract_address, log, counter) };\\n\\n        // 40 = addr (32) + raw log len (4) + processed log len (4)\\n        context.contract_class_logs_hashes.push(\\n            LogHash { value: log_hash, counter, length: 40 + (N as Field) * 32 },\\n        );\\n    }\\n\\n    #[private]\\n    fn assert_class_id_is_registered(contract_class_id: ContractClassId) {\\n        context.push_nullifier_read_request(contract_class_id.to_field());\\n    }\\n}\\n"}}}'));let py;class my extends sy{constructor(e,t,n){super(e,t,n)}}const gy="object"!=typeof process||["1","true","yes",""].includes({NODE_ENV:"production"}.AZTEC_EMIT_PUBLIC_BYTECODE??"");class _y extends Lb{constructor(e,t,n,s){super(e,t),this.postDeployCtor=n,this.instanceGetter=s,this.log=Pe("aztecjs:deploy_sent_tx")}async deployed(e){const t=await this.wait(e),n=await this.instanceGetter();return this.log.info(`Contract ${n.address.toString()} successfully deployed.`),t.contract}async wait(e){return{...await super.wait(e),contract:await this.getContractObject(e?.wallet)}}async getContractObject(e){const t=e??(!!this.pxe.createTxExecutionRequest&&this.pxe);if(!t)throw new Error("A wallet is required for creating a contract instance");const n=await this.instanceGetter();return this.postDeployCtor(n.address,t)}}class by extends Gb{constructor(e,t,n,s){super(e,t),this.postDeployCtor=n,this.instanceGetter=s}send(){const e=(()=>this.wallet.sendTx(this.getPlainDataTx()))();return new _y(this.wallet,e,this.postDeployCtor,this.instanceGetter)}}class yy extends Zb{constructor(e,t,n,s,i=[],r){super(t),this.publicKeys=e,this.artifact=n,this.postDeployCtor=s,this.args=i,this.instance=void 0,this.constructorArtifact=function(e,t){if("string"==typeof t){const n=e.functions.find((e=>e.name===t));if(!n)throw new Error(`Constructor method ${t} not found in contract artifact`);if(!n.isInitializer)throw new Error(`Method ${t} is not an initializer`);return n}if(void 0===t)return wd(e);if(!t.isInitializer)throw new Error(`Method ${t.name} is not an initializer`);return t}(n,r)}async create(e={}){return this.wallet.createTxExecutionRequest(await this.request(e))}async request(e={}){const t=await this.getDeploymentFunctionCalls(e);await this.wallet.registerContract({artifact:this.artifact,instance:await this.getInstance(e)});const n=await this.getInitializeFunctionCalls(e);if(t.calls.length+n.calls.length===0)throw new Error(`No function calls needed to deploy contract ${this.artifact.name}`);const s=[...t.calls,...n.calls],i=[...t.authWitnesses??[],...n.authWitnesses??[]],r=[...t.hashedArguments??[],...n.hashedArguments??[]],{cancellable:a,nonce:o,fee:l}=e,c={calls:s,authWitnesses:i,hashedArguments:r,cancellable:a,fee:l,nonce:o},d=await this.getFeeOptions(c);return{...c,fee:d}}async register(e={}){const t=await this.getInstance(e);return await this.wallet.registerContract({artifact:this.artifact,instance:t}),this.postDeployCtor(t.address,this.wallet)}async getDeploymentFunctionCalls(e={}){const t=[],n=await this.getInstance(e),s=await au(this.artifact);if(!n.contractClassId.equals(s.id))throw new Error(`Contract class mismatch when deploying contract: got ${n.contractClassId.toString()} from instance and ${s.id.toString()} from artifact`);if(!e.skipClassRegistration)if((await this.wallet.getContractClassMetadata(s.id)).isContractClassPubliclyRegistered)this.log.debug(`Skipping registration of already registered contract class ${s.id.toString()} for ${n.address.toString()}`);else{this.log.info(`Creating request for registering contract class ${s.id.toString()} as part of deployment for ${n.address.toString()}`);const e=await async function(e,t,n=gy){const{artifactHash:s,privateFunctionsRoot:i,publicBytecodeCommitment:r,packedBytecode:a}=await au(t),o=Ed(a,Qi),l=await async function(e){const{artifact:t,instance:n}=await async function(){if(!fy){const e=uy;fy=await dy("ContractClassRegisterer",e)}return fy}();return new my(n,t,e)}(e);return await e.addCapsule(o),l.methods.register(s,i,r,n)}(this.wallet,this.artifact);t.push(await e.request())}if(!e.skipPublicDeployment){const e=await async function(e,t){const n=await async function(e){const{artifact:t,instance:n}=await async function(){return py||(py=await dy("ContractInstanceDeployer",hy)),py}();return new my(n,t,e)}(e),{salt:s,contractClassId:i,publicKeys:r,deployer:a}=t,o=a.isZero();if(!o&&!e.getAddress().equals(a))throw new Error(`Expected deployer ${a.toString()} does not match sender wallet ${e.getAddress().toString()}`);return n.methods.deploy(s,i,t.initializationHash,r,o)}(this.wallet,n);t.push(await e.request())}return{calls:t}}async getInitializeFunctionCalls(e){const{address:t}=await this.getInstance(e),n=[];if(this.constructorArtifact&&!e.skipInitialization){const e=new Jb(this.wallet,t,this.constructorArtifact,this.args);n.push(await e.request())}return{calls:n}}send(e={}){const t=super.send(e).getTxHash();return this.log.debug(`Sent deployment tx of ${this.artifact.name} contract`),new _y(this.wallet,t,this.postDeployCtor,(()=>this.getInstance(e)))}async getInstance(e={}){return this.instance||(this.instance=await cu(this.artifact,{constructorArgs:this.args,salt:e.contractAddressSalt,publicKeys:this.publicKeys,constructorArtifact:this.constructorArtifact,deployer:e.universalDeploy?Gc.ZERO:this.wallet.getAddress()})),this.instance}async prove(e){const t=await this.proveInternal(e);return new by(this.wallet,t.toTx(),this.postDeployCtor,(()=>this.getInstance(e)))}estimateGas(e){return super.estimateGas(e)}get address(){return this.instance?.address}get partialAddress(){return this.instance&&qd(this.instance)}}class Ay extends sy{static async at(e,t,n){const s=(await n.getContractMetadata(e)).contractInstance;if(void 0===s)throw new Error(`Contract instance at ${e.toString()} has not been registered in the wallet's PXE`);return new Ay(s,t,n)}static deploy(e,t,n,s){return new yy(Rd.default(),e,t,((e,n)=>Ay.at(e,t,n)),n,s)}static deployWithPublicKeys(e,t,n,s,i){return new yy(e,t,n,((e,t)=>Ay.at(e,n,t)),s,i)}}var wy,xy;class vy extends yy{constructor(e,t,n,s,i=[],r,a){super(t,n,s,((e,t)=>Ay.at(e,s,t)),i,r),wy.set(this,void 0),xy.set(this,void 0),Us(this,wy,e,"f"),Us(this,xy,"string"==typeof a?function(e,t){const n=e.functions.find((e=>e.name===t));if(!n)throw new Error(`Unknown function ${t}`);const s=function(e,t){try{if(t.debugSymbols&&e.fileMap)return{debugSymbols:JSON.parse(el(ad.from(t.debugSymbols,"base64"),{to:"string",raw:!0})).debug_infos[0],files:e.fileMap}}catch(n){if(!(n instanceof RangeError&&n.message.includes("Invalid string length")))throw n;od.warn(`Caught RangeError: Invalid string length. This suggests the debug_symbols field of the contract ${e.name} and function ${t.name} is huge; too big to parse. We'll skip returning this info until this issue is resolved. Here's the error:\n${n.message}`)}}(e,n);return{...n,debug:s}}(s,a):a,"f")}async getInitializeFunctionCalls(e){const t=await super.getInitializeFunctionCalls(e);if(e.fee&&Hs(this,xy,"f")){const{address:n}=await this.getInstance(),s=await Sb.fromAppExecution([]),i=await this.getDefaultFeeOptions(e.fee),r=await Sb.fromFeeOptions(n,i);t.calls.push({name:Hs(this,xy,"f").name,to:n,args:Bd(Hs(this,xy,"f"),[s,r,!1]),selector:await ed.fromNameAndParameters(Hs(this,xy,"f").name,Hs(this,xy,"f").parameters),type:Hs(this,xy,"f").functionType,isStatic:Hs(this,xy,"f").isStatic,returnTypes:Hs(this,xy,"f").returnTypes}),t.authWitnesses??(t.authWitnesses=[]),t.hashedArguments??(t.hashedArguments=[]),t.authWitnesses.push(await Hs(this,wy,"f").createAuthWit(await Ib(s,r))),t.hashedArguments.push(...s.hashedArguments),t.hashedArguments.push(...r.hashedArguments)}return t}}wy=new WeakMap,xy=new WeakMap;class Ey extends Lb{constructor(e,t,n){super(e,t),this.getWalletPromise=n}async getWallet(e){return(await this.wait(e)).wallet}async wait(e=Db){return{...await super.wait(e),wallet:await this.getWalletPromise}}}class My{constructor(e,t,n,s,i){this.pxe=e,this.secretKey=t,this.accountContract=n,this.instance=s,this.salt=i}static async create(e,t,n,s){const{publicKeys:i}=await Wd(t);s=void 0!==s?new si(s):si.random();const r=await cu(n.getContractArtifact(),{constructorArgs:await n.getDeploymentArgs(),salt:s,publicKeys:i});return new My(e,t,n,r,s)}getPublicKeys(){return this.instance.publicKeys}getPublicKeysHash(){return this.getPublicKeys().hash()}async getAccount(){const e=await this.pxe.getNodeInfo(),t=await this.getCompleteAddress();return this.accountContract.getInterface(t,e)}getCompleteAddress(){return Zh.fromSecretKeyAndInstance(this.secretKey,this.instance)}getAddress(){return this.instance.address}getInstance(){return this.instance}async getWallet(){const e=await this.getAccount();return new ty(this.pxe,e,this.secretKey,this.salt)}async register(){return await this.pxe.registerContract({artifact:this.accountContract.getContractArtifact(),instance:this.getInstance()}),await this.pxe.registerAccount(this.secretKey,(await this.getCompleteAddress()).partialAddress),this.getWallet()}async getDeployMethod(){if(!await this.isDeployable())throw new Error(`Account contract ${this.accountContract.getContractArtifact().name} does not require deployment.`);const e=await this.getCompleteAddress();await this.pxe.registerAccount(this.secretKey,e.partialAddress);const{l1ChainId:t,protocolVersion:n}=await this.pxe.getNodeInfo(),s=new ny(this.pxe,new Hb(t,n)),i=await this.accountContract.getDeploymentArgs()??[];return new vy(this.accountContract.getAuthWitnessProvider(e),this.getPublicKeys(),s,this.accountContract.getContractArtifact(),i,"constructor","entrypoint")}deploy(e){const t=this.getDeployMethod().then((t=>t.send({contractAddressSalt:new si(this.salt),skipClassRegistration:e?.skipClassRegistration??!0,skipPublicDeployment:e?.skipPublicDeployment??!0,skipInitialization:e?.skipInitialization??!1,universalDeploy:!0,fee:e?.fee}))).then((e=>e.getTxHash()));return new Ey(this.pxe,t,this.getWallet())}async waitSetup(e=Db){return await(await this.isDeployable()?this.deploy().wait(e):this.register()),this.getWallet()}async isDeployable(){return void 0!==await this.accountContract.getDeploymentArgs()}}class zy{constructor(e,t,n=31337,s=1){this.address=e,this.auth=t,this.chainId=n,this.version=s}async createTxExecutionRequest(e){const{calls:t,fee:n,nonce:s,cancellable:i}=e,r=await Sb.fromAppExecution(t,s),a=await Sb.fromFeeOptions(this.address,n),o=this.getEntrypointAbi(),l=await rb.fromValues(Bd(o,[r,a,!!i])),c=await this.auth.createAuthWit(await Ib(r,a));return ab.from({firstCallArgsHash:l.hash,origin:this.address,functionSelector:await ed.fromNameAndParameters(o.name,o.parameters),txContext:new $h(this.chainId,this.version,n.gasSettings),argsOfCalls:[...r.hashedArguments,...a.hashedArguments,l],authWitnesses:[c]})}getEntrypointAbi(){return{name:"entrypoint",isInitializer:!1,functionType:"private",isInternal:!1,isStatic:!1,parameters:[{name:"app_payload",type:{kind:"struct",path:"authwit::entrypoint::app::AppPayload",fields:[{name:"function_calls",type:{kind:"array",length:4,type:{kind:"struct",path:"authwit::entrypoint::function_call::FunctionCall",fields:[{name:"args_hash",type:{kind:"field"}},{name:"function_selector",type:{kind:"struct",path:"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"target_address",type:{kind:"struct",path:"authwit::aztec::protocol_types::address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_public",type:{kind:"boolean"}},{name:"is_static",type:{kind:"boolean"}}]}}},{name:"nonce",type:{kind:"field"}}]},visibility:"public"},{name:"fee_payload",type:{kind:"struct",path:"authwit::entrypoint::fee::FeePayload",fields:[{name:"function_calls",type:{kind:"array",length:2,type:{kind:"struct",path:"authwit::entrypoint::function_call::FunctionCall",fields:[{name:"args_hash",type:{kind:"field"}},{name:"function_selector",type:{kind:"struct",path:"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"target_address",type:{kind:"struct",path:"authwit::aztec::protocol_types::address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_public",type:{kind:"boolean"}},{name:"is_static",type:{kind:"boolean"}}]}}},{name:"nonce",type:{kind:"field"}},{name:"is_fee_payer",type:{kind:"boolean"}}]},visibility:"public"},{name:"cancellable",type:{kind:"boolean"}}],returnTypes:[],errorTypes:{}}}}class By{constructor(e,t,n){this.authWitnessProvider=e,this.address=t,this.entrypoint=new zy(t.address,e,n.l1ChainId,n.protocolVersion),this.chainId=new si(n.l1ChainId),this.version=new si(n.protocolVersion)}createTxExecutionRequest(e){return this.entrypoint.createTxExecutionRequest(e)}createAuthWit(e){return this.authWitnessProvider.createAuthWit(e)}getCompleteAddress(){return this.address}getAddress(){return this.address.address}getChainId(){return this.chainId}getVersion(){return this.version}}class Fy{constructor(e){this.artifact=e}getContractArtifact(){return this.artifact}getInterface(e,t){return new By(this.getAuthWitnessProvider(e),e,t)}}function ky(e){const t=new Hd;return t.mul(t.generator(),e)}i(8891).Buffer,i(3686),i(6420),i(643),i(4112),i(663),i(113),Error;var Cy=i(9302);Cy.C,i(3588),i(2610),i(3856),i(9042),i(6027),i(2373),i(3329);var Oy=i(6809);class Dy extends Cy.C{constructor(e,{code:t,docsPath:n,metaMessages:s,name:i,shortMessage:r}){super(r,{cause:e,docsPath:n,metaMessages:s||e?.metaMessages,name:i||"RpcError"}),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.name=i||e.name,this.code=e instanceof Oy.J8?e.code:t??-1}}class Ly extends Dy{constructor(e,t){super(e,t),Object.defineProperty(this,"data",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.data=t.data}}class Ty extends Dy{constructor(e){super(e,{code:Ty.code,name:"ParseRpcError",shortMessage:"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."})}}Object.defineProperty(Ty,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32700});class Sy extends Dy{constructor(e){super(e,{code:Sy.code,name:"InvalidRequestRpcError",shortMessage:"JSON is not a valid request object."})}}Object.defineProperty(Sy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32600});class Ny extends Dy{constructor(e,{method:t}={}){super(e,{code:Ny.code,name:"MethodNotFoundRpcError",shortMessage:`The method${t?` "${t}"`:""} does not exist / is not available.`})}}Object.defineProperty(Ny,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32601});class Py extends Dy{constructor(e){super(e,{code:Py.code,name:"InvalidParamsRpcError",shortMessage:["Invalid parameters were provided to the RPC method.","Double check you have provided the correct parameters."].join("\n")})}}Object.defineProperty(Py,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32602});class Iy extends Dy{constructor(e){super(e,{code:Iy.code,name:"InternalRpcError",shortMessage:"An internal error was received."})}}Object.defineProperty(Iy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32603});class Yy extends Dy{constructor(e){super(e,{code:Yy.code,name:"InvalidInputRpcError",shortMessage:["Missing or invalid parameters.","Double check you have provided the correct parameters."].join("\n")})}}Object.defineProperty(Yy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32e3});class Qy extends Dy{constructor(e){super(e,{code:Qy.code,name:"ResourceNotFoundRpcError",shortMessage:"Requested resource not found."}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"ResourceNotFoundRpcError"})}}Object.defineProperty(Qy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32001});class jy extends Dy{constructor(e){super(e,{code:jy.code,name:"ResourceUnavailableRpcError",shortMessage:"Requested resource not available."})}}Object.defineProperty(jy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32002});class Hy extends Dy{constructor(e){super(e,{code:Hy.code,name:"TransactionRejectedRpcError",shortMessage:"Transaction creation failed."})}}Object.defineProperty(Hy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32003});class Uy extends Dy{constructor(e,{method:t}={}){super(e,{code:Uy.code,name:"MethodNotSupportedRpcError",shortMessage:`Method${t?` "${t}"`:""} is not implemented.`})}}Object.defineProperty(Uy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32004});class Ry extends Dy{constructor(e){super(e,{code:Ry.code,name:"LimitExceededRpcError",shortMessage:"Request exceeds defined limit."})}}Object.defineProperty(Ry,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32005});class Gy extends Dy{constructor(e){super(e,{code:Gy.code,name:"JsonRpcVersionUnsupportedError",shortMessage:"Version of JSON-RPC protocol is not supported."})}}Object.defineProperty(Gy,"code",{enumerable:!0,configurable:!0,writable:!0,value:-32006});class Zy extends Ly{constructor(e){super(e,{code:Zy.code,name:"UserRejectedRequestError",shortMessage:"User rejected the request."})}}Object.defineProperty(Zy,"code",{enumerable:!0,configurable:!0,writable:!0,value:4001});class Jy extends Ly{constructor(e){super(e,{code:Jy.code,name:"UnauthorizedProviderError",shortMessage:"The requested method and/or account has not been authorized by the user."})}}Object.defineProperty(Jy,"code",{enumerable:!0,configurable:!0,writable:!0,value:4100});class Xy extends Ly{constructor(e,{method:t}={}){super(e,{code:Xy.code,name:"UnsupportedProviderMethodError",shortMessage:`The Provider does not support the requested method${t?` " ${t}"`:""}.`})}}Object.defineProperty(Xy,"code",{enumerable:!0,configurable:!0,writable:!0,value:4200});class Wy extends Ly{constructor(e){super(e,{code:Wy.code,name:"ProviderDisconnectedError",shortMessage:"The Provider is disconnected from all chains."})}}Object.defineProperty(Wy,"code",{enumerable:!0,configurable:!0,writable:!0,value:4900});class Vy extends Ly{constructor(e){super(e,{code:Vy.code,name:"ChainDisconnectedError",shortMessage:"The Provider is not connected to the requested chain."})}}Object.defineProperty(Vy,"code",{enumerable:!0,configurable:!0,writable:!0,value:4901});class qy extends Ly{constructor(e){super(e,{code:qy.code,name:"SwitchChainError",shortMessage:"An error occurred when attempting to switch chain."})}}Object.defineProperty(qy,"code",{enumerable:!0,configurable:!0,writable:!0,value:4902}),i(3887),i(2768),i(5261),i(7673),i(9804),i(3538),i(1892),i(7740),Cy.C,i(7426),i(3594),i(5979),i(2545),i(6409),i(7338),Cy.C,Cy.C,Cy.C,Cy.C,i(8113),i(4611).Vw,Cy.C,Cy.C,Cy.C,Cy.C,i(6907),i(8902),i(2894),i(1501),Cy.C,Cy.C,i(1893),new(i(645).A)(128),i(5561),i(8891).Buffer,i(9813),ry(JSON.parse('{"transpiled":true,"noir_version":"1.0.0-beta.1+c4e38215cedb5afb","name":"FeeJuice","functions":[{"name":"initialize","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"initial_mint","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"7VjtbuIwEHyX/M4P75e921c5nSra0goJQUXpSaeq7342VzulJCAM1xZd/iAcZtjJZLPj5KW5m948P1zPFvfLp+bqx0szX95O1rPlIq5eGqDNsafHySItn9aT1bq5Au+xbaaLu/Q14Gvb3M/m0+bK02u7A0b04Q2MqFbA5vvAxvoGJoewHwyeTIsOhg4eS/bipYOH0KGV+9DkKaMZ3Bb6Z9sAj84MOCOjMwPO+G/tDJN0zrAdcAYBfVYCLCc6E0ZnBpzRk51hZxnMgFrA6jYF7B8XQNdbAIxzAfSyv4BaKWAOOjWBLnoeIHxrZ76w6xFHZwacoZOdMYedMyL7naEyVRm4QIF0I4bPIMZnLw2c7hcDJmT5r03Evx81fZEQm6Bkgu1OJrls+f5z5aMDLY3syOCjnv4Qj2eR9RDQoZtWS2sChv3+qMtqlN/Pbb8R05+bhOXOJT4Qa8beZTHCBy5WDMysBgLJuzvlr5z+lGVX5LDofznQyI3ODDgDozMDzuDJzpwvBInOIObrUoT4suXL58rfH4JxcbOazeezh+ut92gufXCvVIHc6SL4sbfYH08Jx1P0eIodSYkrSMj+/auUMRXEtrMzrjAhQy/RtDyOObezCQhcwZEKjq/ghAqOVnDseI66Cg5UcLCCU9EHWtEHWtEHWtEHWtEHWtEHWtEHVtEH1t8H3e7YOd7hYAWHKjhcwZEKjq/ghGM5cUUJOvBaWbk8B8Ydzs5Q5TGS4vLXZDWb3MynKaXTr8+L2xzacbn+/Zh/ybH+uFreTu+eV9MU8F22p2YkaBmiEEh3jUArvqTe5lDcABOUPEsMsdZbZsRtDjjurmo6Btoilas1VOQ1nssf","brillig_names":["store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal","debug_log_oracle_wrapper","notify_set_min_revertible_side_effect_counter_oracle_wrapper","store_in_execution_cache_oracle_wrapper"],"verification_key":"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"},{"name":"set_portal","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JgACBAEnAAABBIBFJgAABAMmAgIEASYCAwQAHxgAAwACgEQtCIBEAAEkAAAARSQAAABGJwIAAQSARSYCAgQAOg0AAQACJSQAAADiJgICAAIuDAACAAMcDAMEACsCAAUAAAAAAAAAAAAAAAAA//////////////////////////8OOAQFBiMCAAYAAACSJAAAAQsmAgQAAAo4AwQFIwIABQAAAK0mAgYEADsJAQYoAgADADuaygIuDAADAAUKOAUEBiMCAAYAAADOJAAAAR0nAgAEAN6tLwwABAADLwwAAQACJScAgAQEeAANAAAAgASAAyMAgAMAAAEKKQEAAQX3ofOvpa3UyjsBAQIlKQEAAQVaAuQbtR6pnzsBAQIlKQEAAQUfCi0n3IKHojsBAQIlLQAYyhjK","debug_symbols":"7VfbioMwEP2XPPuQmdwm/ZVlKba1RRAt1i4spf++yVITtysVdLsU9EWMnJkz5zgxzoXtss35sM7LfXViq7cLK6pt2uRV6VaXa8I2dV4U+WHdfcy4vxj1jT8d09IvT01aN2wFxqiEZeXO3RJHl2GfFxlbaXFNfoERBb+BEZUKYNDYgzaCxA1tJJcBTdAHBsIWjAiPwQBctKndvdZd+HvCiM9Hqv53qSZKBfu4ehvL4JwHLKpeX9C2iTUOYAFkdEXTAFqFkpWNFbvinYEWFgMnGQhIi4PTHBRicXCag3LZxVMdHD5IQHYd9EEKxgSNYdJyTJAdEWT6NyNhDFL0uJVAh1YC/cI/Dy7XjLTSH2i1gcJw+qHVU1jxbArk8HwKPZ2CDASwNUNNQUK377mbur8ptIjfR8uHmgIkhqYAEndNgSBmpNVO12pD9WA7p9Nrab261Uda5+mmyG5j8f5cbjtTcvN5zO4G5mNdbbPduc786BynZvCjpFCJ5H6D+80nIZHCcTieLw==","brillig_names":["set_portal"]},{"name":"check_balance","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"3219842053230618354":{"error_kind":"string","string":"Function check_balance can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"fee_limit","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["check_balance"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VZy67aQAwdSEJIuAEKn3Cl7tomXJ47Fn3c30AFPqHrrLppP7qMGCcH46siYVfFEpoknhyfOXZmJqHjztY//TrhOA5tz10b9dmGtrzPKkWs0pJn50F4dh+EZ/QgPGNFnh2Bp2/peUvc+ZlL3fl5bC7iTT7BEdzk/gYAwX6HNgttF/yKCakyYZBa+Otyvs/cpSnzf8kCZmqDvyD8vg1+Sbw/1y0+joXiRqF9rVstX+Eeb0U4xuIlXPJ1wfeF+SLwfWU+rOFvzId1T5xIN1qYlOtqY50XGlsKY+u80TrXaofXSOvcmdZoRTnPGB/On/gU1Kdu+fSYLwZfxnwJ+Eh/3z5DP577FPp9hONP0IfXZ+Su65n8lH/U3aK+YgP8k82lHPD8xPVlbPRhDmLQ85npY7FuoD4W+nt9pm/wp2Nvae0ai5ieqBFp1sf+zJeBL64v4+ThPIY4iEU8Etb/QzgfhbYH99D9YyF+j8W/4C1cQ404ViRco/7++Xwfjgfh52voJ93jructvc31ci7N4Xr4qwY/s+F/JPzcBn9J+AMb/GZv82SCPysJv7Dh38xBQ5v6afaWIxv+B8Ifm+DPD7QOv3OtNXNEOJ7Adb35u6pu2SNh/JxxtdojTRgfrg+uwd43FbiOBR/P4VSIMxXiSFiZItaTItboPx1jXxFroIg1VMTSzGOqiKWpV66IVShiada9pl6UR2mf5m0b2vJOk/ZpiviVtE/TfJcnram+YkFDHF/C+v9gOg9MeFYzWnPoWacYGLswin3rek3xC4EP8c4F3z0fZw+L9XGzXmxOW7JqOds0+SwYV34N34twPsb+0tov7fsUtS6ld/8h6OotBl/BfAn4iKP07j804n+L/hh/LPj4+n9rLifuej0csHHjN6+typjb74HSt3rj+Wtx67NJ8XN3PV//q++NqA/fS+cC17Hg4/uTXIiTC3EeEYt/s0cNfV2TTnHd+rVyuVq3f3TRXJS4y/8BHIufsP6/wjmOjdp75vzjalcdX3bH3WK338+/7yYM31sXdPoDg5oBSR0fAAA=","debug_symbols":"tdfNaoQwFIbhe8k6i5z8mIm3UsoQNQ6BECVqoYj33jhM26GzLN9GiBwfN77g2dkQuu12jXmcFta+7SxNvV/jlOtpPzjrSkwp3q7Pt5k4L87c55fZ5/O4rL6srNWSs5AH1hpRnx5jCqxt1MFfBu33oLU/g0Ye75y5BgVbFHxBwQ4EkxAwmWCyhMkKJmuYbGByA5MtTL7AZFiDBGuQYA0SrEGCNUiwBgnWIMEaJFiD9L8GnXoM1k/hhXYwWgocTTha4miFozWONji6wdEWR+NqlLgaFa5GBarxqKcPX6LvUnhsTeOW+6clav2cw599ai5TH4athHOz+l2qzvSU4drc/zzqgZTmpFx9SX3RFw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"bY/dCoMwDIXfJde9aKoO7KvIkKpRCqWVWgdDfPfFsUn3c3PICV8OORsM1K1Ta/0YFtDNBi70Jtng2W27gC5a5+zU5muQh2Dx5JfZ+MMuycQEulQCyA+gK8nXo3UE+lLs4gdEifLN8qzqE8ey/s/XePIK5Qd/3dneTLSmc/R6fVx9nzVJ95m+Ss0x9DSskY56WTPWBiuhJMdy9AM=","brillig_names":["sync_notes"]},{"name":"claim","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17288131482828810359":{"error_kind":"string","string":"Message not in state"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn\'t match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["build_msg_block","attach_len_to_msg_block","get_public_data_witness","field_less_than","decompose_hint","lte_hint","build_msg_block","get_l1_to_l2_membership_witness","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal","directive_to_radix","directive_invert","directive_integer_quotient"],"verification_key":"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"},{"name":"balance_of_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6067862452620309358":{"error_kind":"string","string":"Function balance_of_public can only be called statically"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["balance_of_public"]},{"name":"_increase_public_balance","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{"10502589790419500451":{"error_kind":"string","string":"Function _increase_public_balance can only be called internally"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"private"}],"return_type":null},"bytecode":"JgACBAEnAAABBIBIJgAABAMmAgQEAyYCBQQAHxgABQAEgEUtCIBFAAEtCIBGAAItCIBHAAMkAAAAUSQAAABuJwIAAQSASCYCAgQAOg0AAQACKgCAQwAAAAAAAAAAAQAAAAAAAAAAJwCARAQAAyUkAAAB7CwIAQQAAAECASYCBQEALA4FBCwIAQUAAAECASYCBgAALA4GBSwIAQYAAAECASYCBwACLA4HBh4CAAcBHgIACAAKOAcICSMCAAkAAADFJAAAAhUmAgcAIiYCCAABJgINBA4sCAAOLAwEDywMBRAsDAYRLAwIEiwMBxMsDAEUABAADQAkAAACJywEAAAsDA8JLAwQCiwMEQssDBIMLgwADAANHAwNDAAqAgAOAP////////////////////8OOAwODyMCAA8AAAFAJAAABUwcDA0OBRwMDgwAAjgNDA4JKAAOgEMADQA4DAIOHAwODAUcDAwCAAI4DgIMCSgADIBDAA4AOA0DDAA4DA4DHAwDDQUcDA0MAAo4DAMNIwIADQAAAZkkAAAFXiYCEAQRLAgAESwMBBIsDAUTLAwGFCwMCBUsDAcWLAwBFwAQABAAJAAAAicsBAAALAwSAywMEw0sDBQOLAwVDwUoAAyAQwABADgCAQQvDAAEAA8lJwCABAR4AA0AAACABIADIwCAAwAAAhQpAQABBfeh86+lrdTKOwEBAiUpAQABBZHAscTvmT2jOwEBAiUkAAAB7CwIAQgmAgkEAwAQAQkBJgMIBAEAKAgCCSwMCQosDgQKACgKAgosDgYKJgIEAAAsCAEGJgIJBAQAEAEJASYDBgQBACgGAgksDAkKLA4ECgAoCgIKLA4ECgAoCgIKLA4ECiwNBgkAKAkCCSwOCQYqAgAJAAAAAAAAAAACAAAAAAAAAAAsCAEKJgILBAUAEAELASYDCgQBACgKAgssDAsMLA4EDAAoDAIMLA4EDAAoDAIMLA4EDAAoDAIMLA4JDCwNBgkAKAkCCSwOCQYsCAEJAAABAgEsDgYJLA0KBgAoBgIGLA4GCiwIAQYAAAECASwOCgYsCAEKAAABAgEmAgsEACwOCwosCAEMAAABAgEmAg0BACwODQwmAg4EAiYCDwQBLAwLByIAAANUDDgHDgUjAgAFAAAD8iIAAANmLA0MBQo4BQ0HIwIABwAAA4AmAggEADsJAQgmAgUEDiwIAA4sDAkPLAwGECwMChEsDAwSABAABQAkAAAFcCwEAAAsDQkFLA0GBywNCggsDgUJLA4HBiwOCAomAgUBASwOBQwAKAcCBgA4BgsILA0IBQo4BQQGCjgGDQQjAgAEAAAD7SQAAAbNLAwFBCUjAgAFAAAD/yIAAAU+JgIQBAIMOAcQESMCABEAAAQWJAAABt8AKAgCEAA4EAcRLA0RBSwNChAsDQwRCjgRDRIjAgASAAAEQiYCEwQAOwkBEwsoABCARAARIwIAEQAABNAiAAAEVywNCRAsDQYRLA0KEiwNDBMmAhUEAww4EhUWIwIAFgAABH4kAAAG3y0EABCAAycAgAQEAAQkAAAG8S0IgAUAFAAoFAIVADgVEhYsDgUWADgSDwUOOBIFECMCABAAAAS7JAAABV4sDhQJLA4RBiwOBQosDhMMIgAABT4mAhAEESwIABEsDAkSLAwGEywMChQsDAwVABAAEAAkAAAFcCwEAAAsDQkQLA0GESwNDBItBAAQgAMnAIAEBAAEJAAABvEtCIAFABMAKBMCFAA4FAsVLA4FFSwOEwksDhEGLA4PCiwOEgwiAAAFPgA4Bw8FLAwFByIAAANUKQEAAQVaAuQbtR6pnzsBAQIlKQEAAQVFp8pxGUHkFTsBAQIlJAAAAewmAgYEACYCBwQBLAwGBSIAAAWIDSgABYBEAAYjAgAGAAAF+CIAAAWdLA0BBSwNAgYsDQMHLA0ECCYCCQQELAgBCiYCCwQFABABCwEmAwoEAQAoBgILJgIMBAQAKAoCDT4PAAsADSwNCgYAKAYCBiwOBgosDgUBLA4KAiwOBwMsDggEJSwNAwYMOAUGCAA4BQcGIwIACAAABhMiAAAGxCwNAQgsDQIJLA0DCiwNBAsmAg0EBAw4BQ0OIwIADgAABjokAAAG3wAoCQINADgNBQ4sDQ4MJgIOBAMMOAUODyMCAA8AAAZfJAAABt8AKAgCDgA4DgUPLA0PDQA4DA0OJgINBAQMOAUNDyMCAA8AAAaJJAAABt8tBAAJgAMnAIAEBAAFJAAABvEtCIAFAAwAKAwCDQA4DQUPLA4ODywOCAEsDgwCLA4KAywOCwQiAAAGxCwMBgUiAAAFiCkBAAEFAtxuJ4B2Ep07AQECJSkBAAEF6J0J/qERLQ47AQECJS0BgAOABgsAgAYAAoAHIwCABwAABwwiAAAHFy0AgAOABSIAAAd+LQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwCADAAAB2otAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAABzknAYAFBAABAwCABgACgAYiAAAHfiUtABjKGMo=","debug_symbols":"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","brillig_names":["_increase_public_balance"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAA/92c927bMBDG5URKIieOndG9927leHeme+/W/dsdfosWAtqHSPu09Zfw7DPDAilCovkqQJCto+9+PFHUiTy6EG1s3cFeMJ9jc5w2R5xfjMY3Kbtqjtn2tqpHXVkoxgIB4wQB4yQBY0zAmBAwThEwThMwzhAwpgSMRQLGWQLGOQLGEgHjPAFjmYCxQsC4EIAxBOciCeeSR04d24fiXY52fhvdRcC4m4BxDwHjXgLGfQSM+wkYDxAwHiRgPETAeJiA8QgB41ECxmMEjMcJGE8QMJ4kYDxFwHiagPEMAeNZAsZzBIznCRgvEDBeJGC8RMB4mYDxCgFjRsBYJWBcIWCsETDWCRgbBIxNAsYWAWObgLFDwHiVgPEaAeN1AsYbBIw3CRhvETCuEjDeJmC8Q8B4l4DxHgHjfQLGBwSMDwkYHxEwPiZgfELA+JSA8RkB43MCxhcEjC8JGF8RML4mYHxDwPg2AGMIzncknO9JOLuBOKMPFvTEYMfCLSyMwsIjLOzBwhksTMHCDyyswMIFLAxA4j0S25E4XhnsSHxGUjESdpEEiyRTJHEiSRJJiEjyQxIdktSQBIYkKyQxIUno6GA/NtiRRIIkDSRBIMkAk/iYJMckNCZ5MYmKSUpMAmKSDZNYmCRCrTDJgUkEDNJjEByDzBjExSApBiExyIdBNAxSYRAIgywYxJBBArzk4iUSL2l4CcJLBoJ4BMkIQhHkIYhCkIIgAA9ZPMTwkEAnjE4OnQhuUtwAaFzd6M+bNJIf5pia44SSe1xEV00tuz71t7POx9RRP4/8tdTonAmiv9ES/WkY/kwW2t7LR/p1XcTupDl285Evu/k4k5RZU2XWrDJSnzDXu14P66/qSsnyUaTqIraLYWzXCpY9fV20TOwXo5Btc2NRsrYnPLZ/pO8oSZl8xFOwZHG+uR4iS5RMri/snFfl7LY1Y8mEBZu035LyjWwfjEyuaax0+muvjXbY9lrP/l17rVf/x/YaW7I431yPv22vum3Z7TWJRpv0pSKbUrKflmxayX7lI9sNxdE0n8P2yRvPYH3v+X6GLTn4tS1s0/nIH9IGJ9W5RPlv3T+6vCVLlSzOx+0UzfdY2dG6hCOxytfN97I5TqnfyO8rDvtTlv0xbsc52y+po3zqKI+2dsl8njU72tA3+U20+d7Fvmq+Z9vamh1XP+lPf6vm6gs98n8R/bNB9NeH+ufC8A/jqlIY/w/1z4fh74v+chj9TdFfCaO/IfoXguhfGcYJ+s927DhhSZ33GNduOU4Q+0WLNVScsGTx2P7RcQJkyw7WikNm9wHLDjvLDjsuXfMedS141FXcoXUsedRV8agr9ajL53Wc86jLp7/KHnXNeNTls9379Jdcx7DjVVnmitOiAPqLYfQP+37po/W7ma6T2E+s8l8tP88F8fNoHEr6M+0LVyzl0/ZWn9div+TgEe6iQ7adP0D70mj3O+1GZxDSV5srnaxg6RdW+5x+L9L9iy7veva74j6Pvs5cYxBl5VdssZLNW7JEyYRRj0G44mKf/Fvxv7Zfccjs/nmr13IxGm9r+n6cjUb3c5z7r3urvfHHLuuMRn8SjY8xRpb9xCr/3Xy3+7rt3iP9Vq/ar/X6vUbv8+f6p96ipV/7EH76DXVGL3ipUwAA","debug_symbols":"tZbLCoMwEEX/ZdZZOGPV1l8ppUSNJRCiRC0U8d8bpQ9p13cTmDA5kyxOuDM1pppuV+vbbqDyPJPraj3azsdqXhRVwTpnb9f9NiXrwolsB4Ze+7UeRh1GKg+iyPiGyiyJx1vrDJV5uqi/xuLdWBSfxkyWi4rkFEY+wMgZjJzDyAWMfISRTygyJzAyw8gwBxnmIMMcZJiDDHOQYQ4yzEGGOSgwBwXmoMAcFJiDgnFwidVdB6srZ14Bop18vcsT46M3P9GiD11tmimYNWR888X69nihTLZfPxYsueKU45A46Ak=","brillig_names":["process_log"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"10502589790419500451":{"error_kind":"string","string":"Function _increase_public_balance can only be called internally"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"3219842053230618354":{"error_kind":"string","string":"Function check_balance can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6067862452620309358":{"error_kind":"string","string":"Function balance_of_public can only be called statically"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["public_dispatch"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"FeeJuice"}},{"name":"fields","value":{"fields":[{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"portal_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"fee_limit","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"FeeJuice::check_balance_parameters"}}],"kind":"struct","path":"FeeJuice::check_balance_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"FeeJuice::balance_of_public_parameters"}},{"name":"return_type","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"FeeJuice::balance_of_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"FeeJuice::_increase_public_balance_parameters"}}],"kind":"struct","path":"FeeJuice::_increase_public_balance_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"FeeJuice::set_portal_parameters"}}],"kind":"struct","path":"FeeJuice::set_portal_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"FeeJuice::claim_parameters"}}],"kind":"struct","path":"FeeJuice::claim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"initial_mint","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"FeeJuice::initialize_parameters"}}],"kind":"struct","path":"FeeJuice::initialize_abi"}]}},"file_map":{"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\\n\\n#[derive_via(derive_eq)]\\n// docs:start:eq-trait\\npub trait Eq {\\n    fn eq(self, other: Self) -> bool;\\n}\\n// docs:end:eq-trait\\n\\n// docs:start:derive_eq\\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\\n    let body = |fields| {\\n        if s.fields_as_written().len() == 0 {\\n            quote { true }\\n        } else {\\n            fields\\n        }\\n    };\\n    crate::meta::make_trait_impl(\\n        s,\\n        quote { Eq },\\n        signature,\\n        for_each_field,\\n        quote { & },\\n        body,\\n    )\\n}\\n// docs:end:derive_eq\\n\\nimpl Eq for Field {\\n    fn eq(self, other: Field) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl Eq for u64 {\\n    fn eq(self, other: u64) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u32 {\\n    fn eq(self, other: u32) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u16 {\\n    fn eq(self, other: u16) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u8 {\\n    fn eq(self, other: u8) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u1 {\\n    fn eq(self, other: u1) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl Eq for i8 {\\n    fn eq(self, other: i8) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for i16 {\\n    fn eq(self, other: i16) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for i32 {\\n    fn eq(self, other: i32) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for i64 {\\n    fn eq(self, other: i64) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl Eq for () {\\n    fn eq(_self: Self, _other: ()) -> bool {\\n        true\\n    }\\n}\\nimpl Eq for bool {\\n    fn eq(self, other: bool) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl<T, let N: u32> Eq for [T; N]\\nwhere\\n    T: Eq,\\n{\\n    fn eq(self, other: [T; N]) -> bool {\\n        let mut result = true;\\n        for i in 0..self.len() {\\n            result &= self[i].eq(other[i]);\\n        }\\n        result\\n    }\\n}\\n\\nimpl<T> Eq for [T]\\nwhere\\n    T: Eq,\\n{\\n    fn eq(self, other: [T]) -> bool {\\n        let mut result = self.len() == other.len();\\n        for i in 0..self.len() {\\n            result &= self[i].eq(other[i]);\\n        }\\n        result\\n    }\\n}\\n\\nimpl<let N: u32> Eq for str<N> {\\n    fn eq(self, other: str<N>) -> bool {\\n        let self_bytes = self.as_bytes();\\n        let other_bytes = other.as_bytes();\\n        self_bytes == other_bytes\\n    }\\n}\\n\\nimpl<A, B> Eq for (A, B)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n{\\n    fn eq(self, other: (A, B)) -> bool {\\n        self.0.eq(other.0) & self.1.eq(other.1)\\n    }\\n}\\n\\nimpl<A, B, C> Eq for (A, B, C)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n    C: Eq,\\n{\\n    fn eq(self, other: (A, B, C)) -> bool {\\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\\n    }\\n}\\n\\nimpl<A, B, C, D> Eq for (A, B, C, D)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n    C: Eq,\\n    D: Eq,\\n{\\n    fn eq(self, other: (A, B, C, D)) -> bool {\\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\\n    }\\n}\\n\\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n    C: Eq,\\n    D: Eq,\\n    E: Eq,\\n{\\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\\n        self.0.eq(other.0)\\n            & self.1.eq(other.1)\\n            & self.2.eq(other.2)\\n            & self.3.eq(other.3)\\n            & self.4.eq(other.4)\\n    }\\n}\\n\\nimpl Eq for Ordering {\\n    fn eq(self, other: Ordering) -> bool {\\n        self.result == other.result\\n    }\\n}\\n\\n// Noir doesn\'t have enums yet so we emulate (Lt | Eq | Gt) with a struct\\n// that has 3 public functions for constructing the struct.\\npub struct Ordering {\\n    result: Field,\\n}\\n\\nimpl Ordering {\\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\\n    // into the compiler, do not change these without also updating\\n    // the compiler itself!\\n    pub fn less() -> Ordering {\\n        Ordering { result: 0 }\\n    }\\n\\n    pub fn equal() -> Ordering {\\n        Ordering { result: 1 }\\n    }\\n\\n    pub fn greater() -> Ordering {\\n        Ordering { result: 2 }\\n    }\\n}\\n\\n#[derive_via(derive_ord)]\\n// docs:start:ord-trait\\npub trait Ord {\\n    fn cmp(self, other: Self) -> Ordering;\\n}\\n// docs:end:ord-trait\\n\\n// docs:start:derive_ord\\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\\n    let for_each_field = |name| quote {\\n        if result == std::cmp::Ordering::equal() {\\n            result = _self.$name.cmp(_other.$name);\\n        }\\n    };\\n    let body = |fields| quote {\\n        let mut result = std::cmp::Ordering::equal();\\n        $fields\\n        result\\n    };\\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\\n}\\n// docs:end:derive_ord\\n\\n// Note: Field deliberately does not implement Ord\\n\\nimpl Ord for u64 {\\n    fn cmp(self, other: u64) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for u32 {\\n    fn cmp(self, other: u32) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for u16 {\\n    fn cmp(self, other: u16) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for u8 {\\n    fn cmp(self, other: u8) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i8 {\\n    fn cmp(self, other: i8) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i16 {\\n    fn cmp(self, other: i16) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i32 {\\n    fn cmp(self, other: i32) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i64 {\\n    fn cmp(self, other: i64) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for () {\\n    fn cmp(_self: Self, _other: ()) -> Ordering {\\n        Ordering::equal()\\n    }\\n}\\n\\nimpl Ord for bool {\\n    fn cmp(self, other: bool) -> Ordering {\\n        if self {\\n            if other {\\n                Ordering::equal()\\n            } else {\\n                Ordering::greater()\\n            }\\n        } else if other {\\n            Ordering::less()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl<T, let N: u32> Ord for [T; N]\\nwhere\\n    T: Ord,\\n{\\n    // The first non-equal element of both arrays determines\\n    // the ordering for the whole array.\\n    fn cmp(self, other: [T; N]) -> Ordering {\\n        let mut result = Ordering::equal();\\n        for i in 0..self.len() {\\n            if result == Ordering::equal() {\\n                let result_i = self[i].cmp(other[i]);\\n\\n                if result_i == Ordering::less() {\\n                    result = result_i;\\n                } else if result_i == Ordering::greater() {\\n                    result = result_i;\\n                }\\n            }\\n        }\\n        result\\n    }\\n}\\n\\nimpl<T> Ord for [T]\\nwhere\\n    T: Ord,\\n{\\n    // The first non-equal element of both arrays determines\\n    // the ordering for the whole array.\\n    fn cmp(self, other: [T]) -> Ordering {\\n        let mut result = self.len().cmp(other.len());\\n        for i in 0..self.len() {\\n            if result == Ordering::equal() {\\n                let result_i = self[i].cmp(other[i]);\\n\\n                if result_i == Ordering::less() {\\n                    result = result_i;\\n                } else if result_i == Ordering::greater() {\\n                    result = result_i;\\n                }\\n            }\\n        }\\n        result\\n    }\\n}\\n\\nimpl<A, B> Ord for (A, B)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n{\\n    fn cmp(self, other: (A, B)) -> Ordering {\\n        let result = self.0.cmp(other.0);\\n\\n        if result != Ordering::equal() {\\n            result\\n        } else {\\n            self.1.cmp(other.1)\\n        }\\n    }\\n}\\n\\nimpl<A, B, C> Ord for (A, B, C)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n    C: Ord,\\n{\\n    fn cmp(self, other: (A, B, C)) -> Ordering {\\n        let mut result = self.0.cmp(other.0);\\n\\n        if result == Ordering::equal() {\\n            result = self.1.cmp(other.1);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.2.cmp(other.2);\\n        }\\n\\n        result\\n    }\\n}\\n\\nimpl<A, B, C, D> Ord for (A, B, C, D)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n    C: Ord,\\n    D: Ord,\\n{\\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\\n        let mut result = self.0.cmp(other.0);\\n\\n        if result == Ordering::equal() {\\n            result = self.1.cmp(other.1);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.2.cmp(other.2);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.3.cmp(other.3);\\n        }\\n\\n        result\\n    }\\n}\\n\\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n    C: Ord,\\n    D: Ord,\\n    E: Ord,\\n{\\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\\n        let mut result = self.0.cmp(other.0);\\n\\n        if result == Ordering::equal() {\\n            result = self.1.cmp(other.1);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.2.cmp(other.2);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.3.cmp(other.3);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.4.cmp(other.4);\\n        }\\n\\n        result\\n    }\\n}\\n\\n// Compares and returns the maximum of two values.\\n//\\n// Returns the second argument if the comparison determines them to be equal.\\n//\\n// # Examples\\n//\\n// ```\\n// use std::cmp;\\n//\\n// assert_eq(cmp::max(1, 2), 2);\\n// assert_eq(cmp::max(2, 2), 2);\\n// ```\\npub fn max<T>(v1: T, v2: T) -> T\\nwhere\\n    T: Ord,\\n{\\n    if v1 > v2 {\\n        v1\\n    } else {\\n        v2\\n    }\\n}\\n\\n// Compares and returns the minimum of two values.\\n//\\n// Returns the first argument if the comparison determines them to be equal.\\n//\\n// # Examples\\n//\\n// ```\\n// use std::cmp;\\n//\\n// assert_eq(cmp::min(1, 2), 1);\\n// assert_eq(cmp::min(2, 2), 2);\\n// ```\\npub fn min<T>(v1: T, v2: T) -> T\\nwhere\\n    T: Ord,\\n{\\n    if v1 > v2 {\\n        v2\\n    } else {\\n        v1\\n    }\\n}\\n\\nmod cmp_tests {\\n    use crate::cmp::{max, min};\\n\\n    #[test]\\n    fn sanity_check_min() {\\n        assert_eq(min(0 as u64, 1 as u64), 0);\\n        assert_eq(min(0 as u64, 0 as u64), 0);\\n        assert_eq(min(1 as u64, 1 as u64), 1);\\n        assert_eq(min(255 as u8, 0 as u8), 0);\\n    }\\n\\n    #[test]\\n    fn sanity_check_max() {\\n        assert_eq(max(0 as u64, 1 as u64), 1);\\n        assert_eq(max(0 as u64, 0 as u64), 0);\\n        assert_eq(max(1 as u64, 1 as u64), 1);\\n        assert_eq(max(255 as u8, 0 as u8), 255);\\n    }\\n}\\n"},"18":{"path":"std/field/bn254.nr","source":"use crate::field::field_less_than;\\nuse crate::runtime::is_unconstrained;\\n\\n// The low and high decomposition of the field modulus\\nglobal PLO: Field = 53438638232309528389504892708671455233;\\nglobal PHI: Field = 64323764613183177041862057485226039389;\\n\\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\\nglobal TWO_POW_64: Field = 0x10000000000000000;\\n\\n// Decomposes a single field into two 16 byte fields.\\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\\n    // Here\'s we\'re taking advantage of truncating 64 bit limbs from the input field\\n    // and then subtracting them from the input such the field division is equivalent to integer division.\\n    let low_lower_64 = (x as u64) as Field;\\n    x = (x - low_lower_64) / TWO_POW_64;\\n    let low_upper_64 = (x as u64) as Field;\\n\\n    let high = (x - low_upper_64) / TWO_POW_64;\\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\\n\\n    (low, high)\\n}\\n\\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\\n    compute_decomposition(x)\\n}\\n\\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\\n    if x == y {\\n        true\\n    } else {\\n        field_less_than(x, y)\\n    }\\n}\\n\\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\\n    let (alo, ahi) = a;\\n    let (blo, bhi) = b;\\n    /// Safety: borrow is enforced to be boolean due to its type.\\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n    unsafe {\\n        /*@safety: borrow is enforced to be boolean due to its type.\\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n        */\\n        let borrow = lte_hint(alo, blo);\\n\\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\\n        let rhi = ahi - bhi - (borrow as Field);\\n\\n        rlo.assert_max_bit_size::<128>();\\n        rhi.assert_max_bit_size::<128>();\\n    }\\n}\\n\\n/// Decompose a single field into two 16 byte fields.\\npub fn decompose(x: Field) -> (Field, Field) {\\n    if is_unconstrained() {\\n        compute_decomposition(x)\\n    } else {\\n        /// Safety: decomposition is properly checked below\\n        unsafe {\\n            /*@safety: decomposition is properly checked below*/\\n            // Take hints of the decomposition\\n            let (xlo, xhi) = decompose_hint(x);\\n\\n            // Range check the limbs\\n            xlo.assert_max_bit_size::<128>();\\n            xhi.assert_max_bit_size::<128>();\\n\\n            // Check that the decomposition is correct\\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\\n\\n            // Assert that the decomposition of P is greater than the decomposition of x\\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\\n            (xlo, xhi)\\n        }\\n    }\\n}\\n\\npub fn assert_gt(a: Field, b: Field) {\\n    if is_unconstrained() {\\n        assert(\\n            /// Safety: already unconstrained\\n            unsafe { field_less_than(b, a) },\\n        );\\n    } else {\\n        // Decompose a and b\\n        let a_limbs = decompose(a);\\n        let b_limbs = decompose(b);\\n\\n        // Assert that a_limbs is greater than b_limbs\\n        assert_gt_limbs(a_limbs, b_limbs)\\n    }\\n}\\n\\npub fn assert_lt(a: Field, b: Field) {\\n    assert_gt(b, a);\\n}\\n\\npub fn gt(a: Field, b: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unsafe in unconstrained\\n        unsafe {\\n            //@safety: unsafe in unconstrained\\n            field_less_than(b, a)\\n        }\\n    } else if a == b {\\n        false\\n    } else {\\n        /// Safety: Take a hint of the comparison and verify it\\n        unsafe {\\n            //@safety: Take a hint of the comparison and verify it\\n            if field_less_than(a, b) {\\n                assert_gt(b, a);\\n                false\\n            } else {\\n                assert_gt(a, b);\\n                true\\n            }\\n        }\\n    }\\n}\\n\\npub fn lt(a: Field, b: Field) -> bool {\\n    gt(b, a)\\n}\\n\\nmod tests {\\n    // TODO: Allow imports from \\"super\\"\\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\\n\\n    #[test]\\n    fn check_decompose() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_decompose_unconstrained() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_lte_hint() {\\n        assert(lte_hint(0, 1));\\n        assert(lte_hint(0, 0x100));\\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\\n        assert(!lte_hint(0 - 1, 0));\\n\\n        assert(lte_hint(0, 0));\\n        assert(lte_hint(0x100, 0x100));\\n        assert(lte_hint(0 - 1, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_assert_gt() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    unconstrained fn check_assert_gt_unconstrained() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    fn check_gt() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_gt_unconstrained() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_plo_phi() {\\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\\n        let p_bytes = crate::field::modulus_le_bytes();\\n        let mut p_low: Field = 0;\\n        let mut p_high: Field = 0;\\n\\n        let mut offset = 1;\\n        for i in 0..16 {\\n            p_low += (p_bytes[i] as Field) * offset;\\n            p_high += (p_bytes[i + 16] as Field) * offset;\\n            offset *= 256;\\n        }\\n        assert_eq(p_low, PLO);\\n        assert_eq(p_high, PHI);\\n    }\\n}\\n"},"19":{"path":"std/field/mod.nr","source":"pub mod bn254;\\nuse crate::{runtime::is_unconstrained, static_assert};\\nuse bn254::lt as bn254_lt;\\n\\nimpl Field {\\n    /// Asserts that `self` can be represented in `bit_size` bits.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\\n    // docs:start:assert_max_bit_size\\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\\n        // docs:end:assert_max_bit_size\\n        static_assert(\\n            BIT_SIZE < modulus_num_bits() as u32,\\n            \\"BIT_SIZE must be less than modulus_num_bits\\",\\n        );\\n        self.__assert_max_bit_size(BIT_SIZE);\\n    }\\n\\n    #[builtin(apply_range_constraint)]\\n    fn __assert_max_bit_size(self, bit_size: u32) {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_le_bits)]\\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_be_bits)]\\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_le_bits\\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_le_bits\\n        let bits = self._to_le_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(p[N - 1 - i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_be_bits\\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_be_bits\\n        let bits = self._to_be_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the decomposition does not overflow the modulus\\n            let p = modulus_be_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[i] != p[i]) {\\n                        assert(p[i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_le_bytes\\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_le_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_le_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_be_bytes\\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_be_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_be_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_be_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[i] != p[i]) {\\n                        assert(bytes[i] < p[i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    // docs:start:to_le_radix\\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            static_assert(1 < radix, \\"radix must be greater than 1\\");\\n            static_assert(radix <= 256, \\"radix must be less than or equal to 256\\");\\n            static_assert(radix & (radix - 1) == 0, \\"radix must be a power of 2\\");\\n        }\\n        self.__to_le_radix(radix)\\n    }\\n    // docs:end:to_le_radix\\n\\n    // docs:start:to_be_radix\\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            crate::assert_constant(radix);\\n        }\\n        self.__to_be_radix(radix)\\n    }\\n    // docs:end:to_be_radix\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_le_radix)]\\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_be_radix)]\\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // Returns self to the power of the given exponent value.\\n    // Caution: we assume the exponent fits into 32 bits\\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\\n    pub fn pow_32(self, exponent: Field) -> Field {\\n        let mut r: Field = 1;\\n        let b: [u1; 32] = exponent.to_le_bits();\\n\\n        for i in 1..33 {\\n            r *= r;\\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\\n        }\\n        r\\n    }\\n\\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\\n    pub fn sgn0(self) -> u1 {\\n        self as u1\\n    }\\n\\n    pub fn lt(self, another: Field) -> bool {\\n        if crate::compat::is_bn254() {\\n            bn254_lt(self, another)\\n        } else {\\n            lt_fallback(self, another)\\n        }\\n    }\\n\\n    /// Convert a little endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n\\n    /// Convert a big endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[N - 1 - i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n}\\n\\n#[builtin(modulus_num_bits)]\\npub comptime fn modulus_num_bits() -> u64 {}\\n\\n#[builtin(modulus_be_bits)]\\npub comptime fn modulus_be_bits() -> [u1] {}\\n\\n#[builtin(modulus_le_bits)]\\npub comptime fn modulus_le_bits() -> [u1] {}\\n\\n#[builtin(modulus_be_bytes)]\\npub comptime fn modulus_be_bytes() -> [u8] {}\\n\\n#[builtin(modulus_le_bytes)]\\npub comptime fn modulus_le_bytes() -> [u8] {}\\n\\n/// An unconstrained only built in to efficiently compare fields.\\n#[builtin(field_less_than)]\\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\\n\\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\\n    __field_less_than(x, y)\\n}\\n\\n// Convert a 32 byte array to a field element by modding\\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\\n    // Convert it to a field element\\n    let mut v = 1;\\n    let mut high = 0 as Field;\\n    let mut low = 0 as Field;\\n\\n    for i in 0..16 {\\n        high = high + (bytes32[15 - i] as Field) * v;\\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\\n        v = v * 256;\\n    }\\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\\n    low + high * v\\n}\\n\\nfn lt_fallback(x: Field, y: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unconstrained context\\n        unsafe {\\n            //@safety : unconstrained context\\n            field_less_than(x, y)\\n        }\\n    } else {\\n        let x_bytes: [u8; 32] = x.to_le_bytes();\\n        let y_bytes: [u8; 32] = y.to_le_bytes();\\n        let mut x_is_lt = false;\\n        let mut done = false;\\n        for i in 0..32 {\\n            if (!done) {\\n                let x_byte = x_bytes[32 - 1 - i] as u8;\\n                let y_byte = y_bytes[32 - 1 - i] as u8;\\n                let bytes_match = x_byte == y_byte;\\n                if !bytes_match {\\n                    x_is_lt = x_byte < y_byte;\\n                    done = true;\\n                }\\n            }\\n        }\\n        x_is_lt\\n    }\\n}\\n\\nmod tests {\\n    use crate::{panic::panic, runtime};\\n    use super::field_less_than;\\n\\n    #[test]\\n    // docs:start:to_be_bits_example\\n    fn test_to_be_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_be_bits();\\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\\n    }\\n    // docs:end:to_be_bits_example\\n\\n    #[test]\\n    // docs:start:to_le_bits_example\\n    fn test_to_le_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_le_bits();\\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\\n    }\\n    // docs:end:to_le_bits_example\\n\\n    #[test]\\n    // docs:start:to_be_bytes_example\\n    fn test_to_be_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_bytes();\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_bytes_example\\n\\n    #[test]\\n    // docs:start:to_le_bytes_example\\n    fn test_to_le_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_bytes();\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_bytes_example\\n\\n    #[test]\\n    // docs:start:to_be_radix_example\\n    fn test_to_be_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_radix(256);\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_radix_example\\n\\n    #[test]\\n    // docs:start:to_le_radix_example\\n    fn test_to_le_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_radix(256);\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_radix_example\\n\\n    #[test(should_fail_with = \\"radix must be greater than 1\\")]\\n    fn test_to_le_radix_1() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(1);\\n        } else {\\n            panic(f\\"radix must be greater than 1\\");\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\\n    // #[test]\\n    // fn test_to_le_radix_brillig_1() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(1);\\n    //         crate::println(out);\\n    //         let expected = [0; 8];\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test(should_fail_with = \\"radix must be a power of 2\\")]\\n    fn test_to_le_radix_3() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(3);\\n        } else {\\n            panic(f\\"radix must be a power of 2\\");\\n        }\\n    }\\n\\n    #[test]\\n    fn test_to_le_radix_brillig_3() {\\n        // this test should only fail in constrained mode\\n        if runtime::is_unconstrained() {\\n            let field = 1;\\n            let out: [u8; 8] = field.to_le_radix(3);\\n            let mut expected = [0; 8];\\n            expected[0] = 1;\\n            assert(out == expected, \\"unexpected result\\");\\n        }\\n    }\\n\\n    #[test(should_fail_with = \\"radix must be less than or equal to 256\\")]\\n    fn test_to_le_radix_512() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(512);\\n        } else {\\n            panic(f\\"radix must be less than or equal to 256\\")\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\\n    // #[test]\\n    // fn test_to_le_radix_brillig_512() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(512);\\n    //         let mut expected = [0; 8];\\n    //         expected[0] = 1;\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test]\\n    unconstrained fn test_field_less_than() {\\n        assert(field_less_than(0, 1));\\n        assert(field_less_than(0, 0x100));\\n        assert(field_less_than(0x100, 0 - 1));\\n        assert(!field_less_than(0 - 1, 0));\\n    }\\n}\\n"},"26":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\\nuse crate::hash::Hasher;\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2 {\\n    cache: [Field; 3],\\n    state: [Field; 4],\\n    cache_size: u32,\\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2 {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub fn new(iv: Field) -> Poseidon2 {\\n        let mut result =\\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let two_pow_64 = 18446744073709551616;\\n        let iv: Field = (in_len as Field) * two_pow_64;\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n\\npub struct Poseidon2Hasher {\\n    _state: [Field],\\n}\\n\\nimpl Hasher for Poseidon2Hasher {\\n    fn finish(self) -> Field {\\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..self._state.len() {\\n            sponge.absorb(self._state[i]);\\n        }\\n        sponge.squeeze()\\n    }\\n\\n    fn write(&mut self, input: Field) {\\n        self._state = self._state.push_back(input);\\n    }\\n}\\n\\nimpl Default for Poseidon2Hasher {\\n    fn default() -> Self {\\n        Poseidon2Hasher { _state: &[] }\\n    }\\n}\\n"},"52":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\\n    assert(false, message);\\n    crate::mem::zeroed()\\n}\\n"},"60":{"path":"std/uint128.nr","source":"use crate::cmp::{Eq, Ord, Ordering};\\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\\nuse crate::static_assert;\\nuse super::{convert::AsPrimitive, default::Default};\\n\\nglobal pow64: Field = 18446744073709551616; //2^64;\\nglobal pow63: Field = 9223372036854775808; // 2^63;\\npub struct U128 {\\n    pub(crate) lo: Field,\\n    pub(crate) hi: Field,\\n}\\n\\nimpl U128 {\\n\\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\\n        assert(crate::field::modulus_num_bits() as u32 > 128);\\n        U128 { lo: lo as Field, hi: hi as Field }\\n    }\\n\\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\\n        U128::from_u64s_le(lo, hi)\\n    }\\n\\n    pub fn zero() -> U128 {\\n        U128 { lo: 0, hi: 0 }\\n    }\\n\\n    pub fn one() -> U128 {\\n        U128 { lo: 1, hi: 0 }\\n    }\\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\\n        let mut lo = 0;\\n        let mut base = 1;\\n        for i in 0..8 {\\n            lo += (bytes[i] as Field) * base;\\n            base *= 256;\\n        }\\n        let mut hi = 0;\\n        base = 1;\\n        for i in 8..16 {\\n            hi += (bytes[i] as Field) * base;\\n            base *= 256;\\n        }\\n        U128 { lo, hi }\\n    }\\n\\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\\n        let lo: [u8; 8] = self.lo.to_be_bytes();\\n        let hi: [u8; 8] = self.hi.to_be_bytes();\\n        let mut bytes = [0; 16];\\n        for i in 0..8 {\\n            bytes[i] = hi[i];\\n            bytes[i + 8] = lo[i];\\n        }\\n        bytes\\n    }\\n\\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\\n        let lo: [u8; 8] = self.lo.to_le_bytes();\\n        let hi: [u8; 8] = self.hi.to_le_bytes();\\n        let mut bytes = [0; 16];\\n        for i in 0..8 {\\n            bytes[i] = lo[i];\\n            bytes[i + 8] = hi[i];\\n        }\\n        bytes\\n    }\\n\\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\\n        let bytes = hex.as_bytes();\\n        // string must starts with \\"0x\\"\\n        assert((bytes[0] == 48) & (bytes[1] == 120), \\"Invalid hexadecimal string\\");\\n        static_assert(N < 35, \\"Input does not fit into a U128\\");\\n\\n        let mut lo = 0;\\n        let mut hi = 0;\\n        let mut base = 1;\\n        if N <= 18 {\\n            for i in 0..N - 2 {\\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\\n                base = base * 16;\\n            }\\n        } else {\\n            for i in 0..16 {\\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\\n                base = base * 16;\\n            }\\n            base = 1;\\n            for i in 17..N - 1 {\\n                hi += U128::decode_ascii(bytes[N - i]) * base;\\n                base = base * 16;\\n            }\\n        }\\n        U128 { lo: lo as Field, hi: hi as Field }\\n    }\\n\\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\\n        ((ascii >= 65) & (ascii <= 90)) // Between \'A\' and \'Z\'\\n    }\\n\\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\\n        (\\n            if ascii < 58 {\\n                ascii - 48\\n            } else {\\n                /// Safety: optionally adds 32 and then check (below) the result is in \'a..f\' range\\n                let ascii =\\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\\n                assert(ascii >= 97); // enforce >= \'a\'\\n                assert(ascii <= 102); // enforce <= \'f\'\\n                ascii - 87\\n            }\\n        ) as Field\\n    }\\n\\n    // TODO: Replace with a faster version.\\n    // A circuit that uses this function can be slow to compute\\n    // (we\'re doing up to 127 calls to compute the quotient)\\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\\n        if b == U128::zero() {\\n            // Return 0,0 to avoid eternal loop\\n            (U128::zero(), U128::zero())\\n        } else if self < b {\\n            (U128::zero(), self)\\n        } else if self == b {\\n            (U128::one(), U128::zero())\\n        } else {\\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\\n                // The result of multiplication by 2 would overflow\\n                (U128::zero(), self)\\n            } else {\\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\\n            };\\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\\n            if r < b {\\n                (q_mul_2, r)\\n            } else {\\n                (q_mul_2 + U128::one(), r - b)\\n            }\\n        }\\n    }\\n\\n    pub fn from_integer<T>(i: T) -> U128\\n    where\\n        T: AsPrimitive<Field>,\\n    {\\n        let f = i.as_();\\n        // Reject values which would overflow a u128\\n        f.assert_max_bit_size::<128>();\\n        let lo = f as u64 as Field;\\n        let hi = (f - lo) / pow64;\\n        U128 { lo, hi }\\n    }\\n\\n    pub fn to_integer<T>(self) -> T\\n    where\\n        Field: AsPrimitive<T>,\\n    {\\n        AsPrimitive::as_(self.lo + self.hi * pow64)\\n    }\\n\\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\\n        let low = self.lo * b.lo;\\n        let lo = low as u64 as Field;\\n        let carry = (low - lo) / pow64;\\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\\n        let hi = high as u64 as Field;\\n        U128 { lo, hi }\\n    }\\n}\\n\\nimpl Add for U128 {\\n    fn add(self: Self, b: U128) -> U128 {\\n        let low = self.lo + b.lo;\\n        let lo = low as u64 as Field;\\n        let carry = (low - lo) / pow64;\\n        let high = self.hi + b.hi + carry;\\n        let hi = high as u64 as Field;\\n        assert(hi == high, \\"attempt to add with overflow\\");\\n        U128 { lo, hi }\\n    }\\n}\\n\\nimpl Sub for U128 {\\n    fn sub(self: Self, b: U128) -> U128 {\\n        let low = pow64 + self.lo - b.lo;\\n        let lo = low as u64 as Field;\\n        let borrow = (low == lo) as Field;\\n        let high = self.hi - b.hi - borrow;\\n        let hi = high as u64 as Field;\\n        assert(hi == high, \\"attempt to subtract with underflow\\");\\n        U128 { lo, hi }\\n    }\\n}\\n\\nimpl Mul for U128 {\\n    fn mul(self: Self, b: U128) -> U128 {\\n        assert(self.hi * b.hi == 0, \\"attempt to multiply with overflow\\");\\n        let low = self.lo * b.lo;\\n        let lo = low as u64 as Field;\\n        let carry = (low - lo) / pow64;\\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\\n        } else {\\n            self.lo * b.hi + self.hi * b.lo + carry\\n        };\\n        let hi = high as u64 as Field;\\n        assert(hi == high, \\"attempt to multiply with overflow\\");\\n        U128 { lo, hi }\\n    }\\n}\\n\\nimpl Div for U128 {\\n    fn div(self: Self, b: U128) -> U128 {\\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\\n        unsafe {\\n            /*@safety : euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\\n                Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\\n            */\\n            let (q, r) = self.unconstrained_div(b);\\n            let a = b * q + r;\\n            assert_eq(self, a);\\n            assert(r < b);\\n            q\\n        }\\n    }\\n}\\n\\nimpl Rem for U128 {\\n    fn rem(self: Self, b: U128) -> U128 {\\n        /// Safety: cf div() above\\n        unsafe {\\n            //@safety : cf div() above\\n            let (q, r) = self.unconstrained_div(b);\\n            let a = b * q + r;\\n            assert_eq(self, a);\\n            assert(r < b);\\n\\n            r\\n        }\\n    }\\n}\\n\\nimpl Eq for U128 {\\n    fn eq(self: Self, b: U128) -> bool {\\n        (self.lo == b.lo) & (self.hi == b.hi)\\n    }\\n}\\n\\nimpl Ord for U128 {\\n    fn cmp(self, other: Self) -> Ordering {\\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\\n\\n        if hi_ordering == Ordering::equal() {\\n            lo_ordering\\n        } else {\\n            hi_ordering\\n        }\\n    }\\n}\\n\\nimpl Not for U128 {\\n    fn not(self) -> U128 {\\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\\n    }\\n}\\n\\nimpl BitOr for U128 {\\n    fn bitor(self, other: U128) -> U128 {\\n        U128 {\\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\\n        }\\n    }\\n}\\n\\nimpl BitAnd for U128 {\\n    fn bitand(self, other: U128) -> U128 {\\n        U128 {\\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\\n        }\\n    }\\n}\\n\\nimpl BitXor for U128 {\\n    fn bitxor(self, other: U128) -> U128 {\\n        U128 {\\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\\n        }\\n    }\\n}\\n\\nimpl Shl for U128 {\\n    fn shl(self, other: u8) -> U128 {\\n        assert(other < 128, \\"attempt to shift left with overflow\\");\\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\\n\\n        let mut r: Field = 2;\\n        let mut y: Field = 1;\\n        for i in 1..8 {\\n            let bit = exp_bits[7 - i] as Field;\\n            y = bit * (r * y) + (1 - bit) * y;\\n            r *= r;\\n        }\\n        self.wrapping_mul(U128::from_integer(y))\\n    }\\n}\\n\\nimpl Shr for U128 {\\n    fn shr(self, other: u8) -> U128 {\\n        assert(other < 128, \\"attempt to shift right with overflow\\");\\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\\n\\n        let mut r: Field = 2;\\n        let mut y: Field = 1;\\n        for i in 1..8 {\\n            let bit = exp_bits[7 - i] as Field;\\n            y = bit * (r * y) + (1 - bit) * y;\\n            r *= r;\\n        }\\n        self / U128::from_integer(y)\\n    }\\n}\\n\\nimpl Default for U128 {\\n    fn default() -> Self {\\n        U128::zero()\\n    }\\n}\\n\\nmod tests {\\n    use crate::default::Default;\\n    use crate::ops::Not;\\n    use crate::uint128::{pow63, pow64, U128};\\n\\n    #[test]\\n    fn test_not(lo: u64, hi: u64) {\\n        let num = U128::from_u64s_le(lo, hi);\\n        let not_num = num.not();\\n\\n        assert_eq(not_num.hi, (hi.not() as Field));\\n        assert_eq(not_num.lo, (lo.not() as Field));\\n\\n        let not_not_num = not_num.not();\\n        assert_eq(num, not_not_num);\\n    }\\n    #[test]\\n    fn test_construction() {\\n        // Check little-endian u64 is inversed with big-endian u64 construction\\n        let a = U128::from_u64s_le(2, 1);\\n        let b = U128::from_u64s_be(1, 2);\\n        assert_eq(a, b);\\n        // Check byte construction is equivalent\\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\\n        assert_eq(c, d);\\n    }\\n    #[test]\\n    fn test_byte_decomposition() {\\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\\n        // Get big-endian and little-endian byte decompostions\\n        let le_bytes_a = a.to_le_bytes();\\n        let be_bytes_a = a.to_be_bytes();\\n\\n        // Check equivalence\\n        for i in 0..16 {\\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\\n        }\\n        // Reconstruct U128 from byte decomposition\\n        let b = U128::from_le_bytes(le_bytes_a);\\n        // Check that it\'s the same element\\n        assert_eq(a, b);\\n    }\\n    #[test]\\n    fn test_hex_constuction() {\\n        let a = U128::from_u64s_le(0x1, 0x2);\\n        let b = U128::from_hex(\\"0x20000000000000001\\");\\n        assert_eq(a, b);\\n\\n        let c = U128::from_hex(\\"0xffffffffffffffffffffffffffffffff\\");\\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\\n        assert_eq(c, d);\\n\\n        let e = U128::from_hex(\\"0x00000000000000000000000000000000\\");\\n        let f = U128::from_u64s_le(0, 0);\\n        assert_eq(e, f);\\n    }\\n\\n    // Ascii decode tests\\n\\n    #[test]\\n    fn test_ascii_decode_correct_range() {\\n        // \'0\'..\'9\' range\\n        for i in 0..10 {\\n            let decoded = U128::decode_ascii(48 + i);\\n            assert_eq(decoded, i as Field);\\n        }\\n        // \'A\'..\'F\' range\\n        for i in 0..6 {\\n            let decoded = U128::decode_ascii(65 + i);\\n            assert_eq(decoded, (i + 10) as Field);\\n        }\\n        // \'a\'..\'f\' range\\n        for i in 0..6 {\\n            let decoded = U128::decode_ascii(97 + i);\\n            assert_eq(decoded, (i + 10) as Field);\\n        }\\n    }\\n\\n    #[test(should_fail)]\\n    fn test_ascii_decode_range_less_than_48_fails_0() {\\n        crate::println(U128::decode_ascii(0));\\n    }\\n    #[test(should_fail)]\\n    fn test_ascii_decode_range_less_than_48_fails_1() {\\n        crate::println(U128::decode_ascii(47));\\n    }\\n\\n    #[test(should_fail)]\\n    fn test_ascii_decode_range_58_64_fails_0() {\\n        let _ = U128::decode_ascii(58);\\n    }\\n    #[test(should_fail)]\\n    fn test_ascii_decode_range_58_64_fails_1() {\\n        let _ = U128::decode_ascii(64);\\n    }\\n    #[test(should_fail)]\\n    fn test_ascii_decode_range_71_96_fails_0() {\\n        let _ = U128::decode_ascii(71);\\n    }\\n    #[test(should_fail)]\\n    fn test_ascii_decode_range_71_96_fails_1() {\\n        let _ = U128::decode_ascii(96);\\n    }\\n    #[test(should_fail)]\\n    fn test_ascii_decode_range_greater_than_102_fails() {\\n        let _ = U128::decode_ascii(103);\\n    }\\n\\n    #[test(should_fail)]\\n    fn test_ascii_decode_regression() {\\n        // This code will actually fail because of ascii_decode,\\n        // but in the past it was possible to create a value > (1<<128)\\n        let a = U128::from_hex(\\"0x~fffffffffffffffffffffffffffffff\\");\\n        let b: Field = a.to_integer();\\n        let c: [u8; 17] = b.to_le_bytes();\\n        assert(c[16] != 0);\\n    }\\n\\n    #[test]\\n    fn test_unconstrained_div() {\\n        // Test the potential overflow case\\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\\n        let c = U128::one();\\n        let d = U128::from_u64s_le(0x0, 0x1);\\n        /// Safety: testing context\\n        unsafe {\\n            //@safety: testing context\\n            let (q, r) = a.unconstrained_div(b);\\n            assert_eq(q, c);\\n            assert_eq(r, d);\\n        }\\n\\n        let a = U128::from_u64s_le(2, 0);\\n        let b = U128::one();\\n        // Check the case where a is a multiple of b\\n        /// Safety: testing context\\n        unsafe {\\n            //@safety: testing context\\n            let (c, d) = a.unconstrained_div(b);\\n            assert_eq((c, d), (a, U128::zero()));\\n        }\\n\\n        // Check where b is a multiple of a\\n        /// Safety: testing context\\n        unsafe {\\n            //@safety: testing context\\n            let (c, d) = b.unconstrained_div(a);\\n            assert_eq((c, d), (U128::zero(), b));\\n        }\\n\\n        // Dividing by zero returns 0,0\\n        let a = U128::from_u64s_le(0x1, 0x0);\\n        let b = U128::zero();\\n        /// Safety: testing context\\n        unsafe {\\n            //@safety: testing context\\n            let (c, d) = a.unconstrained_div(b);\\n            assert_eq((c, d), (U128::zero(), U128::zero()));\\n        }\\n        // Dividing 1<<127 by 1<<127 (special case)\\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\\n        /// Safety: testing context\\n        unsafe {\\n            //@safety: testing context\\n            let (c, d) = a.unconstrained_div(b);\\n            assert_eq((c, d), (U128::one(), U128::zero()));\\n        }\\n    }\\n\\n    #[test]\\n    fn integer_conversions() {\\n        // Maximum\\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\\n        let a = U128::from_integer(start);\\n        let end = a.to_integer();\\n        assert_eq(start, end);\\n\\n        // Minimum\\n        let start: Field = 0x0;\\n        let a = U128::from_integer(start);\\n        let end = a.to_integer();\\n        assert_eq(start, end);\\n\\n        // Low limb\\n        let start: Field = 0xffffffffffffffff;\\n        let a = U128::from_integer(start);\\n        let end = a.to_integer();\\n        assert_eq(start, end);\\n\\n        // High limb\\n        let start: Field = 0xffffffffffffffff0000000000000000;\\n        let a = U128::from_integer(start);\\n        let end = a.to_integer();\\n        assert_eq(start, end);\\n    }\\n\\n    #[test]\\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\\n        let a = U128::from_integer(start);\\n        let end = a.to_integer();\\n        assert_eq(start, end);\\n    }\\n\\n    #[test]\\n    fn test_wrapping_mul() {\\n        // 1*0==0\\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\\n\\n        // 0*1==0\\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\\n\\n        // 1*1==1\\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\\n\\n        // 0 * ( 1 << 64 ) ==  0\\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\\n\\n        // ( 1 << 64 ) * 0 == 0\\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\\n\\n        // 1 * ( 1 << 64 ) == 1 << 64\\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\\n\\n        // ( 1 << 64 ) * 1 == 1 << 64\\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\\n\\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\\n        // -1 * -1 == 1\\n        assert_eq(\\n            U128::one(),\\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\\n            ),\\n        );\\n    }\\n\\n    #[test]\\n    fn test_default() {\\n        assert_eq(U128::default(), U128::zero());\\n    }\\n}\\n"},"62":{"path":"/build-volume/noir-projects/noir-contracts/contracts/fee_juice_contract/src/lib.nr","source":"use dep::aztec::context::PublicContext;\\nuse dep::aztec::prelude::AztecAddress;\\nuse dep::aztec::protocol_types::hash::sha256_to_field;\\n\\npub fn calculate_fee<TPublicContext>(context: PublicContext) -> Field {\\n    context.transaction_fee()\\n}\\n\\npub fn get_bridge_gas_msg_hash(owner: AztecAddress, amount: U128) -> Field {\\n    let mut hash_bytes = [0; 68];\\n    let recipient_bytes: [u8; 32] = owner.to_field().to_be_bytes();\\n    let amount_bytes: [u8; 32] = amount.to_field().to_be_bytes();\\n\\n    // The purpose of including the following selector is to make the message unique to that specific call. Note that\\n    // it has nothing to do with calling the function.\\n    let selector = comptime { std::hash::keccak256(\\"claim(bytes32,uint256)\\".as_bytes(), 22) };\\n\\n    for i in 0..4 {\\n        hash_bytes[i] = selector[i];\\n    }\\n\\n    for i in 0..32 {\\n        hash_bytes[i + 4] = recipient_bytes[i];\\n        hash_bytes[i + 36] = amount_bytes[i];\\n    }\\n\\n    let content_hash = sha256_to_field(hash_bytes);\\n    content_hash\\n}\\n"},"63":{"path":"/build-volume/noir-projects/noir-contracts/contracts/fee_juice_contract/src/main.nr","source":"mod lib;\\n\\nuse dep::aztec::macros::aztec;\\n\\n#[aztec]\\npub contract FeeJuice {\\n    use dep::aztec::{\\n        macros::{functions::{internal, private, public, view}, storage::storage},\\n        protocol_types::address::{AztecAddress, EthAddress},\\n        state_vars::{Map, PublicImmutable, PublicMutable},\\n    };\\n\\n    use crate::lib::get_bridge_gas_msg_hash;\\n\\n    #[storage]\\n    struct Storage<Context> {\\n        // This map is accessed directly by protocol circuits to check balances for fee payment.\\n        // Do not change this storage layout unless you also update the base rollup circuits.\\n        balances: Map<AztecAddress, PublicMutable<U128, Context>, Context>,\\n        portal_address: PublicImmutable<EthAddress, Context>,\\n    }\\n\\n    // Not flagged as initializer to reduce cost of checking init nullifier in all functions.\\n    // This function should be called as entrypoint to initialize the contract by minting itself funds.\\n    #[private]\\n    fn initialize(portal_address: EthAddress, initial_mint: U128) {\\n        // Validate contract class parameters are correct\\n        let self = context.this_address();\\n\\n        // Increase self balance and set as fee payer, and end setup\\n        FeeJuice::at(self)._increase_public_balance(self, initial_mint).enqueue(&mut context);\\n        context.set_as_fee_payer();\\n        context.end_setup();\\n\\n        // Enqueue call to set the portal address\\n        FeeJuice::at(self).set_portal(portal_address).enqueue(&mut context);\\n    }\\n\\n    // We purposefully not set this function as an initializer so we do not bind\\n    // the contract to a specific L1 portal address, since the Fee Juice address\\n    // is a hardcoded constant in the rollup circuits.\\n    #[public]\\n    fn set_portal(portal_address: EthAddress) {\\n        assert(storage.portal_address.read().is_zero());\\n        storage.portal_address.initialize(portal_address);\\n    }\\n\\n    #[private]\\n    fn claim(to: AztecAddress, amount: U128, secret: Field, message_leaf_index: Field) {\\n        let content_hash = get_bridge_gas_msg_hash(to, amount);\\n        let portal_address = storage.portal_address.read();\\n        assert(!portal_address.is_zero());\\n\\n        // Consume message and emit nullifier\\n        context.consume_l1_to_l2_message(content_hash, secret, portal_address, message_leaf_index);\\n\\n        // TODO(palla/gas) Emit an unencrypted log to announce which L1 to L2 message has been claimed\\n        // Otherwise, we cannot trace L1 deposits to their corresponding claims on L2\\n        FeeJuice::at(context.this_address())._increase_public_balance(to, amount).enqueue(\\n            &mut context,\\n        );\\n    }\\n\\n    #[public]\\n    #[internal]\\n    fn _increase_public_balance(to: AztecAddress, amount: U128) {\\n        let new_balance = storage.balances.at(to).read().add(amount);\\n        storage.balances.at(to).write(new_balance);\\n    }\\n\\n    #[public]\\n    #[view]\\n    fn check_balance(fee_limit: U128) {\\n        assert(storage.balances.at(context.msg_sender()).read() >= fee_limit, \\"Balance too low\\");\\n    }\\n\\n    // utility function for testing\\n    #[public]\\n    #[view]\\n    fn balance_of_public(owner: AztecAddress) -> pub U128 {\\n        storage.balances.at(owner).read()\\n    }\\n}\\n"},"73":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\\n};\\n\\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\\n\\nuse crate::hash::hash_args;\\nuse crate::oracle::execution_cache;\\n\\npub trait CallInterface<let N: u32> {\\n    fn get_args(self) -> [Field];\\n    fn get_selector(self) -> FunctionSelector;\\n    fn get_name(self) -> str<N>;\\n    fn get_contract_address(self) -> AztecAddress;\\n    fn get_is_static(self) -> bool;\\n}\\n\\npub struct PrivateCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: T,\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        execution_cache::store(self.args);\\n        let returns_hash = context.call_private_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            self.args_hash,\\n            false,\\n        );\\n        let returns: T = returns_hash.get_preimage();\\n        returns\\n    }\\n\\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        execution_cache::store(self.args);\\n        let returns_hash = context.call_private_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            self.args_hash,\\n            true,\\n        );\\n        returns_hash.get_preimage()\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PrivateVoidCallInterface<let N: u32> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: (),\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32> PrivateVoidCallInterface<N> {\\n    pub fn call(self, context: &mut PrivateContext) {\\n        execution_cache::store(self.args);\\n        context\\n            .call_private_function_with_args_hash(\\n                self.target_contract,\\n                self.selector,\\n                self.args_hash,\\n                false,\\n            )\\n            .assert_empty();\\n    }\\n\\n    pub fn view(self, context: &mut PrivateContext) {\\n        execution_cache::store(self.args);\\n        context\\n            .call_private_function_with_args_hash(\\n                self.target_contract,\\n                self.selector,\\n                self.args_hash,\\n                true,\\n            )\\n            .assert_empty();\\n    }\\n}\\n\\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PrivateStaticCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: T,\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        execution_cache::store(self.args);\\n        let returns = context.call_private_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            self.args_hash,\\n            true,\\n        );\\n        returns.get_preimage()\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PrivateStaticVoidCallInterface<let N: u32> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args_hash: Field,\\n    pub args: [Field],\\n    pub return_type: (),\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\\n    pub fn view(self, context: &mut PrivateContext) {\\n        execution_cache::store(self.args);\\n        context\\n            .call_private_function_with_args_hash(\\n                self.target_contract,\\n                self.selector,\\n                self.args_hash,\\n                true,\\n            )\\n            .assert_empty();\\n    }\\n}\\n\\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args: [Field],\\n    pub gas_opts: GasOpts,\\n    pub return_type: T,\\n    pub is_static: bool,\\n}\\n\\nimpl<let N: u32, T> PublicCallInterface<N, T> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        let returns = context.call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        Deserialize::deserialize(returns.as_array::<M>())\\n    }\\n\\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        Deserialize::deserialize(returns.as_array::<M>())\\n    }\\n\\n    pub fn enqueue(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            false,\\n        )\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicVoidCallInterface<let N: u32> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args: [Field],\\n    pub return_type: (),\\n    pub is_static: bool,\\n    pub gas_opts: GasOpts,\\n}\\n\\nimpl<let N: u32> PublicVoidCallInterface<N> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn call(self, context: &mut PublicContext) {\\n        let returns = context.call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        assert(returns.len() == 0);\\n    }\\n\\n    pub unconstrained fn view(self, context: &mut PublicContext) {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        assert(returns.len() == 0);\\n    }\\n\\n    pub fn enqueue(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            false,\\n        )\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n\\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicStaticCallInterface<let N: u32, T> {\\n    pub target_contract: AztecAddress,\\n    pub selector: FunctionSelector,\\n    pub name: str<N>,\\n    pub args: [Field],\\n    pub return_type: T,\\n    pub is_static: bool,\\n    pub gas_opts: GasOpts,\\n}\\n\\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\\n    where\\n        T: Deserialize<M>,\\n    {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        Deserialize::deserialize(returns.as_array::<M>())\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n\\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\\n    fn get_args(self) -> [Field] {\\n        self.args\\n    }\\n\\n    fn get_selector(self) -> FunctionSelector {\\n        self.selector\\n    }\\n\\n    fn get_name(self) -> str<N> {\\n        self.name\\n    }\\n\\n    fn get_contract_address(self) -> AztecAddress {\\n        self.target_contract\\n    }\\n\\n    fn get_is_static(self) -> bool {\\n        self.is_static\\n    }\\n}\\n\\npub struct PublicStaticVoidCallInterface<let N: u32> {\\n    target_contract: AztecAddress,\\n    selector: FunctionSelector,\\n    name: str<N>,\\n    args: [Field],\\n    return_type: (),\\n    is_static: bool,\\n    gas_opts: GasOpts,\\n}\\n\\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\\n        self.gas_opts = gas_opts;\\n        self\\n    }\\n\\n    pub unconstrained fn view(self, context: &mut PublicContext) {\\n        let returns = context.static_call_public_function(\\n            self.target_contract,\\n            self.selector,\\n            self.args,\\n            self.gas_opts,\\n        );\\n        assert(returns.len() == 0);\\n    }\\n\\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\\n        let args_hash = hash_args(self.args);\\n        execution_cache::store(self.args);\\n        context.call_public_function_with_args_hash(\\n            self.target_contract,\\n            self.selector,\\n            args_hash,\\n            /*static=*/\\n            true,\\n        )\\n    }\\n}\\n"},"80":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use dep::protocol_types::debug_log::debug_log_format;\\n\\nuse crate::{\\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\\n    hash::{ArgsHasher, hash_args_array},\\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\\n    messaging::process_l1_to_l2_message,\\n    oracle::{\\n        block_header::get_block_header_at,\\n        call_private_function::call_private_function_internal,\\n        enqueue_public_function_call::{\\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\\n            set_public_teardown_function_call_internal,\\n        },\\n        execution_cache,\\n        key_validation_request::get_key_validation_request,\\n        notes::{notify_created_nullifier, notify_nullified_note},\\n    },\\n};\\nuse dep::protocol_types::{\\n    abis::{\\n        call_context::CallContext,\\n        function_selector::FunctionSelector,\\n        log::Log,\\n        log_hash::LogHash,\\n        max_block_number::MaxBlockNumber,\\n        note_hash::NoteHash,\\n        nullifier::Nullifier,\\n        private_call_request::PrivateCallRequest,\\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\\n        private_log::PrivateLogData,\\n        public_call_request::PublicCallRequest,\\n        read_request::ReadRequest,\\n        side_effect::Counted,\\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    block_header::BlockHeader,\\n    constants::{\\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\\n    },\\n    messaging::l2_to_l1_message::L2ToL1Message,\\n    traits::Empty,\\n};\\n\\n// When finished, one can call .finish() to convert back to the abi\\npub struct PrivateContext {\\n    // docs:start:private-context\\n    pub inputs: PrivateContextInputs,\\n    pub side_effect_counter: u32,\\n\\n    pub min_revertible_side_effect_counter: u32,\\n    pub is_fee_payer: bool,\\n\\n    pub args_hash: Field,\\n    pub return_hash: Field,\\n\\n    pub max_block_number: MaxBlockNumber,\\n\\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\\n\\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\\n\\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\\n    pub public_teardown_call_request: PublicCallRequest,\\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\\n    // docs:end:private-context\\n\\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\\n    pub historical_header: BlockHeader,\\n\\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\\n\\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\\n    // fetching the same request multiple times.\\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\\n}\\n\\nimpl PrivateContext {\\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\\n        PrivateContext {\\n            inputs,\\n            side_effect_counter: inputs.start_side_effect_counter + 1,\\n            min_revertible_side_effect_counter: 0,\\n            is_fee_payer: false,\\n            args_hash,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            historical_header: inputs.historical_header,\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n\\n    pub fn msg_sender(self) -> AztecAddress {\\n        self.inputs.call_context.msg_sender\\n    }\\n\\n    pub fn this_address(self) -> AztecAddress {\\n        self.inputs.call_context.contract_address\\n    }\\n\\n    pub fn chain_id(self) -> Field {\\n        self.inputs.tx_context.chain_id\\n    }\\n\\n    pub fn version(self) -> Field {\\n        self.inputs.tx_context.version\\n    }\\n\\n    pub fn selector(self) -> FunctionSelector {\\n        self.inputs.call_context.function_selector\\n    }\\n\\n    pub fn get_args_hash(self) -> Field {\\n        self.args_hash\\n    }\\n\\n    pub fn push_note_hash(&mut self, note_hash: Field) {\\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\\n\\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\\n        debug_log_format(\\n            \\"Context.note_hashes, after pushing new note hash: {0}\\",\\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\\n        );\\n    }\\n\\n    pub fn push_nullifier(&mut self, nullifier: Field) {\\n        notify_created_nullifier(nullifier);\\n        self.nullifiers.push(\\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\\n        );\\n    }\\n\\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\\n        let nullifier_counter = self.next_counter();\\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\\n        self.nullifiers.push(\\n            Nullifier {\\n                value: nullifier,\\n                note_hash: nullified_note_hash,\\n                counter: nullifier_counter,\\n            },\\n        );\\n    }\\n\\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\\n    // included in).\\n    pub fn get_block_header(self) -> BlockHeader {\\n        self.historical_header\\n    }\\n\\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\\n    // of historical header.\\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\\n        get_block_header_at(block_number, self)\\n    }\\n\\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\\n        execution_cache::store(returns_hasher.fields);\\n        self.return_hash = returns_hasher.hash();\\n    }\\n\\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\\n        PrivateCircuitPublicInputs {\\n            call_context: self.inputs.call_context,\\n            args_hash: self.args_hash,\\n            returns_hash: self.return_hash,\\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\\n            is_fee_payer: self.is_fee_payer,\\n            max_block_number: self.max_block_number,\\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\\n            key_validation_requests_and_generators: self\\n                .key_validation_requests_and_generators\\n                .storage(),\\n            note_hashes: self.note_hashes.storage(),\\n            nullifiers: self.nullifiers.storage(),\\n            private_call_requests: self.private_call_requests.storage(),\\n            public_call_requests: self.public_call_requests.storage(),\\n            public_teardown_call_request: self.public_teardown_call_request,\\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\\n            end_side_effect_counter: self.side_effect_counter,\\n            private_logs: self.private_logs.storage(),\\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\\n            historical_header: self.historical_header,\\n            tx_context: self.inputs.tx_context,\\n        }\\n    }\\n\\n    pub fn set_as_fee_payer(&mut self) {\\n        dep::protocol_types::debug_log::debug_log_format(\\n            \\"Setting {0} as fee payer\\",\\n            [self.this_address().to_field()],\\n        );\\n        self.is_fee_payer = true;\\n    }\\n\\n    pub fn end_setup(&mut self) {\\n        // dep::protocol_types::debug_log::debug_log_format(\\n        //     \\"Ending setup at counter {0}\\",\\n        //     [self.side_effect_counter as Field]\\n        // );\\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\\n    }\\n\\n    // docs:start:max-block-number\\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\\n        // docs:end:max-block-number\\n        self.max_block_number =\\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\\n    }\\n\\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\\n        self.note_hash_read_requests.push(side_effect);\\n    }\\n\\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\\n        self.nullifier_read_requests.push(request);\\n    }\\n\\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\\n    }\\n\\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\\n    }\\n\\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\\n        let cached_request =\\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\\n\\n        if cached_request.pk_m.hash() == pk_m_hash {\\n            // We get a match so the cached request is the latest one\\n            cached_request.sk_app\\n        } else {\\n            // We didn\'t get a match meaning the cached result is stale\\n            // Typically we\'d validate keys by showing that they are the preimage of `pk_m_hash`, but that\'d require\\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\\n            // to `pk_m_hash`.\\n\\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\\n            /// for the correct public key has been received.\\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\\n            assert_eq(request.pk_m.hash(), pk_m_hash, \\"Obtained invalid key validation request\\");\\n\\n            self.key_validation_requests_and_generators.push(\\n                KeyValidationRequestAndGenerator {\\n                    request,\\n                    sk_app_generator: sk_generators[key_index],\\n                },\\n            );\\n            self.last_key_validation_requests[key_index] = Option::some(request);\\n            request.sk_app\\n        }\\n    }\\n\\n    // docs:start:context_message_portal\\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\\n        // docs:end:context_message_portal\\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\\n        self.l2_to_l1_msgs.push(message);\\n    }\\n\\n    // docs:start:context_consume_l1_to_l2_message\\n    // docs:start:consume_l1_to_l2_message\\n    pub fn consume_l1_to_l2_message(\\n        &mut self,\\n        content: Field,\\n        secret: Field,\\n        sender: EthAddress,\\n        leaf_index: Field,\\n    ) {\\n        // docs:end:context_consume_l1_to_l2_message\\n        let nullifier = process_l1_to_l2_message(\\n            self.historical_header.state.l1_to_l2_message_tree.root,\\n            self.this_address(),\\n            sender,\\n            self.chain_id(),\\n            self.version(),\\n            content,\\n            secret,\\n            leaf_index,\\n        );\\n\\n        // Push nullifier (and the \\"commitment\\" corresponding to this can be \\"empty\\")\\n        self.push_nullifier(nullifier)\\n    }\\n    // docs:end:consume_l1_to_l2_message\\n\\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn emit_raw_note_log(\\n        &mut self,\\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\\n        note_hash_counter: u32,\\n    ) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_private_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) -> ReturnsHash {\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        let start_side_effect_counter = self.side_effect_counter;\\n\\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\\n        /// to `returns_hash` and the side effects counter to increment from start to end.\\n        let (end_side_effect_counter, returns_hash) = unsafe {\\n            call_private_function_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                start_side_effect_counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        self.private_call_requests.push(\\n            PrivateCallRequest {\\n                call_context: CallContext {\\n                    msg_sender: self.this_address(),\\n                    contract_address,\\n                    function_selector,\\n                    is_static_call,\\n                },\\n                args_hash,\\n                returns_hash,\\n                start_side_effect_counter,\\n                end_side_effect_counter,\\n            },\\n        );\\n\\n        // TODO (fees) figure out why this crashes the prover and enable it\\n        // we need this in order to pay fees inside child call contexts\\n        // assert(\\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\\n        //     | (item.public_inputs.min_revertible_side_effect_counter\\n        //         > self.min_revertible_side_effect_counter)\\n        // );\\n        // if item.public_inputs.min_revertible_side_effect_counter\\n        //     > self.min_revertible_side_effect_counter {\\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\\n        // }\\n        self.side_effect_counter = end_side_effect_counter + 1;\\n        ReturnsHash::new(returns_hash)\\n    }\\n\\n    pub fn call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_public_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            enqueue_public_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        // Public calls are rerouted through the dispatch function.\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        let call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n\\n        self.public_call_requests.push(Counted::new(call_request, counter));\\n    }\\n\\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.set_public_teardown_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn set_public_teardown_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            set_public_teardown_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        self.public_teardown_call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n    }\\n\\n    fn next_counter(&mut self) -> u32 {\\n        let counter = self.side_effect_counter;\\n        self.side_effect_counter += 1;\\n        counter\\n    }\\n}\\n\\nimpl Empty for PrivateContext {\\n    fn empty() -> Self {\\n        PrivateContext {\\n            inputs: PrivateContextInputs::empty(),\\n            side_effect_counter: 0 as u32,\\n            min_revertible_side_effect_counter: 0 as u32,\\n            is_fee_payer: false,\\n            args_hash: 0,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            historical_header: BlockHeader::empty(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n}\\n"},"81":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\\nuse crate::hash::{\\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\\n};\\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\\n\\npub struct PublicContext {\\n    pub args_hash: Option<Field>,\\n    pub compute_args_hash: fn() -> Field,\\n}\\n\\nimpl PublicContext {\\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\\n        PublicContext { args_hash: Option::none(), compute_args_hash }\\n    }\\n\\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\\n    where\\n        T: Serialize<N>,\\n    {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\\n    }\\n\\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\\n    }\\n\\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\\n    }\\n\\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\\n    }\\n\\n    pub fn consume_l1_to_l2_message(\\n        &mut self,\\n        content: Field,\\n        secret: Field,\\n        sender: EthAddress,\\n        leaf_index: Field,\\n    ) {\\n        let secret_hash = compute_secret_hash(secret);\\n        let message_hash = compute_l1_to_l2_message_hash(\\n            sender,\\n            self.chain_id(),\\n            /*recipient=*/\\n            self.this_address(),\\n            self.version(),\\n            content,\\n            secret_hash,\\n            leaf_index,\\n        );\\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\\n\\n        assert(\\n            !self.nullifier_exists(nullifier, self.this_address()),\\n            \\"L1-to-L2 message is already nullified\\",\\n        );\\n        assert(\\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\\n            \\"Tried to consume nonexistent L1-to-L2 message\\",\\n        );\\n\\n        self.push_nullifier(nullifier);\\n    }\\n\\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { send_l2_to_l1_msg(recipient, content) };\\n    }\\n\\n    pub unconstrained fn call_public_function(\\n        _self: &mut Self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field],\\n        gas_opts: GasOpts,\\n    ) -> [Field] {\\n        let args = args.push_front(function_selector.to_field());\\n        let success = call(gas_for_call(gas_opts), contract_address, args);\\n\\n        let result_data = returndata_copy(0, returndata_size());\\n        if !success {\\n            // Rethrow the revert data.\\n            avm_revert(result_data);\\n        }\\n        result_data\\n    }\\n\\n    pub unconstrained fn static_call_public_function(\\n        _self: &mut Self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field],\\n        gas_opts: GasOpts,\\n    ) -> [Field] {\\n        let args = args.push_front(function_selector.to_field());\\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\\n\\n        let result_data = returndata_copy(0, returndata_size());\\n        if !success {\\n            // Rethrow the revert data.\\n            avm_revert(result_data);\\n        }\\n        result_data\\n    }\\n\\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { emit_note_hash(note_hash) };\\n    }\\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { emit_nullifier(nullifier) };\\n    }\\n\\n    pub fn this_address(_self: Self) -> AztecAddress {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            address()\\n        }\\n    }\\n    pub fn msg_sender(_self: Self) -> AztecAddress {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            sender()\\n        }\\n    }\\n    pub fn selector(_self: Self) -> FunctionSelector {\\n        // The selector is the first element of the calldata when calling a public function through dispatch.\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\\n        FunctionSelector::from_field(raw_selector[0])\\n    }\\n    pub fn get_args_hash(mut self) -> Field {\\n        if !self.args_hash.is_some() {\\n            self.args_hash = Option::some((self.compute_args_hash)());\\n        }\\n\\n        self.args_hash.unwrap_unchecked()\\n    }\\n    pub fn transaction_fee(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            transaction_fee()\\n        }\\n    }\\n\\n    pub fn chain_id(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            chain_id()\\n        }\\n    }\\n    pub fn version(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            version()\\n        }\\n    }\\n    pub fn block_number(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            block_number()\\n        }\\n    }\\n    pub fn timestamp(_self: Self) -> u64 {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            timestamp()\\n        }\\n    }\\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            fee_per_l2_gas()\\n        }\\n    }\\n    pub fn fee_per_da_gas(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            fee_per_da_gas()\\n        }\\n    }\\n\\n    pub fn l2_gas_left(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            l2_gas_left()\\n        }\\n    }\\n    pub fn da_gas_left(_self: Self) -> Field {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe {\\n            da_gas_left()\\n        }\\n    }\\n    pub fn is_static_call(_self: Self) -> bool {\\n        /// Safety: AVM opcodes are constrained by the AVM itself\\n        unsafe { is_static_call() } == 1\\n    }\\n\\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\\n        let mut out = [0; N];\\n        for i in 0..N {\\n            /// Safety: AVM opcodes are constrained by the AVM itself\\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\\n        }\\n        out\\n    }\\n\\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\\n    where\\n        T: Packable<N>,\\n    {\\n        T::unpack(self.raw_storage_read(storage_slot))\\n    }\\n\\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\\n        for i in 0..N {\\n            /// Safety: AVM opcodes are constrained by the AVM itself\\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\\n        }\\n    }\\n\\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\\n    where\\n        T: Packable<N>,\\n    {\\n        self.raw_storage_write(storage_slot, value.pack());\\n    }\\n}\\n\\n// Helper functions\\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\\n    // It\'s ok to use the max possible gas here, because the gas will be\\n    // capped by the gas left in the (STATIC)CALL instruction.\\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\\n}\\n\\n// Unconstrained opcode wrappers (do not use directly).\\nunconstrained fn address() -> AztecAddress {\\n    address_opcode()\\n}\\nunconstrained fn sender() -> AztecAddress {\\n    sender_opcode()\\n}\\nunconstrained fn transaction_fee() -> Field {\\n    transaction_fee_opcode()\\n}\\nunconstrained fn chain_id() -> Field {\\n    chain_id_opcode()\\n}\\nunconstrained fn version() -> Field {\\n    version_opcode()\\n}\\nunconstrained fn block_number() -> Field {\\n    block_number_opcode()\\n}\\nunconstrained fn timestamp() -> u64 {\\n    timestamp_opcode()\\n}\\nunconstrained fn fee_per_l2_gas() -> Field {\\n    fee_per_l2_gas_opcode()\\n}\\nunconstrained fn fee_per_da_gas() -> Field {\\n    fee_per_da_gas_opcode()\\n}\\nunconstrained fn l2_gas_left() -> Field {\\n    l2_gas_left_opcode()\\n}\\nunconstrained fn da_gas_left() -> Field {\\n    da_gas_left_opcode()\\n}\\nunconstrained fn is_static_call() -> Field {\\n    is_static_call_opcode()\\n}\\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\\n    note_hash_exists_opcode(note_hash, leaf_index)\\n}\\nunconstrained fn emit_note_hash(note_hash: Field) {\\n    emit_note_hash_opcode(note_hash)\\n}\\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\\n    nullifier_exists_opcode(nullifier, address)\\n}\\nunconstrained fn emit_nullifier(nullifier: Field) {\\n    emit_nullifier_opcode(nullifier)\\n}\\nunconstrained fn emit_public_log(message: [Field]) {\\n    emit_public_log_opcode(message)\\n}\\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\\n}\\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\\n    send_l2_to_l1_msg_opcode(recipient, content)\\n}\\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\\n    call_opcode(gas, address, args)\\n}\\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\\n    call_static_opcode(gas, address, args)\\n}\\n\\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\\n    calldata_copy_opcode(cdoffset, copy_size)\\n}\\n\\nunconstrained fn returndata_size() -> u32 {\\n    returndata_size_opcode()\\n}\\n\\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\\n    returndata_copy_opcode(rdoffset, copy_size)\\n}\\n\\npub unconstrained fn avm_return(returndata: [Field]) {\\n    return_opcode(returndata)\\n}\\n\\n// This opcode reverts using the exact data given. In general it should only be used\\n// to do rethrows, where the revert data is the same as the original revert data.\\n// For normal reverts, use Noir\'s `assert` which, on top of reverting, will also add\\n// an error selector to the revert data.\\nunconstrained fn avm_revert(revertdata: [Field]) {\\n    revert_opcode(revertdata)\\n}\\n\\nunconstrained fn storage_read(storage_slot: Field) -> Field {\\n    storage_read_opcode(storage_slot)\\n}\\n\\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\\n    storage_write_opcode(storage_slot, value);\\n}\\n\\nimpl Empty for PublicContext {\\n    fn empty() -> Self {\\n        PublicContext::new(|| 0)\\n    }\\n}\\n\\n// AVM oracles (opcodes) follow, do not use directly.\\n#[oracle(avmOpcodeAddress)]\\nunconstrained fn address_opcode() -> AztecAddress {}\\n\\n#[oracle(avmOpcodeSender)]\\nunconstrained fn sender_opcode() -> AztecAddress {}\\n\\n#[oracle(avmOpcodeTransactionFee)]\\nunconstrained fn transaction_fee_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeChainId)]\\nunconstrained fn chain_id_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeVersion)]\\nunconstrained fn version_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeBlockNumber)]\\nunconstrained fn block_number_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeTimestamp)]\\nunconstrained fn timestamp_opcode() -> u64 {}\\n\\n#[oracle(avmOpcodeFeePerL2Gas)]\\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeFeePerDaGas)]\\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeL2GasLeft)]\\nunconstrained fn l2_gas_left_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeDaGasLeft)]\\nunconstrained fn da_gas_left_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeIsStaticCall)]\\nunconstrained fn is_static_call_opcode() -> Field {}\\n\\n#[oracle(avmOpcodeNoteHashExists)]\\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\\n\\n#[oracle(avmOpcodeEmitNoteHash)]\\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\\n\\n#[oracle(avmOpcodeNullifierExists)]\\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\\n\\n#[oracle(avmOpcodeEmitNullifier)]\\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\\n\\n// TODO(#11124): rename unencrypted to public in avm\\n#[oracle(avmOpcodeEmitUnencryptedLog)]\\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\\n\\n#[oracle(avmOpcodeL1ToL2MsgExists)]\\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\\n\\n#[oracle(avmOpcodeSendL2ToL1Msg)]\\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\\n\\n#[oracle(avmOpcodeCalldataCopy)]\\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\\n\\n#[oracle(avmOpcodeReturndataSize)]\\nunconstrained fn returndata_size_opcode() -> u32 {}\\n\\n#[oracle(avmOpcodeReturndataCopy)]\\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\\n\\n#[oracle(avmOpcodeReturn)]\\nunconstrained fn return_opcode(returndata: [Field]) {}\\n\\n// This opcode reverts using the exact data given. In general it should only be used\\n// to do rethrows, where the revert data is the same as the original revert data.\\n// For normal reverts, use Noir\'s `assert` which, on top of reverting, will also add\\n// an error selector to the revert data.\\n#[oracle(avmOpcodeRevert)]\\nunconstrained fn revert_opcode(revertdata: [Field]) {}\\n\\n#[oracle(avmOpcodeCall)]\\nunconstrained fn call_opcode(\\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\\n    address: AztecAddress,\\n    args: [Field],\\n) -> bool {}\\n\\n#[oracle(avmOpcodeStaticCall)]\\nunconstrained fn call_static_opcode(\\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\\n    address: AztecAddress,\\n    args: [Field],\\n) -> bool {}\\n\\n#[oracle(avmOpcodeStorageRead)]\\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\\n\\n#[oracle(avmOpcodeStorageWrite)]\\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\\n"},"96":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\\nuse dep::protocol_types::{\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\\n        GENERATOR_INDEX__SECRET_HASH,\\n    },\\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\\n    point::Point,\\n    traits::Hash,\\n};\\n\\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\\n\\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\\n}\\n\\npub fn compute_secret_hash(secret: Field) -> Field {\\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\\n}\\n\\npub fn compute_l1_to_l2_message_hash(\\n    sender: EthAddress,\\n    chain_id: Field,\\n    recipient: AztecAddress,\\n    version: Field,\\n    content: Field,\\n    secret_hash: Field,\\n    leaf_index: Field,\\n) -> Field {\\n    let mut hash_bytes = [0 as u8; 224];\\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\\n    let version_bytes: [u8; 32] = version.to_be_bytes();\\n    let content_bytes: [u8; 32] = content.to_be_bytes();\\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\\n\\n    for i in 0..32 {\\n        hash_bytes[i] = sender_bytes[i];\\n        hash_bytes[i + 32] = chain_id_bytes[i];\\n        hash_bytes[i + 64] = recipient_bytes[i];\\n        hash_bytes[i + 96] = version_bytes[i];\\n        hash_bytes[i + 128] = content_bytes[i];\\n        hash_bytes[i + 160] = secret_hash_bytes[i];\\n        hash_bytes[i + 192] = leaf_index_bytes[i];\\n    }\\n\\n    sha256_to_field(hash_bytes)\\n}\\n\\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\\n}\\n\\npub struct ArgsHasher {\\n    pub fields: [Field],\\n}\\n\\nimpl Hash for ArgsHasher {\\n    fn hash(self) -> Field {\\n        hash_args(self.fields)\\n    }\\n}\\n\\nimpl ArgsHasher {\\n    pub fn new() -> Self {\\n        Self { fields: [] }\\n    }\\n\\n    pub fn add(&mut self, field: Field) {\\n        self.fields = self.fields.push_back(field);\\n    }\\n\\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\\n        for i in 0..N {\\n            self.fields = self.fields.push_back(fields[i]);\\n        }\\n    }\\n}\\n\\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\npub fn hash_args(args: [Field]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_var_args_hash() {\\n    let mut input = ArgsHasher::new();\\n    for i in 0..100 {\\n        input.add(i as Field);\\n    }\\n    let hash = input.hash();\\n    dep::std::println(hash);\\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\\n}\\n"},"103":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\\n};\\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\\n\\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\\n\\ntrait PublicStorageHistoricalRead {\\n    fn public_storage_historical_read(\\n        header: BlockHeader,\\n        storage_slot: Field,\\n        contract_address: AztecAddress,\\n    ) -> Field;\\n}\\n\\nimpl PublicStorageHistoricalRead for BlockHeader {\\n    fn public_storage_historical_read(\\n        self,\\n        storage_slot: Field,\\n        contract_address: AztecAddress,\\n    ) -> Field {\\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\\n        let public_data_tree_index = poseidon2_hash_with_separator(\\n            [contract_address.to_field(), storage_slot],\\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\\n        );\\n\\n        // 2) Get the membership witness for the tree index.\\n        /// Safety: The witness is only used as a \\"magical value\\" that makes the proof below pass. Hence it\'s safe.\\n        let witness = unsafe {\\n            get_public_data_witness(\\n                self.global_variables.block_number as u32,\\n                public_data_tree_index,\\n            )\\n        };\\n\\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\\n        // (slot, next index and next slot).\\n        assert_eq(\\n            self.state.partial.public_data_tree.root,\\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\\n            \\"Proving public value inclusion failed\\",\\n        );\\n\\n        // 4) Now that we know the preimage is valid, we determine the value that\'s represented by this tree entry. Here\\n        // we have two scenarios:\\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\\n        // 2. The entry was never initialized, and the value is default zero (the default)\\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\\n        let preimage = witness.leaf_preimage;\\n\\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\\n\\n        let value = if is_in_range {\\n            0\\n        } else {\\n            assert_eq(\\n                preimage.slot,\\n                public_data_tree_index,\\n                \\"Public data tree index doesn\'t match witness\\",\\n            );\\n            preimage.value\\n        };\\n\\n        value\\n    }\\n}\\n"},"120":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/messaging.nr","source":"use crate::{\\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\\n};\\n\\nuse dep::protocol_types::{\\n    address::{AztecAddress, EthAddress},\\n    merkle_tree::root::root_from_sibling_path,\\n};\\n\\npub fn process_l1_to_l2_message(\\n    l1_to_l2_root: Field,\\n    contract_address: AztecAddress,\\n    portal_contract_address: EthAddress,\\n    chain_id: Field,\\n    version: Field,\\n    content: Field,\\n    secret: Field,\\n    leaf_index: Field,\\n) -> Field {\\n    let secret_hash = compute_secret_hash(secret);\\n    let message_hash = compute_l1_to_l2_message_hash(\\n        portal_contract_address,\\n        chain_id,\\n        contract_address,\\n        version,\\n        content,\\n        secret_hash,\\n        leaf_index,\\n    );\\n\\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\\n    // get from an oracle.\\n    /// Safety: The witness is only used as a \\"magical value\\" that makes the merkle proof below pass. Hence it\'s safe.\\n    let (_leaf_index, sibling_path) =\\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\\n\\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\\n    assert_eq(root, l1_to_l2_root, \\"Message not in state\\");\\n\\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\\n}\\n"},"136":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\\n\\n#[oracle(enqueuePublicFunctionCall)]\\nunconstrained fn enqueue_public_function_call_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> Field {}\\n\\npub unconstrained fn enqueue_public_function_call_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> Field {\\n    enqueue_public_function_call_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        side_effect_counter,\\n        is_static_call,\\n    )\\n}\\n\\n#[oracle(setPublicTeardownFunctionCall)]\\nunconstrained fn set_public_teardown_function_call_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> Field {}\\n\\npub unconstrained fn set_public_teardown_function_call_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> Field {\\n    set_public_teardown_function_call_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        side_effect_counter,\\n        is_static_call,\\n    )\\n}\\n\\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\\n}\\n\\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\\n}\\n\\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\\n"},"138":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr","source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\\npub fn store(values: [Field]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\\n}\\n\\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\\n    let _ = store_in_execution_cache_oracle(values);\\n}\\n\\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\\n    load_from_execution_cache_oracle(hash)\\n}\\n\\n#[oracle(storeInExecutionCache)]\\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\\n\\n#[oracle(loadFromExecutionCache)]\\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\\n"},"140":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr","source":"use crate::utils::array;\\nuse dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\\n\\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\\n/// its existence.\\npub unconstrained fn get_l1_to_l2_membership_witness(\\n    contract_address: AztecAddress,\\n    message_hash: Field,\\n    secret: Field,\\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\\n    let returned_message =\\n        get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret);\\n    let leaf_index = returned_message[0];\\n    let sibling_path = array::subarray(returned_message, 1);\\n\\n    (leaf_index, sibling_path)\\n}\\n\\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\\n#[oracle(getL1ToL2MembershipWitness)]\\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\\n    _contract_address: AztecAddress,\\n    _message_hash: Field,\\n    _secret: Field,\\n) -> [Field; L1_TO_L2_MSG_TREE_HEIGHT + 1] {}\\n"},"143":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use crate::utils::array;\\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\\n\\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\\n\\npub struct PublicDataWitness {\\n    pub index: Field,\\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\\n}\\n\\n#[oracle(getPublicDataTreeWitness)]\\nunconstrained fn get_public_data_witness_oracle(\\n    _block_number: u32,\\n    _public_data_tree_index: Field,\\n) -> [Field; PUBLIC_DATA_WITNESS] {}\\n\\npub unconstrained fn get_public_data_witness(\\n    block_number: u32,\\n    public_data_tree_index: Field,\\n) -> PublicDataWitness {\\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\\n    PublicDataWitness {\\n        index: fields[0],\\n        leaf_preimage: PublicDataTreeLeafPreimage {\\n            slot: fields[1],\\n            value: fields[2],\\n            next_index: fields[3] as u32,\\n            next_slot: fields[4],\\n        },\\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\\n    }\\n}\\n"},"149":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\\n\\nuse dep::protocol_types::{\\n    address::AztecAddress,\\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\\n};\\n\\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\\npub fn notify_created_note<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        notify_created_note_oracle_wrapper(\\n            storage_slot,\\n            note_type_id,\\n            packed_note_content,\\n            note_hash,\\n            counter,\\n        )\\n    };\\n}\\n\\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\\n/// actual block.\\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\\n}\\n\\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\\npub fn notify_created_nullifier(nullifier: Field) {\\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\\n}\\n\\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_created_note_oracle(\\n        storage_slot,\\n        note_type_id,\\n        packed_note_content,\\n        note_hash,\\n        counter,\\n    );\\n}\\n\\n#[oracle(notifyCreatedNote)]\\nunconstrained fn notify_created_note_oracle<let N: u32>(\\n    _storage_slot: Field,\\n    _note_type_id: Field,\\n    _packed_note_content: [Field; N],\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_nullified_note_oracle_wrapper(\\n    nullifier: Field,\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\\n}\\n\\n#[oracle(notifyNullifiedNote)]\\nunconstrained fn notify_nullified_note_oracle(\\n    _nullifier: Field,\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\\n    let _ = notify_created_nullifier_oracle(nullifier);\\n}\\n\\n#[oracle(notifyCreatedNullifier)]\\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\\n\\n#[oracle(getNotes)]\\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\\n    _storage_slot: Field,\\n    _num_selects: u8,\\n    _select_by_indexes: [u8; N],\\n    _select_by_offsets: [u8; N],\\n    _select_by_lengths: [u8; N],\\n    _select_values: [Field; N],\\n    _select_comparators: [u8; N],\\n    _sort_by_indexes: [u8; N],\\n    _sort_by_offsets: [u8; N],\\n    _sort_by_lengths: [u8; N],\\n    _sort_order: [u8; N],\\n    _limit: u32,\\n    _offset: u32,\\n    _status: u8,\\n    _return_size: u32,\\n    _placeholder_fields: [Field; S],\\n) -> [Field; S] {}\\n\\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; N],\\n    select_by_offsets: [u8; N],\\n    select_by_lengths: [u8; N],\\n    select_values: [Field; N],\\n    select_comparators: [u8; N],\\n    sort_by_indexes: [u8; N],\\n    sort_by_offsets: [u8; N],\\n    sort_by_lengths: [u8; N],\\n    sort_order: [u8; N],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_fields: [Field; S],\\n) -> [Field; S] {\\n    let return_size = placeholder_fields.len() as u32;\\n    get_notes_oracle(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        return_size,\\n        placeholder_fields,\\n    )\\n}\\n\\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; M],\\n    select_by_offsets: [u8; M],\\n    select_by_lengths: [u8; M],\\n    select_values: [Field; M],\\n    select_comparators: [u8; M],\\n    sort_by_indexes: [u8; M],\\n    sort_by_offsets: [u8; M],\\n    sort_by_lengths: [u8; M],\\n    sort_order: [u8; M],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\\n) -> [Option<Note>; S]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    sync_notes_oracle_wrapper();\\n    let fields = get_notes_oracle_wrapper(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        placeholder_fields,\\n    );\\n    let num_notes = fields[0] as u32;\\n    let contract_address = AztecAddress::from_field(fields[1]);\\n    for i in 0..placeholder_opt_notes.len() {\\n        if i < num_notes {\\n            // lengths named as per typescript.\\n            let return_header_length: u32 = 2; // num_notes & contract_address.\\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\\n\\n            let nonce = fields[read_offset];\\n            let note_hash_counter = fields[read_offset + 1] as u32;\\n            let note_content = array::subarray(fields, read_offset + 2);\\n\\n            let mut note = Note::unpack_content(note_content);\\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\\n\\n            placeholder_opt_notes[i] = Option::some(note);\\n        };\\n    }\\n    placeholder_opt_notes\\n}\\n\\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\\n    check_nullifier_exists_oracle(inner_nullifier) == 1\\n}\\n\\n#[oracle(checkNullifierExists)]\\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\\n\\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\\n}\\n\\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\\n/// Includes the last known index used to send a note tagged with this secret.\\n/// For this to work, PXE must know the ivsk_m of the sender.\\n/// For the recipient\'s side, only the address is needed.\\npub unconstrained fn get_indexed_tagging_secret_as_sender(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) -> IndexedTaggingSecret {\\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\\n    IndexedTaggingSecret::deserialize(result)\\n}\\n\\n#[oracle(getIndexedTaggingSecretAsSender)]\\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\\n\\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\\n/// future notes get a different tag and can be discovered by the recipient.\\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\\n/// that are not found by the recipient.\\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\\n    }\\n}\\n\\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) {\\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\\n}\\n\\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) {}\\n\\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\\n/// for later querying via the `get_notes` oracle.\\npub fn sync_notes() {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        sync_notes_oracle_wrapper();\\n    }\\n}\\n\\nunconstrained fn sync_notes_oracle_wrapper() {\\n    sync_notes_oracle();\\n}\\n\\n#[oracle(syncNotes)]\\nunconstrained fn sync_notes_oracle() {}\\n"},"155":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\\n\\n// docs:start:map\\npub struct Map<K, V, Context> {\\n    context: Context,\\n    storage_slot: Field,\\n    state_var_constructor: fn(Context, Field) -> V,\\n}\\n// docs:end:map\\n\\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\\nwhere\\n    T: Packable<N>,\\n{\\n    fn get_storage_slot(self) -> Field {\\n        self.storage_slot\\n    }\\n}\\n\\nimpl<K, V, Context> Map<K, V, Context> {\\n    // docs:start:new\\n    pub fn new(\\n        context: Context,\\n        storage_slot: Field,\\n        state_var_constructor: fn(Context, Field) -> V,\\n    ) -> Self {\\n        assert(storage_slot != 0, \\"Storage slot 0 not allowed. Storage slots must start from 1.\\");\\n        Map { context, storage_slot, state_var_constructor }\\n    }\\n    // docs:end:new\\n\\n    // docs:start:at\\n    pub fn at(self, key: K) -> V\\n    where\\n        K: ToField,\\n    {\\n        // TODO(#1204): use a generator index for the storage slot\\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\\n\\n        let state_var_constructor = self.state_var_constructor;\\n        state_var_constructor(self.context, derived_storage_slot)\\n    }\\n    // docs:end:at\\n}\\n"},"162":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr","source":"use crate::{\\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\\n    history::public_storage::PublicStorageHistoricalRead,\\n    state_vars::storage::Storage,\\n};\\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\\n\\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\\n/// contexts.\\n// docs:start:public_immutable_struct\\npub struct PublicImmutable<T, Context> {\\n    context: Context,\\n    storage_slot: Field,\\n}\\n// docs:end:public_immutable_struct\\n\\nimpl<T, Context, let N: u32> Storage<N> for PublicImmutable<T, Context>\\nwhere\\n    T: Packable<N>,\\n{\\n    fn get_storage_slot(self) -> Field {\\n        self.storage_slot\\n    }\\n}\\n\\nimpl<T, Context> PublicImmutable<T, Context> {\\n    // docs:start:public_immutable_struct_new\\n    pub fn new(\\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\\n        context: Context,\\n        storage_slot: Field,\\n    ) -> Self {\\n        assert(storage_slot != 0, \\"Storage slot 0 not allowed. Storage slots must start from 1.\\");\\n        PublicImmutable { context, storage_slot }\\n    }\\n    // docs:end:public_immutable_struct_new\\n}\\n\\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\\nwhere\\n    T: Packable<T_PACKED_LEN>,\\n{\\n    // docs:start:public_immutable_struct_write\\n    pub fn initialize(self, value: T) {\\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\\n        let init_field: Field = self.context.storage_read(initialization_slot);\\n        assert(init_field == 0, \\"PublicImmutable already initialized\\");\\n\\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\\n        self.context.storage_write(initialization_slot, 0xdead);\\n        self.context.storage_write(self.storage_slot, value);\\n    }\\n    // docs:end:public_immutable_struct_write\\n\\n    // Note that we don\'t access the context, but we do call oracles that are only available in public\\n    // docs:start:public_immutable_struct_read\\n    pub fn read(self) -> T {\\n        self.context.storage_read(self.storage_slot)\\n    }\\n    // docs:end:public_immutable_struct_read\\n}\\n\\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\\nwhere\\n    T: Packable<T_PACKED_LEN>,\\n{\\n    pub unconstrained fn read(self) -> T {\\n        self.context.storage_read(self.storage_slot)\\n    }\\n}\\n\\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\\nwhere\\n    T: Packable<T_PACKED_LEN>,\\n{\\n    pub fn read(self) -> T {\\n        let header = self.context.get_block_header();\\n        let mut fields = [0; T_PACKED_LEN];\\n\\n        for i in 0..fields.len() {\\n            fields[i] = header.public_storage_historical_read(\\n                self.storage_slot + i as Field,\\n                (*self.context).this_address(),\\n            );\\n        }\\n        T::unpack(fields)\\n    }\\n}\\n"},"163":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\\nuse crate::state_vars::storage::Storage;\\nuse dep::protocol_types::traits::Packable;\\n\\n// docs:start:public_mutable_struct\\npub struct PublicMutable<T, Context> {\\n    context: Context,\\n    storage_slot: Field,\\n}\\n// docs:end:public_mutable_struct\\n\\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\\nwhere\\n    T: Packable<N>,\\n{\\n    fn get_storage_slot(self) -> Field {\\n        self.storage_slot\\n    }\\n}\\n\\nimpl<T, Context> PublicMutable<T, Context> {\\n    // docs:start:public_mutable_struct_new\\n    pub fn new(\\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\\n        context: Context,\\n        storage_slot: Field,\\n    ) -> Self {\\n        assert(storage_slot != 0, \\"Storage slot 0 not allowed. Storage slots must start from 1.\\");\\n        PublicMutable { context, storage_slot }\\n    }\\n    // docs:end:public_mutable_struct_new\\n}\\n\\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\\nwhere\\n    T: Packable<T_PACKED_LEN>,\\n{\\n    // docs:start:public_mutable_struct_read\\n    pub fn read(self) -> T {\\n        self.context.storage_read(self.storage_slot)\\n    }\\n    // docs:end:public_mutable_struct_read\\n\\n    // docs:start:public_mutable_struct_write\\n    pub fn write(self, value: T) {\\n        self.context.storage_write(self.storage_slot, value);\\n    }\\n    // docs:end:public_mutable_struct_write\\n}\\n\\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\\nwhere\\n    T: Packable<T_PACKED_LEN>,\\n{\\n    pub unconstrained fn read(self) -> T {\\n        self.context.storage_read(self.storage_slot)\\n    }\\n}\\n"},"183":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr","source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\\n/// of elements past `offset`.\\n///\\n/// Examples:\\n/// ```\\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\\n/// assert_eq(foo, [3, 4]);\\n///\\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can\'t return 5 elements since only 3 remain\\n/// ```\\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\\n    src: [T; SRC_LEN],\\n    offset: u32,\\n) -> [T; DST_LEN] {\\n    assert(offset + DST_LEN <= SRC_LEN, \\"DST_LEN too large for offset\\");\\n\\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\\n    for i in 0..DST_LEN {\\n        dst[i] = src[i + offset];\\n    }\\n\\n    dst\\n}\\n\\nmod test {\\n    use super::subarray;\\n\\n    #[test]\\n    unconstrained fn subarray_into_empty() {\\n        // In all of these cases we\'re setting DST_LEN to be 0, so we always get back an emtpy array.\\n        assert_eq(subarray::<Field, _, _>([], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\\n    }\\n\\n    #[test]\\n    unconstrained fn subarray_complete() {\\n        assert_eq(subarray::<Field, _, _>([], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\\n    }\\n\\n    #[test]\\n    unconstrained fn subarray_different_end_sizes() {\\n        // We implicitly select how many values to read in the size of the return array\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\\n    }\\n\\n    #[test(should_fail_with = \\"DST_LEN too large for offset\\")]\\n    unconstrained fn subarray_offset_too_large() {\\n        // With an offset of 1 we can only request up to 4 elements\\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\\n    }\\n\\n    #[test(should_fail)]\\n    unconstrained fn subarray_bad_return_value() {\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\\n    }\\n}\\n"},"250":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\\n    abis::function_selector::FunctionSelector,\\n    address::{\\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\\n    },\\n    constants::{\\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        MAX_FIELD_VALUE,\\n    },\\n    contract_class_id::ContractClassId,\\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\\n    merkle_tree::membership::MembershipWitness,\\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\\n};\\n\\n// We do below because `use crate::point::Point;` does not work\\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\n\\nuse crate::public_keys::AddressPoint;\\nuse ec::{pow, sqrt};\\nuse std::{\\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\\n    ops::Add,\\n};\\n\\n// Aztec address\\npub struct AztecAddress {\\n    pub inner: Field,\\n}\\n\\nimpl Eq for AztecAddress {\\n    fn eq(self, other: Self) -> bool {\\n        self.to_field() == other.to_field()\\n    }\\n}\\n\\nimpl Empty for AztecAddress {\\n    fn empty() -> Self {\\n        Self { inner: 0 }\\n    }\\n}\\n\\nimpl ToField for AztecAddress {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl FromField for AztecAddress {\\n    fn from_field(value: Field) -> AztecAddress {\\n        AztecAddress { inner: value }\\n    }\\n}\\n\\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        [self.to_field()]\\n    }\\n}\\n\\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        FromField::from_field(fields[0])\\n    }\\n}\\n\\n/// We implement the Packable trait for AztecAddress because it can be stored in contract\'s storage (and there\\n/// the implementation of Packable is required).\\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        self.serialize()\\n    }\\n\\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        Self::deserialize(fields)\\n    }\\n}\\n\\nimpl AztecAddress {\\n    pub fn zero() -> Self {\\n        Self { inner: 0 }\\n    }\\n\\n    pub fn to_address_point(self) -> AddressPoint {\\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\\n        // equation which defines our bn curve:\\n        // y^2 = x^3 - 17; x = address\\n        let x = self.inner;\\n        let y_squared = pow(x, 3) - 17;\\n\\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\\n        let mut y = sqrt(y_squared);\\n\\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\\n        // note: The field modulus is MAX_FIELD_VALUE + 1\\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\\n            y = (MAX_FIELD_VALUE + 1) - y;\\n        }\\n\\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\\n    }\\n\\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\\n        let public_keys_hash = public_keys.hash();\\n\\n        let pre_address = poseidon2_hash_with_separator(\\n            [public_keys_hash.to_field(), partial_address.to_field()],\\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        );\\n\\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\\n            public_keys.ivpk_m.to_point(),\\n        );\\n\\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\\n        AztecAddress::from_field(address_point.x)\\n    }\\n\\n    pub fn compute_from_private_function(\\n        function_selector: FunctionSelector,\\n        function_vk_hash: Field,\\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\\n        contract_class_artifact_hash: Field,\\n        contract_class_public_bytecode_commitment: Field,\\n        salted_initialization_hash: SaltedInitializationHash,\\n        public_keys: PublicKeys,\\n    ) -> Self {\\n        let private_functions_root = private_functions_root_from_siblings(\\n            function_selector,\\n            function_vk_hash,\\n            function_leaf_membership_witness.leaf_index,\\n            function_leaf_membership_witness.sibling_path,\\n        );\\n\\n        let contract_class_id = ContractClassId::compute(\\n            contract_class_artifact_hash,\\n            private_functions_root,\\n            contract_class_public_bytecode_commitment,\\n        );\\n\\n        // Compute contract address using the preimage which includes the class_id.\\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\\n            contract_class_id,\\n            salted_initialization_hash,\\n        );\\n\\n        AztecAddress::compute(public_keys, partial_address)\\n    }\\n\\n    pub fn is_zero(self) -> bool {\\n        self.inner == 0\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n\\n#[test]\\nfn compute_address_from_partial_and_pub_keys() {\\n    let public_keys = PublicKeys {\\n        npk_m: NpkM {\\n            inner: Point {\\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\\n                is_infinite: false,\\n            },\\n        },\\n        ivpk_m: IvpkM {\\n            inner: Point {\\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\\n                is_infinite: false,\\n            },\\n        },\\n        ovpk_m: OvpkM {\\n            inner: Point {\\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\\n                is_infinite: false,\\n            },\\n        },\\n        tpk_m: TpkM {\\n            inner: Point {\\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\\n                is_infinite: false,\\n            },\\n        },\\n    };\\n\\n    let partial_address = PartialAddress::from_field(\\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\\n    );\\n\\n    let address = AztecAddress::compute(public_keys, partial_address);\\n\\n    // The following value was generated by `derivation.test.ts`.\\n    // --\x3e Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\\n    let expected_computed_address_from_partial_and_pubkeys =\\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\\n}\\n\\n#[test]\\nfn compute_preaddress_from_partial_and_pub_keys() {\\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\\n    let expected_computed_preaddress_from_partial_and_pubkey =\\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\\n}\\n\\n#[test]\\nfn from_field_to_field() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(FromField::from_field(address.to_field()), address);\\n}\\n\\n#[test]\\nfn serde() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\\n}\\n"},"251":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\\n    constants::ETH_ADDRESS_LENGTH,\\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\\n};\\n\\npub struct EthAddress {\\n    inner: Field,\\n}\\n\\nimpl Eq for EthAddress {\\n    fn eq(self, other: Self) -> bool {\\n        self.to_field() == other.to_field()\\n    }\\n}\\n\\nimpl Empty for EthAddress {\\n    fn empty() -> Self {\\n        Self { inner: 0 }\\n    }\\n}\\n\\nimpl ToField for EthAddress {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\\n        [self.inner]\\n    }\\n}\\n\\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\\n        EthAddress::from_field(fields[0])\\n    }\\n}\\n\\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\\n        self.serialize()\\n    }\\n\\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\\n        Self::deserialize(fields)\\n    }\\n}\\n\\nimpl EthAddress {\\n    pub fn zero() -> Self {\\n        Self { inner: 0 }\\n    }\\n\\n    pub fn from_field(field: Field) -> Self {\\n        field.assert_max_bit_size::<160>();\\n        Self { inner: field }\\n    }\\n\\n    pub fn is_zero(self) -> bool {\\n        self.inner == 0\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n"},"265":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{\\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\\n    traits::{Empty, Hash},\\n};\\n\\npub struct PublicDataTreeLeafPreimage {\\n    pub slot: Field,\\n    pub value: Field,\\n    pub next_slot: Field,\\n    pub next_index: u32,\\n}\\n\\nimpl Empty for PublicDataTreeLeafPreimage {\\n    fn empty() -> Self {\\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\\n    }\\n}\\n\\nimpl Eq for PublicDataTreeLeafPreimage {\\n    fn eq(self, other: Self) -> bool {\\n        (self.slot == other.slot)\\n            & (self.value == other.value)\\n            & (self.next_slot == other.next_slot)\\n            & (self.next_index == other.next_index)\\n    }\\n}\\n\\nimpl Hash for PublicDataTreeLeafPreimage {\\n    fn hash(self) -> Field {\\n        if self.is_empty() {\\n            0\\n        } else {\\n            crate::hash::poseidon2_hash([\\n                self.slot,\\n                self.value,\\n                (self.next_index as Field),\\n                self.next_slot,\\n            ])\\n        }\\n    }\\n}\\n\\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\\n    fn get_key(self) -> Field {\\n        self.slot\\n    }\\n\\n    fn as_leaf(self) -> Field {\\n        self.hash()\\n    }\\n}\\n\\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\\n    fn get_next_key(self) -> Field {\\n        self.next_slot\\n    }\\n\\n    fn points_to_infinity(self) -> bool {\\n        (self.next_slot == 0) & (self.next_index == 0)\\n    }\\n\\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\\n    }\\n\\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\\n        Self {\\n            slot: self.slot,\\n            value: write.value,\\n            next_slot: self.next_slot,\\n            next_index: self.next_index,\\n        }\\n    }\\n\\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\\n        Self {\\n            slot: write.slot,\\n            value: write.value,\\n            next_slot: low_leaf.next_slot,\\n            next_index: low_leaf.next_index,\\n        }\\n    }\\n}\\n\\nimpl PublicDataTreeLeafPreimage {\\n    pub fn is_empty(self) -> bool {\\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\\n    }\\n}\\n"},"266":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\\n/// Example:\\n///   debug_log(\\"blah blah this is a debug string\\");\\npub fn debug_log<let N: u32>(msg: str<N>) {\\n    debug_log_format(msg, []);\\n}\\n\\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\\n/// Examples:\\n///   debug_log_format(\\"get_2(slot:{0}) =>\\\\n\\\\t0:{1}\\\\n\\\\t1:{2}\\", [storage_slot, note0_hash, note1_hash]);\\n///   debug_log_format(\\"whole array: {}\\", [e1, e2, e3, e4]);\\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { debug_log_oracle_wrapper(msg, args) };\\n}\\n\\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\\n    msg: str<M>,\\n    args: [Field; N],\\n) {\\n    debug_log_oracle(msg, args.as_slice());\\n}\\n\\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \\"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\\"`\\n#[oracle(debugLog)]\\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\\n"},"267":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\\n    abis::{\\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\\n        function_selector::FunctionSelector,\\n        log_hash::{LogHash, ScopedLogHash},\\n        note_hash::ScopedNoteHash,\\n        nullifier::ScopedNullifier,\\n        private_log::{PrivateLog, PrivateLogData},\\n        side_effect::{OrderedValue, scoped::Scoped},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\\n    },\\n    merkle_tree::root::root_from_sibling_path,\\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\\n    poseidon2::Poseidon2Sponge,\\n    traits::{FromField, Hash, is_empty, ToField},\\n    utils::field::field_from_bytes_32_trunc,\\n};\\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\\n\\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\\n    let sha256_hashed = sha256::digest(bytes_to_hash);\\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\\n\\n    hash_in_a_field\\n}\\n\\npub fn private_functions_root_from_siblings(\\n    selector: FunctionSelector,\\n    vk_hash: Field,\\n    function_leaf_index: Field,\\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\\n) -> Field {\\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\\n    let function_leaf = function_leaf_preimage.hash();\\n    root_from_sibling_path(\\n        function_leaf,\\n        function_leaf_index,\\n        function_leaf_sibling_path,\\n    )\\n}\\n\\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\\n    // unique).\\n    poseidon2_hash_with_separator(\\n        [first_nullifier_in_tx, note_index_in_tx as Field],\\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\\n    )\\n}\\n\\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\\n    let inputs = [nonce, siloed_note_hash];\\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\\n}\\n\\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), note_hash],\\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\\n    )\\n}\\n\\n/// Computes unique note hashes from siloed note hashes\\npub fn compute_unique_siloed_note_hash(\\n    siloed_note_hash: Field,\\n    first_nullifier: Field,\\n    note_index_in_tx: u32,\\n) -> Field {\\n    if siloed_note_hash == 0 {\\n        0\\n    } else {\\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\\n        compute_unique_note_hash(nonce, siloed_note_hash)\\n    }\\n}\\n\\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\\n    if note_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\\n    }\\n}\\n\\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), nullifier],\\n        GENERATOR_INDEX__OUTER_NULLIFIER,\\n    )\\n}\\n\\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\\n    if nullifier.contract_address.is_zero() {\\n        nullifier.value() // Return value instead of 0 because the first nullifier\'s contract address is zero.\\n    } else {\\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\\n    }\\n}\\n\\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\\n    poseidon2_hash([contract_address.to_field(), field])\\n}\\n\\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\\n    if private_log.contract_address.is_zero() {\\n        private_log.inner.log\\n    } else {\\n        let mut fields = private_log.inner.log.fields;\\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\\n        PrivateLog { fields }\\n    }\\n}\\n\\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\\n    accumulate_sha256([address.to_field(), log_hash])\\n}\\n\\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\\n    if log_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\\n    }\\n}\\n\\npub fn merkle_hash(left: Field, right: Field) -> Field {\\n    poseidon2_hash([left, right])\\n}\\n\\npub fn compute_l2_to_l1_hash(\\n    contract_address: AztecAddress,\\n    recipient: EthAddress,\\n    content: Field,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    let mut bytes: [u8; 160] = std::mem::zeroed();\\n\\n    let inputs =\\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\\n    for i in 0..5 {\\n        // TODO are bytes be in fr.to_buffer() ?\\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\\n        for j in 0..32 {\\n            bytes[32 * i + j] = item_bytes[j];\\n        }\\n    }\\n\\n    sha256_to_field(bytes)\\n}\\n\\npub fn silo_l2_to_l1_message(\\n    msg: ScopedL2ToL1Message,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    if msg.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_l2_to_l1_hash(\\n            msg.contract_address,\\n            msg.message.recipient,\\n            msg.message.content,\\n            rollup_version_id,\\n            chain_id,\\n        )\\n    }\\n}\\n\\n// Computes sha256 hash of 2 input hashes.\\n//\\n// NB: This method now takes in two 31 byte fields - it assumes that any input\\n// is the result of a sha_to_field hash and => is truncated\\n//\\n// TODO(Jan and David): This is used for the encrypted_log hashes.\\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\\n//\\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\\n    // This is a note about the cpp code, since it takes an array of Fields\\n    // instead of a U128.\\n    // 4 Field elements when converted to bytes will usually\\n    // occupy 4 * 32 = 128 bytes.\\n    // However, this function is making the assumption that each Field\\n    // only occupies 128 bits.\\n    //\\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\\n    // Concatentate two fields into 32x2 = 64 bytes\\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\\n    let mut hash_input_flattened = [0; 64];\\n    for offset in 0..input.len() {\\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n\\n    sha256_to_field(hash_input_flattened)\\n}\\n\\n// Computes the final logs hash for a tx.\\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\\n    let mut hash_input_flattened = [0; N * 32];\\n    for offset in 0..N {\\n        // TODO: This is not checking that the decomposition is smaller than P\\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n    // Ideally we would push to a slice then hash, but there is no sha_slice\\n    // Hardcode to 256 bytes for now\\n    let mut hash = sha256_to_field(hash_input_flattened);\\n    // Not having a 0 value hash for empty logs causes issues with empty txs\\n    // used for padding. Returning early is currently unsupported.\\n    // We always provide sorted logs here, so 0 being empty means all are empty.\\n    if is_empty(logs[0]) {\\n        hash = 0;\\n    }\\n    hash\\n}\\n\\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\\n    crate::hash::poseidon2_hash(key)\\n}\\n\\n#[inline_always]\\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\\n}\\n\\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\\n    poseidon2_hash(inputs_with_separator)\\n}\\n\\n// Performs a fixed length hash with a subarray of the given input.\\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\\n// Using stdlib poseidon, this will always absorb an extra 1 as a \'variable\' hash, and not match spongeblob.squeeze()\\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\\n#[no_predicates]\\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\\n    sponge.squeeze()\\n}\\n\\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\\n// and absorbing in chunks of 3 below.\\n#[no_predicates]\\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n    // fixed-length and variable-length hashes do not collide)\\n    if in_len != N {\\n        sponge.absorb(1);\\n    }\\n    sponge.squeeze()\\n}\\n\\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\\n// The below code forces the compiler to:\\n//  - absorb normally up to 2 times to set cache_size to 1\\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\\n//  - absorb normally up to 2 times to add any remaining values to the hash\\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\\n\\n#[no_predicates]\\nfn poseidon2_absorb_chunks<let N: u32>(\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n) -> Poseidon2Sponge {\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\\n    // since we cannot isolate computation branches. The below is just to avoid that.\\n    let shift = if in_len == 0 { 0 } else { 1 };\\n    if in_len != 0 {\\n        // cache_size = 0, init absorb\\n        sponge.cache[0] = input[0];\\n        sponge.cache_size = 1;\\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\\n        // max_remainder = (N - 1) % 3;\\n        // max_chunks = (N - 1 - max_remainder) / 3;\\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            variable,\\n            shift,\\n        );\\n    }\\n    sponge\\n}\\n\\n// NB: If it\'s not required to check that the non-absorbed elts of \'input\' are 0s, set skip_0_check=true\\n#[no_predicates]\\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    skip_0_check: bool,\\n) -> Poseidon2Sponge {\\n    let mut sponge = in_sponge;\\n    // \'shift\' is to account for already added inputs\\n    let mut shift = 0;\\n    // \'stop\' is to avoid an underflow when inputting in_len = 0\\n    let mut stop = false;\\n    for i in 0..3 {\\n        if shift == in_len {\\n            stop = true;\\n        }\\n        if (sponge.cache_size != 1) & (!stop) {\\n            sponge.absorb(input[i]);\\n            shift += 1;\\n        }\\n    }\\n    sponge = if stop {\\n        sponge\\n    } else {\\n        // max_chunks = (N - (N % 3)) / 3;\\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            skip_0_check,\\n            shift,\\n        )\\n    };\\n    sponge\\n}\\n\\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\\n// shift - the num of elts already absorbed to ensure the sponge\'s cache_size = 1\\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\\n// NB: The 0 checks (\'Found non-zero field...\') are messy, but having a separate loop over N to check\\n// for 0s costs 3N gates. Current approach is approx 2N gates.\\n#[no_predicates]\\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n    shift: u32,\\n) -> Poseidon2Sponge {\\n    assert(in_len <= N, \\"Given in_len to absorb is larger than the input array len\\");\\n    // When we have an existing sponge, we may have a shift of 0, and the final \'k+2\' below = N\\n    // The below avoids an overflow\\n    let skip_last = 3 * M == N;\\n    // Writing in_sponge: &mut does not compile\\n    let mut sponge = in_sponge;\\n    let mut should_add = true;\\n    // The num of things left over after absorbing in 3s\\n    let remainder = (in_len - shift) % 3;\\n    // The num of chunks of 3 to absorb (maximum M)\\n    let chunks = (in_len - shift - remainder) / 3;\\n    for i in 0..M {\\n        // Now we loop through cache size = 1 -> 3\\n        should_add &= i != chunks;\\n        // This is the index at the start of the chunk (for readability)\\n        let k = 3 * i + shift;\\n        if should_add {\\n            // cache_size = 1, 2 => just assign\\n            sponge.cache[1] = input[k];\\n            sponge.cache[2] = input[k + 1];\\n            // cache_size = 3 => duplex + perm\\n            for j in 0..3 {\\n                sponge.state[j] += sponge.cache[j];\\n            }\\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\\n            sponge.cache[0] = input[k + 2];\\n            // cache_size is now 1 again, repeat loop\\n        } else if (!variable) & (i != chunks) {\\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\\n            // NB: we don\'t check at i == chunks, because that chunk contains elts to be absorbed or checked below\\n            let last_0 = if (i == M - 1) & (skip_last) {\\n                0\\n            } else {\\n                input[k + 2]\\n            };\\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\\n            assert(all_0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    // we have \'remainder\' num of items left to absorb\\n    should_add = true;\\n    // below is to avoid overflows (i.e. if inlen is close to N)\\n    let mut should_check = !variable;\\n    for i in 0..3 {\\n        should_add &= i != remainder;\\n        should_check &= in_len - remainder + i != N;\\n        if should_add {\\n            // we want to absorb the final \'remainder\' items\\n            sponge.absorb(input[in_len - remainder + i]);\\n        } else if should_check {\\n            assert(input[in_len - remainder + i] == 0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    sponge\\n}\\n\\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let in_len = inputs.len() + 1;\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    sponge.absorb(separator.to_field());\\n\\n    for i in 0..inputs.len() {\\n        sponge.absorb(inputs[i]);\\n    }\\n\\n    sponge.squeeze()\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\\n    let mut fields = [0; (N + 30) / 31];\\n    let mut field_index = 0;\\n    let mut current_field = [0; 31];\\n    for i in 0..inputs.len() {\\n        let index = i % 31;\\n        current_field[index] = inputs[i];\\n        if index == 30 {\\n            fields[field_index] = field_from_bytes(current_field, false);\\n            current_field = [0; 31];\\n            field_index += 1;\\n        }\\n    }\\n    if field_index != fields.len() {\\n        fields[field_index] = field_from_bytes(current_field, false);\\n    }\\n    poseidon2_hash(fields)\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\\n    assert(sub_chunk_hash == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_variable() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\\n    assert(variable_chunk_hash == variable_len_hash);\\n}\\n\\n#[test]\\nfn existing_sponge_poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    // absorb 250 of the 501 things\\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\\n    assert(final_sponge.squeeze() == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_empty_inputs() {\\n    let in_len = 0;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    let mut first_sponge =\\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\\n}\\n\\n#[test]\\nfn smoke_sha256_to_field() {\\n    let full_buffer = [\\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\\n    ];\\n    let result = sha256_to_field(full_buffer);\\n\\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\\n\\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\\n    let result_bytes = sha256::digest(full_buffer);\\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\\n    assert(truncated_field == result);\\n    let mod_res = result + (result_bytes[31] as Field);\\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\\n}\\n\\n#[test]\\nfn compute_l2_l1_hash() {\\n    // All zeroes\\n    let hash_result =\\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\\n\\n    // Non-zero case\\n    let hash_result = compute_l2_to_l1_hash(\\n        AztecAddress::from_field(1),\\n        EthAddress::from_field(3),\\n        5,\\n        2,\\n        4,\\n    );\\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\\n}\\n\\n#[test]\\nfn silo_l2_to_l1_message_matches_typescript() {\\n    let version = 4;\\n    let chainId = 5;\\n\\n    let hash = silo_l2_to_l1_message(\\n        ScopedL2ToL1Message {\\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\\n            contract_address: AztecAddress::from_field(3),\\n        },\\n        version,\\n        chainId,\\n    );\\n\\n    // The following value was generated by `l2_to_l1_message.test.ts`\\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\\n\\n    assert_eq(hash, hash_from_typescript);\\n}\\n"},"277":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\\n\\n// Calculate the Merkle tree root from the sibling path and leaf.\\n//\\n// The leaf is hashed with its sibling, and then the result is hashed\\n// with the next sibling etc in the path. The last hash is the root.\\n//\\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\\n// TODO a bit simpler in Noir to just have a bit array.\\n// TODO: I\'d generally like to avoid u256 for algorithms like\\n// this because it means we never even need to consider cases where\\n// the index is greater than p.\\npub fn root_from_sibling_path<let N: u32>(\\n    leaf: Field,\\n    leaf_index: Field,\\n    sibling_path: [Field; N],\\n) -> Field {\\n    let mut node = leaf;\\n    let indices: [u1; N] = leaf_index.to_le_bits();\\n\\n    for i in 0..N {\\n        let (hash_left, hash_right) = if indices[i] == 1 {\\n            (sibling_path[i], node)\\n        } else {\\n            (node, sibling_path[i])\\n        };\\n        node = merkle_hash(hash_left, hash_right);\\n    }\\n    node\\n}\\n\\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\\n    MerkleTree::new(leaves).get_root()\\n}\\n\\n// These values are precomputed and we run tests to ensure that they\\n// are correct. The values themselves were computed from the cpp code.\\n//\\n// Would be good if we could use width since the compute_subtree\\n// algorithm uses depth.\\npub fn calculate_empty_tree_root(depth: u32) -> Field {\\n    if depth == 0 {\\n        0\\n    } else if depth == 1 {\\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\\n    } else if depth == 2 {\\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\\n    } else if depth == 3 {\\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\\n    } else if depth == 4 {\\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\\n    } else if depth == 5 {\\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\\n    } else if depth == 6 {\\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\\n    } else if depth == 7 {\\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\\n    } else if depth == 8 {\\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\\n    } else if depth == 9 {\\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\\n    } else if depth == 10 {\\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\\n    } else {\\n        panic(f\\"depth should be between 0 and 10\\")\\n    }\\n}\\n\\n#[test]\\nfn test_merkle_root_interop_test() {\\n    // This is a test to ensure that we match the cpp implementation.\\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\\n    // to find the test that matches this.\\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\\n\\n    let empty_root = calculate_subtree_root([0; 16]);\\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\\n}\\n\\n#[test]\\nfn test_empty_subroot() {\\n    assert(calculate_empty_tree_root(0) == 0);\\n\\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\\n\\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\\n\\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\\n\\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\\n\\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\\n\\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\\n\\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\\n\\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\\n\\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\\n\\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\\n}\\n"},"284":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr","source":"use crate::constants::TWO_POW_64;\\n\\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\\n// has a private absorb() method (it\'s also designed to just be a hasher)\\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2Sponge {\\n    pub cache: [Field; 3],\\n    pub state: [Field; 4],\\n    pub cache_size: u32,\\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2Sponge {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\\n        let mut result =\\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    pub fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    pub fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let iv: Field = (in_len as Field) * TWO_POW_64;\\n        let mut sponge = Poseidon2Sponge::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n"},"296":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\\n\\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\\nwhere\\n    K: ToField,\\n{\\n    poseidon2_hash([storage_slot, key.to_field()])\\n}\\n\\nmod test {\\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\\n\\n    #[test]\\n    fn test_derive_storage_slot_in_map_matches_typescript() {\\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\\n        let key = AztecAddress::from_field(\\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\\n        );\\n\\n        let slot = derive_storage_slot_in_map(map_slot, key);\\n\\n        // The following value was generated by `map_slot.test.ts`\\n        let slot_from_typescript =\\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\\n\\n        assert_eq(slot, slot_from_typescript);\\n    }\\n}\\n"},"309":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\\nuse crate::utils::field::field_from_bytes;\\n\\n// Trait: is_empty\\n//\\n// The general is_empty trait checks if a data type is is empty,\\n// and it defines empty for the basic data types as 0.\\n//\\n// If a Field is equal to zero, then it is regarded as zero.\\n// We will go with this definition for now, however it can be problematic\\n// if a value can actually be zero. In a future refactor, we can\\n// use the optional type for safety. Doing it now would lead to a worse devex\\n// and would make it harder to sync up with the cpp code.\\n// Preferred over Default trait to convey intent, as default doesn\'t necessarily mean empty.\\npub trait Empty {\\n    fn empty() -> Self;\\n}\\n\\nimpl Empty for Field {\\n    fn empty() -> Self {\\n        0\\n    }\\n}\\n\\nimpl Empty for u1 {\\n    fn empty() -> Self {\\n        0\\n    }\\n}\\nimpl Empty for u8 {\\n    fn empty() -> Self {\\n        0\\n    }\\n}\\nimpl Empty for u32 {\\n    fn empty() -> Self {\\n        0\\n    }\\n}\\nimpl Empty for u64 {\\n    fn empty() -> Self {\\n        0\\n    }\\n}\\nimpl Empty for U128 {\\n    fn empty() -> Self {\\n        U128::from_integer(0)\\n    }\\n}\\n\\npub fn is_empty<T>(item: T) -> bool\\nwhere\\n    T: Empty + Eq,\\n{\\n    item.eq(T::empty())\\n}\\n\\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\\nwhere\\n    T: Empty + Eq,\\n{\\n    array.all(|elem| is_empty(elem))\\n}\\n\\npub trait Hash {\\n    fn hash(self) -> Field;\\n}\\n\\npub trait ToField {\\n    fn to_field(self) -> Field;\\n}\\n\\nimpl ToField for Field {\\n    fn to_field(self) -> Field {\\n        self\\n    }\\n}\\n\\nimpl ToField for bool {\\n    fn to_field(self) -> Field {\\n        self as Field\\n    }\\n}\\nimpl ToField for u1 {\\n    fn to_field(self) -> Field {\\n        self as Field\\n    }\\n}\\nimpl ToField for u8 {\\n    fn to_field(self) -> Field {\\n        self as Field\\n    }\\n}\\nimpl ToField for u32 {\\n    fn to_field(self) -> Field {\\n        self as Field\\n    }\\n}\\nimpl ToField for u64 {\\n    fn to_field(self) -> Field {\\n        self as Field\\n    }\\n}\\nimpl ToField for U128 {\\n    fn to_field(self) -> Field {\\n        self.to_integer()\\n    }\\n}\\nimpl<let N: u32> ToField for str<N> {\\n    fn to_field(self) -> Field {\\n        assert(N < 32, \\"String doesn\'t fit in a field, consider using Serialize instead\\");\\n        field_from_bytes(self.as_bytes(), true)\\n    }\\n}\\n\\npub trait FromField {\\n    fn from_field(value: Field) -> Self;\\n}\\n\\nimpl FromField for Field {\\n    fn from_field(value: Field) -> Self {\\n        value\\n    }\\n}\\n\\nimpl FromField for bool {\\n    fn from_field(value: Field) -> Self {\\n        value as bool\\n    }\\n}\\nimpl FromField for u1 {\\n    fn from_field(value: Field) -> Self {\\n        value as u1\\n    }\\n}\\nimpl FromField for u8 {\\n    fn from_field(value: Field) -> Self {\\n        value as u8\\n    }\\n}\\nimpl FromField for u32 {\\n    fn from_field(value: Field) -> Self {\\n        value as u32\\n    }\\n}\\nimpl FromField for u64 {\\n    fn from_field(value: Field) -> Self {\\n        value as u64\\n    }\\n}\\nimpl FromField for U128 {\\n    fn from_field(value: Field) -> Self {\\n        U128::from_integer(value)\\n    }\\n}\\n\\n// docs:start:serialize\\n/// Trait for serializing Noir types into arrays of Fields.\\n///\\n/// An implementation of the Serialize trait has to follow Noir\'s intrinsic serialization (each member of a struct\\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\\n///\\n/// # On Following Noir\'s Intrinsic Serialization\\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\\n/// of fields. This array is then included in the initial witness. Noir\'s intrinsic serialization is then used\\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\\n/// Noir\'s intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\\n/// fail with an arguments hash mismatch error message.\\n///\\n/// # Type Parameters\\n/// * `N` - The length of the output Field array, known at compile time\\n///\\n/// # Example\\n/// ```\\n/// impl<let N: u32> Serialize<N> for str<N> {\\n///     fn serialize(self) -> [Field; N] {\\n///         let bytes = self.as_bytes();\\n///         let mut fields = [0; N];\\n///         for i in 0..bytes.len() {\\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\\n///         }\\n///         fields\\n///     }\\n/// }\\n/// ```\\n#[derive_via(derive_serialize)]\\npub trait Serialize<let N: u32> {\\n    fn serialize(self) -> [Field; N];\\n}\\n// docs:end:serialize\\n\\nimpl<let N: u32> Serialize<N> for str<N> {\\n    fn serialize(self) -> [Field; N] {\\n        let bytes = self.as_bytes();\\n        let mut fields = [0; N];\\n        for i in 0..bytes.len() {\\n            fields[i] = bytes[i] as Field;\\n        }\\n        fields\\n    }\\n}\\n\\n// docs:start:deserialize\\n/// Trait for deserializing Noir types from arrays of Fields.\\n///\\n/// An implementation of the Deserialize trait has to follow Noir\'s intrinsic serialization (each member of a struct\\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\\n///\\n/// # Type Parameters\\n/// * `N` - The length of the input Field array, known at compile time\\n///\\n/// # Example\\n/// ```\\n/// impl<let N: u32> Deserialize<N> for str<N> {\\n///     fn deserialize(fields: [Field; N]) -> Self {\\n///         str<N>::from(fields.map(|value| value as u8))\\n///     }\\n/// }\\n/// ```\\n#[derive_via(derive_deserialize)]\\npub trait Deserialize<let N: u32> {\\n    fn deserialize(fields: [Field; N]) -> Self;\\n}\\n// docs:end:deserialize\\n\\nimpl<let N: u32> Deserialize<N> for str<N> {\\n    fn deserialize(fields: [Field; N]) -> Self {\\n        str<N>::from(fields.map(|value| value as u8))\\n    }\\n}\\n\\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\\n///\\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\\n/// in the contract\'s public storage).\\n///\\n/// # Type Parameters\\n/// * `N` - The length of the Field array, known at compile time.\\n#[derive_via(derive_packable)]\\npub trait Packable<let N: u32> {\\n    /// Packs the current value into a compact array of `Field` elements.\\n    fn pack(self) -> [Field; N];\\n\\n    /// Unpacks a compact array of `Field` elements into the original value.\\n    fn unpack(fields: [Field; N]) -> Self;\\n}\\n"},"313":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr","source":"use crate::traits::{Packable, ToField};\\n\\nglobal BOOL_PACKED_LEN: u32 = 1;\\nglobal U8_PACKED_LEN: u32 = 1;\\nglobal U16_PACKED_LEN: u32 = 1;\\nglobal U32_PACKED_LEN: u32 = 1;\\nglobal U64_PACKED_LEN: u32 = 1;\\nglobal U128_PACKED_LEN: u32 = 1;\\nglobal FIELD_PACKED_LEN: u32 = 1;\\nglobal I8_PACKED_LEN: u32 = 1;\\nglobal I16_PACKED_LEN: u32 = 1;\\nglobal I32_PACKED_LEN: u32 = 1;\\nglobal I64_PACKED_LEN: u32 = 1;\\n\\nimpl Packable<BOOL_PACKED_LEN> for bool {\\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\\n        fields[0] as bool\\n    }\\n}\\n\\nimpl Packable<U8_PACKED_LEN> for u8 {\\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\\n        fields[0] as u8\\n    }\\n}\\n\\nimpl Packable<U16_PACKED_LEN> for u16 {\\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\\n        fields[0] as u16\\n    }\\n}\\n\\nimpl Packable<U32_PACKED_LEN> for u32 {\\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\\n        fields[0] as u32\\n    }\\n}\\n\\nimpl Packable<U64_PACKED_LEN> for u64 {\\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\\n        fields[0] as u64\\n    }\\n}\\n\\nimpl Packable<U128_PACKED_LEN> for U128 {\\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\\n        [self.to_field()]\\n    }\\n\\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\\n        U128::from_integer(fields[0])\\n    }\\n}\\n\\nimpl Packable<FIELD_PACKED_LEN> for Field {\\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\\n        [self]\\n    }\\n\\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\\n        fields[0]\\n    }\\n}\\n\\nimpl Packable<I8_PACKED_LEN> for i8 {\\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\\n        fields[0] as i8\\n    }\\n}\\n\\nimpl Packable<I16_PACKED_LEN> for i16 {\\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\\n        fields[0] as i16\\n    }\\n}\\n\\nimpl Packable<I32_PACKED_LEN> for i32 {\\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\\n        fields[0] as i32\\n    }\\n}\\n\\nimpl Packable<I64_PACKED_LEN> for i64 {\\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\\n        [self as Field]\\n    }\\n\\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\\n        fields[0] as i64\\n    }\\n}\\n\\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\\nwhere\\n    T: Packable<M>,\\n{\\n    fn pack(self) -> [Field; N * M] {\\n        let mut result: [Field; N * M] = std::mem::zeroed();\\n        let mut serialized: [Field; M] = std::mem::zeroed();\\n        for i in 0..N {\\n            serialized = self[i].pack();\\n            for j in 0..M {\\n                result[i * M + j] = serialized[j];\\n            }\\n        }\\n        result\\n    }\\n\\n    fn unpack(fields: [Field; N * M]) -> Self {\\n        let mut reader = crate::utils::reader::Reader::new(fields);\\n        let mut result: [T; N] = std::mem::zeroed();\\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\\n    }\\n}\\n\\n#[test]\\nfn test_u16_packing() {\\n    let a: u16 = 10;\\n    assert_eq(a, u16::unpack(a.pack()));\\n}\\n\\n#[test]\\nfn test_i8_packing() {\\n    let a: i8 = -10;\\n    assert_eq(a, i8::unpack(a.pack()));\\n}\\n\\n#[test]\\nfn test_i16_packing() {\\n    let a: i16 = -10;\\n    assert_eq(a, i16::unpack(a.pack()));\\n}\\n\\n#[test]\\nfn test_i32_packing() {\\n    let a: i32 = -10;\\n    assert_eq(a, i32::unpack(a.pack()));\\n}\\n\\n#[test]\\nfn test_i64_packing() {\\n    let a: i64 = -10;\\n    assert_eq(a, i64::unpack(a.pack()));\\n}\\n"},"314":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Deserialize, Serialize};\\n\\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\\nglobal U8_SERIALIZED_LEN: u32 = 1;\\nglobal U16_SERIALIZED_LEN: u32 = 1;\\nglobal U32_SERIALIZED_LEN: u32 = 1;\\nglobal U64_SERIALIZED_LEN: u32 = 1;\\nglobal U128_SERIALIZED_LEN: u32 = 2;\\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\\nglobal I8_SERIALIZED_LEN: u32 = 1;\\nglobal I16_SERIALIZED_LEN: u32 = 1;\\nglobal I32_SERIALIZED_LEN: u32 = 1;\\nglobal I64_SERIALIZED_LEN: u32 = 1;\\n\\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\\n        fields[0] as bool\\n    }\\n}\\n\\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\\n        fields[0] as u8\\n    }\\n}\\n\\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\\n        fields[0] as u16\\n    }\\n}\\n\\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\\n        fields[0] as u32\\n    }\\n}\\n\\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\\n        fields[0] as u64\\n    }\\n}\\n\\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\\n        // This is necessary because of how Noir handles serialization:\\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\\n        //   first.\\n        // For this reason if we didn\'t use the ordering of U128 limbs here and in encoder.ts we would get an arguments\\n        // hash mismatch.\\n        [self.lo, self.hi]\\n    }\\n}\\n\\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\\n    }\\n}\\n\\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\\n        [self]\\n    }\\n}\\n\\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\\n        fields[0]\\n    }\\n}\\n\\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\\n        fields[0] as i8\\n    }\\n}\\n\\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\\n        fields[0] as i16\\n    }\\n}\\n\\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\\n        fields[0] as i32\\n    }\\n}\\n\\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\\n        [self as Field]\\n    }\\n}\\n\\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\\n        fields[0] as i64\\n    }\\n}\\n\\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\\nwhere\\n    T: Serialize<M>,\\n{\\n    fn serialize(self) -> [Field; N * M] {\\n        let mut result: [Field; N * M] = std::mem::zeroed();\\n        let mut serialized: [Field; M] = std::mem::zeroed();\\n        for i in 0..N {\\n            serialized = self[i].serialize();\\n            for j in 0..M {\\n                result[i * M + j] = serialized[j];\\n            }\\n        }\\n        result\\n    }\\n}\\n\\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\\nwhere\\n    T: Deserialize<M>,\\n{\\n    fn deserialize(fields: [Field; N * M]) -> Self {\\n        let mut reader = crate::utils::reader::Reader::new(fields);\\n        let mut result: [T; N] = std::mem::zeroed();\\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\\n    }\\n}\\n\\n#[test]\\nfn test_u16_serialization() {\\n    let a: u16 = 10;\\n    assert_eq(a, u16::deserialize(a.serialize()));\\n}\\n\\n#[test]\\nfn test_i8_serialization() {\\n    let a: i8 = -10;\\n    assert_eq(a, i8::deserialize(a.serialize()));\\n}\\n\\n#[test]\\nfn test_i16_serialization() {\\n    let a: i16 = -10;\\n    assert_eq(a, i16::deserialize(a.serialize()));\\n}\\n\\n#[test]\\nfn test_i32_serialization() {\\n    let a: i32 = -10;\\n    assert_eq(a, i32::deserialize(a.serialize()));\\n}\\n\\n#[test]\\nfn test_i64_serialization() {\\n    let a: i64 = -10;\\n    assert_eq(a, i64::deserialize(a.serialize()));\\n}\\n"},"331":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\\n    assert(bytes.len() < 32, \\"field_from_bytes: N must be less than 32\\");\\n    let mut as_field = 0;\\n    let mut offset = 1;\\n    for i in 0..N {\\n        let mut index = i;\\n        if big_endian {\\n            index = N - i - 1;\\n        }\\n        as_field += (bytes[index] as Field) * offset;\\n        offset *= 256;\\n    }\\n\\n    as_field\\n}\\n\\n// Convert a 32 byte array to a field element by truncating the final byte\\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\\n    // Convert it to a field element\\n    let mut v = 1;\\n    let mut high = 0 as Field;\\n    let mut low = 0 as Field;\\n\\n    for i in 0..15 {\\n        // covers bytes 16..30 (31 is truncated and ignored)\\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\\n        v = v * 256;\\n        // covers bytes 0..14\\n        high = high + (bytes32[14 - i] as Field) * v;\\n    }\\n    // covers byte 15\\n    low = low + (bytes32[15] as Field) * v;\\n\\n    low + high * v\\n}\\n\\n// TODO to radix returns u8, so we cannot use bigger radixes. It\'d be ideal to use a radix of the maximum range-constrained integer noir supports\\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\\n    lhs.lt(rhs)\\n}\\n\\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\\n    rhs.lt(lhs)\\n}\\n\\npub fn min(f1: Field, f2: Field) -> Field {\\n    if f1.lt(f2) {\\n        f1\\n    } else {\\n        f2\\n    }\\n}\\n\\n#[test]\\nunconstrained fn bytes_field_test() {\\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\\n    let inputs = [\\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\\n    ];\\n    let field = field_from_bytes(inputs, true);\\n    let return_bytes: [u8; 31] = field.to_be_bytes();\\n    assert_eq(inputs, return_bytes);\\n    // 32 bytes - we remove the final byte, and check it matches the field\\n    let inputs2 = [\\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\\n    ];\\n    let field2 = field_from_bytes_32_trunc(inputs2);\\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\\n\\n    assert_eq(return_bytes2, return_bytes);\\n    assert_eq(field2, field);\\n}\\n\\n#[test]\\nunconstrained fn max_field_test() {\\n    // Tests the hardcoded value in constants.nr vs underlying modulus\\n    // NB: We can\'t use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\\n    let max_value = crate::constants::MAX_FIELD_VALUE;\\n    assert_eq(max_value, 0 - 1);\\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\\n    let mod_bytes = std::field::modulus_be_bytes();\\n    for i in 0..31 {\\n        assert_eq(max_bytes[i], mod_bytes[i]);\\n    }\\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\\n}\\n"},"333":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\\n    data: [Field; N],\\n    offset: u32,\\n}\\n\\nimpl<let N: u32> Reader<N> {\\n    pub fn new(data: [Field; N]) -> Self {\\n        Self { data, offset: 0 }\\n    }\\n\\n    pub fn read(&mut self) -> Field {\\n        let result = self.data[self.offset];\\n        self.offset += 1;\\n        result\\n    }\\n\\n    pub fn read_u32(&mut self) -> u32 {\\n        self.read() as u32\\n    }\\n\\n    pub fn read_bool(&mut self) -> bool {\\n        self.read() as bool\\n    }\\n\\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\\n        let mut result = [0; K];\\n        for i in 0..K {\\n            result[i] = self.data[self.offset + i];\\n        }\\n        self.offset += K;\\n        result\\n    }\\n\\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\\n        let result = deserialise(self.read_array());\\n        result\\n    }\\n\\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\\n        &mut self,\\n        deserialise: fn([Field; K]) -> T,\\n        mut result: [T; C],\\n    ) -> [T; C] {\\n        for i in 0..C {\\n            result[i] = self.read_struct(deserialise);\\n        }\\n        result\\n    }\\n\\n    pub fn finish(self) {\\n        assert(self.offset == self.data.len(), \\"Reader did not read all data\\");\\n    }\\n}\\n"},"344":{"path":"/root/nargo/github.com/noir-lang/sha256/v0.1.0/src/sha256.nr","source":"use std::hash::sha256_compression;\\nuse std::runtime::is_unconstrained;\\n\\nmod tests;\\n\\n// Implementation of SHA-256 mapping a byte array of variable length to\\n// 32 bytes.\\n\\n// A message block is up to 64 bytes taken from the input.\\nglobal BLOCK_SIZE: u32 = 64;\\n\\n// The first index in the block where the 8 byte message size will be written.\\nglobal MSG_SIZE_PTR: u32 = 56;\\n\\n// Size of the message block when packed as 4-byte integer array.\\nglobal INT_BLOCK_SIZE: u32 = 16;\\n\\n// A `u32` integer consists of 4 bytes.\\nglobal INT_SIZE: u32 = 4;\\n\\n// Index of the integer in the `INT_BLOCK` where the length is written.\\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\\n\\n// Magic numbers for bit shifting.\\n// Works with actual bit shifting as well as the compiler turns them into * and /\\n// but circuit execution appears to be 10% faster this way.\\nglobal TWO_POW_8: u32 = 256;\\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\\n\\n// Index of a byte in a 64 byte block; ie. 0..=63\\ntype BLOCK_BYTE_PTR = u32;\\n\\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\\n\\n// A message block is a slice of the original message of a fixed size,\\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\\ntype MSG_BLOCK = INT_BLOCK;\\n\\n// The hash is 32 bytes.\\ntype HASH = [u8; 32];\\n\\n// The state accumulates the blocks.\\n// Its overall size is the same as the `HASH`.\\ntype STATE = [u32; 8];\\n\\n// Deprecated in favour of `sha256_var`\\n// docs:start:sha256\\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\\n// docs:end:sha256\\n{\\n    digest(input)\\n}\\n\\n// SHA-256 hash function\\n#[no_predicates]\\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\\n    sha256_var(msg, N as u64)\\n}\\n\\n// Variable size SHA-256 hash\\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\\n    let message_size = message_size as u32;\\n    let num_blocks = N / BLOCK_SIZE;\\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\\n    // Intermediate hash, starting with the canonical initial value\\n    let mut h: STATE = [\\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\\n        1541459225,\\n    ];\\n    // Pointer into msg_block on a 64 byte scale\\n    let mut msg_byte_ptr = 0;\\n    for i in 0..num_blocks {\\n        let msg_start = BLOCK_SIZE * i;\\n        let (new_msg_block, new_msg_byte_ptr) =\\n            unsafe { build_msg_block(msg, message_size, msg_start) };\\n\\n        if msg_start < message_size {\\n            msg_block = new_msg_block;\\n        }\\n\\n        if !is_unconstrained() {\\n            // Verify the block we are compressing was appropriately constructed\\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\\n            if msg_start < message_size {\\n                msg_byte_ptr = new_msg_byte_ptr;\\n            }\\n        } else if msg_start < message_size {\\n            msg_byte_ptr = new_msg_byte_ptr;\\n        }\\n\\n        // If the block is filled, compress it.\\n        // An un-filled block is handled after this loop.\\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\\n            h = sha256_compression(msg_block, h);\\n        }\\n    }\\n\\n    let modulo = N % BLOCK_SIZE;\\n    // Handle setup of the final msg block.\\n    // This case is only hit if the msg is less than the block size,\\n    // or our message cannot be evenly split into blocks.\\n    if modulo != 0 {\\n        let msg_start = BLOCK_SIZE * num_blocks;\\n        let (new_msg_block, new_msg_byte_ptr) =\\n            unsafe { build_msg_block(msg, message_size, msg_start) };\\n\\n        if msg_start < message_size {\\n            msg_block = new_msg_block;\\n        }\\n\\n        if !is_unconstrained() {\\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\\n            if msg_start < message_size {\\n                msg_byte_ptr = new_msg_byte_ptr;\\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\\n            }\\n        } else if msg_start < message_size {\\n            msg_byte_ptr = new_msg_byte_ptr;\\n        }\\n    }\\n\\n    // If we had modulo == 0 then it means the last block was full,\\n    // and we can reset the pointer to zero to overwrite it.\\n    if msg_byte_ptr == BLOCK_SIZE {\\n        msg_byte_ptr = 0;\\n    }\\n\\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\\n    // Here we rely on the fact that everything beyond the available input is set to 0.\\n    msg_block = update_block_item(\\n        msg_block,\\n        msg_byte_ptr,\\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\\n    );\\n    msg_byte_ptr = msg_byte_ptr + 1;\\n    let last_block = msg_block;\\n\\n    // If we don\'t have room to write the size, compress the block and reset it.\\n    if msg_byte_ptr > MSG_SIZE_PTR {\\n        h = sha256_compression(msg_block, h);\\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\\n        msg_byte_ptr = 0;\\n    }\\n\\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\\n\\n    if !is_unconstrained() {\\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\\n    }\\n\\n    hash_final_block(msg_block, h)\\n}\\n\\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\\n// Returns the block and the length that has been copied rather than padded with zeros.\\nunconstrained fn build_msg_block<let N: u32>(\\n    msg: [u8; N],\\n    message_size: u32,\\n    msg_start: u32,\\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\\n\\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\\n        if message_size < msg_start {\\n            // This function is sometimes called with `msg_start` past the end of the message.\\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\\n            0\\n        } else {\\n            message_size - msg_start\\n        }\\n    } else {\\n        BLOCK_SIZE\\n    };\\n\\n    // Figure out the number of items in the int array that we have to pack.\\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\\n    let mut int_input = block_input / INT_SIZE;\\n    if block_input % INT_SIZE != 0 {\\n        int_input = int_input + 1;\\n    };\\n\\n    for i in 0..int_input {\\n        let mut msg_item: u32 = 0;\\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\\n        for j in 0..INT_SIZE {\\n            let k = i * INT_SIZE + j;\\n            let msg_byte = if k < block_input {\\n                msg[msg_start + k]\\n            } else {\\n                0\\n            };\\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\\n        }\\n        msg_block[i] = msg_item;\\n    }\\n\\n    // Returning the index as if it was a 64 byte array.\\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\\n    (msg_block, block_input)\\n}\\n\\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\\n// and matches the input data. Returns the index of the first unset item.\\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\\n// in that case we can skip verification, ie. no need to check that everything is zero.\\nfn verify_msg_block<let N: u32>(\\n    msg: [u8; N],\\n    message_size: u32,\\n    msg_block: MSG_BLOCK,\\n    msg_start: u32,\\n) -> BLOCK_BYTE_PTR {\\n    let mut msg_byte_ptr = 0;\\n    let mut msg_end = msg_start + BLOCK_SIZE;\\n    if msg_end > N {\\n        msg_end = N;\\n    }\\n    // We might have to go beyond the input to pad the fields.\\n    if msg_end % INT_SIZE != 0 {\\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\\n    }\\n\\n    // Reconstructed packed item.\\n    let mut msg_item: u32 = 0;\\n\\n    // Inclusive at the end so that we can compare the last item.\\n    let mut i: u32 = 0;\\n    for k in msg_start..=msg_end {\\n        if k % INT_SIZE == 0 {\\n            // If we consumed some input we can compare against the block.\\n            if (msg_start < message_size) & (k > msg_start) {\\n                assert_eq(msg_block[i], msg_item as u32);\\n                i = i + 1;\\n                msg_item = 0;\\n            }\\n        }\\n        // Shift the accumulator\\n        msg_item = lshift8(msg_item, 1);\\n        // If we have input to consume, add it at the rightmost position.\\n        if k < message_size & k < msg_end {\\n            msg_item = msg_item + msg[k] as u32;\\n            msg_byte_ptr = msg_byte_ptr + 1;\\n        }\\n    }\\n\\n    msg_byte_ptr\\n}\\n\\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\\n// This is only relevant for the last, potentially partially filled block.\\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\\n    // Check all the way to the end of the block.\\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\\n}\\n\\n// Verify that a region of ints in the message block are (partially) zeroed,\\n// up to an (exclusive) maximum which can either be the end of the block\\n// or just where the size is to be written.\\nfn verify_msg_block_zeros(\\n    msg_block: MSG_BLOCK,\\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\\n    max_int_byte_ptr: u32,\\n) {\\n    // This variable is used to get around the compiler under-constrained check giving a warning.\\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\\n    // or return values the compiler check will issue a warning.\\n    let zero = msg_block[0] - msg_block[0];\\n\\n    // First integer which is supposed to be (partially) zero.\\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\\n\\n    // Check partial zeros.\\n    let modulo = msg_byte_ptr % INT_SIZE;\\n    if modulo != 0 {\\n        let zeros = INT_SIZE - modulo;\\n        let mask = if zeros == 3 {\\n            TWO_POW_24\\n        } else if zeros == 2 {\\n            TWO_POW_16\\n        } else {\\n            TWO_POW_8\\n        };\\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\\n        int_byte_ptr = int_byte_ptr + 1;\\n    }\\n\\n    // Check the rest of the items.\\n    for i in 0..max_int_byte_ptr {\\n        if i >= int_byte_ptr {\\n            assert_eq(msg_block[i], zero);\\n        }\\n    }\\n}\\n\\n// Verify that up to the byte pointer the two blocks are equal.\\n// At the byte pointer the new block can be partially zeroed.\\nfn verify_msg_block_equals_last(\\n    msg_block: MSG_BLOCK,\\n    last_block: MSG_BLOCK,\\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\\n) {\\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\\n    // First integer which is supposed to be (partially) zero contains that pointer.\\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\\n\\n    // Check partial zeros.\\n    let modulo = msg_byte_ptr % INT_SIZE;\\n    if modulo != 0 {\\n        // Reconstruct the partially zero item from the last block.\\n        let last_field = last_block[int_byte_ptr];\\n        let mut msg_item: u32 = 0;\\n        // Reset to where they are still equal.\\n        msg_byte_ptr = msg_byte_ptr - modulo;\\n        for i in 0..INT_SIZE {\\n            msg_item = lshift8(msg_item, 1);\\n            if i < modulo {\\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\\n                msg_byte_ptr = msg_byte_ptr + 1;\\n            }\\n        }\\n        assert_eq(msg_block[int_byte_ptr], msg_item);\\n    }\\n\\n    for i in 0..INT_SIZE_PTR {\\n        if i < int_byte_ptr {\\n            assert_eq(msg_block[i], last_block[i]);\\n        }\\n    }\\n}\\n\\n// Apply a function on the block item which the pointer indicates.\\nfn update_block_item<Env>(\\n    mut msg_block: MSG_BLOCK,\\n    msg_byte_ptr: BLOCK_BYTE_PTR,\\n    f: fn[Env](u32) -> u32,\\n) -> MSG_BLOCK {\\n    let i = msg_byte_ptr / INT_SIZE;\\n    msg_block[i] = f(msg_block[i]);\\n    msg_block\\n}\\n\\n// Set the rightmost `zeros` number of bytes to 0.\\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\\n    lshift8(rshift8(item, zeros), zeros)\\n}\\n\\n// Replace one byte in the item with a value, and set everything after it to zero.\\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\\n    zeroed_item + new_item\\n}\\n\\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\\n    // How many times do we have to shift to the right to get to the position we want?\\n    let max_shifts = INT_SIZE - 1;\\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\\n    msg_item = rshift8(msg_item, shifts as u8);\\n    // At this point the byte we want is in the rightmost position.\\n    msg_item as u8\\n}\\n\\n// Project a byte into a position in a field based on the overall block pointer.\\n// For example putting 1 into pointer 5 would be 100, because overall we would\\n// have [____, 0100] with indexes [0123,4567].\\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\\n    let mut msg_item = msg_byte as u32;\\n    // How many times do we have to shift to the left to get to the position we want?\\n    let max_shifts = INT_SIZE - 1;\\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\\n    lshift8(msg_item, shifts as u8)\\n}\\n\\n// Construct a field out of 4 bytes.\\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\\n    let mut item = b0 as u32;\\n    item = lshift8(item, 1) + b1 as u32;\\n    item = lshift8(item, 1) + b2 as u32;\\n    item = lshift8(item, 1) + b3 as u32;\\n    item\\n}\\n\\n// Shift by 8 bits to the left between 0 and 4 times.\\n// Checks `is_unconstrained()` to just use a bitshift if we\'re running in an unconstrained context,\\n// otherwise multiplies by 256.\\nfn lshift8(item: u32, shifts: u8) -> u32 {\\n    if is_unconstrained() {\\n        if item == 0 {\\n            0\\n        } else {\\n            // Brillig wouldn\'t shift 0<<4 without overflow.\\n            item << (8 * shifts)\\n        }\\n    } else {\\n        // We can do a for loop up to INT_SIZE or an if-else.\\n        if shifts == 0 {\\n            item\\n        } else if shifts == 1 {\\n            item * TWO_POW_8\\n        } else if shifts == 2 {\\n            item * TWO_POW_16\\n        } else if shifts == 3 {\\n            item * TWO_POW_24\\n        } else {\\n            // Doesn\'t make sense, but it\'s most likely called on 0 anyway.\\n            0\\n        }\\n    }\\n}\\n\\n// Shift by 8 bits to the right between 0 and 4 times.\\n// Checks `is_unconstrained()` to just use a bitshift if we\'re running in an unconstrained context,\\n// otherwise divides by 256.\\nfn rshift8(item: u32, shifts: u8) -> u32 {\\n    if is_unconstrained() {\\n        item >> (8 * shifts)\\n    } else {\\n        // Division wouldn\'t work on `Field`.\\n        if shifts == 0 {\\n            item\\n        } else if shifts == 1 {\\n            item / TWO_POW_8\\n        } else if shifts == 2 {\\n            item / TWO_POW_16\\n        } else if shifts == 3 {\\n            item / TWO_POW_24\\n        } else {\\n            0\\n        }\\n    }\\n}\\n\\n// Zero out all bytes between the end of the message and where the length is appended,\\n// then write the length into the last 8 bytes of the block.\\nunconstrained fn attach_len_to_msg_block(\\n    mut msg_block: MSG_BLOCK,\\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\\n    message_size: u32,\\n) -> MSG_BLOCK {\\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\\n    // There can be one item which has to be partially zeroed.\\n    let modulo = msg_byte_ptr % INT_SIZE;\\n    if modulo != 0 {\\n        // Index of the block in which we find the item we need to partially zero.\\n        let i = msg_byte_ptr / INT_SIZE;\\n        let zeros = INT_SIZE - modulo;\\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\\n        msg_byte_ptr = msg_byte_ptr + zeros;\\n    }\\n\\n    // The rest can be zeroed without bit shifting anything.\\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\\n        msg_block[i] = 0;\\n    }\\n\\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\\n    let len = 8 * message_size;\\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\\n    for i in 0..=1 {\\n        let shift = i * 4;\\n        msg_block[INT_SIZE_PTR + i] = make_item(\\n            len_bytes[shift],\\n            len_bytes[shift + 1],\\n            len_bytes[shift + 2],\\n            len_bytes[shift + 3],\\n        );\\n    }\\n    msg_block\\n}\\n\\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\\n// and that everything between the byte pointer and the size pointer was zeroed,\\n// and that everything before the byte pointer was untouched.\\nfn verify_msg_len(\\n    msg_block: MSG_BLOCK,\\n    last_block: MSG_BLOCK,\\n    msg_byte_ptr: BLOCK_BYTE_PTR,\\n    message_size: u32,\\n) {\\n    // Check zeros up to the size pointer.\\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\\n\\n    // Check that up to the pointer we match the last block.\\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\\n\\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\\n    let mut reconstructed_len: u64 = 0;\\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\\n        reconstructed_len = reconstructed_len * TWO_POW_32;\\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\\n    }\\n    let len = 8 * message_size as u64;\\n    assert_eq(reconstructed_len, len);\\n}\\n\\n// Perform the final compression, then transform the `STATE` into `HASH`.\\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\\n    // Hash final padded block\\n    state = sha256_compression(msg_block, state);\\n\\n    // Return final hash as byte array\\n    for j in 0..8 {\\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\\n        for k in 0..4 {\\n            out_h[4 * j + k] = h_bytes[k];\\n        }\\n    }\\n\\n    out_h\\n}\\n\\n"}}}')),function(e){const t={};for(const n in e)e[n]&&void 0!==e[n].defaultValue&&(t[n]=e[n].defaultValue)}({gasLimitBufferPercentage:{description:"How much to increase calculated gas limit by (percentage)",env:"L1_GAS_LIMIT_BUFFER_PERCENTAGE",...ze(20)},minGwei:{description:"Minimum gas price in gwei",env:"L1_GAS_PRICE_MIN",...Be(1n)},maxGwei:{description:"Maximum gas price in gwei",env:"L1_GAS_PRICE_MAX",...Be(100n)},maxBlobGwei:{description:"Maximum blob fee per gas in gwei",env:"L1_BLOB_FEE_PER_GAS_MAX",...Be(1500n)},priorityFeeBumpPercentage:{description:"How much to increase priority fee by each attempt (percentage)",env:"L1_PRIORITY_FEE_BUMP_PERCENTAGE",...ze(20)},priorityFeeRetryBumpPercentage:{description:"How much to increase priority fee by each retry attempt (percentage)",env:"L1_PRIORITY_FEE_RETRY_BUMP_PERCENTAGE",...ze(50)},fixedPriorityFeePerGas:{description:"Fixed priority fee per gas in Gwei. Overrides any priority fee bump percentage",env:"L1_FIXED_PRIORITY_FEE_PER_GAS",...ze(0)},maxAttempts:{description:"Maximum number of speed-up attempts",env:"L1_TX_MONITOR_MAX_ATTEMPTS",...ze(3)},checkIntervalMs:{description:"How often to check tx status",env:"L1_TX_MONITOR_CHECK_INTERVAL_MS",...ze(1e4)},stallTimeMs:{description:"How long before considering tx stalled",env:"L1_TX_MONITOR_STALL_TIME_MS",...ze(45e3)},txTimeoutMs:{description:"How long to wait for a tx to be mined before giving up. Set to 0 to disable.",env:"L1_TX_MONITOR_TX_TIMEOUT_MS",...ze(3e5)},txPropagationMaxQueryAttempts:{description:"How many attempts will be done to get a tx after it was sent",env:"L1_TX_PROPAGATION_MAX_QUERY_ATTEMPTS",...ze(3)}});const Ky=ry(JSON.parse('{"transpiled":true,"noir_version":"1.0.0-beta.1+c4e38215cedb5afb","name":"SchnorrAccount","functions":[{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["private","noinitcheck","view"],"abi":{"error_types":{"11091894166229312484":{"error_kind":"fmtstring","item_types":[],"length":20},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"1705275289401561847":{"error_kind":"string","string":"Mismatch note header storage slot."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"19458536156181958":{"error_kind":"string","string":"Function verify_private_authwit can only be called statically"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_auth_witness","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"],"verification_key":"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"},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["private","noinitcheck"],"abi":{"error_types":{"11091894166229312484":{"error_kind":"fmtstring","item_types":[],"length":20},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"1705275289401561847":{"error_kind":"string","string":"Mismatch note header storage slot."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_auth_witness","enqueue_public_function_call_internal","call_private_function_internal","debug_log_oracle_wrapper","notify_set_min_revertible_side_effect_counter_oracle_wrapper","notify_created_nullifier_oracle_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"],"verification_key":"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"},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8861757336002045335":{"error_kind":"fmtstring","item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}],"length":99},"9862881900111276825":{"error_kind":"fmtstring","item_types":[{"kind":"field"}],"length":35}},"parameters":[{"name":"log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["process_log"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"error_types":{"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"field"},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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eG863quN90Hjvbx4byve64n3PuK9gHhvHN4rhvdO4b1EeG8N3muC917gvQh4bR6vVeO1W7yWidf28FoXXvvBayF4bQDXynHtGNdScW0R19pw7QnXYnBtArU6alfUcqhtsNYfOLZ8yOG9yrjNnRu3VVILNv/v63hvL97rivd+4r2QeG8g3iuH947hvVR4bxHea4P3nuC9GHhvAl6rx2vXeC0Xr23itT689oXXgvDaCF4rwLVzXEvGtVVca8S1t+FgI8BmBkPtjloWtR1qHbx/fk6wuXLjb+dq+5NU/k7x4RLT7PD4Jcvo561R+XvOZTPeNN2HAzfUX1uzzmvr1Xltgzqv7Vb5u+QcL2xw8YAxP+qvjan8/XrmWRefdPV/6f+3HVCHw1F1XjutDpYz6rx2Tp3Xzqvz2mV1XruizmvX1nnt+jqv3VzntVvrvHZvndfur/Pag3Vee7jOa0/Uee2pOq/NMKj2azPVeW3OOq/NXee1eeu8Nn+d15w6r+XrvObVeS2o89oidV5brM5ry9V5bYU6r61a57XV67x2VefYvwfP8v2k11526mz6a7t3137fnnVe27fOa/vVee2wOq8dUee1Y+u8dnyd106u89qpdV47t85r59d57cI6r11c57Ur6rx2VZ3Xrqm8lpZ3Zxxc+7XhldeeOPGZhy89tBjpr81c532z1nnf7HXeN1ed1+ap0+Z8dd63QJ33qTrvc+u8VqjTpl/nfQvWed/Cdd63WJ3XlqjT5lJ13rdMnfctV+d9K9Z5beU6ba5a532r13nfmnXet06d19ar0+YGdd63UZ33bVLnfZvXeS2s02ZU531xnfdtUed9W9d5bds6bY6q874d6rxvpzrvO6PO+96ovJaWs96q89p7dV77oM5rX9R57as6r31f57Uf67z2a53Xfq/z2sCe2q8NqvNaW53XOuq81lPntaF1Xpuk8lpavy9Z57WlK6+lxcSydd63fJ33rVjnfavUeW21Om2uUed9a9V53zp13rd+ndc2rNPmxnXet2md921e532lOq+V67Q5ss77tqzzvq3rvG+7Oq9tX6fNHeu8b3Sd9+1S532713ltzzpt7l3nffvWed9+dd53YJ3XDq7T5qF13nd4nfcdWed9x9R57bg6bZ5Q530n1XnfKXXed0+d9005pPb7pqnx2rDK3xUqfyty6L9r37i2hOtKi1f+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","debug_symbols":"","brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","notify_created_nullifier_oracle_wrapper","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","random","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"],"verification_key":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"11091894166229312484":{"error_kind":"fmtstring","item_types":[],"length":20},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"bY/dCoMwDIXfJde9aLof0FeRIVWjFEortQ6G9N2XDtm6zZuQE75zyNlgoG6dWuNGv0DdbGB9r6PxjtWWBHTBWGumtjyDzANPL36ZtctyiTpEqNUZBZAb8laxfzSWoL6qJP5QlCjVDvOuPjhm6xFf4ZtXKL/4W2J518HoztL+/Li6vugSHzP91JqD72lYA+WCRTeeDV6EkhzL0U8=","brillig_names":["sync_notes"]},{"name":"lookup_validity","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}},"parameters":[{"name":"consumer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["lookup_validity"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"PublicKeyNote"},{"fields":[{"name":"x","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"y","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"SchnorrAccount"}},{"name":"fields","value":{"fields":[{"name":"signing_public_key","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"signing_pub_key_x","type":{"kind":"field"}},{"name":"signing_pub_key_y","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrAccount::constructor_parameters"}}],"kind":"struct","path":"SchnorrAccount::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrAccount::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrAccount::verify_private_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}},{"name":"cancellable","type":{"kind":"boolean"}}],"kind":"struct","path":"SchnorrAccount::entrypoint_parameters"}}],"kind":"struct","path":"SchnorrAccount::entrypoint_abi"}]}},"file_map":{"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\\n\\n#[derive_via(derive_eq)]\\n// docs:start:eq-trait\\npub trait Eq {\\n    fn eq(self, other: Self) -> bool;\\n}\\n// docs:end:eq-trait\\n\\n// docs:start:derive_eq\\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\\n    let body = |fields| {\\n        if s.fields_as_written().len() == 0 {\\n            quote { true }\\n        } else {\\n            fields\\n        }\\n    };\\n    crate::meta::make_trait_impl(\\n        s,\\n        quote { Eq },\\n        signature,\\n        for_each_field,\\n        quote { & },\\n        body,\\n    )\\n}\\n// docs:end:derive_eq\\n\\nimpl Eq for Field {\\n    fn eq(self, other: Field) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl Eq for u64 {\\n    fn eq(self, other: u64) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u32 {\\n    fn eq(self, other: u32) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u16 {\\n    fn eq(self, other: u16) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u8 {\\n    fn eq(self, other: u8) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for u1 {\\n    fn eq(self, other: u1) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl Eq for i8 {\\n    fn eq(self, other: i8) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for i16 {\\n    fn eq(self, other: i16) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for i32 {\\n    fn eq(self, other: i32) -> bool {\\n        self == other\\n    }\\n}\\nimpl Eq for i64 {\\n    fn eq(self, other: i64) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl Eq for () {\\n    fn eq(_self: Self, _other: ()) -> bool {\\n        true\\n    }\\n}\\nimpl Eq for bool {\\n    fn eq(self, other: bool) -> bool {\\n        self == other\\n    }\\n}\\n\\nimpl<T, let N: u32> Eq for [T; N]\\nwhere\\n    T: Eq,\\n{\\n    fn eq(self, other: [T; N]) -> bool {\\n        let mut result = true;\\n        for i in 0..self.len() {\\n            result &= self[i].eq(other[i]);\\n        }\\n        result\\n    }\\n}\\n\\nimpl<T> Eq for [T]\\nwhere\\n    T: Eq,\\n{\\n    fn eq(self, other: [T]) -> bool {\\n        let mut result = self.len() == other.len();\\n        for i in 0..self.len() {\\n            result &= self[i].eq(other[i]);\\n        }\\n        result\\n    }\\n}\\n\\nimpl<let N: u32> Eq for str<N> {\\n    fn eq(self, other: str<N>) -> bool {\\n        let self_bytes = self.as_bytes();\\n        let other_bytes = other.as_bytes();\\n        self_bytes == other_bytes\\n    }\\n}\\n\\nimpl<A, B> Eq for (A, B)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n{\\n    fn eq(self, other: (A, B)) -> bool {\\n        self.0.eq(other.0) & self.1.eq(other.1)\\n    }\\n}\\n\\nimpl<A, B, C> Eq for (A, B, C)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n    C: Eq,\\n{\\n    fn eq(self, other: (A, B, C)) -> bool {\\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\\n    }\\n}\\n\\nimpl<A, B, C, D> Eq for (A, B, C, D)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n    C: Eq,\\n    D: Eq,\\n{\\n    fn eq(self, other: (A, B, C, D)) -> bool {\\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\\n    }\\n}\\n\\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\\nwhere\\n    A: Eq,\\n    B: Eq,\\n    C: Eq,\\n    D: Eq,\\n    E: Eq,\\n{\\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\\n        self.0.eq(other.0)\\n            & self.1.eq(other.1)\\n            & self.2.eq(other.2)\\n            & self.3.eq(other.3)\\n            & self.4.eq(other.4)\\n    }\\n}\\n\\nimpl Eq for Ordering {\\n    fn eq(self, other: Ordering) -> bool {\\n        self.result == other.result\\n    }\\n}\\n\\n// Noir doesn\'t have enums yet so we emulate (Lt | Eq | Gt) with a struct\\n// that has 3 public functions for constructing the struct.\\npub struct Ordering {\\n    result: Field,\\n}\\n\\nimpl Ordering {\\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\\n    // into the compiler, do not change these without also updating\\n    // the compiler itself!\\n    pub fn less() -> Ordering {\\n        Ordering { result: 0 }\\n    }\\n\\n    pub fn equal() -> Ordering {\\n        Ordering { result: 1 }\\n    }\\n\\n    pub fn greater() -> Ordering {\\n        Ordering { result: 2 }\\n    }\\n}\\n\\n#[derive_via(derive_ord)]\\n// docs:start:ord-trait\\npub trait Ord {\\n    fn cmp(self, other: Self) -> Ordering;\\n}\\n// docs:end:ord-trait\\n\\n// docs:start:derive_ord\\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\\n    let for_each_field = |name| quote {\\n        if result == std::cmp::Ordering::equal() {\\n            result = _self.$name.cmp(_other.$name);\\n        }\\n    };\\n    let body = |fields| quote {\\n        let mut result = std::cmp::Ordering::equal();\\n        $fields\\n        result\\n    };\\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\\n}\\n// docs:end:derive_ord\\n\\n// Note: Field deliberately does not implement Ord\\n\\nimpl Ord for u64 {\\n    fn cmp(self, other: u64) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for u32 {\\n    fn cmp(self, other: u32) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for u16 {\\n    fn cmp(self, other: u16) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for u8 {\\n    fn cmp(self, other: u8) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i8 {\\n    fn cmp(self, other: i8) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i16 {\\n    fn cmp(self, other: i16) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i32 {\\n    fn cmp(self, other: i32) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for i64 {\\n    fn cmp(self, other: i64) -> Ordering {\\n        if self < other {\\n            Ordering::less()\\n        } else if self > other {\\n            Ordering::greater()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl Ord for () {\\n    fn cmp(_self: Self, _other: ()) -> Ordering {\\n        Ordering::equal()\\n    }\\n}\\n\\nimpl Ord for bool {\\n    fn cmp(self, other: bool) -> Ordering {\\n        if self {\\n            if other {\\n                Ordering::equal()\\n            } else {\\n                Ordering::greater()\\n            }\\n        } else if other {\\n            Ordering::less()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n\\nimpl<T, let N: u32> Ord for [T; N]\\nwhere\\n    T: Ord,\\n{\\n    // The first non-equal element of both arrays determines\\n    // the ordering for the whole array.\\n    fn cmp(self, other: [T; N]) -> Ordering {\\n        let mut result = Ordering::equal();\\n        for i in 0..self.len() {\\n            if result == Ordering::equal() {\\n                let result_i = self[i].cmp(other[i]);\\n\\n                if result_i == Ordering::less() {\\n                    result = result_i;\\n                } else if result_i == Ordering::greater() {\\n                    result = result_i;\\n                }\\n            }\\n        }\\n        result\\n    }\\n}\\n\\nimpl<T> Ord for [T]\\nwhere\\n    T: Ord,\\n{\\n    // The first non-equal element of both arrays determines\\n    // the ordering for the whole array.\\n    fn cmp(self, other: [T]) -> Ordering {\\n        let mut result = self.len().cmp(other.len());\\n        for i in 0..self.len() {\\n            if result == Ordering::equal() {\\n                let result_i = self[i].cmp(other[i]);\\n\\n                if result_i == Ordering::less() {\\n                    result = result_i;\\n                } else if result_i == Ordering::greater() {\\n                    result = result_i;\\n                }\\n            }\\n        }\\n        result\\n    }\\n}\\n\\nimpl<A, B> Ord for (A, B)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n{\\n    fn cmp(self, other: (A, B)) -> Ordering {\\n        let result = self.0.cmp(other.0);\\n\\n        if result != Ordering::equal() {\\n            result\\n        } else {\\n            self.1.cmp(other.1)\\n        }\\n    }\\n}\\n\\nimpl<A, B, C> Ord for (A, B, C)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n    C: Ord,\\n{\\n    fn cmp(self, other: (A, B, C)) -> Ordering {\\n        let mut result = self.0.cmp(other.0);\\n\\n        if result == Ordering::equal() {\\n            result = self.1.cmp(other.1);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.2.cmp(other.2);\\n        }\\n\\n        result\\n    }\\n}\\n\\nimpl<A, B, C, D> Ord for (A, B, C, D)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n    C: Ord,\\n    D: Ord,\\n{\\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\\n        let mut result = self.0.cmp(other.0);\\n\\n        if result == Ordering::equal() {\\n            result = self.1.cmp(other.1);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.2.cmp(other.2);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.3.cmp(other.3);\\n        }\\n\\n        result\\n    }\\n}\\n\\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\\nwhere\\n    A: Ord,\\n    B: Ord,\\n    C: Ord,\\n    D: Ord,\\n    E: Ord,\\n{\\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\\n        let mut result = self.0.cmp(other.0);\\n\\n        if result == Ordering::equal() {\\n            result = self.1.cmp(other.1);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.2.cmp(other.2);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.3.cmp(other.3);\\n        }\\n\\n        if result == Ordering::equal() {\\n            result = self.4.cmp(other.4);\\n        }\\n\\n        result\\n    }\\n}\\n\\n// Compares and returns the maximum of two values.\\n//\\n// Returns the second argument if the comparison determines them to be equal.\\n//\\n// # Examples\\n//\\n// ```\\n// use std::cmp;\\n//\\n// assert_eq(cmp::max(1, 2), 2);\\n// assert_eq(cmp::max(2, 2), 2);\\n// ```\\npub fn max<T>(v1: T, v2: T) -> T\\nwhere\\n    T: Ord,\\n{\\n    if v1 > v2 {\\n        v1\\n    } else {\\n        v2\\n    }\\n}\\n\\n// Compares and returns the minimum of two values.\\n//\\n// Returns the first argument if the comparison determines them to be equal.\\n//\\n// # Examples\\n//\\n// ```\\n// use std::cmp;\\n//\\n// assert_eq(cmp::min(1, 2), 1);\\n// assert_eq(cmp::min(2, 2), 2);\\n// ```\\npub fn min<T>(v1: T, v2: T) -> T\\nwhere\\n    T: Ord,\\n{\\n    if v1 > v2 {\\n        v2\\n    } else {\\n        v1\\n    }\\n}\\n\\nmod cmp_tests {\\n    use crate::cmp::{max, min};\\n\\n    #[test]\\n    fn sanity_check_min() {\\n        assert_eq(min(0 as u64, 1 as u64), 0);\\n        assert_eq(min(0 as u64, 0 as u64), 0);\\n        assert_eq(min(1 as u64, 1 as u64), 1);\\n        assert_eq(min(255 as u8, 0 as u8), 0);\\n    }\\n\\n    #[test]\\n    fn sanity_check_max() {\\n        assert_eq(max(0 as u64, 1 as u64), 1);\\n        assert_eq(max(0 as u64, 0 as u64), 0);\\n        assert_eq(max(1 as u64, 1 as u64), 1);\\n        assert_eq(max(255 as u8, 0 as u8), 255);\\n    }\\n}\\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\\n\\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\\n/// slices - and thus nested vectors as well - are disallowed).\\n///\\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\\n/// pushing an additional element is also more efficient - the length only needs to be increased\\n/// by one.\\n///\\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\\n/// is a reasonable maximum bound that can be placed on the vector.\\n///\\n/// Example:\\n///\\n/// ```noir\\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\\n/// for i in 0..5 {\\n///     vector.push(i);\\n/// }\\n/// assert(vector.len() == 5);\\n/// assert(vector.max_len() == 10);\\n/// ```\\npub struct BoundedVec<T, let MaxLen: u32> {\\n    storage: [T; MaxLen],\\n    len: u32,\\n}\\n\\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\\n    /// Creates a new, empty vector of length zero.\\n    ///\\n    /// Since this container is backed by an array internally, it still needs an initial value\\n    /// to give each element. To resolve this, each element is zeroed internally. This value\\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\\n    /// assert(empty_vector.len() == 0);\\n    /// ```\\n    ///\\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\\n    /// via a type signature:\\n    ///\\n    /// ```noir\\n    /// fn good() -> BoundedVec<Field, 10> {\\n    ///     // Ok! MaxLen is specified with a type annotation\\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\\n    ///     let v2 = BoundedVec::new();\\n    ///\\n    ///     // Ok! MaxLen is known from the type of `good`\'s return value\\n    ///     v2\\n    /// }\\n    ///\\n    /// fn bad() {\\n    ///     // Error: Type annotation needed\\n    ///     // The compiler can\'t infer `MaxLen` from the following code:\\n    ///     let mut v3 = BoundedVec::new();\\n    ///     v3.push(5);\\n    /// }\\n    /// ```\\n    ///\\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\\n    /// constraint failure at runtime when the vec is pushed to.\\n    pub fn new() -> Self {\\n        let zeroed = crate::mem::zeroed();\\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\\n    }\\n\\n    /// Retrieves an element from the vector at the given index, starting from zero.\\n    ///\\n    /// If the given index is equal to or greater than the length of the vector, this\\n    /// will issue a constraint failure.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\\n    ///     let first = v.get(0);\\n    ///     let last = v.get(v.len() - 1);\\n    ///     assert(first != last);\\n    /// }\\n    /// ```\\n    pub fn get(self, index: u32) -> T {\\n        assert(index < self.len, \\"Attempted to read past end of BoundedVec\\");\\n        self.get_unchecked(index)\\n    }\\n\\n    /// Retrieves an element from the vector at the given index, starting from zero, without\\n    /// performing a bounds check.\\n    ///\\n    /// Since this function does not perform a bounds check on length before accessing the element,\\n    /// it is unsafe! Use at your own risk!\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\\n    ///     // Always ensure the length is larger than the largest\\n    ///     // index passed to get_unchecked\\n    ///     assert(v.len() > 2);\\n    ///     let first = v.get_unchecked(0);\\n    ///     let second = v.get_unchecked(1);\\n    ///     let third = v.get_unchecked(2);\\n    ///     first + second + third\\n    /// }\\n    /// ```\\n    pub fn get_unchecked(self, index: u32) -> T {\\n        self.storage[index]\\n    }\\n\\n    /// Writes an element to the vector at the given index, starting from zero.\\n    ///\\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\\n    ///     let first = v.get(0);\\n    ///     assert(first != 42);\\n    ///     v.set(0, 42);\\n    ///     let new_first = v.get(0);\\n    ///     assert(new_first == 42);\\n    /// }\\n    /// ```\\n    pub fn set(&mut self, index: u32, value: T) {\\n        assert(index < self.len, \\"Attempted to write past end of BoundedVec\\");\\n        self.set_unchecked(index, value)\\n    }\\n\\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\\n    ///\\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn set_unchecked_example() {\\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\\n    ///     vec.extend_from_array([1, 2]);\\n    ///\\n    ///     // Here we\'re safely writing within the valid range of `vec`\\n    ///     // `vec` now has the value [42, 2]\\n    ///     vec.set_unchecked(0, 42);\\n    ///\\n    ///     // We can then safely read this value back out of `vec`.\\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\\n    ///     assert_eq(vec.get(0), 42);\\n    ///\\n    ///     // We\'ve now written past the end of `vec`.\\n    ///     // As this index is still within the maximum potential length of `v`,\\n    ///     // it won\'t cause a constraint failure.\\n    ///     vec.set_unchecked(2, 42);\\n    ///     println(vec);\\n    ///\\n    ///     // This will write past the end of the maximum potential length of `vec`,\\n    ///     // it will then trigger a constraint failure.\\n    ///     vec.set_unchecked(5, 42);\\n    ///     println(vec);\\n    /// }\\n    /// ```\\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\\n        self.storage[index] = value;\\n    }\\n\\n    /// Pushes an element to the end of the vector. This increases the length\\n    /// of the vector by one.\\n    ///\\n    /// Panics if the new length of the vector will be greater than the max length.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\\n    ///\\n    /// v.push(1);\\n    /// v.push(2);\\n    ///\\n    /// // Panics with failed assertion \\"push out of bounds\\"\\n    /// v.push(3);\\n    /// ```\\n    pub fn push(&mut self, elem: T) {\\n        assert(self.len < MaxLen, \\"push out of bounds\\");\\n\\n        self.storage[self.len] = elem;\\n        self.len += 1;\\n    }\\n\\n    /// Returns the current length of this vector\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\\n    /// assert(v.len() == 0);\\n    ///\\n    /// v.push(100);\\n    /// assert(v.len() == 1);\\n    ///\\n    /// v.push(200);\\n    /// v.push(300);\\n    /// v.push(400);\\n    /// assert(v.len() == 4);\\n    ///\\n    /// let _ = v.pop();\\n    /// let _ = v.pop();\\n    /// assert(v.len() == 2);\\n    /// ```\\n    pub fn len(self) -> u32 {\\n        self.len\\n    }\\n\\n    /// Returns the maximum length of this vector. This is always\\n    /// equal to the `MaxLen` parameter this vector was initialized with.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\\n    ///\\n    /// assert(v.max_len() == 5);\\n    /// v.push(10);\\n    /// assert(v.max_len() == 5);\\n    /// ```\\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\\n        MaxLen\\n    }\\n\\n    /// Returns the internal array within this vector.\\n    ///\\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\\n    /// the storage held internally by this vector.\\n    ///\\n    /// Note that uninitialized elements may be zeroed out!\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\\n    ///\\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\\n    ///\\n    /// v.push(57);\\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\\n    /// ```\\n    pub fn storage(self) -> [T; MaxLen] {\\n        self.storage\\n    }\\n\\n    /// Pushes each element from the given array to this vector.\\n    ///\\n    /// Panics if pushing each element would cause the length of this vector\\n    /// to exceed the maximum length.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\\n    /// vec.extend_from_array([2, 4]);\\n    ///\\n    /// assert(vec.len == 2);\\n    /// assert(vec.get(0) == 2);\\n    /// assert(vec.get(1) == 4);\\n    /// ```\\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\\n        let new_len = self.len + array.len();\\n        assert(new_len <= MaxLen, \\"extend_from_array out of bounds\\");\\n        for i in 0..array.len() {\\n            self.storage[self.len + i] = array[i];\\n        }\\n        self.len = new_len;\\n    }\\n\\n    /// Pushes each element from the given slice to this vector.\\n    ///\\n    /// Panics if pushing each element would cause the length of this vector\\n    /// to exceed the maximum length.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\\n    /// vec.extend_from_slice(&[2, 4]);\\n    ///\\n    /// assert(vec.len == 2);\\n    /// assert(vec.get(0) == 2);\\n    /// assert(vec.get(1) == 4);\\n    /// ```\\n    pub fn extend_from_slice(&mut self, slice: [T]) {\\n        let new_len = self.len + slice.len();\\n        assert(new_len <= MaxLen, \\"extend_from_slice out of bounds\\");\\n        for i in 0..slice.len() {\\n            self.storage[self.len + i] = slice[i];\\n        }\\n        self.len = new_len;\\n    }\\n\\n    /// Pushes each element from the other vector to this vector. The length of\\n    /// the other vector is left unchanged.\\n    ///\\n    /// Panics if pushing each element would cause the length of this vector\\n    /// to exceed the maximum length.\\n    ///\\n    /// ```noir\\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\\n    ///\\n    /// v2.extend_from_array([1, 2, 3]);\\n    /// v1.extend_from_bounded_vec(v2);\\n    ///\\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\\n    /// ```\\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\\n        let append_len = vec.len();\\n        let new_len = self.len + append_len;\\n        assert(new_len <= MaxLen, \\"extend_from_bounded_vec out of bounds\\");\\n\\n        if is_unconstrained() {\\n            for i in 0..append_len {\\n                self.storage[self.len + i] = vec.get_unchecked(i);\\n            }\\n        } else {\\n            let mut exceeded_len = false;\\n            for i in 0..Len {\\n                exceeded_len |= i == append_len;\\n                if !exceeded_len {\\n                    self.storage[self.len + i] = vec.get_unchecked(i);\\n                }\\n            }\\n        }\\n        self.len = new_len;\\n    }\\n\\n    /// Creates a new vector, populating it with values derived from an array input.\\n    /// The maximum length of the vector is determined based on the type signature.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\\n    /// ```\\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\\n        static_assert(Len <= MaxLen, \\"from array out of bounds\\");\\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\\n        vec.extend_from_array(array);\\n        vec\\n    }\\n\\n    /// Pops the element at the end of the vector. This will decrease the length\\n    /// of the vector by one.\\n    ///\\n    /// Panics if the vector is empty.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\\n    /// v.push(1);\\n    /// v.push(2);\\n    ///\\n    /// let two = v.pop();\\n    /// let one = v.pop();\\n    ///\\n    /// assert(two == 2);\\n    /// assert(one == 1);\\n    ///\\n    /// // error: cannot pop from an empty vector\\n    /// let _ = v.pop();\\n    /// ```\\n    pub fn pop(&mut self) -> T {\\n        assert(self.len > 0);\\n        self.len -= 1;\\n\\n        let elem = self.storage[self.len];\\n        self.storage[self.len] = crate::mem::zeroed();\\n        elem\\n    }\\n\\n    /// Returns true if the given predicate returns true for any element\\n    /// in this vector.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\\n    /// v.extend_from_array([2, 4, 6]);\\n    ///\\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\\n    /// assert(all_even);\\n    /// ```\\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\\n        let mut ret = false;\\n        if is_unconstrained() {\\n            for i in 0..self.len {\\n                ret |= predicate(self.storage[i]);\\n            }\\n        } else {\\n            let mut ret = false;\\n            let mut exceeded_len = false;\\n            for i in 0..MaxLen {\\n                exceeded_len |= i == self.len;\\n                if !exceeded_len {\\n                    ret |= predicate(self.storage[i]);\\n                }\\n            }\\n        }\\n        ret\\n    }\\n\\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\\n    /// let result = vec.map(|value| value * 2);\\n    ///\\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\\n    /// assert_eq(result, expected);\\n    /// ```\\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\\n        let mut ret = BoundedVec::new();\\n        ret.len = self.len();\\n\\n        if is_unconstrained() {\\n            for i in 0..self.len() {\\n                ret.storage[i] = f(self.get_unchecked(i));\\n            }\\n        } else {\\n            for i in 0..MaxLen {\\n                if i < self.len() {\\n                    ret.storage[i] = f(self.get_unchecked(i));\\n                }\\n            }\\n        }\\n\\n        ret\\n    }\\n\\n    /// Creates a new BoundedVec from the given array and length.\\n    /// The given length must be less than or equal to the length of the array.\\n    ///\\n    /// This function will zero out any elements at or past index `len` of `array`.\\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\\n    /// assert_eq(vec.len(), 3);\\n    /// ```\\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\\n        assert(len <= MaxLen);\\n        let zeroed = crate::mem::zeroed();\\n\\n        if is_unconstrained() {\\n            for i in len..MaxLen {\\n                array[i] = zeroed;\\n            }\\n        } else {\\n            for i in 0..MaxLen {\\n                if i >= len {\\n                    array[i] = zeroed;\\n                }\\n            }\\n        }\\n\\n        BoundedVec { storage: array, len }\\n    }\\n\\n    /// Creates a new BoundedVec from the given array and length.\\n    /// The given length must be less than or equal to the length of the array.\\n    ///\\n    /// This function is unsafe because it expects all elements past the `len` index\\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\\n    /// for a safe version of this function which does zero out any indices past the\\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\\n    /// to give incorrect results since it will check even elements past `len`.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\\n    /// assert_eq(vec.len(), 3);\\n    ///\\n    /// // invalid use!\\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\\n    ///\\n    /// // both vecs have length 3 so we\'d expect them to be equal, but this\\n    /// // fails because elements past the length are still checked in eq\\n    /// assert_eq(vec1, vec2); // fails\\n    /// ```\\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\\n        assert(len <= MaxLen);\\n        BoundedVec { storage: array, len }\\n    }\\n}\\n\\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\\nwhere\\n    T: Eq,\\n{\\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\\n        // TODO: https://github.com/noir-lang/noir/issues/4837\\n        //\\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\\n        if self.len == other.len {\\n            self.storage == other.storage\\n        } else {\\n            false\\n        }\\n    }\\n}\\n\\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\\n        BoundedVec::from_array(array)\\n    }\\n}\\n\\nmod bounded_vec_tests {\\n\\n    mod get {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test(should_fail_with = \\"Attempted to read past end of BoundedVec\\")]\\n        fn panics_when_reading_elements_past_end_of_vec() {\\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\\n\\n            crate::println(vec.get(0));\\n        }\\n    }\\n\\n    mod set {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn set_updates_values_properly() {\\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\\n\\n            vec.set(0, 42);\\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\\n\\n            vec.set(1, 43);\\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\\n\\n            vec.set(2, 44);\\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\\n\\n            vec.set(1, 10);\\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\\n\\n            vec.set(0, 0);\\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\\n        }\\n\\n        #[test(should_fail_with = \\"Attempted to write past end of BoundedVec\\")]\\n        fn panics_when_writing_elements_past_end_of_vec() {\\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\\n            vec.set(0, 42);\\n\\n            // Need to use println to avoid DIE removing the write operation.\\n            crate::println(vec.get(0));\\n        }\\n    }\\n\\n    mod map {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn applies_function_correctly() {\\n            // docs:start:bounded-vec-map-example\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\\n            let result = vec.map(|value| value * 2);\\n            // docs:end:bounded-vec-map-example\\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\\n\\n            assert_eq(result, expected);\\n        }\\n\\n        #[test]\\n        fn applies_function_that_changes_return_type() {\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\\n            let result = vec.map(|value| (value * 2) as Field);\\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\\n\\n            assert_eq(result, expected);\\n        }\\n\\n        #[test]\\n        fn does_not_apply_function_past_len() {\\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\\n            let expected = BoundedVec::from_array([5, 1]);\\n\\n            assert_eq(result, expected);\\n            assert_eq(result.get_unchecked(2), 0);\\n        }\\n    }\\n\\n    mod from_array {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn empty() {\\n            let empty_array: [Field; 0] = [];\\n            let bounded_vec = BoundedVec::from_array([]);\\n\\n            assert_eq(bounded_vec.max_len(), 0);\\n            assert_eq(bounded_vec.len(), 0);\\n            assert_eq(bounded_vec.storage(), empty_array);\\n        }\\n\\n        #[test]\\n        fn equal_len() {\\n            let array = [1, 2, 3];\\n            let bounded_vec = BoundedVec::from_array(array);\\n\\n            assert_eq(bounded_vec.max_len(), 3);\\n            assert_eq(bounded_vec.len(), 3);\\n            assert_eq(bounded_vec.storage(), array);\\n        }\\n\\n        #[test]\\n        fn max_len_greater_then_array_len() {\\n            let array = [1, 2, 3];\\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\\n\\n            assert_eq(bounded_vec.max_len(), 10);\\n            assert_eq(bounded_vec.len(), 3);\\n            assert_eq(bounded_vec.get(0), 1);\\n            assert_eq(bounded_vec.get(1), 2);\\n            assert_eq(bounded_vec.get(2), 3);\\n        }\\n\\n        #[test(should_fail_with = \\"from array out of bounds\\")]\\n        fn max_len_lower_then_array_len() {\\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\\n        }\\n    }\\n\\n    mod trait_from {\\n        use crate::collections::bounded_vec::BoundedVec;\\n        use crate::convert::From;\\n\\n        #[test]\\n        fn simple() {\\n            let array = [1, 2];\\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\\n\\n            assert_eq(bounded_vec.max_len(), 10);\\n            assert_eq(bounded_vec.len(), 2);\\n            assert_eq(bounded_vec.get(0), 1);\\n            assert_eq(bounded_vec.get(1), 2);\\n        }\\n    }\\n\\n    mod trait_eq {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn empty_equality() {\\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\\n\\n            assert_eq(bounded_vec1, bounded_vec2);\\n        }\\n\\n        #[test]\\n        fn inequality() {\\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\\n            bounded_vec1.push(1);\\n            bounded_vec2.push(2);\\n\\n            assert(bounded_vec1 != bounded_vec2);\\n        }\\n    }\\n\\n    mod from_parts {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn from_parts() {\\n            // docs:start:from-parts\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\\n            assert_eq(vec.len(), 3);\\n\\n            // Any elements past the given length are zeroed out, so these\\n            // two BoundedVecs will be completely equal\\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\\n            assert_eq(vec1, vec2);\\n            // docs:end:from-parts\\n        }\\n\\n        #[test]\\n        fn from_parts_unchecked() {\\n            // docs:start:from-parts-unchecked\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\\n            assert_eq(vec.len(), 3);\\n\\n            // invalid use!\\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\\n\\n            // both vecs have length 3 so we\'d expect them to be equal, but this\\n            // fails because elements past the length are still checked in eq\\n            assert(vec1 != vec2);\\n            // docs:end:from-parts-unchecked\\n        }\\n    }\\n}\\n"},"17":{"path":"std/embedded_curve_ops.nr","source":"use crate::cmp::Eq;\\nuse crate::ops::arith::{Add, Neg, Sub};\\n\\n/// A point on the embedded elliptic curve\\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\\npub struct EmbeddedCurvePoint {\\n    pub x: Field,\\n    pub y: Field,\\n    pub is_infinite: bool,\\n}\\n\\nimpl EmbeddedCurvePoint {\\n    /// Elliptic curve point doubling operation\\n    /// returns the doubled point of a point P, i.e P+P\\n    pub fn double(self) -> EmbeddedCurvePoint {\\n        embedded_curve_add(self, self)\\n    }\\n\\n    /// Returns the null element of the curve; \'the point at infinity\'\\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\\n    }\\n}\\n\\nimpl Add for EmbeddedCurvePoint {\\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\\n        embedded_curve_add(self, other)\\n    }\\n}\\n\\nimpl Sub for EmbeddedCurvePoint {\\n    /// Points subtraction operation, using addition and negation\\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\\n        self + other.neg()\\n    }\\n}\\n\\nimpl Neg for EmbeddedCurvePoint {\\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\\n    /// If the point is at infinity, then the result is also at infinity.\\n    fn neg(self) -> EmbeddedCurvePoint {\\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\\n    }\\n}\\n\\nimpl Eq for EmbeddedCurvePoint {\\n    /// Checks whether two points are equal\\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\\n        (self.is_infinite & b.is_infinite)\\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\\n    }\\n}\\n\\n/// Scalar for the embedded curve represented as low and high limbs\\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\\npub struct EmbeddedCurveScalar {\\n    pub lo: Field,\\n    pub hi: Field,\\n}\\n\\nimpl EmbeddedCurveScalar {\\n    pub fn new(lo: Field, hi: Field) -> Self {\\n        EmbeddedCurveScalar { lo, hi }\\n    }\\n\\n    #[field(bn254)]\\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\\n        let (a, b) = crate::field::bn254::decompose(scalar);\\n        EmbeddedCurveScalar { lo: a, hi: b }\\n    }\\n\\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\\n    #[field(bn254)]\\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\\n        let mut v = 1;\\n        let mut lo = 0 as Field;\\n        let mut hi = 0 as Field;\\n        for i in 0..16 {\\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\\n            v = v * 256;\\n        }\\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\\n        sig_s\\n    }\\n}\\n\\nimpl Eq for EmbeddedCurveScalar {\\n    fn eq(self, other: Self) -> bool {\\n        (other.hi == self.hi) & (other.lo == self.lo)\\n    }\\n}\\n\\n// Computes a multi scalar multiplication over the embedded curve.\\n// For bn254, We have Grumpkin and Baby JubJub.\\n// For bls12-381, we have JubJub and Bandersnatch.\\n//\\n// The embedded curve being used is decided by the\\n// underlying proof system.\\n// docs:start:multi_scalar_mul\\npub fn multi_scalar_mul<let N: u32>(\\n    points: [EmbeddedCurvePoint; N],\\n    scalars: [EmbeddedCurveScalar; N],\\n) -> EmbeddedCurvePoint\\n// docs:end:multi_scalar_mul\\n{\\n    let point_array = multi_scalar_mul_array_return(points, scalars);\\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\\n}\\n\\n#[foreign(multi_scalar_mul)]\\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\\n    points: [EmbeddedCurvePoint; N],\\n    scalars: [EmbeddedCurveScalar; N],\\n) -> [Field; 3] {}\\n\\n// docs:start:fixed_base_scalar_mul\\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\\n// docs:end:fixed_base_scalar_mul\\n{\\n    let g1 = EmbeddedCurvePoint {\\n        x: 1,\\n        y: 17631683881184975370165255887551781615748388533673675138860,\\n        is_infinite: false,\\n    };\\n    multi_scalar_mul([g1], [scalar])\\n}\\n\\n/// This function only assumes that the points are on the curve\\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\\n// docs:start:embedded_curve_add\\npub fn embedded_curve_add(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    // docs:end:embedded_curve_add\\n    let x_coordinates_match = point1.x == point2.x;\\n    let y_coordinates_match = point1.y == point2.y;\\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\\n    let point1_1 = EmbeddedCurvePoint {\\n        x: point1.x + (x_coordinates_match as Field),\\n        y: point1.y,\\n        is_infinite: x_coordinates_match,\\n    };\\n    // point1_1 is guaranteed to have a different abscissa than point2\\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\\n    result.is_infinite = x_coordinates_match;\\n\\n    // dbl if x_match, y_match\\n    let double = embedded_curve_add_unsafe(point1, point1);\\n    result = if double_predicate { double } else { result };\\n\\n    // infinity if x_match, !y_match\\n    if point1.is_infinite {\\n        result = point2;\\n    }\\n    if point2.is_infinite {\\n        result = point1;\\n    }\\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\\n    result\\n}\\n\\n#[foreign(embedded_curve_add)]\\nfn embedded_curve_add_array_return(\\n    _point1: EmbeddedCurvePoint,\\n    _point2: EmbeddedCurvePoint,\\n) -> [Field; 3] {}\\n\\n/// This function assumes that:\\n/// The points are on the curve, and\\n/// The points don\'t share an x-coordinate, and\\n/// Neither point is the infinity point.\\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\\npub fn embedded_curve_add_not_nul(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    assert(point1.x != point2.x);\\n    assert(!point1.is_infinite);\\n    assert(!point2.is_infinite);\\n    embedded_curve_add_unsafe(point1, point2)\\n}\\n\\n/// Unsafe ec addition\\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\\n/// If they have the same value but are different variables, the result will be incorrect because in this case\\n/// it assumes (but does not check) that the points\' x-coordinates are not equal.\\n/// It also assumes neither point is the infinity point.\\npub fn embedded_curve_add_unsafe(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    let point_array = embedded_curve_add_array_return(point1, point2);\\n    let x = point_array[0];\\n    let y = point_array[1];\\n\\n    EmbeddedCurvePoint { x, y, is_infinite: false }\\n}\\n"},"18":{"path":"std/field/bn254.nr","source":"use crate::field::field_less_than;\\nuse crate::runtime::is_unconstrained;\\n\\n// The low and high decomposition of the field modulus\\nglobal PLO: Field = 53438638232309528389504892708671455233;\\nglobal PHI: Field = 64323764613183177041862057485226039389;\\n\\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\\nglobal TWO_POW_64: Field = 0x10000000000000000;\\n\\n// Decomposes a single field into two 16 byte fields.\\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\\n    // Here\'s we\'re taking advantage of truncating 64 bit limbs from the input field\\n    // and then subtracting them from the input such the field division is equivalent to integer division.\\n    let low_lower_64 = (x as u64) as Field;\\n    x = (x - low_lower_64) / TWO_POW_64;\\n    let low_upper_64 = (x as u64) as Field;\\n\\n    let high = (x - low_upper_64) / TWO_POW_64;\\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\\n\\n    (low, high)\\n}\\n\\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\\n    compute_decomposition(x)\\n}\\n\\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\\n    if x == y {\\n        true\\n    } else {\\n        field_less_than(x, y)\\n    }\\n}\\n\\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\\n    let (alo, ahi) = a;\\n    let (blo, bhi) = b;\\n    /// Safety: borrow is enforced to be boolean due to its type.\\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n    unsafe {\\n        /*@safety: borrow is enforced to be boolean due to its type.\\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n        */\\n        let borrow = lte_hint(alo, blo);\\n\\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\\n        let rhi = ahi - bhi - (borrow as Field);\\n\\n        rlo.assert_max_bit_size::<128>();\\n        rhi.assert_max_bit_size::<128>();\\n    }\\n}\\n\\n/// Decompose a single field into two 16 byte fields.\\npub fn decompose(x: Field) -> (Field, Field) {\\n    if is_unconstrained() {\\n        compute_decomposition(x)\\n    } else {\\n        /// Safety: decomposition is properly checked below\\n        unsafe {\\n            /*@safety: decomposition is properly checked below*/\\n            // Take hints of the decomposition\\n            let (xlo, xhi) = decompose_hint(x);\\n\\n            // Range check the limbs\\n            xlo.assert_max_bit_size::<128>();\\n            xhi.assert_max_bit_size::<128>();\\n\\n            // Check that the decomposition is correct\\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\\n\\n            // Assert that the decomposition of P is greater than the decomposition of x\\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\\n            (xlo, xhi)\\n        }\\n    }\\n}\\n\\npub fn assert_gt(a: Field, b: Field) {\\n    if is_unconstrained() {\\n        assert(\\n            /// Safety: already unconstrained\\n            unsafe { field_less_than(b, a) },\\n        );\\n    } else {\\n        // Decompose a and b\\n        let a_limbs = decompose(a);\\n        let b_limbs = decompose(b);\\n\\n        // Assert that a_limbs is greater than b_limbs\\n        assert_gt_limbs(a_limbs, b_limbs)\\n    }\\n}\\n\\npub fn assert_lt(a: Field, b: Field) {\\n    assert_gt(b, a);\\n}\\n\\npub fn gt(a: Field, b: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unsafe in unconstrained\\n        unsafe {\\n            //@safety: unsafe in unconstrained\\n            field_less_than(b, a)\\n        }\\n    } else if a == b {\\n        false\\n    } else {\\n        /// Safety: Take a hint of the comparison and verify it\\n        unsafe {\\n            //@safety: Take a hint of the comparison and verify it\\n            if field_less_than(a, b) {\\n                assert_gt(b, a);\\n                false\\n            } else {\\n                assert_gt(a, b);\\n                true\\n            }\\n        }\\n    }\\n}\\n\\npub fn lt(a: Field, b: Field) -> bool {\\n    gt(b, a)\\n}\\n\\nmod tests {\\n    // TODO: Allow imports from \\"super\\"\\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\\n\\n    #[test]\\n    fn check_decompose() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_decompose_unconstrained() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_lte_hint() {\\n        assert(lte_hint(0, 1));\\n        assert(lte_hint(0, 0x100));\\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\\n        assert(!lte_hint(0 - 1, 0));\\n\\n        assert(lte_hint(0, 0));\\n        assert(lte_hint(0x100, 0x100));\\n        assert(lte_hint(0 - 1, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_assert_gt() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    unconstrained fn check_assert_gt_unconstrained() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    fn check_gt() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_gt_unconstrained() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_plo_phi() {\\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\\n        let p_bytes = crate::field::modulus_le_bytes();\\n        let mut p_low: Field = 0;\\n        let mut p_high: Field = 0;\\n\\n        let mut offset = 1;\\n        for i in 0..16 {\\n            p_low += (p_bytes[i] as Field) * offset;\\n            p_high += (p_bytes[i + 16] as Field) * offset;\\n            offset *= 256;\\n        }\\n        assert_eq(p_low, PLO);\\n        assert_eq(p_high, PHI);\\n    }\\n}\\n"},"19":{"path":"std/field/mod.nr","source":"pub mod bn254;\\nuse crate::{runtime::is_unconstrained, static_assert};\\nuse bn254::lt as bn254_lt;\\n\\nimpl Field {\\n    /// Asserts that `self` can be represented in `bit_size` bits.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\\n    // docs:start:assert_max_bit_size\\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\\n        // docs:end:assert_max_bit_size\\n        static_assert(\\n            BIT_SIZE < modulus_num_bits() as u32,\\n            \\"BIT_SIZE must be less than modulus_num_bits\\",\\n        );\\n        self.__assert_max_bit_size(BIT_SIZE);\\n    }\\n\\n    #[builtin(apply_range_constraint)]\\n    fn __assert_max_bit_size(self, bit_size: u32) {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_le_bits)]\\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_be_bits)]\\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_le_bits\\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_le_bits\\n        let bits = self._to_le_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(p[N - 1 - i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_be_bits\\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_be_bits\\n        let bits = self._to_be_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the decomposition does not overflow the modulus\\n            let p = modulus_be_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[i] != p[i]) {\\n                        assert(p[i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_le_bytes\\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_le_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_le_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_be_bytes\\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_be_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_be_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_be_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[i] != p[i]) {\\n                        assert(bytes[i] < p[i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    // docs:start:to_le_radix\\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            static_assert(1 < radix, \\"radix must be greater than 1\\");\\n            static_assert(radix <= 256, \\"radix must be less than or equal to 256\\");\\n            static_assert(radix & (radix - 1) == 0, \\"radix must be a power of 2\\");\\n        }\\n        self.__to_le_radix(radix)\\n    }\\n    // docs:end:to_le_radix\\n\\n    // docs:start:to_be_radix\\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            crate::assert_constant(radix);\\n        }\\n        self.__to_be_radix(radix)\\n    }\\n    // docs:end:to_be_radix\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_le_radix)]\\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_be_radix)]\\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // Returns self to the power of the given exponent value.\\n    // Caution: we assume the exponent fits into 32 bits\\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\\n    pub fn pow_32(self, exponent: Field) -> Field {\\n        let mut r: Field = 1;\\n        let b: [u1; 32] = exponent.to_le_bits();\\n\\n        for i in 1..33 {\\n            r *= r;\\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\\n        }\\n        r\\n    }\\n\\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\\n    pub fn sgn0(self) -> u1 {\\n        self as u1\\n    }\\n\\n    pub fn lt(self, another: Field) -> bool {\\n        if crate::compat::is_bn254() {\\n            bn254_lt(self, another)\\n        } else {\\n            lt_fallback(self, another)\\n        }\\n    }\\n\\n    /// Convert a little endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n\\n    /// Convert a big endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[N - 1 - i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n}\\n\\n#[builtin(modulus_num_bits)]\\npub comptime fn modulus_num_bits() -> u64 {}\\n\\n#[builtin(modulus_be_bits)]\\npub comptime fn modulus_be_bits() -> [u1] {}\\n\\n#[builtin(modulus_le_bits)]\\npub comptime fn modulus_le_bits() -> [u1] {}\\n\\n#[builtin(modulus_be_bytes)]\\npub comptime fn modulus_be_bytes() -> [u8] {}\\n\\n#[builtin(modulus_le_bytes)]\\npub comptime fn modulus_le_bytes() -> [u8] {}\\n\\n/// An unconstrained only built in to efficiently compare fields.\\n#[builtin(field_less_than)]\\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\\n\\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\\n    __field_less_than(x, y)\\n}\\n\\n// Convert a 32 byte array to a field element by modding\\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\\n    // Convert it to a field element\\n    let mut v = 1;\\n    let mut high = 0 as Field;\\n    let mut low = 0 as Field;\\n\\n    for i in 0..16 {\\n        high = high + (bytes32[15 - i] as Field) * v;\\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\\n        v = v * 256;\\n    }\\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\\n    low + high * v\\n}\\n\\nfn lt_fallback(x: Field, y: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unconstrained context\\n        unsafe {\\n            //@safety : unconstrained context\\n            field_less_than(x, y)\\n        }\\n    } else {\\n        let x_bytes: [u8; 32] = x.to_le_bytes();\\n        let y_bytes: [u8; 32] = y.to_le_bytes();\\n        let mut x_is_lt = false;\\n        let mut done = false;\\n        for i in 0..32 {\\n            if (!done) {\\n                let x_byte = x_bytes[32 - 1 - i] as u8;\\n                let y_byte = y_bytes[32 - 1 - i] as u8;\\n                let bytes_match = x_byte == y_byte;\\n                if !bytes_match {\\n                    x_is_lt = x_byte < y_byte;\\n                    done = true;\\n                }\\n            }\\n        }\\n        x_is_lt\\n    }\\n}\\n\\nmod tests {\\n    use crate::{panic::panic, runtime};\\n    use super::field_less_than;\\n\\n    #[test]\\n    // docs:start:to_be_bits_example\\n    fn test_to_be_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_be_bits();\\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\\n    }\\n    // docs:end:to_be_bits_example\\n\\n    #[test]\\n    // docs:start:to_le_bits_example\\n    fn test_to_le_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_le_bits();\\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\\n    }\\n    // docs:end:to_le_bits_example\\n\\n    #[test]\\n    // docs:start:to_be_bytes_example\\n    fn test_to_be_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_bytes();\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_bytes_example\\n\\n    #[test]\\n    // docs:start:to_le_bytes_example\\n    fn test_to_le_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_bytes();\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_bytes_example\\n\\n    #[test]\\n    // docs:start:to_be_radix_example\\n    fn test_to_be_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_radix(256);\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_radix_example\\n\\n    #[test]\\n    // docs:start:to_le_radix_example\\n    fn test_to_le_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_radix(256);\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_radix_example\\n\\n    #[test(should_fail_with = \\"radix must be greater than 1\\")]\\n    fn test_to_le_radix_1() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(1);\\n        } else {\\n            panic(f\\"radix must be greater than 1\\");\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\\n    // #[test]\\n    // fn test_to_le_radix_brillig_1() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(1);\\n    //         crate::println(out);\\n    //         let expected = [0; 8];\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test(should_fail_with = \\"radix must be a power of 2\\")]\\n    fn test_to_le_radix_3() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(3);\\n        } else {\\n            panic(f\\"radix must be a power of 2\\");\\n        }\\n    }\\n\\n    #[test]\\n    fn test_to_le_radix_brillig_3() {\\n        // this test should only fail in constrained mode\\n        if runtime::is_unconstrained() {\\n            let field = 1;\\n            let out: [u8; 8] = field.to_le_radix(3);\\n            let mut expected = [0; 8];\\n            expected[0] = 1;\\n            assert(out == expected, \\"unexpected result\\");\\n        }\\n    }\\n\\n    #[test(should_fail_with = \\"radix must be less than or equal to 256\\")]\\n    fn test_to_le_radix_512() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(512);\\n        } else {\\n            panic(f\\"radix must be less than or equal to 256\\")\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\\n    // #[test]\\n    // fn test_to_le_radix_brillig_512() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(512);\\n    //         let mut expected = [0; 8];\\n    //         expected[0] = 1;\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test]\\n    unconstrained fn test_field_less_than() {\\n        assert(field_less_than(0, 1));\\n        assert(field_less_than(0, 0x100));\\n        assert(field_less_than(0x100, 0 - 1));\\n        assert(!field_less_than(0 - 1, 0));\\n    }\\n}\\n"},"21":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\\npub mod poseidon2;\\npub mod keccak;\\npub mod sha256;\\npub mod sha512;\\n\\nuse crate::default::Default;\\nuse crate::embedded_curve_ops::{\\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\\n};\\nuse crate::meta::derive_via;\\nuse crate::uint128::U128;\\n\\n// Kept for backwards compatibility\\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\\n\\n#[foreign(blake2s)]\\n// docs:start:blake2s\\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\\n// docs:end:blake2s\\n{}\\n\\n#[foreign(blake3)]\\n// docs:start:blake3\\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\\n// docs:end:blake3\\n{}\\n\\n// docs:start:pedersen_commitment\\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\\n    // docs:end:pedersen_commitment\\n    pedersen_commitment_with_separator(input, 0)\\n}\\n\\n#[inline_always]\\npub fn pedersen_commitment_with_separator<let N: u32>(\\n    input: [Field; N],\\n    separator: u32,\\n) -> EmbeddedCurvePoint {\\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\\n    for i in 0..N {\\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\\n        points[i] = from_field_unsafe(input[i]);\\n    }\\n    let generators = derive_generators(\\"DEFAULT_DOMAIN_SEPARATOR\\".as_bytes(), separator);\\n    multi_scalar_mul(generators, points)\\n}\\n\\n// docs:start:pedersen_hash\\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\\n// docs:end:pedersen_hash\\n{\\n    pedersen_hash_with_separator(input, 0)\\n}\\n\\n#[no_predicates]\\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\\n    let domain_generators: [EmbeddedCurvePoint; N] =\\n        derive_generators(\\"DEFAULT_DOMAIN_SEPARATOR\\".as_bytes(), separator);\\n\\n    for i in 0..N {\\n        scalars[i] = from_field_unsafe(input[i]);\\n        generators[i] = domain_generators[i];\\n    }\\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\\n\\n    let length_generator: [EmbeddedCurvePoint; 1] =\\n        derive_generators(\\"pedersen_hash_length\\".as_bytes(), 0);\\n    generators[N] = length_generator[0];\\n    multi_scalar_mul_array_return(generators, scalars)[0]\\n}\\n\\n#[field(bn254)]\\n#[inline_always]\\npub fn derive_generators<let N: u32, let M: u32>(\\n    domain_separator_bytes: [u8; M],\\n    starting_index: u32,\\n) -> [EmbeddedCurvePoint; N] {\\n    crate::assert_constant(domain_separator_bytes);\\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\\n    __derive_generators(domain_separator_bytes, starting_index)\\n}\\n\\n#[builtin(derive_pedersen_generators)]\\n#[field(bn254)]\\nfn __derive_generators<let N: u32, let M: u32>(\\n    domain_separator_bytes: [u8; M],\\n    starting_index: u32,\\n) -> [EmbeddedCurvePoint; N] {}\\n\\n#[field(bn254)]\\n// Same as from_field but:\\n// does not assert the limbs are 128 bits\\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\\n    /// Safety: xlo and xhi decomposition is checked below\\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\\n    // Check that the decomposition is correct\\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\\n}\\n\\npub fn hash_to_field(inputs: [Field]) -> Field {\\n    let mut sum = 0;\\n\\n    for input in inputs {\\n        let input_bytes: [u8; 32] = input.to_le_bytes();\\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\\n    }\\n\\n    sum\\n}\\n\\n// docs:start:keccak256\\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\\n// docs:end:keccak256\\n{\\n    crate::hash::keccak::keccak256(input, message_size)\\n}\\n\\n#[foreign(poseidon2_permutation)]\\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\\n\\n// Generic hashing support.\\n// Partially ported and impacted by rust.\\n\\n// Hash trait shall be implemented per type.\\n#[derive_via(derive_hash)]\\npub trait Hash {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher;\\n}\\n\\n// docs:start:derive_hash\\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\\n    let name = quote { Hash };\\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\\n    crate::meta::make_trait_impl(\\n        s,\\n        name,\\n        signature,\\n        for_each_field,\\n        quote {},\\n        |fields| fields,\\n    )\\n}\\n// docs:end:derive_hash\\n\\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\\n// TODO: consider making the types generic here ([u8], [Field], etc.)\\npub trait Hasher {\\n    fn finish(self) -> Field;\\n\\n    fn write(&mut self, input: Field);\\n}\\n\\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\\npub trait BuildHasher<H>\\nwhere\\n    H: Hasher,\\n{\\n    fn build_hasher(self) -> H;\\n}\\n\\npub struct BuildHasherDefault<H>;\\n\\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\\nwhere\\n    H: Hasher + Default,\\n{\\n    fn build_hasher(_self: Self) -> H {\\n        H::default()\\n    }\\n}\\n\\nimpl<H> Default for BuildHasherDefault<H>\\nwhere\\n    H: Hasher + Default,\\n{\\n    fn default() -> Self {\\n        BuildHasherDefault {}\\n    }\\n}\\n\\nimpl Hash for Field {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self);\\n    }\\n}\\n\\nimpl Hash for u1 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u8 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u16 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u32 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u64 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i8 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i16 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i32 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i64 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for bool {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for () {\\n    fn hash<H>(_self: Self, _state: &mut H)\\n    where\\n        H: Hasher,\\n    {}\\n}\\n\\nimpl Hash for U128 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self.lo as Field);\\n        H::write(state, self.hi as Field);\\n    }\\n}\\n\\nimpl<T, let N: u32> Hash for [T; N]\\nwhere\\n    T: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        for elem in self {\\n            elem.hash(state);\\n        }\\n    }\\n}\\n\\nimpl<T> Hash for [T]\\nwhere\\n    T: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.len().hash(state);\\n        for elem in self {\\n            elem.hash(state);\\n        }\\n    }\\n}\\n\\nimpl<A, B> Hash for (A, B)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n    }\\n}\\n\\nimpl<A, B, C> Hash for (A, B, C)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n    C: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n        self.2.hash(state);\\n    }\\n}\\n\\nimpl<A, B, C, D> Hash for (A, B, C, D)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n    C: Hash,\\n    D: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n        self.2.hash(state);\\n        self.3.hash(state);\\n    }\\n}\\n\\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n    C: Hash,\\n    D: Hash,\\n    E: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n        self.2.hash(state);\\n        self.3.hash(state);\\n        self.4.hash(state);\\n    }\\n}\\n\\n// Some test vectors for Pedersen hash and Pedersen Commitment.\\n// They have been generated using the same functions so the tests are for now useless\\n// but they will be useful when we switch to Noir implementation.\\n#[test]\\nfn assert_pedersen() {\\n    assert_eq(\\n        pedersen_hash_with_separator([1], 1),\\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1], 1),\\n        EmbeddedCurvePoint {\\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\\n            is_infinite: false,\\n        },\\n    );\\n\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2], 2),\\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2], 2),\\n        EmbeddedCurvePoint {\\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3], 3),\\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3], 3),\\n        EmbeddedCurvePoint {\\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\\n        EmbeddedCurvePoint {\\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\\n        EmbeddedCurvePoint {\\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\\n        EmbeddedCurvePoint {\\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\\n        EmbeddedCurvePoint {\\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\\n        EmbeddedCurvePoint {\\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\\n        EmbeddedCurvePoint {\\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\\n        EmbeddedCurvePoint {\\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\\n            is_infinite: false,\\n        },\\n    );\\n}\\n"},"26":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\\nuse crate::hash::Hasher;\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2 {\\n    cache: [Field; 3],\\n    state: [Field; 4],\\n    cache_size: u32,\\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2 {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub fn new(iv: Field) -> Poseidon2 {\\n        let mut result =\\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let two_pow_64 = 18446744073709551616;\\n        let iv: Field = (in_len as Field) * two_pow_64;\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n\\npub struct Poseidon2Hasher {\\n    _state: [Field],\\n}\\n\\nimpl Hasher for Poseidon2Hasher {\\n    fn finish(self) -> Field {\\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..self._state.len() {\\n            sponge.absorb(self._state[i]);\\n        }\\n        sponge.squeeze()\\n    }\\n\\n    fn write(&mut self, input: Field) {\\n        self._state = self._state.push_back(input);\\n    }\\n}\\n\\nimpl Default for Poseidon2Hasher {\\n    fn default() -> Self {\\n        Poseidon2Hasher { _state: &[] }\\n    }\\n}\\n"},"27":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\\n\\n// Implementation of SHA-256 mapping a byte array of variable length to\\n// 32 bytes.\\n\\n// A message block is up to 64 bytes taken from the input.\\nglobal BLOCK_SIZE: u32 = 64;\\n\\n// The first index in the block where the 8 byte message size will be written.\\nglobal MSG_SIZE_PTR: u32 = 56;\\n\\n// Size of the message block when packed as 4-byte integer array.\\nglobal INT_BLOCK_SIZE: u32 = 16;\\n\\n// A `u32` integer consists of 4 bytes.\\nglobal INT_SIZE: u32 = 4;\\n\\n// Index of the integer in the `INT_BLOCK` where the length is written.\\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\\n\\n// Magic numbers for bit shifting.\\n// Works with actual bit shifting as well as the compiler turns them into * and /\\n// but circuit execution appears to be 10% faster this way.\\nglobal TWO_POW_8: u32 = 256;\\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\\n\\n// Index of a byte in a 64 byte block; ie. 0..=63\\ntype BLOCK_BYTE_PTR = u32;\\n\\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\\n\\n// A message block is a slice of the original message of a fixed size,\\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\\ntype MSG_BLOCK = INT_BLOCK;\\n\\n// The hash is 32 bytes.\\ntype HASH = [u8; 32];\\n\\n// The state accumulates the blocks.\\n// Its overall size is the same as the `HASH`.\\ntype STATE = [u32; 8];\\n\\n// Deprecated in favour of `sha256_var`\\n// docs:start:sha256\\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\\n// docs:end:sha256\\n{\\n    digest(input)\\n}\\n\\n#[foreign(sha256_compression)]\\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\\n\\n// SHA-256 hash function\\n#[no_predicates]\\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\\n    sha256_var(msg, N as u64)\\n}\\n\\n// Variable size SHA-256 hash\\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\\n    let message_size = message_size as u32;\\n    let num_blocks = N / BLOCK_SIZE;\\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\\n    // Intermediate hash, starting with the canonical initial value\\n    let mut h: STATE = [\\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\\n        1541459225,\\n    ];\\n    // Pointer into msg_block on a 64 byte scale\\n    let mut msg_byte_ptr = 0;\\n    for i in 0..num_blocks {\\n        let msg_start = BLOCK_SIZE * i;\\n        /// Safety: the msg_block is checked below in verify_msg_block\\n        let (new_msg_block, new_msg_byte_ptr) =\\n            unsafe { build_msg_block(msg, message_size, msg_start) };\\n\\n        if msg_start < message_size {\\n            msg_block = new_msg_block;\\n        }\\n\\n        if !is_unconstrained() {\\n            // Verify the block we are compressing was appropriately constructed\\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\\n            if msg_start < message_size {\\n                msg_byte_ptr = new_msg_byte_ptr;\\n            }\\n        } else if msg_start < message_size {\\n            msg_byte_ptr = new_msg_byte_ptr;\\n        }\\n\\n        // If the block is filled, compress it.\\n        // An un-filled block is handled after this loop.\\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\\n            h = sha256_compression(msg_block, h);\\n        }\\n    }\\n\\n    let modulo = N % BLOCK_SIZE;\\n    // Handle setup of the final msg block.\\n    // This case is only hit if the msg is less than the block size,\\n    // or our message cannot be evenly split into blocks.\\n    if modulo != 0 {\\n        let msg_start = BLOCK_SIZE * num_blocks;\\n        /// Safety: the msg_block is checked below in verify_msg_block\\n        let (new_msg_block, new_msg_byte_ptr) =\\n            unsafe { build_msg_block(msg, message_size, msg_start) };\\n\\n        if msg_start < message_size {\\n            msg_block = new_msg_block;\\n        }\\n\\n        if !is_unconstrained() {\\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\\n            if msg_start < message_size {\\n                msg_byte_ptr = new_msg_byte_ptr;\\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\\n            }\\n        } else if msg_start < message_size {\\n            msg_byte_ptr = new_msg_byte_ptr;\\n        }\\n    }\\n\\n    // If we had modulo == 0 then it means the last block was full,\\n    // and we can reset the pointer to zero to overwrite it.\\n    if msg_byte_ptr == BLOCK_SIZE {\\n        msg_byte_ptr = 0;\\n    }\\n\\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\\n    // Here we rely on the fact that everything beyond the available input is set to 0.\\n    msg_block = update_block_item(\\n        msg_block,\\n        msg_byte_ptr,\\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\\n    );\\n    msg_byte_ptr = msg_byte_ptr + 1;\\n    let last_block = msg_block;\\n\\n    // If we don\'t have room to write the size, compress the block and reset it.\\n    if msg_byte_ptr > MSG_SIZE_PTR {\\n        h = sha256_compression(msg_block, h);\\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\\n        msg_byte_ptr = 0;\\n    }\\n\\n    /// Safety: the msg_len is checked below in verify_msg_len\\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\\n\\n    if !is_unconstrained() {\\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\\n    }\\n\\n    hash_final_block(msg_block, h)\\n}\\n\\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\\n// Returns the block and the length that has been copied rather than padded with zeros.\\nunconstrained fn build_msg_block<let N: u32>(\\n    msg: [u8; N],\\n    message_size: u32,\\n    msg_start: u32,\\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\\n\\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\\n        if message_size < msg_start {\\n            // This function is sometimes called with `msg_start` past the end of the message.\\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\\n            0\\n        } else {\\n            message_size - msg_start\\n        }\\n    } else {\\n        BLOCK_SIZE\\n    };\\n\\n    // Figure out the number of items in the int array that we have to pack.\\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\\n    let mut int_input = block_input / INT_SIZE;\\n    if block_input % INT_SIZE != 0 {\\n        int_input = int_input + 1;\\n    };\\n\\n    for i in 0..int_input {\\n        let mut msg_item: u32 = 0;\\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\\n        for j in 0..INT_SIZE {\\n            let k = i * INT_SIZE + j;\\n            let msg_byte = if k < block_input {\\n                msg[msg_start + k]\\n            } else {\\n                0\\n            };\\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\\n        }\\n        msg_block[i] = msg_item;\\n    }\\n\\n    // Returning the index as if it was a 64 byte array.\\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\\n    (msg_block, block_input)\\n}\\n\\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\\n// and matches the input data. Returns the index of the first unset item.\\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\\n// in that case we can skip verification, ie. no need to check that everything is zero.\\nfn verify_msg_block<let N: u32>(\\n    msg: [u8; N],\\n    message_size: u32,\\n    msg_block: MSG_BLOCK,\\n    msg_start: u32,\\n) -> BLOCK_BYTE_PTR {\\n    let mut msg_byte_ptr = 0;\\n    let mut msg_end = msg_start + BLOCK_SIZE;\\n    if msg_end > N {\\n        msg_end = N;\\n    }\\n    // We might have to go beyond the input to pad the fields.\\n    if msg_end % INT_SIZE != 0 {\\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\\n    }\\n\\n    // Reconstructed packed item.\\n    let mut msg_item: u32 = 0;\\n\\n    // Inclusive at the end so that we can compare the last item.\\n    let mut i: u32 = 0;\\n    for k in msg_start..=msg_end {\\n        if k % INT_SIZE == 0 {\\n            // If we consumed some input we can compare against the block.\\n            if (msg_start < message_size) & (k > msg_start) {\\n                assert_eq(msg_block[i], msg_item as u32);\\n                i = i + 1;\\n                msg_item = 0;\\n            }\\n        }\\n        // Shift the accumulator\\n        msg_item = lshift8(msg_item, 1);\\n        // If we have input to consume, add it at the rightmost position.\\n        if k < message_size & k < msg_end {\\n            msg_item = msg_item + msg[k] as u32;\\n            msg_byte_ptr = msg_byte_ptr + 1;\\n        }\\n    }\\n\\n    msg_byte_ptr\\n}\\n\\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\\n// This is only relevant for the last, potentially partially filled block.\\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\\n    // Check all the way to the end of the block.\\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\\n}\\n\\n// Verify that a region of ints in the message block are (partially) zeroed,\\n// up to an (exclusive) maximum which can either be the end of the block\\n// or just where the size is to be written.\\nfn verify_msg_block_zeros(\\n    msg_block: MSG_BLOCK,\\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\\n    max_int_byte_ptr: u32,\\n) {\\n    // This variable is used to get around the compiler under-constrained check giving a warning.\\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\\n    // or return values the compiler check will issue a warning.\\n    let zero = msg_block[0] - msg_block[0];\\n\\n    // First integer which is supposed to be (partially) zero.\\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\\n\\n    // Check partial zeros.\\n    let modulo = msg_byte_ptr % INT_SIZE;\\n    if modulo != 0 {\\n        let zeros = INT_SIZE - modulo;\\n        let mask = if zeros == 3 {\\n            TWO_POW_24\\n        } else if zeros == 2 {\\n            TWO_POW_16\\n        } else {\\n            TWO_POW_8\\n        };\\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\\n        int_byte_ptr = int_byte_ptr + 1;\\n    }\\n\\n    // Check the rest of the items.\\n    for i in 0..max_int_byte_ptr {\\n        if i >= int_byte_ptr {\\n            assert_eq(msg_block[i], zero);\\n        }\\n    }\\n}\\n\\n// Verify that up to the byte pointer the two blocks are equal.\\n// At the byte pointer the new block can be partially zeroed.\\nfn verify_msg_block_equals_last(\\n    msg_block: MSG_BLOCK,\\n    last_block: MSG_BLOCK,\\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\\n) {\\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\\n    // First integer which is supposed to be (partially) zero contains that pointer.\\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\\n\\n    // Check partial zeros.\\n    let modulo = msg_byte_ptr % INT_SIZE;\\n    if modulo != 0 {\\n        // Reconstruct the partially zero item from the last block.\\n        let last_field = last_block[int_byte_ptr];\\n        let mut msg_item: u32 = 0;\\n        // Reset to where they are still equal.\\n        msg_byte_ptr = msg_byte_ptr - modulo;\\n        for i in 0..INT_SIZE {\\n            msg_item = lshift8(msg_item, 1);\\n            if i < modulo {\\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\\n                msg_byte_ptr = msg_byte_ptr + 1;\\n            }\\n        }\\n        assert_eq(msg_block[int_byte_ptr], msg_item);\\n    }\\n\\n    for i in 0..INT_SIZE_PTR {\\n        if i < int_byte_ptr {\\n            assert_eq(msg_block[i], last_block[i]);\\n        }\\n    }\\n}\\n\\n// Apply a function on the block item which the pointer indicates.\\nfn update_block_item<Env>(\\n    mut msg_block: MSG_BLOCK,\\n    msg_byte_ptr: BLOCK_BYTE_PTR,\\n    f: fn[Env](u32) -> u32,\\n) -> MSG_BLOCK {\\n    let i = msg_byte_ptr / INT_SIZE;\\n    msg_block[i] = f(msg_block[i]);\\n    msg_block\\n}\\n\\n// Set the rightmost `zeros` number of bytes to 0.\\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\\n    lshift8(rshift8(item, zeros), zeros)\\n}\\n\\n// Replace one byte in the item with a value, and set everything after it to zero.\\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\\n    zeroed_item + new_item\\n}\\n\\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\\n    // How many times do we have to shift to the right to get to the position we want?\\n    let max_shifts = INT_SIZE - 1;\\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\\n    msg_item = rshift8(msg_item, shifts as u8);\\n    // At this point the byte we want is in the rightmost position.\\n    msg_item as u8\\n}\\n\\n// Project a byte into a position in a field based on the overall block pointer.\\n// For example putting 1 into pointer 5 would be 100, because overall we would\\n// have [____, 0100] with indexes [0123,4567].\\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\\n    let mut msg_item = msg_byte as u32;\\n    // How many times do we have to shift to the left to get to the position we want?\\n    let max_shifts = INT_SIZE - 1;\\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\\n    lshift8(msg_item, shifts as u8)\\n}\\n\\n// Construct a field out of 4 bytes.\\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\\n    let mut item = b0 as u32;\\n    item = lshift8(item, 1) + b1 as u32;\\n    item = lshift8(item, 1) + b2 as u32;\\n    item = lshift8(item, 1) + b3 as u32;\\n    item\\n}\\n\\n// Shift by 8 bits to the left between 0 and 4 times.\\n// Checks `is_unconstrained()` to just use a bitshift if we\'re running in an unconstrained context,\\n// otherwise multiplies by 256.\\nfn lshift8(item: u32, shifts: u8) -> u32 {\\n    if is_unconstrained() {\\n        if item == 0 {\\n            0\\n        } else {\\n            // Brillig wouldn\'t shift 0<<4 without overflow.\\n            item << (8 * shifts)\\n        }\\n    } else {\\n        // We can do a for loop up to INT_SIZE or an if-else.\\n        if shifts == 0 {\\n            item\\n        } else if shifts == 1 {\\n            item * TWO_POW_8\\n        } else if shifts == 2 {\\n            item * TWO_POW_16\\n        } else if shifts == 3 {\\n            item * TWO_POW_24\\n        } else {\\n            // Doesn\'t make sense, but it\'s most likely called on 0 anyway.\\n            0\\n        }\\n    }\\n}\\n\\n// Shift by 8 bits to the right between 0 and 4 times.\\n// Checks `is_unconstrained()` to just use a bitshift if we\'re running in an unconstrained context,\\n// otherwise divides by 256.\\nfn rshift8(item: u32, shifts: u8) -> u32 {\\n    if is_unconstrained() {\\n        item >> (8 * shifts)\\n    } else {\\n        // Division wouldn\'t work on `Field`.\\n        if shifts == 0 {\\n            item\\n        } else if shifts == 1 {\\n            item / TWO_POW_8\\n        } else if shifts == 2 {\\n            item / TWO_POW_16\\n        } else if shifts == 3 {\\n            item / TWO_POW_24\\n        } else {\\n            0\\n        }\\n    }\\n}\\n\\n// Zero out all bytes between the end of the message and where the length is appended,\\n// then write the length into the last 8 bytes of the block.\\nunconstrained fn attach_len_to_msg_block(\\n    mut msg_block: MSG_BLOCK,\\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\\n    message_size: u32,\\n) -> MSG_BLOCK {\\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\\n    // There can be one item which has to be partially zeroed.\\n    let modulo = msg_byte_ptr % INT_SIZE;\\n    if modulo != 0 {\\n        // Index of the block in which we find the item we need to partially zero.\\n        let i = msg_byte_ptr / INT_SIZE;\\n        let zeros = INT_SIZE - modulo;\\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\\n        msg_byte_ptr = msg_byte_ptr + zeros;\\n    }\\n\\n    // The rest can be zeroed without bit shifting anything.\\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\\n        msg_block[i] = 0;\\n    }\\n\\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\\n    let len = 8 * message_size;\\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\\n    for i in 0..=1 {\\n        let shift = i * 4;\\n        msg_block[INT_SIZE_PTR + i] = make_item(\\n            len_bytes[shift],\\n            len_bytes[shift + 1],\\n            len_bytes[shift + 2],\\n            len_bytes[shift + 3],\\n        );\\n    }\\n    msg_block\\n}\\n\\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\\n// and that everything between the byte pointer and the size pointer was zeroed,\\n// and that everything before the byte pointer was untouched.\\nfn verify_msg_len(\\n    msg_block: MSG_BLOCK,\\n    last_block: MSG_BLOCK,\\n    msg_byte_ptr: BLOCK_BYTE_PTR,\\n    message_size: u32,\\n) {\\n    // Check zeros up to the size pointer.\\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\\n\\n    // Check that up to the pointer we match the last block.\\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\\n\\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\\n    let mut reconstructed_len: u64 = 0;\\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\\n        reconstructed_len = reconstructed_len * TWO_POW_32;\\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\\n    }\\n    let len = 8 * message_size as u64;\\n    assert_eq(reconstructed_len, len);\\n}\\n\\n// Perform the final compression, then transform the `STATE` into `HASH`.\\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\\n    // Hash final padded block\\n    state = sha256_compression(msg_block, state);\\n\\n    // Return final hash as byte array\\n    for j in 0..8 {\\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\\n        for k in 0..4 {\\n            out_h[4 * j + k] = h_bytes[k];\\n        }\\n    }\\n\\n    out_h\\n}\\n\\nmod tests {\\n    use super::{\\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\\n        set_item_byte_then_zeros, set_item_zeros,\\n    };\\n    use super::INT_BLOCK;\\n    use super::sha256_var;\\n\\n    #[test]\\n    fn smoke_test() {\\n        let input = [0xbd];\\n        let result = [\\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\\n            0x8f, 0xfe, 0x73, 0x2b,\\n        ];\\n        assert_eq(sha256_var(input, input.len() as u64), result);\\n    }\\n\\n    #[test]\\n    fn msg_just_over_block() {\\n        let input = [\\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\\n        ];\\n        let result = [\\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\\n        ];\\n        assert_eq(sha256_var(input, input.len() as u64), result);\\n    }\\n\\n    #[test]\\n    fn msg_multiple_over_block() {\\n        let input = [\\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\\n        ];\\n        let result = [\\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\\n        ];\\n        assert_eq(sha256_var(input, input.len() as u64), result);\\n    }\\n\\n    #[test]\\n    fn msg_just_under_block() {\\n        let input = [\\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\\n            108, 97, 105, 110, 59,\\n        ];\\n        let result = [\\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\\n        ];\\n        assert_eq(sha256_var(input, input.len() as u64), result);\\n    }\\n\\n    #[test]\\n    fn msg_big_not_block_multiple() {\\n        let input = [\\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\\n        ];\\n        let result = [\\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\\n        ];\\n        assert_eq(sha256_var(input, input.len() as u64), result);\\n    }\\n\\n    #[test]\\n    fn msg_big_with_padding() {\\n        let input = [\\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n        ];\\n        let result = [\\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\\n        ];\\n        let message_size = 297;\\n        assert_eq(sha256_var(input, message_size), result);\\n    }\\n\\n    #[test]\\n    fn msg_big_no_padding() {\\n        let input = [\\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\\n        ];\\n        let result = [\\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\\n        ];\\n        assert_eq(sha256_var(input, input.len() as u64), result);\\n    }\\n\\n    #[test]\\n    fn same_msg_len_variable_padding() {\\n        let input = [\\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\\n            119, 30, 63, 129, 143, 32, 96,\\n        ];\\n\\n        // Prepare inputs of different lengths\\n        let mut input_511 = [0; 511];\\n        let mut input_512 = [0; 512]; // Next block\\n        let mut input_575 = [0; 575];\\n        let mut input_576 = [0; 576]; // Next block\\n        for i in 0..input.len() {\\n            input_511[i] = input[i];\\n            input_512[i] = input[i];\\n            input_575[i] = input[i];\\n            input_576[i] = input[i];\\n        }\\n\\n        // Compute hashes of all inputs (with same message length)\\n        let fixed_length_hash = super::sha256(input);\\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\\n\\n        // All of the above should have produced the same hash\\n        assert_eq(var_full_length_hash, fixed_length_hash);\\n        assert_eq(var_length_hash_511, fixed_length_hash);\\n        assert_eq(var_length_hash_512, fixed_length_hash);\\n        assert_eq(var_length_hash_575, fixed_length_hash);\\n        assert_eq(var_length_hash_576, fixed_length_hash);\\n    }\\n\\n    #[test]\\n    fn test_get_item_byte() {\\n        let fld = make_item(10, 20, 30, 40);\\n        assert_eq(fld, 0x0a141e28);\\n        assert_eq(get_item_byte(fld, 0), 10);\\n        assert_eq(get_item_byte(fld, 4), 10);\\n        assert_eq(get_item_byte(fld, 6), 30);\\n    }\\n\\n    #[test]\\n    fn test_byte_into_item() {\\n        let fld = make_item(0, 20, 0, 0);\\n        assert_eq(byte_into_item(20, 1), fld);\\n        assert_eq(byte_into_item(20, 5), fld);\\n    }\\n\\n    #[test]\\n    fn test_set_item_zeros() {\\n        let fld0 = make_item(10, 20, 30, 40);\\n        let fld1 = make_item(10, 0, 0, 0);\\n        assert_eq(set_item_zeros(fld0, 3), fld1);\\n        assert_eq(set_item_zeros(fld0, 4), 0);\\n        assert_eq(set_item_zeros(0, 4), 0);\\n    }\\n\\n    #[test]\\n    fn test_set_item_byte_then_zeros() {\\n        let fld0 = make_item(10, 20, 30, 40);\\n        let fld1 = make_item(10, 50, 0, 0);\\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\\n    }\\n\\n    #[test]\\n    fn test_build_msg_block_start_0() {\\n        let input = [\\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\\n            101, 115, 46, 48,\\n        ];\\n        assert_eq(input.len(), 22);\\n\\n        /// Safety: testing context\\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\\n        assert_eq(msg_byte_ptr, input.len());\\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\\n        assert_eq(msg_block[6], 0);\\n    }\\n\\n    #[test]\\n    fn test_build_msg_block_start_1() {\\n        let input = [\\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\\n        ];\\n        assert_eq(input.len(), 68);\\n        /// Safety: test context\\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\\n        assert_eq(msg_byte_ptr, 4);\\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\\n        assert_eq(msg_block[1], 0);\\n    }\\n\\n    #[test]\\n    fn test_attach_len_to_msg_block() {\\n        let input: INT_BLOCK = [\\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\\n            1849316213, 1651139939,\\n        ];\\n        /// Safety: testing context\\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\\n        assert_eq(msg_block[1], 0);\\n        assert_eq(msg_block[15], 3584);\\n    }\\n}\\n"},"51":{"path":"std/option.nr","source":"use crate::cmp::{Eq, Ord, Ordering};\\nuse crate::default::Default;\\nuse crate::hash::{Hash, Hasher};\\n\\npub struct Option<T> {\\n    _is_some: bool,\\n    _value: T,\\n}\\n\\nimpl<T> Option<T> {\\n    /// Constructs a None value\\n    pub fn none() -> Self {\\n        Self { _is_some: false, _value: crate::mem::zeroed() }\\n    }\\n\\n    /// Constructs a Some wrapper around the given value\\n    pub fn some(_value: T) -> Self {\\n        Self { _is_some: true, _value }\\n    }\\n\\n    /// True if this Option is None\\n    pub fn is_none(self) -> bool {\\n        !self._is_some\\n    }\\n\\n    /// True if this Option is Some\\n    pub fn is_some(self) -> bool {\\n        self._is_some\\n    }\\n\\n    /// Asserts `self.is_some()` and returns the wrapped value.\\n    pub fn unwrap(self) -> T {\\n        assert(self._is_some);\\n        self._value\\n    }\\n\\n    /// Returns the inner value without asserting `self.is_some()`\\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\\n    /// only that it will be of type `T`.\\n    pub fn unwrap_unchecked(self) -> T {\\n        self._value\\n    }\\n\\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\\n    pub fn unwrap_or(self, default: T) -> T {\\n        if self._is_some {\\n            self._value\\n        } else {\\n            default\\n        }\\n    }\\n\\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\\n    /// a default value.\\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\\n        if self._is_some {\\n            self._value\\n        } else {\\n            default()\\n        }\\n    }\\n\\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\\n        assert(self.is_some(), message);\\n        self._value\\n    }\\n\\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\\n        if self._is_some {\\n            Option::some(f(self._value))\\n        } else {\\n            Option::none()\\n        }\\n    }\\n\\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\\n        if self._is_some {\\n            f(self._value)\\n        } else {\\n            default\\n        }\\n    }\\n\\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\\n        if self._is_some {\\n            f(self._value)\\n        } else {\\n            default()\\n        }\\n    }\\n\\n    /// Returns None if self is None. Otherwise, this returns `other`.\\n    pub fn and(self, other: Self) -> Self {\\n        if self.is_none() {\\n            Option::none()\\n        } else {\\n            other\\n        }\\n    }\\n\\n    /// If self is None, this returns None. Otherwise, this calls the given function\\n    /// with the Some value contained within self, and returns the result of that call.\\n    ///\\n    /// In some languages this function is called `flat_map` or `bind`.\\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\\n        if self._is_some {\\n            f(self._value)\\n        } else {\\n            Option::none()\\n        }\\n    }\\n\\n    /// If self is Some, return self. Otherwise, return `other`.\\n    pub fn or(self, other: Self) -> Self {\\n        if self._is_some {\\n            self\\n        } else {\\n            other\\n        }\\n    }\\n\\n    /// If self is Some, return self. Otherwise, return `default()`.\\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\\n        if self._is_some {\\n            self\\n        } else {\\n            default()\\n        }\\n    }\\n\\n    // If only one of the two Options is Some, return that option.\\n    // Otherwise, if both options are Some or both are None, None is returned.\\n    pub fn xor(self, other: Self) -> Self {\\n        if self._is_some {\\n            if other._is_some {\\n                Option::none()\\n            } else {\\n                self\\n            }\\n        } else if other._is_some {\\n            other\\n        } else {\\n            Option::none()\\n        }\\n    }\\n\\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\\n    /// Otherwise, this returns `None`\\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\\n        if self._is_some {\\n            if predicate(self._value) {\\n                self\\n            } else {\\n                Option::none()\\n            }\\n        } else {\\n            Option::none()\\n        }\\n    }\\n\\n    /// Flattens an Option<Option<T>> into a Option<T>.\\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\\n        if option._is_some {\\n            option._value\\n        } else {\\n            Option::none()\\n        }\\n    }\\n}\\n\\nimpl<T> Default for Option<T> {\\n    fn default() -> Self {\\n        Option::none()\\n    }\\n}\\n\\nimpl<T> Eq for Option<T>\\nwhere\\n    T: Eq,\\n{\\n    fn eq(self, other: Self) -> bool {\\n        if self._is_some == other._is_some {\\n            if self._is_some {\\n                self._value == other._value\\n            } else {\\n                true\\n            }\\n        } else {\\n            false\\n        }\\n    }\\n}\\n\\nimpl<T> Hash for Option<T>\\nwhere\\n    T: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self._is_some.hash(state);\\n        if self._is_some {\\n            self._value.hash(state);\\n        }\\n    }\\n}\\n\\n// For this impl we\'re declaring Option::none < Option::some\\nimpl<T> Ord for Option<T>\\nwhere\\n    T: Ord,\\n{\\n    fn cmp(self, other: Self) -> Ordering {\\n        if self._is_some {\\n            if other._is_some {\\n                self._value.cmp(other._value)\\n            } else {\\n                Ordering::greater()\\n            }\\n        } else if other._is_some {\\n            Ordering::less()\\n        } else {\\n            Ordering::equal()\\n        }\\n    }\\n}\\n"},"52":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\\n    assert(false, message);\\n    crate::mem::zeroed()\\n}\\n"},"62":{"path":"/build-volume/noir-projects/noir-contracts/contracts/schnorr_account_contract/src/main.nr","source":"mod public_key_note;\\n\\n// Account contract that uses Schnorr signatures for authentication.\\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\\nuse dep::aztec::macros::aztec;\\n\\n#[aztec]\\npub contract SchnorrAccount {\\n    use dep::authwit::{\\n        account::AccountActions,\\n        auth::{compute_authwit_message_hash, compute_authwit_nullifier},\\n        auth_witness::get_auth_witness,\\n        entrypoint::{app::AppPayload, fee::FeePayload},\\n    };\\n    use dep::aztec::encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note;\\n    use dep::aztec::hash::compute_siloed_nullifier;\\n    use dep::aztec::macros::{\\n        functions::{initializer, noinitcheck, private, view},\\n        storage::storage,\\n    };\\n    use dep::aztec::oracle::get_nullifier_membership_witness::get_low_nullifier_membership_witness;\\n    use dep::aztec::prelude::{AztecAddress, PrivateContext, PrivateImmutable};\\n\\n    use crate::public_key_note::PublicKeyNote;\\n\\n    #[storage]\\n    struct Storage<Context> {\\n        // docs:start:public_key\\n        signing_public_key: PrivateImmutable<PublicKeyNote, Context>,\\n        // docs:end:public_key\\n    }\\n\\n    // Constructs the contract\\n    #[private]\\n    #[initializer]\\n    fn constructor(signing_pub_key_x: Field, signing_pub_key_y: Field) {\\n        let this = context.this_address();\\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\\n        storage.signing_public_key.initialize(&mut pub_key_note).emit(encode_and_encrypt_note(\\n            &mut context,\\n            this,\\n            this,\\n        ));\\n    }\\n\\n    // Note: If you globally change the entrypoint signature don\'t forget to update account_entrypoint.ts file\\n    #[private]\\n    #[noinitcheck]\\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\\n        let actions = AccountActions::init(&mut context, is_valid_impl);\\n        actions.entrypoint(app_payload, fee_payload, cancellable);\\n    }\\n\\n    #[private]\\n    #[noinitcheck]\\n    #[view]\\n    fn verify_private_authwit(inner_hash: Field) -> Field {\\n        let actions = AccountActions::init(&mut context, is_valid_impl);\\n        actions.verify_private_authwit(inner_hash)\\n    }\\n\\n    #[contract_library_method]\\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\\n        // docs:start:is_valid_impl\\n        // Load public key from storage\\n        let storage = Storage::init(context);\\n        let public_key = storage.signing_public_key.get_note();\\n\\n        // Load auth witness\\n        /// Safety: The witness is only used as a \\"magical value\\" that makes the signature verification below pass.\\n        /// Hence it\'s safe.\\n        let witness: [Field; 64] = unsafe { get_auth_witness(outer_hash) };\\n        let mut signature: [u8; 64] = [0; 64];\\n        for i in 0..64 {\\n            signature[i] = witness[i] as u8;\\n        }\\n\\n        let pub_key = std::embedded_curve_ops::EmbeddedCurvePoint {\\n            x: public_key.x,\\n            y: public_key.y,\\n            is_infinite: false,\\n        };\\n        // Verify signature of the payload bytes\\n        schnorr::verify_signature(pub_key, signature, outer_hash.to_be_bytes::<32>())\\n        // docs:end:is_valid_impl\\n    }\\n\\n    /**\\n    * @notice Helper function to check validity of private authwitnesses\\n    * @param consumer The address of the consumer of the message\\n    * @param message_hash The message hash of the message to check the validity\\n    * @return True if the message_hash can be consumed, false otherwise\\n    */\\n    unconstrained fn lookup_validity(consumer: AztecAddress, inner_hash: Field) -> pub bool {\\n        let public_key = storage.signing_public_key.view_note();\\n\\n        let message_hash = compute_authwit_message_hash(\\n            consumer,\\n            context.chain_id(),\\n            context.version(),\\n            inner_hash,\\n        );\\n\\n        let witness: [Field; 64] = get_auth_witness(message_hash);\\n        let mut signature: [u8; 64] = [0; 64];\\n        for i in 0..64 {\\n            signature[i] = witness[i] as u8;\\n        }\\n        let pub_key = std::embedded_curve_ops::EmbeddedCurvePoint {\\n            x: public_key.x,\\n            y: public_key.y,\\n            is_infinite: false,\\n        };\\n        let valid_in_private =\\n            schnorr::verify_signature(pub_key, signature, message_hash.to_be_bytes::<32>());\\n\\n        // Compute the nullifier and check if it is spent\\n        // This will BLINDLY TRUST the oracle, but the oracle is us, and\\n        // it is not as part of execution of the contract, so we are good.\\n        let nullifier = compute_authwit_nullifier(context.this_address(), inner_hash);\\n        let siloed_nullifier = compute_siloed_nullifier(consumer, nullifier);\\n        let lower_wit =\\n            get_low_nullifier_membership_witness(context.block_number(), siloed_nullifier);\\n        let is_spent = lower_wit.leaf_preimage.nullifier == siloed_nullifier;\\n\\n        !is_spent & valid_in_private\\n    }\\n}\\n"},"63":{"path":"/build-volume/noir-projects/noir-contracts/contracts/schnorr_account_contract/src/public_key_note.nr","source":"use dep::aztec::{\\n    keys::getters::{get_nsk_app, get_public_keys},\\n    macros::notes::note,\\n    note::utils::compute_note_hash_for_nullify,\\n    protocol_types::{\\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\\n        hash::poseidon2_hash_with_separator, traits::Packable,\\n    },\\n};\\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\\n\\n// Stores a public key composed of two fields\\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\\n#[note]\\npub struct PublicKeyNote {\\n    x: Field,\\n    y: Field,\\n    owner: AztecAddress,\\n}\\n\\nimpl NullifiableNote for PublicKeyNote {\\n    fn compute_nullifier(\\n        self,\\n        context: &mut PrivateContext,\\n        note_hash_for_nullify: Field,\\n    ) -> Field {\\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\\n        let secret = context.request_nsk_app(owner_npk_m_hash);\\n        poseidon2_hash_with_separator(\\n            [note_hash_for_nullify, secret],\\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\\n        )\\n    }\\n\\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\\n        let secret = get_nsk_app(owner_npk_m_hash);\\n        poseidon2_hash_with_separator(\\n            [note_hash_for_nullify, secret],\\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\\n        )\\n    }\\n}\\n\\nimpl PublicKeyNote {\\n    pub fn new(x: Field, y: Field, owner: AztecAddress) -> Self {\\n        PublicKeyNote { x, y, owner, header: NoteHeader::empty() }\\n    }\\n}\\n"},"64":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::{\\n    context::PrivateContext,\\n    hash::poseidon2_hash_with_separator,\\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\\n};\\n\\nuse crate::auth::{compute_authwit_message_hash, IS_VALID_SELECTOR};\\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\\n\\npub struct AccountActions<Context> {\\n    context: Context,\\n    is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\\n}\\n\\nimpl<Context> AccountActions<Context> {\\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\\n        AccountActions { context, is_valid_impl }\\n    }\\n}\\n\\n/**\\n * An implementation of the Account Action struct for the private context.\\n *\\n * Implements logic to verify authorization and execute payloads.\\n */\\nimpl AccountActions<&mut PrivateContext> {\\n\\n    /**\\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\\n     *\\n     * Executes the `fee_payload` and `app_payload` in sequence.\\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\\n     *\\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\\n     */\\n    // docs:start:entrypoint\\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\\n        let valid_fn = self.is_valid_impl;\\n\\n        let combined_payload_hash = poseidon2_hash_with_separator(\\n            [app_payload.hash(), fee_payload.hash()],\\n            GENERATOR_INDEX__COMBINED_PAYLOAD,\\n        );\\n        assert(valid_fn(self.context, combined_payload_hash));\\n\\n        fee_payload.execute_calls(self.context);\\n        self.context.end_setup();\\n        app_payload.execute_calls(self.context);\\n        if cancellable {\\n            let tx_nullifier =\\n                poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\\n            self.context.push_nullifier(tx_nullifier);\\n        }\\n    }\\n    // docs:end:entrypoint\\n\\n    /**\\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\\n     *\\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\\n     *\\n     * Will revert if the message is not authorized.\\n     *\\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\\n     */\\n    // docs:start:verify_private_authwit\\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\\n        // The `inner_hash` is \\"siloed\\" with the `msg_sender` to ensure that only it can\\n        // consume the message.\\n        // This ensures that contracts cannot consume messages that are not intended for them.\\n        let message_hash = compute_authwit_message_hash(\\n            self.context.msg_sender(),\\n            self.context.chain_id(),\\n            self.context.version(),\\n            inner_hash,\\n        );\\n        let valid_fn = self.is_valid_impl;\\n        assert(valid_fn(self.context, message_hash) == true, \\"Message not authorized by account\\");\\n        IS_VALID_SELECTOR\\n    }\\n    // docs:end:verify_private_authwit\\n}\\n"},"65":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\\nuse dep::aztec::protocol_types::{\\n    abis::function_selector::FunctionSelector,\\n    address::AztecAddress,\\n    constants::{\\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\\n    },\\n    hash::poseidon2_hash_with_separator,\\n};\\n\\n/**\\n * Authenticaion witness helper library\\n *\\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\\n * (e.g. protocols or other users) to execute an action on their behalf.\\n *\\n * This library provides helper functions to manage such witnesses.\\n * The authentication witness, is some \\"witness\\" (data) that authenticates a `message_hash`.\\n * The simplest example of an authentication witness, is a signature. The signature is the \\"evidence\\",\\n * that the signer has seen the message, agrees with it, and has allowed it.\\n * It does not need to be a signature. It could be any kind of \\"proof\\" that the message is allowed.\\n * Another proof could be knowing some kind of secret, or having some kind of \\"token\\" that allows the message.\\n *\\n * The `message_hash` is a hash of the following structure:\\n * hash(consumer, chain_id, version, inner_hash)\\n * - consumer: the address of the contract that is \\"consuming\\" the message,\\n * - chain_id: the chain id of the chain that the message is being consumed on,\\n * - version: the version of the chain that the message is being consumed on,\\n * - inner_hash: the hash of the \\"inner\\" message that is being consumed, this is the \\"actual\\" message or action.\\n *\\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\\n * a hash of the \\"action\\" to approve, along with who made the call. As part of this library, we provide a few\\n * helper functions to deal with such messages.\\n *\\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\\n * This can be used to let some contract \\"allow\\" another contract to act on its behalf, as long as it can\\n * show that it is acting on behalf of the contract.\\n *\\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\\n * derived as:\\n * inner_hash = hash(caller, \\"transfer\\", hash(to, amount))\\n *\\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\\n * the arguments for the transfer.\\n *\\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\\n * allowed to transfer the tokens.\\n *\\n *\\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\\n * is executed on the user\'s device, so we can use `oracles` to \\"ask\\" the user (not contract) for information. In public\\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \\"registry\\"\\n * to store the messages that we have approved.\\n *\\n * A simple example would be a \\"token\\" that is being \\"pulled\\" from one account into another. We will first outline\\n * how this would look in private, and then in public later.\\n *\\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\\n * convince the `Token` contract that it is allowed to do so.\\n *\\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\\n * execute that call.\\n *\\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\\n * funds from `Alice`.\\n *\\n * To ensure that the same \\"approval\\" cannot be used multiple times, we also compute a `nullifier` for the\\n * authentication witness, and emit it from the `Token` contract (consumer).\\n *\\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\\n *\\n *\\n *  Person          Contract              Contract               Contract\\n *  Alice          Alice Account          Token                   DeFi\\n *   |                  |                  |                      |\\n *   | Defi.deposit(Token, 1000)           |                      |\\n *   |-----------------\x3e|                  |                      |\\n *   |                  | deposit(Token, 1000)                    |\\n *   |                  |----------------------------------------\x3e|\\n *   |                  |                  |                      |\\n *   |                  |                  | transfer(Alice, Defi, 1000)\\n *   |                  |                  |<---------------------|\\n *   |                  |                  |                      |\\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\\n *   |                  |<-----------------|                      |\\n *   |                  |                  |                      |\\n *   | Please give me AuthWit for DeFi     |                      |\\n *   | calling transfer(Alice, Defi, 1000) |                      |\\n *   |<-----------------|                  |                      |\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\\n *   |-----------------\x3e|                  |                      |\\n *   |                  | AuthWit validity |                      |\\n *   |                  |-----------------\x3e|                      |\\n *   |                  |                  |                      |\\n *   |                  |       throw if invalid AuthWit          |\\n *   |                  |                  |                      |\\n *   |                  |       emit AuthWit nullifier            |\\n *   |                  |                  |                      |\\n *   |                  |       transfer(Alice, Defi, 1000)       |\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *   |                  |                  | success              |\\n *   |                  |                  |---------------------\x3e|\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *   |                  |                  |           deposit(Token, 1000)\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *\\n *\\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\\n * the messages that we have approved.\\n *\\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\\n *\\n * The `Token` contract can then try to \\"spend\\" the approval by calling `consume` on the registry. If the message\\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\\n * registry, see `main.nr` in `auth_registry_contract`.\\n *\\n * Person          Contract              Contract            Contract               Contract\\n * Alice          Alice Account          Registry             Token                   DeFi\\n *   |                  |                    |                   |                      |\\n *   | Registry.set_authorized(..., true)    |                   |                      |\\n *   |-----------------\x3e|                    |                   |                      |\\n *   |                  | set_authorized(..., true)              |                      |\\n *   |                  |-------------------\x3e|                   |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |         set authorized to true         |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |                      |\\n *   | Defi.deposit(Token, 1000)             |                   |                      |\\n *   |-----------------\x3e|                    |                   |                      |\\n *   |                  | deposit(Token, 1000)                   |                      |\\n *   |                  |--------------------------------------------------------------\x3e|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\\n *   |                  |                    |                   |<---------------------|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\\n *   |                  |                    |<------------------|                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |          throw if invalid AuthWit      |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |           set authorized to false      |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    | AuthWit validity  |                      |\\n *   |                  |                    |------------------\x3e|                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\\n *   |                  |                    |                   |<--------------------\x3e|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   | success              |\\n *   |                  |                    |                   |---------------------\x3e|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |     deposit(Token, 1000)\\n *   |                  |                    |                   |                      |\\n *\\n *\\n * --- FAQ ---\\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\\"IS_VALID()\\")` instead of just returning a boolean?\\n * A:   We want to make sure that we don\'t accidentally return `true` if there is a collision in the function selector.\\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\\n *      a success flag.\\n *\\n * Q:   Why are we using static calls?\\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\\n *\\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\\n *\\n * Q:   Why is the chain id and the version part of the message hash?\\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\\n *      chain to avoid a case where the same message could be used across multiple chains.\\n */\\n\\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\\"IS_VALID()\\")\\n\\n/**\\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\\n *\\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the current call\\n */\\n// docs:start:assert_current_call_valid_authwit\\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\\n    let inner_hash = compute_inner_authwit_hash([\\n        context.msg_sender().to_field(),\\n        context.selector().to_field(),\\n        context.args_hash,\\n    ]);\\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\\n}\\n// docs:end:assert_current_call_valid_authwit\\n\\n/**\\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\\n *\\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the current call\\n * @param inner_hash The hash of the message to authorize\\n */\\npub fn assert_inner_hash_valid_authwit(\\n    context: &mut PrivateContext,\\n    on_behalf_of: AztecAddress,\\n    inner_hash: Field,\\n) {\\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\\n    let result: Field = context\\n        .static_call_private_function(\\n            on_behalf_of,\\n            comptime { FunctionSelector::from_signature(\\"verify_private_authwit(Field)\\") },\\n            [inner_hash],\\n        )\\n        .get_preimage();\\n    assert(result == IS_VALID_SELECTOR, \\"Message not authorized by account\\");\\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\\n    context.push_nullifier(nullifier);\\n}\\n\\n/**\\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\\n *\\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\\n *\\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the current call\\n */\\n// docs:start:assert_current_call_valid_authwit_public\\npub unconstrained fn assert_current_call_valid_authwit_public(\\n    context: &mut PublicContext,\\n    on_behalf_of: AztecAddress,\\n) {\\n    let inner_hash = compute_inner_authwit_hash([\\n        (*context).msg_sender().to_field(),\\n        (*context).selector().to_field(),\\n        (*context).get_args_hash(),\\n    ]);\\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\\n}\\n// docs:end:assert_current_call_valid_authwit_public\\n\\n/**\\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\\n *\\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\\n *\\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\\n */\\npub unconstrained fn assert_inner_hash_valid_authwit_public(\\n    context: &mut PublicContext,\\n    on_behalf_of: AztecAddress,\\n    inner_hash: Field,\\n) {\\n    let results: [Field] = context.call_public_function(\\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\\n        comptime { FunctionSelector::from_signature(\\"consume((Field),Field)\\") },\\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\\n        GasOpts::default(),\\n    );\\n    assert(results.len() == 1, \\"Invalid response from registry\\");\\n    assert(results[0] == IS_VALID_SELECTOR, \\"Message not authorized by account\\");\\n}\\n\\n/**\\n * Compute the `message_hash` from a function call to be used by an authentication witness\\n *\\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\\n * B to transfer T on its behalf.\\n *\\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\\n * @param chain_id The chain id of the chain that the message is being consumed on\\n * @param version The version of the chain that the message is being consumed on\\n * @param selector The function selector of the function that is being called\\n * @param args The arguments of the function that is being called\\n */\\n// docs:start:compute_authwit_message_hash_from_call\\npub fn compute_authwit_message_hash_from_call<let N: u32>(\\n    caller: AztecAddress,\\n    consumer: AztecAddress,\\n    chain_id: Field,\\n    version: Field,\\n    selector: FunctionSelector,\\n    args: [Field; N],\\n) -> Field {\\n    let args_hash = hash_args_array(args);\\n    let inner_hash =\\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\\n}\\n// docs:end:compute_authwit_message_hash_from_call\\n\\n/**\\n * Computes the `inner_hash` of the authentication witness\\n *\\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\\n * that is not necessarily a call, but just some \\"bytes\\" or text.\\n *\\n * @param args The arguments to hash\\n */\\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\\n}\\n\\n/**\\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\\n *\\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\\n *\\n * @param on_behalf_of The address that has authorized the `inner_hash`\\n * @param inner_hash The hash of the message to authorize\\n */\\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [on_behalf_of.to_field(), inner_hash],\\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\\n    )\\n}\\n\\n/**\\n * Computes the `message_hash` for the authentication witness\\n *\\n * @param consumer The address of the contract that is consuming the message\\n * @param chain_id The chain id of the chain that the message is being consumed on\\n * @param version The version of the chain that the message is being consumed on\\n * @param inner_hash The hash of the \\"inner\\" message that is being consumed\\n */\\npub fn compute_authwit_message_hash(\\n    consumer: AztecAddress,\\n    chain_id: Field,\\n    version: Field,\\n    inner_hash: Field,\\n) -> Field {\\n    poseidon2_hash_with_separator(\\n        [consumer.to_field(), chain_id, version, inner_hash],\\n        GENERATOR_INDEX__AUTHWIT_OUTER,\\n    )\\n}\\n\\n/**\\n * Helper function to set the authorization status of a message hash\\n *\\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\\n *\\n * @param message_hash The hash of the message to authorize\\n * @param authorize True if the message should be authorized, false if it should be revoked\\n */\\npub unconstrained fn set_authorized(\\n    context: &mut PublicContext,\\n    message_hash: Field,\\n    authorize: bool,\\n) {\\n    let res = context.call_public_function(\\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\\n        comptime { FunctionSelector::from_signature(\\"set_authorized(Field,bool)\\") },\\n        [message_hash, authorize as Field].as_slice(),\\n        GasOpts::default(),\\n    );\\n    assert(res.len() == 0);\\n}\\n\\n/**\\n * Helper function to reject all authwits\\n *\\n * Wraps a public call to the authentication registry to set the `reject_all` flag\\n *\\n * @param reject True if all authwits should be rejected, false otherwise\\n */\\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\\n    let res = context.call_public_function(\\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\\n        comptime { FunctionSelector::from_signature(\\"set_reject_all(bool)\\") },\\n        [context.this_address().to_field(), reject as Field].as_slice(),\\n        GasOpts::default(),\\n    );\\n    assert(res.len() == 0);\\n}\\n"},"66":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\\n\\n/**\\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\\n *\\n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\\n * @return The `auth_witness` for the given `message_hash` as Field array.\\n */\\npub unconstrained fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\\n    get_auth_witness_oracle(message_hash)\\n}\\n"},"68":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::{\\n    prelude::PrivateContext,\\n    protocol_types::{\\n        constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD,\\n        hash::poseidon2_hash_with_separator,\\n        traits::{Hash, Serialize},\\n    },\\n};\\nuse std::meta::derive;\\n\\nuse crate::entrypoint::function_call::FunctionCall;\\n\\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u32 = 424;\\n\\nglobal ACCOUNT_MAX_CALLS: u32 = 4;\\n\\n// Note: If you change the following struct you have to update default_entrypoint.ts\\n// docs:start:app-payload-struct\\n#[derive(Serialize)]\\npub struct AppPayload {\\n    function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\\n    nonce: Field,\\n}\\n// docs:end:app-payload-struct\\n\\nimpl Hash for AppPayload {\\n    fn hash(self) -> Field {\\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__SIGNATURE_PAYLOAD)\\n    }\\n}\\n\\nimpl AppPayload {\\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\\n\\n        for i in 0..ACCOUNT_MAX_CALLS {\\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\\n        }\\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\\n\\n        bytes.storage()\\n    }\\n\\n    // Executes all private and public calls\\n    // docs:start:entrypoint-execute-calls\\n    fn execute_calls(self, context: &mut PrivateContext) {\\n        for call in self.function_calls {\\n            if !call.target_address.is_zero() {\\n                if call.is_public {\\n                    context.call_public_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                } else {\\n                    let _result = context.call_private_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                }\\n            }\\n        }\\n    }\\n    // docs:end:entrypoint-execute-calls\\n}\\n"},"69":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use crate::entrypoint::function_call::FunctionCall;\\nuse dep::aztec::{\\n    prelude::PrivateContext,\\n    protocol_types::{\\n        constants::GENERATOR_INDEX__FEE_PAYLOAD,\\n        hash::poseidon2_hash_with_separator,\\n        traits::{Hash, Serialize},\\n    },\\n};\\nuse std::meta::derive;\\n\\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: u32 = 228;\\n\\nglobal MAX_FEE_FUNCTION_CALLS: u32 = 2;\\n\\n// docs:start:fee-payload-struct\\n#[derive(Serialize)]\\npub struct FeePayload {\\n    function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\\n    nonce: Field,\\n    is_fee_payer: bool,\\n}\\n// docs:end:fee-payload-struct\\n\\nimpl Hash for FeePayload {\\n    fn hash(self) -> Field {\\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__FEE_PAYLOAD)\\n    }\\n}\\n\\nimpl FeePayload {\\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\\n\\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\\n        }\\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\\n        bytes.push(self.is_fee_payer as u8);\\n\\n        bytes.storage()\\n    }\\n\\n    fn execute_calls(self, context: &mut PrivateContext) {\\n        for call in self.function_calls {\\n            if !call.target_address.is_zero() {\\n                if call.is_public {\\n                    context.call_public_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                } else {\\n                    let _result = context.call_private_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                }\\n            }\\n        }\\n        if self.is_fee_payer {\\n            context.set_as_fee_payer();\\n        }\\n    }\\n}\\n"},"80":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use dep::protocol_types::debug_log::debug_log_format;\\n\\nuse crate::{\\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\\n    hash::{ArgsHasher, hash_args_array},\\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\\n    messaging::process_l1_to_l2_message,\\n    oracle::{\\n        block_header::get_block_header_at,\\n        call_private_function::call_private_function_internal,\\n        enqueue_public_function_call::{\\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\\n            set_public_teardown_function_call_internal,\\n        },\\n        execution_cache,\\n        key_validation_request::get_key_validation_request,\\n        notes::{notify_created_nullifier, notify_nullified_note},\\n    },\\n};\\nuse dep::protocol_types::{\\n    abis::{\\n        call_context::CallContext,\\n        function_selector::FunctionSelector,\\n        log::Log,\\n        log_hash::LogHash,\\n        max_block_number::MaxBlockNumber,\\n        note_hash::NoteHash,\\n        nullifier::Nullifier,\\n        private_call_request::PrivateCallRequest,\\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\\n        private_log::PrivateLogData,\\n        public_call_request::PublicCallRequest,\\n        read_request::ReadRequest,\\n        side_effect::Counted,\\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    block_header::BlockHeader,\\n    constants::{\\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\\n    },\\n    messaging::l2_to_l1_message::L2ToL1Message,\\n    traits::Empty,\\n};\\n\\n// When finished, one can call .finish() to convert back to the abi\\npub struct PrivateContext {\\n    // docs:start:private-context\\n    pub inputs: PrivateContextInputs,\\n    pub side_effect_counter: u32,\\n\\n    pub min_revertible_side_effect_counter: u32,\\n    pub is_fee_payer: bool,\\n\\n    pub args_hash: Field,\\n    pub return_hash: Field,\\n\\n    pub max_block_number: MaxBlockNumber,\\n\\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\\n\\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\\n\\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\\n    pub public_teardown_call_request: PublicCallRequest,\\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\\n    // docs:end:private-context\\n\\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\\n    pub historical_header: BlockHeader,\\n\\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\\n\\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\\n    // fetching the same request multiple times.\\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\\n}\\n\\nimpl PrivateContext {\\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\\n        PrivateContext {\\n            inputs,\\n            side_effect_counter: inputs.start_side_effect_counter + 1,\\n            min_revertible_side_effect_counter: 0,\\n            is_fee_payer: false,\\n            args_hash,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            historical_header: inputs.historical_header,\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n\\n    pub fn msg_sender(self) -> AztecAddress {\\n        self.inputs.call_context.msg_sender\\n    }\\n\\n    pub fn this_address(self) -> AztecAddress {\\n        self.inputs.call_context.contract_address\\n    }\\n\\n    pub fn chain_id(self) -> Field {\\n        self.inputs.tx_context.chain_id\\n    }\\n\\n    pub fn version(self) -> Field {\\n        self.inputs.tx_context.version\\n    }\\n\\n    pub fn selector(self) -> FunctionSelector {\\n        self.inputs.call_context.function_selector\\n    }\\n\\n    pub fn get_args_hash(self) -> Field {\\n        self.args_hash\\n    }\\n\\n    pub fn push_note_hash(&mut self, note_hash: Field) {\\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\\n\\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\\n        debug_log_format(\\n            \\"Context.note_hashes, after pushing new note hash: {0}\\",\\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\\n        );\\n    }\\n\\n    pub fn push_nullifier(&mut self, nullifier: Field) {\\n        notify_created_nullifier(nullifier);\\n        self.nullifiers.push(\\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\\n        );\\n    }\\n\\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\\n        let nullifier_counter = self.next_counter();\\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\\n        self.nullifiers.push(\\n            Nullifier {\\n                value: nullifier,\\n                note_hash: nullified_note_hash,\\n                counter: nullifier_counter,\\n            },\\n        );\\n    }\\n\\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\\n    // included in).\\n    pub fn get_block_header(self) -> BlockHeader {\\n        self.historical_header\\n    }\\n\\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\\n    // of historical header.\\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\\n        get_block_header_at(block_number, self)\\n    }\\n\\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\\n        execution_cache::store(returns_hasher.fields);\\n        self.return_hash = returns_hasher.hash();\\n    }\\n\\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\\n        PrivateCircuitPublicInputs {\\n            call_context: self.inputs.call_context,\\n            args_hash: self.args_hash,\\n            returns_hash: self.return_hash,\\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\\n            is_fee_payer: self.is_fee_payer,\\n            max_block_number: self.max_block_number,\\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\\n            key_validation_requests_and_generators: self\\n                .key_validation_requests_and_generators\\n                .storage(),\\n            note_hashes: self.note_hashes.storage(),\\n            nullifiers: self.nullifiers.storage(),\\n            private_call_requests: self.private_call_requests.storage(),\\n            public_call_requests: self.public_call_requests.storage(),\\n            public_teardown_call_request: self.public_teardown_call_request,\\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\\n            end_side_effect_counter: self.side_effect_counter,\\n            private_logs: self.private_logs.storage(),\\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\\n            historical_header: self.historical_header,\\n            tx_context: self.inputs.tx_context,\\n        }\\n    }\\n\\n    pub fn set_as_fee_payer(&mut self) {\\n        dep::protocol_types::debug_log::debug_log_format(\\n            \\"Setting {0} as fee payer\\",\\n            [self.this_address().to_field()],\\n        );\\n        self.is_fee_payer = true;\\n    }\\n\\n    pub fn end_setup(&mut self) {\\n        // dep::protocol_types::debug_log::debug_log_format(\\n        //     \\"Ending setup at counter {0}\\",\\n        //     [self.side_effect_counter as Field]\\n        // );\\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\\n    }\\n\\n    // docs:start:max-block-number\\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\\n        // docs:end:max-block-number\\n        self.max_block_number =\\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\\n    }\\n\\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\\n        self.note_hash_read_requests.push(side_effect);\\n    }\\n\\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\\n        self.nullifier_read_requests.push(request);\\n    }\\n\\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\\n    }\\n\\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\\n    }\\n\\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\\n        let cached_request =\\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\\n\\n        if cached_request.pk_m.hash() == pk_m_hash {\\n            // We get a match so the cached request is the latest one\\n            cached_request.sk_app\\n        } else {\\n            // We didn\'t get a match meaning the cached result is stale\\n            // Typically we\'d validate keys by showing that they are the preimage of `pk_m_hash`, but that\'d require\\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\\n            // to `pk_m_hash`.\\n\\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\\n            /// for the correct public key has been received.\\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\\n            assert_eq(request.pk_m.hash(), pk_m_hash, \\"Obtained invalid key validation request\\");\\n\\n            self.key_validation_requests_and_generators.push(\\n                KeyValidationRequestAndGenerator {\\n                    request,\\n                    sk_app_generator: sk_generators[key_index],\\n                },\\n            );\\n            self.last_key_validation_requests[key_index] = Option::some(request);\\n            request.sk_app\\n        }\\n    }\\n\\n    // docs:start:context_message_portal\\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\\n        // docs:end:context_message_portal\\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\\n        self.l2_to_l1_msgs.push(message);\\n    }\\n\\n    // docs:start:context_consume_l1_to_l2_message\\n    // docs:start:consume_l1_to_l2_message\\n    pub fn consume_l1_to_l2_message(\\n        &mut self,\\n        content: Field,\\n        secret: Field,\\n        sender: EthAddress,\\n        leaf_index: Field,\\n    ) {\\n        // docs:end:context_consume_l1_to_l2_message\\n        let nullifier = process_l1_to_l2_message(\\n            self.historical_header.state.l1_to_l2_message_tree.root,\\n            self.this_address(),\\n            sender,\\n            self.chain_id(),\\n            self.version(),\\n            content,\\n            secret,\\n            leaf_index,\\n        );\\n\\n        // Push nullifier (and the \\"commitment\\" corresponding to this can be \\"empty\\")\\n        self.push_nullifier(nullifier)\\n    }\\n    // docs:end:consume_l1_to_l2_message\\n\\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn emit_raw_note_log(\\n        &mut self,\\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\\n        note_hash_counter: u32,\\n    ) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_private_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) -> ReturnsHash {\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        let start_side_effect_counter = self.side_effect_counter;\\n\\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\\n        /// to `returns_hash` and the side effects counter to increment from start to end.\\n        let (end_side_effect_counter, returns_hash) = unsafe {\\n            call_private_function_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                start_side_effect_counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        self.private_call_requests.push(\\n            PrivateCallRequest {\\n                call_context: CallContext {\\n                    msg_sender: self.this_address(),\\n                    contract_address,\\n                    function_selector,\\n                    is_static_call,\\n                },\\n                args_hash,\\n                returns_hash,\\n                start_side_effect_counter,\\n                end_side_effect_counter,\\n            },\\n        );\\n\\n        // TODO (fees) figure out why this crashes the prover and enable it\\n        // we need this in order to pay fees inside child call contexts\\n        // assert(\\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\\n        //     | (item.public_inputs.min_revertible_side_effect_counter\\n        //         > self.min_revertible_side_effect_counter)\\n        // );\\n        // if item.public_inputs.min_revertible_side_effect_counter\\n        //     > self.min_revertible_side_effect_counter {\\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\\n        // }\\n        self.side_effect_counter = end_side_effect_counter + 1;\\n        ReturnsHash::new(returns_hash)\\n    }\\n\\n    pub fn call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_public_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            enqueue_public_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        // Public calls are rerouted through the dispatch function.\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        let call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n\\n        self.public_call_requests.push(Counted::new(call_request, counter));\\n    }\\n\\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.set_public_teardown_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn set_public_teardown_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            set_public_teardown_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        self.public_teardown_call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n    }\\n\\n    fn next_counter(&mut self) -> u32 {\\n        let counter = self.side_effect_counter;\\n        self.side_effect_counter += 1;\\n        counter\\n    }\\n}\\n\\nimpl Empty for PrivateContext {\\n    fn empty() -> Self {\\n        PrivateContext {\\n            inputs: PrivateContextInputs::empty(),\\n            side_effect_counter: 0 as u32,\\n            min_revertible_side_effect_counter: 0 as u32,\\n            is_fee_payer: false,\\n            args_hash: 0,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            historical_header: BlockHeader::empty(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n}\\n"},"83":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use crate::oracle::{\\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\\n    storage::storage_read,\\n};\\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\\n\\npub struct UnconstrainedContext {\\n    block_number: u32,\\n    contract_address: AztecAddress,\\n    version: Field,\\n    chain_id: Field,\\n}\\n\\nimpl UnconstrainedContext {\\n    pub unconstrained fn new() -> Self {\\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\\n        // not even be accessed. However any performance gains are minimal, and we\'d rather fail early if a user\\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\\n        // available.\\n        let block_number = get_block_number();\\n        let contract_address = get_contract_address();\\n        let chain_id = get_chain_id();\\n        let version = get_version();\\n        Self { block_number, contract_address, version, chain_id }\\n    }\\n\\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\\n        let block_number = get_block_number();\\n        let chain_id = get_chain_id();\\n        let version = get_version();\\n        Self { block_number, contract_address, version, chain_id }\\n    }\\n\\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\\n        let chain_id = get_chain_id();\\n        let version = get_version();\\n        Self { block_number, contract_address, version, chain_id }\\n    }\\n\\n    pub fn block_number(self) -> u32 {\\n        self.block_number\\n    }\\n\\n    pub fn this_address(self) -> AztecAddress {\\n        self.contract_address\\n    }\\n\\n    pub fn version(self) -> Field {\\n        self.version\\n    }\\n\\n    pub fn chain_id(self) -> Field {\\n        self.chain_id\\n    }\\n\\n    pub unconstrained fn raw_storage_read<let N: u32>(\\n        self: Self,\\n        storage_slot: Field,\\n    ) -> [Field; N] {\\n        storage_read(self.this_address(), storage_slot, self.block_number())\\n    }\\n\\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\\n    where\\n        T: Packable<N>,\\n    {\\n        T::unpack(self.raw_storage_read(storage_slot))\\n    }\\n}\\n"},"85":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr","source":"use std::hash::{from_field_unsafe as fr_to_fq_unsafe, sha256};\\n\\nuse dep::protocol_types::{\\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\\n    hash::poseidon2_hash_with_separator,\\n    point::Point,\\n};\\n\\nuse crate::utils::point::point_to_bytes;\\n\\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\\n    shared_secret: Point,\\n) -> [u8; 32] {\\n    let rand1: Field = poseidon2_hash_with_separator(\\n        [shared_secret.x, shared_secret.y],\\n        GENERATOR_INDEX__SYMMETRIC_KEY,\\n    );\\n    let rand2: Field = poseidon2_hash_with_separator(\\n        [shared_secret.x, shared_secret.y],\\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\\n    );\\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\\n    let mut bytes: [u8; 32] = [0; 32];\\n    for i in 0..16 {\\n        bytes[i] = rand1_bytes[i];\\n        bytes[i + 1] = rand2_bytes[i];\\n    }\\n    bytes\\n}\\n\\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\\n    shared_secret: Point,\\n) -> [u8; 32] {\\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\\n\\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\\n    for i in 0..shared_secret_bytes.len() {\\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\\n    }\\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\\n\\n    sha256(shared_secret_bytes_with_separator)\\n}\\n\\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\\n    shared_secret: Point,\\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\\n) -> ([u8; 16], [u8; 16]) {\\n    let random_256_bits = randomness_extraction_fn(shared_secret);\\n    let mut sym_key = [0; 16];\\n    let mut iv = [0; 16];\\n    for i in 0..16 {\\n        sym_key[i] = random_256_bits[i];\\n        iv[i] = random_256_bits[i + 16];\\n    }\\n    (sym_key, iv)\\n}\\n\\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\\n    shared_secret: Point,\\n) -> ([u8; 16], [u8; 16]) {\\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\\n        shared_secret,\\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\\n    )\\n}\\n\\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\\n    shared_secret: Point,\\n) -> ([u8; 16], [u8; 16]) {\\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\\n        shared_secret,\\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\\n    )\\n}\\n"},"89":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr","source":"use crate::{\\n    context::PrivateContext,\\n    encrypted_logs::encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\\n    keys::{\\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\\n        ephemeral::generate_ephemeral_key_pair,\\n    },\\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\\n    oracle::{\\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\\n        random::random,\\n    },\\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\\n};\\nuse dep::protocol_types::{\\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\\n};\\nuse std::aes128::aes128_encrypt;\\n\\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48; // contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\\n\\n/*\\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\\n * It\'s because there are a few more optimisations that can be done for notes,\\n * and so the stuff that looks like duplicated code currently, won\'t be\\n * the same for long.\\n * To modularise now feels premature, because we might get that modularisation wrong.\\n * Much better (imo) to have a flattened templates for log assembly, because it\\n * makes it much easier for us all to follow, it serves as a nice example for the\\n * community to follow (if they wish to roll their own log layouts), and it gives\\n * us more time to spot common patterns across all kinds of log layouts.\\n */\\n\\n/*\\n * LOG CONFIGURATION CHOICES:\\n *\\n * deliver_to: INPUT as recipient: AztecAddress\\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\\n * shared_secret: ephemeral\\n * shared_secret_randomness_extraction_hash: sha256\\n * tag: true\\n * tag_from: INPUT as sender: AztecAddress\\n *\\n * Note-specific:\\n * derive_note_randomness_from_shared_secret: false\\n *\\n */\\n\\n/*\\n * LOG LAYOUT CHOICE:\\n *\\n * Short explanation:\\n * log = [tag, epk, header_ct=[[contract_address, ct_len], pkcs7_pad], ct=[[pt], pkcs7_pad], some bytes padding, some fields padding]\\n *\\n * Long explanation:\\n * tag: Field\\n * epk: [Field, u8]\\n * header_ct: [[u8; 32], [u8; 2], [u8; 16]]\\n * ct: [[u8; 2], [u8; x], [u8; y]]\\n *\\n * More precisely (in pseudocode):\\n *\\n * log = [\\n *     tag: Field,\\n *     Epk: Field,\\n *\\n *     le_bytes_31_to_fields(\\n *\\n *         log_bytes: [\\n *             eph_pk_sign: [u8; 1],\\n *\\n *             header_ciphertext: aes_encrypt(\\n *                 contract_address: [u8; 32],\\n *                 ct_length: [u8; 2],\\n *\\n *                 // the aes128_encrypt fn automatically inserts padding:\\n *                 header_pt_aes_padding: [u8; 14], // `16 - (input.len() % 16)`\\n\\n *             ): [u8; 48],\\n *\\n *             ciphertext: aes_encrypt(\\n *                 final_pt: [\\n *                     pt: {\\n *                         note_bytes: {\\n *                             storage_slot: [u8; 32],\\n *                             note_type_id: [u8; 32],\\n *                             ...note: [u8; N * 32],\\n *                         }: [u8; N * 32 + 64],\\n *                     }: [u8; N * 32 + 64],\\n\\n *                 ]: [u8; N * 32 + 64],\\n *\\n *                 // the aes128_encrypt fn automatically inserts padding:\\n *                 pt_aes_padding: [u8; 16 - ( (|pt_length| + |pt|) % 16 )]\\n *\\n *             ): [u8; |pt| + |pt_aes_padding|]\\n *                [u8; |ct|]\\n *\\n *             log_bytes_padding_to_mult_31: [u8; 31 * ceil((1 + 48 + |ct|)/31) - (1 + 48 + |ct|)],\\n *                                           [u8; p]\\n *\\n *         ]: [u8; 1 + 48 + |ct| + p]\\n *\\n *     ): [Field; (1 + 48 + |ct| + p) / 31]\\n *\\n *     log_fields_padding: [Field; PRIVATE_LOG_SIZE_IN_FIELDS - 2 - (1 + 48 + |ct| + p) / 31],\\n *\\n * ]: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\\n *\\n *\\n */\\n\\n/********************************************************/\\n// Disgusting arithmetic on generics\\n/********************************************************/\\n\\n// In this section, instead of initialising arrays with very complicated generic\\n// arithmetic, such as:\\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] = [0; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))];\\n//... we instead do the arithmetic a little bit at a time, so that the computation\\n// can be audited and understood. Now, we can\'t do arithmetic on generics in the body\\n// of a function, so we abusing functions in the following way:\\n\\n// |full_pt| = |pt| = (N * 32) + 64\\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\\n    [0; PT]\\n}\\n\\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\\n    _full_pt: [u8; FULL_PT],\\n) -> [u8; 16 - (FULL_PT % 16)] {\\n    [0; 16 - (FULL_PT % 16)]\\n}\\n\\n// |ct| = |full_pt| + |pt_aes_padding|\\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\\n    _full_pt: [u8; FULL_PT],\\n    _pt_aes_padding: [u8; PT_AES_PADDING],\\n) -> [u8; FULL_PT + PT_AES_PADDING] {\\n    [0; FULL_PT + PT_AES_PADDING]\\n}\\n\\n// Ok, so we have the following bytes:\\n// eph_pk_sign, header_ciphertext, ciphertext:\\n// Let lbwop = 1 + 48 + |ct| // aka log bytes without padding\\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(_ct: [u8; CT]) -> [u8; 1 + 48 + CT] {\\n    [0; 1 + 48 + CT]\\n}\\n\\n// Recall:\\n//   lbwop := 1 + 48 + |ct| // aka log bytes without padding\\n// We now want to pad b to the next multiple of 31, so as to \\"fill\\" fields.\\n// Let p be that padding.\\n// p = 31 * ceil(lbwop / 31) - lbwop\\n//   = 31 * ((lbwop + 30) // 31) - lbwop\\n//     (because ceil(x / y) = (x + y - 1) // y ).\\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\\n    _lbwop: [u8; LBWOP],\\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\\n}\\n\\n// |log_bytes| = 1 + 48 + |ct| + p // aka log bytes (with padding)\\n// Recall:\\n//   lbwop := 1 + 48 + |ct|\\n//   p is the padding\\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\\n    _lbwop: [u8; LBWOP],\\n    _p: [u8; P],\\n) -> [u8; LBWOP + P] {\\n    [0; LBWOP + P]\\n}\\n\\n// The return type is pasted from the LSP\'s expectation, because it was too difficult\\n// to match its weird way of doing algebra. It doesn\'t know all rules of arithmetic.\\n// PT is the plaintext length.\\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49))] {\\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\\n    p\\n}\\n\\n// The return type is pasted from the LSP\'s expectation, because it was too difficult\\n// to match its weird way of doing algebra. It doesn\'t know all rules of arithmetic.\\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] {\\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\\n    log_bytes\\n}\\n\\n/********************************************************/\\n// End of disgusting arithmetic on generics\\n/********************************************************/\\n\\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\\nfn assert_note_exists<Note, let N: u32>(context: PrivateContext, note: Note)\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    let note_header = note.get_header();\\n    let note_hash_counter = note_header.note_hash_counter;\\n    // TODO(#8589): use typesystem to skip this check when not needed\\n    let note_exists =\\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\\n    assert(note_exists, \\"Can only emit a note log for an existing note.\\");\\n}\\n\\n/// This particular log assembly strategy (AES 128) requires the note (and the\\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\\n/// operates on bytes; not fields.\\n/// NB: The extra `+ 64` bytes is for the note_id and the storage_slot of the note:\\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(note: Note) -> [u8; N * 32 + 64]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    let packed_note = note.pack_content();\\n\\n    let note_header = note.get_header();\\n    let storage_slot = note_header.storage_slot;\\n    let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\\n\\n    // TODO(#10952): The following can be reduced to 7 bits\\n    let note_type_id_bytes: [u8; 32] = Note::get_note_type_id().to_be_bytes();\\n\\n    // We combine all the bytes into plaintext_bytes:\\n    let mut plaintext_bytes: [u8; N * 32 + 64] = [0; N * 32 + 64];\\n    for i in 0..32 {\\n        plaintext_bytes[i] = storage_slot_bytes[i];\\n        plaintext_bytes[32 + i] = note_type_id_bytes[i];\\n    }\\n\\n    for i in 0..packed_note.len() {\\n        let bytes: [u8; 32] = packed_note[i].to_be_bytes();\\n        for j in 0..32 {\\n            plaintext_bytes[64 + i * 32 + j] = bytes[j];\\n        }\\n    }\\n\\n    plaintext_bytes\\n}\\n\\nfn compute_log<Note, let N: u32>(\\n    context: PrivateContext,\\n    note: Note,\\n    recipient: AztecAddress,\\n    sender: AztecAddress,\\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    // *****************************************************************************\\n    // Compute the shared secret\\n    // *****************************************************************************\\n\\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\\n\\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\\n\\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\\n\\n    // TODO: also use this shared secret for deriving note randomness.\\n\\n    // *****************************************************************************\\n    // Compute the plaintext\\n    // *****************************************************************************\\n\\n    let final_plaintext_bytes = compute_note_plaintext_for_this_strategy(note);\\n\\n    // *****************************************************************************\\n    // Convert the plaintext into whatever format the encryption function expects\\n    // *****************************************************************************\\n\\n    // Already done for this strategy: AES expects bytes.\\n\\n    // *****************************************************************************\\n    // Encrypt the plaintext\\n    // *****************************************************************************\\n\\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\\n        ciphertext_shared_secret,\\n    );\\n\\n    let ciphertext_bytes = aes128_encrypt(final_plaintext_bytes, iv, sym_key);\\n\\n    // |full_pt| = |pt_length| + |pt|\\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\\n    // |ct| = |full_pt| + |pt_aes_padding|\\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\\n    //      = 16 + 16 * (|full_pt| // 16)\\n    //      = 16 * (1 + |full_pt| // 16)\\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 64) / 16));\\n\\n    // *****************************************************************************\\n    // Compute the header ciphertext\\n    // *****************************************************************************\\n\\n    let contract_address = context.this_address();\\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\\n\\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\\n    for i in 0..32 {\\n        header_plaintext[i] = contract_address_bytes[i];\\n    }\\n    let offset = 32;\\n    let ciphertext_bytes_length = ciphertext_bytes.len();\\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\\n\\n    // TODO: this is insecure and wasteful:\\n    // \\"Insecure\\", because the esk shouldn\'t be used twice (once for the header,\\n    // and again for the proper ciphertext) (at least, I never got the\\n    // \\"go ahead\\" that this would be safe, unfortunately).\\n    // \\"Wasteful\\", because the exact same computation is happening further down.\\n    // I\'m leaving that 2nd computation where it is, because this 1st computation\\n    // will be imminently deleted, when the header logic is deleted.\\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\\n        ciphertext_shared_secret,\\n    );\\n\\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\\n    // bytes larger than the input in this case.\\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\\n    // I recall that converting a slice to an array incurs constraints, so I\'ll check the length this way instead:\\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\\n\\n    // *****************************************************************************\\n    // Prepend / append more bytes of data to the ciphertext, before converting back\\n    // to fields.\\n    // *****************************************************************************\\n\\n    let mut log_bytes_padding_to_mult_31 =\\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 64>();\\n    /// Safety: this randomness won\'t be constrained to be random. It\'s in the\\n    /// interest of the executor of this fn to encrypt with random bytes.\\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\\n\\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 64>();\\n\\n    assert(\\n        log_bytes.len() % 31 == 0,\\n        \\"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\\",\\n    );\\n\\n    log_bytes[0] = eph_pk_sign_byte;\\n    let mut offset = 1;\\n    for i in 0..header_ciphertext_bytes.len() {\\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\\n    }\\n    offset += header_ciphertext_bytes.len();\\n\\n    for i in 0..ciphertext_bytes.len() {\\n        log_bytes[offset + i] = ciphertext_bytes[i];\\n    }\\n    offset += ciphertext_bytes.len();\\n\\n    for i in 0..log_bytes_padding_to_mult_31.len() {\\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\\n    }\\n\\n    assert(\\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\\n        \\"Something has gone wrong\\",\\n    );\\n\\n    // *****************************************************************************\\n    // Convert bytes back to fields\\n    // *****************************************************************************\\n\\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\\n\\n    // *****************************************************************************\\n    // Prepend / append fields, to create the final log\\n    // *****************************************************************************\\n\\n    // In this strategy, we prepend [tag, eph_pk.x]\\n\\n    // We assume that the sender wants for the recipient to find the tagged note,\\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\\n    // tag will result in the recipient not being able to find the note automatically.\\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\\n\\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\\n\\n    final_log[0] = tag;\\n    final_log[1] = eph_pk.x;\\n\\n    let mut offset = 2;\\n    for i in 0..log_bytes_as_fields.len() {\\n        final_log[offset + i] = log_bytes_as_fields[i];\\n    }\\n    offset += log_bytes_as_fields.len();\\n\\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\\n        /// Safety: randomness cannot be constrained.\\n        final_log[i] = unsafe { random() };\\n    }\\n\\n    final_log\\n}\\n\\nunconstrained fn compute_log_unconstrained<Note, let N: u32>(\\n    context: PrivateContext,\\n    note: Note,\\n    recipient: AztecAddress,\\n    sender: AztecAddress,\\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    compute_log(context, note, recipient, sender)\\n}\\n\\n// This function seems to be affected by the following Noir bug:\\n// https://github.com/noir-lang/noir/issues/5771\\n// If you get weird behavior it might be because of it.\\npub fn encode_and_encrypt_note<Note, let N: u32>(\\n    context: &mut PrivateContext,\\n    recipient: AztecAddress,\\n    // We need this because to compute a tagging secret, we require a sender:\\n    sender: AztecAddress,\\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    |e: NoteEmission<Note>| {\\n        let note = e.note;\\n        assert_note_exists(*context, note);\\n\\n        let note_hash_counter = note.get_header().note_hash_counter;\\n\\n        let encrypted_log = compute_log(*context, note, recipient, sender);\\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\\n    }\\n}\\n\\n// Important note: this function -- although called \\"unconstrained\\" -- the\\n// function is not labelled as `unconstrained`, because we pass a reference to the\\n// context.\\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\\n    context: &mut PrivateContext,\\n    recipient: AztecAddress,\\n    // We need this because to compute a tagging secret, we require a sender:\\n    sender: AztecAddress,\\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    |e: NoteEmission<Note>| {\\n        let note = e.note;\\n        assert_note_exists(*context, note);\\n\\n        let note_hash_counter = note.get_header().note_hash_counter;\\n\\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\\n        // recipient is unable to decrypt the payload.\\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\\n        // for the log to be deleted when it shouldn\'t have (which is fine - they can already make the content be\\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it\'ll be a log\\n        // for a note that doesn\'t exist).\\n        //   It\'s important here that we do not\\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\\n        // be wrong.\\n        let encrypted_log = unsafe { compute_log_unconstrained(*context, note, recipient, sender) };\\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\\n    }\\n}\\n\\nmod test {\\n    use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};\\n    use dep::protocol_types::address::AztecAddress;\\n    use std::test::OracleMock;\\n\\n    #[test]\\n    unconstrained fn test_encrypted_log_matches_typescript() {\\n        let mut env = TestEnvironment::new();\\n        // Advance 1 block so we can read historic state from private\\n        env.advance_block_by(1);\\n        let mut context = env.private();\\n\\n        // I\'m not sure how to initialise an `env` or `context` with a consistent contract address for every run of this test; the value kept changing each time. So I\'m going to overwrite it now:\\n        context.inputs.call_context.contract_address = AztecAddress::from_field(\\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\\n        ); // This is an address copied to match the typescript one.\\n\\n        let storage_slot = 42;\\n        let note = MockNote::new(1234)\\n            .contract_address(context.this_address())\\n            .storage_slot(storage_slot)\\n            .build();\\n        let contract_address = context.this_address();\\n\\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\\n        let contract_address = AztecAddress::from_field(\\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\\n        );\\n\\n        let plaintext = super::compute_note_plaintext_for_this_strategy(note);\\n\\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\\n        let _ = OracleMock::mock(\\"getRandomField\\").returns(eph_sk).times(1);\\n\\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\\n        let _ = OracleMock::mock(\\"getRandomField\\").returns(randomness).times(1000000);\\n\\n        let recipient = AztecAddress::from_field(\\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\\n        );\\n\\n        let sender = AztecAddress::from_field(\\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\\n        );\\n\\n        let _ = OracleMock::mock(\\"getIndexedTaggingSecretAsSender\\").returns([69420, 1337]);\\n\\n        let _ = OracleMock::mock(\\"incrementAppTaggingSecretIndexAsSender\\").returns(());\\n\\n        let payload = super::compute_log(context, note, recipient, sender);\\n\\n        // The following value was generated by `encrypted_log_payload.test.ts`\\n        // --\x3e Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\\n        let private_log_payload_from_typescript = [\\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\\n            0x0d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701fa7,\\n            0x00010577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,\\n            0x003de81cde78411f27a921e16ebbfba71a5570d3f62f1134c90daced33663ba0,\\n            0x00856cb19c7d563da183a40a6f8bd4988d1696ad6bf0c717c8fb8f6294bd0366,\\n            0x001ed04e4f77a111c7090fcd34c61cfae744e8589a42defba4d0d927dd4679fe,\\n            0x00ec09b49d8d4cf548ea62d44c8839b2fd14664e9d1439b199a8d5166e362348,\\n            0x004a69de2d410e01010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n            0x0101010101010101010101010101010101010101010101010101010101010101,\\n        ];\\n\\n        assert_eq(payload, private_log_payload_from_typescript);\\n    }\\n}\\n"},"96":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\\nuse dep::protocol_types::{\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\\n        GENERATOR_INDEX__SECRET_HASH,\\n    },\\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\\n    point::Point,\\n    traits::Hash,\\n};\\n\\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\\n\\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\\n}\\n\\npub fn compute_secret_hash(secret: Field) -> Field {\\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\\n}\\n\\npub fn compute_l1_to_l2_message_hash(\\n    sender: EthAddress,\\n    chain_id: Field,\\n    recipient: AztecAddress,\\n    version: Field,\\n    content: Field,\\n    secret_hash: Field,\\n    leaf_index: Field,\\n) -> Field {\\n    let mut hash_bytes = [0 as u8; 224];\\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\\n    let version_bytes: [u8; 32] = version.to_be_bytes();\\n    let content_bytes: [u8; 32] = content.to_be_bytes();\\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\\n\\n    for i in 0..32 {\\n        hash_bytes[i] = sender_bytes[i];\\n        hash_bytes[i + 32] = chain_id_bytes[i];\\n        hash_bytes[i + 64] = recipient_bytes[i];\\n        hash_bytes[i + 96] = version_bytes[i];\\n        hash_bytes[i + 128] = content_bytes[i];\\n        hash_bytes[i + 160] = secret_hash_bytes[i];\\n        hash_bytes[i + 192] = leaf_index_bytes[i];\\n    }\\n\\n    sha256_to_field(hash_bytes)\\n}\\n\\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\\n}\\n\\npub struct ArgsHasher {\\n    pub fields: [Field],\\n}\\n\\nimpl Hash for ArgsHasher {\\n    fn hash(self) -> Field {\\n        hash_args(self.fields)\\n    }\\n}\\n\\nimpl ArgsHasher {\\n    pub fn new() -> Self {\\n        Self { fields: [] }\\n    }\\n\\n    pub fn add(&mut self, field: Field) {\\n        self.fields = self.fields.push_back(field);\\n    }\\n\\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\\n        for i in 0..N {\\n            self.fields = self.fields.push_back(fields[i]);\\n        }\\n    }\\n}\\n\\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\npub fn hash_args(args: [Field]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_var_args_hash() {\\n    let mut input = ArgsHasher::new();\\n    for i in 0..100 {\\n        input.add(i as Field);\\n    }\\n    let hash = input.hash();\\n    dep::std::println(hash);\\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\\n}\\n"},"105":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr","source":"use dep::protocol_types::{\\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\\n};\\nuse std::embedded_curve_ops::multi_scalar_mul;\\n\\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\\n/// The input secret is known only to one party. The output shared secret is derivable\\n/// by both parties, through this function.\\n/// E.g.:\\n/// Epk = esk * G // ephemeral keypair\\n/// Pk = sk * G // recipient keypair\\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\\n    shared_secret\\n}\\n\\n/// Computes a standard ecdh shared secret using the address public key of the given address:\\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\\n/// The intention is that the _creator_ of a shared secret would call this function,\\n/// given the address of their intended recipient.\\npub fn derive_ecdh_shared_secret_using_aztec_address(\\n    ephemeral_secret: Scalar,\\n    recipient_address: AztecAddress,\\n) -> Point {\\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\\n}\\n\\n#[test]\\nunconstrained fn test_consistency_with_typescript() {\\n    let secret = Scalar {\\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\\n    };\\n    let point = Point {\\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\\n        is_infinite: false,\\n    };\\n\\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\\n\\n    // This is just pasted from a test run.\\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won\'t be needed, so this will have to do.\\n    let hard_coded_shared_secret = Point {\\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\\n        is_infinite: false,\\n    };\\n    assert_eq(shared_secret, hard_coded_shared_secret);\\n}\\n\\n#[test]\\nunconstrained fn test_shared_secret_computation_in_both_directions() {\\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\\n\\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\\n\\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\\n\\n    assert_eq(shared_secret, shared_secret_alt);\\n}\\n\\n#[test]\\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\\n\\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\\n\\n    let address_b = AztecAddress::from_field(pk_b.x);\\n\\n    // We were lazy in deriving the secret keys, and didn\'t check the resulting y-coordinates\\n    // of the pk_a or pk_b to be less than half the field modulus.\\n    // If needed, we negate the pk\'s so that they yield valid address points.\\n    // (We could also have negated the secrets, but there\'s no negate method for\\n    // EmbeddedCurvesScalar).\\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\\n        pk_a\\n    } else {\\n        pk_a.neg()\\n    };\\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\\n        pk_b\\n    } else {\\n        pk_b.neg()\\n    };\\n\\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\\n\\n    assert_eq(shared_secret, shared_secret_alt);\\n}\\n"},"106":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr","source":"use std::{\\n    embedded_curve_ops::fixed_base_scalar_mul, field::bn254::decompose,\\n    hash::from_field_unsafe as fr_to_fq_unsafe,\\n};\\n\\nuse dep::protocol_types::{point::Point, scalar::Scalar};\\n\\nuse crate::oracle::random::random;\\n\\n/// Converts a base field element to scalar field element.\\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\\nfn fr_to_fq(r: Field) -> Scalar {\\n    let (lo, hi) = decompose(r);\\n\\n    Scalar { lo, hi }\\n}\\n\\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\\n    // cooperate in the random value generation.\\n    let randomness = unsafe { random() };\\n\\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\\n    // the scalars.\\n    let eph_sk = fr_to_fq_unsafe(randomness);\\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\\n\\n    (eph_sk, eph_pk)\\n}\\n"},"107":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use crate::{\\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\\n    oracle::{\\n        key_validation_request::get_key_validation_request,\\n        keys::get_public_keys_and_partial_address,\\n    },\\n};\\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\\n\\nmod test;\\n\\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\\n}\\n\\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\\n// function defined on `PrivateContext`.\\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\\n}\\n\\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\\n// read keys that are not required by the caller can simply be discarded.\\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\\n    /// Safety: Public keys are constrained by showing their inclusion in the address\'s preimage.\\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\\n    assert_eq(\\n        account,\\n        AztecAddress::compute(public_keys, partial_address),\\n        \\"Invalid public keys hint for address\\",\\n    );\\n\\n    public_keys\\n}\\n"},"113":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr","source":"use dep::protocol_types::{\\n    abis::function_selector::FunctionSelector, address::AztecAddress,\\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\\n};\\n\\nuse crate::{\\n    context::{PrivateContext, PublicContext},\\n    oracle::get_contract_instance::{\\n        get_contract_instance, get_contract_instance_deployer_avm,\\n        get_contract_instance_initialization_hash_avm,\\n    },\\n};\\n\\npub fn mark_as_initialized_public(context: &mut PublicContext) {\\n    let init_nullifier =\\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\\n    context.push_nullifier(init_nullifier);\\n}\\n\\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\\n    let init_nullifier =\\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\\n    context.push_nullifier(init_nullifier);\\n}\\n\\npub fn assert_is_initialized_public(context: &mut PublicContext) {\\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \\"Not initialized\\");\\n}\\n\\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\\n    context.push_nullifier_read_request(init_nullifier);\\n}\\n\\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\\n    address.to_field()\\n}\\n\\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\\n    let address = context.this_address();\\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\\n    assert(initialization_hash == expected_init, \\"Initialization hash does not match\\");\\n    assert(\\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\\n        \\"Initializer address is not the contract deployer\\",\\n    );\\n}\\n\\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\\n    let address = context.this_address();\\n    let instance = get_contract_instance(address);\\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\\n    assert(instance.initialization_hash == expected_init, \\"Initialization hash does not match\\");\\n    assert(\\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\\n        \\"Initializer address is not the contract deployer\\",\\n    );\\n}\\n\\n/// This function is not only used in macros but it\'s also used by external people to check that an instance has been\\n/// initialized with the correct constructor arguments. Don\'t hide this unless you implement factory functionality.\\npub fn compute_initialization_hash(\\n    init_selector: FunctionSelector,\\n    init_args_hash: Field,\\n) -> Field {\\n    poseidon2_hash_with_separator(\\n        [init_selector.to_field(), init_args_hash],\\n        GENERATOR_INDEX__CONSTRUCTOR,\\n    )\\n}\\n"},"122":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr","source":"use std::static_assert;\\n\\nuse crate::{\\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\\n    oracle::note_discovery::deliver_note, utils::array,\\n};\\n\\nuse dep::protocol_types::{\\n    address::AztecAddress,\\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\\n    hash::compute_note_hash_nonce,\\n};\\n\\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\\n// the note type id.\\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\\n\\npub struct NoteHashesAndNullifier {\\n    pub note_hash: Field,\\n    pub unique_note_hash: Field,\\n    pub inner_nullifier: Field,\\n}\\n\\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would\'ve been\\n/// created, along with the list of unique note hashes in said transaction.\\n///\\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\\n///\\n/// ```\\n/// |packed_note_content, note_header, note_type_id| {\\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\\n///             MyNoteType::unpack_content,\\n///             note_header,\\n///             true,\\n///             packed_note_content.storage(),\\n///         )\\n///     } else {\\n///         panic(f\\"Unknown note type id {note_type_id}\\")\\n///     };\\n///\\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\\n///         note_hash: hashes[0],\\n///         unique_note_hash: hashes[1],\\n///         inner_nullifier: hashes[3],\\n///     })\\n/// }\\n/// ```\\npub unconstrained fn do_process_log<Env>(\\n    context: UnconstrainedContext,\\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\\n    tx_hash: Field,\\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\\n    first_nullifier_in_tx: Field,\\n    recipient: AztecAddress,\\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field) -> Option<NoteHashesAndNullifier>,\\n) {\\n    let (storage_slot, note_type_id, packed_note_content) =\\n        destructure_log_plaintext(log_plaintext);\\n\\n    // We need to find the note\'s nonce, which is the one that results in one of the unique note hashes from tx_hash\\n    for_each_in_bounded_vec(\\n        unique_note_hashes_in_tx,\\n        |expected_unique_note_hash, i| {\\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\\n\\n            let header = NoteHeader::new(context.this_address(), candidate_nonce, storage_slot);\\n\\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\\n            let hashes =\\n                compute_note_hash_and_nullifier(packed_note_content, header, note_type_id).unwrap();\\n\\n            if hashes.unique_note_hash == expected_unique_note_hash {\\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\\n\\n                assert(\\n                    deliver_note(\\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\\n                        storage_slot,\\n                        candidate_nonce,\\n                        packed_note_content,\\n                        hashes.note_hash,\\n                        hashes.inner_nullifier,\\n                        tx_hash,\\n                        recipient,\\n                    ),\\n                    \\"Failed to deliver note\\",\\n                );\\n\\n                // We don\'t exit the loop - it is possible (though rare) for the exact same note content to be present\\n                // multiple times in the same transaction with different nonces. This typically doesn\'t happen due to\\n                // notes containing random values in order to hide their contents.\\n            }\\n        },\\n    );\\n}\\n\\nunconstrained fn destructure_log_plaintext(\\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\\n\\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\\n    // `storage_slot` and `note_type_id` must be updated as well.\\n    static_assert(\\n        NOTE_LOG_RESERVED_FIELDS == 2,\\n        \\"unepxected value for NOTE_LOG_RESERVED_FIELDS\\",\\n    );\\n    let storage_slot = log_plaintext.get(0);\\n    let note_type_id = log_plaintext.get(1);\\n\\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\\n\\n    (storage_slot, note_type_id, packed_note_content)\\n}\\n\\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\\n    vec: BoundedVec<T, MaxLen>,\\n    f: fn[Env](T, u32) -> (),\\n) {\\n    for i in 0..MaxLen {\\n        if i < vec.len() {\\n            f(vec.get_unchecked(i), i);\\n        }\\n    }\\n}\\n"},"123":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\\nuse crate::note::{\\n    note_emission::NoteEmission,\\n    note_header::NoteHeader,\\n    note_interface::{NoteInterface, NullifiableNote},\\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\\n};\\nuse crate::oracle::notes::notify_created_note;\\n\\npub fn create_note<Note, let N: u32>(\\n    context: &mut PrivateContext,\\n    storage_slot: Field,\\n    note: &mut Note,\\n) -> NoteEmission<Note>\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let contract_address = (*context).this_address();\\n    let note_hash_counter = context.side_effect_counter;\\n\\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\\n    note.set_header(header);\\n    let note_hash = note.compute_note_hash();\\n\\n    let packed_note_content = Note::pack_content(*note);\\n    notify_created_note(\\n        storage_slot,\\n        Note::get_note_type_id(),\\n        packed_note_content,\\n        note_hash,\\n        note_hash_counter,\\n    );\\n\\n    context.push_note_hash(note_hash);\\n\\n    NoteEmission::new(*note)\\n}\\n\\npub fn create_note_hash_from_public<Note, let N: u32>(\\n    context: &mut PublicContext,\\n    storage_slot: Field,\\n    note: &mut Note,\\n)\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let contract_address = (*context).this_address();\\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\\n    note.set_header(header);\\n    let note_hash = note.compute_note_hash();\\n\\n    context.push_note_hash(note_hash);\\n}\\n\\n// Note: This function is currently totally unused.\\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\\n\\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\\n}\\n\\npub fn destroy_note_unsafe<Note, let N: u32>(\\n    context: &mut PrivateContext,\\n    note: Note,\\n    note_hash_for_read_request: Field,\\n)\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let note_hash_for_nullify =\\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\\n\\n    let note_hash_counter = note.get_header().note_hash_counter;\\n    let notification_note_hash = if (note_hash_counter == 0) {\\n        // Counter is zero, so we\'re nullifying a settled note and we don\'t populate the note_hash with real value.\\n        0\\n    } else {\\n        // A non-zero note hash counter implies that we\'re nullifying a pending note (i.e. one that has not yet been\\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\\n        // hash with real value to inform the kernel which note we\'re nullifyng so that it can either squash both\\n        // the note and the nullifier if it\'s an inner note hash, or check that the it matches a pending note if it\'s\\n        // a siloed note hash.\\n        note_hash_for_nullify\\n    };\\n\\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\\n}\\n"},"125":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\\n * A note emission struct containing the information required for emitting a note.\\n * The exact `emit` logic is passed in by the application code\\n */\\npub struct NoteEmission<Note> {\\n    pub note: Note,\\n}\\n\\nimpl<Note> NoteEmission<Note> {\\n    pub fn new(note: Note) -> Self {\\n        Self { note }\\n    }\\n\\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\\n        _emit(self);\\n    }\\n\\n    pub fn discard(_self: Self) {}\\n}\\n\\n/**\\n * A struct wrapping note emission in `Option<T>`.\\n * This is the struct provided to application codes, which can be used to emit\\n * only when a note was actually inserted.\\n * It is fairly common to have cases where a function conditionally inserts,\\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\\n * a change note in a token\'s transfer function only when there is \\"change\\" left).\\n */\\npub struct OuterNoteEmission<Note> {\\n    emission: Option<NoteEmission<Note>>,\\n}\\n\\nimpl<Note> OuterNoteEmission<Note> {\\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\\n        Self { emission }\\n    }\\n\\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\\n        if self.emission.is_some() {\\n            _emit(self.emission.unwrap());\\n        }\\n    }\\n\\n    pub fn discard(_self: Self) {}\\n}\\n"},"127":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use crate::context::PrivateContext;\\nuse crate::note::{\\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\\n    note_interface::{NoteInterface, NullifiableNote},\\n    note_viewer_options::NoteViewerOptions,\\n    utils::compute_note_hash_for_read_request,\\n};\\nuse crate::oracle;\\nuse crate::utils::comparison::compare;\\nuse dep::protocol_types::constants::{\\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\\n};\\n\\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\\n\\nmod test;\\n\\nfn extract_property_value_from_selector<let N: u32>(\\n    packed_note_content: [Field; N],\\n    selector: PropertySelector,\\n) -> Field {\\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\\n    // This allows easier packing and custom (un)packing schemas. A note property is located\\n    // inside the packed note using the index inside the array, a byte offset and a length.\\n    let value: [u8; 32] = packed_note_content[selector.index].to_be_bytes();\\n    let offset = selector.offset;\\n    let length = selector.length;\\n    let mut value_field = 0 as Field;\\n    let mut acc: Field = 1;\\n    for i in 0..32 {\\n        if i < length {\\n            value_field += value[31 + offset - i] as Field * acc;\\n            acc = acc * 256;\\n        }\\n    }\\n    value_field\\n}\\n\\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    let header = note.get_header();\\n    let contract_address = context.this_address();\\n    assert(header.contract_address.eq(contract_address), \\"Mismatch note header contract address.\\");\\n    assert(header.storage_slot == storage_slot, \\"Mismatch note header storage slot.\\");\\n}\\n\\nfn check_note_content<let N: u32>(\\n    packed_note_content: [Field; N],\\n    selects: BoundedVec<Option<Select>, N>,\\n) {\\n    for i in 0..selects.len() {\\n        let select = selects.get_unchecked(i).unwrap_unchecked();\\n        let value_field =\\n            extract_property_value_from_selector(packed_note_content, select.property_selector);\\n\\n        assert(\\n            compare(value_field, select.comparator, select.value.to_field()),\\n            \\"Mismatch return note field.\\",\\n        );\\n    }\\n}\\n\\nfn check_notes_order<let N: u32>(\\n    fields_0: [Field; N],\\n    fields_1: [Field; N],\\n    sorts: BoundedVec<Option<Sort>, N>,\\n) {\\n    for i in 0..sorts.len() {\\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\\n        let eq = field_0 == field_1;\\n        let lt = field_0.lt(field_1);\\n        if sort.order == SortOrder.ASC {\\n            assert(eq | lt, \\"Return notes not sorted in ascending order.\\");\\n        } else if !eq {\\n            assert(!lt, \\"Return notes not sorted in descending order.\\");\\n        }\\n    }\\n}\\n\\npub fn get_note<Note, let N: u32>(\\n    context: &mut PrivateContext,\\n    storage_slot: Field,\\n) -> (Note, Field)\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\\n    /// is check that the metadata is correct, and that the note exists.\\n    let note = unsafe { get_note_internal(storage_slot) };\\n    check_note_header(*context, storage_slot, note);\\n\\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\\n    context.push_note_hash_read_request(note_hash_for_read_request);\\n\\n    (note, note_hash_for_read_request)\\n}\\n\\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\\n    context: &mut PrivateContext,\\n    storage_slot: Field,\\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote + Eq,\\n{\\n    /// Safety: The notes are constrained below.\\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\\n\\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\\n    // these checks correctly reject bad notes.\\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\\n}\\n\\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\\n    preprocessor_args: PREPROCESSOR_ARGS,\\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\\n    preprocessor(notes, preprocessor_args)\\n}\\n\\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\\n    context: &mut PrivateContext,\\n    storage_slot: Field,\\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote + Eq,\\n{\\n    // The filter is applied first to avoid pushing note read requests for notes we\'re not interested in. Note that\\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\\n    // check to fail.\\n    let filter_fn = options.filter;\\n    let filter_args = options.filter_args;\\n    let filtered_notes = filter_fn(opt_notes, filter_args);\\n\\n    let notes = crate::utils::array::collapse(filtered_notes);\\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\\n        BoundedVec::new();\\n\\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\\n    // for the runtime length, and can therefore have fewer loop iterations.\\n    assert(notes.len() <= options.limit, \\"Got more notes than limit.\\");\\n\\n    let mut prev_fields = [0; N];\\n    for i in 0..options.limit {\\n        if i < notes.len() {\\n            let note = notes.get_unchecked(i);\\n            let fields = note.pack_content();\\n            check_note_header(*context, storage_slot, note);\\n            check_note_content(fields, options.selects);\\n            if i != 0 {\\n                check_notes_order(prev_fields, fields, options.sorts);\\n            }\\n            prev_fields = fields;\\n\\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\\n            // failure if malicious oracle injects 0 nonce here for a \\"pre-existing\\" note.\\n            context.push_note_hash_read_request(note_hash_for_read_request);\\n            note_hashes.push(note_hash_for_read_request);\\n        };\\n    }\\n\\n    (notes, note_hashes)\\n}\\n\\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    let placeholder_note = [Option::none()];\\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\\n    let placeholder_note_length = [0; N];\\n    oracle::notes::get_notes(\\n        storage_slot,\\n        0,\\n        [],\\n        [],\\n        [],\\n        [],\\n        [],\\n        [],\\n        [],\\n        [],\\n        [],\\n        1, // limit\\n        0, // offset\\n        NoteStatus.ACTIVE,\\n        placeholder_note,\\n        placeholder_fields,\\n        placeholder_note_length,\\n    )[0]\\n        .expect(f\\"Failed to get a note\\") // Notice: we don\'t allow dummies to be returned from get_note (singular).\\n}\\n\\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\\n    storage_slot: Field,\\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\\n        flatten_options(options.selects, options.sorts);\\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\\n    let placeholder_note_length = [0; N];\\n\\n    let opt_notes = oracle::notes::get_notes(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        options.limit,\\n        options.offset,\\n        options.status,\\n        placeholder_opt_notes,\\n        placeholder_fields,\\n        placeholder_note_length,\\n    );\\n\\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\\n}\\n\\npub unconstrained fn view_notes<Note, let N: u32>(\\n    storage_slot: Field,\\n    options: NoteViewerOptions<Note, N>,\\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\\n        flatten_options(options.selects, options.sorts);\\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\\n    let placeholder_note_length = [0; N];\\n\\n    let notes_array = oracle::notes::get_notes(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        options.limit,\\n        options.offset,\\n        options.status,\\n        placeholder_opt_notes,\\n        placeholder_fields,\\n        placeholder_note_length,\\n    );\\n\\n    let mut notes = BoundedVec::new();\\n    for i in 0..notes_array.len() {\\n        if notes_array[i].is_some() {\\n            notes.push(notes_array[i].unwrap_unchecked());\\n        }\\n    }\\n\\n    notes\\n}\\n\\nunconstrained fn flatten_options<let N: u32>(\\n    selects: BoundedVec<Option<Select>, N>,\\n    sorts: BoundedVec<Option<Sort>, N>,\\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\\n    let mut num_selects = 0;\\n    let mut select_by_indexes = [0; N];\\n    let mut select_by_offsets = [0; N];\\n    let mut select_by_lengths = [0; N];\\n    let mut select_values = [0; N];\\n    let mut select_comparators = [0; N];\\n\\n    for i in 0..selects.len() {\\n        let select = selects.get(i);\\n        if select.is_some() {\\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\\n            select_values[num_selects] = select.unwrap_unchecked().value;\\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\\n            num_selects += 1;\\n        };\\n    }\\n\\n    let mut sort_by_indexes = [0; N];\\n    let mut sort_by_offsets = [0; N];\\n    let mut sort_by_lengths = [0; N];\\n    let mut sort_order = [0; N];\\n    for i in 0..sorts.len() {\\n        let sort = sorts.get(i);\\n        if sort.is_some() {\\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\\n            sort_order[i] = sort.unwrap_unchecked().order;\\n        };\\n    }\\n\\n    (\\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\\n    )\\n}\\n"},"133":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\\n    context::PrivateContext,\\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\\n    utils::array,\\n};\\n\\nuse dep::protocol_types::hash::{\\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\\n    compute_unique_note_hash,\\n};\\n\\npub fn compute_siloed_nullifier<Note, let N: u32>(\\n    note_with_header: Note,\\n    context: &mut PrivateContext,\\n) -> Field\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let header = note_with_header.get_header();\\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\\n\\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\\n}\\n\\n// TODO(#7775): make this not impossible to understand\\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let note_hash = note.compute_note_hash();\\n    let header = note.get_header();\\n    let nonce = header.nonce;\\n    let counter = header.note_hash_counter;\\n\\n    // If same tx note, read request always uses the normal note hash\\n    if counter != 0 {\\n        note_hash\\n    } else {\\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\\n        compute_unique_note_hash(\\n            nonce,\\n            compute_siloed_note_hash(header.contract_address, note_hash),\\n        )\\n    }\\n}\\n\\n// TODO(#7775): make this not impossible to understand\\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\\n    note: Note,\\n    note_hash_for_read_request: Field,\\n) -> Field\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let header = note.get_header();\\n\\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\\n        let siloed_note_hash =\\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\\n\\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\\n    } else {\\n        note_hash_for_read_request\\n    }\\n}\\n\\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\\n//     let header = note.get_header();\\n//     // There are 3 cases for reading a note intended for consumption:\\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\\n\\n//     let note_hash = note.compute_note_hiding_point().x;\\n\\n//     if header.nonce == 0 {\\n//         // Case 1.\\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\\n//         note_hash\\n//     } else {\\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\\n//         // nullifier.\\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\\n//         // from the siloed note hash.\\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\\n//         // siloed note hash matches the note hash specified in the nullifier.\\n\\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\\n//         // \\"siloed\\" by contract address. When a note hash is computed solely for the purpose of\\n//         // nullification, it is not strictly necessary to silo the note hash before computing\\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\\n//         // nullifiers are computed from a note hash\'s fully-computed note hash tree leaf.\\n//     }\\n// }\\n\\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\\nwhere\\n    Note: NoteInterface<N> + NullifiableNote,\\n{\\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\\n}\\n\\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\\n    unpack_content: fn([Field; N]) -> T,\\n    note_header: NoteHeader,\\n    compute_nullifier: bool,\\n    packed_note_content: [Field; S],\\n) -> [Field; 4]\\nwhere\\n    T: NoteInterface<N> + NullifiableNote,\\n{\\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\\n    note.set_header(note_header);\\n\\n    let note_hash = note.compute_note_hash();\\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\\n\\n    let inner_nullifier = if compute_nullifier {\\n        note.compute_nullifier_without_context()\\n    } else {\\n        0\\n    };\\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\\n}\\n"},"135":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\\n};\\n\\n#[oracle(callPrivateFunction)]\\nunconstrained fn call_private_function_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _start_side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> [Field; 2] {}\\n\\npub unconstrained fn call_private_function_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    start_side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> (u32, Field) {\\n    let fields = call_private_function_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        start_side_effect_counter,\\n        is_static_call,\\n    );\\n\\n    let mut reader = Reader::new(fields);\\n    let end_side_effect_counter = reader.read_u32();\\n    let returns_hash = reader.read();\\n\\n    (end_side_effect_counter, returns_hash)\\n}\\n"},"136":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\\n\\n#[oracle(enqueuePublicFunctionCall)]\\nunconstrained fn enqueue_public_function_call_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> Field {}\\n\\npub unconstrained fn enqueue_public_function_call_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> Field {\\n    enqueue_public_function_call_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        side_effect_counter,\\n        is_static_call,\\n    )\\n}\\n\\n#[oracle(setPublicTeardownFunctionCall)]\\nunconstrained fn set_public_teardown_function_call_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> Field {}\\n\\npub unconstrained fn set_public_teardown_function_call_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> Field {\\n    set_public_teardown_function_call_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        side_effect_counter,\\n        is_static_call,\\n    )\\n}\\n\\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\\n}\\n\\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\\n}\\n\\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\\n"},"137":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\\n\\n#[oracle(getContractAddress)]\\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\\n\\n#[oracle(getBlockNumber)]\\nunconstrained fn get_block_number_oracle() -> u32 {}\\n\\n#[oracle(getChainId)]\\nunconstrained fn get_chain_id_oracle() -> Field {}\\n\\n#[oracle(getVersion)]\\nunconstrained fn get_version_oracle() -> Field {}\\n\\npub unconstrained fn get_contract_address() -> AztecAddress {\\n    get_contract_address_oracle()\\n}\\n\\npub unconstrained fn get_block_number() -> u32 {\\n    get_block_number_oracle()\\n}\\n\\npub unconstrained fn get_chain_id() -> Field {\\n    get_chain_id_oracle()\\n}\\n\\npub unconstrained fn get_version() -> Field {\\n    get_version_oracle()\\n}\\n"},"138":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr","source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\\npub fn store(values: [Field]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\\n}\\n\\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\\n    let _ = store_in_execution_cache_oracle(values);\\n}\\n\\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\\n    load_from_execution_cache_oracle(hash)\\n}\\n\\n#[oracle(storeInExecutionCache)]\\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\\n\\n#[oracle(loadFromExecutionCache)]\\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\\n"},"139":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\\n    contract_instance::ContractInstance,\\n};\\n\\n// NOTE: this is for use in private only\\n#[oracle(getContractInstance)]\\nunconstrained fn get_contract_instance_oracle(\\n    _address: AztecAddress,\\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\\n\\n// NOTE: this is for use in private only\\nunconstrained fn get_contract_instance_internal(\\n    address: AztecAddress,\\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\\n    get_contract_instance_oracle(address)\\n}\\n\\n// NOTE: this is for use in private only\\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\\n    /// so by checking that we get the expected address we validate the entire struct.\\n    let instance =\\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\\n    assert_eq(instance.to_address(), address);\\n\\n    instance\\n}\\n\\n// These oracles each return a ContractInstance member\\n// plus a boolean indicating whether the instance was found.\\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\\nunconstrained fn get_contract_instance_deployer_oracle_avm(\\n    _address: AztecAddress,\\n) -> (Field, bool) {}\\n#[oracle(avmOpcodeGetContractInstanceClassId)]\\nunconstrained fn get_contract_instance_class_id_oracle_avm(\\n    _address: AztecAddress,\\n) -> (Field, bool) {}\\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\\n    _address: AztecAddress,\\n) -> (Field, bool) {}\\n\\npub unconstrained fn get_contract_instance_deployer_internal_avm(\\n    address: AztecAddress,\\n) -> (Field, bool) {\\n    get_contract_instance_deployer_oracle_avm(address)\\n}\\npub unconstrained fn get_contract_instance_class_id_internal_avm(\\n    address: AztecAddress,\\n) -> (Field, bool) {\\n    get_contract_instance_class_id_oracle_avm(address)\\n}\\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\\n    address: AztecAddress,\\n) -> (Field, bool) {\\n    get_contract_instance_initialization_hash_oracle_avm(address)\\n}\\n\\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\\n    /// Safety: AVM opcodes are constrained by the AVM itself\\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\\n    if exists {\\n        Option::some(AztecAddress::from_field(member))\\n    } else {\\n        Option::none()\\n    }\\n}\\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\\n    /// Safety: AVM opcodes are constrained by the AVM itself\\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\\n    if exists {\\n        Option::some(ContractClassId::from_field(member))\\n    } else {\\n        Option::none()\\n    }\\n}\\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\\n    /// Safety: AVM opcodes are constrained by the AVM itself\\n    let (member, exists) =\\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\\n    if exists {\\n        Option::some(member)\\n    } else {\\n        Option::none()\\n    }\\n}\\n"},"142":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use crate::utils::array;\\nuse dep::protocol_types::{\\n    abis::nullifier_leaf_preimage::NullifierLeafPreimage, constants::NULLIFIER_TREE_HEIGHT,\\n};\\n\\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 44;\\n\\npub struct NullifierMembershipWitness {\\n    pub index: Field,\\n    pub leaf_preimage: NullifierLeafPreimage,\\n    pub path: [Field; NULLIFIER_TREE_HEIGHT],\\n}\\n\\nimpl NullifierMembershipWitness {\\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\\n        let serialized_leaf_preimage = array::subarray(fields, 1);\\n\\n        Self {\\n            index: fields[0],\\n            leaf_preimage: NullifierLeafPreimage::deserialize(serialized_leaf_preimage),\\n            path: array::subarray(fields, 1 + serialized_leaf_preimage.len()),\\n        }\\n    }\\n}\\n\\n#[oracle(getLowNullifierMembershipWitness)]\\nunconstrained fn get_low_nullifier_membership_witness_oracle(\\n    _block_number: u32,\\n    _nullifier: Field,\\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\\n\\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\\n// nullifier\'s next_value is bigger than the nullifier)\\npub unconstrained fn get_low_nullifier_membership_witness(\\n    block_number: u32,\\n    nullifier: Field,\\n) -> NullifierMembershipWitness {\\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\\n    NullifierMembershipWitness::deserialize(fields)\\n}\\n\\n#[oracle(getNullifierMembershipWitness)]\\nunconstrained fn get_nullifier_membership_witness_oracle(\\n    _block_number: u32,\\n    _nullifier: Field,\\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\\n\\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\\n// nullifier\'s next_value is bigger than the nullifier)\\npub unconstrained fn get_nullifier_membership_witness(\\n    block_number: u32,\\n    nullifier: Field,\\n) -> NullifierMembershipWitness {\\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\\n    NullifierMembershipWitness::deserialize(fields)\\n}\\n"},"144":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\\n};\\n\\n#[oracle(getKeyValidationRequest)]\\nunconstrained fn get_key_validation_request_oracle(\\n    _pk_m_hash: Field,\\n    _key_index: Field,\\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\\n\\nunconstrained fn get_key_validation_request_internal(\\n    npk_m_hash: Field,\\n    key_index: Field,\\n) -> KeyValidationRequest {\\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\\n    KeyValidationRequest::deserialize(result)\\n}\\n\\npub unconstrained fn get_key_validation_request(\\n    pk_m_hash: Field,\\n    key_index: Field,\\n) -> KeyValidationRequest {\\n    get_key_validation_request_internal(pk_m_hash, key_index)\\n}\\n"},"145":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\\n    address::{AztecAddress, PartialAddress},\\n    point::Point,\\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\\n};\\n\\n#[oracle(getPublicKeysAndPartialAddress)]\\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\\n\\npub unconstrained fn get_public_keys_and_partial_address(\\n    address: AztecAddress,\\n) -> (PublicKeys, PartialAddress) {\\n    let result = get_public_keys_and_partial_address_oracle(address);\\n\\n    let keys = PublicKeys {\\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\\n        ivpk_m: IvpkM {\\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\\n        },\\n        ovpk_m: OvpkM {\\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\\n        },\\n        tpk_m: TpkM {\\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\\n        },\\n    };\\n\\n    let partial_address = PartialAddress::from_field(result[12]);\\n\\n    (keys, partial_address)\\n}\\n"},"148":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr","source":"use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\\nuse dep::protocol_types::address::AztecAddress;\\n\\n/// Informs PXE of a note\'s existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\\n///\\n/// The note\'s `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\\n/// `tx_hash`, and will store the nullifier to later check for nullification.\\n///\\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\\n/// other accounts will not be able to see one another\'s token balance notes, even in the same PXE) unless authorized.\\n///\\n/// Returns true if the note was sucessfully delivered and added to PXE\'s database.\\npub unconstrained fn deliver_note(\\n    contract_address: AztecAddress,\\n    storage_slot: Field,\\n    nonce: Field,\\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\\n    note_hash: Field,\\n    nullifier: Field,\\n    tx_hash: Field,\\n    recipient: AztecAddress,\\n) -> bool {\\n    deliver_note_oracle(\\n        contract_address,\\n        storage_slot,\\n        nonce,\\n        content,\\n        note_hash,\\n        nullifier,\\n        tx_hash,\\n        recipient,\\n    )\\n}\\n\\n#[oracle(deliverNote)]\\nunconstrained fn deliver_note_oracle(\\n    contract_address: AztecAddress,\\n    storage_slot: Field,\\n    nonce: Field,\\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\\n    note_hash: Field,\\n    nullifier: Field,\\n    tx_hash: Field,\\n    recipient: AztecAddress,\\n) -> bool {}\\n"},"149":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\\n\\nuse dep::protocol_types::{\\n    address::AztecAddress,\\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\\n};\\n\\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\\npub fn notify_created_note<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        notify_created_note_oracle_wrapper(\\n            storage_slot,\\n            note_type_id,\\n            packed_note_content,\\n            note_hash,\\n            counter,\\n        )\\n    };\\n}\\n\\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\\n/// actual block.\\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\\n}\\n\\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\\npub fn notify_created_nullifier(nullifier: Field) {\\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\\n}\\n\\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_created_note_oracle(\\n        storage_slot,\\n        note_type_id,\\n        packed_note_content,\\n        note_hash,\\n        counter,\\n    );\\n}\\n\\n#[oracle(notifyCreatedNote)]\\nunconstrained fn notify_created_note_oracle<let N: u32>(\\n    _storage_slot: Field,\\n    _note_type_id: Field,\\n    _packed_note_content: [Field; N],\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_nullified_note_oracle_wrapper(\\n    nullifier: Field,\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\\n}\\n\\n#[oracle(notifyNullifiedNote)]\\nunconstrained fn notify_nullified_note_oracle(\\n    _nullifier: Field,\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\\n    let _ = notify_created_nullifier_oracle(nullifier);\\n}\\n\\n#[oracle(notifyCreatedNullifier)]\\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\\n\\n#[oracle(getNotes)]\\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\\n    _storage_slot: Field,\\n    _num_selects: u8,\\n    _select_by_indexes: [u8; N],\\n    _select_by_offsets: [u8; N],\\n    _select_by_lengths: [u8; N],\\n    _select_values: [Field; N],\\n    _select_comparators: [u8; N],\\n    _sort_by_indexes: [u8; N],\\n    _sort_by_offsets: [u8; N],\\n    _sort_by_lengths: [u8; N],\\n    _sort_order: [u8; N],\\n    _limit: u32,\\n    _offset: u32,\\n    _status: u8,\\n    _return_size: u32,\\n    _placeholder_fields: [Field; S],\\n) -> [Field; S] {}\\n\\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; N],\\n    select_by_offsets: [u8; N],\\n    select_by_lengths: [u8; N],\\n    select_values: [Field; N],\\n    select_comparators: [u8; N],\\n    sort_by_indexes: [u8; N],\\n    sort_by_offsets: [u8; N],\\n    sort_by_lengths: [u8; N],\\n    sort_order: [u8; N],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_fields: [Field; S],\\n) -> [Field; S] {\\n    let return_size = placeholder_fields.len() as u32;\\n    get_notes_oracle(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        return_size,\\n        placeholder_fields,\\n    )\\n}\\n\\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; M],\\n    select_by_offsets: [u8; M],\\n    select_by_lengths: [u8; M],\\n    select_values: [Field; M],\\n    select_comparators: [u8; M],\\n    sort_by_indexes: [u8; M],\\n    sort_by_offsets: [u8; M],\\n    sort_by_lengths: [u8; M],\\n    sort_order: [u8; M],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\\n) -> [Option<Note>; S]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    sync_notes_oracle_wrapper();\\n    let fields = get_notes_oracle_wrapper(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        placeholder_fields,\\n    );\\n    let num_notes = fields[0] as u32;\\n    let contract_address = AztecAddress::from_field(fields[1]);\\n    for i in 0..placeholder_opt_notes.len() {\\n        if i < num_notes {\\n            // lengths named as per typescript.\\n            let return_header_length: u32 = 2; // num_notes & contract_address.\\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\\n\\n            let nonce = fields[read_offset];\\n            let note_hash_counter = fields[read_offset + 1] as u32;\\n            let note_content = array::subarray(fields, read_offset + 2);\\n\\n            let mut note = Note::unpack_content(note_content);\\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\\n\\n            placeholder_opt_notes[i] = Option::some(note);\\n        };\\n    }\\n    placeholder_opt_notes\\n}\\n\\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\\n    check_nullifier_exists_oracle(inner_nullifier) == 1\\n}\\n\\n#[oracle(checkNullifierExists)]\\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\\n\\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\\n}\\n\\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\\n/// Includes the last known index used to send a note tagged with this secret.\\n/// For this to work, PXE must know the ivsk_m of the sender.\\n/// For the recipient\'s side, only the address is needed.\\npub unconstrained fn get_indexed_tagging_secret_as_sender(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) -> IndexedTaggingSecret {\\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\\n    IndexedTaggingSecret::deserialize(result)\\n}\\n\\n#[oracle(getIndexedTaggingSecretAsSender)]\\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\\n\\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\\n/// future notes get a different tag and can be discovered by the recipient.\\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\\n/// that are not found by the recipient.\\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\\n    }\\n}\\n\\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) {\\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\\n}\\n\\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) {}\\n\\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\\n/// for later querying via the `get_notes` oracle.\\npub fn sync_notes() {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        sync_notes_oracle_wrapper();\\n    }\\n}\\n\\nunconstrained fn sync_notes_oracle_wrapper() {\\n    sync_notes_oracle();\\n}\\n\\n#[oracle(syncNotes)]\\nunconstrained fn sync_notes_oracle() {}\\n"},"151":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\\n/// truly random: we assume that the oracle is cooperating and returning random values.\\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\\npub unconstrained fn random() -> Field {\\n    rand_oracle()\\n}\\n\\n#[oracle(getRandomField)]\\nunconstrained fn rand_oracle() -> Field {}\\n"},"157":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{\\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\\n    traits::Packable,\\n};\\n\\nuse crate::context::{PrivateContext, UnconstrainedContext};\\nuse crate::note::{\\n    lifecycle::create_note,\\n    note_emission::NoteEmission,\\n    note_getter::{get_note, view_notes},\\n    note_interface::{NoteInterface, NullifiableNote},\\n    note_viewer_options::NoteViewerOptions,\\n};\\nuse crate::oracle::notes::check_nullifier_exists;\\nuse crate::state_vars::storage::Storage;\\n\\n// docs:start:struct\\npub struct PrivateImmutable<Note, Context> {\\n    context: Context,\\n    storage_slot: Field,\\n}\\n// docs:end:struct\\n\\nimpl<T, Context, let N: u32> Storage<N> for PrivateImmutable<T, Context>\\nwhere\\n    T: Packable<N>,\\n{\\n    fn get_storage_slot(self) -> Field {\\n        self.storage_slot\\n    }\\n}\\n\\nimpl<Note, Context> PrivateImmutable<Note, Context> {\\n    // docs:start:new\\n    pub fn new(context: Context, storage_slot: Field) -> Self {\\n        assert(storage_slot != 0, \\"Storage slot 0 not allowed. Storage slots must start from 1.\\");\\n        Self { context, storage_slot }\\n    }\\n    // docs:end:new\\n\\n    // The following computation is leaky, in that it doesn\'t hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\\n    pub fn compute_initialization_nullifier(self) -> Field {\\n        poseidon2_hash_with_separator(\\n            [self.storage_slot],\\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\\n        )\\n    }\\n}\\n\\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\\n    // docs:start:initialize\\n    pub fn initialize<let N: u32>(self, note: &mut Note) -> NoteEmission<Note>\\n    where\\n        Note: NoteInterface<N> + NullifiableNote,\\n    {\\n        // Nullify the storage slot.\\n        let nullifier = self.compute_initialization_nullifier();\\n        self.context.push_nullifier(nullifier);\\n\\n        create_note(self.context, self.storage_slot, note)\\n    }\\n    // docs:end:initialize\\n\\n    // docs:start:get_note\\n    pub fn get_note<let N: u32>(self) -> Note\\n    where\\n        Note: NoteInterface<N> + NullifiableNote,\\n    {\\n        let storage_slot = self.storage_slot;\\n        get_note(self.context, storage_slot).0\\n    }\\n    // docs:end:get_note\\n}\\n\\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\\n    // docs:start:is_initialized\\n    pub unconstrained fn is_initialized(self) -> bool {\\n        let nullifier = self.compute_initialization_nullifier();\\n        check_nullifier_exists(nullifier)\\n    }\\n    // docs:end:is_initialized\\n\\n    // view_note does not actually use the context, but it calls oracles that are only available in private\\n    // docs:start:view_note\\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\\n    where\\n        Note: NoteInterface<N> + NullifiableNote,\\n    {\\n        let mut options = NoteViewerOptions::new();\\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\\n    }\\n    // docs:end:view_note\\n}\\n"},"183":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr","source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\\n/// of elements past `offset`.\\n///\\n/// Examples:\\n/// ```\\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\\n/// assert_eq(foo, [3, 4]);\\n///\\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can\'t return 5 elements since only 3 remain\\n/// ```\\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\\n    src: [T; SRC_LEN],\\n    offset: u32,\\n) -> [T; DST_LEN] {\\n    assert(offset + DST_LEN <= SRC_LEN, \\"DST_LEN too large for offset\\");\\n\\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\\n    for i in 0..DST_LEN {\\n        dst[i] = src[i + offset];\\n    }\\n\\n    dst\\n}\\n\\nmod test {\\n    use super::subarray;\\n\\n    #[test]\\n    unconstrained fn subarray_into_empty() {\\n        // In all of these cases we\'re setting DST_LEN to be 0, so we always get back an emtpy array.\\n        assert_eq(subarray::<Field, _, _>([], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\\n    }\\n\\n    #[test]\\n    unconstrained fn subarray_complete() {\\n        assert_eq(subarray::<Field, _, _>([], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\\n    }\\n\\n    #[test]\\n    unconstrained fn subarray_different_end_sizes() {\\n        // We implicitly select how many values to read in the size of the return array\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\\n    }\\n\\n    #[test(should_fail_with = \\"DST_LEN too large for offset\\")]\\n    unconstrained fn subarray_offset_too_large() {\\n        // With an offset of 1 we can only request up to 4 elements\\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\\n    }\\n\\n    #[test(should_fail)]\\n    unconstrained fn subarray_bad_return_value() {\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\\n    }\\n}\\n"},"184":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr","source":"use crate::utils::array;\\n\\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\\n/// zeroed elements past `len()`).\\n///\\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\\n///\\n/// Examples:\\n/// ```\\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\\n///\\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can\'t return just 1 element since 3 remain\\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can\'t return 10 elements since only 7 remain\\n/// ```\\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\\n    vec: BoundedVec<T, SRC_MAX_LEN>,\\n    offset: u32,\\n) -> BoundedVec<T, DST_MAX_LEN> {\\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\\n    // because we\'re constructing the new storage array as a subarray of the original one (which should have zeroed\\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\\n    // their original length.\\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\\n}\\n\\nmod test {\\n    use super::subbvec;\\n\\n    #[test]\\n    unconstrained fn subbvec_empty() {\\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\\n        assert_eq(subbvec(bvec, 0), bvec);\\n    }\\n\\n    #[test]\\n    unconstrained fn subbvec_complete() {\\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\\n        assert_eq(subbvec(bvec, 0), bvec);\\n\\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\\n    }\\n\\n    #[test]\\n    unconstrained fn subbvec_partial() {\\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\\n\\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\\n    }\\n\\n    #[test]\\n    unconstrained fn subbvec_into_empty() {\\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\\n    }\\n\\n    #[test(should_fail)]\\n    unconstrained fn subbvec_offset_past_len() {\\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\\n    }\\n\\n    #[test(should_fail)]\\n    unconstrained fn subbvec_insufficient_dst_len() {\\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\\n\\n        // We\'re not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\\n        // for the capacity to reduce, but not the length (other than by len - offset).\\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\\n    }\\n\\n    #[test(should_fail_with = \\"DST_LEN too large for offset\\")]\\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\\n\\n        // subbvec does not supprt capacity increases\\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\\n    }\\n\\n    #[test(should_fail_with = \\"DST_LEN too large for offset\\")]\\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\\n\\n        // This effectively requests a capacity increase, since there\'d be just one element plus the 5 empty slots,\\n        // which is less than 7.\\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\\n    }\\n}\\n"},"185":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/utils/bytes.nr","source":"use crate::oracle::random::random;\\n\\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole bytes.\\n///\\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted into a Field. If the last chunk\\n/// is less than 31 bytes long, then only the relevant bytes are considered.\\n/// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\\n/// Note: ceil(N / 31) = (N + 30) / 31\\npub fn be_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\\n    let mut fields = [0; (N + 30) / 31];\\n\\n    // There are N / 31 whole fields that can be populated.\\n    for i in 0..N / 31 {\\n        let mut field = 0;\\n        for j in 0..31 {\\n            // Shift the existing value left by 8 bits and add the new byte\\n            field = field * 256 + bytes[i * 31 + j] as Field;\\n        }\\n        fields[i] = field;\\n    }\\n\\n    // Note: if 31 divides N, then this loop does not execute.\\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it\'s 0.\\n    for _ in 0..((N + 30) / 31) - (N / 31) {\\n        let mut final_field = 0;\\n        let final_field_idx = fields.len() - 1;\\n        let final_offset = final_field_idx * 31;\\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\\n        for j in 0..N - ((N / 31) * 31) {\\n            // Shift the existing value left by 8 bits and add the new byte\\n            final_field = final_field * 256 + bytes[final_offset + j] as Field;\\n        }\\n\\n        fields[final_field_idx] = final_field;\\n    }\\n\\n    fields\\n}\\n\\npub fn le_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\\n    let mut fields = [0; (N + 30) / 31];\\n\\n    // There are N / 31 whole fields that can be populated.\\n    for i in 0..N / 31 {\\n        let mut field = 0;\\n        for j in 0..31 {\\n            let k = 31 - j - 1; // iterate in reverse.\\n            // Shift the existing value left by 8 bits and add the new byte\\n            field = field * 256 + bytes[i * 31 + k] as Field;\\n        }\\n        fields[i] = field;\\n    }\\n\\n    // Note: if 31 divides N, then this loop does not execute.\\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it\'s 0.\\n    for _ in 0..((N + 30) / 31) - (N / 31) {\\n        let mut final_field = 0;\\n        let final_field_idx = fields.len() - 1;\\n        let final_offset = final_field_idx * 31;\\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\\n        for j in 0..N - ((N / 31) * 31) {\\n            let k = (N - ((N / 31) * 31)) - j - 1; // iterate in reverse.\\n            // Shift the existing value left by 8 bits and add the new byte\\n            final_field = final_field * 256 + bytes[final_offset + k] as Field;\\n        }\\n        fields[final_field_idx] = final_field;\\n    }\\n\\n    fields\\n}\\n\\n/// Converts an input array of fields into a single array of bytes.\\n/// Each input field must contain only 31 bytes (this is constrained to be so).\\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte\\n/// chunks are concatenated back together in the order of the original fields.\\n///\\n/// It appears that the original author of this function wants to give the caller some control\\n/// over the number of bytes that are returned: the final field can be mapped to fewer than 31 bytes,\\n/// based on the caller\'s choice of M.\\n/// Given the input is N fields, and each field (except the last) is mapped to 31 bytes,\\n/// we definitely need M > (N - 1) * 31 to cover those first (N - 1) fields. Hence the static assertion.\\n/// TODO: this is the same as the \\"le\\" version of this function, save for the `field.to_be_bytes()` calls. I tried passing the conversion function in as a parameter, to reduce code duplication, but couldn\'t get it to work.\\npub fn fields_to_be_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\\n    let mut bytes = [0; M];\\n\\n    std::static_assert(M > (N - 1) * 31, \\"Not enough output bytes specified\\");\\n    // We make this assertion to keep the logic simpler:\\n    std::static_assert(N * 31 >= M, \\"Too many output bytes specified.\\");\\n\\n    for i in 0..N - 1 {\\n        let field = fields[i];\\n\\n        // We expect that the field contains at most 31 bytes of information.\\n        field.assert_max_bit_size::<248>();\\n\\n        // Now we can safely convert the field to 31 bytes.\\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\\n\\n        for j in 0..31 {\\n            bytes[i * 31 + j] = field_as_bytes[j];\\n        }\\n    }\\n\\n    let final_field = fields[N - 1];\\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\\n\\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_be_bytes();\\n\\n    let start_index = (N - 1) * 31;\\n    for j in 0..M - ((N - 1) * 31) {\\n        bytes[start_index + j] = final_field_as_bytes[j];\\n    }\\n\\n    bytes\\n}\\n\\n/// Converts an input array of fields into a single array of bytes.\\n/// Each input field must contain only 31 bytes (this is constrained to be so).\\n/// Each field is converted into 31 little-endian bytes, and the resulting 31-byte\\n/// chunks are concatenated back together in the order of the original fields. You\'ll\\n/// end up with quite a strange ordering of bytes if you use this particular function.\\npub fn fields_to_le_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\\n    let mut bytes = [0; M];\\n\\n    std::static_assert(M > (N - 1) * 31, \\"Not enough output bytes specified\\");\\n    // We make this assertion to keep the logic simpler:\\n    std::static_assert(N * 31 >= M, \\"Too many output bytes specified.\\");\\n\\n    for i in 0..N - 1 {\\n        let field = fields[i];\\n\\n        // We expect that the field contains at most 31 bytes of information.\\n        field.assert_max_bit_size::<248>();\\n\\n        // Now we can safely convert the field to 31 bytes.\\n        let field_as_bytes: [u8; 31] = field.to_le_bytes();\\n\\n        for j in 0..31 {\\n            bytes[i * 31 + j] = field_as_bytes[j];\\n        }\\n    }\\n\\n    let final_field = fields[N - 1];\\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\\n\\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_le_bytes();\\n\\n    let start_index = (N - 1) * 31;\\n    for j in 0..M - ((N - 1) * 31) {\\n        bytes[start_index + j] = final_field_as_bytes[j];\\n    }\\n\\n    bytes\\n}\\n\\n/// Converts an input array of fields into a single array of bytes.\\n/// Each field is converted to a 32-byte big-endian array.\\n/// Since a field is ~254 bits, you\'ll end up with a subtle 2-bit \\"gap\\" at the big end,\\n/// every 32 bytes. Be careful that such a gap doesn\'t leak information!\\npub fn fields_to_be_bytes_32<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\\n    let mut bytes = [0; 32 * N];\\n\\n    for i in 0..N {\\n        let field = fields[i];\\n        let field_as_bytes: [u8; 32] = field.to_be_bytes();\\n\\n        for j in 0..32 {\\n            bytes[i * 32 + j] = field_as_bytes[j];\\n        }\\n    }\\n\\n    bytes\\n}\\n\\nunconstrained fn byte_to_bits(byte: u8) -> [u1; 8] {\\n    let mut mut_byte = byte;\\n    let mut bits: [u1; 8] = [0; 8];\\n    for i in 0..8 {\\n        bits[i] = (mut_byte & 1) as u1;\\n        mut_byte >>= 1;\\n    }\\n    bits\\n}\\n\\n/// Returns as many random bytes as specified through N.\\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\\n    let mut bytes = [0; N];\\n    let mut idx = 32;\\n    let mut randomness = [0; 32];\\n    for i in 0..N {\\n        if idx == 32 {\\n            randomness = random().to_be_bytes();\\n            idx = 1; // Skip the first byte as it\'s always 0.\\n        }\\n        bytes[i] = randomness[idx];\\n        idx += 1;\\n    }\\n    bytes\\n}\\n\\n/// Returns as many random bits as specified through N.\\nunconstrained fn get_random_bits<let N: u32>() -> [u1; N] {\\n    // Note: (N + 7) / 8 = ceil(N / 8)\\n    let bytes = get_random_bytes::<(N + 7) / 8>();\\n    let mut bits: [u1; N] = [0; N];\\n    for i in 0..bytes.len() - 1 {\\n        let mut byte = bytes[i];\\n        for j in 0..8 {\\n            let bit_idx = i * 8 + j;\\n            bits[bit_idx] = (byte & 1) as u1;\\n            byte >>= 1;\\n        }\\n    }\\n\\n    // N - ((N / 8) * 8) = N - floor(N/8) * 8 = the number of bits remaining.\\n    let byte_idx = bytes.len() - 1;\\n    let mut byte = bytes[byte_idx];\\n    for j in 0..N - ((N / 8) * 8) {\\n        let bit_idx = (byte_idx) * 8 + j;\\n        bits[bit_idx] = (byte & 1) as u1;\\n        byte >>= 1;\\n    }\\n\\n    bits\\n}\\n\\n/// Returns random bits, in chunks, according to the provided numeric generics.\\nunconstrained fn get_chunks_of_random_bits<let NUM_CHUNKS: u32, let NUM_BITS: u32>() -> [[u1; NUM_BITS]; NUM_CHUNKS] {\\n    let random_bits = get_random_bits::<NUM_CHUNKS * NUM_BITS>();\\n    let mut chunks: [[u1; NUM_BITS]; NUM_CHUNKS] = [[0; NUM_BITS]; NUM_CHUNKS];\\n    for i in 0..NUM_CHUNKS {\\n        let mut chunk: [u1; NUM_BITS] = [0; NUM_BITS];\\n        for j in 0..NUM_BITS {\\n            chunk[j] = random_bits[i * NUM_BITS + j];\\n        }\\n        chunks[i] = chunk;\\n    }\\n    chunks\\n}\\n\\n/**\\n * Helper fn for be/le_bytes_to_padded_fields() fns.\\n */\\nfn pad_31_byte_fields_with_random_bits<let N: u32>(input: [Field; N]) -> [Field; N] {\\n    /// Safety: we can\'t constrain whether or not the returned bits are actually random;\\n    /// we can only rely on it being in the caller\'s best interest.\\n    let chunks_of_random_bits = unsafe { get_chunks_of_random_bits::<((N + 30) / 31), 6>() };\\n    let mut fields = input;\\n    // We push the random bits to the \\"big end\\" of each field\\n    let TWO_POW_248 = 0x100000000000000000000000000000000000000000000000000000000000000;\\n    for i in 0..fields.len() {\\n        let mut shift = TWO_POW_248;\\n        for j in 0..5 {\\n            fields[i] += shift * chunks_of_random_bits[i][j] as Field;\\n            shift *= 2;\\n        }\\n\\n        // This might overflow the field modulus, so we need to be careful.\\n        // By this point, shift = 2 ^ 253, so will populate the 254th bit (counting from 1)\\n        let field_with_254th_bit = fields[i] + shift * chunks_of_random_bits[i][6 - 1] as Field;\\n\\n        // Expensive comparison (one for each field), but it\'s important -- if we want to hide that we were\\n        // working with bytes -- that we include the 254th random bit when it fits.\\n        fields[i] = if (fields[i].lt(field_with_254th_bit)) {\\n            field_with_254th_bit\\n        } else {\\n            fields[i]\\n        };\\n    }\\n    fields\\n}\\n\\n/**\\n * The above functions be_bytes_31_to_fields and le_bytes_31_to_fields have a privacy-leakage problem:\\n * they result in fields which are all 248-bits instead of 254-bits.\\n * That means if the above functions are used to convert a ciphertext from bytes to\\n * fields, it leaks (with very high probability) to all observers of the log that the\\n * ciphertext was created with a \\"bit twiddly\\" encryption scheme like AES.\\n * This reduces privacy sets for all apps.\\n *\\n * This function seeks to \\"pad\\" those remaining 6 bits with randomness, so that all\\n * encrypted logs look even more similar (full fields of 254-bits of random-looking\\n * information). Of course, this adds some extra constraints, unfortunately.\\n */\\npub fn le_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\\n    let mut fields = le_bytes_31_to_fields(input);\\n    pad_31_byte_fields_with_random_bits(fields)\\n}\\n\\npub fn be_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\\n    let mut fields = be_bytes_31_to_fields(input);\\n    pad_31_byte_fields_with_random_bits(fields)\\n}\\n\\nmod test {\\n    use crate::utils::bytes::{\\n        be_bytes_31_to_fields, fields_to_be_bytes_31, fields_to_le_bytes_31, le_bytes_31_to_fields,\\n    };\\n\\n    // BE BYTES\\n\\n    #[test]\\n    fn test_be_bytes_31_to_1_field() {\\n        let input = [\\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\\n            25, 26, 27, 28, 29, 30, 31,\\n        ];\\n        let output = be_bytes_31_to_fields(input);\\n\\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\\n    }\\n\\n    #[test]\\n    fn test_1_field_to_be_bytes_31() {\\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\\n        let output: [u8; 31] = fields_to_be_bytes_31(input);\\n\\n        assert_eq(\\n            output,\\n            [\\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\\n                24, 25, 26, 27, 28, 29, 30, 31,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_3_small_fields_to_be_bytes_31() {\\n        let input = [1, 2, 3];\\n        let output: [u8; 93] = fields_to_be_bytes_31(input);\\n\\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\\n        assert_eq(\\n            output,\\n            [\\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_3_small_fields_to_fewer_be_bytes() {\\n        let input = [1, 2, 3];\\n        let output: [u8; 63] = fields_to_be_bytes_31(input);\\n        println(f\\"output: {output}\\");\\n\\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\\n        // 1 byte.\\n        assert_eq(\\n            output,\\n            [\\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 0, 0, 2, 3,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_be_bytes_31_to_2_fields() {\\n        let input = [\\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\\n        ];\\n        let output = be_bytes_31_to_fields(input);\\n\\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\\n    }\\n\\n    #[test]\\n    fn test_2_fields_to_be_bytes_31() {\\n        let input = [\\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\\n        ];\\n        let output: [u8; 62] = fields_to_be_bytes_31(input);\\n\\n        assert_eq(\\n            output,\\n            [\\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_large_random_be_bytes_31_input_to_fields_and_back(input: [u8; 128]) {\\n        let output = be_bytes_31_to_fields(input);\\n        let input_back: [u8; 128] = fields_to_be_bytes_31(output);\\n\\n        assert_eq(input, input_back);\\n    }\\n\\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\\n    // them to get a value lower than 2^248.\\n    #[test]\\n    fn test_large_random_input_to_be_bytes_31_and_back(\\n        input1: [u64; 5],\\n        input2: [u64; 5],\\n        input3: [u64; 5],\\n        input4: [u32; 5],\\n        input5: [u16; 5],\\n        input6: [u8; 5],\\n    ) {\\n        let mut input = [0; 5];\\n        for i in 0..5 {\\n            input[i] = (input1[i] as Field * 2.pow_32(184))\\n                + (input2[i] as Field * 2.pow_32(120))\\n                + (input3[i] as Field * 2.pow_32(56))\\n                + (input4[i] as Field * 2.pow_32(24))\\n                + (input5[i] as Field * 2.pow_32(8))\\n                + input6[i] as Field;\\n        }\\n\\n        let output: [u8; 155] = fields_to_be_bytes_31(input);\\n        let input_back = be_bytes_31_to_fields(output);\\n\\n        assert_eq(input, input_back);\\n    }\\n\\n    #[test(should_fail_with = \\"call to assert_max_bit_size\\")]\\n    fn test_too_few_destination_be_bytes() {\\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\\n        // at least 2 bytes but we provide it with 1.\\n        let input = [1, 256];\\n        let _ignored_result: [u8; 32] = fields_to_be_bytes_31(input);\\n    }\\n\\n    #[test(should_fail_with = \\"call to assert_max_bit_size\\")]\\n    fn test_fields_to_be_bytes_31_value_too_large() {\\n        let input = [2.pow_32(248)]; // this number is 1 bit larger than 31 bytes.\\n        let _ignored_result: [u8; 31] = fields_to_be_bytes_31(input);\\n    }\\n\\n    #[test]\\n    fn test_fields_to_be_bytes_31_max_value() {\\n        let input = [2.pow_32(248) - 1];\\n        let result: [u8; 31] = fields_to_be_bytes_31(input);\\n\\n        // We check that all the bytes were set to max value (255)\\n        for i in 0..31 {\\n            assert_eq(result[i], 255);\\n        }\\n    }\\n\\n    // LE BYTES\\n\\n    #[test]\\n    fn test_le_bytes_31_to_1_field() {\\n        let input = [\\n            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,\\n            9, 8, 7, 6, 5, 4, 3, 2, 1,\\n        ];\\n        let output = le_bytes_31_to_fields(input);\\n\\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\\n    }\\n\\n    #[test]\\n    fn test_1_field_to_le_bytes_31() {\\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\\n        let output: [u8; 31] = fields_to_le_bytes_31(input);\\n\\n        assert_eq(\\n            output,\\n            [\\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_3_small_fields_to_le_bytes_31() {\\n        let input = [1, 2, 3];\\n        let output: [u8; 93] = fields_to_le_bytes_31(input);\\n\\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\\n        assert_eq(\\n            output,\\n            [\\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 0, 0, 0, 0, 0, 0,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_3_small_fields_to_fewer_le_bytes() {\\n        let input = [1, 2, 3];\\n        let output: [u8; 63] = fields_to_le_bytes_31(input);\\n\\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\\n        // 1 byte.\\n        assert_eq(\\n            output,\\n            [\\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n                0, 0, 0, 0, 0, 0, 3,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_le_bytes_31_to_2_fields() {\\n        let input = [\\n            59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,\\n            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\\n            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\\n        ];\\n        let output = le_bytes_31_to_fields(input);\\n\\n        assert_eq(output[0], 0x1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\\n        assert_eq(output[1], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c);\\n    }\\n\\n    #[test]\\n    fn test_2_fields_to_le_bytes_31() {\\n        let input = [\\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\\n        ];\\n        let output: [u8; 62] = fields_to_le_bytes_31(input);\\n\\n        assert_eq(\\n            output,\\n            [\\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47,\\n                46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 0, 0, 0,\\n            ],\\n        );\\n    }\\n\\n    #[test]\\n    fn test_large_random_le_bytes_input_to_fields_and_back(input: [u8; 128]) {\\n        let output = le_bytes_31_to_fields(input);\\n        let input_back: [u8; 128] = fields_to_le_bytes_31(output);\\n\\n        assert_eq(input, input_back);\\n    }\\n\\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\\n    // them to get a value lower than 2^248.\\n    #[test]\\n    fn test_large_random_input_to_le_bytes_and_back(\\n        input1: [u64; 5],\\n        input2: [u64; 5],\\n        input3: [u64; 5],\\n        input4: [u32; 5],\\n        input5: [u16; 5],\\n        input6: [u8; 5],\\n    ) {\\n        let mut input = [0; 5];\\n        for i in 0..5 {\\n            input[i] = (input1[i] as Field * 2.pow_32(184))\\n                + (input2[i] as Field * 2.pow_32(120))\\n                + (input3[i] as Field * 2.pow_32(56))\\n                + (input4[i] as Field * 2.pow_32(24))\\n                + (input5[i] as Field * 2.pow_32(8))\\n                + input6[i] as Field;\\n        }\\n\\n        let output: [u8; 155] = fields_to_le_bytes_31(input);\\n        let input_back = le_bytes_31_to_fields(output);\\n\\n        assert_eq(input, input_back);\\n    }\\n\\n    #[test(should_fail_with = \\"call to assert_max_bit_size\\")]\\n    fn test_too_few_destination_le_bytes() {\\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\\n        // at least 2 bytes but we provide it with 1.\\n        let input = [1, 256];\\n        let _ignored_result: [u8; 32] = fields_to_le_bytes_31(input);\\n    }\\n\\n    #[test(should_fail_with = \\"call to assert_max_bit_size\\")]\\n    fn test_fields_to_le_bytes_31_value_too_large() {\\n        let input = [2.pow_32(248)];\\n        let _ignored_result: [u8; 31] = fields_to_le_bytes_31(input);\\n    }\\n\\n    #[test]\\n    fn test_fields_to_le_bytes_31_max_value() {\\n        let input = [2.pow_32(248) - 1];\\n        let result: [u8; 31] = fields_to_le_bytes_31(input);\\n\\n        // We check that all the bytes were set to max value (255)\\n        for i in 0..31 {\\n            assert_eq(result[i], 255);\\n        }\\n    }\\n}\\n"},"189":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use crate::utils::field::sqrt;\\nuse dep::protocol_types::point::Point;\\n\\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \\"String literal too large\\" error\\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\\nglobal BN254_FR_MODULUS_DIV_2: Field =\\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\\n\\n/// Converts a point to a byte array.\\n///\\n/// We don\'t serialize the point at infinity flag because this function is used in situations where we do not want\\n/// to waste the extra byte (encrypted log).\\npub fn point_to_bytes(p: Point) -> [u8; 32] {\\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\\n    // the \\"sign\\") so it\'s possible to use that last bit as an \\"is_infinite\\" flag if desired in the future.\\n    assert(!p.is_infinite, \\"Cannot serialize point at infinity as bytes.\\");\\n\\n    let mut result: [u8; 32] = p.x.to_be_bytes();\\n\\n    if get_sign_of_point(p) {\\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\\n        // the bits as a sign bit.\\n        result[0] += 128;\\n    }\\n\\n    result\\n}\\n\\n/**\\n * Returns: true if p.y <= MOD_DIV_2, else false.\\n */\\npub fn get_sign_of_point(p: Point) -> bool {\\n    // We store only a \\"sign\\" of the y coordinate because the rest can be derived from the x coordinate. To get\\n    // the sign we check if the y coordinate is less or equal than the curve\'s order minus 1 divided by 2.\\n    // Ideally we\'d do `y <= MOD_DIV_2`, but there\'s no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\\n}\\n\\npub fn point_from_x_coord(x: Field) -> Point {\\n    // y ^ 2 = x ^ 3 - 17\\n    let rhs = x * x * x - 17;\\n    let y = sqrt(rhs).unwrap();\\n    Point { x, y, is_infinite: false }\\n}\\n\\nmod test {\\n    use crate::utils::point::point_to_bytes;\\n    use dep::protocol_types::point::Point;\\n\\n    #[test]\\n    unconstrained fn test_point_to_bytes_positive_sign() {\\n        let p = Point {\\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\\n            is_infinite: false,\\n        };\\n\\n        let compressed_point = point_to_bytes(p);\\n\\n        let expected_compressed_point_positive_sign = [\\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\\n        ];\\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\\n    }\\n\\n    #[test]\\n    unconstrained fn test_point_to_bytes_negative_sign() {\\n        let p = Point {\\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\\n            is_infinite: false,\\n        };\\n\\n        let compressed_point = point_to_bytes(p);\\n\\n        let expected_compressed_point_negative_sign = [\\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\\n        ];\\n\\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\\n    }\\n}\\n"},"243":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\\n\\npub struct KeyValidationRequest {\\n    pub pk_m: Point,\\n    pub sk_app: Field, // not a grumpkin scalar because it\'s output of poseidon2\\n}\\n\\nimpl Eq for KeyValidationRequest {\\n    fn eq(self, request: KeyValidationRequest) -> bool {\\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\\n    }\\n}\\n\\nimpl Empty for KeyValidationRequest {\\n    fn empty() -> Self {\\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\\n    }\\n}\\n\\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\\n    }\\n}\\n\\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\\n        Self {\\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\\n            sk_app: fields[3],\\n        }\\n    }\\n}\\n"},"250":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\\n    abis::function_selector::FunctionSelector,\\n    address::{\\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\\n    },\\n    constants::{\\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        MAX_FIELD_VALUE,\\n    },\\n    contract_class_id::ContractClassId,\\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\\n    merkle_tree::membership::MembershipWitness,\\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\\n};\\n\\n// We do below because `use crate::point::Point;` does not work\\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\n\\nuse crate::public_keys::AddressPoint;\\nuse ec::{pow, sqrt};\\nuse std::{\\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\\n    ops::Add,\\n};\\n\\n// Aztec address\\npub struct AztecAddress {\\n    pub inner: Field,\\n}\\n\\nimpl Eq for AztecAddress {\\n    fn eq(self, other: Self) -> bool {\\n        self.to_field() == other.to_field()\\n    }\\n}\\n\\nimpl Empty for AztecAddress {\\n    fn empty() -> Self {\\n        Self { inner: 0 }\\n    }\\n}\\n\\nimpl ToField for AztecAddress {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl FromField for AztecAddress {\\n    fn from_field(value: Field) -> AztecAddress {\\n        AztecAddress { inner: value }\\n    }\\n}\\n\\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        [self.to_field()]\\n    }\\n}\\n\\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        FromField::from_field(fields[0])\\n    }\\n}\\n\\n/// We implement the Packable trait for AztecAddress because it can be stored in contract\'s storage (and there\\n/// the implementation of Packable is required).\\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        self.serialize()\\n    }\\n\\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        Self::deserialize(fields)\\n    }\\n}\\n\\nimpl AztecAddress {\\n    pub fn zero() -> Self {\\n        Self { inner: 0 }\\n    }\\n\\n    pub fn to_address_point(self) -> AddressPoint {\\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\\n        // equation which defines our bn curve:\\n        // y^2 = x^3 - 17; x = address\\n        let x = self.inner;\\n        let y_squared = pow(x, 3) - 17;\\n\\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\\n        let mut y = sqrt(y_squared);\\n\\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\\n        // note: The field modulus is MAX_FIELD_VALUE + 1\\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\\n            y = (MAX_FIELD_VALUE + 1) - y;\\n        }\\n\\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\\n    }\\n\\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\\n        let public_keys_hash = public_keys.hash();\\n\\n        let pre_address = poseidon2_hash_with_separator(\\n            [public_keys_hash.to_field(), partial_address.to_field()],\\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        );\\n\\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\\n            public_keys.ivpk_m.to_point(),\\n        );\\n\\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\\n        AztecAddress::from_field(address_point.x)\\n    }\\n\\n    pub fn compute_from_private_function(\\n        function_selector: FunctionSelector,\\n        function_vk_hash: Field,\\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\\n        contract_class_artifact_hash: Field,\\n        contract_class_public_bytecode_commitment: Field,\\n        salted_initialization_hash: SaltedInitializationHash,\\n        public_keys: PublicKeys,\\n    ) -> Self {\\n        let private_functions_root = private_functions_root_from_siblings(\\n            function_selector,\\n            function_vk_hash,\\n            function_leaf_membership_witness.leaf_index,\\n            function_leaf_membership_witness.sibling_path,\\n        );\\n\\n        let contract_class_id = ContractClassId::compute(\\n            contract_class_artifact_hash,\\n            private_functions_root,\\n            contract_class_public_bytecode_commitment,\\n        );\\n\\n        // Compute contract address using the preimage which includes the class_id.\\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\\n            contract_class_id,\\n            salted_initialization_hash,\\n        );\\n\\n        AztecAddress::compute(public_keys, partial_address)\\n    }\\n\\n    pub fn is_zero(self) -> bool {\\n        self.inner == 0\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n\\n#[test]\\nfn compute_address_from_partial_and_pub_keys() {\\n    let public_keys = PublicKeys {\\n        npk_m: NpkM {\\n            inner: Point {\\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\\n                is_infinite: false,\\n            },\\n        },\\n        ivpk_m: IvpkM {\\n            inner: Point {\\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\\n                is_infinite: false,\\n            },\\n        },\\n        ovpk_m: OvpkM {\\n            inner: Point {\\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\\n                is_infinite: false,\\n            },\\n        },\\n        tpk_m: TpkM {\\n            inner: Point {\\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\\n                is_infinite: false,\\n            },\\n        },\\n    };\\n\\n    let partial_address = PartialAddress::from_field(\\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\\n    );\\n\\n    let address = AztecAddress::compute(public_keys, partial_address);\\n\\n    // The following value was generated by `derivation.test.ts`.\\n    // --\x3e Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\\n    let expected_computed_address_from_partial_and_pubkeys =\\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\\n}\\n\\n#[test]\\nfn compute_preaddress_from_partial_and_pub_keys() {\\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\\n    let expected_computed_preaddress_from_partial_and_pubkey =\\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\\n}\\n\\n#[test]\\nfn from_field_to_field() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(FromField::from_field(address.to_field()), address);\\n}\\n\\n#[test]\\nfn serde() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\\n}\\n"},"253":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\\n    contract_class_id::ContractClassId,\\n    hash::poseidon2_hash_with_separator,\\n    traits::{Deserialize, Serialize, ToField},\\n};\\n\\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\\n\\n// Partial address\\npub struct PartialAddress {\\n    pub inner: Field,\\n}\\n\\nimpl ToField for PartialAddress {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\\n        [self.to_field()]\\n    }\\n}\\n\\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\\n        PartialAddress { inner: fields[0] }\\n    }\\n}\\n\\nimpl PartialAddress {\\n    pub fn from_field(field: Field) -> Self {\\n        Self { inner: field }\\n    }\\n\\n    pub fn compute(\\n        contract_class_id: ContractClassId,\\n        salt: Field,\\n        initialization_hash: Field,\\n        deployer: AztecAddress,\\n    ) -> Self {\\n        PartialAddress::compute_from_salted_initialization_hash(\\n            contract_class_id,\\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\\n        )\\n    }\\n\\n    pub fn compute_from_salted_initialization_hash(\\n        contract_class_id: ContractClassId,\\n        salted_initialization_hash: SaltedInitializationHash,\\n    ) -> Self {\\n        PartialAddress::from_field(poseidon2_hash_with_separator(\\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\\n        ))\\n    }\\n\\n    pub fn to_field(self) -> Field {\\n        self.inner\\n    }\\n\\n    pub fn is_zero(self) -> bool {\\n        self.to_field() == 0\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n"},"255":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\\n    hash::poseidon2_hash_with_separator, traits::ToField,\\n};\\n\\n// Salted initialization hash. Used in the computation of a partial address.\\npub struct SaltedInitializationHash {\\n    pub inner: Field,\\n}\\n\\nimpl ToField for SaltedInitializationHash {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl SaltedInitializationHash {\\n    pub fn from_field(field: Field) -> Self {\\n        Self { inner: field }\\n    }\\n\\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\\n            [salt, initialization_hash, deployer.to_field()],\\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\\n        ))\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n"},"260":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\\n    constants::CONTRACT_INSTANCE_LENGTH,\\n    contract_class_id::ContractClassId,\\n    public_keys::PublicKeys,\\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\\n};\\n\\npub struct ContractInstance {\\n    pub salt: Field,\\n    pub deployer: AztecAddress,\\n    pub contract_class_id: ContractClassId,\\n    pub initialization_hash: Field,\\n    pub public_keys: PublicKeys,\\n}\\n\\nimpl Eq for ContractInstance {\\n    fn eq(self, other: Self) -> bool {\\n        self.public_keys.eq(other.public_keys)\\n            & self.initialization_hash.eq(other.initialization_hash)\\n            & self.contract_class_id.eq(other.contract_class_id)\\n            & self.salt.eq(other.salt)\\n    }\\n}\\n\\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\\n        let public_keys_serialized = self.public_keys.serialize();\\n        [\\n            self.salt,\\n            self.deployer.to_field(),\\n            self.contract_class_id.to_field(),\\n            self.initialization_hash,\\n            public_keys_serialized[0],\\n            public_keys_serialized[1],\\n            public_keys_serialized[2],\\n            public_keys_serialized[3],\\n            public_keys_serialized[4],\\n            public_keys_serialized[5],\\n            public_keys_serialized[6],\\n            public_keys_serialized[7],\\n            public_keys_serialized[8],\\n            public_keys_serialized[9],\\n            public_keys_serialized[10],\\n            public_keys_serialized[11],\\n        ]\\n    }\\n}\\n\\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\\n        Self {\\n            salt: serialized[0],\\n            deployer: AztecAddress::from_field(serialized[1]),\\n            contract_class_id: ContractClassId::from_field(serialized[2]),\\n            initialization_hash: serialized[3],\\n            public_keys: PublicKeys::deserialize([\\n                serialized[4],\\n                serialized[5],\\n                serialized[6],\\n                serialized[7],\\n                serialized[8],\\n                serialized[9],\\n                serialized[10],\\n                serialized[11],\\n                serialized[12],\\n                serialized[13],\\n                serialized[14],\\n                serialized[15],\\n            ]),\\n        }\\n    }\\n}\\n\\nimpl Hash for ContractInstance {\\n    fn hash(self) -> Field {\\n        self.to_address().to_field()\\n    }\\n}\\n\\nimpl ContractInstance {\\n    pub fn to_address(self) -> AztecAddress {\\n        AztecAddress::compute(\\n            self.public_keys,\\n            PartialAddress::compute(\\n                self.contract_class_id,\\n                self.salt,\\n                self.initialization_hash,\\n                self.deployer,\\n            ),\\n        )\\n    }\\n}\\n"},"266":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\\n/// Example:\\n///   debug_log(\\"blah blah this is a debug string\\");\\npub fn debug_log<let N: u32>(msg: str<N>) {\\n    debug_log_format(msg, []);\\n}\\n\\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\\n/// Examples:\\n///   debug_log_format(\\"get_2(slot:{0}) =>\\\\n\\\\t0:{1}\\\\n\\\\t1:{2}\\", [storage_slot, note0_hash, note1_hash]);\\n///   debug_log_format(\\"whole array: {}\\", [e1, e2, e3, e4]);\\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { debug_log_oracle_wrapper(msg, args) };\\n}\\n\\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\\n    msg: str<M>,\\n    args: [Field; N],\\n) {\\n    debug_log_oracle(msg, args.as_slice());\\n}\\n\\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \\"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\\"`\\n#[oracle(debugLog)]\\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\\n"},"267":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\\n    abis::{\\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\\n        function_selector::FunctionSelector,\\n        log_hash::{LogHash, ScopedLogHash},\\n        note_hash::ScopedNoteHash,\\n        nullifier::ScopedNullifier,\\n        private_log::{PrivateLog, PrivateLogData},\\n        side_effect::{OrderedValue, scoped::Scoped},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\\n    },\\n    merkle_tree::root::root_from_sibling_path,\\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\\n    poseidon2::Poseidon2Sponge,\\n    traits::{FromField, Hash, is_empty, ToField},\\n    utils::field::field_from_bytes_32_trunc,\\n};\\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\\n\\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\\n    let sha256_hashed = sha256::digest(bytes_to_hash);\\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\\n\\n    hash_in_a_field\\n}\\n\\npub fn private_functions_root_from_siblings(\\n    selector: FunctionSelector,\\n    vk_hash: Field,\\n    function_leaf_index: Field,\\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\\n) -> Field {\\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\\n    let function_leaf = function_leaf_preimage.hash();\\n    root_from_sibling_path(\\n        function_leaf,\\n        function_leaf_index,\\n        function_leaf_sibling_path,\\n    )\\n}\\n\\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\\n    // unique).\\n    poseidon2_hash_with_separator(\\n        [first_nullifier_in_tx, note_index_in_tx as Field],\\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\\n    )\\n}\\n\\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\\n    let inputs = [nonce, siloed_note_hash];\\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\\n}\\n\\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), note_hash],\\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\\n    )\\n}\\n\\n/// Computes unique note hashes from siloed note hashes\\npub fn compute_unique_siloed_note_hash(\\n    siloed_note_hash: Field,\\n    first_nullifier: Field,\\n    note_index_in_tx: u32,\\n) -> Field {\\n    if siloed_note_hash == 0 {\\n        0\\n    } else {\\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\\n        compute_unique_note_hash(nonce, siloed_note_hash)\\n    }\\n}\\n\\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\\n    if note_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\\n    }\\n}\\n\\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), nullifier],\\n        GENERATOR_INDEX__OUTER_NULLIFIER,\\n    )\\n}\\n\\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\\n    if nullifier.contract_address.is_zero() {\\n        nullifier.value() // Return value instead of 0 because the first nullifier\'s contract address is zero.\\n    } else {\\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\\n    }\\n}\\n\\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\\n    poseidon2_hash([contract_address.to_field(), field])\\n}\\n\\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\\n    if private_log.contract_address.is_zero() {\\n        private_log.inner.log\\n    } else {\\n        let mut fields = private_log.inner.log.fields;\\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\\n        PrivateLog { fields }\\n    }\\n}\\n\\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\\n    accumulate_sha256([address.to_field(), log_hash])\\n}\\n\\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\\n    if log_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\\n    }\\n}\\n\\npub fn merkle_hash(left: Field, right: Field) -> Field {\\n    poseidon2_hash([left, right])\\n}\\n\\npub fn compute_l2_to_l1_hash(\\n    contract_address: AztecAddress,\\n    recipient: EthAddress,\\n    content: Field,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    let mut bytes: [u8; 160] = std::mem::zeroed();\\n\\n    let inputs =\\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\\n    for i in 0..5 {\\n        // TODO are bytes be in fr.to_buffer() ?\\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\\n        for j in 0..32 {\\n            bytes[32 * i + j] = item_bytes[j];\\n        }\\n    }\\n\\n    sha256_to_field(bytes)\\n}\\n\\npub fn silo_l2_to_l1_message(\\n    msg: ScopedL2ToL1Message,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    if msg.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_l2_to_l1_hash(\\n            msg.contract_address,\\n            msg.message.recipient,\\n            msg.message.content,\\n            rollup_version_id,\\n            chain_id,\\n        )\\n    }\\n}\\n\\n// Computes sha256 hash of 2 input hashes.\\n//\\n// NB: This method now takes in two 31 byte fields - it assumes that any input\\n// is the result of a sha_to_field hash and => is truncated\\n//\\n// TODO(Jan and David): This is used for the encrypted_log hashes.\\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\\n//\\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\\n    // This is a note about the cpp code, since it takes an array of Fields\\n    // instead of a U128.\\n    // 4 Field elements when converted to bytes will usually\\n    // occupy 4 * 32 = 128 bytes.\\n    // However, this function is making the assumption that each Field\\n    // only occupies 128 bits.\\n    //\\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\\n    // Concatentate two fields into 32x2 = 64 bytes\\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\\n    let mut hash_input_flattened = [0; 64];\\n    for offset in 0..input.len() {\\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n\\n    sha256_to_field(hash_input_flattened)\\n}\\n\\n// Computes the final logs hash for a tx.\\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\\n    let mut hash_input_flattened = [0; N * 32];\\n    for offset in 0..N {\\n        // TODO: This is not checking that the decomposition is smaller than P\\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n    // Ideally we would push to a slice then hash, but there is no sha_slice\\n    // Hardcode to 256 bytes for now\\n    let mut hash = sha256_to_field(hash_input_flattened);\\n    // Not having a 0 value hash for empty logs causes issues with empty txs\\n    // used for padding. Returning early is currently unsupported.\\n    // We always provide sorted logs here, so 0 being empty means all are empty.\\n    if is_empty(logs[0]) {\\n        hash = 0;\\n    }\\n    hash\\n}\\n\\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\\n    crate::hash::poseidon2_hash(key)\\n}\\n\\n#[inline_always]\\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\\n}\\n\\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\\n    poseidon2_hash(inputs_with_separator)\\n}\\n\\n// Performs a fixed length hash with a subarray of the given input.\\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\\n// Using stdlib poseidon, this will always absorb an extra 1 as a \'variable\' hash, and not match spongeblob.squeeze()\\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\\n#[no_predicates]\\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\\n    sponge.squeeze()\\n}\\n\\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\\n// and absorbing in chunks of 3 below.\\n#[no_predicates]\\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n    // fixed-length and variable-length hashes do not collide)\\n    if in_len != N {\\n        sponge.absorb(1);\\n    }\\n    sponge.squeeze()\\n}\\n\\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\\n// The below code forces the compiler to:\\n//  - absorb normally up to 2 times to set cache_size to 1\\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\\n//  - absorb normally up to 2 times to add any remaining values to the hash\\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\\n\\n#[no_predicates]\\nfn poseidon2_absorb_chunks<let N: u32>(\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n) -> Poseidon2Sponge {\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\\n    // since we cannot isolate computation branches. The below is just to avoid that.\\n    let shift = if in_len == 0 { 0 } else { 1 };\\n    if in_len != 0 {\\n        // cache_size = 0, init absorb\\n        sponge.cache[0] = input[0];\\n        sponge.cache_size = 1;\\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\\n        // max_remainder = (N - 1) % 3;\\n        // max_chunks = (N - 1 - max_remainder) / 3;\\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            variable,\\n            shift,\\n        );\\n    }\\n    sponge\\n}\\n\\n// NB: If it\'s not required to check that the non-absorbed elts of \'input\' are 0s, set skip_0_check=true\\n#[no_predicates]\\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    skip_0_check: bool,\\n) -> Poseidon2Sponge {\\n    let mut sponge = in_sponge;\\n    // \'shift\' is to account for already added inputs\\n    let mut shift = 0;\\n    // \'stop\' is to avoid an underflow when inputting in_len = 0\\n    let mut stop = false;\\n    for i in 0..3 {\\n        if shift == in_len {\\n            stop = true;\\n        }\\n        if (sponge.cache_size != 1) & (!stop) {\\n            sponge.absorb(input[i]);\\n            shift += 1;\\n        }\\n    }\\n    sponge = if stop {\\n        sponge\\n    } else {\\n        // max_chunks = (N - (N % 3)) / 3;\\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            skip_0_check,\\n            shift,\\n        )\\n    };\\n    sponge\\n}\\n\\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\\n// shift - the num of elts already absorbed to ensure the sponge\'s cache_size = 1\\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\\n// NB: The 0 checks (\'Found non-zero field...\') are messy, but having a separate loop over N to check\\n// for 0s costs 3N gates. Current approach is approx 2N gates.\\n#[no_predicates]\\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n    shift: u32,\\n) -> Poseidon2Sponge {\\n    assert(in_len <= N, \\"Given in_len to absorb is larger than the input array len\\");\\n    // When we have an existing sponge, we may have a shift of 0, and the final \'k+2\' below = N\\n    // The below avoids an overflow\\n    let skip_last = 3 * M == N;\\n    // Writing in_sponge: &mut does not compile\\n    let mut sponge = in_sponge;\\n    let mut should_add = true;\\n    // The num of things left over after absorbing in 3s\\n    let remainder = (in_len - shift) % 3;\\n    // The num of chunks of 3 to absorb (maximum M)\\n    let chunks = (in_len - shift - remainder) / 3;\\n    for i in 0..M {\\n        // Now we loop through cache size = 1 -> 3\\n        should_add &= i != chunks;\\n        // This is the index at the start of the chunk (for readability)\\n        let k = 3 * i + shift;\\n        if should_add {\\n            // cache_size = 1, 2 => just assign\\n            sponge.cache[1] = input[k];\\n            sponge.cache[2] = input[k + 1];\\n            // cache_size = 3 => duplex + perm\\n            for j in 0..3 {\\n                sponge.state[j] += sponge.cache[j];\\n            }\\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\\n            sponge.cache[0] = input[k + 2];\\n            // cache_size is now 1 again, repeat loop\\n        } else if (!variable) & (i != chunks) {\\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\\n            // NB: we don\'t check at i == chunks, because that chunk contains elts to be absorbed or checked below\\n            let last_0 = if (i == M - 1) & (skip_last) {\\n                0\\n            } else {\\n                input[k + 2]\\n            };\\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\\n            assert(all_0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    // we have \'remainder\' num of items left to absorb\\n    should_add = true;\\n    // below is to avoid overflows (i.e. if inlen is close to N)\\n    let mut should_check = !variable;\\n    for i in 0..3 {\\n        should_add &= i != remainder;\\n        should_check &= in_len - remainder + i != N;\\n        if should_add {\\n            // we want to absorb the final \'remainder\' items\\n            sponge.absorb(input[in_len - remainder + i]);\\n        } else if should_check {\\n            assert(input[in_len - remainder + i] == 0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    sponge\\n}\\n\\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let in_len = inputs.len() + 1;\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    sponge.absorb(separator.to_field());\\n\\n    for i in 0..inputs.len() {\\n        sponge.absorb(inputs[i]);\\n    }\\n\\n    sponge.squeeze()\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\\n    let mut fields = [0; (N + 30) / 31];\\n    let mut field_index = 0;\\n    let mut current_field = [0; 31];\\n    for i in 0..inputs.len() {\\n        let index = i % 31;\\n        current_field[index] = inputs[i];\\n        if index == 30 {\\n            fields[field_index] = field_from_bytes(current_field, false);\\n            current_field = [0; 31];\\n            field_index += 1;\\n        }\\n    }\\n    if field_index != fields.len() {\\n        fields[field_index] = field_from_bytes(current_field, false);\\n    }\\n    poseidon2_hash(fields)\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\\n    assert(sub_chunk_hash == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_variable() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\\n    assert(variable_chunk_hash == variable_len_hash);\\n}\\n\\n#[test]\\nfn existing_sponge_poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    // absorb 250 of the 501 things\\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\\n    assert(final_sponge.squeeze() == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_empty_inputs() {\\n    let in_len = 0;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    let mut first_sponge =\\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\\n}\\n\\n#[test]\\nfn smoke_sha256_to_field() {\\n    let full_buffer = [\\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\\n    ];\\n    let result = sha256_to_field(full_buffer);\\n\\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\\n\\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\\n    let result_bytes = sha256::digest(full_buffer);\\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\\n    assert(truncated_field == result);\\n    let mod_res = result + (result_bytes[31] as Field);\\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\\n}\\n\\n#[test]\\nfn compute_l2_l1_hash() {\\n    // All zeroes\\n    let hash_result =\\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\\n\\n    // Non-zero case\\n    let hash_result = compute_l2_to_l1_hash(\\n        AztecAddress::from_field(1),\\n        EthAddress::from_field(3),\\n        5,\\n        2,\\n        4,\\n    );\\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\\n}\\n\\n#[test]\\nfn silo_l2_to_l1_message_matches_typescript() {\\n    let version = 4;\\n    let chainId = 5;\\n\\n    let hash = silo_l2_to_l1_message(\\n        ScopedL2ToL1Message {\\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\\n            contract_address: AztecAddress::from_field(3),\\n        },\\n        version,\\n        chainId,\\n    );\\n\\n    // The following value was generated by `l2_to_l1_message.test.ts`\\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\\n\\n    assert_eq(hash, hash_from_typescript);\\n}\\n"},"268":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr","source":"use crate::traits::{Deserialize, Serialize, ToField};\\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\\nuse std::meta::derive;\\n\\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\\n\\n#[derive(Serialize, Deserialize)]\\npub struct IndexedTaggingSecret {\\n    app_tagging_secret: Field,\\n    index: u32,\\n}\\n\\nimpl IndexedTaggingSecret {\\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\\n        poseidon2_hash(\\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\\n        )\\n    }\\n}\\n"},"283":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\\n\\npub global POINT_LENGTH: u32 = 3;\\n\\nimpl Serialize<POINT_LENGTH> for Point {\\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\\n        [self.x, self.y, self.is_infinite as Field]\\n    }\\n}\\n\\nimpl Hash for Point {\\n    fn hash(self) -> Field {\\n        poseidon2_hash(self.serialize())\\n    }\\n}\\n\\nimpl Empty for Point {\\n    /// Note: Does not return a valid point on curve - instead represents an empty/\\"unpopulated\\" point struct (e.g.\\n    /// empty/unpopulated value in an array of points).\\n    fn empty() -> Self {\\n        Point { x: 0, y: 0, is_infinite: false }\\n    }\\n}\\n\\nimpl Deserialize<POINT_LENGTH> for Point {\\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\\n    }\\n}\\n// TODO(#11356): use compact representation here.\\nimpl Packable<POINT_LENGTH> for Point {\\n    fn pack(self) -> [Field; POINT_LENGTH] {\\n        self.serialize()\\n    }\\n\\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\\n        Self::deserialize(packed)\\n    }\\n}\\n"},"284":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr","source":"use crate::constants::TWO_POW_64;\\n\\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\\n// has a private absorb() method (it\'s also designed to just be a hasher)\\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2Sponge {\\n    pub cache: [Field; 3],\\n    pub state: [Field; 4],\\n    pub cache_size: u32,\\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2Sponge {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\\n        let mut result =\\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    pub fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    pub fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let iv: Field = (in_len as Field) * TWO_POW_64;\\n        let mut sponge = Poseidon2Sponge::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n"},"293":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\\n    address::public_keys_hash::PublicKeysHash,\\n    constants::{\\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\\n    },\\n    hash::poseidon2_hash_with_separator,\\n    point::POINT_LENGTH,\\n    traits::{Deserialize, Hash, Serialize},\\n};\\n\\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\nuse std::default::Default;\\n\\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\\n\\npub struct PublicKeys {\\n    pub npk_m: NpkM,\\n    pub ivpk_m: IvpkM,\\n    pub ovpk_m: OvpkM,\\n    pub tpk_m: TpkM,\\n}\\n\\npub trait ToPoint {\\n    fn to_point(self) -> Point;\\n}\\n\\npub struct NpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for NpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for NpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\\nimpl Hash for NpkM {\\n    fn hash(self) -> Field {\\n        self.inner.hash()\\n    }\\n}\\n\\npub struct IvpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for IvpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for IvpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\npub struct OvpkM {\\n    pub inner: Point,\\n}\\n\\nimpl Hash for OvpkM {\\n    fn hash(self) -> Field {\\n        self.inner.hash()\\n    }\\n}\\n\\nimpl ToPoint for OvpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for OvpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\npub struct TpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for TpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for TpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\nimpl Default for PublicKeys {\\n    fn default() -> Self {\\n        PublicKeys {\\n            npk_m: NpkM {\\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\\n            },\\n            ivpk_m: IvpkM {\\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\\n            },\\n            ovpk_m: OvpkM {\\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\\n            },\\n            tpk_m: TpkM {\\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\\n            },\\n        }\\n    }\\n}\\n\\nimpl Eq for PublicKeys {\\n    fn eq(self, other: PublicKeys) -> bool {\\n        (self.npk_m.inner == other.npk_m.inner)\\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\\n            & (self.tpk_m.inner == other.tpk_m.inner)\\n    }\\n}\\n\\nimpl PublicKeys {\\n    pub fn hash(self) -> PublicKeysHash {\\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\\n            self.serialize(),\\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\\n        ))\\n    }\\n}\\n\\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\\n        [\\n            self.npk_m.inner.x,\\n            self.npk_m.inner.y,\\n            self.npk_m.inner.is_infinite as Field,\\n            self.ivpk_m.inner.x,\\n            self.ivpk_m.inner.y,\\n            self.ivpk_m.inner.is_infinite as Field,\\n            self.ovpk_m.inner.x,\\n            self.ovpk_m.inner.y,\\n            self.ovpk_m.inner.is_infinite as Field,\\n            self.tpk_m.inner.x,\\n            self.tpk_m.inner.y,\\n            self.tpk_m.inner.is_infinite as Field,\\n        ]\\n    }\\n}\\n\\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\\n        PublicKeys {\\n            npk_m: NpkM {\\n                inner: Point {\\n                    x: serialized[0],\\n                    y: serialized[1],\\n                    is_infinite: serialized[2] as bool,\\n                },\\n            },\\n            ivpk_m: IvpkM {\\n                inner: Point {\\n                    x: serialized[3],\\n                    y: serialized[4],\\n                    is_infinite: serialized[5] as bool,\\n                },\\n            },\\n            ovpk_m: OvpkM {\\n                inner: Point {\\n                    x: serialized[6],\\n                    y: serialized[7],\\n                    is_infinite: serialized[8] as bool,\\n                },\\n            },\\n            tpk_m: TpkM {\\n                inner: Point {\\n                    x: serialized[9],\\n                    y: serialized[10],\\n                    is_infinite: serialized[11] as bool,\\n                },\\n            },\\n        }\\n    }\\n}\\n\\npub struct AddressPoint {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for AddressPoint {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_public_keys_hash() {\\n    let keys = PublicKeys {\\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\\n    };\\n\\n    let actual = keys.hash();\\n    let expected_public_keys_hash =\\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\\n\\n    assert(actual.to_field() == expected_public_keys_hash);\\n}\\n\\n#[test]\\nunconstrained fn compute_default_hash() {\\n    let keys = PublicKeys::default();\\n\\n    let actual = keys.hash();\\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\\n\\n    assert(actual.to_field() == test_data_default_hash);\\n}\\n\\n#[test]\\nunconstrained fn test_public_keys_serialization() {\\n    let keys = PublicKeys {\\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\\n    };\\n\\n    let serialized = keys.serialize();\\n    let deserialized = PublicKeys::deserialize(serialized);\\n\\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\\n}\\n"},"330":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"pub mod assert_array_appended;\\npub mod assert_array_prepended;\\npub mod assert_combined_array;\\npub mod assert_combined_transformed_array;\\npub mod assert_exposed_sorted_transformed_value_array;\\npub mod assert_sorted_array;\\npub mod assert_sorted_transformed_value_array;\\npub mod assert_split_sorted_transformed_value_arrays;\\npub mod assert_split_transformed_value_arrays;\\npub mod get_sorted_result;\\npub mod get_sorted_tuple;\\npub mod sort_by;\\npub mod sort_by_counter;\\n\\n// Re-exports.\\npub use assert_array_appended::{\\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\\n    assert_array_appended_scoped,\\n};\\npub use assert_array_prepended::assert_array_prepended;\\npub use assert_combined_array::{assert_combined_array, combine_arrays};\\npub use assert_combined_transformed_array::{\\n    assert_combined_transformed_array, combine_and_transform_arrays,\\n};\\npub use assert_exposed_sorted_transformed_value_array::{\\n    assert_exposed_sorted_transformed_value_array,\\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\\n};\\npub use assert_sorted_array::assert_sorted_array;\\npub use assert_sorted_transformed_value_array::{\\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\\n};\\npub use assert_split_sorted_transformed_value_arrays::{\\n    assert_split_sorted_transformed_value_arrays_asc,\\n    assert_split_sorted_transformed_value_arrays_desc,\\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\\n};\\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\\npub use get_sorted_result::{get_sorted_result, SortedResult};\\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\\n\\nuse crate::traits::{Empty, is_empty};\\n\\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\\n    src: [Field; SRC_LEN],\\n    offset: u32,\\n) -> [Field; DST_LEN] {\\n    assert(offset + DST_LEN <= SRC_LEN, \\"offset too large\\");\\n\\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\\n    for i in 0..DST_LEN {\\n        dst[i] = src[i + offset];\\n    }\\n\\n    dst\\n}\\n\\n// Helper function to convert a validated array to BoundedVec.\\n// Important: Only use it for validated arrays: validate_array(array) should be true.\\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\\nwhere\\n    T: Empty + Eq,\\n{\\n    let len = array_length(array);\\n    BoundedVec::from_parts_unchecked(array, len)\\n}\\n\\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\\n// is not found, the function returns N as the index.\\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\\n    array: [T; N],\\n    find: fn[Env](T) -> bool,\\n) -> u32 {\\n    let mut index = N;\\n    for i in 0..N {\\n        // We check `index == N` to ensure that we only update the index if we haven\'t found a match yet.\\n        if (index == N) & find(array[i]) {\\n            index = i;\\n        }\\n    }\\n    index\\n}\\n\\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\\n// valid.\\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\\nwhere\\n    T: Empty + Eq,\\n{\\n    let mut seen_empty = false;\\n    let mut length = 0;\\n    for i in 0..N {\\n        if is_empty(array[i]) {\\n            seen_empty = true;\\n        } else {\\n            assert(seen_empty == false, \\"invalid array\\");\\n            length += 1;\\n        }\\n    }\\n    length\\n}\\n\\n// Helper function to count the number of non-empty elements in a validated array.\\n// Important: Only use it for validated arrays where validate_array(array) returns true,\\n// which ensures that:\\n// 1. All elements before the first empty element are non-empty\\n// 2. All elements after and including the first empty element are empty\\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\\nwhere\\n    T: Empty + Eq,\\n{\\n    // We get the length by checking the index of the first empty element.\\n\\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\\n    /// of the element and non-emptiness of the previous element is checked below.\\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\\n    if length != 0 {\\n        assert(!is_empty(array[length - 1]));\\n    }\\n    if length != N {\\n        assert(is_empty(array[length]));\\n    }\\n    length\\n}\\n\\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\\n    let mut result = [array1[0]; N + M];\\n    for i in 1..N {\\n        result[i] = array1[i];\\n    }\\n    for i in 0..M {\\n        result[i + N] = array2[i];\\n    }\\n    result\\n}\\n\\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\\nwhere\\n    T: Empty + Eq,\\n{\\n    let mut result: [T; N] = [T::empty(); N];\\n    let mut i = 0;\\n    for elem in array1 {\\n        if !is_empty(elem) {\\n            result[i] = elem;\\n            i += 1;\\n        }\\n    }\\n    for elem in array2 {\\n        if !is_empty(elem) {\\n            result[i] = elem;\\n            i += 1;\\n        }\\n    }\\n    result\\n}\\n\\n// Helper fn to create a subarray from a given array\\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\\nwhere\\n    T: Empty,\\n{\\n    assert(M + offset <= N, \\"Subarray length larger than array length\\");\\n    let mut result: [T; M] = [T::empty(); M];\\n    for i in 0..M {\\n        result[i] = array[offset + i];\\n    }\\n    result\\n}\\n\\npub fn check_permutation<T, let N: u32>(\\n    original_array: [T; N],\\n    permuted_array: [T; N],\\n    original_indexes: [u32; N],\\n)\\nwhere\\n    T: Eq + Empty,\\n{\\n    let mut seen_value = [false; N];\\n    for i in 0..N {\\n        let index = original_indexes[i];\\n        let original_value = original_array[index];\\n        assert(permuted_array[i].eq(original_value), \\"Invalid index\\");\\n        assert(!seen_value[index], \\"Duplicated index\\");\\n        seen_value[index] = true;\\n    }\\n}\\n\\n#[test]\\nfn smoke_validate_array() {\\n    let valid_array: [Field; 0] = [];\\n    assert(validate_array(valid_array) == 0);\\n\\n    let valid_array = [0];\\n    assert(validate_array(valid_array) == 0);\\n\\n    let valid_array = [3];\\n    assert(validate_array(valid_array) == 1);\\n\\n    let valid_array = [1, 2, 3];\\n    assert(validate_array(valid_array) == 3);\\n\\n    let valid_array = [1, 2, 3, 0];\\n    assert(validate_array(valid_array) == 3);\\n\\n    let valid_array = [1, 2, 3, 0, 0];\\n    assert(validate_array(valid_array) == 3);\\n}\\n\\n#[test(should_fail_with = \\"invalid array\\")]\\nfn smoke_validate_array_invalid_case0() {\\n    let invalid_array = [0, 1];\\n    let _ = validate_array(invalid_array);\\n}\\n\\n#[test(should_fail_with = \\"invalid array\\")]\\nfn smoke_validate_array_invalid_case1() {\\n    let invalid_array = [1, 0, 0, 1, 0];\\n    let _ = validate_array(invalid_array);\\n}\\n\\n#[test(should_fail_with = \\"invalid array\\")]\\nfn smoke_validate_array_invalid_case2() {\\n    let invalid_array = [0, 0, 0, 0, 1];\\n    let _ = validate_array(invalid_array);\\n}\\n\\n#[test]\\nfn test_empty_array_length() {\\n    assert_eq(array_length([0]), 0);\\n    assert_eq(array_length([0, 0, 0]), 0);\\n}\\n\\n#[test]\\nfn test_array_length() {\\n    assert_eq(array_length([123]), 1);\\n    assert_eq(array_length([123, 0, 0]), 1);\\n    assert_eq(array_length([123, 456]), 2);\\n    assert_eq(array_length([123, 456, 0]), 2);\\n}\\n\\n#[test]\\nfn test_array_length_invalid_arrays() {\\n    // Result can be misleading (but correct) for invalid arrays.\\n    assert_eq(array_length([0, 0, 123]), 0);\\n    assert_eq(array_length([0, 123, 0]), 0);\\n    assert_eq(array_length([0, 123, 456]), 0);\\n    assert_eq(array_length([123, 0, 456]), 1);\\n}\\n\\n#[test]\\nunconstrained fn find_index_greater_than_min() {\\n    let values = [10, 20, 30, 40];\\n    let min = 22;\\n    let index = find_index_hint(values, |v: Field| min.lt(v));\\n    assert_eq(index, 2);\\n}\\n\\n#[test]\\nunconstrained fn find_index_not_found() {\\n    let values = [10, 20, 30, 40];\\n    let min = 100;\\n    let index = find_index_hint(values, |v: Field| min.lt(v));\\n    assert_eq(index, 4);\\n}\\n\\n#[test]\\nfn test_array_concat() {\\n    let array0 = [1, 2, 3];\\n    let array1 = [4, 5];\\n    let concatenated = array_concat(array0, array1);\\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\\n}\\n\\n#[test]\\nfn check_permutation_basic_test() {\\n    let original_array = [1, 2, 3];\\n    let permuted_array = [3, 1, 2];\\n    let indexes = [2, 0, 1];\\n    check_permutation(original_array, permuted_array, indexes);\\n}\\n\\n#[test(should_fail_with = \\"Duplicated index\\")]\\nfn check_permutation_duplicated_index() {\\n    let original_array = [0, 1, 0];\\n    let permuted_array = [1, 0, 0];\\n    let indexes = [1, 0, 0];\\n    check_permutation(original_array, permuted_array, indexes);\\n}\\n\\n#[test(should_fail_with = \\"Invalid index\\")]\\nfn check_permutation_invalid_index() {\\n    let original_array = [0, 1, 2];\\n    let permuted_array = [1, 0, 0];\\n    let indexes = [1, 0, 2];\\n    check_permutation(original_array, permuted_array, indexes);\\n}\\n"},"333":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\\n    data: [Field; N],\\n    offset: u32,\\n}\\n\\nimpl<let N: u32> Reader<N> {\\n    pub fn new(data: [Field; N]) -> Self {\\n        Self { data, offset: 0 }\\n    }\\n\\n    pub fn read(&mut self) -> Field {\\n        let result = self.data[self.offset];\\n        self.offset += 1;\\n        result\\n    }\\n\\n    pub fn read_u32(&mut self) -> u32 {\\n        self.read() as u32\\n    }\\n\\n    pub fn read_bool(&mut self) -> bool {\\n        self.read() as bool\\n    }\\n\\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\\n        let mut result = [0; K];\\n        for i in 0..K {\\n            result[i] = self.data[self.offset + i];\\n        }\\n        self.offset += K;\\n        result\\n    }\\n\\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\\n        let result = deserialise(self.read_array());\\n        result\\n    }\\n\\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\\n        &mut self,\\n        deserialise: fn([Field; K]) -> T,\\n        mut result: [T; C],\\n    ) -> [T; C] {\\n        for i in 0..C {\\n            result[i] = self.read_struct(deserialise);\\n        }\\n        result\\n    }\\n\\n    pub fn finish(self) {\\n        assert(self.offset == self.data.len(), \\"Reader did not read all data\\");\\n    }\\n}\\n"},"338":{"path":"/root/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr","source":"// Elliptic curve implementation\\n// Overview\\n// ========\\n// The following three elliptic curve representations are admissible:\\npub mod tecurve; // Twisted Edwards curves\\npub mod swcurve; // Elliptic curves in Short Weierstrass form\\npub mod montcurve; // Montgomery curves\\npub mod consts; // Commonly used curve presets\\n//\\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\\n// they may be freely converted between one another, whereas Short Weierstrass curves are\\n// more general. Diagramatically:\\n//\\n// tecurve == montcurve `subset` swcurve\\n//\\n// Each module is further divided into two submodules, \'affine\' and \'curvegroup\', depending\\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\\n// \'CurveGroup\' coordinates (terminology borrowed from Arkworks, whose conventions we try\\n// to follow) are special coordinate systems with respect to which the group operations may be\\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\\n//\\n// In each of these submodules, there is a Point struct and a Curve struct, the former\\n// representing a point in the coordinate system and the latter a curve configuration.\\n//\\n// Points\\n// ======\\n// Points may be instantiated using the associated function `new`, which takes coordinates\\n// as its arguments. For instance,\\n//\\n// `let p = swcurve::Point::new(1,1);`\\n//\\n// The additive identity may be constructed by a call to the associated function `zero` of no\\n// arguments:\\n//\\n// `let zero = swcurve::Point::zero();`\\n//\\n// Points may be tested for equality by calling the method `eq`:\\n//\\n// `let pred = p.eq(zero);`\\n//\\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\\n//\\n// `constrain pred == p.is_zero();`\\n//\\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\\n// below, as the underlying mappings are those of curves rather than ambient spaces.\\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\\n// (resp. CurveGroup) coordinates.\\n//\\n// Curves\\n// ======\\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\\n// Edwards curve in affine coordinates as follows:\\n//\\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\\n//\\n// The `contains` method may be used to check whether a Point lies on a given curve:\\n//\\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\\n//\\n// The elliptic curve group\'s addition operation is exposed as the `add` method, e.g.\\n//\\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\\n//\\n// subtraction as the `subtract` method, e.g.\\n//\\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\\n//\\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\\n//\\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\\n//\\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\\n// to be of the same length.\\n//\\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\\n// and `into_affine` methods on them, e.g.\\n//\\n// `let bjj_curvegroup = bjj_affine.into_group();`\\n//\\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\\n//\\n// Curve maps\\n// ==========\\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\\n//\\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\\n//\\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\\n// the curve.\\n//\\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\\n//\\n//\\n// *TODO: Replace Field with Bigint.\\n// **TODO: Support arrays of structs to make this work.\\n// Field-dependent constant ZETA = a non-square element of Field\\n// Required for Elligator 2 map\\n// TODO: Replace with built-in constant.\\nglobal ZETA: Field = 5;\\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\\n// TODO: Possibly make this built-in.\\nglobal C1: u32 = 28;\\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\\n// Higher-order version of scalar multiplication\\n// TODO: Make this work so that the submodules\' bit_mul may be defined in terms of it.\\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\\n//    let mut out = e;\\n//    let n = bits.len();\\n//\\n//    for i in 0..n {\\n//        out = add(\\n//            add(out, out),\\n//            if(bits[n - i - 1] == 0) {e} else {p});\\n//    }\\n//\\n//    out\\n//}\\n// TODO: Make this built-in.\\npub fn safe_inverse(x: Field) -> Field {\\n    if x == 0 {\\n        0\\n    } else {\\n        1 / x\\n    }\\n}\\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\\npub fn is_square(x: Field) -> bool {\\n    let v = pow(x, 0 - 1 / 2);\\n\\n    v * (v - 1) == 0\\n}\\n// Power function of two Field arguments of arbitrary size.\\n// Adapted from std::field::pow_32.\\npub fn pow(x: Field, y: Field) -> Field {\\n    let mut r = 1 as Field;\\n    let b: [u1; 254] = y.to_le_bits();\\n\\n    for i in 0..254 {\\n        r *= r;\\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\\n    }\\n\\n    r\\n}\\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\\n// These are pre-computed above as globals.\\npub fn sqrt(x: Field) -> Field {\\n    let mut z = pow(x, C3);\\n    let mut t = z * z * x;\\n    z *= x;\\n    let mut b = t;\\n    let mut c = C5;\\n\\n    for i in 0..(C1 - 1) {\\n        for _j in 1..(C1 - i - 1) {\\n            b *= b;\\n        }\\n\\n        z *= if b == 1 { 1 } else { c };\\n\\n        c *= c;\\n\\n        t *= if b == 1 { 1 } else { c };\\n\\n        b = t;\\n    }\\n\\n    z\\n}\\n\\nmod tests {\\n    use crate::montcurve::affine::Point as MGaffine;\\n    use crate::montcurve::curvegroup::Point as MG;\\n    use crate::swcurve::affine::Point as SWGaffine;\\n    use crate::swcurve::curvegroup::Point as SWG;\\n    use crate::tecurve::affine::Curve as AffineCurve;\\n    use crate::tecurve::affine::Point as Gaffine;\\n    use crate::tecurve::curvegroup::Point as G;\\n\\n    #[test]\\n    fn smoke_test() {\\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\\n        let bjj_affine = AffineCurve::new(\\n            168700,\\n            168696,\\n            Gaffine::new(\\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\\n            ),\\n        );\\n        // Test addition\\n        let p1_affine = Gaffine::new(\\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\\n        );\\n        let p2_affine = Gaffine::new(\\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\\n        );\\n\\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\\n        assert(p3_affine.eq(Gaffine::new(\\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\\n        )));\\n        // Test scalar multiplication\\n        let p4_affine = bjj_affine.mul(2, p1_affine);\\n        assert(p4_affine.eq(Gaffine::new(\\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\\n        )));\\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\\n        // Test subtraction\\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\\n        assert(p5_affine.eq(Gaffine::zero()));\\n        // Check that these points are on the curve\\n        assert(\\n            bjj_affine.contains(bjj_affine.gen)\\n                & bjj_affine.contains(p1_affine)\\n                & bjj_affine.contains(p2_affine)\\n                & bjj_affine.contains(p3_affine)\\n                & bjj_affine.contains(p4_affine)\\n                & bjj_affine.contains(p5_affine),\\n        );\\n        // Test CurveGroup equivalents\\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\\n        let p1 = p1_affine.into_group();\\n        let p2 = p2_affine.into_group();\\n        let p3 = p3_affine.into_group();\\n        let p4 = p4_affine.into_group();\\n        let p5 = p5_affine.into_group();\\n        // Test addition\\n        assert(p3.eq(bjj.add(p1, p2)));\\n        // Test scalar multiplication\\n        assert(p4.eq(bjj.mul(2, p1)));\\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\\n        // Test subtraction\\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\\n        assert(p5.eq(G::zero()));\\n        // Check that these points are on the curve\\n        assert(\\n            bjj.contains(bjj.gen)\\n                & bjj.contains(p1)\\n                & bjj.contains(p2)\\n                & bjj.contains(p3)\\n                & bjj.contains(p4)\\n                & bjj.contains(p5),\\n        );\\n        // Test SWCurve equivalents of the above\\n        // First the affine representation\\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\\n\\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\\n        // Addition\\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\\n        // Doubling\\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\\n        // Subtraction\\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\\n            p3_swcurve_affine,\\n            p3_swcurve_affine,\\n        )));\\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\\n        // Check that these points are on the curve\\n        assert(\\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\\n        );\\n        // Then the CurveGroup representation\\n        let bjj_swcurve = bjj.into_swcurve();\\n\\n        let p1_swcurve = bjj.map_into_swcurve(p1);\\n        let p2_swcurve = bjj.map_into_swcurve(p2);\\n        let p3_swcurve = bjj.map_into_swcurve(p3);\\n        let p4_swcurve = bjj.map_into_swcurve(p4);\\n        let p5_swcurve = bjj.map_into_swcurve(p5);\\n        // Addition\\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\\n        // Doubling\\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\\n        // Subtraction\\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\\n        assert(p5_swcurve.eq(SWG::zero()));\\n        // Check that these points are on the curve\\n        assert(\\n            bjj_swcurve.contains(bjj_swcurve.gen)\\n                & bjj_swcurve.contains(p1_swcurve)\\n                & bjj_swcurve.contains(p2_swcurve)\\n                & bjj_swcurve.contains(p3_swcurve)\\n                & bjj_swcurve.contains(p4_swcurve)\\n                & bjj_swcurve.contains(p5_swcurve),\\n        );\\n        // Test MontCurve conversions\\n        // First the affine representation\\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\\n\\n        let p1_montcurve_affine = p1_affine.into_montcurve();\\n        let p2_montcurve_affine = p2_affine.into_montcurve();\\n        let p3_montcurve_affine = p3_affine.into_montcurve();\\n        let p4_montcurve_affine = p4_affine.into_montcurve();\\n        let p5_montcurve_affine = p5_affine.into_montcurve();\\n        // Addition\\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\\n            p1_montcurve_affine,\\n            p2_montcurve_affine,\\n        )));\\n        // Doubling\\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\\n        // Subtraction\\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\\n            p3_montcurve_affine,\\n            p3_montcurve_affine,\\n        )));\\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\\n        // Check that these points are on the curve\\n        assert(\\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\\n        );\\n        // Then the CurveGroup representation\\n        let bjj_montcurve = bjj.into_montcurve();\\n\\n        let p1_montcurve = p1_montcurve_affine.into_group();\\n        let p2_montcurve = p2_montcurve_affine.into_group();\\n        let p3_montcurve = p3_montcurve_affine.into_group();\\n        let p4_montcurve = p4_montcurve_affine.into_group();\\n        let p5_montcurve = p5_montcurve_affine.into_group();\\n        // Addition\\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\\n        // Doubling\\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\\n        // Subtraction\\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\\n        assert(p5_montcurve.eq(MG::zero()));\\n        // Check that these points are on the curve\\n        assert(\\n            bjj_montcurve.contains(bjj_montcurve.gen)\\n                & bjj_montcurve.contains(p1_montcurve)\\n                & bjj_montcurve.contains(p2_montcurve)\\n                & bjj_montcurve.contains(p3_montcurve)\\n                & bjj_montcurve.contains(p4_montcurve)\\n                & bjj_montcurve.contains(p5_montcurve),\\n        );\\n        // Elligator 2 map-to-curve\\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\\n\\n        assert(ell2_pt_map.eq(MGaffine::new(\\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\\n        )\\n            .into_tecurve()));\\n        // SWU map-to-curve\\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\\n\\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\\n        ))));\\n    }\\n\\n}\\n"},"345":{"path":"/root/nargo/github.com/noir-lang/schnorr/v0.1.1/src/lib.nr","source":"use std::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\\nuse std::hash::{blake2s, pedersen_hash};\\n\\npub fn verify_signature<let N: u32>(\\n    public_key: EmbeddedCurvePoint,\\n    signature: [u8; 64],\\n    message: [u8; N],\\n) -> bool {\\n    //scalar lo/hi from bytes\\n    let sig_s = scalar_from_bytes(signature, 0);\\n    let sig_e = scalar_from_bytes(signature, 32);\\n    // pub_key is on Grumpkin curve\\n    let mut is_ok = (public_key.y * public_key.y == public_key.x * public_key.x * public_key.x - 17)\\n        & (!public_key.is_infinite);\\n\\n    if ((sig_s.lo != 0) | (sig_s.hi != 0)) & ((sig_e.lo != 0) | (sig_e.hi != 0)) {\\n        let (r_is_infinite, result) =\\n            calculate_signature_challenge(public_key, sig_s, sig_e, message);\\n\\n        is_ok &= !r_is_infinite;\\n        for i in 0..32 {\\n            is_ok &= result[i] == signature[32 + i];\\n        }\\n    } else {\\n        is_ok = false;\\n    }\\n    is_ok\\n}\\n\\npub fn assert_valid_signature<let N: u32>(\\n    public_key: EmbeddedCurvePoint,\\n    signature: [u8; 64],\\n    message: [u8; N],\\n) {\\n    //scalar lo/hi from bytes\\n    let sig_s = scalar_from_bytes(signature, 0);\\n    let sig_e = scalar_from_bytes(signature, 32);\\n\\n    // assert pub_key is on Grumpkin curve\\n    assert(public_key.y * public_key.y == public_key.x * public_key.x * public_key.x - 17);\\n    assert(public_key.is_infinite == false);\\n    // assert signature is not null\\n    assert((sig_s.lo != 0) | (sig_s.hi != 0));\\n    assert((sig_e.lo != 0) | (sig_e.hi != 0));\\n\\n    let (r_is_infinite, result) = calculate_signature_challenge(public_key, sig_s, sig_e, message);\\n\\n    assert(!r_is_infinite);\\n    for i in 0..32 {\\n        assert(result[i] == signature[32 + i]);\\n    }\\n}\\n\\nfn calculate_signature_challenge<let N: u32>(\\n    public_key: EmbeddedCurvePoint,\\n    sig_s: EmbeddedCurveScalar,\\n    sig_e: EmbeddedCurveScalar,\\n    message: [u8; N],\\n) -> (bool, [u8; 32]) {\\n    let g1 = EmbeddedCurvePoint {\\n        x: 1,\\n        y: 17631683881184975370165255887551781615748388533673675138860,\\n        is_infinite: false,\\n    };\\n    let r = multi_scalar_mul([g1, public_key], [sig_s, sig_e]);\\n    // compare the _hashes_ rather than field elements modulo r\\n    let pedersen_hash = pedersen_hash([r.x, public_key.x, public_key.y]);\\n    let pde: [u8; 32] = pedersen_hash.to_be_bytes();\\n\\n    let mut hash_input = [0; N + 32];\\n    for i in 0..32 {\\n        hash_input[i] = pde[i];\\n    }\\n    for i in 0..N {\\n        hash_input[32 + i] = message[i];\\n    }\\n\\n    let result = blake2s(hash_input);\\n    (r.is_infinite, result)\\n}\\n\\n//Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\\nfn scalar_from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\\n    let mut v: Field = 1;\\n    let mut lo: Field = 0;\\n    let mut hi: Field = 0;\\n    for i in 0..16 {\\n        lo = lo + (bytes[offset + 31 - i] as Field) * v;\\n        hi = hi + (bytes[offset + 15 - i] as Field) * v;\\n        v = v * 256;\\n    }\\n    let sig_s = EmbeddedCurveScalar::new(lo, hi);\\n    sig_s\\n}\\n\\nmod test {\\n    use std::embedded_curve_ops::EmbeddedCurvePoint;\\n\\n    use super::verify_signature;\\n\\n    #[test]\\n    fn test_zero_signature() {\\n        let public_key: EmbeddedCurvePoint = EmbeddedCurvePoint {\\n            x: 1,\\n            y: 17631683881184975370165255887551781615748388533673675138860,\\n            is_infinite: false,\\n        };\\n        let signature: [u8; 64] = [0; 64];\\n        let message: [u8; _] = [2; 64]; // every message\\n        let verified = verify_signature(public_key, signature, message);\\n        assert(!verified);\\n    }\\n\\n    #[test]\\n    fn smoke_test() {\\n        let message: [u8; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\\n        let pub_key_x: Field = 0x04b260954662e97f00cab9adb773a259097f7a274b83b113532bce27fa3fb96a;\\n        let pub_key_y: Field = 0x2fd51571db6c08666b0edfbfbc57d432068bccd0110a39b166ab243da0037197;\\n        let signature: [u8; 64] = [\\n            1, 13, 119, 112, 212, 39, 233, 41, 84, 235, 255, 93, 245, 172, 186, 83, 157, 253, 76,\\n            77, 33, 128, 178, 15, 214, 67, 105, 107, 177, 234, 77, 48, 27, 237, 155, 84, 39, 84,\\n            247, 27, 22, 8, 176, 230, 24, 115, 145, 220, 254, 122, 135, 179, 171, 4, 214, 202, 64,\\n            199, 19, 84, 239, 138, 124, 12,\\n        ];\\n\\n        let pub_key = EmbeddedCurvePoint { x: pub_key_x, y: pub_key_y, is_infinite: false };\\n        let valid_signature = verify_signature(pub_key, signature, message);\\n        assert(valid_signature);\\n        super::assert_valid_signature(pub_key, signature, message);\\n    }\\n\\n}\\n\\nmod bench {\\n    use super::{assert_valid_signature, verify_signature};\\n    use std::embedded_curve_ops::EmbeddedCurvePoint;\\n\\n    #[export]\\n    pub fn bench_verify_signature(\\n        public_key: EmbeddedCurvePoint,\\n        signature: [u8; 64],\\n        message: [u8; 32],\\n    ) -> bool {\\n        verify_signature(public_key, signature, message)\\n    }\\n\\n    #[export]\\n    pub fn bench_assert_valid_signature(\\n        public_key: EmbeddedCurvePoint,\\n        signature: [u8; 64],\\n        message: [u8; 32],\\n    ) {\\n        assert_valid_signature(public_key, signature, message)\\n    }\\n}\\n"}}}'));class $y extends Fy{constructor(e){super(Ky),this.signingPrivateKey=e}async getDeploymentArgs(){const e=await(new pm).computePublicKey(this.signingPrivateKey);return[e.x,e.y]}getAuthWitnessProvider(e){return new eA(this.signingPrivateKey)}}class eA{constructor(e){this.signingPrivateKey=e}async createAuthWit(e){const t=new pm,n=await t.constructSignature(e.toBuffer(),this.signingPrivateKey);return new $_(e,[...n.toBuffer()])}}function tA(e,t,n,s){return My.create(e,t,new $y(n),s)}const nA=ry(JSON.parse('{"transpiled":true,"noir_version":"1.0.0-beta.1+c4e38215cedb5afb","name":"SchnorrSingleKeyAccount","functions":[{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAA/92c927bMBDG5URKIieOndG9927leHeme+/W/dsdfosWAtqHSPu09Zfw7DPDAilCovkqQJCto+9+PFHUiTy6EG1s3cFeMJ9jc5w2R5xfjMY3Kbtqjtn2tqpHXVkoxgIB4wQB4yQBY0zAmBAwThEwThMwzhAwpgSMRQLGWQLGOQLGEgHjPAFjmYCxQsC4EIAxBOciCeeSR04d24fiXY52fhvdRcC4m4BxDwHjXgLGfQSM+wkYDxAwHiRgPETAeJiA8QgB41ECxmMEjMcJGE8QMJ4kYDxFwHiagPEMAeNZAsZzBIznCRgvEDBeJGC8RMB4mYDxCgFjRsBYJWBcIWCsETDWCRgbBIxNAsYWAWObgLFDwHiVgPEaAeN1AsYbBIw3CRhvETCuEjDeJmC8Q8B4l4DxHgHjfQLGBwSMDwkYHxEwPiZgfELA+JSA8RkB43MCxhcEjC8JGF8RML4mYHxDwPg2AGMIzncknO9JOLuBOKMPFvTEYMfCLSyMwsIjLOzBwhksTMHCDyyswMIFLAxA4j0S25E4XhnsSHxGUjESdpEEiyRTJHEiSRJJiEjyQxIdktSQBIYkKyQxIUno6GA/NtiRRIIkDSRBIMkAk/iYJMckNCZ5MYmKSUpMAmKSDZNYmCRCrTDJgUkEDNJjEByDzBjExSApBiExyIdBNAxSYRAIgywYxJBBArzk4iUSL2l4CcJLBoJ4BMkIQhHkIYhCkIIgAA9ZPMTwkEAnjE4OnQhuUtwAaFzd6M+bNJIf5pia44SSe1xEV00tuz71t7POx9RRP4/8tdTonAmiv9ES/WkY/kwW2t7LR/p1XcTupDl285Evu/k4k5RZU2XWrDJSnzDXu14P66/qSsnyUaTqIraLYWzXCpY9fV20TOwXo5Btc2NRsrYnPLZ/pO8oSZl8xFOwZHG+uR4iS5RMri/snFfl7LY1Y8mEBZu035LyjWwfjEyuaax0+muvjXbY9lrP/l17rVf/x/YaW7I431yPv22vum3Z7TWJRpv0pSKbUrKflmxayX7lI9sNxdE0n8P2yRvPYH3v+X6GLTn4tS1s0/nIH9IGJ9W5RPlv3T+6vCVLlSzOx+0UzfdY2dG6hCOxytfN97I5TqnfyO8rDvtTlv0xbsc52y+po3zqKI+2dsl8njU72tA3+U20+d7Fvmq+Z9vamh1XP+lPf6vm6gs98n8R/bNB9NeH+ufC8A/jqlIY/w/1z4fh74v+chj9TdFfCaO/IfoXguhfGcYJ+s927DhhSZ33GNduOU4Q+0WLNVScsGTx2P7RcQJkyw7WikNm9wHLDjvLDjsuXfMedS141FXcoXUsedRV8agr9ajL53Wc86jLp7/KHnXNeNTls9379Jdcx7DjVVnmitOiAPqLYfQP+37po/W7ma6T2E+s8l8tP88F8fNoHEr6M+0LVyzl0/ZWn9div+TgEe6iQ7adP0D70mj3O+1GZxDSV5srnaxg6RdW+5x+L9L9iy7veva74j6Pvs5cYxBl5VdssZLNW7JEyYRRj0G44mKf/Fvxv7Zfccjs/nmr13IxGm9r+n6cjUb3c5z7r3urvfHHLuuMRn8SjY8xRpb9xCr/3Xy3+7rt3iP9Vq/ar/X6vUbv8+f6p96ipV/7EH76DXVGL3ipUwAA","debug_symbols":"tZZBCoMwEEXvknUWzli17VVKKVGjBEKUqIUi3r2jSCvt+m9CJkzekMULf1a1Laf24ULTDep6m5XvKjO6Lkg1L1qV0Xnv2sfxWCXrQglvF4behLUeRhNHdc0TrWyoZXOW643zVrbpov8aC94bi+LTmPFy10JOYeQTjJzByDmMXMDIZxj5giJTAiMTjAxzkGAOEsxBgjlIMAcJ5iDBHCSYgwxzkGEOMsxBhjnIGAcXqZ4mOlN6uweIZgrVIU+Mr97+RIs+dpWtp2jXkPHNF+vbT6wz3n59KYhzTSnJEBn0Bg==","brillig_names":["process_log"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"bY/RCoMwDEX/Jc99SCqO6a/IkKpRCqWVWgdD/PfFIeI2X8K94eSSu0DHzTzU1vdhgrJawIXWJBu8uGVV0ETrnB3q8xpwG5R9+Gk0frNTMjFBeUMF7DsRd7nurWOR2ar+QEJCvbOidXHglOM1X9DBa8Iv/rGKfZpoTeN4f72ffXtqkl4j/5QaY2i5myNv9U7NZFaUK40SK9Fv","brillig_names":["sync_notes"]},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_auth_witness","decompose_hint","lte_hint","enqueue_public_function_call_internal","call_private_function_internal","debug_log_oracle_wrapper","notify_set_min_revertible_side_effect_counter_oracle_wrapper","notify_created_nullifier_oracle_wrapper","directive_to_radix","directive_invert","directive_integer_quotient"],"verification_key":"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"},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"19458536156181958":{"error_kind":"string","string":"Function verify_private_authwit can only be called statically"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"inner","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"fields":[{"name":"log","type":{"fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData"}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"max_priority_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_auth_witness","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_to_radix","directive_invert","directive_integer_quotient"],"verification_key":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VZy67aQAwdSEJIuAEKn3Cl7tomXJ47Fn3c30AFPqHrrLppP7qMGCcH46siYVfFEpoknhyfOXZmJqHjztY//TrhOA5tz10b9dmGtrzPKkWs0pJn50F4dh+EZ/QgPGNFnh2Bp2/peUvc+ZlL3fl5bC7iTT7BEdzk/gYAwX6HNgttF/yKCakyYZBa+Otyvs/cpSnzf8kCZmqDvyD8vg1+Sbw/1y0+joXiRqF9rVstX+Eeb0U4xuIlXPJ1wfeF+SLwfWU+rOFvzId1T5xIN1qYlOtqY50XGlsKY+u80TrXaofXSOvcmdZoRTnPGB/On/gU1Kdu+fSYLwZfxnwJ+Eh/3z5DP577FPp9hONP0IfXZ+Su65n8lH/U3aK+YgP8k82lHPD8xPVlbPRhDmLQ85npY7FuoD4W+nt9pm/wp2Nvae0ai5ieqBFp1sf+zJeBL64v4+ThPIY4iEU8Etb/QzgfhbYH99D9YyF+j8W/4C1cQ404ViRco/7++Xwfjgfh52voJ93jructvc31ci7N4Xr4qwY/s+F/JPzcBn9J+AMb/GZv82SCPysJv7Dh38xBQ5v6afaWIxv+B8Ifm+DPD7QOv3OtNXNEOJ7Adb35u6pu2SNh/JxxtdojTRgfrg+uwd43FbiOBR/P4VSIMxXiSFiZItaTItboPx1jXxFroIg1VMTSzGOqiKWpV66IVShiada9pl6UR2mf5m0b2vJOk/ZpiviVtE/TfJcnram+YkFDHF/C+v9gOg9MeFYzWnPoWacYGLswin3rek3xC4EP8c4F3z0fZw+L9XGzXmxOW7JqOds0+SwYV34N34twPsb+0tov7fsUtS6ld/8h6OotBl/BfAn4iKP07j804n+L/hh/LPj4+n9rLifuej0csHHjN6+typjb74HSt3rj+Wtx67NJ8XN3PV//q++NqA/fS+cC17Hg4/uTXIiTC3EeEYt/s0cNfV2TTnHd+rVyuVq3f3TRXJS4y/8BHIufsP6/wjmOjdp75vzjalcdX3bH3WK338+/7yYM31sXdPoDg5oBSR0fAAA=","debug_symbols":"tZfBisMgFEX/xbULn8YY+yvDUExiiiAmmGRgCPn3MSVMS7ssdxN84XrceMC7sd636+0a0jDO7PK1sTh2bgljKtO2c9bmEGO4XZ9/M3F8rL7n58mlY5wXlxd2qQVnPvVl0ZTdQ4i+LNXO34JGnkFj/oNa7t+c2RoFNihwgwJbEJiEgJEJRpYwsoKRKxhZw8g1jGxg5AZGhjlIMAcJ5iDBHCSYgwRzkGAOEsxBgjlInzlo1RksV+ENbWFoKXBowqElDq1w6AqH1jh0jUMbHBpno8TZqHA2KpCNe5l+XA6ujf5sTcOauqcStfxO/qVPTXnsfL9mfzSrR6k61FOaV/r+8igDqYqTsuWQctAf","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"globals":{},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::verify_private_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}},{"name":"cancellable","type":{"kind":"boolean"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::entrypoint_parameters"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::entrypoint_abi"}]}},"file_map":{"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\\n\\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\\n/// slices - and thus nested vectors as well - are disallowed).\\n///\\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\\n/// pushing an additional element is also more efficient - the length only needs to be increased\\n/// by one.\\n///\\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\\n/// is a reasonable maximum bound that can be placed on the vector.\\n///\\n/// Example:\\n///\\n/// ```noir\\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\\n/// for i in 0..5 {\\n///     vector.push(i);\\n/// }\\n/// assert(vector.len() == 5);\\n/// assert(vector.max_len() == 10);\\n/// ```\\npub struct BoundedVec<T, let MaxLen: u32> {\\n    storage: [T; MaxLen],\\n    len: u32,\\n}\\n\\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\\n    /// Creates a new, empty vector of length zero.\\n    ///\\n    /// Since this container is backed by an array internally, it still needs an initial value\\n    /// to give each element. To resolve this, each element is zeroed internally. This value\\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\\n    /// assert(empty_vector.len() == 0);\\n    /// ```\\n    ///\\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\\n    /// via a type signature:\\n    ///\\n    /// ```noir\\n    /// fn good() -> BoundedVec<Field, 10> {\\n    ///     // Ok! MaxLen is specified with a type annotation\\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\\n    ///     let v2 = BoundedVec::new();\\n    ///\\n    ///     // Ok! MaxLen is known from the type of `good`\'s return value\\n    ///     v2\\n    /// }\\n    ///\\n    /// fn bad() {\\n    ///     // Error: Type annotation needed\\n    ///     // The compiler can\'t infer `MaxLen` from the following code:\\n    ///     let mut v3 = BoundedVec::new();\\n    ///     v3.push(5);\\n    /// }\\n    /// ```\\n    ///\\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\\n    /// constraint failure at runtime when the vec is pushed to.\\n    pub fn new() -> Self {\\n        let zeroed = crate::mem::zeroed();\\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\\n    }\\n\\n    /// Retrieves an element from the vector at the given index, starting from zero.\\n    ///\\n    /// If the given index is equal to or greater than the length of the vector, this\\n    /// will issue a constraint failure.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\\n    ///     let first = v.get(0);\\n    ///     let last = v.get(v.len() - 1);\\n    ///     assert(first != last);\\n    /// }\\n    /// ```\\n    pub fn get(self, index: u32) -> T {\\n        assert(index < self.len, \\"Attempted to read past end of BoundedVec\\");\\n        self.get_unchecked(index)\\n    }\\n\\n    /// Retrieves an element from the vector at the given index, starting from zero, without\\n    /// performing a bounds check.\\n    ///\\n    /// Since this function does not perform a bounds check on length before accessing the element,\\n    /// it is unsafe! Use at your own risk!\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\\n    ///     // Always ensure the length is larger than the largest\\n    ///     // index passed to get_unchecked\\n    ///     assert(v.len() > 2);\\n    ///     let first = v.get_unchecked(0);\\n    ///     let second = v.get_unchecked(1);\\n    ///     let third = v.get_unchecked(2);\\n    ///     first + second + third\\n    /// }\\n    /// ```\\n    pub fn get_unchecked(self, index: u32) -> T {\\n        self.storage[index]\\n    }\\n\\n    /// Writes an element to the vector at the given index, starting from zero.\\n    ///\\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\\n    ///     let first = v.get(0);\\n    ///     assert(first != 42);\\n    ///     v.set(0, 42);\\n    ///     let new_first = v.get(0);\\n    ///     assert(new_first == 42);\\n    /// }\\n    /// ```\\n    pub fn set(&mut self, index: u32, value: T) {\\n        assert(index < self.len, \\"Attempted to write past end of BoundedVec\\");\\n        self.set_unchecked(index, value)\\n    }\\n\\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\\n    ///\\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// fn set_unchecked_example() {\\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\\n    ///     vec.extend_from_array([1, 2]);\\n    ///\\n    ///     // Here we\'re safely writing within the valid range of `vec`\\n    ///     // `vec` now has the value [42, 2]\\n    ///     vec.set_unchecked(0, 42);\\n    ///\\n    ///     // We can then safely read this value back out of `vec`.\\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\\n    ///     assert_eq(vec.get(0), 42);\\n    ///\\n    ///     // We\'ve now written past the end of `vec`.\\n    ///     // As this index is still within the maximum potential length of `v`,\\n    ///     // it won\'t cause a constraint failure.\\n    ///     vec.set_unchecked(2, 42);\\n    ///     println(vec);\\n    ///\\n    ///     // This will write past the end of the maximum potential length of `vec`,\\n    ///     // it will then trigger a constraint failure.\\n    ///     vec.set_unchecked(5, 42);\\n    ///     println(vec);\\n    /// }\\n    /// ```\\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\\n        self.storage[index] = value;\\n    }\\n\\n    /// Pushes an element to the end of the vector. This increases the length\\n    /// of the vector by one.\\n    ///\\n    /// Panics if the new length of the vector will be greater than the max length.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\\n    ///\\n    /// v.push(1);\\n    /// v.push(2);\\n    ///\\n    /// // Panics with failed assertion \\"push out of bounds\\"\\n    /// v.push(3);\\n    /// ```\\n    pub fn push(&mut self, elem: T) {\\n        assert(self.len < MaxLen, \\"push out of bounds\\");\\n\\n        self.storage[self.len] = elem;\\n        self.len += 1;\\n    }\\n\\n    /// Returns the current length of this vector\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\\n    /// assert(v.len() == 0);\\n    ///\\n    /// v.push(100);\\n    /// assert(v.len() == 1);\\n    ///\\n    /// v.push(200);\\n    /// v.push(300);\\n    /// v.push(400);\\n    /// assert(v.len() == 4);\\n    ///\\n    /// let _ = v.pop();\\n    /// let _ = v.pop();\\n    /// assert(v.len() == 2);\\n    /// ```\\n    pub fn len(self) -> u32 {\\n        self.len\\n    }\\n\\n    /// Returns the maximum length of this vector. This is always\\n    /// equal to the `MaxLen` parameter this vector was initialized with.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\\n    ///\\n    /// assert(v.max_len() == 5);\\n    /// v.push(10);\\n    /// assert(v.max_len() == 5);\\n    /// ```\\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\\n        MaxLen\\n    }\\n\\n    /// Returns the internal array within this vector.\\n    ///\\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\\n    /// the storage held internally by this vector.\\n    ///\\n    /// Note that uninitialized elements may be zeroed out!\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\\n    ///\\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\\n    ///\\n    /// v.push(57);\\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\\n    /// ```\\n    pub fn storage(self) -> [T; MaxLen] {\\n        self.storage\\n    }\\n\\n    /// Pushes each element from the given array to this vector.\\n    ///\\n    /// Panics if pushing each element would cause the length of this vector\\n    /// to exceed the maximum length.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\\n    /// vec.extend_from_array([2, 4]);\\n    ///\\n    /// assert(vec.len == 2);\\n    /// assert(vec.get(0) == 2);\\n    /// assert(vec.get(1) == 4);\\n    /// ```\\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\\n        let new_len = self.len + array.len();\\n        assert(new_len <= MaxLen, \\"extend_from_array out of bounds\\");\\n        for i in 0..array.len() {\\n            self.storage[self.len + i] = array[i];\\n        }\\n        self.len = new_len;\\n    }\\n\\n    /// Pushes each element from the given slice to this vector.\\n    ///\\n    /// Panics if pushing each element would cause the length of this vector\\n    /// to exceed the maximum length.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\\n    /// vec.extend_from_slice(&[2, 4]);\\n    ///\\n    /// assert(vec.len == 2);\\n    /// assert(vec.get(0) == 2);\\n    /// assert(vec.get(1) == 4);\\n    /// ```\\n    pub fn extend_from_slice(&mut self, slice: [T]) {\\n        let new_len = self.len + slice.len();\\n        assert(new_len <= MaxLen, \\"extend_from_slice out of bounds\\");\\n        for i in 0..slice.len() {\\n            self.storage[self.len + i] = slice[i];\\n        }\\n        self.len = new_len;\\n    }\\n\\n    /// Pushes each element from the other vector to this vector. The length of\\n    /// the other vector is left unchanged.\\n    ///\\n    /// Panics if pushing each element would cause the length of this vector\\n    /// to exceed the maximum length.\\n    ///\\n    /// ```noir\\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\\n    ///\\n    /// v2.extend_from_array([1, 2, 3]);\\n    /// v1.extend_from_bounded_vec(v2);\\n    ///\\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\\n    /// ```\\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\\n        let append_len = vec.len();\\n        let new_len = self.len + append_len;\\n        assert(new_len <= MaxLen, \\"extend_from_bounded_vec out of bounds\\");\\n\\n        if is_unconstrained() {\\n            for i in 0..append_len {\\n                self.storage[self.len + i] = vec.get_unchecked(i);\\n            }\\n        } else {\\n            let mut exceeded_len = false;\\n            for i in 0..Len {\\n                exceeded_len |= i == append_len;\\n                if !exceeded_len {\\n                    self.storage[self.len + i] = vec.get_unchecked(i);\\n                }\\n            }\\n        }\\n        self.len = new_len;\\n    }\\n\\n    /// Creates a new vector, populating it with values derived from an array input.\\n    /// The maximum length of the vector is determined based on the type signature.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\\n    /// ```\\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\\n        static_assert(Len <= MaxLen, \\"from array out of bounds\\");\\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\\n        vec.extend_from_array(array);\\n        vec\\n    }\\n\\n    /// Pops the element at the end of the vector. This will decrease the length\\n    /// of the vector by one.\\n    ///\\n    /// Panics if the vector is empty.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\\n    /// v.push(1);\\n    /// v.push(2);\\n    ///\\n    /// let two = v.pop();\\n    /// let one = v.pop();\\n    ///\\n    /// assert(two == 2);\\n    /// assert(one == 1);\\n    ///\\n    /// // error: cannot pop from an empty vector\\n    /// let _ = v.pop();\\n    /// ```\\n    pub fn pop(&mut self) -> T {\\n        assert(self.len > 0);\\n        self.len -= 1;\\n\\n        let elem = self.storage[self.len];\\n        self.storage[self.len] = crate::mem::zeroed();\\n        elem\\n    }\\n\\n    /// Returns true if the given predicate returns true for any element\\n    /// in this vector.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\\n    /// v.extend_from_array([2, 4, 6]);\\n    ///\\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\\n    /// assert(all_even);\\n    /// ```\\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\\n        let mut ret = false;\\n        if is_unconstrained() {\\n            for i in 0..self.len {\\n                ret |= predicate(self.storage[i]);\\n            }\\n        } else {\\n            let mut ret = false;\\n            let mut exceeded_len = false;\\n            for i in 0..MaxLen {\\n                exceeded_len |= i == self.len;\\n                if !exceeded_len {\\n                    ret |= predicate(self.storage[i]);\\n                }\\n            }\\n        }\\n        ret\\n    }\\n\\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\\n    /// let result = vec.map(|value| value * 2);\\n    ///\\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\\n    /// assert_eq(result, expected);\\n    /// ```\\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\\n        let mut ret = BoundedVec::new();\\n        ret.len = self.len();\\n\\n        if is_unconstrained() {\\n            for i in 0..self.len() {\\n                ret.storage[i] = f(self.get_unchecked(i));\\n            }\\n        } else {\\n            for i in 0..MaxLen {\\n                if i < self.len() {\\n                    ret.storage[i] = f(self.get_unchecked(i));\\n                }\\n            }\\n        }\\n\\n        ret\\n    }\\n\\n    /// Creates a new BoundedVec from the given array and length.\\n    /// The given length must be less than or equal to the length of the array.\\n    ///\\n    /// This function will zero out any elements at or past index `len` of `array`.\\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\\n    /// assert_eq(vec.len(), 3);\\n    /// ```\\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\\n        assert(len <= MaxLen);\\n        let zeroed = crate::mem::zeroed();\\n\\n        if is_unconstrained() {\\n            for i in len..MaxLen {\\n                array[i] = zeroed;\\n            }\\n        } else {\\n            for i in 0..MaxLen {\\n                if i >= len {\\n                    array[i] = zeroed;\\n                }\\n            }\\n        }\\n\\n        BoundedVec { storage: array, len }\\n    }\\n\\n    /// Creates a new BoundedVec from the given array and length.\\n    /// The given length must be less than or equal to the length of the array.\\n    ///\\n    /// This function is unsafe because it expects all elements past the `len` index\\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\\n    /// for a safe version of this function which does zero out any indices past the\\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\\n    /// to give incorrect results since it will check even elements past `len`.\\n    ///\\n    /// Example:\\n    ///\\n    /// ```noir\\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\\n    /// assert_eq(vec.len(), 3);\\n    ///\\n    /// // invalid use!\\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\\n    ///\\n    /// // both vecs have length 3 so we\'d expect them to be equal, but this\\n    /// // fails because elements past the length are still checked in eq\\n    /// assert_eq(vec1, vec2); // fails\\n    /// ```\\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\\n        assert(len <= MaxLen);\\n        BoundedVec { storage: array, len }\\n    }\\n}\\n\\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\\nwhere\\n    T: Eq,\\n{\\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\\n        // TODO: https://github.com/noir-lang/noir/issues/4837\\n        //\\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\\n        if self.len == other.len {\\n            self.storage == other.storage\\n        } else {\\n            false\\n        }\\n    }\\n}\\n\\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\\n        BoundedVec::from_array(array)\\n    }\\n}\\n\\nmod bounded_vec_tests {\\n\\n    mod get {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test(should_fail_with = \\"Attempted to read past end of BoundedVec\\")]\\n        fn panics_when_reading_elements_past_end_of_vec() {\\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\\n\\n            crate::println(vec.get(0));\\n        }\\n    }\\n\\n    mod set {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn set_updates_values_properly() {\\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\\n\\n            vec.set(0, 42);\\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\\n\\n            vec.set(1, 43);\\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\\n\\n            vec.set(2, 44);\\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\\n\\n            vec.set(1, 10);\\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\\n\\n            vec.set(0, 0);\\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\\n        }\\n\\n        #[test(should_fail_with = \\"Attempted to write past end of BoundedVec\\")]\\n        fn panics_when_writing_elements_past_end_of_vec() {\\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\\n            vec.set(0, 42);\\n\\n            // Need to use println to avoid DIE removing the write operation.\\n            crate::println(vec.get(0));\\n        }\\n    }\\n\\n    mod map {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn applies_function_correctly() {\\n            // docs:start:bounded-vec-map-example\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\\n            let result = vec.map(|value| value * 2);\\n            // docs:end:bounded-vec-map-example\\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\\n\\n            assert_eq(result, expected);\\n        }\\n\\n        #[test]\\n        fn applies_function_that_changes_return_type() {\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\\n            let result = vec.map(|value| (value * 2) as Field);\\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\\n\\n            assert_eq(result, expected);\\n        }\\n\\n        #[test]\\n        fn does_not_apply_function_past_len() {\\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\\n            let expected = BoundedVec::from_array([5, 1]);\\n\\n            assert_eq(result, expected);\\n            assert_eq(result.get_unchecked(2), 0);\\n        }\\n    }\\n\\n    mod from_array {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn empty() {\\n            let empty_array: [Field; 0] = [];\\n            let bounded_vec = BoundedVec::from_array([]);\\n\\n            assert_eq(bounded_vec.max_len(), 0);\\n            assert_eq(bounded_vec.len(), 0);\\n            assert_eq(bounded_vec.storage(), empty_array);\\n        }\\n\\n        #[test]\\n        fn equal_len() {\\n            let array = [1, 2, 3];\\n            let bounded_vec = BoundedVec::from_array(array);\\n\\n            assert_eq(bounded_vec.max_len(), 3);\\n            assert_eq(bounded_vec.len(), 3);\\n            assert_eq(bounded_vec.storage(), array);\\n        }\\n\\n        #[test]\\n        fn max_len_greater_then_array_len() {\\n            let array = [1, 2, 3];\\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\\n\\n            assert_eq(bounded_vec.max_len(), 10);\\n            assert_eq(bounded_vec.len(), 3);\\n            assert_eq(bounded_vec.get(0), 1);\\n            assert_eq(bounded_vec.get(1), 2);\\n            assert_eq(bounded_vec.get(2), 3);\\n        }\\n\\n        #[test(should_fail_with = \\"from array out of bounds\\")]\\n        fn max_len_lower_then_array_len() {\\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\\n        }\\n    }\\n\\n    mod trait_from {\\n        use crate::collections::bounded_vec::BoundedVec;\\n        use crate::convert::From;\\n\\n        #[test]\\n        fn simple() {\\n            let array = [1, 2];\\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\\n\\n            assert_eq(bounded_vec.max_len(), 10);\\n            assert_eq(bounded_vec.len(), 2);\\n            assert_eq(bounded_vec.get(0), 1);\\n            assert_eq(bounded_vec.get(1), 2);\\n        }\\n    }\\n\\n    mod trait_eq {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn empty_equality() {\\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\\n\\n            assert_eq(bounded_vec1, bounded_vec2);\\n        }\\n\\n        #[test]\\n        fn inequality() {\\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\\n            bounded_vec1.push(1);\\n            bounded_vec2.push(2);\\n\\n            assert(bounded_vec1 != bounded_vec2);\\n        }\\n    }\\n\\n    mod from_parts {\\n        use crate::collections::bounded_vec::BoundedVec;\\n\\n        #[test]\\n        fn from_parts() {\\n            // docs:start:from-parts\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\\n            assert_eq(vec.len(), 3);\\n\\n            // Any elements past the given length are zeroed out, so these\\n            // two BoundedVecs will be completely equal\\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\\n            assert_eq(vec1, vec2);\\n            // docs:end:from-parts\\n        }\\n\\n        #[test]\\n        fn from_parts_unchecked() {\\n            // docs:start:from-parts-unchecked\\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\\n            assert_eq(vec.len(), 3);\\n\\n            // invalid use!\\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\\n\\n            // both vecs have length 3 so we\'d expect them to be equal, but this\\n            // fails because elements past the length are still checked in eq\\n            assert(vec1 != vec2);\\n            // docs:end:from-parts-unchecked\\n        }\\n    }\\n}\\n"},"17":{"path":"std/embedded_curve_ops.nr","source":"use crate::cmp::Eq;\\nuse crate::ops::arith::{Add, Neg, Sub};\\n\\n/// A point on the embedded elliptic curve\\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\\npub struct EmbeddedCurvePoint {\\n    pub x: Field,\\n    pub y: Field,\\n    pub is_infinite: bool,\\n}\\n\\nimpl EmbeddedCurvePoint {\\n    /// Elliptic curve point doubling operation\\n    /// returns the doubled point of a point P, i.e P+P\\n    pub fn double(self) -> EmbeddedCurvePoint {\\n        embedded_curve_add(self, self)\\n    }\\n\\n    /// Returns the null element of the curve; \'the point at infinity\'\\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\\n    }\\n}\\n\\nimpl Add for EmbeddedCurvePoint {\\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\\n        embedded_curve_add(self, other)\\n    }\\n}\\n\\nimpl Sub for EmbeddedCurvePoint {\\n    /// Points subtraction operation, using addition and negation\\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\\n        self + other.neg()\\n    }\\n}\\n\\nimpl Neg for EmbeddedCurvePoint {\\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\\n    /// If the point is at infinity, then the result is also at infinity.\\n    fn neg(self) -> EmbeddedCurvePoint {\\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\\n    }\\n}\\n\\nimpl Eq for EmbeddedCurvePoint {\\n    /// Checks whether two points are equal\\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\\n        (self.is_infinite & b.is_infinite)\\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\\n    }\\n}\\n\\n/// Scalar for the embedded curve represented as low and high limbs\\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\\npub struct EmbeddedCurveScalar {\\n    pub lo: Field,\\n    pub hi: Field,\\n}\\n\\nimpl EmbeddedCurveScalar {\\n    pub fn new(lo: Field, hi: Field) -> Self {\\n        EmbeddedCurveScalar { lo, hi }\\n    }\\n\\n    #[field(bn254)]\\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\\n        let (a, b) = crate::field::bn254::decompose(scalar);\\n        EmbeddedCurveScalar { lo: a, hi: b }\\n    }\\n\\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\\n    #[field(bn254)]\\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\\n        let mut v = 1;\\n        let mut lo = 0 as Field;\\n        let mut hi = 0 as Field;\\n        for i in 0..16 {\\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\\n            v = v * 256;\\n        }\\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\\n        sig_s\\n    }\\n}\\n\\nimpl Eq for EmbeddedCurveScalar {\\n    fn eq(self, other: Self) -> bool {\\n        (other.hi == self.hi) & (other.lo == self.lo)\\n    }\\n}\\n\\n// Computes a multi scalar multiplication over the embedded curve.\\n// For bn254, We have Grumpkin and Baby JubJub.\\n// For bls12-381, we have JubJub and Bandersnatch.\\n//\\n// The embedded curve being used is decided by the\\n// underlying proof system.\\n// docs:start:multi_scalar_mul\\npub fn multi_scalar_mul<let N: u32>(\\n    points: [EmbeddedCurvePoint; N],\\n    scalars: [EmbeddedCurveScalar; N],\\n) -> EmbeddedCurvePoint\\n// docs:end:multi_scalar_mul\\n{\\n    let point_array = multi_scalar_mul_array_return(points, scalars);\\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\\n}\\n\\n#[foreign(multi_scalar_mul)]\\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\\n    points: [EmbeddedCurvePoint; N],\\n    scalars: [EmbeddedCurveScalar; N],\\n) -> [Field; 3] {}\\n\\n// docs:start:fixed_base_scalar_mul\\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\\n// docs:end:fixed_base_scalar_mul\\n{\\n    let g1 = EmbeddedCurvePoint {\\n        x: 1,\\n        y: 17631683881184975370165255887551781615748388533673675138860,\\n        is_infinite: false,\\n    };\\n    multi_scalar_mul([g1], [scalar])\\n}\\n\\n/// This function only assumes that the points are on the curve\\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\\n// docs:start:embedded_curve_add\\npub fn embedded_curve_add(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    // docs:end:embedded_curve_add\\n    let x_coordinates_match = point1.x == point2.x;\\n    let y_coordinates_match = point1.y == point2.y;\\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\\n    let point1_1 = EmbeddedCurvePoint {\\n        x: point1.x + (x_coordinates_match as Field),\\n        y: point1.y,\\n        is_infinite: x_coordinates_match,\\n    };\\n    // point1_1 is guaranteed to have a different abscissa than point2\\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\\n    result.is_infinite = x_coordinates_match;\\n\\n    // dbl if x_match, y_match\\n    let double = embedded_curve_add_unsafe(point1, point1);\\n    result = if double_predicate { double } else { result };\\n\\n    // infinity if x_match, !y_match\\n    if point1.is_infinite {\\n        result = point2;\\n    }\\n    if point2.is_infinite {\\n        result = point1;\\n    }\\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\\n    result\\n}\\n\\n#[foreign(embedded_curve_add)]\\nfn embedded_curve_add_array_return(\\n    _point1: EmbeddedCurvePoint,\\n    _point2: EmbeddedCurvePoint,\\n) -> [Field; 3] {}\\n\\n/// This function assumes that:\\n/// The points are on the curve, and\\n/// The points don\'t share an x-coordinate, and\\n/// Neither point is the infinity point.\\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\\npub fn embedded_curve_add_not_nul(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    assert(point1.x != point2.x);\\n    assert(!point1.is_infinite);\\n    assert(!point2.is_infinite);\\n    embedded_curve_add_unsafe(point1, point2)\\n}\\n\\n/// Unsafe ec addition\\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\\n/// If they have the same value but are different variables, the result will be incorrect because in this case\\n/// it assumes (but does not check) that the points\' x-coordinates are not equal.\\n/// It also assumes neither point is the infinity point.\\npub fn embedded_curve_add_unsafe(\\n    point1: EmbeddedCurvePoint,\\n    point2: EmbeddedCurvePoint,\\n) -> EmbeddedCurvePoint {\\n    let point_array = embedded_curve_add_array_return(point1, point2);\\n    let x = point_array[0];\\n    let y = point_array[1];\\n\\n    EmbeddedCurvePoint { x, y, is_infinite: false }\\n}\\n"},"18":{"path":"std/field/bn254.nr","source":"use crate::field::field_less_than;\\nuse crate::runtime::is_unconstrained;\\n\\n// The low and high decomposition of the field modulus\\nglobal PLO: Field = 53438638232309528389504892708671455233;\\nglobal PHI: Field = 64323764613183177041862057485226039389;\\n\\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\\nglobal TWO_POW_64: Field = 0x10000000000000000;\\n\\n// Decomposes a single field into two 16 byte fields.\\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\\n    // Here\'s we\'re taking advantage of truncating 64 bit limbs from the input field\\n    // and then subtracting them from the input such the field division is equivalent to integer division.\\n    let low_lower_64 = (x as u64) as Field;\\n    x = (x - low_lower_64) / TWO_POW_64;\\n    let low_upper_64 = (x as u64) as Field;\\n\\n    let high = (x - low_upper_64) / TWO_POW_64;\\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\\n\\n    (low, high)\\n}\\n\\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\\n    compute_decomposition(x)\\n}\\n\\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\\n    if x == y {\\n        true\\n    } else {\\n        field_less_than(x, y)\\n    }\\n}\\n\\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\\n    let (alo, ahi) = a;\\n    let (blo, bhi) = b;\\n    /// Safety: borrow is enforced to be boolean due to its type.\\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n    unsafe {\\n        /*@safety: borrow is enforced to be boolean due to its type.\\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\\n        */\\n        let borrow = lte_hint(alo, blo);\\n\\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\\n        let rhi = ahi - bhi - (borrow as Field);\\n\\n        rlo.assert_max_bit_size::<128>();\\n        rhi.assert_max_bit_size::<128>();\\n    }\\n}\\n\\n/// Decompose a single field into two 16 byte fields.\\npub fn decompose(x: Field) -> (Field, Field) {\\n    if is_unconstrained() {\\n        compute_decomposition(x)\\n    } else {\\n        /// Safety: decomposition is properly checked below\\n        unsafe {\\n            /*@safety: decomposition is properly checked below*/\\n            // Take hints of the decomposition\\n            let (xlo, xhi) = decompose_hint(x);\\n\\n            // Range check the limbs\\n            xlo.assert_max_bit_size::<128>();\\n            xhi.assert_max_bit_size::<128>();\\n\\n            // Check that the decomposition is correct\\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\\n\\n            // Assert that the decomposition of P is greater than the decomposition of x\\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\\n            (xlo, xhi)\\n        }\\n    }\\n}\\n\\npub fn assert_gt(a: Field, b: Field) {\\n    if is_unconstrained() {\\n        assert(\\n            /// Safety: already unconstrained\\n            unsafe { field_less_than(b, a) },\\n        );\\n    } else {\\n        // Decompose a and b\\n        let a_limbs = decompose(a);\\n        let b_limbs = decompose(b);\\n\\n        // Assert that a_limbs is greater than b_limbs\\n        assert_gt_limbs(a_limbs, b_limbs)\\n    }\\n}\\n\\npub fn assert_lt(a: Field, b: Field) {\\n    assert_gt(b, a);\\n}\\n\\npub fn gt(a: Field, b: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unsafe in unconstrained\\n        unsafe {\\n            //@safety: unsafe in unconstrained\\n            field_less_than(b, a)\\n        }\\n    } else if a == b {\\n        false\\n    } else {\\n        /// Safety: Take a hint of the comparison and verify it\\n        unsafe {\\n            //@safety: Take a hint of the comparison and verify it\\n            if field_less_than(a, b) {\\n                assert_gt(b, a);\\n                false\\n            } else {\\n                assert_gt(a, b);\\n                true\\n            }\\n        }\\n    }\\n}\\n\\npub fn lt(a: Field, b: Field) -> bool {\\n    gt(b, a)\\n}\\n\\nmod tests {\\n    // TODO: Allow imports from \\"super\\"\\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\\n\\n    #[test]\\n    fn check_decompose() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_decompose_unconstrained() {\\n        assert_eq(decompose(TWO_POW_128), (0, 1));\\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_lte_hint() {\\n        assert(lte_hint(0, 1));\\n        assert(lte_hint(0, 0x100));\\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\\n        assert(!lte_hint(0 - 1, 0));\\n\\n        assert(lte_hint(0, 0));\\n        assert(lte_hint(0x100, 0x100));\\n        assert(lte_hint(0 - 1, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_assert_gt() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    unconstrained fn check_assert_gt_unconstrained() {\\n        assert_gt(1, 0);\\n        assert_gt(0x100, 0);\\n        assert_gt((0 - 1), (0 - 2));\\n        assert_gt(TWO_POW_128, 0);\\n        assert_gt(0 - 1, 0);\\n    }\\n\\n    #[test]\\n    fn check_gt() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    unconstrained fn check_gt_unconstrained() {\\n        assert(gt(1, 0));\\n        assert(gt(0x100, 0));\\n        assert(gt((0 - 1), (0 - 2)));\\n        assert(gt(TWO_POW_128, 0));\\n        assert(!gt(0, 0));\\n        assert(!gt(0, 0x100));\\n        assert(gt(0 - 1, 0 - 2));\\n        assert(!gt(0 - 2, 0 - 1));\\n    }\\n\\n    #[test]\\n    fn check_plo_phi() {\\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\\n        let p_bytes = crate::field::modulus_le_bytes();\\n        let mut p_low: Field = 0;\\n        let mut p_high: Field = 0;\\n\\n        let mut offset = 1;\\n        for i in 0..16 {\\n            p_low += (p_bytes[i] as Field) * offset;\\n            p_high += (p_bytes[i + 16] as Field) * offset;\\n            offset *= 256;\\n        }\\n        assert_eq(p_low, PLO);\\n        assert_eq(p_high, PHI);\\n    }\\n}\\n"},"19":{"path":"std/field/mod.nr","source":"pub mod bn254;\\nuse crate::{runtime::is_unconstrained, static_assert};\\nuse bn254::lt as bn254_lt;\\n\\nimpl Field {\\n    /// Asserts that `self` can be represented in `bit_size` bits.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\\n    // docs:start:assert_max_bit_size\\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\\n        // docs:end:assert_max_bit_size\\n        static_assert(\\n            BIT_SIZE < modulus_num_bits() as u32,\\n            \\"BIT_SIZE must be less than modulus_num_bits\\",\\n        );\\n        self.__assert_max_bit_size(BIT_SIZE);\\n    }\\n\\n    #[builtin(apply_range_constraint)]\\n    fn __assert_max_bit_size(self, bit_size: u32) {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_le_bits)]\\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\\n    /// wrap around due to overflow when verifying the decomposition.\\n    #[builtin(to_be_bits)]\\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\\n\\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_le_bits\\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_le_bits\\n        let bits = self._to_le_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(p[N - 1 - i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\\n    /// be able to represent the original `Field`.\\n    ///\\n    /// # Safety\\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\\n    // docs:start:to_be_bits\\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\\n        // docs:end:to_be_bits\\n        let bits = self._to_be_bits();\\n\\n        if !is_unconstrained() {\\n            // Ensure that the decomposition does not overflow the modulus\\n            let p = modulus_be_bits();\\n            assert(bits.len() <= p.len());\\n            let mut ok = bits.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bits[i] != p[i]) {\\n                        assert(p[i] == 1);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bits\\n    }\\n\\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_le_bytes\\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_le_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_le_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_le_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\\n    ///\\n    /// # Failures\\n    ///  The length N of the array must be big enough to contain all the bytes of the \'self\',\\n    ///  and no more than the number of bytes required to represent the field modulus\\n    ///\\n    /// # Safety\\n    /// The result is ensured to be the canonical decomposition of the field element\\n    // docs:start:to_be_bytes\\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\\n        // docs:end:to_be_bytes\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        // Compute the byte decomposition\\n        let bytes = self.to_be_radix(256);\\n\\n        if !is_unconstrained() {\\n            // Ensure that the byte decomposition does not overflow the modulus\\n            let p = modulus_be_bytes();\\n            assert(bytes.len() <= p.len());\\n            let mut ok = bytes.len() != p.len();\\n            for i in 0..N {\\n                if !ok {\\n                    if (bytes[i] != p[i]) {\\n                        assert(bytes[i] < p[i]);\\n                        ok = true;\\n                    }\\n                }\\n            }\\n            assert(ok);\\n        }\\n        bytes\\n    }\\n\\n    // docs:start:to_le_radix\\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            static_assert(1 < radix, \\"radix must be greater than 1\\");\\n            static_assert(radix <= 256, \\"radix must be less than or equal to 256\\");\\n            static_assert(radix & (radix - 1) == 0, \\"radix must be a power of 2\\");\\n        }\\n        self.__to_le_radix(radix)\\n    }\\n    // docs:end:to_le_radix\\n\\n    // docs:start:to_be_radix\\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\\n        // Brillig does not need an immediate radix\\n        if !crate::runtime::is_unconstrained() {\\n            crate::assert_constant(radix);\\n        }\\n        self.__to_be_radix(radix)\\n    }\\n    // docs:end:to_be_radix\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_le_radix)]\\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // `_radix` must be less than 256\\n    #[builtin(to_be_radix)]\\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\\n\\n    // Returns self to the power of the given exponent value.\\n    // Caution: we assume the exponent fits into 32 bits\\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\\n    pub fn pow_32(self, exponent: Field) -> Field {\\n        let mut r: Field = 1;\\n        let b: [u1; 32] = exponent.to_le_bits();\\n\\n        for i in 1..33 {\\n            r *= r;\\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\\n        }\\n        r\\n    }\\n\\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\\n    pub fn sgn0(self) -> u1 {\\n        self as u1\\n    }\\n\\n    pub fn lt(self, another: Field) -> bool {\\n        if crate::compat::is_bn254() {\\n            bn254_lt(self, another)\\n        } else {\\n            lt_fallback(self, another)\\n        }\\n    }\\n\\n    /// Convert a little endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        static_assert(\\n            N <= modulus_le_bytes().len(),\\n            \\"N must be less than or equal to modulus_le_bytes().len()\\",\\n        );\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n\\n    /// Convert a big endian byte array to a field element.\\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\\n        let mut v = 1;\\n        let mut result = 0;\\n\\n        for i in 0..N {\\n            result += (bytes[N - 1 - i] as Field) * v;\\n            v = v * 256;\\n        }\\n        result\\n    }\\n}\\n\\n#[builtin(modulus_num_bits)]\\npub comptime fn modulus_num_bits() -> u64 {}\\n\\n#[builtin(modulus_be_bits)]\\npub comptime fn modulus_be_bits() -> [u1] {}\\n\\n#[builtin(modulus_le_bits)]\\npub comptime fn modulus_le_bits() -> [u1] {}\\n\\n#[builtin(modulus_be_bytes)]\\npub comptime fn modulus_be_bytes() -> [u8] {}\\n\\n#[builtin(modulus_le_bytes)]\\npub comptime fn modulus_le_bytes() -> [u8] {}\\n\\n/// An unconstrained only built in to efficiently compare fields.\\n#[builtin(field_less_than)]\\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\\n\\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\\n    __field_less_than(x, y)\\n}\\n\\n// Convert a 32 byte array to a field element by modding\\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\\n    // Convert it to a field element\\n    let mut v = 1;\\n    let mut high = 0 as Field;\\n    let mut low = 0 as Field;\\n\\n    for i in 0..16 {\\n        high = high + (bytes32[15 - i] as Field) * v;\\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\\n        v = v * 256;\\n    }\\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\\n    low + high * v\\n}\\n\\nfn lt_fallback(x: Field, y: Field) -> bool {\\n    if is_unconstrained() {\\n        /// Safety: unconstrained context\\n        unsafe {\\n            //@safety : unconstrained context\\n            field_less_than(x, y)\\n        }\\n    } else {\\n        let x_bytes: [u8; 32] = x.to_le_bytes();\\n        let y_bytes: [u8; 32] = y.to_le_bytes();\\n        let mut x_is_lt = false;\\n        let mut done = false;\\n        for i in 0..32 {\\n            if (!done) {\\n                let x_byte = x_bytes[32 - 1 - i] as u8;\\n                let y_byte = y_bytes[32 - 1 - i] as u8;\\n                let bytes_match = x_byte == y_byte;\\n                if !bytes_match {\\n                    x_is_lt = x_byte < y_byte;\\n                    done = true;\\n                }\\n            }\\n        }\\n        x_is_lt\\n    }\\n}\\n\\nmod tests {\\n    use crate::{panic::panic, runtime};\\n    use super::field_less_than;\\n\\n    #[test]\\n    // docs:start:to_be_bits_example\\n    fn test_to_be_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_be_bits();\\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\\n    }\\n    // docs:end:to_be_bits_example\\n\\n    #[test]\\n    // docs:start:to_le_bits_example\\n    fn test_to_le_bits() {\\n        let field = 2;\\n        let bits: [u1; 8] = field.to_le_bits();\\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\\n    }\\n    // docs:end:to_le_bits_example\\n\\n    #[test]\\n    // docs:start:to_be_bytes_example\\n    fn test_to_be_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_bytes();\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_bytes_example\\n\\n    #[test]\\n    // docs:start:to_le_bytes_example\\n    fn test_to_le_bytes() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_bytes();\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_bytes_example\\n\\n    #[test]\\n    // docs:start:to_be_radix_example\\n    fn test_to_be_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_be_radix(256);\\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_be_radix_example\\n\\n    #[test]\\n    // docs:start:to_le_radix_example\\n    fn test_to_le_radix() {\\n        let field = 2;\\n        let bytes: [u8; 8] = field.to_le_radix(256);\\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\\n    }\\n    // docs:end:to_le_radix_example\\n\\n    #[test(should_fail_with = \\"radix must be greater than 1\\")]\\n    fn test_to_le_radix_1() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(1);\\n        } else {\\n            panic(f\\"radix must be greater than 1\\");\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\\n    // #[test]\\n    // fn test_to_le_radix_brillig_1() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(1);\\n    //         crate::println(out);\\n    //         let expected = [0; 8];\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test(should_fail_with = \\"radix must be a power of 2\\")]\\n    fn test_to_le_radix_3() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(3);\\n        } else {\\n            panic(f\\"radix must be a power of 2\\");\\n        }\\n    }\\n\\n    #[test]\\n    fn test_to_le_radix_brillig_3() {\\n        // this test should only fail in constrained mode\\n        if runtime::is_unconstrained() {\\n            let field = 1;\\n            let out: [u8; 8] = field.to_le_radix(3);\\n            let mut expected = [0; 8];\\n            expected[0] = 1;\\n            assert(out == expected, \\"unexpected result\\");\\n        }\\n    }\\n\\n    #[test(should_fail_with = \\"radix must be less than or equal to 256\\")]\\n    fn test_to_le_radix_512() {\\n        // this test should only fail in constrained mode\\n        if !runtime::is_unconstrained() {\\n            let field = 2;\\n            let _: [u8; 8] = field.to_le_radix(512);\\n        } else {\\n            panic(f\\"radix must be less than or equal to 256\\")\\n        }\\n    }\\n\\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\\n    // #[test]\\n    // fn test_to_le_radix_brillig_512() {\\n    //     // this test should only fail in constrained mode\\n    //     if runtime::is_unconstrained() {\\n    //         let field = 1;\\n    //         let out: [u8; 8] = field.to_le_radix(512);\\n    //         let mut expected = [0; 8];\\n    //         expected[0] = 1;\\n    //         assert(out == expected, \\"unexpected result\\");\\n    //     }\\n    // }\\n\\n    #[test]\\n    unconstrained fn test_field_less_than() {\\n        assert(field_less_than(0, 1));\\n        assert(field_less_than(0, 0x100));\\n        assert(field_less_than(0x100, 0 - 1));\\n        assert(!field_less_than(0 - 1, 0));\\n    }\\n}\\n"},"21":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\\npub mod poseidon2;\\npub mod keccak;\\npub mod sha256;\\npub mod sha512;\\n\\nuse crate::default::Default;\\nuse crate::embedded_curve_ops::{\\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\\n};\\nuse crate::meta::derive_via;\\nuse crate::uint128::U128;\\n\\n// Kept for backwards compatibility\\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\\n\\n#[foreign(blake2s)]\\n// docs:start:blake2s\\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\\n// docs:end:blake2s\\n{}\\n\\n#[foreign(blake3)]\\n// docs:start:blake3\\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\\n// docs:end:blake3\\n{}\\n\\n// docs:start:pedersen_commitment\\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\\n    // docs:end:pedersen_commitment\\n    pedersen_commitment_with_separator(input, 0)\\n}\\n\\n#[inline_always]\\npub fn pedersen_commitment_with_separator<let N: u32>(\\n    input: [Field; N],\\n    separator: u32,\\n) -> EmbeddedCurvePoint {\\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\\n    for i in 0..N {\\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\\n        points[i] = from_field_unsafe(input[i]);\\n    }\\n    let generators = derive_generators(\\"DEFAULT_DOMAIN_SEPARATOR\\".as_bytes(), separator);\\n    multi_scalar_mul(generators, points)\\n}\\n\\n// docs:start:pedersen_hash\\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\\n// docs:end:pedersen_hash\\n{\\n    pedersen_hash_with_separator(input, 0)\\n}\\n\\n#[no_predicates]\\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\\n    let domain_generators: [EmbeddedCurvePoint; N] =\\n        derive_generators(\\"DEFAULT_DOMAIN_SEPARATOR\\".as_bytes(), separator);\\n\\n    for i in 0..N {\\n        scalars[i] = from_field_unsafe(input[i]);\\n        generators[i] = domain_generators[i];\\n    }\\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\\n\\n    let length_generator: [EmbeddedCurvePoint; 1] =\\n        derive_generators(\\"pedersen_hash_length\\".as_bytes(), 0);\\n    generators[N] = length_generator[0];\\n    multi_scalar_mul_array_return(generators, scalars)[0]\\n}\\n\\n#[field(bn254)]\\n#[inline_always]\\npub fn derive_generators<let N: u32, let M: u32>(\\n    domain_separator_bytes: [u8; M],\\n    starting_index: u32,\\n) -> [EmbeddedCurvePoint; N] {\\n    crate::assert_constant(domain_separator_bytes);\\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\\n    __derive_generators(domain_separator_bytes, starting_index)\\n}\\n\\n#[builtin(derive_pedersen_generators)]\\n#[field(bn254)]\\nfn __derive_generators<let N: u32, let M: u32>(\\n    domain_separator_bytes: [u8; M],\\n    starting_index: u32,\\n) -> [EmbeddedCurvePoint; N] {}\\n\\n#[field(bn254)]\\n// Same as from_field but:\\n// does not assert the limbs are 128 bits\\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\\n    /// Safety: xlo and xhi decomposition is checked below\\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\\n    // Check that the decomposition is correct\\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\\n}\\n\\npub fn hash_to_field(inputs: [Field]) -> Field {\\n    let mut sum = 0;\\n\\n    for input in inputs {\\n        let input_bytes: [u8; 32] = input.to_le_bytes();\\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\\n    }\\n\\n    sum\\n}\\n\\n// docs:start:keccak256\\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\\n// docs:end:keccak256\\n{\\n    crate::hash::keccak::keccak256(input, message_size)\\n}\\n\\n#[foreign(poseidon2_permutation)]\\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\\n\\n// Generic hashing support.\\n// Partially ported and impacted by rust.\\n\\n// Hash trait shall be implemented per type.\\n#[derive_via(derive_hash)]\\npub trait Hash {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher;\\n}\\n\\n// docs:start:derive_hash\\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\\n    let name = quote { Hash };\\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\\n    crate::meta::make_trait_impl(\\n        s,\\n        name,\\n        signature,\\n        for_each_field,\\n        quote {},\\n        |fields| fields,\\n    )\\n}\\n// docs:end:derive_hash\\n\\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\\n// TODO: consider making the types generic here ([u8], [Field], etc.)\\npub trait Hasher {\\n    fn finish(self) -> Field;\\n\\n    fn write(&mut self, input: Field);\\n}\\n\\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\\npub trait BuildHasher<H>\\nwhere\\n    H: Hasher,\\n{\\n    fn build_hasher(self) -> H;\\n}\\n\\npub struct BuildHasherDefault<H>;\\n\\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\\nwhere\\n    H: Hasher + Default,\\n{\\n    fn build_hasher(_self: Self) -> H {\\n        H::default()\\n    }\\n}\\n\\nimpl<H> Default for BuildHasherDefault<H>\\nwhere\\n    H: Hasher + Default,\\n{\\n    fn default() -> Self {\\n        BuildHasherDefault {}\\n    }\\n}\\n\\nimpl Hash for Field {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self);\\n    }\\n}\\n\\nimpl Hash for u1 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u8 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u16 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u32 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for u64 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i8 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i16 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i32 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for i64 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for bool {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self as Field);\\n    }\\n}\\n\\nimpl Hash for () {\\n    fn hash<H>(_self: Self, _state: &mut H)\\n    where\\n        H: Hasher,\\n    {}\\n}\\n\\nimpl Hash for U128 {\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        H::write(state, self.lo as Field);\\n        H::write(state, self.hi as Field);\\n    }\\n}\\n\\nimpl<T, let N: u32> Hash for [T; N]\\nwhere\\n    T: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        for elem in self {\\n            elem.hash(state);\\n        }\\n    }\\n}\\n\\nimpl<T> Hash for [T]\\nwhere\\n    T: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.len().hash(state);\\n        for elem in self {\\n            elem.hash(state);\\n        }\\n    }\\n}\\n\\nimpl<A, B> Hash for (A, B)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n    }\\n}\\n\\nimpl<A, B, C> Hash for (A, B, C)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n    C: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n        self.2.hash(state);\\n    }\\n}\\n\\nimpl<A, B, C, D> Hash for (A, B, C, D)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n    C: Hash,\\n    D: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n        self.2.hash(state);\\n        self.3.hash(state);\\n    }\\n}\\n\\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\\nwhere\\n    A: Hash,\\n    B: Hash,\\n    C: Hash,\\n    D: Hash,\\n    E: Hash,\\n{\\n    fn hash<H>(self, state: &mut H)\\n    where\\n        H: Hasher,\\n    {\\n        self.0.hash(state);\\n        self.1.hash(state);\\n        self.2.hash(state);\\n        self.3.hash(state);\\n        self.4.hash(state);\\n    }\\n}\\n\\n// Some test vectors for Pedersen hash and Pedersen Commitment.\\n// They have been generated using the same functions so the tests are for now useless\\n// but they will be useful when we switch to Noir implementation.\\n#[test]\\nfn assert_pedersen() {\\n    assert_eq(\\n        pedersen_hash_with_separator([1], 1),\\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1], 1),\\n        EmbeddedCurvePoint {\\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\\n            is_infinite: false,\\n        },\\n    );\\n\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2], 2),\\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2], 2),\\n        EmbeddedCurvePoint {\\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3], 3),\\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3], 3),\\n        EmbeddedCurvePoint {\\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\\n        EmbeddedCurvePoint {\\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\\n        EmbeddedCurvePoint {\\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\\n        EmbeddedCurvePoint {\\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\\n        EmbeddedCurvePoint {\\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\\n        EmbeddedCurvePoint {\\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\\n        EmbeddedCurvePoint {\\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\\n            is_infinite: false,\\n        },\\n    );\\n    assert_eq(\\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\\n    );\\n    assert_eq(\\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\\n        EmbeddedCurvePoint {\\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\\n            is_infinite: false,\\n        },\\n    );\\n}\\n"},"26":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\\nuse crate::hash::Hasher;\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2 {\\n    cache: [Field; 3],\\n    state: [Field; 4],\\n    cache_size: u32,\\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2 {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub fn new(iv: Field) -> Poseidon2 {\\n        let mut result =\\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let two_pow_64 = 18446744073709551616;\\n        let iv: Field = (in_len as Field) * two_pow_64;\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n\\npub struct Poseidon2Hasher {\\n    _state: [Field],\\n}\\n\\nimpl Hasher for Poseidon2Hasher {\\n    fn finish(self) -> Field {\\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\\n        let mut sponge = Poseidon2::new(iv);\\n        for i in 0..self._state.len() {\\n            sponge.absorb(self._state[i]);\\n        }\\n        sponge.squeeze()\\n    }\\n\\n    fn write(&mut self, input: Field) {\\n        self._state = self._state.push_back(input);\\n    }\\n}\\n\\nimpl Default for Poseidon2Hasher {\\n    fn default() -> Self {\\n        Poseidon2Hasher { _state: &[] }\\n    }\\n}\\n"},"52":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\\n    assert(false, message);\\n    crate::mem::zeroed()\\n}\\n"},"62":{"path":"/build-volume/noir-projects/noir-contracts/contracts/schnorr_single_key_account_contract/src/auth_oracle.nr","source":"use dep::authwit::auth_witness;\\nuse dep::aztec::{\\n    protocol_types::{address::PartialAddress, public_keys::{PUBLIC_KEYS_LENGTH, PublicKeys}},\\n    utils::array,\\n};\\n\\npub struct AuthWitness {\\n    keys: PublicKeys,\\n    signature: [u8; 64],\\n    partial_address: PartialAddress,\\n}\\n\\nimpl AuthWitness {\\n    fn deserialize(values: [Field; 77]) -> Self {\\n        let mut signature = [0; 64];\\n        for i in 0..64 {\\n            signature[i] = values[i + PUBLIC_KEYS_LENGTH] as u8;\\n        }\\n        Self {\\n            keys: PublicKeys::deserialize(array::subarray(values, 0)),\\n            signature,\\n            partial_address: PartialAddress::from_field(values[76]),\\n        }\\n    }\\n}\\n\\npub unconstrained fn get_auth_witness(message_hash: Field) -> AuthWitness {\\n    let witness: [Field; 77] = auth_witness::get_auth_witness(message_hash);\\n    AuthWitness::deserialize(witness)\\n}\\n"},"63":{"path":"/build-volume/noir-projects/noir-contracts/contracts/schnorr_single_key_account_contract/src/main.nr","source":"mod util;\\nmod auth_oracle;\\n\\nuse dep::aztec::macros::aztec;\\n\\n#[aztec]\\npub contract SchnorrSingleKeyAccount {\\n    use dep::aztec::prelude::PrivateContext;\\n\\n    use dep::authwit::{account::AccountActions, entrypoint::{app::AppPayload, fee::FeePayload}};\\n\\n    use crate::{auth_oracle::get_auth_witness, util::recover_address};\\n\\n    use dep::aztec::macros::functions::{private, view};\\n\\n    // Note: If you globally change the entrypoint signature don\'t forget to update account_entrypoint.ts\\n    #[private]\\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\\n        let actions = AccountActions::init(&mut context, is_valid_impl);\\n        actions.entrypoint(app_payload, fee_payload, cancellable);\\n    }\\n\\n    #[private]\\n    #[view]\\n    fn verify_private_authwit(inner_hash: Field) -> Field {\\n        let actions = AccountActions::init(&mut context, is_valid_impl);\\n        actions.verify_private_authwit(inner_hash)\\n    }\\n\\n    #[contract_library_method]\\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\\n        /// Safety: The witness is only used as a \\"magical value\\" that makes the signature verification\\n        /// in `recover_address` and the address check below pass. Hence it\'s safe.\\n        let witness = unsafe { get_auth_witness(outer_hash) };\\n        recover_address(outer_hash, witness).eq(context.this_address())\\n    }\\n}\\n"},"64":{"path":"/build-volume/noir-projects/noir-contracts/contracts/schnorr_single_key_account_contract/src/util.nr","source":"use crate::auth_oracle::AuthWitness;\\nuse dep::aztec::prelude::AztecAddress;\\nuse std::embedded_curve_ops::EmbeddedCurvePoint;\\n\\npub fn recover_address(message_hash: Field, witness: AuthWitness) -> AztecAddress {\\n    let message_bytes: [u8; 32] = message_hash.to_be_bytes();\\n    let public_key = EmbeddedCurvePoint {\\n        x: witness.keys.ivpk_m.inner.x,\\n        y: witness.keys.ivpk_m.inner.y,\\n        is_infinite: false,\\n    };\\n\\n    // In a single key account contract we re-used ivpk_m as signing key\\n    schnorr::assert_valid_signature(public_key, witness.signature, message_bytes);\\n\\n    AztecAddress::compute(witness.keys, witness.partial_address)\\n}\\n"},"65":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::{\\n    context::PrivateContext,\\n    hash::poseidon2_hash_with_separator,\\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\\n};\\n\\nuse crate::auth::{compute_authwit_message_hash, IS_VALID_SELECTOR};\\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\\n\\npub struct AccountActions<Context> {\\n    context: Context,\\n    is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\\n}\\n\\nimpl<Context> AccountActions<Context> {\\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\\n        AccountActions { context, is_valid_impl }\\n    }\\n}\\n\\n/**\\n * An implementation of the Account Action struct for the private context.\\n *\\n * Implements logic to verify authorization and execute payloads.\\n */\\nimpl AccountActions<&mut PrivateContext> {\\n\\n    /**\\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\\n     *\\n     * Executes the `fee_payload` and `app_payload` in sequence.\\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\\n     *\\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\\n     */\\n    // docs:start:entrypoint\\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\\n        let valid_fn = self.is_valid_impl;\\n\\n        let combined_payload_hash = poseidon2_hash_with_separator(\\n            [app_payload.hash(), fee_payload.hash()],\\n            GENERATOR_INDEX__COMBINED_PAYLOAD,\\n        );\\n        assert(valid_fn(self.context, combined_payload_hash));\\n\\n        fee_payload.execute_calls(self.context);\\n        self.context.end_setup();\\n        app_payload.execute_calls(self.context);\\n        if cancellable {\\n            let tx_nullifier =\\n                poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\\n            self.context.push_nullifier(tx_nullifier);\\n        }\\n    }\\n    // docs:end:entrypoint\\n\\n    /**\\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\\n     *\\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\\n     *\\n     * Will revert if the message is not authorized.\\n     *\\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\\n     */\\n    // docs:start:verify_private_authwit\\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\\n        // The `inner_hash` is \\"siloed\\" with the `msg_sender` to ensure that only it can\\n        // consume the message.\\n        // This ensures that contracts cannot consume messages that are not intended for them.\\n        let message_hash = compute_authwit_message_hash(\\n            self.context.msg_sender(),\\n            self.context.chain_id(),\\n            self.context.version(),\\n            inner_hash,\\n        );\\n        let valid_fn = self.is_valid_impl;\\n        assert(valid_fn(self.context, message_hash) == true, \\"Message not authorized by account\\");\\n        IS_VALID_SELECTOR\\n    }\\n    // docs:end:verify_private_authwit\\n}\\n"},"66":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\\nuse dep::aztec::protocol_types::{\\n    abis::function_selector::FunctionSelector,\\n    address::AztecAddress,\\n    constants::{\\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\\n    },\\n    hash::poseidon2_hash_with_separator,\\n};\\n\\n/**\\n * Authenticaion witness helper library\\n *\\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\\n * (e.g. protocols or other users) to execute an action on their behalf.\\n *\\n * This library provides helper functions to manage such witnesses.\\n * The authentication witness, is some \\"witness\\" (data) that authenticates a `message_hash`.\\n * The simplest example of an authentication witness, is a signature. The signature is the \\"evidence\\",\\n * that the signer has seen the message, agrees with it, and has allowed it.\\n * It does not need to be a signature. It could be any kind of \\"proof\\" that the message is allowed.\\n * Another proof could be knowing some kind of secret, or having some kind of \\"token\\" that allows the message.\\n *\\n * The `message_hash` is a hash of the following structure:\\n * hash(consumer, chain_id, version, inner_hash)\\n * - consumer: the address of the contract that is \\"consuming\\" the message,\\n * - chain_id: the chain id of the chain that the message is being consumed on,\\n * - version: the version of the chain that the message is being consumed on,\\n * - inner_hash: the hash of the \\"inner\\" message that is being consumed, this is the \\"actual\\" message or action.\\n *\\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\\n * a hash of the \\"action\\" to approve, along with who made the call. As part of this library, we provide a few\\n * helper functions to deal with such messages.\\n *\\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\\n * This can be used to let some contract \\"allow\\" another contract to act on its behalf, as long as it can\\n * show that it is acting on behalf of the contract.\\n *\\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\\n * derived as:\\n * inner_hash = hash(caller, \\"transfer\\", hash(to, amount))\\n *\\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\\n * the arguments for the transfer.\\n *\\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\\n * allowed to transfer the tokens.\\n *\\n *\\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\\n * is executed on the user\'s device, so we can use `oracles` to \\"ask\\" the user (not contract) for information. In public\\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \\"registry\\"\\n * to store the messages that we have approved.\\n *\\n * A simple example would be a \\"token\\" that is being \\"pulled\\" from one account into another. We will first outline\\n * how this would look in private, and then in public later.\\n *\\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\\n * convince the `Token` contract that it is allowed to do so.\\n *\\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\\n * execute that call.\\n *\\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\\n * funds from `Alice`.\\n *\\n * To ensure that the same \\"approval\\" cannot be used multiple times, we also compute a `nullifier` for the\\n * authentication witness, and emit it from the `Token` contract (consumer).\\n *\\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\\n *\\n *\\n *  Person          Contract              Contract               Contract\\n *  Alice          Alice Account          Token                   DeFi\\n *   |                  |                  |                      |\\n *   | Defi.deposit(Token, 1000)           |                      |\\n *   |-----------------\x3e|                  |                      |\\n *   |                  | deposit(Token, 1000)                    |\\n *   |                  |----------------------------------------\x3e|\\n *   |                  |                  |                      |\\n *   |                  |                  | transfer(Alice, Defi, 1000)\\n *   |                  |                  |<---------------------|\\n *   |                  |                  |                      |\\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\\n *   |                  |<-----------------|                      |\\n *   |                  |                  |                      |\\n *   | Please give me AuthWit for DeFi     |                      |\\n *   | calling transfer(Alice, Defi, 1000) |                      |\\n *   |<-----------------|                  |                      |\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\\n *   |-----------------\x3e|                  |                      |\\n *   |                  | AuthWit validity |                      |\\n *   |                  |-----------------\x3e|                      |\\n *   |                  |                  |                      |\\n *   |                  |       throw if invalid AuthWit          |\\n *   |                  |                  |                      |\\n *   |                  |       emit AuthWit nullifier            |\\n *   |                  |                  |                      |\\n *   |                  |       transfer(Alice, Defi, 1000)       |\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *   |                  |                  | success              |\\n *   |                  |                  |---------------------\x3e|\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *   |                  |                  |           deposit(Token, 1000)\\n *   |                  |                  |                      |\\n *   |                  |                  |                      |\\n *\\n *\\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\\n * the messages that we have approved.\\n *\\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\\n *\\n * The `Token` contract can then try to \\"spend\\" the approval by calling `consume` on the registry. If the message\\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\\n * registry, see `main.nr` in `auth_registry_contract`.\\n *\\n * Person          Contract              Contract            Contract               Contract\\n * Alice          Alice Account          Registry             Token                   DeFi\\n *   |                  |                    |                   |                      |\\n *   | Registry.set_authorized(..., true)    |                   |                      |\\n *   |-----------------\x3e|                    |                   |                      |\\n *   |                  | set_authorized(..., true)              |                      |\\n *   |                  |-------------------\x3e|                   |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |         set authorized to true         |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |                      |\\n *   | Defi.deposit(Token, 1000)             |                   |                      |\\n *   |-----------------\x3e|                    |                   |                      |\\n *   |                  | deposit(Token, 1000)                   |                      |\\n *   |                  |--------------------------------------------------------------\x3e|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\\n *   |                  |                    |                   |<---------------------|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\\n *   |                  |                    |<------------------|                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |          throw if invalid AuthWit      |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |           set authorized to false      |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    | AuthWit validity  |                      |\\n *   |                  |                    |------------------\x3e|                      |\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\\n *   |                  |                    |                   |<--------------------\x3e|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   | success              |\\n *   |                  |                    |                   |---------------------\x3e|\\n *   |                  |                    |                   |                      |\\n *   |                  |                    |                   |     deposit(Token, 1000)\\n *   |                  |                    |                   |                      |\\n *\\n *\\n * --- FAQ ---\\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\\"IS_VALID()\\")` instead of just returning a boolean?\\n * A:   We want to make sure that we don\'t accidentally return `true` if there is a collision in the function selector.\\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\\n *      a success flag.\\n *\\n * Q:   Why are we using static calls?\\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\\n *\\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\\n *\\n * Q:   Why is the chain id and the version part of the message hash?\\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\\n *      chain to avoid a case where the same message could be used across multiple chains.\\n */\\n\\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\\"IS_VALID()\\")\\n\\n/**\\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\\n *\\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the current call\\n */\\n// docs:start:assert_current_call_valid_authwit\\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\\n    let inner_hash = compute_inner_authwit_hash([\\n        context.msg_sender().to_field(),\\n        context.selector().to_field(),\\n        context.args_hash,\\n    ]);\\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\\n}\\n// docs:end:assert_current_call_valid_authwit\\n\\n/**\\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\\n *\\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the current call\\n * @param inner_hash The hash of the message to authorize\\n */\\npub fn assert_inner_hash_valid_authwit(\\n    context: &mut PrivateContext,\\n    on_behalf_of: AztecAddress,\\n    inner_hash: Field,\\n) {\\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\\n    let result: Field = context\\n        .static_call_private_function(\\n            on_behalf_of,\\n            comptime { FunctionSelector::from_signature(\\"verify_private_authwit(Field)\\") },\\n            [inner_hash],\\n        )\\n        .get_preimage();\\n    assert(result == IS_VALID_SELECTOR, \\"Message not authorized by account\\");\\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\\n    context.push_nullifier(nullifier);\\n}\\n\\n/**\\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\\n *\\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\\n *\\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the current call\\n */\\n// docs:start:assert_current_call_valid_authwit_public\\npub unconstrained fn assert_current_call_valid_authwit_public(\\n    context: &mut PublicContext,\\n    on_behalf_of: AztecAddress,\\n) {\\n    let inner_hash = compute_inner_authwit_hash([\\n        (*context).msg_sender().to_field(),\\n        (*context).selector().to_field(),\\n        (*context).get_args_hash(),\\n    ]);\\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\\n}\\n// docs:end:assert_current_call_valid_authwit_public\\n\\n/**\\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\\n *\\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\\n *\\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\\n *\\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\\n */\\npub unconstrained fn assert_inner_hash_valid_authwit_public(\\n    context: &mut PublicContext,\\n    on_behalf_of: AztecAddress,\\n    inner_hash: Field,\\n) {\\n    let results: [Field] = context.call_public_function(\\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\\n        comptime { FunctionSelector::from_signature(\\"consume((Field),Field)\\") },\\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\\n        GasOpts::default(),\\n    );\\n    assert(results.len() == 1, \\"Invalid response from registry\\");\\n    assert(results[0] == IS_VALID_SELECTOR, \\"Message not authorized by account\\");\\n}\\n\\n/**\\n * Compute the `message_hash` from a function call to be used by an authentication witness\\n *\\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\\n * B to transfer T on its behalf.\\n *\\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\\n * @param chain_id The chain id of the chain that the message is being consumed on\\n * @param version The version of the chain that the message is being consumed on\\n * @param selector The function selector of the function that is being called\\n * @param args The arguments of the function that is being called\\n */\\n// docs:start:compute_authwit_message_hash_from_call\\npub fn compute_authwit_message_hash_from_call<let N: u32>(\\n    caller: AztecAddress,\\n    consumer: AztecAddress,\\n    chain_id: Field,\\n    version: Field,\\n    selector: FunctionSelector,\\n    args: [Field; N],\\n) -> Field {\\n    let args_hash = hash_args_array(args);\\n    let inner_hash =\\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\\n}\\n// docs:end:compute_authwit_message_hash_from_call\\n\\n/**\\n * Computes the `inner_hash` of the authentication witness\\n *\\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\\n * that is not necessarily a call, but just some \\"bytes\\" or text.\\n *\\n * @param args The arguments to hash\\n */\\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\\n}\\n\\n/**\\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\\n *\\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\\n *\\n * @param on_behalf_of The address that has authorized the `inner_hash`\\n * @param inner_hash The hash of the message to authorize\\n */\\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [on_behalf_of.to_field(), inner_hash],\\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\\n    )\\n}\\n\\n/**\\n * Computes the `message_hash` for the authentication witness\\n *\\n * @param consumer The address of the contract that is consuming the message\\n * @param chain_id The chain id of the chain that the message is being consumed on\\n * @param version The version of the chain that the message is being consumed on\\n * @param inner_hash The hash of the \\"inner\\" message that is being consumed\\n */\\npub fn compute_authwit_message_hash(\\n    consumer: AztecAddress,\\n    chain_id: Field,\\n    version: Field,\\n    inner_hash: Field,\\n) -> Field {\\n    poseidon2_hash_with_separator(\\n        [consumer.to_field(), chain_id, version, inner_hash],\\n        GENERATOR_INDEX__AUTHWIT_OUTER,\\n    )\\n}\\n\\n/**\\n * Helper function to set the authorization status of a message hash\\n *\\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\\n *\\n * @param message_hash The hash of the message to authorize\\n * @param authorize True if the message should be authorized, false if it should be revoked\\n */\\npub unconstrained fn set_authorized(\\n    context: &mut PublicContext,\\n    message_hash: Field,\\n    authorize: bool,\\n) {\\n    let res = context.call_public_function(\\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\\n        comptime { FunctionSelector::from_signature(\\"set_authorized(Field,bool)\\") },\\n        [message_hash, authorize as Field].as_slice(),\\n        GasOpts::default(),\\n    );\\n    assert(res.len() == 0);\\n}\\n\\n/**\\n * Helper function to reject all authwits\\n *\\n * Wraps a public call to the authentication registry to set the `reject_all` flag\\n *\\n * @param reject True if all authwits should be rejected, false otherwise\\n */\\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\\n    let res = context.call_public_function(\\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\\n        comptime { FunctionSelector::from_signature(\\"set_reject_all(bool)\\") },\\n        [context.this_address().to_field(), reject as Field].as_slice(),\\n        GasOpts::default(),\\n    );\\n    assert(res.len() == 0);\\n}\\n"},"67":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\\n\\n/**\\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\\n *\\n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\\n * @return The `auth_witness` for the given `message_hash` as Field array.\\n */\\npub unconstrained fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\\n    get_auth_witness_oracle(message_hash)\\n}\\n"},"69":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::{\\n    prelude::PrivateContext,\\n    protocol_types::{\\n        constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD,\\n        hash::poseidon2_hash_with_separator,\\n        traits::{Hash, Serialize},\\n    },\\n};\\nuse std::meta::derive;\\n\\nuse crate::entrypoint::function_call::FunctionCall;\\n\\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u32 = 424;\\n\\nglobal ACCOUNT_MAX_CALLS: u32 = 4;\\n\\n// Note: If you change the following struct you have to update default_entrypoint.ts\\n// docs:start:app-payload-struct\\n#[derive(Serialize)]\\npub struct AppPayload {\\n    function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\\n    nonce: Field,\\n}\\n// docs:end:app-payload-struct\\n\\nimpl Hash for AppPayload {\\n    fn hash(self) -> Field {\\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__SIGNATURE_PAYLOAD)\\n    }\\n}\\n\\nimpl AppPayload {\\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\\n\\n        for i in 0..ACCOUNT_MAX_CALLS {\\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\\n        }\\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\\n\\n        bytes.storage()\\n    }\\n\\n    // Executes all private and public calls\\n    // docs:start:entrypoint-execute-calls\\n    fn execute_calls(self, context: &mut PrivateContext) {\\n        for call in self.function_calls {\\n            if !call.target_address.is_zero() {\\n                if call.is_public {\\n                    context.call_public_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                } else {\\n                    let _result = context.call_private_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                }\\n            }\\n        }\\n    }\\n    // docs:end:entrypoint-execute-calls\\n}\\n"},"70":{"path":"/build-volume/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use crate::entrypoint::function_call::FunctionCall;\\nuse dep::aztec::{\\n    prelude::PrivateContext,\\n    protocol_types::{\\n        constants::GENERATOR_INDEX__FEE_PAYLOAD,\\n        hash::poseidon2_hash_with_separator,\\n        traits::{Hash, Serialize},\\n    },\\n};\\nuse std::meta::derive;\\n\\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: u32 = 228;\\n\\nglobal MAX_FEE_FUNCTION_CALLS: u32 = 2;\\n\\n// docs:start:fee-payload-struct\\n#[derive(Serialize)]\\npub struct FeePayload {\\n    function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\\n    nonce: Field,\\n    is_fee_payer: bool,\\n}\\n// docs:end:fee-payload-struct\\n\\nimpl Hash for FeePayload {\\n    fn hash(self) -> Field {\\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__FEE_PAYLOAD)\\n    }\\n}\\n\\nimpl FeePayload {\\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\\n\\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\\n        }\\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\\n        bytes.push(self.is_fee_payer as u8);\\n\\n        bytes.storage()\\n    }\\n\\n    fn execute_calls(self, context: &mut PrivateContext) {\\n        for call in self.function_calls {\\n            if !call.target_address.is_zero() {\\n                if call.is_public {\\n                    context.call_public_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                } else {\\n                    let _result = context.call_private_function_with_args_hash(\\n                        call.target_address,\\n                        call.function_selector,\\n                        call.args_hash,\\n                        call.is_static,\\n                    );\\n                }\\n            }\\n        }\\n        if self.is_fee_payer {\\n            context.set_as_fee_payer();\\n        }\\n    }\\n}\\n"},"81":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use dep::protocol_types::debug_log::debug_log_format;\\n\\nuse crate::{\\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\\n    hash::{ArgsHasher, hash_args_array},\\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\\n    messaging::process_l1_to_l2_message,\\n    oracle::{\\n        block_header::get_block_header_at,\\n        call_private_function::call_private_function_internal,\\n        enqueue_public_function_call::{\\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\\n            set_public_teardown_function_call_internal,\\n        },\\n        execution_cache,\\n        key_validation_request::get_key_validation_request,\\n        notes::{notify_created_nullifier, notify_nullified_note},\\n    },\\n};\\nuse dep::protocol_types::{\\n    abis::{\\n        call_context::CallContext,\\n        function_selector::FunctionSelector,\\n        log::Log,\\n        log_hash::LogHash,\\n        max_block_number::MaxBlockNumber,\\n        note_hash::NoteHash,\\n        nullifier::Nullifier,\\n        private_call_request::PrivateCallRequest,\\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\\n        private_log::PrivateLogData,\\n        public_call_request::PublicCallRequest,\\n        read_request::ReadRequest,\\n        side_effect::Counted,\\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    block_header::BlockHeader,\\n    constants::{\\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\\n    },\\n    messaging::l2_to_l1_message::L2ToL1Message,\\n    traits::Empty,\\n};\\n\\n// When finished, one can call .finish() to convert back to the abi\\npub struct PrivateContext {\\n    // docs:start:private-context\\n    pub inputs: PrivateContextInputs,\\n    pub side_effect_counter: u32,\\n\\n    pub min_revertible_side_effect_counter: u32,\\n    pub is_fee_payer: bool,\\n\\n    pub args_hash: Field,\\n    pub return_hash: Field,\\n\\n    pub max_block_number: MaxBlockNumber,\\n\\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\\n\\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\\n\\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\\n    pub public_teardown_call_request: PublicCallRequest,\\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\\n    // docs:end:private-context\\n\\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\\n    pub historical_header: BlockHeader,\\n\\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\\n\\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\\n    // fetching the same request multiple times.\\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\\n}\\n\\nimpl PrivateContext {\\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\\n        PrivateContext {\\n            inputs,\\n            side_effect_counter: inputs.start_side_effect_counter + 1,\\n            min_revertible_side_effect_counter: 0,\\n            is_fee_payer: false,\\n            args_hash,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            historical_header: inputs.historical_header,\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n\\n    pub fn msg_sender(self) -> AztecAddress {\\n        self.inputs.call_context.msg_sender\\n    }\\n\\n    pub fn this_address(self) -> AztecAddress {\\n        self.inputs.call_context.contract_address\\n    }\\n\\n    pub fn chain_id(self) -> Field {\\n        self.inputs.tx_context.chain_id\\n    }\\n\\n    pub fn version(self) -> Field {\\n        self.inputs.tx_context.version\\n    }\\n\\n    pub fn selector(self) -> FunctionSelector {\\n        self.inputs.call_context.function_selector\\n    }\\n\\n    pub fn get_args_hash(self) -> Field {\\n        self.args_hash\\n    }\\n\\n    pub fn push_note_hash(&mut self, note_hash: Field) {\\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\\n\\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\\n        debug_log_format(\\n            \\"Context.note_hashes, after pushing new note hash: {0}\\",\\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\\n        );\\n    }\\n\\n    pub fn push_nullifier(&mut self, nullifier: Field) {\\n        notify_created_nullifier(nullifier);\\n        self.nullifiers.push(\\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\\n        );\\n    }\\n\\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\\n        let nullifier_counter = self.next_counter();\\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\\n        self.nullifiers.push(\\n            Nullifier {\\n                value: nullifier,\\n                note_hash: nullified_note_hash,\\n                counter: nullifier_counter,\\n            },\\n        );\\n    }\\n\\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\\n    // included in).\\n    pub fn get_block_header(self) -> BlockHeader {\\n        self.historical_header\\n    }\\n\\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\\n    // of historical header.\\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\\n        get_block_header_at(block_number, self)\\n    }\\n\\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\\n        execution_cache::store(returns_hasher.fields);\\n        self.return_hash = returns_hasher.hash();\\n    }\\n\\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\\n        PrivateCircuitPublicInputs {\\n            call_context: self.inputs.call_context,\\n            args_hash: self.args_hash,\\n            returns_hash: self.return_hash,\\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\\n            is_fee_payer: self.is_fee_payer,\\n            max_block_number: self.max_block_number,\\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\\n            key_validation_requests_and_generators: self\\n                .key_validation_requests_and_generators\\n                .storage(),\\n            note_hashes: self.note_hashes.storage(),\\n            nullifiers: self.nullifiers.storage(),\\n            private_call_requests: self.private_call_requests.storage(),\\n            public_call_requests: self.public_call_requests.storage(),\\n            public_teardown_call_request: self.public_teardown_call_request,\\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\\n            end_side_effect_counter: self.side_effect_counter,\\n            private_logs: self.private_logs.storage(),\\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\\n            historical_header: self.historical_header,\\n            tx_context: self.inputs.tx_context,\\n        }\\n    }\\n\\n    pub fn set_as_fee_payer(&mut self) {\\n        dep::protocol_types::debug_log::debug_log_format(\\n            \\"Setting {0} as fee payer\\",\\n            [self.this_address().to_field()],\\n        );\\n        self.is_fee_payer = true;\\n    }\\n\\n    pub fn end_setup(&mut self) {\\n        // dep::protocol_types::debug_log::debug_log_format(\\n        //     \\"Ending setup at counter {0}\\",\\n        //     [self.side_effect_counter as Field]\\n        // );\\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\\n    }\\n\\n    // docs:start:max-block-number\\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\\n        // docs:end:max-block-number\\n        self.max_block_number =\\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\\n    }\\n\\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\\n        self.note_hash_read_requests.push(side_effect);\\n    }\\n\\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\\n        self.nullifier_read_requests.push(request);\\n    }\\n\\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\\n    }\\n\\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\\n    }\\n\\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\\n        let cached_request =\\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\\n\\n        if cached_request.pk_m.hash() == pk_m_hash {\\n            // We get a match so the cached request is the latest one\\n            cached_request.sk_app\\n        } else {\\n            // We didn\'t get a match meaning the cached result is stale\\n            // Typically we\'d validate keys by showing that they are the preimage of `pk_m_hash`, but that\'d require\\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\\n            // to `pk_m_hash`.\\n\\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\\n            /// for the correct public key has been received.\\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\\n            assert_eq(request.pk_m.hash(), pk_m_hash, \\"Obtained invalid key validation request\\");\\n\\n            self.key_validation_requests_and_generators.push(\\n                KeyValidationRequestAndGenerator {\\n                    request,\\n                    sk_app_generator: sk_generators[key_index],\\n                },\\n            );\\n            self.last_key_validation_requests[key_index] = Option::some(request);\\n            request.sk_app\\n        }\\n    }\\n\\n    // docs:start:context_message_portal\\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\\n        // docs:end:context_message_portal\\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\\n        self.l2_to_l1_msgs.push(message);\\n    }\\n\\n    // docs:start:context_consume_l1_to_l2_message\\n    // docs:start:consume_l1_to_l2_message\\n    pub fn consume_l1_to_l2_message(\\n        &mut self,\\n        content: Field,\\n        secret: Field,\\n        sender: EthAddress,\\n        leaf_index: Field,\\n    ) {\\n        // docs:end:context_consume_l1_to_l2_message\\n        let nullifier = process_l1_to_l2_message(\\n            self.historical_header.state.l1_to_l2_message_tree.root,\\n            self.this_address(),\\n            sender,\\n            self.chain_id(),\\n            self.version(),\\n            content,\\n            secret,\\n            leaf_index,\\n        );\\n\\n        // Push nullifier (and the \\"commitment\\" corresponding to this can be \\"empty\\")\\n        self.push_nullifier(nullifier)\\n    }\\n    // docs:end:consume_l1_to_l2_message\\n\\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn emit_raw_note_log(\\n        &mut self,\\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\\n        note_hash_counter: u32,\\n    ) {\\n        let counter = self.next_counter();\\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\\n        self.private_logs.push(private_log);\\n    }\\n\\n    pub fn call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) -> ReturnsHash {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_private_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_private_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) -> ReturnsHash {\\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_private_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) -> ReturnsHash {\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        let start_side_effect_counter = self.side_effect_counter;\\n\\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\\n        /// to `returns_hash` and the side effects counter to increment from start to end.\\n        let (end_side_effect_counter, returns_hash) = unsafe {\\n            call_private_function_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                start_side_effect_counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        self.private_call_requests.push(\\n            PrivateCallRequest {\\n                call_context: CallContext {\\n                    msg_sender: self.this_address(),\\n                    contract_address,\\n                    function_selector,\\n                    is_static_call,\\n                },\\n                args_hash,\\n                returns_hash,\\n                start_side_effect_counter,\\n                end_side_effect_counter,\\n            },\\n        );\\n\\n        // TODO (fees) figure out why this crashes the prover and enable it\\n        // we need this in order to pay fees inside child call contexts\\n        // assert(\\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\\n        //     | (item.public_inputs.min_revertible_side_effect_counter\\n        //         > self.min_revertible_side_effect_counter)\\n        // );\\n        // if item.public_inputs.min_revertible_side_effect_counter\\n        //     > self.min_revertible_side_effect_counter {\\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\\n        // }\\n        self.side_effect_counter = end_side_effect_counter + 1;\\n        ReturnsHash::new(returns_hash)\\n    }\\n\\n    pub fn call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.call_public_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            true,\\n        )\\n    }\\n\\n    pub fn call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\\n    }\\n\\n    pub fn static_call_public_function_no_args(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n    ) {\\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\\n    }\\n\\n    pub fn call_public_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            enqueue_public_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        // Public calls are rerouted through the dispatch function.\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        let call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n\\n        self.public_call_requests.push(Counted::new(call_request, counter));\\n    }\\n\\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args: [Field; ARGS_COUNT],\\n    ) {\\n        let args_hash = hash_args_array(args);\\n        execution_cache::store(args);\\n        self.set_public_teardown_function_with_args_hash(\\n            contract_address,\\n            function_selector,\\n            args_hash,\\n            false,\\n        )\\n    }\\n\\n    pub fn set_public_teardown_function_with_args_hash(\\n        &mut self,\\n        contract_address: AztecAddress,\\n        function_selector: FunctionSelector,\\n        args_hash: Field,\\n        is_static_call: bool,\\n    ) {\\n        let counter = self.next_counter();\\n\\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\\n        /// WARNING: This is insecure and should be temporary!\\n        /// The oracle hashes the arguments and returns a new args_hash.\\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\\n        /// We don\'t validate or compute it in the circuit because a) it\'s harder to do with slices, and\\n        /// b) this is only temporary.\\n        let args_hash = unsafe {\\n            set_public_teardown_function_call_internal(\\n                contract_address,\\n                function_selector,\\n                args_hash,\\n                counter,\\n                is_static_call,\\n            )\\n        };\\n\\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\\n\\n        self.public_teardown_call_request = PublicCallRequest {\\n            msg_sender: self.this_address(),\\n            contract_address,\\n            function_selector,\\n            is_static_call,\\n            args_hash,\\n        };\\n    }\\n\\n    fn next_counter(&mut self) -> u32 {\\n        let counter = self.side_effect_counter;\\n        self.side_effect_counter += 1;\\n        counter\\n    }\\n}\\n\\nimpl Empty for PrivateContext {\\n    fn empty() -> Self {\\n        PrivateContext {\\n            inputs: PrivateContextInputs::empty(),\\n            side_effect_counter: 0 as u32,\\n            min_revertible_side_effect_counter: 0 as u32,\\n            is_fee_payer: false,\\n            args_hash: 0,\\n            return_hash: 0,\\n            max_block_number: MaxBlockNumber::empty(),\\n            note_hash_read_requests: BoundedVec::new(),\\n            nullifier_read_requests: BoundedVec::new(),\\n            key_validation_requests_and_generators: BoundedVec::new(),\\n            note_hashes: BoundedVec::new(),\\n            nullifiers: BoundedVec::new(),\\n            private_call_requests: BoundedVec::new(),\\n            public_call_requests: BoundedVec::new(),\\n            public_teardown_call_request: PublicCallRequest::empty(),\\n            l2_to_l1_msgs: BoundedVec::new(),\\n            historical_header: BlockHeader::empty(),\\n            private_logs: BoundedVec::new(),\\n            contract_class_logs_hashes: BoundedVec::new(),\\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\\n        }\\n    }\\n}\\n"},"97":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\\nuse dep::protocol_types::{\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\\n        GENERATOR_INDEX__SECRET_HASH,\\n    },\\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\\n    point::Point,\\n    traits::Hash,\\n};\\n\\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\\n\\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\\n}\\n\\npub fn compute_secret_hash(secret: Field) -> Field {\\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\\n}\\n\\npub fn compute_l1_to_l2_message_hash(\\n    sender: EthAddress,\\n    chain_id: Field,\\n    recipient: AztecAddress,\\n    version: Field,\\n    content: Field,\\n    secret_hash: Field,\\n    leaf_index: Field,\\n) -> Field {\\n    let mut hash_bytes = [0 as u8; 224];\\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\\n    let version_bytes: [u8; 32] = version.to_be_bytes();\\n    let content_bytes: [u8; 32] = content.to_be_bytes();\\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\\n\\n    for i in 0..32 {\\n        hash_bytes[i] = sender_bytes[i];\\n        hash_bytes[i + 32] = chain_id_bytes[i];\\n        hash_bytes[i + 64] = recipient_bytes[i];\\n        hash_bytes[i + 96] = version_bytes[i];\\n        hash_bytes[i + 128] = content_bytes[i];\\n        hash_bytes[i + 160] = secret_hash_bytes[i];\\n        hash_bytes[i + 192] = leaf_index_bytes[i];\\n    }\\n\\n    sha256_to_field(hash_bytes)\\n}\\n\\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\\n}\\n\\npub struct ArgsHasher {\\n    pub fields: [Field],\\n}\\n\\nimpl Hash for ArgsHasher {\\n    fn hash(self) -> Field {\\n        hash_args(self.fields)\\n    }\\n}\\n\\nimpl ArgsHasher {\\n    pub fn new() -> Self {\\n        Self { fields: [] }\\n    }\\n\\n    pub fn add(&mut self, field: Field) {\\n        self.fields = self.fields.push_back(field);\\n    }\\n\\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\\n        for i in 0..N {\\n            self.fields = self.fields.push_back(fields[i]);\\n        }\\n    }\\n}\\n\\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\npub fn hash_args(args: [Field]) -> Field {\\n    if args.len() == 0 {\\n        0\\n    } else {\\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_var_args_hash() {\\n    let mut input = ArgsHasher::new();\\n    for i in 0..100 {\\n        input.add(i as Field);\\n    }\\n    let hash = input.hash();\\n    dep::std::println(hash);\\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\\n}\\n"},"136":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\\n};\\n\\n#[oracle(callPrivateFunction)]\\nunconstrained fn call_private_function_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _start_side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> [Field; 2] {}\\n\\npub unconstrained fn call_private_function_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    start_side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> (u32, Field) {\\n    let fields = call_private_function_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        start_side_effect_counter,\\n        is_static_call,\\n    );\\n\\n    let mut reader = Reader::new(fields);\\n    let end_side_effect_counter = reader.read_u32();\\n    let returns_hash = reader.read();\\n\\n    (end_side_effect_counter, returns_hash)\\n}\\n"},"137":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\\n\\n#[oracle(enqueuePublicFunctionCall)]\\nunconstrained fn enqueue_public_function_call_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> Field {}\\n\\npub unconstrained fn enqueue_public_function_call_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> Field {\\n    enqueue_public_function_call_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        side_effect_counter,\\n        is_static_call,\\n    )\\n}\\n\\n#[oracle(setPublicTeardownFunctionCall)]\\nunconstrained fn set_public_teardown_function_call_oracle(\\n    _contract_address: AztecAddress,\\n    _function_selector: FunctionSelector,\\n    _args_hash: Field,\\n    _side_effect_counter: u32,\\n    _is_static_call: bool,\\n) -> Field {}\\n\\npub unconstrained fn set_public_teardown_function_call_internal(\\n    contract_address: AztecAddress,\\n    function_selector: FunctionSelector,\\n    args_hash: Field,\\n    side_effect_counter: u32,\\n    is_static_call: bool,\\n) -> Field {\\n    set_public_teardown_function_call_oracle(\\n        contract_address,\\n        function_selector,\\n        args_hash,\\n        side_effect_counter,\\n        is_static_call,\\n    )\\n}\\n\\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\\n}\\n\\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\\n}\\n\\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\\n"},"139":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr","source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\\npub fn store(values: [Field]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\\n}\\n\\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\\n    let _ = store_in_execution_cache_oracle(values);\\n}\\n\\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\\n    load_from_execution_cache_oracle(hash)\\n}\\n\\n#[oracle(storeInExecutionCache)]\\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\\n\\n#[oracle(loadFromExecutionCache)]\\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\\n"},"150":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\\n\\nuse dep::protocol_types::{\\n    address::AztecAddress,\\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\\n};\\n\\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\\npub fn notify_created_note<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        notify_created_note_oracle_wrapper(\\n            storage_slot,\\n            note_type_id,\\n            packed_note_content,\\n            note_hash,\\n            counter,\\n        )\\n    };\\n}\\n\\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\\n/// actual block.\\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\\n}\\n\\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\\npub fn notify_created_nullifier(nullifier: Field) {\\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\\n}\\n\\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\\n    storage_slot: Field,\\n    note_type_id: Field,\\n    packed_note_content: [Field; N],\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_created_note_oracle(\\n        storage_slot,\\n        note_type_id,\\n        packed_note_content,\\n        note_hash,\\n        counter,\\n    );\\n}\\n\\n#[oracle(notifyCreatedNote)]\\nunconstrained fn notify_created_note_oracle<let N: u32>(\\n    _storage_slot: Field,\\n    _note_type_id: Field,\\n    _packed_note_content: [Field; N],\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_nullified_note_oracle_wrapper(\\n    nullifier: Field,\\n    note_hash: Field,\\n    counter: u32,\\n) {\\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\\n}\\n\\n#[oracle(notifyNullifiedNote)]\\nunconstrained fn notify_nullified_note_oracle(\\n    _nullifier: Field,\\n    _note_hash: Field,\\n    _counter: u32,\\n) -> Field {}\\n\\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\\n    let _ = notify_created_nullifier_oracle(nullifier);\\n}\\n\\n#[oracle(notifyCreatedNullifier)]\\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\\n\\n#[oracle(getNotes)]\\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\\n    _storage_slot: Field,\\n    _num_selects: u8,\\n    _select_by_indexes: [u8; N],\\n    _select_by_offsets: [u8; N],\\n    _select_by_lengths: [u8; N],\\n    _select_values: [Field; N],\\n    _select_comparators: [u8; N],\\n    _sort_by_indexes: [u8; N],\\n    _sort_by_offsets: [u8; N],\\n    _sort_by_lengths: [u8; N],\\n    _sort_order: [u8; N],\\n    _limit: u32,\\n    _offset: u32,\\n    _status: u8,\\n    _return_size: u32,\\n    _placeholder_fields: [Field; S],\\n) -> [Field; S] {}\\n\\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; N],\\n    select_by_offsets: [u8; N],\\n    select_by_lengths: [u8; N],\\n    select_values: [Field; N],\\n    select_comparators: [u8; N],\\n    sort_by_indexes: [u8; N],\\n    sort_by_offsets: [u8; N],\\n    sort_by_lengths: [u8; N],\\n    sort_order: [u8; N],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_fields: [Field; S],\\n) -> [Field; S] {\\n    let return_size = placeholder_fields.len() as u32;\\n    get_notes_oracle(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        return_size,\\n        placeholder_fields,\\n    )\\n}\\n\\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\\n    storage_slot: Field,\\n    num_selects: u8,\\n    select_by_indexes: [u8; M],\\n    select_by_offsets: [u8; M],\\n    select_by_lengths: [u8; M],\\n    select_values: [Field; M],\\n    select_comparators: [u8; M],\\n    sort_by_indexes: [u8; M],\\n    sort_by_offsets: [u8; M],\\n    sort_by_lengths: [u8; M],\\n    sort_order: [u8; M],\\n    limit: u32,\\n    offset: u32,\\n    status: u8,\\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\\n) -> [Option<Note>; S]\\nwhere\\n    Note: NoteInterface<N>,\\n{\\n    sync_notes_oracle_wrapper();\\n    let fields = get_notes_oracle_wrapper(\\n        storage_slot,\\n        num_selects,\\n        select_by_indexes,\\n        select_by_offsets,\\n        select_by_lengths,\\n        select_values,\\n        select_comparators,\\n        sort_by_indexes,\\n        sort_by_offsets,\\n        sort_by_lengths,\\n        sort_order,\\n        limit,\\n        offset,\\n        status,\\n        placeholder_fields,\\n    );\\n    let num_notes = fields[0] as u32;\\n    let contract_address = AztecAddress::from_field(fields[1]);\\n    for i in 0..placeholder_opt_notes.len() {\\n        if i < num_notes {\\n            // lengths named as per typescript.\\n            let return_header_length: u32 = 2; // num_notes & contract_address.\\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\\n\\n            let nonce = fields[read_offset];\\n            let note_hash_counter = fields[read_offset + 1] as u32;\\n            let note_content = array::subarray(fields, read_offset + 2);\\n\\n            let mut note = Note::unpack_content(note_content);\\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\\n\\n            placeholder_opt_notes[i] = Option::some(note);\\n        };\\n    }\\n    placeholder_opt_notes\\n}\\n\\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\\n    check_nullifier_exists_oracle(inner_nullifier) == 1\\n}\\n\\n#[oracle(checkNullifierExists)]\\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\\n\\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\\n}\\n\\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\\n/// Includes the last known index used to send a note tagged with this secret.\\n/// For this to work, PXE must know the ivsk_m of the sender.\\n/// For the recipient\'s side, only the address is needed.\\npub unconstrained fn get_indexed_tagging_secret_as_sender(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) -> IndexedTaggingSecret {\\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\\n    IndexedTaggingSecret::deserialize(result)\\n}\\n\\n#[oracle(getIndexedTaggingSecretAsSender)]\\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\\n\\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\\n/// future notes get a different tag and can be discovered by the recipient.\\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\\n/// that are not found by the recipient.\\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\\n    }\\n}\\n\\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\\n    sender: AztecAddress,\\n    recipient: AztecAddress,\\n) {\\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\\n}\\n\\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\\n    _sender: AztecAddress,\\n    _recipient: AztecAddress,\\n) {}\\n\\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\\n/// for later querying via the `get_notes` oracle.\\npub fn sync_notes() {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe {\\n        sync_notes_oracle_wrapper();\\n    }\\n}\\n\\nunconstrained fn sync_notes_oracle_wrapper() {\\n    sync_notes_oracle();\\n}\\n\\n#[oracle(syncNotes)]\\nunconstrained fn sync_notes_oracle() {}\\n"},"184":{"path":"/build-volume/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr","source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\\n/// of elements past `offset`.\\n///\\n/// Examples:\\n/// ```\\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\\n/// assert_eq(foo, [3, 4]);\\n///\\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can\'t return 5 elements since only 3 remain\\n/// ```\\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\\n    src: [T; SRC_LEN],\\n    offset: u32,\\n) -> [T; DST_LEN] {\\n    assert(offset + DST_LEN <= SRC_LEN, \\"DST_LEN too large for offset\\");\\n\\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\\n    for i in 0..DST_LEN {\\n        dst[i] = src[i + offset];\\n    }\\n\\n    dst\\n}\\n\\nmod test {\\n    use super::subarray;\\n\\n    #[test]\\n    unconstrained fn subarray_into_empty() {\\n        // In all of these cases we\'re setting DST_LEN to be 0, so we always get back an emtpy array.\\n        assert_eq(subarray::<Field, _, _>([], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\\n    }\\n\\n    #[test]\\n    unconstrained fn subarray_complete() {\\n        assert_eq(subarray::<Field, _, _>([], 0), []);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\\n    }\\n\\n    #[test]\\n    unconstrained fn subarray_different_end_sizes() {\\n        // We implicitly select how many values to read in the size of the return array\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\\n    }\\n\\n    #[test(should_fail_with = \\"DST_LEN too large for offset\\")]\\n    unconstrained fn subarray_offset_too_large() {\\n        // With an offset of 1 we can only request up to 4 elements\\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\\n    }\\n\\n    #[test(should_fail)]\\n    unconstrained fn subarray_bad_return_value() {\\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\\n    }\\n}\\n"},"251":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\\n    abis::function_selector::FunctionSelector,\\n    address::{\\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\\n    },\\n    constants::{\\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        MAX_FIELD_VALUE,\\n    },\\n    contract_class_id::ContractClassId,\\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\\n    merkle_tree::membership::MembershipWitness,\\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\\n};\\n\\n// We do below because `use crate::point::Point;` does not work\\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\n\\nuse crate::public_keys::AddressPoint;\\nuse ec::{pow, sqrt};\\nuse std::{\\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\\n    ops::Add,\\n};\\n\\n// Aztec address\\npub struct AztecAddress {\\n    pub inner: Field,\\n}\\n\\nimpl Eq for AztecAddress {\\n    fn eq(self, other: Self) -> bool {\\n        self.to_field() == other.to_field()\\n    }\\n}\\n\\nimpl Empty for AztecAddress {\\n    fn empty() -> Self {\\n        Self { inner: 0 }\\n    }\\n}\\n\\nimpl ToField for AztecAddress {\\n    fn to_field(self) -> Field {\\n        self.inner\\n    }\\n}\\n\\nimpl FromField for AztecAddress {\\n    fn from_field(value: Field) -> AztecAddress {\\n        AztecAddress { inner: value }\\n    }\\n}\\n\\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        [self.to_field()]\\n    }\\n}\\n\\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        FromField::from_field(fields[0])\\n    }\\n}\\n\\n/// We implement the Packable trait for AztecAddress because it can be stored in contract\'s storage (and there\\n/// the implementation of Packable is required).\\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\\n        self.serialize()\\n    }\\n\\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\\n        Self::deserialize(fields)\\n    }\\n}\\n\\nimpl AztecAddress {\\n    pub fn zero() -> Self {\\n        Self { inner: 0 }\\n    }\\n\\n    pub fn to_address_point(self) -> AddressPoint {\\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\\n        // equation which defines our bn curve:\\n        // y^2 = x^3 - 17; x = address\\n        let x = self.inner;\\n        let y_squared = pow(x, 3) - 17;\\n\\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\\n        let mut y = sqrt(y_squared);\\n\\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\\n        // note: The field modulus is MAX_FIELD_VALUE + 1\\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\\n            y = (MAX_FIELD_VALUE + 1) - y;\\n        }\\n\\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\\n    }\\n\\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\\n        let public_keys_hash = public_keys.hash();\\n\\n        let pre_address = poseidon2_hash_with_separator(\\n            [public_keys_hash.to_field(), partial_address.to_field()],\\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\\n        );\\n\\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\\n            public_keys.ivpk_m.to_point(),\\n        );\\n\\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\\n        AztecAddress::from_field(address_point.x)\\n    }\\n\\n    pub fn compute_from_private_function(\\n        function_selector: FunctionSelector,\\n        function_vk_hash: Field,\\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\\n        contract_class_artifact_hash: Field,\\n        contract_class_public_bytecode_commitment: Field,\\n        salted_initialization_hash: SaltedInitializationHash,\\n        public_keys: PublicKeys,\\n    ) -> Self {\\n        let private_functions_root = private_functions_root_from_siblings(\\n            function_selector,\\n            function_vk_hash,\\n            function_leaf_membership_witness.leaf_index,\\n            function_leaf_membership_witness.sibling_path,\\n        );\\n\\n        let contract_class_id = ContractClassId::compute(\\n            contract_class_artifact_hash,\\n            private_functions_root,\\n            contract_class_public_bytecode_commitment,\\n        );\\n\\n        // Compute contract address using the preimage which includes the class_id.\\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\\n            contract_class_id,\\n            salted_initialization_hash,\\n        );\\n\\n        AztecAddress::compute(public_keys, partial_address)\\n    }\\n\\n    pub fn is_zero(self) -> bool {\\n        self.inner == 0\\n    }\\n\\n    pub fn assert_is_zero(self) {\\n        assert(self.to_field() == 0);\\n    }\\n}\\n\\n#[test]\\nfn compute_address_from_partial_and_pub_keys() {\\n    let public_keys = PublicKeys {\\n        npk_m: NpkM {\\n            inner: Point {\\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\\n                is_infinite: false,\\n            },\\n        },\\n        ivpk_m: IvpkM {\\n            inner: Point {\\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\\n                is_infinite: false,\\n            },\\n        },\\n        ovpk_m: OvpkM {\\n            inner: Point {\\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\\n                is_infinite: false,\\n            },\\n        },\\n        tpk_m: TpkM {\\n            inner: Point {\\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\\n                is_infinite: false,\\n            },\\n        },\\n    };\\n\\n    let partial_address = PartialAddress::from_field(\\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\\n    );\\n\\n    let address = AztecAddress::compute(public_keys, partial_address);\\n\\n    // The following value was generated by `derivation.test.ts`.\\n    // --\x3e Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\\n    let expected_computed_address_from_partial_and_pubkeys =\\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\\n}\\n\\n#[test]\\nfn compute_preaddress_from_partial_and_pub_keys() {\\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\\n    let expected_computed_preaddress_from_partial_and_pubkey =\\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\\n}\\n\\n#[test]\\nfn from_field_to_field() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(FromField::from_field(address.to_field()), address);\\n}\\n\\n#[test]\\nfn serde() {\\n    let address = AztecAddress { inner: 37 };\\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\\n}\\n"},"267":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\\n/// Example:\\n///   debug_log(\\"blah blah this is a debug string\\");\\npub fn debug_log<let N: u32>(msg: str<N>) {\\n    debug_log_format(msg, []);\\n}\\n\\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\\n/// Examples:\\n///   debug_log_format(\\"get_2(slot:{0}) =>\\\\n\\\\t0:{1}\\\\n\\\\t1:{2}\\", [storage_slot, note0_hash, note1_hash]);\\n///   debug_log_format(\\"whole array: {}\\", [e1, e2, e3, e4]);\\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\\n    /// to call.\\n    unsafe { debug_log_oracle_wrapper(msg, args) };\\n}\\n\\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\\n    msg: str<M>,\\n    args: [Field; N],\\n) {\\n    debug_log_oracle(msg, args.as_slice());\\n}\\n\\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \\"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\\"`\\n#[oracle(debugLog)]\\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\\n"},"268":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\\n    abis::{\\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\\n        function_selector::FunctionSelector,\\n        log_hash::{LogHash, ScopedLogHash},\\n        note_hash::ScopedNoteHash,\\n        nullifier::ScopedNullifier,\\n        private_log::{PrivateLog, PrivateLogData},\\n        side_effect::{OrderedValue, scoped::Scoped},\\n    },\\n    address::{AztecAddress, EthAddress},\\n    constants::{\\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\\n    },\\n    merkle_tree::root::root_from_sibling_path,\\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\\n    poseidon2::Poseidon2Sponge,\\n    traits::{FromField, Hash, is_empty, ToField},\\n    utils::field::field_from_bytes_32_trunc,\\n};\\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\\n\\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\\n    let sha256_hashed = sha256::digest(bytes_to_hash);\\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\\n\\n    hash_in_a_field\\n}\\n\\npub fn private_functions_root_from_siblings(\\n    selector: FunctionSelector,\\n    vk_hash: Field,\\n    function_leaf_index: Field,\\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\\n) -> Field {\\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\\n    let function_leaf = function_leaf_preimage.hash();\\n    root_from_sibling_path(\\n        function_leaf,\\n        function_leaf_index,\\n        function_leaf_sibling_path,\\n    )\\n}\\n\\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\\n    // unique).\\n    poseidon2_hash_with_separator(\\n        [first_nullifier_in_tx, note_index_in_tx as Field],\\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\\n    )\\n}\\n\\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\\n    let inputs = [nonce, siloed_note_hash];\\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\\n}\\n\\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), note_hash],\\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\\n    )\\n}\\n\\n/// Computes unique note hashes from siloed note hashes\\npub fn compute_unique_siloed_note_hash(\\n    siloed_note_hash: Field,\\n    first_nullifier: Field,\\n    note_index_in_tx: u32,\\n) -> Field {\\n    if siloed_note_hash == 0 {\\n        0\\n    } else {\\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\\n        compute_unique_note_hash(nonce, siloed_note_hash)\\n    }\\n}\\n\\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\\n    if note_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\\n    }\\n}\\n\\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\\n    poseidon2_hash_with_separator(\\n        [app.to_field(), nullifier],\\n        GENERATOR_INDEX__OUTER_NULLIFIER,\\n    )\\n}\\n\\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\\n    if nullifier.contract_address.is_zero() {\\n        nullifier.value() // Return value instead of 0 because the first nullifier\'s contract address is zero.\\n    } else {\\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\\n    }\\n}\\n\\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\\n    poseidon2_hash([contract_address.to_field(), field])\\n}\\n\\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\\n    if private_log.contract_address.is_zero() {\\n        private_log.inner.log\\n    } else {\\n        let mut fields = private_log.inner.log.fields;\\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\\n        PrivateLog { fields }\\n    }\\n}\\n\\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\\n    accumulate_sha256([address.to_field(), log_hash])\\n}\\n\\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\\n    if log_hash.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\\n    }\\n}\\n\\npub fn merkle_hash(left: Field, right: Field) -> Field {\\n    poseidon2_hash([left, right])\\n}\\n\\npub fn compute_l2_to_l1_hash(\\n    contract_address: AztecAddress,\\n    recipient: EthAddress,\\n    content: Field,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    let mut bytes: [u8; 160] = std::mem::zeroed();\\n\\n    let inputs =\\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\\n    for i in 0..5 {\\n        // TODO are bytes be in fr.to_buffer() ?\\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\\n        for j in 0..32 {\\n            bytes[32 * i + j] = item_bytes[j];\\n        }\\n    }\\n\\n    sha256_to_field(bytes)\\n}\\n\\npub fn silo_l2_to_l1_message(\\n    msg: ScopedL2ToL1Message,\\n    rollup_version_id: Field,\\n    chain_id: Field,\\n) -> Field {\\n    if msg.contract_address.is_zero() {\\n        0\\n    } else {\\n        compute_l2_to_l1_hash(\\n            msg.contract_address,\\n            msg.message.recipient,\\n            msg.message.content,\\n            rollup_version_id,\\n            chain_id,\\n        )\\n    }\\n}\\n\\n// Computes sha256 hash of 2 input hashes.\\n//\\n// NB: This method now takes in two 31 byte fields - it assumes that any input\\n// is the result of a sha_to_field hash and => is truncated\\n//\\n// TODO(Jan and David): This is used for the encrypted_log hashes.\\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\\n//\\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\\n    // This is a note about the cpp code, since it takes an array of Fields\\n    // instead of a U128.\\n    // 4 Field elements when converted to bytes will usually\\n    // occupy 4 * 32 = 128 bytes.\\n    // However, this function is making the assumption that each Field\\n    // only occupies 128 bits.\\n    //\\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\\n    // Concatentate two fields into 32x2 = 64 bytes\\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\\n    let mut hash_input_flattened = [0; 64];\\n    for offset in 0..input.len() {\\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n\\n    sha256_to_field(hash_input_flattened)\\n}\\n\\n// Computes the final logs hash for a tx.\\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\\n    let mut hash_input_flattened = [0; N * 32];\\n    for offset in 0..N {\\n        // TODO: This is not checking that the decomposition is smaller than P\\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\\n        for byte_index in 0..32 {\\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\\n        }\\n    }\\n    // Ideally we would push to a slice then hash, but there is no sha_slice\\n    // Hardcode to 256 bytes for now\\n    let mut hash = sha256_to_field(hash_input_flattened);\\n    // Not having a 0 value hash for empty logs causes issues with empty txs\\n    // used for padding. Returning early is currently unsupported.\\n    // We always provide sorted logs here, so 0 being empty means all are empty.\\n    if is_empty(logs[0]) {\\n        hash = 0;\\n    }\\n    hash\\n}\\n\\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\\n    crate::hash::poseidon2_hash(key)\\n}\\n\\n#[inline_always]\\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\\n}\\n\\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\\n    poseidon2_hash(inputs_with_separator)\\n}\\n\\n// Performs a fixed length hash with a subarray of the given input.\\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\\n// Using stdlib poseidon, this will always absorb an extra 1 as a \'variable\' hash, and not match spongeblob.squeeze()\\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\\n#[no_predicates]\\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\\n    sponge.squeeze()\\n}\\n\\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\\n// and absorbing in chunks of 3 below.\\n#[no_predicates]\\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n    // fixed-length and variable-length hashes do not collide)\\n    if in_len != N {\\n        sponge.absorb(1);\\n    }\\n    sponge.squeeze()\\n}\\n\\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\\n// The below code forces the compiler to:\\n//  - absorb normally up to 2 times to set cache_size to 1\\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\\n//  - absorb normally up to 2 times to add any remaining values to the hash\\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\\n\\n#[no_predicates]\\nfn poseidon2_absorb_chunks<let N: u32>(\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n) -> Poseidon2Sponge {\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\\n    // since we cannot isolate computation branches. The below is just to avoid that.\\n    let shift = if in_len == 0 { 0 } else { 1 };\\n    if in_len != 0 {\\n        // cache_size = 0, init absorb\\n        sponge.cache[0] = input[0];\\n        sponge.cache_size = 1;\\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\\n        // max_remainder = (N - 1) % 3;\\n        // max_chunks = (N - 1 - max_remainder) / 3;\\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            variable,\\n            shift,\\n        );\\n    }\\n    sponge\\n}\\n\\n// NB: If it\'s not required to check that the non-absorbed elts of \'input\' are 0s, set skip_0_check=true\\n#[no_predicates]\\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    skip_0_check: bool,\\n) -> Poseidon2Sponge {\\n    let mut sponge = in_sponge;\\n    // \'shift\' is to account for already added inputs\\n    let mut shift = 0;\\n    // \'stop\' is to avoid an underflow when inputting in_len = 0\\n    let mut stop = false;\\n    for i in 0..3 {\\n        if shift == in_len {\\n            stop = true;\\n        }\\n        if (sponge.cache_size != 1) & (!stop) {\\n            sponge.absorb(input[i]);\\n            shift += 1;\\n        }\\n    }\\n    sponge = if stop {\\n        sponge\\n    } else {\\n        // max_chunks = (N - (N % 3)) / 3;\\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\\n            sponge,\\n            input,\\n            in_len,\\n            skip_0_check,\\n            shift,\\n        )\\n    };\\n    sponge\\n}\\n\\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\\n// shift - the num of elts already absorbed to ensure the sponge\'s cache_size = 1\\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\\n// NB: The 0 checks (\'Found non-zero field...\') are messy, but having a separate loop over N to check\\n// for 0s costs 3N gates. Current approach is approx 2N gates.\\n#[no_predicates]\\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\\n    in_sponge: Poseidon2Sponge,\\n    input: [Field; N],\\n    in_len: u32,\\n    variable: bool,\\n    shift: u32,\\n) -> Poseidon2Sponge {\\n    assert(in_len <= N, \\"Given in_len to absorb is larger than the input array len\\");\\n    // When we have an existing sponge, we may have a shift of 0, and the final \'k+2\' below = N\\n    // The below avoids an overflow\\n    let skip_last = 3 * M == N;\\n    // Writing in_sponge: &mut does not compile\\n    let mut sponge = in_sponge;\\n    let mut should_add = true;\\n    // The num of things left over after absorbing in 3s\\n    let remainder = (in_len - shift) % 3;\\n    // The num of chunks of 3 to absorb (maximum M)\\n    let chunks = (in_len - shift - remainder) / 3;\\n    for i in 0..M {\\n        // Now we loop through cache size = 1 -> 3\\n        should_add &= i != chunks;\\n        // This is the index at the start of the chunk (for readability)\\n        let k = 3 * i + shift;\\n        if should_add {\\n            // cache_size = 1, 2 => just assign\\n            sponge.cache[1] = input[k];\\n            sponge.cache[2] = input[k + 1];\\n            // cache_size = 3 => duplex + perm\\n            for j in 0..3 {\\n                sponge.state[j] += sponge.cache[j];\\n            }\\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\\n            sponge.cache[0] = input[k + 2];\\n            // cache_size is now 1 again, repeat loop\\n        } else if (!variable) & (i != chunks) {\\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\\n            // NB: we don\'t check at i == chunks, because that chunk contains elts to be absorbed or checked below\\n            let last_0 = if (i == M - 1) & (skip_last) {\\n                0\\n            } else {\\n                input[k + 2]\\n            };\\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\\n            assert(all_0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    // we have \'remainder\' num of items left to absorb\\n    should_add = true;\\n    // below is to avoid overflows (i.e. if inlen is close to N)\\n    let mut should_check = !variable;\\n    for i in 0..3 {\\n        should_add &= i != remainder;\\n        should_check &= in_len - remainder + i != N;\\n        if should_add {\\n            // we want to absorb the final \'remainder\' items\\n            sponge.absorb(input[in_len - remainder + i]);\\n        } else if should_check {\\n            assert(input[in_len - remainder + i] == 0, \\"Found non-zero field after breakpoint\\");\\n        }\\n    }\\n    sponge\\n}\\n\\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\\nwhere\\n    T: ToField,\\n{\\n    let in_len = inputs.len() + 1;\\n    let iv: Field = (in_len as Field) * TWO_POW_64;\\n    let mut sponge = Poseidon2Sponge::new(iv);\\n    sponge.absorb(separator.to_field());\\n\\n    for i in 0..inputs.len() {\\n        sponge.absorb(inputs[i]);\\n    }\\n\\n    sponge.squeeze()\\n}\\n\\n#[no_predicates]\\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\\n    let mut fields = [0; (N + 30) / 31];\\n    let mut field_index = 0;\\n    let mut current_field = [0; 31];\\n    for i in 0..inputs.len() {\\n        let index = i % 31;\\n        current_field[index] = inputs[i];\\n        if index == 30 {\\n            fields[field_index] = field_from_bytes(current_field, false);\\n            current_field = [0; 31];\\n            field_index += 1;\\n        }\\n    }\\n    if field_index != fields.len() {\\n        fields[field_index] = field_from_bytes(current_field, false);\\n    }\\n    poseidon2_hash(fields)\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\\n    assert(sub_chunk_hash == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_matches_variable() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\\n    assert(variable_chunk_hash == variable_len_hash);\\n}\\n\\n#[test]\\nfn existing_sponge_poseidon_chunks_matches_fixed() {\\n    let in_len = 501;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut fixed_input = [3; 501];\\n    assert(in_len == fixed_input.len()); // sanity check\\n    for i in 0..in_len {\\n        input[i] = 3;\\n    }\\n    // absorb 250 of the 501 things\\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\\n    assert(final_sponge.squeeze() == fixed_len_hash);\\n}\\n\\n#[test]\\nfn poseidon_chunks_empty_inputs() {\\n    let in_len = 0;\\n    let mut input: [Field; 4096] = [0; 4096];\\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\\n    let mut first_sponge =\\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\\n}\\n\\n#[test]\\nfn smoke_sha256_to_field() {\\n    let full_buffer = [\\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\\n    ];\\n    let result = sha256_to_field(full_buffer);\\n\\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\\n\\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\\n    let result_bytes = sha256::digest(full_buffer);\\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\\n    assert(truncated_field == result);\\n    let mod_res = result + (result_bytes[31] as Field);\\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\\n}\\n\\n#[test]\\nfn compute_l2_l1_hash() {\\n    // All zeroes\\n    let hash_result =\\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\\n\\n    // Non-zero case\\n    let hash_result = compute_l2_to_l1_hash(\\n        AztecAddress::from_field(1),\\n        EthAddress::from_field(3),\\n        5,\\n        2,\\n        4,\\n    );\\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\\n}\\n\\n#[test]\\nfn silo_l2_to_l1_message_matches_typescript() {\\n    let version = 4;\\n    let chainId = 5;\\n\\n    let hash = silo_l2_to_l1_message(\\n        ScopedL2ToL1Message {\\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\\n            contract_address: AztecAddress::from_field(3),\\n        },\\n        version,\\n        chainId,\\n    );\\n\\n    // The following value was generated by `l2_to_l1_message.test.ts`\\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\\n\\n    assert_eq(hash, hash_from_typescript);\\n}\\n"},"285":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr","source":"use crate::constants::TWO_POW_64;\\n\\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\\n// has a private absorb() method (it\'s also designed to just be a hasher)\\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\\n\\ncomptime global RATE: u32 = 3;\\n\\npub struct Poseidon2Sponge {\\n    pub cache: [Field; 3],\\n    pub state: [Field; 4],\\n    pub cache_size: u32,\\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\\n}\\n\\nimpl Poseidon2Sponge {\\n    #[no_predicates]\\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\\n    }\\n\\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\\n        let mut result =\\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\\n        result.state[RATE] = iv;\\n        result\\n    }\\n\\n    fn perform_duplex(&mut self) {\\n        // add the cache into sponge state\\n        for i in 0..RATE {\\n            // We effectively zero-pad the cache by only adding to the state\\n            // cache that is less than the specified `cache_size`\\n            if i < self.cache_size {\\n                self.state[i] += self.cache[i];\\n            }\\n        }\\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\\n    }\\n\\n    pub fn absorb(&mut self, input: Field) {\\n        assert(!self.squeeze_mode);\\n        if self.cache_size == RATE {\\n            // If we\'re absorbing, and the cache is full, apply the sponge permutation to compress the cache\\n            self.perform_duplex();\\n            self.cache[0] = input;\\n            self.cache_size = 1;\\n        } else {\\n            // If we\'re absorbing, and the cache is not full, add the input into the cache\\n            self.cache[self.cache_size] = input;\\n            self.cache_size += 1;\\n        }\\n    }\\n\\n    pub fn squeeze(&mut self) -> Field {\\n        assert(!self.squeeze_mode);\\n        // If we\'re in absorb mode, apply sponge permutation to compress the cache.\\n        self.perform_duplex();\\n        self.squeeze_mode = true;\\n\\n        // Pop one item off the top of the permutation and return it.\\n        self.state[0]\\n    }\\n\\n    fn hash_internal<let N: u32>(\\n        input: [Field; N],\\n        in_len: u32,\\n        is_variable_length: bool,\\n    ) -> Field {\\n        let iv: Field = (in_len as Field) * TWO_POW_64;\\n        let mut sponge = Poseidon2Sponge::new(iv);\\n        for i in 0..input.len() {\\n            if i < in_len {\\n                sponge.absorb(input[i]);\\n            }\\n        }\\n\\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\\n        // fixed-length and variable-length hashes do not collide)\\n        if is_variable_length {\\n            sponge.absorb(1);\\n        }\\n        sponge.squeeze()\\n    }\\n}\\n"},"294":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\\n    address::public_keys_hash::PublicKeysHash,\\n    constants::{\\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\\n    },\\n    hash::poseidon2_hash_with_separator,\\n    point::POINT_LENGTH,\\n    traits::{Deserialize, Hash, Serialize},\\n};\\n\\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\\nuse std::default::Default;\\n\\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\\n\\npub struct PublicKeys {\\n    pub npk_m: NpkM,\\n    pub ivpk_m: IvpkM,\\n    pub ovpk_m: OvpkM,\\n    pub tpk_m: TpkM,\\n}\\n\\npub trait ToPoint {\\n    fn to_point(self) -> Point;\\n}\\n\\npub struct NpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for NpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for NpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\\nimpl Hash for NpkM {\\n    fn hash(self) -> Field {\\n        self.inner.hash()\\n    }\\n}\\n\\npub struct IvpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for IvpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for IvpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\npub struct OvpkM {\\n    pub inner: Point,\\n}\\n\\nimpl Hash for OvpkM {\\n    fn hash(self) -> Field {\\n        self.inner.hash()\\n    }\\n}\\n\\nimpl ToPoint for OvpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for OvpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\npub struct TpkM {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for TpkM {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\nimpl Serialize<POINT_LENGTH> for TpkM {\\n    fn serialize(self) -> [Field; POINT_LENGTH] {\\n        self.inner.serialize()\\n    }\\n}\\n\\nimpl Default for PublicKeys {\\n    fn default() -> Self {\\n        PublicKeys {\\n            npk_m: NpkM {\\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\\n            },\\n            ivpk_m: IvpkM {\\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\\n            },\\n            ovpk_m: OvpkM {\\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\\n            },\\n            tpk_m: TpkM {\\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\\n            },\\n        }\\n    }\\n}\\n\\nimpl Eq for PublicKeys {\\n    fn eq(self, other: PublicKeys) -> bool {\\n        (self.npk_m.inner == other.npk_m.inner)\\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\\n            & (self.tpk_m.inner == other.tpk_m.inner)\\n    }\\n}\\n\\nimpl PublicKeys {\\n    pub fn hash(self) -> PublicKeysHash {\\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\\n            self.serialize(),\\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\\n        ))\\n    }\\n}\\n\\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\\n        [\\n            self.npk_m.inner.x,\\n            self.npk_m.inner.y,\\n            self.npk_m.inner.is_infinite as Field,\\n            self.ivpk_m.inner.x,\\n            self.ivpk_m.inner.y,\\n            self.ivpk_m.inner.is_infinite as Field,\\n            self.ovpk_m.inner.x,\\n            self.ovpk_m.inner.y,\\n            self.ovpk_m.inner.is_infinite as Field,\\n            self.tpk_m.inner.x,\\n            self.tpk_m.inner.y,\\n            self.tpk_m.inner.is_infinite as Field,\\n        ]\\n    }\\n}\\n\\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\\n        PublicKeys {\\n            npk_m: NpkM {\\n                inner: Point {\\n                    x: serialized[0],\\n                    y: serialized[1],\\n                    is_infinite: serialized[2] as bool,\\n                },\\n            },\\n            ivpk_m: IvpkM {\\n                inner: Point {\\n                    x: serialized[3],\\n                    y: serialized[4],\\n                    is_infinite: serialized[5] as bool,\\n                },\\n            },\\n            ovpk_m: OvpkM {\\n                inner: Point {\\n                    x: serialized[6],\\n                    y: serialized[7],\\n                    is_infinite: serialized[8] as bool,\\n                },\\n            },\\n            tpk_m: TpkM {\\n                inner: Point {\\n                    x: serialized[9],\\n                    y: serialized[10],\\n                    is_infinite: serialized[11] as bool,\\n                },\\n            },\\n        }\\n    }\\n}\\n\\npub struct AddressPoint {\\n    pub inner: Point,\\n}\\n\\nimpl ToPoint for AddressPoint {\\n    fn to_point(self) -> Point {\\n        self.inner\\n    }\\n}\\n\\n#[test]\\nunconstrained fn compute_public_keys_hash() {\\n    let keys = PublicKeys {\\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\\n    };\\n\\n    let actual = keys.hash();\\n    let expected_public_keys_hash =\\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\\n\\n    assert(actual.to_field() == expected_public_keys_hash);\\n}\\n\\n#[test]\\nunconstrained fn compute_default_hash() {\\n    let keys = PublicKeys::default();\\n\\n    let actual = keys.hash();\\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\\n\\n    assert(actual.to_field() == test_data_default_hash);\\n}\\n\\n#[test]\\nunconstrained fn test_public_keys_serialization() {\\n    let keys = PublicKeys {\\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\\n    };\\n\\n    let serialized = keys.serialize();\\n    let deserialized = PublicKeys::deserialize(serialized);\\n\\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\\n}\\n"},"334":{"path":"/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\\n    data: [Field; N],\\n    offset: u32,\\n}\\n\\nimpl<let N: u32> Reader<N> {\\n    pub fn new(data: [Field; N]) -> Self {\\n        Self { data, offset: 0 }\\n    }\\n\\n    pub fn read(&mut self) -> Field {\\n        let result = self.data[self.offset];\\n        self.offset += 1;\\n        result\\n    }\\n\\n    pub fn read_u32(&mut self) -> u32 {\\n        self.read() as u32\\n    }\\n\\n    pub fn read_bool(&mut self) -> bool {\\n        self.read() as bool\\n    }\\n\\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\\n        let mut result = [0; K];\\n        for i in 0..K {\\n            result[i] = self.data[self.offset + i];\\n        }\\n        self.offset += K;\\n        result\\n    }\\n\\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\\n        let result = deserialise(self.read_array());\\n        result\\n    }\\n\\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\\n        &mut self,\\n        deserialise: fn([Field; K]) -> T,\\n        mut result: [T; C],\\n    ) -> [T; C] {\\n        for i in 0..C {\\n            result[i] = self.read_struct(deserialise);\\n        }\\n        result\\n    }\\n\\n    pub fn finish(self) {\\n        assert(self.offset == self.data.len(), \\"Reader did not read all data\\");\\n    }\\n}\\n"},"346":{"path":"/root/nargo/github.com/noir-lang/schnorr/v0.1.1/src/lib.nr","source":"use std::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\\nuse std::hash::{blake2s, pedersen_hash};\\n\\npub fn verify_signature<let N: u32>(\\n    public_key: EmbeddedCurvePoint,\\n    signature: [u8; 64],\\n    message: [u8; N],\\n) -> bool {\\n    //scalar lo/hi from bytes\\n    let sig_s = scalar_from_bytes(signature, 0);\\n    let sig_e = scalar_from_bytes(signature, 32);\\n    // pub_key is on Grumpkin curve\\n    let mut is_ok = (public_key.y * public_key.y == public_key.x * public_key.x * public_key.x - 17)\\n        & (!public_key.is_infinite);\\n\\n    if ((sig_s.lo != 0) | (sig_s.hi != 0)) & ((sig_e.lo != 0) | (sig_e.hi != 0)) {\\n        let (r_is_infinite, result) =\\n            calculate_signature_challenge(public_key, sig_s, sig_e, message);\\n\\n        is_ok &= !r_is_infinite;\\n        for i in 0..32 {\\n            is_ok &= result[i] == signature[32 + i];\\n        }\\n    } else {\\n        is_ok = false;\\n    }\\n    is_ok\\n}\\n\\npub fn assert_valid_signature<let N: u32>(\\n    public_key: EmbeddedCurvePoint,\\n    signature: [u8; 64],\\n    message: [u8; N],\\n) {\\n    //scalar lo/hi from bytes\\n    let sig_s = scalar_from_bytes(signature, 0);\\n    let sig_e = scalar_from_bytes(signature, 32);\\n\\n    // assert pub_key is on Grumpkin curve\\n    assert(public_key.y * public_key.y == public_key.x * public_key.x * public_key.x - 17);\\n    assert(public_key.is_infinite == false);\\n    // assert signature is not null\\n    assert((sig_s.lo != 0) | (sig_s.hi != 0));\\n    assert((sig_e.lo != 0) | (sig_e.hi != 0));\\n\\n    let (r_is_infinite, result) = calculate_signature_challenge(public_key, sig_s, sig_e, message);\\n\\n    assert(!r_is_infinite);\\n    for i in 0..32 {\\n        assert(result[i] == signature[32 + i]);\\n    }\\n}\\n\\nfn calculate_signature_challenge<let N: u32>(\\n    public_key: EmbeddedCurvePoint,\\n    sig_s: EmbeddedCurveScalar,\\n    sig_e: EmbeddedCurveScalar,\\n    message: [u8; N],\\n) -> (bool, [u8; 32]) {\\n    let g1 = EmbeddedCurvePoint {\\n        x: 1,\\n        y: 17631683881184975370165255887551781615748388533673675138860,\\n        is_infinite: false,\\n    };\\n    let r = multi_scalar_mul([g1, public_key], [sig_s, sig_e]);\\n    // compare the _hashes_ rather than field elements modulo r\\n    let pedersen_hash = pedersen_hash([r.x, public_key.x, public_key.y]);\\n    let pde: [u8; 32] = pedersen_hash.to_be_bytes();\\n\\n    let mut hash_input = [0; N + 32];\\n    for i in 0..32 {\\n        hash_input[i] = pde[i];\\n    }\\n    for i in 0..N {\\n        hash_input[32 + i] = message[i];\\n    }\\n\\n    let result = blake2s(hash_input);\\n    (r.is_infinite, result)\\n}\\n\\n//Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\\nfn scalar_from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\\n    let mut v: Field = 1;\\n    let mut lo: Field = 0;\\n    let mut hi: Field = 0;\\n    for i in 0..16 {\\n        lo = lo + (bytes[offset + 31 - i] as Field) * v;\\n        hi = hi + (bytes[offset + 15 - i] as Field) * v;\\n        v = v * 256;\\n    }\\n    let sig_s = EmbeddedCurveScalar::new(lo, hi);\\n    sig_s\\n}\\n\\nmod test {\\n    use std::embedded_curve_ops::EmbeddedCurvePoint;\\n\\n    use super::verify_signature;\\n\\n    #[test]\\n    fn test_zero_signature() {\\n        let public_key: EmbeddedCurvePoint = EmbeddedCurvePoint {\\n            x: 1,\\n            y: 17631683881184975370165255887551781615748388533673675138860,\\n            is_infinite: false,\\n        };\\n        let signature: [u8; 64] = [0; 64];\\n        let message: [u8; _] = [2; 64]; // every message\\n        let verified = verify_signature(public_key, signature, message);\\n        assert(!verified);\\n    }\\n\\n    #[test]\\n    fn smoke_test() {\\n        let message: [u8; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\\n        let pub_key_x: Field = 0x04b260954662e97f00cab9adb773a259097f7a274b83b113532bce27fa3fb96a;\\n        let pub_key_y: Field = 0x2fd51571db6c08666b0edfbfbc57d432068bccd0110a39b166ab243da0037197;\\n        let signature: [u8; 64] = [\\n            1, 13, 119, 112, 212, 39, 233, 41, 84, 235, 255, 93, 245, 172, 186, 83, 157, 253, 76,\\n            77, 33, 128, 178, 15, 214, 67, 105, 107, 177, 234, 77, 48, 27, 237, 155, 84, 39, 84,\\n            247, 27, 22, 8, 176, 230, 24, 115, 145, 220, 254, 122, 135, 179, 171, 4, 214, 202, 64,\\n            199, 19, 84, 239, 138, 124, 12,\\n        ];\\n\\n        let pub_key = EmbeddedCurvePoint { x: pub_key_x, y: pub_key_y, is_infinite: false };\\n        let valid_signature = verify_signature(pub_key, signature, message);\\n        assert(valid_signature);\\n        super::assert_valid_signature(pub_key, signature, message);\\n    }\\n\\n}\\n\\nmod bench {\\n    use super::{assert_valid_signature, verify_signature};\\n    use std::embedded_curve_ops::EmbeddedCurvePoint;\\n\\n    #[export]\\n    pub fn bench_verify_signature(\\n        public_key: EmbeddedCurvePoint,\\n        signature: [u8; 64],\\n        message: [u8; 32],\\n    ) -> bool {\\n        verify_signature(public_key, signature, message)\\n    }\\n\\n    #[export]\\n    pub fn bench_assert_valid_signature(\\n        public_key: EmbeddedCurvePoint,\\n        signature: [u8; 64],\\n        message: [u8; 32],\\n    ) {\\n        assert_valid_signature(public_key, signature, message)\\n    }\\n}\\n"}}}'));class sA extends Fy{constructor(e){super(nA),this.encryptionPrivateKey=e}getDeploymentArgs(){return Promise.resolve(void 0)}getAuthWitnessProvider(e){return new iA(this.encryptionPrivateKey,e)}}class iA{constructor(e,t){this.privateKey=e,this.account=t}async createAuthWit(e){const t=new pm,n=await t.constructSignature(e.toBuffer(),this.privateKey),s=[...this.account.publicKeys.toFields(),...n.toBuffer(),this.account.partialAddress];return Promise.resolve(new $_(e,s))}}function rA(e,t,n){const s=Gd(t);return My.create(e,t,new sA(s),n)}const aA=[si.fromHexString("2153536ff6628eee01cf4024889ff977a18d9fa61d0e414422f7681cf085c281"),si.fromHexString("aebd1b4be76efa44f5ee655c20bf9ea60f7ae44b9a7fd1fd9f189c7a0b0cdae"),si.fromHexString("0f6addf0da06c33293df974a565b03d1ab096090d907d98055a8b7f4954e120c")],oA=aA.map((e=>Gd(e))),lA=[si.ZERO,si.ZERO,si.ZERO];async function cA(e){const t=await e.getRegisteredAccounts(),n=await Promise.all(aA.map((async e=>{const t=Gd(e);return{sk:e,pk:await ky(t)}})));return Promise.all(n.filter((e=>null!=t.find((t=>t.publicKeys.masterIncomingViewingPublicKey.equals(e.pk))))).map((async t=>{const n=(s=t.sk,fl([s,Ri.IVSK_M]));var s;return(await tA(e,t.sk,n,si.ZERO)).getWallet()})))}})();var a=r.wC,o=r.hp,l=r.QM,c=r.NZ,d=r.pF,u=r.Fr,f=r.cY,h=r._5,p=r.b$,m=r.dP,g=r.dB,_=r.cg,b=r.RQ,y=r.BJ,A=r.ZI;export{a as AztecAddress,o as Buffer,l as CompleteAddress,c as Contract,d as DeployMethod,u as Fr,f as INITIAL_TEST_ACCOUNT_SALTS,h as INITIAL_TEST_SECRET_KEYS,p as INITIAL_TEST_SIGNING_KEYS,m as contractArtifactFromBuffer,g as createPXEClient,_ as generatePublicKey,b as getDeployedTestAccountsWallets,y as getSchnorrAccount,A as getUnsafeSchnorrAccount};