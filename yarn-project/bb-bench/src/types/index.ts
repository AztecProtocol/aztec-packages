/* Autogenerated file, do not edit! */

/* eslint-disable */
import { CompiledCircuit, ForeignCallHandler, InputMap, Noir } from '@noir-lang/noir_js';

export { ForeignCallHandler } from '@noir-lang/noir_js';

export type FixedLengthArray<T, L extends number> = L extends 0 ? never[] : T[] & { length: L };
export type Field = string;

export type FirstInputType = {
  x: Field;
  y: Field;
};

export async function First(
  x: Field,
  y: Field,
  First_circuit: CompiledCircuit,
  foreignCallHandler?: ForeignCallHandler,
): Promise<null> {
  const program = new Noir(First_circuit);
  const args: InputMap = { x, y };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as null;
}
export type SecondInputType = {
  verification_key: FixedLengthArray<Field, 128>;
  proof: FixedLengthArray<Field, 459>;
  public_inputs: FixedLengthArray<Field, 1>;
  key_hash: Field;
};

export async function Second(
  verification_key: FixedLengthArray<Field, 128>,
  proof: FixedLengthArray<Field, 459>,
  public_inputs: FixedLengthArray<Field, 1>,
  key_hash: Field,
  Second_circuit: CompiledCircuit,
  foreignCallHandler?: ForeignCallHandler,
): Promise<null> {
  const program = new Noir(Second_circuit);
  const args: InputMap = { verification_key, proof, public_inputs, key_hash };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as null;
}
