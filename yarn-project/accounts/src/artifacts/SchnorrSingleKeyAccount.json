{"transpiled":true,"noir_version":"0.30.0+48d9df4ff227c08a6e66f21c0286bc6349151671","name":"SchnorrSingleKeyAccount","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+2b227aQBCG18RJTJ24YGMMgQQIyUXvDA2nO16mfe3eV+orVM2YnTJsp2hRx1tWYqWIsb2e/5t/D1jICdSuRe9/gY6v9eeN+rNhn63+LP+tzQRzlXVyBp5wNjzhvPKEMxTkDBhO+Ax1DOsO1tytOlyPv9tWqChTlELBBLoi19URwIMboUU6oBfHUuDrcnNDklNwpcFDfQ0/ASfW1yhYrIus+pBzWGiDnEOdK3IOd0bUibQpwvUuoj2yXN73CQA1NHUu5I5JTK8NiXVhTTVey9f4VsuYlLtVjGNyrXPfkmP0Cj0U/OaYUe1A/zWJptJjhPGA9MV+6EeDjDG0e7Wf180j94XGfQnpc8PUPxau/9bgMecsjEFLx204xj2BsH0g9W1l2ErIG8vnndExCHVu5I9JTYm43/M15L9Th838VhqTOCE89+I85ayeOndj95Gwy+RdvIFXLcOrO8OrhPShDK0a/AuILubG4xajLefFcg3abQsv2gxP27EXbUZb0IsNaKcWXqQMT+rYi5TRlvNi9Rm0MwsvMoYnc+xFxmjLeTGvni06Fl50GJ6OYy86jLbgGqnmRW7hRc7w5I69yBltQS++gnbXwosuw9N17EWX0Rb04gtoFxZeFAxP4diLgtEW3Dur54uehRc9hqfn2Iseoy3oxRy0+xZe9BmevmMv+oy24BqptB8svHhgeB4ce4F6pzJ3PGQuPGTOzoA5MmIZ7WW1fw4svBgwPAPHXtDfck5hzs+AOTJiGe3lArSHFl4MGZ6hYy9Q71Tm1EPmzEPmrofMuYfMhYfM5zCfIyOW0V5Ve+ijhRePDM+jYy9Q71Tm1EPmgYfM2RkwR0Yso72qfpt7svDiieF5cuwF6p3K3POQuX0GzJERy2ivlqA9svBixPCMHHuBeqcy9z1kLjxkHnjInHnI3PWQOfeQ+bIG3TCnZ8AM773gOzA/auWZb2KDBz1TBqMyGGMSJ4QR+26V3PsqiVE7ak3E/diNjzlf8HhSq/Z8DXmn8jVVz/IvOhe+wzdlanrVcSDs5wvJGxAdPB+S+Dvpi/3QD1y3yA7vXD3r+PXIfSPjvoT0eWbqHwvXPzV4pgYzjMk3wlHH3LKZ1y21X8ufCE8N++AbfScXm82+Q/cYQZ5ZTXWW9B2+n0p2TU8Mr5qGVwnpQ/fo/7VvXpgvzH9jps8TTXKO8uC5hlEL/f+GCcnxC57ToyHuNQAA","debug_symbols":"ndpRattAGIXRveg5FN/f0owmWymlOIlTDMEJsVMoJnuv3dIF9LxpJN237+kwl+lp//Dx4/vh+Px6mu6/XqaX18fd+fB6vJ4u0+ZLrX/ent52x9uL03n3fp7ut73upv3x6fbUP++m58PL/vrcxue3u9towGi7kVFkVDLaymiW0SKjJqMuIyliK0XMUsQsRcxSxCxFzFLELEXMUsQsRcxSxCxFLFLEIkUsUsQiRSxSxCJFLFLEIkUsUsQiRTQpokkRTYpoUkSTIpoU0aSIJkU0KaJJEV2K6FJElyK6FNGliC5FdCmiSxFdiuhSxCpFrFLEKkWsUsQqRaxSxCpFrFLEKkWsUsSQIoYUMaSIIUUMKWJIEUOKGFLEkCKGFJHNhlahVdFqS6uZVgutGq06rVZaURuhNkJthNoItRFqI9RGqI1QG6E2Qm0UtVHURlEbRW0UtVHURlEbRW0QaIZEM0SaIdMMoWZINUOsGXLNEGyGZDNEmyHbDOFmSDdDvBnyzRBwhoQzRJwh4wwhZ0g5Q8wZcs4QdIakM0SdIesMYWdIO0PcGfLOEHiGxDNEniHzDKFnSD1D7BlyzxB8huQzRJ8h+wzhZ0g/Q/wZ8s8QgIYENESgIQMNIWhIQUMMGnLQEISGJDREoSELDWFoSENDHBry0BCIhkQ0RKIhEw2haEhFQywactEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRsoue5KJFLlrkokUuWuSiRS5a5KL13y56Pf3cvR92Dy/7293e28eP4+O/q77X4/nX298v139/Aw=="},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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M27pBbf0ilt6wy29w5Zecbtpxe2mFbebVtxueumtU8ql43bTittNK243rbjdtOJ204bbTRtuN2243bThdtNLb7xRLh23mzbcbtpwu2nD7aYNt5t23G7acbtpx+2mHbebXkr6Vy4dt5t23G7acbtpx+2mHbabpgW2m6YFtpumBbabpgW2m6YFtpumBbabpgW2m6YFtpumBbabpgW3mwbcbhpwu2nA7aYBt5teSlJVLh23mwbcbhpwu2nA7aYBt5tG3G4acbtpxO2mEbebXkr+Uy4dt5tG3G4acbtpxO2mEbebJtxumnC7acLtpgm3m17KiFMuHbebJtxumnC7acLtpgm3mwpuNxXcbiq43VRwu+mlNDHl0nG7qeB2U8HtpoLbTQW3m2bcbppxu2nG7aYZt5teyp1SLh23m2bcbppxu2nG7aYZt5vispASLgsp4bKQEi4LKeGykBIuCynhspASLgsp4bKQEi4LKeGykBIuCynhspASLgsp4bKQEi4LKeGykBIuCynhspASLgsp4bKQEi4LKeGykBIuCynhspASLgsp4bKQEi4LKeGykBIuCynhspASLgsp4bKQEi4LKeGykBIuCynhspASLgsp4bKQEi4LSXBZSILLQhJcFpLgspBkge2mgstCElwWkuCykASXhSS4LCTBZSEJLgtJcFlIgstCElwWkuCykASXhSS4LCTBZSEJLgtJcFlIgstCElwWkuCykASXhSS4LCTBZSEJLgtJcFlIgstCElwWkuCykASXhSSWWUi911vpfXlRuuFuule64W66V7rhbrpXuuFuule64W66V7rhbrpTumUW0l7pdrtpX3rZSg+1PZVut5vulm63m+6Wbreb7pZut5v2+PA1TVGeSrfbTXdLt9tNe++3d47Lkp43R7vddLd0u910r3S7LKS13HwvPSzpqXSz3XS/dLPddL90s910v3Sz3XS/dLPddL90s910v3Sz3XQtN8Z76eW5dLPddL90s910t3S7LKS4xNq30pPUp9INd9O0HZfGZf0h4Kl0w910r3TD3XSvdLvdNCySbq8O4eHlt9LtdtPd0u120xDytsOE+OM1f5Rut5vulm63m+6WbrebhnrvpqGm37rpi5enVrf3/vHpv14cf+S256JzDFvV7e5KTP2fttjlLI215coUEFooW4dpdccWWX8p3YT2+HSScSnDSbn0hFu64JaecUsvuKVX3NIbbukdtvRLGU7KpeN209cMp+XXf7LslC0p3WqRVOPTm6cz31zOfHPcJ25xSUWCSyqShtszGm7P6Lg9o+P2jI47gXXcCcwuqWjoScZrlJBSDHgN+9F6c9w/0sDF8eTFcMvoNdx3gBY/f41qv/07DOvv29trQ6k/dV7aX2q8LVGoeUdnKGFboZLu6xnbrxWKsJUn2MrF7rciSby3i9KfvtCGj/dyv3+hS+qfv9BJ0q3m9Xf7h290qi+//rcm2pb7G4fWfppi+OBwnCmGjyTHmWJ4cB1niuGReJgpwXByGmeK4TF+nCmGDwjGmWL46GGcKeKmPJsyTaLN9TZ1pBL6nil1MyXci45leVXI0raqw8MzizEsX7d7mqyMYfc0KRzD7mnyPYbd00wOEHbHaWYSDLunmXYw7J5mjsKwe5oJDcNucbuvtNunyl2715/JNrsffn/9Yfc/LfRJ8dsW+vT3bQt9ovu2hT6lfdfC5JPXty30aerbFvqE9G0Lfer5toXiFn7XQp9Odi1cR8BbHfHhIevNQp9Ovm2hTyffttCnk29b6NPJdy0Un06+baFPJ9+20KeTb1vo08m3LRS38LsW+nSyb2HZ/kovtvZsoU8n37bQp5NvW+jTybct9OnkuxZmn06+baFPJ9+20KeTb1vo08m3LRS38LsWGp5OimzUYmll+WxhLLXcoBar5uVPZErOhocIZaWGs76yUsORXFmp4eT8RaUtPih9ZnIUwwFXWanhHKqs1HBcVFZqONUpKxUapfNkpD2l82Sk1rb8XfoLpfNkpD2l82SkPaUTZaTPSutEGWlH6UQZaUfpRBlpR+k8GanfcbR1ie1JqdAonScj7SmdJiPVkLd75GqM4UnpNBmpxrS9vKanS1yz5VtblJVOk5H2lFq+E0ZZ6TQZqfZw33t7lyel02SkXaXTZKS2pK3LtPB0R2xu02SkXaXTZKRdpbB3z+UGe/dctnyP0JeuJ2j99mt4f7iz4cftBC/qiGmj08f++AO3vBL4+UaQbPk+oy9Z2NO9jL5jYVvyrY4WkjxYGP/CQsv3KmlekmH5Eqa+XR7zQ2f6rDNvq7+ezGwvlZ8iDQcuPZGGs5aeSGEQaThh6Yk0HK6+JLIstxGoPETIXyINxzA9kZYDm5pIy5FKSWQxfTOYmshZEs9HkbMkno8iZ0k8H0UKg8hZEs9HkQSJp1i+YUxPJEHiKZZvAFMTaflGLz2RDInH8o1beiIZEo/lG7H0RDIkHsv3SumJZEg8lu9Q0hPJkHgs3xekJ5Ih8Vi+G0dPJEPisXwPjJ5IhsRj+X4UPZEMicfyHSN6IhkSj+V7OvREMiQey3dd6IlkSDyW74vQE8mQeCzfuaAnkiHxWL63QE/klYknBrk/6v7wDPhLkaHVsj0D3nr788H4cinRX7n0gFt6xC094ZYuuKVn3NILbukVt/SGWzpuN8243TTjdtOM200zbje9lDCsXDpuN8243TTjdtOM200zbjctuN204HbTgttNC243vRQZq1w6bjctuN204HbTgttNC243rbjdtOJ204rbTStuN70ULqpcOm43rbjdtOJ204rbTStuN2243bThdtOG200bbje9FEOpXDpuN2243bThdtOG200bbjftuN2043bTjttNO243vZQ2qFw6bjftuN2043bTjttNO2w3rQtsN60LbDetC2w3rQtsN60LbDetC2w3rQtsN60LbDetC2w3rQtuNw243TTgdtOA200Dbje9lJKmXDpuNw243TTgdtOA200DbjeNuN004nbTiNtNI243vZTApVw6bjeNuN004nbTiNtNI243TbjdNOF204TbTRNuN72U7qRcOm43TbjdNOF204TbTXFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSBWXhVRxWUgVl4VUcVlIFZeFVHFZSA2XhdRwWUgNl4XUcFlIbYHtpg2XhdRwWUgNl4XUcFlIDZeF1HBZSA2XhdQss5B6r7fS+/KidMPddK90w910r3TD3XSvdMPddK90w910r3TD3XSvdMPddKd0wyykvvSylR5qeyrdbjfdLd1uN90t3W433S3dbjft8eFrmqI8lW63m+6Wbreb9t5v7xyXJT1vjna76W7pdrvpbulmu+labr6XHpb0Z+l2WUj7pZvtpvulm+2m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AbrXBuheG6F7bYTutRG610boXnsx0Vi7euheG6F7bYTutRG610boXpuge22C7rUJutcm6F57MftWu3roXpuge22C7rUJutcm6F4r0L1WoHutQPdage61F1NStauH7rUC3WsFutcKdK8V6F6boXtthu61GbrXZuheezF+U7t66F6boXtthu61GbrXZuheW6B7bYHutQW61xboXnsxRVG7euheW6B7bYHutQW61xboXluhe22F7rUVutdW6F57MaFPu3roXluhe22F7rUVutdW6F7boHttg+61DbrXNuheezH9Tbt66F7boHttg+61DbrXNuhe26F7bYfutR2613boXnsxWUy7euhe26F7bYfutR2613bkXpsX5F6bF+RemxfkXpsX5F6bF+RemxfkXpsX5F6boblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblRGZoblaG5URmaG5WhuVEZmhuVoblR2TY3qvd6e+u+vKredK/drd50r92t3nSv3a3edK/drd50r92t3nSv3a3edK/drd5yr+1LL1v1obbn6i332t3qTXOj9qu33Gv3q7fca3t8+Nau/+Vz9ZZ77X71lntt73179bKk5x3TNDdqv3rLvXa/esO9dq0436sPS3qu3nCvPVC94V67W32xzI06UL3hXnugesO99kD1hnvtgeoN99q14hjv1ZcX1RvutQeqN9xrD1RvutfG2rfqk9Tn6k332rSdwsZFYn+u3nSv3aveMjfqQPWWe21YJN1eHUJcnqu33Gv3q7fca8OagbfqY87P1VvutfvVW+61+9Vb7rWh3nttqOm3Xvvqvdvt/CTKj0//9eK4vHrznuOt7L7+DnB/deq/nLHcx8c6YzkjhJKXzZkWdpzJ+Xbcmev9pfJLp+U0oajTMkNLVafphKKo03SWUdRpOvV8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dPXQvbZB99oO3Ws7dK/t0L22Q/fai1HD2tVD99oO3Ws7dK/t0L22I/fauCD32rgg99q4IPfauCD32rgg99q4IPfauCD32rgg99q4IPfauED32gDdawN0rw3QvTZA99qLuaXa1UP32gDdawN0rw3QvTZA99oI3WsjdK+N0L02Qvfai5mY2tVD99oI3WsjdK+N0L02QvfaBN1rE3SvTdC9NkH32ot5i9rVQ/faBN1rE3SvTdC9NkH3WoHutQLdawW61wp0r72Y5addPXSvFeheK9C9VqB7rUD32gzdazN0r83QvTZD99qLOXHa1UP32gzdazN0r83QvTZD99oC3WsLdK8t0L22QPfaixlk2tVD99oC3WsLdK8t0L22QPfaCt1rK3SvrdC9tkL32ov5VtrVQ/faCt1rK3SvheZGRWhuVITmRkVoblSE5kZFaG5UhOZGRWhuVITmRkVoblSE5kZFaG5UhOZGRWhuVITmRkVoblSE5kZFaG5UhOZGRWhuVITmRkVoblSC5kYlaG5UguZGJWhuVFqQe22C5kYlaG5UguZGJWhuVILmRiVoblSC5kYlaG5UguZGJWhuVILmRiVoblSC5kYlaG5UguZGJWhuVILmRiVoblSC5kYlaG5UguZGJWhuVILmRiVoblSC5kYlaG5UguZGJWhuVILmRiVoblSC5kYlaG5UguZGJWhuVILmRiVoblSC5kYlaG5UguZGJWhuVILmRiVoblSC5kYlaG5UguZGJWhuVLLNjeq93t66L6+qN91rd6s33Wt3qzfda3erN91rd6s33Wt3qzfda3erN91rd6u33Gv70stWfajtqXrT3Kj96i332v3qLffa/eot99oeH76163/5XL3lXrtfveVe23vfXr0s6XnHNM2N2q/ecq/dr95wr10rzvfqw5Keqzfca/ert8yNOlC94V57oHrDvfZA9YZ77YHqDffaA9Ub7rVrxTHeqy8vqjfcaw9Ub7jXHqjedK+NtW/Vr4f1z9Wb7rVpO4WNi8T+VL1lbtSB6k332t3qLffasEi6vTqEuDxXb7nX7ldvudeGkLc9J8Scn6u33Gv3q7fca/ert9xrQ7332lDTb7321Xu32/lJlB+f/uvFcXn15j3HW9k9t7sxMfVfzlju42OdsZwRQsnL5kwLO87kfDvuzPX+Uvmp0zIZS1Wn5dyhqdN0QlHUaTrL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raiTJA/ZBm8r6iTJQ7Zx24o6SfKQbci2ok6SPHQxWjumeKMtxdzLZ52h1bJBq1pvTzCvfjErW7n6i+HX2tUH6OojdPUJunqBrj5DV1+gq6/Q1UP32grdaxt0r23QvbZB99oG3WsvRg1rVw/daxt0r23QvbZB99oG3Ws7dK/t0L22Q/faDt1rL2bLalcP3Ws7dK/t0L22Q/faDtxr07IA99q1euBeu1YP3GvX6oF77Vo9cK9dqwfutWv1wL12rR64167VA/fatXroXhuge22A7rUButcG6F57MRNTu3roXhuge22A7rUButcG6F4boXtthO61EbrXRuheezFvUbt66F4boXtthO61EbrXRuhem6B7bYLutQm61yboXnsxy0+7euhem6B7bYLutQm61yboXivQvVage61A91qB7rUXc+K0q4futQLdawW61wp0rxXoXpuhe22G7rUZutdm6F57MYNMu3roXpuhe22G7rUZutdm6F5boHttge61BbrXFuheezHfSrt66F5boHttge61yNyotXroXovMjVqrh+61yNyotXroXovMjVqrh+61yNyotXroXovMjVqrh+61yNyotXroXovMjVqrh+61yNyotXroXovMjVqrh+61yNyotXroXovMjVqrh+61yNyotXroXovMjVqrh+61yNyotXroXovMjVqrR+61AZobFaC5UQGaGxWguVFhQe61AZobFaC5UQGaGxWguVEBmhsVoLlRAZobFaC5UQGaGxWguVEBmhsVoLlRAZobFaC5UQGaGxWguVEBmhsVoLlRAZobFaC5UQGaGxWguVEBmhsVoLlRAZobFaC5UQGaGxWguVEBmhsVoLlRAZobFaC5UQGaGxWguVEBmhsVoLlRwTY3qvd6e+u+vKredK/drd50r92t3nSv3a3edK/drd50r92t3nSv3a3edK/drd5yr+1LL1v1oban6k1zo/art9xr96u33Gv3q7fca3t8+Nau/+Vz9ZZ77X71lntt73179bKk5x3TNDdqv3rLvXa/esO9dq0436sPS3qu3nCv3a/eMjfqQPWGe+2B6g332gPVG+61B6o33GsPVG+4164Vx3ivvryo3nCvPVC94V57oHrTvTbWvlWfpD5Xb7rXpu0UNi4S+1P1lrlRB6o33Wt3q7fca8Mi6fbqEOLyXL3lXrtfveVeG9YAv1Ufc36u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+2pg/eD9V8D7r4D3XwHvvwLefzN4/83g/TeD998M3n912FcD6wfvvxm8/2bw/pvB+28G778FvP8W8P5bwPtvAe+/OvyqgfWD998C3n8LeP8t4P23gPffCt5/K3j/reD9t4L3Xx2m1MD6wftvBe+/Fbz/VvD+W8H7Lzj/SsD5VwLOvxJw/pWA868EnH8l4PwrAedfCTj/SsD5VwLOvxJw/pWA868EnH8l4PwrAedfCTj/SsD5VwLOvxJw/lUG519lcP5VBudfZXD+VV6w+28G519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnX2Vw/lUG519lcP5VBudfZXD+VQbnXxVw/lUB518VcP5VAedflQW7/xZw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQHnXxVw/lUB518VcP5VAedfFXD+VQXnX1Vw/lUF519VcP5VXbD7bwXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfVXD+VQXnX1Vw/lUF519VcP5VBedfNXD+VQPnXzVw/lUD51+1Bbv/NnD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VA+dfNXD+VQPnXzVw/lUD5181cP5VB+dfdXD+VQfnX3Vw/lVfsPtvB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+dfdXD+VQfnX3Vw/lUH5191cP5VB+df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W4LO2BJ0xpagM7YEnbEl6IwtQWdsCTpjS9AZW4LO2BJ0xpagM7YEnbEl6IwtQWdsCTpjS9AZW4LO2BJ0xpagM7YEnbEl6IwtQWdsCTpjS9AZW4LO2BJ0xpagM7YEnbEl6IwtQWdsCTpjK6MztjI6YyujM7YyOmMrL+CdOKMztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2MjpjK6MztjI6YyujM7YyOmMrozO2Cjpjq6Aztgo6Y6ugM7bKAt6JCzpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOroDO2Cjpjq6Aztgo6Y6ugM7YKOmOrojO2Kjpjq6Iztio6Y6su4J24ojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YqOmOrojO2Kjpjq6Iztio6Y6uiM7YaOmOroTO2Gjpjq6EzttoC3okbOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6uhM7YaOmOroTO2Gjpjq6Eztho6Y6ujM7Y6OmOrozO2Ojpjqy/gnbijM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6ujM7Y6OmOrozO2Ojpjq6Mztjo6Y6uj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cQqzulyuVGWcwKwulytVGacvq8vlSlXGycvqcrlSlXHqsrpcrlRlnLisLpcrVRmnLavL5UpVxknL6nK5UpVxyrK6XK5UZZywrC6XK1UZpyury+VKVcbJyupyuVKVcaqyulyuVGWcqKwulytVGacpq8vlSlXGScrqcrlSVeZKVcYp2dpyjVOy1eVyparClaqMM9DV5QqXXK5UZZyBri6XK1UZZ6Cry+VKVcYZ6OpyuVKVcQa6ulyuVGWcga4ulytVGeelq8vlSlVcbPXIxVaPXGz1yMVWj1xs9cjFVo9cbPXIxVaPXGz1yMVWj1xs9cjFVo9cbPXIxVaPXGz1yMVWj1xs9cjFVo9cbPXIxVaPXGz1yMVWT1xs9cTFVk9cbPXExVZPi3DJpUpViYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OqJi62euNjqiYutnrjY6omLrZ642OrCxVYXLra6cLHVhYutLotwyaVKVcLFVhcutrpwsdWFi60uXGx14WKrCxdbXbjY6sLFVhcutrpwsdWFi60uXGx14WKrCxdbXbjY6sLFVhcutrpwsdWFi60uXGx14WKrCxdbXbjY6sLFVhcutrpwsdWFi60uXGx14WKrCxdbXbjY6sLFVhcutrpwsdWFi60uXGx14WKrCxdbXbjY6sLFVhcutrpwsdWFi60uXGx14WKrCxdbXbjY6jITjrrXeHtxTW/kTtSIDsidCVjcW7u9uNc3cifaqo7InWirOiJXuORONAAekTvRAHhE7kx994DcmfruAbkTDYAH5M4ELD4ilytVzQQsPiIXNlXdJQi+BNvpp8Z+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4ZNMl74SH+s+8bHuEx/rPvGx7hMf6z7xse4TH+s+8bHuEx/rPvGx7hMf6z7xse4TH+s+8bHuEx/rPlli3d+LMpSP7kUZSjD3osRiUYZSwL0oQ336XpShTnovylCvuxdlqBttRVmic9+LsrijWyJc34uyuKNbokTfi7K4o1siLd+LsrijW6IV34uyuKNbIv7ei7K4o1ui5t6LsrijWyLP3ouyuKNborfei7K4o1sioN6LsrijW6KI3ouyuKNbInHei7K4o1uiWd6LOnlHv39QueqD6lUf1K76oH7RB51N77t/ULjqg+JVH5Su+iC56oOu2hnKVTtDuWpnKFftDOWqnaFetTPUq3aGetXOUK/aGepVO0O9ameoV+0M9aqdoV61M9SrdoZ21c7QrtoZ2lU7Q7tqZ2hX7Qztqp2hXbUztKt2hnbVztCu2hn6VTtDv2pn6FftDP2qnaFftTP0q3aGftXO0K/aGfpVO0O/aGcQlb8WjVW2D2r9tw/6u6faROUvOk8oK9osK9ksS2yWlW2WVWyWVW2W1WyW1U2WFWzu8sHmLh9s7vLB5i4fbO7yweYuH2zu8sHmLh9s7vLB5i4fbe7y0eYuH23u8tHmLh9t7vLR5i4fbe7y0eYuH23u8tHmLp9s7vLJ5i6fbO7yyeYun2zu8snmLp9s7vLJ5i6fbO7yyeYuLzZ3ebG5y4vNXV5s7vJic5cXm7u82NzlxeYuLzZ3ebG5y2ebu3y2uctnm7t8trnLZ5u7fLa5y2ebu3y2uctnm7t8trnLF5u7fLG5yxebu3yxucsXm7t8sbnLF5u7fLG5yxebu3yxuctXm7t8tbnLV5u7fLW5y1ebu3y1uctXm7t8tbnLV5u7fLW5yzebu3yzucs3m7t8s7nLN5u7fLO5yzebu3yzucs3m7t8s7nLd5u7fLe5y3ebu3y3uct3m7t8t7nLd5u7fLe5y3ebu3w3uctnm3/7mm3+7Wu2+bev2ebfvubF5C6fbf7ta7b5t6/Z5t++Zpt/+5pt/u1rtvm3r9nm375mm3/7mm3+7Wu2+bev2ebfvmabf/uabf7ta7b5t6/Z5t++Zpt/+5pt/u1rtvm3r9nm375mm3/7mm3+7Wu2+bev2ebfvmabf/uabf7ta7b5t6/Z5t++Zpt/+5pt/u1rtvm3r9nm375mm3/7mm3+7Wu2+bev2ebfvmabf/ua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f1XA+68KeP9VAe+/KuD9VwW8/6qA918V8P6rAt5/VcD7rwp4/1UB778q4P1XBbz/qoD3XxXw/qsC3n9VwPuvCnj/VQHvvyrg/VcFvP+qgPdfFfD+qwLef1XA+68KeP9VAe+/KuD9VwW8/6qA918V8P6rAt5/VcD7rwp4/1UB778q4P1XBbz/qoD3XxXw/qsC3n9VwPuvCnj/VQHvvyrg/VcFvP+qgPdfFfD+qwLef1XA+68KeP9VAe+/quD9VxW8/6qC919V8P6resM+fyt4/1UF77+q4P1XFbz/qoL3X1Xw/qsK3n9VwfuvKnj/VQXvv6rg/VcVvP+qgvdfVfD+qwref1XB+68qeP9VBe+/quD9VxW8/6qC919V8P6rCt5/VcH7ryp4/1UF77+q4P1XFbz/qoL3X1Xw/qsK3n9VwfuvKnj/VQXvv6rg/VcVvP+qgvdfVfD+qwref1XB+68qeP9VBe+/quD9VxW8/6qC919V8P6rCt5/VcH7ryp4/1UF77+q4P1XFbz/qoL3X1Xw/qsK3n9VwfuvKnj/VQXvv6rg/VcVvP+qgvdfVfD+qwref1XB+68qeP9VBe+/quD9VxW8/6qC919V8P6rCt5/VcH7ryp4/1UF77+q4P1XFbz/qoL3X1Xw/qsK3n9VwfuvKnj/VQXvv6rg/VcVvP+qgvdfVfD+qwref1XB+68qeP9VBe+/quD9VxW8/6qC919V8P6rCt5/1cD7rxp4/1UD779q4P1X7YZ9/jbw/qsG3n/VwPuvGnj/VQPvv2rg/VcNvP+qgfdfNfD+qwbef9XA+68aeP9VA++/auD9Vw28/6qB91818P6rBt5/1cD7rxp4/1UD779q4P1XDbz/qoH3XzXw/qsG3n/VwPuvGnj/VQPvv2rg/VcNvP+qgfdfNfD+qwbef9XA+68aeP9VA++/auD9Vw28/6qB91818P6rBt5/1cD7rxp4/1UD779q4P1XDbz/qoH3XzXw/qsG3n/VwPuvGnj/VQPvv2rg/VcNvP+qgfdfNfD+qwbef9XA+68aeP9VA++/auD9Vw28/6qB91818P6rBt5/1cD7rxp4/1UD779q4P1XDbz/qoH3XzXw/qsG3n/VwPuvGnj/VQPvv2rg/VcNvP+qgfdfNfD+qwbef9XA+68aeP9VA++/auD9Vw28/6qB91818P6rBt5/1cD7rxp4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2q+QzOe+one2XyGZz31F722/QjKf+4re836FZD73Fb5D/gLJfO4rfI/8BZL53Ff4LvkLJPO5r/B98hdI5nNf4TvlL5DM577C98pfIJnPfYXvlr9AMp/7Ct8vf4FkPvcVvo/+Asl87ouv6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o/+LruD76u+4Ov6/7g67o3vq574+u6N76ue+Prureb8Ummc1/G13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd98bXdW98XffG13VvfF33xtd1b3xd94Wv677wdd0Xvq77wtd1X27GJ5nOfRW+rvvC13Vf+LruC1/XfeHrui98XfeFr+u+8HXdF76u+8LXdV/4uu4LX9d94eu6L3xd94Wv677wdd0Xvq77wtd1X/i67gtf133h67ovfF33JVcL+mj7r0+P9vvPfglOdSrPCE71th69PwSPdiI41bt6RnCqN/WM4FTv6RnBqTLyjOBUCXlCcK4+7BnBuc7hCcGpsvGM4FTJeEawsQlmc1rIHdgvEcDu6SUiuCNqx+35IN0+/af3n+LaXx//T3Hcn6N69J7qCyRH76m+QnJwX3SF5ODO6ArJwb3RFZKNT3Jwf3SF5OAO6QrJwf3UFZL5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F7L+9kLW317I+tsLWX97IetvL2T97YWsv72Q9bcXsv72QtbfXsj62wtZf3sh628vZP3thay/vZD1txey/vZC1t9eyPrbC1l/eyHrby9k/e2FrL+9kPW3F7L+9kLW317I+tsLWX97IetvL2T97YWsv72Q9bcXsv72QtbfXsj62wtZf3sh628vZP3thay/vZD1txey/vZC1t9eyPrbC1l/eyHrby9k/e2FrL+9kPW3F7L+9kLW317I+tsLWX97IetvL2T97YWsv72Q9bcXsv72QtbfXsj62wtZf3sh62+vZP3tlay/vZL1t1ey/vb6yGR6ufxVJetvr2T97ZWsv72S9bdXsv72StbfXsn62ytZf3sl62+vZP3tlay/vZL1t1ey/vZK1t9eyfrbK1l/eyXrb69k/e2VrL+9kvW3V7L+9krW317J+tsrWX97Jetvr2T97ZWsv72S9bdXsv72StbfXsn62ytZf3sl62+vZP3tlay/vZL1t1ey/vZK1t9eyfrbK1l/ew3V7/1824+vLz/GD9/8N2/kOM7+JbHn7/fRx//6nR/l9Z6Pxyhv8PKfvnMfX9/5+OE7l3z8+7UlnxfTj+RGNP1fTj9U97um/9vpR3Kqmv5vpx/Jt2v6v51+pBSj6f92+lnTJ55+pISr6f92+pF+n6Lp/3b6kX67pOn/dvra9TFPX7u+sNPvr29c3r/v+/RD3UOk6f92+tr1MU9fuz7m6WvXF3b67Xv69WL6WdMnnr52fczT166Pefra9TFPX7s+5ulr1xd2+uX1lku9+ExvqDsxNf3fTl+7Pubpa9fHPH3t+pinnzV94ulr18c8fe36mKevXR/z9LXrY56+dn3E0w91P7um/9vpa9fHPH3t+pinr10f8/Szpk88fe36mKevXR/z9LXrY56+dn3M09euj3j6Q7s+5ulr18c8fe36mKevXR/z9LOmTzx97fqYp69dH/P0tetjnr52fczT166Pd/rtoV0f8/S162OevnZ9zNPXro95+lnTJ56+dn3M09euj3n62vURTz8p7++dfnrO4Gv6qVpO/8e7OVpS3meevvI+8/SV95mnnzV94ukr7zNPX3mfefrK+8zT12d7mKevz/YQT//Qro95+tr1hZ3+j7cxtkO7Pubpa9fHPP2s6RNPX7u+sNP/8Ua2dmjXxzx97fqYp69dH/P0tesjnv6pXR/z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l/M7J1YopvNczu+HWKGYznM5v8thhWI6z+X83oUViuk8l/M7ElYopvNczu8zWKGYznM5v3tghWI6z+X8noAViuk8l/NO/xWK6TyX8/79FYrpPJfzrvwViuk8l/Ne+xWK6TyX8w76FYrpPBddD32l66GvdD30la6HvtL10Fe6HvpK10Nf6XroK10PfaXroa90PfSVroe+0vXQV7oe+krXQ1/peugrXQ99peuhb3Q99I2uh77R9dA3uh769sh0itk8V6ProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6XroO10Pfafroe90PfT9kekUs3muTtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30PVJH+WjH64vbf7/zm95Ap/GU3kDP6dH764tHu9Ib6Ck9pTfQM3pKb6An9JTeQJl4Rm+kxuopvZHO3xm9kc7fGb2BsvCU3kyml8xfRWqpntIL66/eNMB6pjcNvn3Q2b7+KeXxMEnmznukVyj27YVWKPbthlYo9u2HVijOdIp9e6IVin27ohWKffuiFYp9u6gViuk8l/Me6RWK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QtdDX+h66AtdD32h66EvdD30ha6HvtD10Be6HvpC10Nf6HroC10PfaHroS90PfSFroe+0PXQF7oe+kLXQ1/oeugLXQ99oeuhL3Q99IWuh77S9dBXuh76StdDX+l66Osj0ylm81yVroe+0vXQV7oe+krXQ1/peugrXQ99peuhr3Q99JWuh77S9dBXuh76StdDX+l66CtdD32l66GvdD30la6HvtL10Fe6HvoaqaP8+dWvL27//c5vegOdxjN6I3VXj95fXzzald5AT+kpvYGe0VN6Az2hp/QGysRTegMl4im9kc7fGb2Rzt8ZvYGy8IzeSE3VU3rJ/FWkluopvbD+6k1DDqDBtw/qpX39Uyr1p2Sej69kns/y/dVtvCv27YRWKPbthVYo9u2GVij27YcWKHbeI71CsW9PtEKxb1e0QrFvX7RCcaZTTOe5nPdIr1BM57mc90ivUEznuZz3SK9QTOe5nPdIr1BM57mc90ivUEznuZz3SK9QTOe5nPdIr1BM57mc90ivUEznuZz3SK9QTOe5nPdIr1BM57mc90ivUEznuZz3SK9QTOe5nPdIr1BM57mc90ivUEznuZz3SK9QTOe5nPdIr1BM57mc90ivUEznuZz3SK9QTOe5nPdIr1BM57mc90ivUEznuZz3SK9QTOe5nPdIr1DM5rma8x7pFYrZPFdz3iO9QjGb52qPTKeYzXM15z3SKxSzea7mvEd6hWI6z+W8R3qFYjrP5bxHeoViOs/lvEd6hWI6z+W8R3qFYjrP5bxHeoViOs/lvEd6hWI6z+W8R3qFYjrP5bxHeoViOs910Hku513hKxTTea6DznOddJ7LeSf8CsV0nst5L/wKxZlOMZ3nct4Ov0Ixnedy3hC/QjGd53LeEr9CMZ3nct4Uv0Ixnedy3iy/QjGd56LroW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/peug7XQ99p+uh73Q99P2R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uJdoJvRh3lu+l2gm9GHeG8SXaCb0Yd7byZdoJvRh3pvPl2gm9GHeW9WXaCb0Yd4b25doJvRh3tvgl2gm9GHem+aXaCb0Yd5b7JdoJvRh3hvyl2gm9GGEffoHYZ/+QdinfxD26R+EffoHYZ/+QdinfxD26R+EffoHYZ/+QdinfxD26R+EffoHYZ/+QdinfxD26R+EffoHYZ/+QdinfxD26R+EffoHYZ/+SdinfxL26Z+EffonYZ/++ciEmvl82EnYp38S9umfhH36J2Gf/knYp38S9umfhH36J2Gf/knYp38S9umfhH36J2Gf/knYp38S9umfhH36p6c+/bd35cgpvb0rR17m7V1ll+/KkR94e1eOTuy3d+XoTH17V45Ovbd35ehc+n5XnhrA396Vy2e7pxbtt3fl8tnuqYn67V25fLZ7anN+e1cun+2eGpHf3pXLZ7unVuG3d+Xy2e6pmfftXbl8tntqt317Vy6f7Z4aYt/elctnu6eW1bd35fLZ7qmp9O1duXy2e2r7fHtXLp/tnhoz397V4mf72yvV216p3fZK/bZXGne90uqGwLdXSre90nHbK523vVK+7ZVue0bU254R9bZnRL3tGVFve0a0254R7bZnRLvtGdFue0a0254R7bZnRLvtGdFue0a0254R7bZnRL/tGdFve0b0254R/bZnRL/tGdFve0b0254R/bZnRL/tGdFve0aM254R47ZnxLjtGTFue0aM254R47ZnxLjtGTFue0aM254R465nRDb5i9Sj5a9X6uM/r/SXn5LLJn81uuJ9HU7f1+n0fWWn76s4fV/V6ftqTt9Xd/q+hs/3lZw+75PT531y+rxPTp/3yenzPjl93ienz/vk9HmfnD7vk9Pn/eH0eX84fd4fTp/3h9Pn/eH0eX84fd4fTp/3h9Pn/eH0eX84fd6fTp/3p9Pn/en0eX86fd6fTp/3p9Pn/en0eX86fd6fTp/3p9PnfXb6vM9On/fZ6fM+O33eZ6fP++z0eZ+dPu+z0+d9dvq8z06f98Xp8744fd4Xp8/74vR5X5w+74vT531x+rwvTp/3xenzvjh93lenz/vq9HlfnT7vq9PnfXX6vK9On/fV6fO+On3eV6fP++r0ed+cPu+b0+d9c/q8b06f983p8745fd43p8/75vR535w+75vT5313+rzvTp/33enzvjt93nenz/vu9HnfnT7vu9PnfXf6vO9On/fD6fN+OH3eD6fP++H0eT+cPu+H0+f9cPq8H06f98Pp8374fN4Xp39fW5z+fW1x+ve1xenf15aHz+d9cfr3tcXp39cWp39fW5z+fW1x+ve1xenf1xanf19bnP59bXH697XF6d/XFqd/X1uc/n1tcfr3tcXp39cWp39fW5z+fW1x+ve1xenf1xanf19bnP59bXH697XF6d/XFqd/X1uc/n1tcfr3tcXp39cWp39fW5z+fW1x+ve1xenf1xanf19bnP59bXH697XF6d/XFqd/X1uc/n1tcfr3tcXp39cWp39fW1e3Qf/fr/7dDeiPr69Oz/99a/7zDei/+t7tUV/fupXH91fn43/8zsdZXt/5OMfbre0j/+k79/H1nY8fvvPzn/e/X/v8B3Ux0dWt25ro7RN1dDucJmoyUUc362miJhN1dCuhJmoy0ayJBpuoo5uONVGTiTq6JVoTNZmooxu2NVGTiTq6nVwTNZmodkaxJtoe2hkhTbQ/XhMd5Wqi2hlFm6h2RtEmqp1RtIlmTRRoou17ovVqotoZRZuodkbRJqqdUbSJamcUbaLaGQWbaNLOCGmipb8mWtvVRLUzijZR7YyiTVQ7o2gTzZposIlqZxRtotoZRZuodkbRJqqdUbSJamcUbKKHdkbRJqqdUbSJamcUbaLaGUWbaNZEg01UO6NoE9XOKNpEtTOKNlHtjKJNVDujYBM9tTOKNlHtjKJNVDujaBPVzijaRLMmGmyi2hlFm6h2RtEmqp1RtIlqZxRtotoZBZto1s4o2kS1M4o2Ue2Mok1UO6NoE82aaLCJamcUbaLaGUWbqHZG0SaqnVGwiRbl0QUTTf1roiVbTnSiA7soj0abqPJotIlmTTTYRJVHo01UeTTaRJVHo01UeTTaRPUZhmATrfoMQ7SJamcUbaLaGSFNdOIGn6qdUbSJZk002ES1M4o2Ue2MkCY6cTtI1c4o2kS1M4o2Ue2Mgk20aWcUbaLaGUWbqHZGSBOd+Cxg084o2kSzJhpsotoZRZuodkbRJqqdUbSJamcUbaLaGQWbaNfOKNpEtTOKNlHtjKJNVDujaBPNmmiwiWpnFG2i2hlFm6h2RtEmqp1RtIlqZxRsokM7o2gT1c4o2kS1M4o2Ue2Mok00a6LBJqqdUbSJamcUbaLaGUWbqHZG0SaqnVGsifaHdkbRJqqdUbSJamcUbaLaGUWbaNZEg01UO6NoE9XOKNpEtTOKNlHtjKJNVDujYBNN2hlFm6jyqP1Ej6+KzedwTW/C+7kDu6esiQabqPJotIkqj0abqPJotIkqj0abqPJosIkeyqPRJqrPMESbqD7DEG2i2hlFm2jWRIEm+vMNPv3QzijaRLUzijZR7YyiTVQ7I6SJ/nw7SD+0Mwo20VM7o2gT1c4o2kS1M4o2Ue2Mok00a6JAE534LOCpnVG0iWpnFG2i2hlFm6h2RtEmqp1RsIlm7YyiTVQ7o2gT1c4o2kS1M4o20ayJBpuodkbRJqqdUbSJamcUbaLaGUWbqHZGwSZatDOKNlHtjKJNVDujaBPVzijaRLMmGmyi2hlFm6h2RtEmqp1RtIlqZxRtotoZBZto1c4o2kS1M4o2Ue2Mok1UO6NoE82aaLCJamcUbaLaGUWbqHZG0SaqnVG0iWpnFGyiTTujaBPVzijaRLUzijZR5dG5iRo3VTelxj3cle32cFcC28NdOWkL9640s4e7Msce7koGe7jrd757uGdx38JdeXUPd+VVe+4TN3F05dU93JVX93BXXt3CfSiv2nOfaJ8fyqt7uCuv7uGuvLqHexb3LdyVV/dwV1615z7xeYKhvLqHu/LqHu7Kqzu4j4fy6h7uyqt7uCuv7uGuvLqHexb3LdyVV/dwV17dw115dQ935dU93JVXt3BPyqt7uCuv7uGuvLqHu/LqHu5Z3LdwV17dw115dQ935dU93JVX93BXXt3C/VBe3cNdeXUPd+XVPdyVV/dwz+K+hbvy6h7uyqt7uCuv7uGuvLqHu/LqFu6n8uoe7sqre7grr+7hrry6h3sW9y3cY/l321akccZy2dZ0YnlhYzo5lmO1phPLV1rTieX+rOnE8mjWdLLofKATaz9vTSfWFt2ajrzyJzq8Xvnn/r2Reb3yBJ3C65Vn6PB65Rk6vF75556sUXi98gydLDof6PB65Rk6vF55hg6vV56hw+uVJ34nUXi98gSdyuuVZ+jweuUZOrxeeYYOr1eeoZNF5wMdXq88Q4fXK8/Q4fXKM3TklT/RkVf+QKfJK3+iI6/8iY688ic68sqf6GTR+UBHXvkTHXnlT3TklT/RkVf+REde+QOdLq/8iY688ic68sqf6Mgrf6KTRecDHXnlT3TklT/RkVf+REde+RMdeeUPdILdpm5NR175Ex155U905JU/0cmi84GOvPInOvLKn+h49zvp+KLzKOknOr/43kc9v9517W+fWD7/9J3T+PqTnONxfLeVpPb4X6f0498Ytof7W4E1pX+m5N3/aUr/TMm7D9WU/pmSdz+sKf0zpawpAUzJez7QlP6Zkvecoin9MyXvv1vQlP6ZkvffcWhK/0xJuweAKbm/4Tn+lH5sg3lOSbsHhClp94AwJe0eEKaUNaXNU/qx8eU5Je0eEKak3QPClLR7QJiSdg8IU9LuAWBK7m/rjj+lHz9D9JySdg8IU9LuAWFK2j0gTClrSgBT0u4BYUraPSBMSbsHhClp94AwJe0eAKbk/uZ1TemfKWn3gDAl7R4QpqTdA8KUsqYEMCXtHhCmpN0DwpS0e0CYknYPCFPS7gFgSlm7B4QpafeAMCXtHhCmpN0DwpSypgQwJe0eEKak3QPClLR7QJiSdg8IU9LuAWBKRbsHhClp94AwJe0eEKak3QPClLKmBDAl7R4QpqTdA8KUtHtAmJJ2DwBTqrx5qdQv7vWRfprS2V7gUy7fUzpy/yP51xeX9vadj/ROnjcD7SbPm2t2k88iv4k8b/7YTZ43U6wkP8q/X1wf5Yo8b07YTZ7X++8mz/u7xM3kG+/vB5eST1/k6xV5Zdhd5JVhd5FXht1FPov8JvLKsLvIK8OuIN+/bhnq/Yq8Muwu8sqwu8grw24i35Vhd5FXht1FXhl2F3ll2F3ks8hvIq8Mu4u8Muwu8sqwu8grw+4i//9n793SI1l2Hc0Z9RfuTrvNp6bRc+/YfTKUkXVWuExr09IIAvVUD9pagZ953AFKApVhN5EfyrC7yCvD7iKvDLuLvDLsLvIm8pvIK8PuIq8Mu4u8Muwu8sqwu8grw+4h/0Qs8pvIK8PuIq8Mu4u8Muwu8ibym8grw+4irwy7i7wy7C7yyrC7yCvDbiJ/KMPuIq8Mu4u8Muwu8sqwu8ibyG8iLz8/R/487PVBzt6+I/99p9NxyM/vIi8/v4n8KT+/i7z8/C7y8vMryH/fOHGc8vO7yJvIbyKvn0ntIq+fSe0irwy7i7wy7AryE3ubUxl2E/lLGXYXeWXYXeSVYXeRV4bdRd5EfhN5Zdhd5JVhd5FXht1FXhl2F3ll2E3kTRl2F3ll2F3klWF3kVeG3UXeRH4TeWXYXeSVYXeRV4bdRV4Zdhd5ZdhN5Isy7C7yyrC7yCvD7iKvDLuLvIn8JvLKsLvIK8PuIq8Mu4u8Muwu8sqwm8hXZdhd5JVhd5FXht1FXhl2F3kT+U3klWF3kVeG3UWe188fvXx9ahvfkJ9p72i8Dt2fJa/n9mfJ66L9WfL6Yn+WJpZTLMfri+ujfGLJ6139WfK6UX+WvD8j8WfJ+1OPH7L8vo2mKfe4sezKPX4slXv8WCr3+LFU7vFjaWI5xXJif9mVe/xYKvf4sVTu8WOp3OPHUrnHjeVQ7vFjqdzjx1K5x4+lco8fSxNLN5bKPX4slXv8WCr3+LFU7vFjqdzjxfJ8KPf4sVTu8WOp3OPHUrnHj6WJpRtL5R4/lso9fiyVe/xYKvf4sVTucWN5KPf4sVTu8WOp3OPHUrnHj6WJpRtL5R4/lso9fiyVe/xYKvf4sVTucWN5Kvf4sVTu8WOp3OPHktdfPq6Xxue2zL5j+X2vwXny+kt/lrz+0p8lr7/0Z8nrL91ZXrz+8mcsv++IOC9ef+nPktdf+rPk3av7szSxnGP57d/in5dyjx9L5R4/lso9fiyVe/xYKve4sTTlnjmWE/tLU+7xY6nc48dSucePpYmlG0vlHj+Wyj1+LJV7/Fgq9/ixVO5xY1mUe/xYKvf4sVTu8WOp3OPH0sTSjaVyjx9L5R4/lso9fiyVe/xYKve4sSS+4O7PUrnHj6Vyjx9L5R4/liaWbiyVe/xYKvf4sVTu8WOp3OPHUrnHjWVT7vFjqdzjx1K5x4+lco8fSxNLN5bKPX4slXv8WCr3+LFU7nFjyXt//OhfeI5h/TuWE70GvPfHF7Ck9ZcLWJpYurGk9ZcLWNL6yx+ynOiI4L0/voAlrb9cwJJ2r+7Pkvf++E9Zfv+3+Lz3xxewVO7xY6nc48fSxNKNpXKPH0vlnjmWE/tL3vvjC1gq9/ixVO7xYnnx3h9fwFK5x4+lco8fS+UeP5Ymlm4slXv8WCr3+LFU7vFjqdzjx1K5x40l7/3xBSyVe/xYKvf4sVTu8WNpYunGUrnHj6Vyjx9L5R4/lso9fiyVe9xY8t4fX8BSucePpXKPH0vlHj+WJpZuLJV7/Fgq9/ixVO7xY6nc48dSuceN5aXc48dSucePpXKPH0vlHj+WJpZuLHn9ZXvU17dubXzH8vteg4v3/vgClrz+0p0l7/3xBSx5/aU/S15/+TOW3/9t6cV7f3wBSxNLN5a8e3V/lrx7dX+Wyj1+LJV75lhO5HHe++P+LHnvjy9gqdzjx1K5x4+lco8fSxNLN5bKPX4slXv8WCr3+LFU7vFjqdzjxpL3/vgClso9fiyVe/xYKvf4sTSxdGOp3OPHUrnHj6Vyjx9L5R4/lso9bix5748vYKnc48dSucePpXKPH0sTSzeWyj1+LJV7/Fgq9/ixVO7xY6nc48ayK/f4sVTu8WOp3OPHUrnHj6WJpRtL5R4/lso9fixz+cs+vr73+c33LvZFx/78HL/pJLso7k0nlwf0ppPL1XnTyeXTvOmY6NzQyeWlvOnkckfedHLteb3p5NrcetORV/5Mx5Jdof4Jnf540RnlEx1erzxDh9crz9Dh9cozdIyWTvtNp36iw+uVZ+jweuUZOrxeeYYOr1eeocPrlSfoJLtc/BM6pb/o1PaJDq9XnqHD65Vn6PB65Rk6Jjo3dHi98gwdXq88Q4fXK8/Q4fXKM3R4vfIEnWTXbr3pyCvf0ZFXvqMjr3xHx0Tnho688h0deeU7OvLKd3Tkle/oyCvf0El2IdWbjrzyHR155Ts68sp3dEx0bujIK9/RkVe+oyOvfEdHXvmOjrzyDZ1k11696cgr39GRV76jI698R8dE54aOvPIdHXnlOzryynd05JVv6AS/2/joX10ex2O8NX/8M53RXl892qe/1wt+XXGF4ti+ZIVio1Mc2z+sUBzbE/xQ8fNzP76+/BzffPfRX0/2MT4+2WO7gv18YvuC/Xxib9G28wl+RW8/n1TOcgGfVD50AZ9UrvVnfH6S8j5/6jeWJpZuLFM57c0siT28O0tiv+/OkjgbuLMkzhHeLINfsMNiSZxP3FkSZxl3lso9fixNLN1YKvf4sVTu8WOp3OPHUrnHj6VyjxvL4BfssFgq9/ixVO7xY6nc48fSxNKNpXKPH0vlHj+Wyj1+LJV7/Fgq97ixDH6HEYulco8fS+UeP5bKPX4sTSzdWCr3+LGUJ5piOXFvrwS/t4fFUu+eOZbf/yVteejd48dS7x4/ltq5+bHUzs2PpXZufizlL6dY1qP++tp6nR9YBr9Rh8VSOzc/ltq5+bFU7vFjaWLpxlK5x4+lco8fS+UeP5bKPX4slXvcWAa/N4jFUrnHjyVz7vnJJ7nOr+98vX/nR32nyZx8/GmaaDrSZE4//jSZ848/TeYE5E+TOQP502ROQT+iWb4+yFWPDzSD35JEo8mchPxpKgt50lQW8qRpoulIU1nIk6ay0L+g2T/RVBbypKks5ElTWWiS5vidLMenZBn8VigaTWUhT5rKQp40lYU8aZpoOtJUFvKkqSz0f27+VrcEv6a6n4/yyj0fJZBbPkWZ4p6PUsI9H/n+ez65rv1+fymuJLv2O6M417XfGcWpXOuU4lQ+dEpxKmc5pTiVV5xRnOtq7pTiVH5uSnEqhzalmM5z5booO6WYznPlus46pZjOc+W6dDqlmM5z5boaOqWYznPlusA5pZjOc+W6ZjmlmM5z5boMOaWYznPlurI4pZjOc+W6WDilmM5z5br+N6WYznPluqQ3pZjOc+W6SjelmM5z5brwNqWYznPlupY2pZjOc+W6PDalmM5z5briNaWYznMNOs816DzXoPNcue68TSiuua6xTSlm81z1wea5aq67eFOKjU4xm+equS7BTSlm81w111W1KcV0nivXhbIpxXSeK9e1rynFdJ4r1+WsKcV0nivXFaopxXSeK9dFpynFdJ4r13WkKcV0nivXpaEpxXSeK9fFninFdJ4r1+WbKcV0nivXBZkpxXSeK9cllinFdJ4r10WTKcV0nivXZZApxXSeK9eFjSnFdJ4r16WKKcV0nivXxYcpxXSeK9flhCnFdJ4r1wWCKcV0nitXk/+UYjrPlattf0oxnefK1Yg/pZjOc+VqrZ9STOe56HroK10PfaXroa90PfSVroe+0vXQV7oe+krXQ1/peugrXQ99peuhr7k6yn94/6qPr09yfvO1xV6fo9j1iSXzLUNvlsx3D51Z5mps38yS+Z6iN0vm24veLJkvrnuzNLF0Y8l8bd2bJfOtdW+Wyj1+LJV75lj21zcuo3xiqdzjxjLX1YTNLJV7/Fgq98yxbL9Z1k8slXv8WJpYurFU7vFjqdzjx1K5x4+lcs8cy/L6OWSpn34Omeu+yF6WuS6XbGap3OPHUrnHj6Vyjx9LE0s3lso9fiyVe/xYKvf4sVTu8WOp3OPFsuW6HrSZpXKPH0vlHj+Wyj1+LE0s3Vgq9/ixVO7xY6nc48dSucePpXKPG8tcF7w2s1Tu8WOp3OPHUrnHj6WJpRtL5R4/lso9fiyVe/xYKvf4sVTucWOZ64reZpbKPX4slXv8WCr3+LE0sXRjqdzjx1K5x49lcH/Zrt9w+lujwIcGu/YiP9qH9oEW/a7fAsXBvdoCxcEd1QLFwX3PAsWWSfHP3gITTZ0t+hXA7XyCu4jtfIJvRLfzCb7l3M4nlbP05xP91uF2Pqlc67qU9/lTv7FM5Yc3s0zltDezNLF0Y0ns991ZEmcDd5bEOcKdJXHmcGdJnE+8WUa/IQrFUrnHj6Vyjx9L5R4/liaWbiyVe/xYKvf4sVTu8WOp3OPHUrnHjWX0O75QLJV7/Fgq9/ixVO7xY2li6cZSucePpXKPH0vlHj+Wyj1+LJV73FhGvxAOxVK5x4+lco8fS+UeP5Ymlm4slXv8WCr3+LFU7nFjGf16cBSWE9fWW/TrwVAs9e6ZYznRPBD9SisUS717/Fhq5+bHUjs3N5bRr7RCsZS/nGJZj/rra+t1fmIpf+nHUjs3P5Ymlm4slXv8WCr3+LFU7vFjqdzjx1K5x4tlj36lFYqlco8fS+UeP5bKPX4sjZjlDz6JXfZaFNlV3jZFj/pOkzn5+NNkzj7+NJnTjz9N5vzjT5M5AbnTjH6xFYwmcwr6Ec3++KLZxyeazDnInyZzEvKnaaLpSFNZyJOmspAnTWUhT5rKQj+nOeonmspCjjSjX3EFo6ksNEfTjq9kaeenZBn9kisYTWUhT5ommo40lYU8aSoLedJUFvKkqSw0SbNcXzTr+YmmspAjzVy3jLfTVBbypKks5ElTWciTpommI01lof9z02bSmS9NT/FRXrnnowRyz0eZ4pYP86XpKT7y/fd8Ujn5idvjPdeN5ynFRqc4lWudUpzKh04pTuUspxSn8opTilO5vxnFua7tTilO5dCmFNN5rlz3ZacUG51iOs+V66LqlGI6z5XrOumUYjrPlevS55RiOs+V62rmlGI6z5XrAuWUYjrPleua45RiOs+V6zLilGI6z5XryuCUYjrPleti35RiOs+V6/rdlGI6z5XrktyUYjrP1eg8V6PzXJ3Oc+W6NTilmM5zdTrP1Y1OMZ3nynVBcUoxnefKdY1wSjGd58p12W9KMZ3nynUlb0oxnefKdXFuSjGd58p1vW1KMZ3nynUJbUoxm+caua6KTSlm81wj14WuKcVsnms8jE4xm+caua5GTSlm81wj1/WlKcV0nivXFaMpxXSeK9c1oCnFdJ4r11WdKcV0nivXdZopxXSeK9eVlynFdJ4r17WUKcV0nivX1ZEpxXSeK9f1jinFdJ4r1xWMKcV0nivXNYkpxXSeK9dVhinFdJ4r13WDKcV0nivXlYApxXSeK1c3/5RiOs+Vqz9/SjGd58rVcT+lmM5z0fXQD7oe+kHXQz/oeugHXQ/9oOuhH3Q99IOuh37Q9dAPuh76QddDP+h66AddD/2g66EfdD30g66HftD10A+6HvpB10M/6HroB10P/aDroR90PfSDrod+0PXQD7oe+kHXQz/oeugHXQ/9oOuhH3Q99IOuh37Q9dAPuh76QddDP+h66AddD/2g66EfdD30g66HftD10A+6HvpB10M/6HroB10P/cjVUf783L+//BzffPfWx9cnOb/52mLnr68tdn1gmav9fDPLVB5iM8tU7mQzy1S+ZzNLE0s3lqm82maWqVzgZpapdnqbWabaFm5mqdzjxLI/cl0gWMiyv75xGeUTS+UeP5bKPX4slXv8WJpYTrFsv1nWTyyVe/xYKvf4sVTu8WOp3OPHUrnHjWWuKyALWZbXzyFLbZ9YKvf4sVTu8WOp3OPH0sTSjaVyjx9L5R4/lso9fiyVe/xYKve4scx1iWczS+UeP5bKPX4slXv8WJpYurFU7vFjqdzjx1K5x4+lco8fS+UeN5a5rmFtZqnc48dSucePpXKPH0sTSzeWyj1+LJV7/Fgq9/ixVO7xY6nc48Yy10W6zSyVe/xYKvf4sVTu8WNpYunGUrnHj6Vyjx9L5R4/lso9biyj3/UrvXx9kDq+Yznaq31gtOuT4uAucIHi4F5tgWKjUxzc9yxQHNyd/Ezxz94C3zd1PvkEdxzb+QR3Edv5BN+I7uYT/R7hdj6pnOUCPql86AI+qVzrupT3+VO/sTSxdGOZymlvZkns4d1ZEvt9d5bE2cCdJXGO8GYZ/R4nFEvifOLOkjjLuLNU7vFjaWLpxlK5x4+lco8fS+UeP5bKPX4slXvcWEa/iQvFUrnHj6Vyjx9L5R4/liaWbiyVe/xYKvf4sVTu8WOp3OPHUrnHjWX0C+FQLJV7/Fgq9/ixVO7xY2li6cZSucePpXKPH0vlHj+Wyj1+LJV7vFge0a8HR2E5cW39SUos3Vjq3TPH8vvmgSP6lVYolnr3uLGMfqUViqV2bn4stXPzYyl/OcWyHvXX19br/MTSxNKNpXZufiy1c/Njqdzjx1K5x4+lco8by+hXWqFYKvf4sVTu8WOp3OPH0sTSjaVyjx9L5tzzg0/S7Xwtirpdb5uiR32nyZx8/GkyZx9/mszpx51m9GutYDSZE5A/TeYM5E+TOQX9iGZ9fNGs4xNNE01HmsxJyJ+mspAnTWUhT5rKQp40lYUcaUa/4BqSZqufaCoLedJUFvKkqSw0SXN8Jcvy+JQso19yBaOpLORJU1nIk6aykCdNZSFPmspCjjSLstAczWJffrPYp2SZ697wdprKQp40lYU8aZpoOtJUFvKkqSzkSVNZ6Oc0y6eNHPNd6gU0lYUcaTLfvJ7pLWK+eT3FR3nlno8SyD0fE59bPkoJ93zk++/5pHLyo7/Wu2N8aoLJdel5SnEqRzyjONfV5CnFqXzolOJUznJKcSqvOKXY6BSn8nNTilM5tCnFdJ4r15XZKcV0nivXxdYpxXSeK9f10ynFdJ4r1yXRKcV0nivXVc4pxXSeK9eFyynFdJ4r17XIKcV0nivX5cUpxXSeK9cVwynFdJ4r10XAKcV0nivXdb0pxWye63ywea7zwea5zgeb5zpz3V+cUmx0itk81/lg81xnrnuVU4rZPNeZ6/bjjOJcFxqnFNN5rlzXDqcU03muXJcDpxTTea5cV/imFNN5rlwX7aYU03muXNfhphTTea5cl9amFNN5rlxXy6YU03muXBfAphTTea5cl7SmFNN5rlwXqaYU03muXJedphTTea5cF5KmFNN5rlyXhqYU03muXBd7phTTea5cl2+mFNN5rlwXZKYU03muXJdYphTTea5cF02mFNN5rlyXQaYU03muXBc2phTTea5clyqmFNN5rlwXH6YU03muXJcTphTTea5cFwimFNN5rlxN/lOK6TxXrrb9KcV0nitXI/6UYjrPlau1fkoxneei66E/6XroT7oe+pOuh/6k66E/6XroT7oe+pOuh/6k66E/6XroT7oe+pOuh/6k66E/6XroT7oe+pOuh/6k66E/6XroT7oe+pOuh/6k66E/6XroT7oe+pOuh/6k66E/6XroT7oe+pOuh/6k66E/6XroT7oe+pOuh/6i66G/6HroL7oe+ouuh/56GJ1iNs910fXQX3Q99BddD/1F10N/0fXQX3Q99FeujvLn5358ffk5vvnurY+vT3J+87XFzl9fW+z6xDLVm34zy1QeYjPLVO5kM8tUvmczy1SOai/LXP31m1mmcoGbWaba6W1mmWpbuJmliaUbS+WeOZb99Y3LKJ9YKvf4sVTu8WOp3OPHUrlnjmX7zbJ+YJnrhsRmlso9fiyVe/xYKvf4sTSxdGOp3DPHsrx+Dlnqp59D5rovspmlco8fS+UeP5bKPW4sc91x2cxSucePpXKPH0vlHj+WJpZuLJV7/Fgq9/ixVO7xY6nc48dSuceNZa5bSptZKvf4sVTu8WOp3OPH0sTSjaVyjx9L5R4/lso9fiyVe/xYKve4scx1z2wzS+UeP5bKPX4slXv8WJpYurFU7vFjqdzjx1K5x4+lco8fS+UeN5a5bgpuZqnc48dSucePpXKPH8vg/vI6rrcP8h3L0V7tA6NdnxQHd4ELFAf3agsUB3dU/oqj3/VboDi4O/mZ4p+9BWaaOqNfAdzOJ7iL2M7HxOeWT/At53Y+qZzlAj6pfOgCPqlc67qU9/lTv7FM5Yf3sox+zRGKJbGHd2dJ7PfdWRJnA3eWJpZuLIkzhztL4nzizpI4y7izVO7xY6nc48XSol9UhWKp3OPHUrnHj6Vyjx9LE0s3lso9fiyVe/xYKvf4sVTu8WOp3OPGMvpVYyiWyj1+LJV7/Fgq9/ixNLF0Y6nc48dSucePpXKPH0vlHj+Wyj1uLKNfCIdiaWI59ReL318PtujXg6FY6t0zx/L7v6S16FdakVhGv9IKxVI7Nz+W2rn5sdTOzY+lieUMy3rUX19br/MTS/lLP5baufmx1M7Nj6Vyjx9L5R43ltGvtEKxVO7xY6nc48dSucePpYmlG0vlHj+Wyj1+LJlzz08+ydm+iJz98furz/OdJnPy8afJnH3caUa/1QpGkzn/+NNkTkD+NJkzkD9NE805mtZ/0zz+oPm/v3pcLx876tun6P/4Kb5+RteGvX3f9yExxyuYITHnNpghKRACDEk5E2BIiq/xhxT9kq+G9J8hKWwDDEkZHmBIWg0ADMk0pPhD0sZh7pNcD3t95+v9q/+kqdWAJ01leE+aCtueNJWKHWlGP8gMRlM505OmAuEkzat+0bTyiaaSmydNE01HmspCnjSVhTxpKgt50lQW8qSpLPRzmu8a/6CZ60j7dprKQp40lYX+z12FG/O5+Ck+Jj63fJRA7vkoU9zzUUq45yPff88nlZMf/fXj7zE+lWLlOtQ+pTiVI55SnMq1TilO5UOnFBud4lRecUpxKvc3pTiVn5tSnMqhTSlm81wl15HoKcVsnqvkOrg8pZjNc5WH0Slm81wl1yHgKcVsnqvkOqo7pZjOc+U6UDulmM5z5Tr2OqWYznPlOpw6pZjOc+U6QjqlmM5z5TroOaWYznPlOo45pZjOc510nuuk81y5DrNOKabzXCed5zrpPFeuQ7ZTiuk8V66jsFOK6TxXrgOrU4rpPFeuY6VTiuk8V67Dn1OK6TxXriOaU4rpPFeug5RTiuk8V67jjlOK6TxXrkOJU4rpPFeuo4NTiuk8V67zfVOK6TxXrjN4U4rpPFeuc3JTiuk8V66zbFOK6TxXroNhU4rpPFeuU1ZTiuk8V64jS1OK6TxXrvM/U4rpPFeuwzRTiuk8V65LLFOK6TxXrosmU4rpPFeuyyBTiuk8V64LG1OK6TxXrksVU4rpPFeuiw9Tiuk8V67LCVOK6TxXrgsEU4rpPFeuJv8pxXSeK1fb/pRiOs+VqxF/SjGd58rVWj+lmM5z0fXQF7oe+kLXQ1/oeugLXQ99oeuhL3Q99IWuh77Q9dAXuh76StdDX3N1lP/w/lUfX5/k/OZri52/vrbY9Yllqjf9ZpbMdw+9WTLfSPRmyXxP0Zsl8+1Fb5bMF9edWeZqxt/MkvnaujdL5lvr3iyVe/xYmlhOseyvb/xckX5iqdzjx1K5x4+lco8fS+WeOZbtN8v6iaVyjxvLXNcpNrNU7vFjqdzjx1K5x4+lieUUy/L6OWSpn34Omeu+yGaWyj1+LJV7/Fgq9/ixVO5xY5nrQsxmlso9fiyVe/xYKvf4sTSxdGOp3OPHUrnHj6Vyjx9L5R4/lso9bixzXWnazFK5x4+lco8fS+UeP5Ymlm4slXv8WCr3+LFU7vFjqdzjx1K5x41lrktpm1kq9/ixVO7xY6nc48fSxNKNpXKPH0vlHj+Wyj1+LJV7/Fgq97ixzHWtcDNL5R4/lso9fiyD+8uj/v4g53l+w3KmfSD6Xb8FioN7tQWKgzuqBYqD+x5/xdHv+i1QHNxDLFAc/E2/QHHwPeQCxUanmM5zRb/r90PFE50t0e/6LVCcy3PNKM7luSYUR7/r90PFE50N0e/6LVCcy3PNKM7luWYUG53iXJ5rRnEuzzWxy4x+12+B4lyea0ZxLs81oTj6Xb8FinN5rhnFuTzXjOJcnmtGsdEpzuW5ZhTTea7od/0WKKbzXNHv+rkrbtHv+i1QzOa52oPNc7XotxsXKDY6xWyeq0W/VrhAMZvnatEv/y1QTOe5ol/RW6CYznNFv0i3QDGd54p+3W2BYjrPFf1S2gLFdJ4r+tWxBYrpPFf0C14LFNN5rujXsBYopvNc0S9LLVAc+n08xvj9J6DHeXwjeLTXr9CPdn0SHPp1vEJw6LfxAsGxz8qsEBz6XbxCcOhX8Q8F/+zv1kd/PdPH+PRMj31zZT+e0C/5/XhCb2H24wm9stmPJ5OfXIAnk/tcgCeTV11XSPP5Q/9GGfvICBbKTP56M0pe5+6Oktflu6M0ofRCyZse3FHyJg13lLypxB0lb4JxR6m044Uy9mkRLJRKO24olXbcUCrtuKE0ofRCqbTjhlJpxw2l0o4bSqUdN5RKO14oYx8UwUKptOOGUmnHDaXSjhtKE0ovlEo7biiVdtxQKu24oVTacUOptOOFMvaBIiyUSjtuKJV23FAq7bihNKH0Qqm044ZSaccNpdKOG0qlHTeUSjteKGOfBsNCqbTjhlJpxw2l0o4bSpmhGZQTl2Vb7AtYUChjn12Kg3KinSr2PScslHrtuKE0ofRCqSWbG0ot2dxQylfOoKxH/fW19To/oZSvdEOpJZsTyh77LhkWSqUdN5RKO24olXbcUJpQeqFU2nFDqbTjhlJpxw2l0o4bSqUdL5SxLwJioVTacUOptOOGUmnHDaUJpRdK4rTzgw9yHl8sz+Mqvz9HH//01aW8vrgdn8ATZ6O94ImT1F7wxLlrL3jilOYE/jfM2FdE0WASJzV/mMRZzR8mcVrzh2mC6QdTic0RplKYI0wlqzmY48uzn4/+B8x/t8RJdS4ZCrySlT/48/ziYeUD+FTno6HAK7FtAq90twm8kuAm8Cbwe8ArYW4CrzS6APzET0iID6JvBq/kugm8kuse8Mwn338C/rz6l8Ru34A/ytenLvYJvJLrJvBKrv7gnVuaOvOhepwhmYYUf0hKzwBDUtIGGJJSOcCQlOABhqS0H39IRZsBgCFpiwAwJG0cAIakjQPAkExDij8kbRwAhqSNA8CQtHEAGJI2DgBD0sYh/pCqNg4AQ9LGAWBI2jgADEkbB4AhmYYUf0jaOAAMSRsHgCFp4wAwJG0cAIakjUP8ITVtHACGpI0DwJC0cQAYkjYOAEMyDSn+kJST9g5p4qh6b8pJ8YfU5e42D+n748a9y90BDEnuDmBIpiHFH5J+ngQwJP08CWBIykl7hzRTG9yVkwCGpJ8nxR/S0M+TAIakjQPAkLRxABiSNg4AQzINKf6QtHEAGJI2DgBD0sYBYEjaOAAMSRuH8EMaD20cAIakjQPAkLRxABiSNg4AQzINKf6QtHFYMKQffOdj/P7M43j7zA/7tyPVfiLdSLXNSDdS7T7SjVSbkrgj/T2mQ7sSiDFpWwIxJu1LIMakjQnEmExjQhiTtiYQY9ImBGJM2m5AjEkbC4gxaQuxe0zthfp8HPWPMf3D5/j+Ovs4tbFIN1JtN5BG6lwcNE5tTajHr20M9fhN42cev7ZH1OPXVop6/Np2UY9fWzTq8Ws7xzz+S5s86vFr60c9fm39qMevrR/1+E3jZx6/tn7U49fWj3r82vpRj19bP+rxa+vHPH7T1o96/Nr6UY9fWz/q8WvrRz1+0/iZx6+tH/X4lfuzjn/iqu0w5X7m8Rc5/7Tj//7q4Shy/tTjN42fefxy/tTj18/7qcevn/dTj1+5P+v4Z5qAi3I/8/irft5PPX79vJ96/Nr6UY9fWz/q8ZvGzzx+bf2ox6+tH/X4tfWjHr+2ftTj19aPefxNWz/q8WvrBzX+n3znY7w+83E+3n7m14/3fwDa+5H/A9Dmj/wfgOkfAPc/AG3/yP8BaP9H/g9AG0DyfwDaAeb4B/A2Uu31so20a1e3d6Tnozy+RjrKNyOduajXtX9LN1Jt1JBG6l2e0LVPox6/afzM49cujXr82qRRj197NOrxa4tGPX5t3JjHP7Sdox6/NnnU49fWj3r82vpRj980fubxa+tHPX5t/ajHr60f9fi19aMev7Z+vOMfT14aP/P4tfWjHr+2ftTj19aPevym8TOPX1s/6vFr60c9fuX+rOP//kreeBzK/dTjl/NPO/5vL+U8x28aP/P45fypxy/nTz1+/byfevz6eT/1+JX7s47/+8Lk8TiV+6nHr5/3U49fP++nHr+2ftTjN42fefza+lGPX1s/6vFr60c9fm39qMevrR/z+C9t/ajHr60f1Ph/8J1n7mM8/wFo70f+D0CbP/J/AKZ/ANz/ALT9I/8HoP0f+T8AbQDJ/wFoB5jjH8DbSLXXyzZS065u80ifT9PXdz6u9s1Ij+c4XgqPyz4NVRu4hEPVVg1pqPb1xXY9vvnO71/bP41fOzXq8ZvGn3T8z8/8+sZWPo1f+zTq8WubRj1+7dKox69NGvX4tXVjHn/Rhi7t+Et5feN2fBq/dnnU49fWj3r82vpRj980fubxa+tHPX5t/ajHr60f6vg//RSvaJOXbqTazmUbadXGLd1ItUVLN1JtxtKNVNuudCM1jTTbSLWVSjdSbZrSjVTbo90j/f23Wkf97m+15v4GpGp/lHCo2iDlG2rTDinhULVFSjhU7ZESDlWbpIRDNQ0131C1TUo4VO2TEg5VG6WEQ9VGKeFQtVHKN9SujVLCoWqjlHCo2iglHKo2SgmHahpqvqFqo5RwqNooJRyqNkoJh6qNUsKhaqOUb6hDG6WEQ9VGKeFQtVFKOFRtlBIO1TTUfEPVRinhULVRSjhUbZQSDlUbpYRD1UYp3VCfGDTUfEPVRinhULVRSjhUbZQSDtU01HxD1UYp4VC1UUo4VG2UEg5VG6WEQ9VGKd9QD22UEg5VG6WEQ9VGKeFQtVFKOFTTUPMNVRulhEPVRinhULVRSjhUbZQSDlUbpXxDPbVRSjhUbZQSDlUbpYRD1UYp4VBNQ803VG2UEg5VG6WEQ9VGKeFQtVFKOFRtlPIN9dJGKeFQtVFKOFRtlBIOVRulhEM1DTXfULVRSjhUbZQSDlUbpYRD1UYp4VC1Uco3VNNGKeFQtVFKOFRtlBIOVRulhEM1DTXfULVRSjhUbZQSDlUbpYRD1UYp4VC1Uco31KKNUsKhaqOUcKjaKCUcqjZKCYdqGmq+oWqjlHCo2iglHKo2SgmHqo1SwqFqo5RvqFUbpYRD1UYp4VC1UUo4VG2UEg7VNNR8Q9VGKeFQtVFKOFRtlBIOVRulhEPVRinfUJs2SgmHqo1SwqFqo5RwqNooJRyqaaj5hqqNUsKhaqOUcKjaKCUcqjZKCYeqjVK+oXZtlBIOVRulhEPVRinhULVRSjhU01DzDVUbpYRD1UYp4VC1UUo4VG2UEg5VG6V8Qx3aKCUcqjZKCYeqjVLCoWqjlHCopqHmG6o2SgmHqo1SwqFqo5RwqNooJRyqNkrphno+tFFKOFRtlBIOVRulhEPVRinhUE1DzTdUbZQSDlUbpYRD1UYp4VC1UUo4VG2U8g310EYp4VC1UUo4VG2UEg5VG6WEQzUNNd9QtVFKOFRtlBIOVRulhEPVRinhULVRyjfUUxulhEPVRinhULVR+ptDfQOvrc8m8Cbwe8Bre7IJvDYcm8BrC7EJvDYFm8ArzU+Bv87ykni9A/lH8HNO/lLm3oZeydgf/WWvT30V++Y716P++tp6nZ+GpKQLMCSlYoAhmYa0dUhP3/b6xlY+DUlpG2BISuYAQ1KKBxiSEj/AkLQdiD8k0x4BYEjaOGweUvn6xu34NCRtHACGpI0DwJBMQ4o/JG0cAIakjQPAkLRxWDqk+hG8tgibwGszsAd8UdrfBF4JfhN4pfI58P34Aj/6N+Dnfk+mKGtvQ29C747e+xcrihI0wJCUoPcOaebnI0UJGmBIStsAQ1Iyjz+kqhQPMCQlfoAhaTuweUgTPx+p2iMADMk0pPhD0sYBYEjaOAAMSRsHgCFp4wAwJG0clg7p409Gm7YIm8BrM7AJvNL+JvBK8JvAm8DvAa+kvQm80vMm8ErEm8Ar5W4Cr+Q6Bd6O8ZJo13e1g3O/39iVXbehV3rdhl75dRt6Jdht6E3od6FXit2GXjl2G3ol2W3olWW3oVea3YV+KM1uQ680uw290uw29Eqz29Cb0O9CrzS7Db3S7Db0SrPb0CvNbkOvNLsJ/fVQmt2GXml2G3ql2W3olWa3oTeh34VeaXYbeqXZbeiVZrehV5rdhl5pdhf6Q2l2G3ql2W3olWa3oVea3YbehH4XeqXZbeiVZrehV5rdhl5pdht6pdld6E+l2W3olWa3oVea3YZeaXYbehP6XeiVZrehV5rdhl5pdht6pdlt6JVmd6G/lGa3oVea3YZeaXYbeqXZbehN6HehV5rdhl5pdht6pdlt6JVmt6FXmt2F3pRmt6FXmt2GXml2G3ql2W3oTeh3oVea3YZeaXYbeqXZbeiVZrehV5rdhb4ozW5DrzS7Db3S7Db0SrPb0JvQ70KvNLsNvdLsNvRKs9vQK81uQ680uwt9VZrdhl5pdht6pdlt6JVmt6E3od+FXml2G3ql2W3olWa3oVea3YZeaXYX+qY0uw290uw29Eqz29ArzW5Db0K/C73S7Db0SrPb0CvNbkOvNLsNvdLsLvRdaXYbeqXZbeiVZrehV5rdht6Efhd6pdlt6JVmt6FXmt2GXml2G3ql2V3oh9LsNvRKs9vQK81uQ680uw29Cf0u9Eqz29ArzW5DrzS7Db3S7Db0SrOb0NtDaXYbeqXZbeiVZrehV5rdht6Efhd6pdlt6JVmt6FXmt2GXml2G3ql2V3oD6XZbeiVZrehV5rdhl5pdht6E/pd6JVmt6FXmt2GXml2G3ql2W3olWZ3oT+VZrehV5rdhl5pdht6pdn//UHe8Jjw3OFRKrzFo+R2i0fp6haPEtAtHqWUOzyXksQtHrn9Wzxy5Ld45Jpv8Zjw3OHJ5JpH77++eoz2SXAmHzwlOJOznRKcyatOCc7kPmcEWyY/OSU4k0OcEpzJ800JzuTipgQbm2A2p2VsTsvYnJaxOS1jc1qFzWkVNqdV2JxWYXNaxdgEszmtwua0CpvTKmxOq7A5rcrmtCqb06psTquyOa1qbILZnFZlc1qpbs9PCWZzWqnurM8ITnXdfEowm9NKdcl7SjCb00p1tXpKMJvTSnWheUowm9NKdY14SjCb00p1eXdKMJvTSnVldkowm9NKdVF1SjCb00p1PXRKMJvTSnUpc0owm9NKdRVySjCb00p1AXFKMJvTSnXtb0owm9NKddluSjCb00p1xW1KMJnTKqkulk0JJnNaJdV1rinBZE6rPIxNMJnTKqmuLk0JJnNaJdWFoSnBbE4r1TWdKcFsTivV5ZgpwWxOK9WVlCnBbE4r1UWQKcFsTivV9YspwWxOK9WlhynBbE4r1VWDKcFsTivVdYApwWxOK1WD/5RgNqeVqmV/SjCb00rVhD8lmM1ppWqrnxLM5rRSNcpPCWZzWmwd8YWtI76wdcQXto74wtYRX9g64gtbR3xh64gvbB3xha0jvrB1xBe2jvjC1hFf2DriC1tHfGHriC9sHfGFrSO+sHXEF7aO+MLWEV/YOuILW0d8YeuIL2wd8YWtI76wdcQXto74wtYRX9g64gtbR3xh64gvbB3xha0jvrB1xBe2jvjC1hFf2DriC1tHfGHriC9sHfGFrSO+sHXEF7aO+MLWEV/YOuILW0d8YeuIL2wd8YWtI76wdcQXto74wtYRX9g64gtbR3xh64gvbB3xha0jvrB1xBe2jvjC1hFf2DriC1tHfGHriK9sHfGVrSO+snXEV7aO+PowNsFkTquydcRXto74ytYRX9k64itbR3xl64ivbB3xla0jvrJ1xFe2jvjK1hFf2TriK1tHfGXriK9sHfGVrSO+snXEV7aO+MrWEV/ZOuIrW0d8ZeuIr2wd8ZWtI76ydcRXto74ytYRX9k64itbR3xl64ivbB3xla0jvrJ1xFe2jvjK1hFf2TriK1tHfGXriK9sHfGVrSO+pmoQf37sx9eXn+Obb/6TD3KeV/+S2O335+jjv/3Oj/L6zOdjlDd49k/fuY+v73x+852Lnb++ttj1afyZXInG/9Pxp2qX1/h/PP5MjlXj//H4M/l3jf/H48+UZjT+H4/fNH7m8WdKuhr/j8ef6ScsGv+Px5/p500a/4/Hr60f9fi19Us7/v76xuX9+/4x/lSXjjT+H49fWz/q8WvrRz1+bf3Sjr/9Hn/9NH7T+JnHr60f9fi19aMev7Z+1OPX1o96/Nr6pR1/eX3kUj/9pm+qq5sa/4/Hr60f9fi19aMev7Z+1OM3jZ95/Nr6UY9fWz/q8WvrRz1+bf2ox6+tH/P4U12A1/h/PH5t/ajHr60f9fi19aMev2n8zOPX1o96/Nr6UY9fWz/q8WvrRz1+bf2Yxz+09aMev7Z+1OPX1o96/Nr6UY/fNH7m8WvrRz1+bf2ox6+tH/X4tfWjHr+2fsTjbw9t/ajHr60f9fi19aMev7Z+1OM3jZ95/Nr6UY9fWz/q8Wvrxzz+Q7l/7/iP5wy+xn9Uz/F/f82jHcr91ONX7qcev3I/9fhN42cev3I/9fiV+6nHr9xPPX79tg/1+PXbPszjP7X1ox6/tn5px//9Gcd2autHPX5t/ajHbxo/8/i19Us7/u8PubVTWz/q8WvrRz1+bf2ox6+tH/P4L239qMevrV/a8U/8pu+lrR/1+LX1ox6/afzM49fWj3r82vpRj19bP+rxa+tHPX5t/ZjHb9r6UY9fWz/q8WvrRz1+bf2ox28aP/P4tfWjHr+2ftTj19aPevza+lGPX1s/5vEXbf2ox6+tH/X4tfWjHr+2ftTjN42fefza+lGPX1s/6vFr60c9fm39qMevrR/z+Ku2ftTj19aPevza+lGPX1s/6vGbxs88fm39qMevrR/1+LX1ox6/tn7U49fWj3n8Tbl/wfidb240pXOAIZmGFH9ISroAQ1IeBRiSUiPAkJTtAIakBBZ/SF2/HQEwJP0OA8CQtHEAGJI2DpuHNHGOrZuGFH9I2jgADEkbB4AhaeOweUgTh4K6Ng4AQ9LGIf6QhjYOAEPSxgFgSNo4AAxJG4fNQ5r4baFhGlL8IWnjADAkbRwAhqSNA8CQtHEAGJI2DuGH1B/aOAAMSRsHgCFp4wAwJG0cAIZkGlL8IWnjADAkbRwAhqSNA8CQtHEAGJI2DvGHdGjjADAkbRwAhqSNA8CQtHEAGJJpSPGHpI0DwJC0cQAYkjYOAEPSxgFgSNo4xB/SqY0DwJC0cQAYkjYOAEPSxgFgSKYhxR+SNg4AQ9LGAWBI2jgADEkbB4AhaeMQf0iXNg4AQ9LGAWBIxjsk337HfhGnGW+UxJnDGyVxMvBGSezfvVESu2xnlEbshb1REjtWb5TEP8nyRkn88yZvlCaUXiiVdqZQfl/C3E1pxw2l0o4bSqUdN5RKO1Mov6807UVpxw2l0o4bSqUdN5RKO24oTSi9UCrteP3EsSjtuKFU2nFDqbTjhlJpxwtlVdpxQ6m044ZSaccNpdKOG0oTSi+USjtuKJV23FAq7bihVNpxQ6m044WyKe24oVTacUOptOOGUmnHDaUJpRdKpR03lEo7biiVdtxQKu24oVTa8ULZlXbcUCrtuKFU2nFDqbTjhtKE0gul0o4bSqUdN5RKO24olXbcUCrteKEcSjtuKJV23FAq7bihVNpxQxnbV/by+uIxSv2G5GivKoHRPlUJjNjmz19vbIfmrze2jfLWOx6xvY6/3tiG5Ed6f/bkf0aEr2/dPtGJ7TF204ltG3bTMdG5oRN7lbmbTiIXuYBOIs+5gE4ih7ouy33+zG8kE3nfvSSPRK56M0lav+5Oktbbu5OkzQHuJE0knUjS5gt3krRZxJ0kbW5xJ6mM40VSGceJZPBL6kgklXG8SCrjeJFUxvEiaSLpRFIZx4ukMo4XSWUcL5LKOF4klXGcSAa/3YxEUhnHi6QyjhdJZRwvkiaSTiSVcbxIKuN4kVTG8SKpjONFUhnHiWTwm9xIJE0kXQ72juAHe5FI6o3j85euI/hhVCCSwe+iIpHUVs2LpLZqXiS1VfMiaSL5Pcl61F9fW6/zE0n5SS+S2qp5kdRWzYukMo4XSWUcJ5LBr6EikVTG8SKpjONFUhnHi6SJpBNJZRwvkso4XiR5M84PPsdxla/Cz6u+8WjjnSVvyvFnyZtz3FkGv4SKxZI36/iz5E07/ix5844/SxPLGZa9fLEc9oklb+bxZ8mbevxZKvf4sVTu8WOp3OPGMvhNVCyWyj0/ZGmP4xNL5R4/lso9fixNLCdY2lm/WF7lE0vlHj+Wyj1+LJV7/Fgq9/ixVO5xYxn8OioWS+Wem7+nDX7xdDcdZZM7OiY6N3SUH+7oKBHc0ZHHv6OT6V7uxPW1VPdyv9X7n38vmQ7mTglO5FHnBCeynXOCEznJOcHGJjiR35sTnMjCzQlO5MrmBFMZrf8IZnNamY6ozglmc1qZTpLOCWZzWpkOfM4JZnNamc5lzglmc1qZjk/OCWZzWplOOc4JZnNamQ4jzglmc1qZzgzOCWZzWpmO9s0JZnNamU7gzQlmc1qZDsrNCWZzWpnOs80JZnNamY6dzQlmc1qZTofNCWZzWpkOcc0JZnNamc5azQlmc1rG5rSMzWllOqg2J5jNaRmb0zI2p5XpAN2cYDanlemc25xgNqeV6TjanGA2p5Xp1NicYDanlelw15xgNqeV6QzWnGA2p5XpqNScYDanlelE05xgNqeV6eDRnGA2p5XpfNCcYDanlekUz5xgNqeV6ajNnGA2p5XpPMycYDanlenQypxgNqeV6WTJnGA2p5Xp+MecYDanlemMxpxgNqeV6SDFnGA2p5XptMOcYDanlelIwpxgNqeV6dzAnGA2p5WpuH9OMJvTylSYPyeYzWllqrWfE8zmtDKVz88JZnNaXBXx/xFM5rQOto74g60j/mDriD/YOuKfctgEkzmtg60j/mDriD/YOuIPto74I1OD+PGzY1R9fH2O85uvLXb++tpi10eUvPcE3VGaUHqh5L1U6I6S96yhO0reG4juKHnPnLuj5L1y7o0yUyP+bpS8N87dUSrtuKFU2plB2V/fuIzyEaUJpRdKpR03lEo7biiVdmZQtt8o60eUSjtuKJV2vFBmukqxG6XSjhtKpR03lEo7MyjL6yeOpX78iWOm6x+7USrtuKFU2nFDqbTjhlJpxw2l0o4XykyXYXajVNpxQ6m044ZSaccNpQmlF0qlHTeUSjtuKJV23FAq7bihVNrxQpnpOtNulEo7biiVdtxQKu24oTSh9EKptOOGUmnHDaXSjhtKpR03lEo7XigzXUjbjVJpxw2l0o4bSqUdN5QmlF4olXbcUCrtuKFU2nFDqbTjhlJpxwtlpiuFu1Eq7bihtNAo2/nSO/rZvkH5/OrXF7ePXQLB7+4tEBzboy0QHNtJLRAc2+8sEBzblfxI8M+e/1M9m8Gv9G3HE9s9bMcTe/+5HU/sneZ2PCY8d3gSuc8VeBJ51XXB7vNnfkeZyAXvRpnIX+9GSevc3VEGvxAJhZI2EfijpE0P/ihpk4Y/ShNKL5S0CcYfpdKOG0qlHTeUSjtuKJV2nFCewa+0QqFU2nFDqbTjhlJpxw2lCaUXSqUdN5RKO24olXbcUCrtuKFU2vFCeSjtuKFU2nFDqbTjhlJpxw2lCaUXSpmhmb+rmThZeQY/74uEMvgh1SgoJ/7a6wx+SBUKpV47bii1ZHNDqSWbG0ot2dxQyldOoKxH/fW19To/opSv9EIZ/JAqFEot2dxQKu24oVTacUNpQumFUmnHDaXSjhtKpR03lEo7biiVdrxQBj+kCoWSN+384HMcj2pf3/mty+mo5Q+YvHlnAUzexLMApgmmH0ze1LMAJm/uWQCTN/ksgMmbfX4Ec7xs5nE8ykeYvOnHH2bw06pgMJWAHGEqATnCVAJyhGmC6QdTCeinMN/Wdf83TCUgR5hKQI4wlYDu/sQk+PnU3XiCn0Tdjke54xaPksQtHmWDWzwmPHd4Mh2OmijjP4Mf91wgONPhqCnBmQ5HTQlO5D6nBAc/OrlAcCKHOCc4keebE5zIxc0JNjbBbE4r1YnOKcFsTivVic4pwWxOK9PRzTnBbE4r02HMOcFsTivT8co5wWxOK9OByTnBbE4r07HGOcFsTivT4cM5wWxOK9MRwTnBbE4r00G+OcFsTivTcbs5wWxOK9OhuDnBZE7rynR0bU4wmdO6Mh0wmxNM5rSuh7EJJnNaV6bDWnOCyZzWlelI1ZxgNqeV6eDTnGA2p5XpeNKcYDanlekQ0ZxgNqd1sDmtg81pZbqANSeYzWmdbE7rZHName6FzQlmc1qZbm/NCWZzWpnuWM0JZnNamW5CzQlmc1qZ7ivNCWZzWpluFc0JZnName7+zAlmc1qZbujMCWZzWpnu0cwJZnNamW67zAlmc1qZrqTMCWZzWsQ3HX5ybtrOX19b7PqIUrfs3FDqlp0bSt2y80JJfMvBHaUud7uh1OVuN5S63O2G0oTSC6Uud7uhVNpxQ6m0M4Oyv75xGeUjSqUdN5RKO14oiW9CuKNU2plB2X6jrB9RKu24oVTacUNpQumFUmnHDaXSjhtKpZ0ZlOX1E8dSP/7EMdP1j90olXa8UGa6WLIbpdKOG0qlHTeUSjtuKE0ovVAq7bihVNpxQ6m044ZSaccNpdKOF8pMV4N2o1TacUOptOOGUmnHDaUJpRdKpR03lEo7biiVdtxQKu24oVTa8UKZ6XLXbpRKO24olXbcUCrtuKE0ofRCqbTjhlJpxw2l0o4bSqUdN5RKO04oLdP1vN0olXbcUCrtuKFU2nFDaULphVJpxw1lbF9ZzF4o6+jfoHyCf31xuz4Kju3+/AUHv7u3QHBsJ7VAcGy/s0BwbFfyI8E/e/7P9Gxa8Ct92/HEdg/b8cTef27HE3unuR1PIj+5Ak8i97kAT/DLhQvx/CTYff7M7ygTueDdKBP5690oaZ27P0oTSi+UtInAHyVtevBHSZs0/FHSphJ/lLQJxh1l8OuhUCiVdtxQKu24oVTacUNpQumFUmnHDaXSjhtKpR03lEo7biiVdrxQBr/gC4VSaccNpdKOG0qlHTeUJpReKJV23FAq7bihVNpxQ6m044ZSaccLZfD73VAolXbcUCrtuKFU2nFDaULphVJpxw2l0o4XyuDnfYOgnDmFbsHP+0Kh1GtnBuVMi0DwQ6pQKPXacUOpJZsbSi3Z3FBqyeaFMvgh1SAo61F/fW29zo8o5SvdUGrJ5oZSSzY3lCaUXiiVdtxQKu24oVTacUOptOOGUmnHC2XwQ6pQKJV23FAq7bihVNpxQ2lC6YVSaccNpdKOG0qlHTeUvGnnB5/jsC+Wh13l9+do9q/B82ajveCDH2lNDJ43d20Gz5vSnMC/w+TNaQtgmmD6weTNagtg8qa1BTB589oCmEpsjjCVwtxgluAHYcFgKi05wlQCmoLZXwqPctU/YP7DVx/22kUeR3n71K38gV55aRt6E3pv9N5/HlmCn7PVkP7/ISkNAgxJKRNgSEqvAENSKo4/pEynvfMOSSkeYEjaDgAMSXsEgCGZhhR/SNo4AAxJGweAIWnjADAkbRwAhqSNQ/whndo4AAxJGweAIWnjADAkbRwAhmQaUvwhaeMAMCRtHACGpI0DwJC0cQAYkjYO8Yd0aeMAMCRtHACGpI0DwJC0cQAYkmlI8YekjQPAkLRxABiSctLWIc1cMyumnAQwJLm7vUOauCr0hKAhxR+S3B3AkOTuAIaknycBDEk/TwIYknLS1iHNNKGWopwEMCT9PAlgSPp5EsCQtHEAGJJpSPGHpI0DwJC0cQAYkjYOAEPSxgFgSNo4xB9S1cYBYEjaOPgP6Sff+Xh8tXgfx3uL9x99xlU7B4gxaesAMSbTmBDGpM0DxJi0e4AYk7YPEGPS/mHzmI72NaazfhyTNhAIY2raQUCMSVsIiDFpCwExJm0hIMZkGhPCmLSF2DymqYt/TVsIiDFpCwExJm0hIMakLQTCmLq2EBBj0hYCYkzaQvzFMb2D115hE3gT+Anwz5+dfYHvxzfgnz+Os6+HzWUf0Sv9b0OvRO+O/jy/cFj5CF4ZfRN4pe5N4JWj94AfSsabwCvrbgKv9OoPvpQXjnZ8BK/0ugm8Cfwe8Mqum8AruW4Cr+S6CbyS6ybwSq5bwNeHkusm8Equm8AruW4Cr+S6CbwJ/AT455Ph9Z3r0b4BP/fDv/pQdt2GXul1G3rl123olWC3oVeG3YX+UIrdhl45dht6Jdlt6JVlt6E3od+FXml2G3ql2W3olWa3oVea3YZeaXYX+lNpdht6pdlt6JVmt6FXmt2G3oR+F3ql2W3olWa3oVea3YZeaXYbeqXZXegvpdlt6JVmt6FXmt2GXml2G3oT+l3olWa3oVea3YZeaXYbeqXZbeiVZnehN6XZbeiVZrehV5rdhl5pdht6E/pd6JVmt6FXmt2GXml2G3ql2W3olWZ3oS9Ks9vQK81uQ680uw290uw29Cb0u9ArzW5DrzS7Db3S7Db0SrPb0CvN7kJflWa3oVea3YZeaXYbeqXZbehN6HehV5rdhl5pdht6pdlt6JVmt6FXmt2FvinNbkOvNLsNvdLsNvRKs9vQm9DvQq80uw290uw29Eqz29ArzW5DrzS7C31Xmt2GXml2G3ql2W3olWa3oTeh34VeaXYbeqXZbeiVZrehV5rdhl5pdhf6oTS7Db3S7Db0SrPb0CvNbkNvQr8LvdLsNvRKs9vQK81uQ680uw290uwm9O2hNLsNvdLsNvRKs9vQK81uQ29Cvwu90uw29Eqz29ArzW5DrzS7Db3S7C70h9LsNvRKs9vQK81uQ680uw29Cf0u9Eqz29ArzW5DrzS7Db3S7Db0SrO70J9Ks9vQK81uQ680uw290uw29Cb0u9ArzW5DrzS7Db3S7Db0SrPb0CvN7kJ/Kc1uQ680uw290uw29Eqz29Cb0O9CrzS7Db3S7Db0SrPb0CvNbkOvNLsLvSnNbkOvNLsNvdLsNvRKs9vQm9DvQq80uw290uw29Eqz29ArzW5DrzS7C31Rmt2GXml2G3ql2W3olWa3oTeh34VeaXYbeqXZbeiVZrehV5rdhl5p9n99jjc8VYnzFo9S4S0eJbdbPEpXt3hMeO7wKKXc4lGSuMUjt3+LR478Fo9c8x2eJtd8iyeRax69v754tI+CE/ngOcGJnO2cYGMTnMh9zglO5CfnBCdyiHOCE3m+OcGJXNyU4J7Il80JZnNanc1pdTan1Y1NMJvT6mxOq7M5rc7mtDqb0xpsTmuwOa3B5rQGm9MaxiaYzWkNNqc12JzWYHNag8xp9QeZ0+oPMqfVH2ROq2e6PT8n2NgEkzmtnum6+ZxgMqfVM13ynhPM5rQyXa2eE8zmtDJdaJ4TzOa0Ml0jnhPM5rQyXd6dE8zmtDJdmZ0TzOa0Ml1UnRPM5rQyXQ+dE8zmtDJdypwTzOa0Ml2FnBPM5rQyXUCcE8zmtDJd+5sTzOa0Ml22mxPM5rQyXXGbE8zmtDJdLJsTzOa0Ml3nmhPM5rQyXaKaE8zmtDJdXZoTzOa0Ml0YmhPM5rQyXdOZE8zmtDJdjpkTzOa0Ml1JmRPM5rQyXQSZE8zmtDJdv5gTzOa0Ml16mBPM5rQyXTWYE8zmtDJdB5gTzOa0MjX4zwlmc1qZWvbnBLM5rUxN+HOC2ZxWprb6OcFsTitTo/ycYDanxdYR39k64jtbR3xn64jvbB3xna0jvrN1xHe2jvjO1hHf2TriO1tHfGfriO9sHfGdrSO+s3XEd7aO+M7WEd/ZOuI7W0d8Z+uI72wd8Z2tI76zdcR3to74ztYR39k64jtbR3xn64gfbB3xg60jfrB1xA+2jvjxMDbBZE5rsHXED7aO+MHWET/YOuIHW0f8YOuIH2wd8YOtI36wdcQPto74kalB/PmpH1+f+hzffO+ffI7D+kvhUa76+3M0+6fv3MfXdz6/+c7Fzl9fW+z6OKRE3iHtkDI1tecdUiKPlndIiXxl3iEl8sJ5h2QaUvwhJcoceYeUaCOdd0iJtuh5h6SNA8CQtHHYO6T++shllE9DynSxJO+QtHEAGJI2DgBD0sZh75Da7yHVj0MyDSn+kLRxABiSNg4AQ9LGAWBI2jgADEkbh71DKq/fFir1428LZbrclXdI2jgADEkbB4AhaeMAMCTTkOIPSRsHgCFp4wAwJG0cAIakjQPAkLRxiD+kTBcs8w5JGweAIWnjADAkbRwAhmQaUvwhaeMAMCRtHACGpI0DwJC0cQAYkjYO8YeU6ZJz3iFp4wAwJG0cAIakjQPAkExDij8kbRwAhqSNA8CQtHEAGJI2DgBD0sYh/pCaNg4AQ9LGAWBI2jgADEkbB4AhmYYUf0jaOAAMSRsHgCFp4xB/SJ03J3n3O3beNOOOkjdzuKPkTQbuKE0ovVDyumx3lLxe2B0lr2N1R8n7kyx3lLw/b/JGOZR23FAq7cygnClhHko7biiVdtxQmlB6oVTamUE5U2k6lHbcUCrtuKFU2nFDqbTjg/I//3Gh9EKptOPzE8fnf1xpxw2l0o4bShNKL5RKO24olXbcUCrtuKFU2nFDqbTjhfJQ2nFDqbTjhlJpxw2l0o4bShNKL5RKO24olXbcUCrtuKFU2nFDqbTjhfJU2nFDqbTjhlJpxw2l0o4bShNKL5RKO24olXbcUCrtuKFU2nFDqbTjhfJS2nFDqbTjhlJpxw2l0o4bShNKL5RKO24olXbcUCrtuKFU2nFDqbTjhdJi+8qrvTQMG49vUI726hIY7fooOLb7WyDY2ATHdlILBMf2OwsEx3YlPxL8s+f/6F/fenx+psd2GtvxxHYPu/GU2PvP7Xhi7zS340nkJ1fgSeQ+V+AxVjw/CXafP/M7ykQueDfKRP56N0pa5+6Pktbl+6OkTQTuKCttevBHSZs0/FHSphJ/lLQJxh+lCaUXSqUdN5RKO24olXbcUCrtuKFU2vFCGfzyNxRKpR03lEo7biiVdtxQmlB6oVTacUOptOOGUmnHDaXSjhtKpR0vlMHvd0OhVNpxQ6m044ZSZmjm72q+P1n5RCkz5IUy+CHVKChn/tor+CFVKJR67bih1JLNDaUJpRdKLdncUMpXTqCsR/31tfU6P6KUr3RDqSWbG0ot2ZxQHsEPqUKhVNpxQ6m044ZSaccNpQmlF0qlHTeUSjtuKJV23FAq7bih5E07P/gc/+kC+frO9fj9OdrxDjP4KVUwmLyJZwFM3syzACZv6lkA0wTTDyZv8lkAkzf7/Ahmt6/vPK6PMHnTzwKYvPlnAUwlID+Ywc+rgsFUAnKEqQTkCFMJ6Icwn/+VjzBNMP1gKgE5wlQCuvkTkyP4+dTteJRSbvEod9zhCX66dDseZYNbPHL7t3gyHY6aKOM/gh/3XCA40+GoKcGZDkdNCU7kPucEJ/KTc4ITOcQpwZbI880JTuTi5gRnOtE5JZjNaaU60TklmM1ppTrROSWYzWllOro5J5jNaWU6jDknmM1pZTpeOSeYzWllOjA5J5jNaWU61jgnmM1pZTp8OCeYzWllOiI4J5jNaWU6yDcnmM1pZTpuNyeYzWllOhQ3J5jNaWU6ujYnmM1pZTpgNieYzWllOgY2J5jNaWU6rDUnmM1pZTpSNSeYzWllOvg0J5jNaWU6njQnmM1pZTpENCeYzWl1YxPM5rQyXcCaE8zmtDqb0+psTivTvbA5wWxOK9PtrTnBbE4r0x2rOcFsTivTTag5wWxOK9N9pTnBZE7rzHSraE4wmdM6M939mRNM5rTOh7EJJnNaZ6Z7NHOCyZzWmem2y5xgNqeV6UrKnGA2p0V80+En56btdYWg2PURpW7ZuaHULTs3lLpl54ZSt+zcUOpytxdK4jsO7ih1udsNpS53u6HU5W43lCaUXiiVdmZQ9tc3LqN8RKm044ZSaccNpdKOG0qlnRmU7TfK+gkl8a0Jd5RKO24olXbcUCrtuKE0ofRCqbQzg7K8PkapH3/imOn6x26USjtuKJV23FAq7XihzHRlZTdKpR03lEo7biiVdtxQmlB6oVTacUOptOOGUmnHDaXSjhtKpR0vlJkuHe1GqbTjhlJpxw2l0o4bShNKL5RKO24olXbcUCrtuKFU2nFDqbTjhTLTtbHdKJV23FAq7bihVNpxQ2lC6YVSaccNpdKOG0qlHTeUSjtuKJV2vFBmuvi3G6XSjhtKpR03lEo7bihj+8rzfH3xuK7xDcrRXl0Co33sEgh+d2+B4NgebYHg2E7KX3Dwu3sLBMd2JT8S/LPn/1TPZvArfdvxxHYP2/GY8Nzhib3T3I4nkZ9cgSeR+1yBJ5FXXRfsPn/md5SJXPBmlMGvLUKhpHXu/ihpXb4/StpE4I/ShNILJW3S8EdJm0r8UdImGH+USjtuKJV2nFBewS+eQqFU2nFDqbTjhlJpxw2lCaUXSqUdN5RKO24olXbcUCrtuKFU2vFCGfzqMBRKpR03lEo7biiVdtxQmlB6oVTacUOptOOFMvh53yAoZ05WXsHP+0Kh1GvH6a+9ruCHVKFQ6rXjhlJLNjeUWrK5odSSzQtl8EOqQVDWo/762nqdH1HKV7qh1JLNDaWWbG4oTSi9UCrtuKFU2nFDqbTjhlJpxw2l0o4XyuCHVKFQKu24oVTacUPJm3Z+8DmORzm/vnM9fn+OdvwB0wTTDyZv4lkAkzfzLIDJm3oWwOTNPQtg8iYff5jBz6qGgdnt6zuP6yNM3vSzACZv/lkAUwnIEaYJph9MJSBHmEpAjjCVgH4I8/lf+QhTCcgRphKQH8zgp1a3wHzHo0xzi0cp5RaPcsctHhOeOzzKBrd45PZv8WQ6HDVRxn8FP+65QHCmw1EzgoMfylwgOJH7nBOcyE/OCU7kEOcEG5vgRC5uTnCmE51TgtmcVqoTnVOC2ZxWqhOdU4LZnFamo5tzgtmcVqbDmHOC2ZxWpuOVc4LZnFamA5NzgtmcVqZjjXOC2ZxWpsOHc4LZnFamI4JzgtmcVqaDfHOC2ZxWpuN2c4LJnJZlOhQ3J5jMaVmmo2tzgsmclj2MTTCZ07JMx8DmBJM5Lct0WGtOMJvTynSkak4wm9PKdPBpTjCb08p0PGlOMJvTynSIaE4wm9M62JzWwea0Ml3AmhPM5rRONqd1sjmtTPfC5gSzOa1Mt7fmBLM5rUx3rOYEszmtTDeh5gSzOa1M95XmBLM5rUy3iuYEszmtTHd/5gSzOa1MN3TmBLM5rUz3aOYEszmtTLdd5gSzOa1MV1LmBLM5LeKbDj85N22vKwTFro8odcvOCyXxPQd3lLpl54ZSt+zcUOpytxtKE0ovlLrc7YZSl7vdUOpytxtKpR03lEo7Myj76xuXUT6hJL7d4I5SaccNpdKOG0qlnRmU7TfK+hGlCaUXSqUdN5RKO24olXbcUCrtuKFU2plBWV4/cSz1408cM13/2I1SaccNpdKOG0qlHTeUJpReKJV23FAq7bihVNpxQ6m044ZSaccLZaYLPLtRKu24oVTacUOptOOG0oTSC6XSjhtKpR03lEo7biiVdtxQKu14ocx0BWs3SqUdN5RKO24olXbcUJpQeqFU2nFDqbTjhlJpxw2l0o4bSqUdJ5Ql0yW63SiVdtxQKu24oVTacUNpQumFUmnHDaXSjhtKpR0vlMHv7h32+hzj6P0blN69AyX4jb7NcGJ7v81wYru5zXBMcD7Die24NsOJ7aE2w4ntijbDib3V3Qwn9p52L5zg9xI3w2F1yBNVPCX4HcbNcFgd8hQcE5zPcFgd8kR5SAl+N3IzHFaHPAWH1SFPwWF1yDNwgt+53AyH1SHP/PQh+P3MzXBYHfIUHBOcz3BYHfIUHFaHPAWH1SFPwWF1yFNwWB3yDJzg90k3w5FDvoEjh3wDRw75Bo4Jzmc4csg3cOSQb+DIId/AkUO+gSOH/BlO8Cu8m+HIId/AkUO+gSOHfAPHBOczHDnkGzhyyDdw5JBv4Mgh38CRQ/4MJ/jl1s1w5JBv4Mgh38CRQ76BY4LzGY4c8g0cOeQbOHLIN3DkkG/gyCF/hhP7rmLvX78u3J+gPOHM/KVe7EuJu+GY4HyGE9rn7IYT2ufshhPa5+yGE9rn7IYT2udshhP7zt9uOKE3gbvhyCHfwGF1yDN/dB/7Xt5uOKwOeQoOq0OegsPqkGf+dDr23bndcFgd8gyc2LfhdsNhdchTcFgd8hQcVoc889OH2DfWdsNhdchTcFgd8hQcVoc8BYfVIU/BYXXIE3Bq7Htiu+GwOuQpOKwOeQqOHPINHBOcz3DkkG/gyCHfwJFDvoEjh3wDRw75M5zYl9F2w5FDvoEjh3wDRw75Bo4Jzmc4csg3cOSQb+DIId/AkUO+gSOH/BlO7Mtou+HIId/AkUO+gSOHfAPHBOczHDnkGzhyyDdw5JBv4Mgh38CRQ/4MJ/ZltN1w5JBv4Nhfh+P893R1wxUqdwkVX0LDl9DxJQx4CRtuGLlLOPAlnPgSLnwJ+G9ni/12nvjj2Wqx385TEmK/nackxH47T0mI/Xae+NO8WmK/nackxH47T0mI/XaekhD77TwlIfbbeUpC7LfzzAajxH47T0mI/XaekhD77TwlIfbbeUZCjf12npIQ++08JSH223lKQuy385SE2G/nKQn4b+eK/3au+G/niv92rvhv54b/dm74b+eG/3Zu+G/nDU347hLw384N/+3c8N/ODf/t3PDfzh3/7dzx384d/+3c8d/OG1q43SXgv507/tu547+dO/7bueO/nQf+23ngv50H/tt54L+dfXpcj9enOo9qnhJmfivMp211r4SOL2GgS2g+/aJ7JRz4Ek58CRe+BMOXUPAlwL+d2yP223niV23bI/bbeUpC7LfzjIQj9tt5SkLst/PEL3m2I/bbeUpC7LfzlITYb+cpCbHfzlMSYr+dpyTEfjtPbDDaEfvtPCUh9tt5RsIZ++08JSH223lKQuy385SE2G/nKQmx385TEmK/nackxH47T0nAfzuf+G/nE//tfOG/nS/8t/OF/3a+8N/OPi1VeyXgv50v/Lfzhf92vvDfzhf+29nw386G/3Y2/Lez4b+dfVqq9krAfzsb/tvZ8N/Ohv92Nvy3c8F/Oxf8t3PBfzsX/LezT0vVXgn4b2eXfqSHlZeEx3h4Spj5rTCXfqS9Elz6kTZLOPAlnPgSLnwJhi+h4Euo+BIavgT8t3ON/Xae+VXbFvvtPCUh9tt5SkLst/OUhNhv55lf8nTpR9osIfbbeUpC7LfzlITYb+cpCbHfzlMSYr+dZzYYPfbbeUpC7LfzlITYb+cpCbHfzlMSYr+dpyTEfjtPSYj9dp6SEPvtPCUh9tt5SgL+23ngv50H/tt54L+dB/7beeC/nQf+23ngv50H/tt54L+dB/zbuT/g3879Af927g/4t3N/wL+d+wP+7dwf8G/n/oB/O/cH/Nu5P+Dfzv2B/3Y+8N/OB/7b+cB/Ox/4b2eXlqrNEvDfzgf+2/nAfTufj+P8fz6UYLSzvT7/OMbb52+//5fj3/4vP1Q+zPwvj3/9vzz/zf/yuTP/f85/bvF6ZpRf/8sx7I8B//4fjn/5P/znxqqZ/+Hxb/+H57/9H17/9n9o//Z/6PDcO0a9vube6zf/F1eP+uuL63X+r/8r+p8PVSN+qBbxQ/WIH2qs/VBf/yGPtpu5/9Dxt/5D59/6D11/6z9kf+s/VP7Wf6j+rf9Q+1v/of63/kN/Pff/55fcX9/7fPTfX92P3x/LHjE/Vuh83lr7+trrn18EFjqdzwgInc1nBBi6gNC5fEZA6FQ+IyB0Jp8REHpfPiMg9LZ8QkAJvSufEYD+Ji7ob+KC/iZ2adTYKgD9TVzQ38QF/U0cu89kRgD6mzh2l8mMAPQ3cewekxkB6G/i2B0mMwLQ38TAzRm/BOC2Wv2PgOB9Dbc/aP8fAbi/NfNLQOin0IwA3N+Y+SUA9/dlfgkA/m2Z/xEQ+j0w8ZPu2A0NEwJi9zPMCAidB2YEhH4TzwgI/SaeERD6TTwjIPSbeEZA6DfxjIDQb+IZAehv4thtDBMCYncxzAj4+2/ij5uG//21xzFedvQ4H29+9P0XbjY0MbhLuPAlGL6Egi+h4kto+BJ6HAm/P9SI96Gux1+/3nIcv//c5bC33+E87O1jHTE/VugrKzPjDn1jZUaAoQsIfV9lRkDo22czAkJfPpsREPru2YyA0FfPJgQcD3QBoS+ezQhAfxMf6G9il/aCrQLQ38QH+pv4QH8TH+hv4gP9TXyiv4lP9Dfxif4mPtHfxCf6m/hEfxOf6G/iE/1NfKK/iU/0N/GF/ia+Yt+f/va3k68r9HtgRkDop9D3v5l5XaGfQjMCQj+FJgRY6KfQjIDQeWBGQOg8MCMg9Hvg+18puiz0e2BGQOg8MCMgdB6YERD6TTwjIPSbeEZA6DfxhIAS+k08IyD0m3hGQOg38YwA9DexS3vJVgHob+Ly99/EP/llxkf//Utnj7df53v/pbPS8CV0fAkDXkJ94Es48CWc+BKu2BK+Mv5TwvGHhH/4zuPrOz/euvd7f5NrXHILl9zYDuGPX0v/9H+PsR3ClITYDmFKQmyHMCOhxXYIUxJiO4QpCbEdwpSE2A5h5m99XJqGNkuI/SafkhDo7fz7QwV63/7+UC5v0PG6RnGe5fzmQx3l63RFsQ8fagT8UC7tPT/6UM6/qeLS3rNVwIku4EIXYOgCCrqAii6goQvo6AIGuICB/iYe6G/igf4mHuhvYpfenq0C0N/EA/1NPNDfxAP9TTzA38T2AH8T2wP8TWwP8DexPcDfxPYAfxPbA/xNbA/wN7E9wN/E9gB/E9sD/U18oL+JD/Q38YH+Jj7Q38Q+3UI7BaC/iQ/0N/GB/iY+0N/EB/qb+ER/E5/ob+IT/U18or+JfbqFdgpAfxOf6G/iE/1NfKK/iU/0N/GF/ia+0N/EF/qb+EJ/E/u0O+0UgP4mvtDfxBf6m/hCfxNf6G9iQ38TG/qb2NDfxIb+Jvbp19opAP1NbOhvYkN/Exv6m9jQ38QF/U1c0N/EBf1NXNDfxD79WjsFoL+JC/qbuKC/iQv6m7igv4kr+pu4or+JK/qbuKK/iX06snYKQH8TV/Q3cUV/E1f0N3FFfxM39DdxQ38TN/Q3cUN/E/v0Vu0UgP4mbuhv4ob+Jm7ob+KG/iZG79gy9I4tQ+/YMvSOLUPv2DL0ji1D79gy9I4tQ+/YMvSOLUPv2DL0ji1D79gy9I4tQ+/YMvSOLUPv2DL0ji1D79gy9I6tgt6xVdA7tgp6x1ZB79gqD/A3cUHv2CroHVsFvWOroHdsFfSOrYLesVXQO7YKesdWQe/YKugdWwW9Y6ugd2wV9I6tgt6xVdA7tgp6x1ZB79gq6B1bBb1jq6B3bBX0jq2C3rFV0Du2CnrHVkHv2CroHVsFvWOroHdsFfSOrYLesVXQO7YKesdWQe/YKugdWwW9Y6ugd2wV9I6tgt6xVdA7tgp6x1ZB79gq6B1bBb1jq6B3bBX0jq2C3rFV0Du2CnrHVkHv2CroHVsFvWOroHdsFfSOrYLesVXQO7YKesdWQe/YKugdWwW9Y6ugd2wV9I6tgt6xVdA7tgp6x1ZB79gq6B1bBb1jq6B3bBX0jq2C3rFV0Du2CnrHVkHv2CroHVsFvWOroHdsFfSOrYLesVXQO7YKesdWQe/YKugdWwW9Y6ugd2wV9I6tgt6xVdA7tgp6x1ZB79gq6B1bBb1jq6B3bBX0jq2C3rFV0Du2KnrHVkXv2KroHVsVvWOrPsDfxBW9Y6uid2xV9I6tit6xVdE7tip6x1ZF79iq6B1bFb1jq6J3bFX0jq2K3rFV0Tu2KnrHVkXv2KroHVsVvWOrondsVfSOrYresVXRO7YqesdWRe/YqugdWxW9Y6uid2xV9I6tit6xVdE7tip6x1ZF79iq6B1bFb1jq6J3bFX0jq2K3rFV0Tu2KnrHVkXv2KroHVsVvWOrondsVfSOrYresVXRO7YqesdWRe/YqugdWxW9Y6uid2xV9I6tit6xVdE7tip6x1ZF79iq6B1bFb1jq6J3bFX0jq2K3rFV0Tu2KnrHVkXv2KroHVsVvWOrondsVfSOrYresVXRO7YqesdWRe/YqugdWxW9Y6uid2xV9I6tit6xVdE7tip6x1ZF79iq6B1bFb1jq6J3bFX0jq2K3rFV0Tu2KnrHVkXv2KroHVsVvWOrondsVfSOrYresVXRO7YqesdWRe/YaugdWw29Y6uhd2w19I6t9gB/Ezf0jq2G3rHV0Du2GnrHVkPv2GroHVsNvWOroXdsNfSOrYbesdXQO7YaesdWQ+/YaugdWw29Y6uhd2w19I6tht6x1dA7thp6x1ZD79hq6B1bDb1jq6F3bDX0jq2G3rHV0Du2GnrHVkPv2GroHVsNvWOroXdsNfSOrYbesdXQO7YaesdWQ+/YaugdWw29Y6uhd2w19I6tht6x1dA7thp6x1ZD79hq6B1bDb1jq6F3bDX0jq2G3rHV0Du2GnrHVkPv2GroHVsNvWOroXdsNfSOrYbesdXQO7YaesdWQ+/YaugdWw29Y6uhd2w19I6tht6x1dA7thp6x1ZD79hq6B1bDb1jq6F3bDX0jq2G3rHV0Du2GnrHVkPv2GroHVsNvWOroXdsNfSOrYbesdXQO7YaesdWQ+/YaugdWw29Y6uhd2w19I6tht6x1dA7thp6x1ZD79hq6B1bDb1jq6N3bHX0jq2O3rHV0Tu2+gP8TdzRO7Y6esdWR+/Y6ugdWx29Y6ujd2x19I6tjt6x1dE7tjp6x1ZH79jq6B1bHb1jq6N3bHX0jq2O3rHV0Tu2OnrHVkfv2OroHVsdvWOro3dsdfSOrY7esdXRO7Y6esdWR+/Y6ugdWx29Y6ujd2x19I6tjt6x1dE7tjp6x1ZH79jq6B1bHb1jq6N3bHX0jq2O3rHV0Tu2OnrHVkfv2OroHVsdvWOro3dsdfSOrY7esdXRO7Y6esdWR+/Y6ugdWx29Y6ujd2x19I6tjt6x1dE7tjp6x1ZH79jq6B1bHb1jq6N3bHX0jq2O3rHV0Tu2OnrHVkfv2OroHVsdvWOro3dsdfSOrY7esdXRO7Y6esdWR+/Y6ugdWx29Y6ujd2x19I6tjt6x1dE7tjp6x1ZH79jq6B1bHb1jq6N3bHX0jq2O3rHV0Tu2OnrHVkfv2OroHVsdvWOro3dsdfSOrYHesTXQO7YGesfWQO/YGg/wN/FA79ga6B1bA71ja6B3bA30jq2B3rE10Du2BnrH1kDv2BroHVsDvWNroHdsDfSOrYHesTXQO7YGesfWQO/YGugdWwO9Y2ugd2wN9I6tgd6xNdA7tgZ6x9ZA79ga6B1bA71ja6B3bA30jq2B3rE10Du2BnrH1kDv2BroHVsDvWNroHdsDfSOrYHesTXQO7YGesfWQO/YGugdWwO9Y2ugd2wN9I6tgd6xNdA7tgZ6x9ZA79ga6B1bA71ja6B3bA30jq2B3rE10Du2BnrH1kDv2BroHVsDvWNroHdsDfSOrYHesTXQO7YGesfWQO/YGugdWwO9Y2ugd2wN9I6tgd6xNdA7tgZ6x9ZA79ga6B1bA71ja6B3bA30jq2B3rE10Du2BnrH1kDv2BroHVsDvWNroHdsDfSOrYHesTXQO7YGesfWQO/YGugdWwO9Y2ugd2wN9I6tgd6xNdA7tp6fFPxV/J9PCq8A/GX8/KTgb+PnJwV/HT8/Kfj7+PlJwV/Iz08K/kZ+flLwV/Lzk8K/k9Hrtp4K4N/J6IVbTwXw72T0yq2nAvh3Mnrp1lMB/DsZvXbrqQD+nYxevPVUAP9ORq/eeiqAfyejl289FcC/k9Hrt54K4N/J6AVcTwXw72T0Cq6nAvh3MnoJ11MB/DsZvYbrqQD+nYxexPVUAP9ORq/ieiqAfyejl3E9Px78Oxm9juv58eDfyeiFXM+PB/9ORq/ken48+HcyeinX8+PBv5PRa7meCuDfyejFXE8F8O9k9GqupwL4dzJ6OddTAfw7Gb2e66kA/p2MXtD1VAD/Tkav6HoqgH8no5d0PRXAv5PRa7qeCuDfyehFXU8F8O9k9KqupwL4dzJ6WddTAfw7Gb2u66kA/p2MXtj1VAD/Tkav7HoqgH8no5d2PRXAv5PRa7ueCuDfyejFXU8F8O9k9OqupwL4dzJ6eddTAfw7Gb2+66kA/p2MXuD1VAD/Tkav8HoqgH8no5d4PRXAv5PRa7yeCtDfyQd8j9cB3+N1wPd4HfA9Xs/PB68A/Z18wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xgd8j9cB3+N1wPd4HfA9Xid8j9cJ3+N1wvd4nfA9XucD/Z18wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cF3+N1wfd4XfA9Xhd8j9f1QH8nX/A9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+Nl8D1eBt/jZfA9Xgbf42UP9Heywfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gZfI+Xwfd4GXyPl8H3eBl8j5fB93gV+B6vAt/jVeB7vAp8j1d5oL+TC3yPV4Hv8SrwPV4FvserwPd4FfgerwLf41Xge7wKfI9Xge/xKvA9XgW+x6vA93gV+B6vAt/jVeB7vAp8j1eB7/Eq8D1eBb7Hq8D3eBX4Hq8C3+NV4Hu8CnyPV4Hv8SrwPV4FvserwPd4FfgerwLf41Xge7wKfI9Xge/xKvA9XgW+x6vA93gV+B6vAt/jVeB7vAp8j1eB7/Eq8D1eBb7Hq8D3eBX4Hq8C3+NV4Hu8CnyPV4Hv8SrwPV4FvserwPd4FfgerwLf41Xge7wKfI9Xge/xKvA9XgW+x6vA93gV+B6vAt/jVeB7vAp8j1eB7/Eq8D1eBb7Hq8D3eBX4Hq8C3+NV4Hu8CnyPV4Hv8SrwPV4FvserwPd4FfgerwLf41Xge7wKfI9Xge/xKvA9XgW+x6vA93gV+B6vAt/jVeB7vAp8j1eB7/Eq8D1eBb7Hq8D3eBX4Hq8C3+NV4Xu8KnyPV4Xv8arwPV71gf5OrvA9XhW+x6vC93hV+B6vCt/jVeF7vCp8j1eF7/Gq8D1eFb7Hq8L3eFX4Hq8K3+NV4Xu8KnyPV4Xv8arwPV4Vvserwvd4Vfgerwrf41Xhe7wqfI9Xhe/xqvA9XhW+x6vC93hV+B6vCt/jVeF7vCp8j1eF7/Gq8D1eFb7Hq8L3eFX4Hq8K3+NV4Xu8KnyPV4Xv8arwPV4Vvserwvd4Vfgerwrf41Xhe7wqfI9Xhe/xqvA9XhW+x6vC93hV+B6vCt/jVeF7vCp8j1eF7/Gq8D1eFb7Hq8L3eFX4Hq8K3+NV4Xu8KnyPV4Xv8arwPV4Vvserwvd4Vfgerwrf41Xhe7wqfI9Xhe/xqvA9XhW+x6vC93hV+B6vCt/jVeF7vCp8j1eF7/Gq8D1eFb7Hq8L3eFX4Hq8K3+NV4Xu8KnyPV4Xv8arwPV4Vvserwvd4Vfgerwrf41Xhe7wqfI9Xg+/xavA9Xg2+x6vB93i1B/o7ucH3eDX4Hq8G3+PV4Hu8GnyPV4Pv8WrwPV4Nvserwfd4Nfgerwbf49Xge7wafI9Xg+/xavA9Xg2+x6vB93g1+B6vBt/j1eB7vBp8j1eD7/Fq8D1eDb7Hq8H3eDX4Hq8G3+PV4Hu8GnyPV4Pv8WrwPV4Nvserwfd4Nfgerwbf49Xge7wafI9Xg+/xavA9Xg2+x6vB93g1+B6vBt/j1eB7vBp8j1eD7/Fq8D1eDb7Hq8H3eDX4Hq8G3+PV4Hu8GnyPV4Pv8WrwPV4Nvserwfd4Nfgerwbf49Xge7wafI9Xg+/xavA9Xg2+x6vB93g1+B6vBt/j1eB7vBp8j1eD7/Fq8D1eDb7Hq8H3eDX4Hq8G3+PV4Hu8GnyPV4Pv8WrwPV4Nvserwfd4Nfgerwbf49Xge7wafI9Xg+/xavA9Xg2+x6vB93g1+B6vBt/j1eB7vBp8j1eD7/Fq8D1eHb7Hq8P3eHX4Hq8O3+PVH+jv5A7f49Xhe7w6fI9Xh+/x6vA9Xh2+x6vD93h1+B6vDt/j1eF7vDp8j1eH7/Hq8D1eHb7Hq8P3eHX4Hq8O3+PV4Xu8OnyPV4fv8erwPV4dvserw/d4dfgerw7f49Xhe7w6fI9Xh+/x6vA9Xh2+x6vD93h1+B6vDt/j1eF7vDp8j1eH7/Hq8D1eHb7Hq8P3eHX4Hq8O3+PV4Xu8OnyPV4fv8erwPV4dvserw/d4dfgerw7f49Xhe7w6fI9Xh+/x6vA9Xh2+x6vD93h1+B6vDt/j1eF7vDp8j1eH7/Hq8D1eHb7Hq8P3eHX4Hq8O3+PV4Xu8OnyPV4fv8erwPV4dvserw/d4dfgerw7f49Xhe7w6fI9Xh+/x6vA9Xh2+x6vD93h1+B6vDt/j1eF7vDp8j1eH7/Hq8D1eHb7Hq8P3eHX4Hq8O3+PV4Xu8OnyPV4fv8erwPV4dvserw/d4DfgerwHf4zXge7wGfI/XeKC/kwd8j9eA7/Ea8D1eA77Ha8D3eA34Hq8B3+M14Hu8BnyP14Dv8RrwPV4DvsdrwPd4DfgerwHf4zXge7wGfI/XgO/xGvA9XgO+x2vA93gN+B6vAd/jNeB7vAZ8j9eA7/Ea8D1eA77Ha8D3eA34Hq8B3+M14Hu8BnyP14Dv8RrwPV4DvsdrwPd4DfgerwHf4zXge7wGfI/XgO/xGvA9XgO+x2vA93gN+B6vAd/jNeB7vAZ8j9eA7/Ea8D1eA77Ha8D3eA34Hq8B3+M14Hu8BnyP14Dv8RrwPV4DvsdrwPd4DfgerwHf4zXge7wGfI/XgO/xGvA9XgO+x2vA93gN+B6vAd/jNeB7vAZ8j9eA7/Ea8D1eA77Ha8D3eA34Hq8B3+M14Hu8BnyP14Dv8RrwPV4DvsdrwPd4DfgerwHf4zXge7wGfI/XgO/xGvA9XgO+x2vA93gN+B6vgd7jdT7Qe7yeCsDfyU8F4O/kpwLwd/JTAfg7+akA/J38VAD+Tn4qAH8nPxWAv5OfCuDfyeg9Xk8F8O9k9B6vpwL4dzJ6j9dTAfw7Gb3H66kA/p2M3uP1VAD/Tkbv8XoqgH8no/d4PRXAv5PRe7yeCuDfyeg9Xk8F8O9k9B6vpwL4dzJ6j9fzvwH/Tkbv8Xr+N+Dfyeg9Xs//Bvw7Gb3H6/nfgH8no/d4Pf8b8O9k9B6vpwL4dzJ6j9dTAfw7Gb3H66kA/p2M3uP1VAD/Tkbv8XoqgH8no/d4PRXAv5PRe7yeCuDfyeg9Xk8F8O9k9B6vpwL4dzJ6j9dTAfw7Gb3H66kA/p2M3uP1VAD/Tkbv8XoqgH8no/d4PRXAv5PRe7yeCuDfyeg9Xk8F8O9k9B6vpwL4dzJ6j9dTAfw7Gb3H66kA/p2M3uP1VAD/Tkbv8XoqgH8no/d4PRXAv5PRe7yeCuDfyeg9Xk8F8O9k9B6vpwL4dzJ6j9dTAfw7Gb3H66kA/p2M3uP1VAD/Tkbv8XoqgH8no/d4PRWgv5MP+B6vA77H64Dv8Trge7yenw9eAfo7+YDv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7wO+B6vA77H64Dv8Trge7xO+B6vE77H64Tv8Trhe7zOB/o7+YTv8Trhe7xO+B6vE77H64Tv8Trhe7xO+B6vE77H64Tv8Trhe7xO+B6vE77H64Tv8Trhe7xO+B6vE77H64Tv8Trhe7xO+B6vE77H64Tv8Trhe7xO+B6vE77H64zdIVXs/PW1xT4qCP0+mFIQ+llUSn8pqO2TgtDPoikFoZ9FUwpCP4umFITOBzMKYvcXTSkI/T6oR/31tfU6PykI/T6YUhA6H0wpMHgFod/JUwpCv5OnFIR+J08pCP1OnlIQ+p08oyB2f9GUAvh3cuz+oikF8O/k2P1FUwrg38mx+4umFMC/k2P3F00p+Pvv5I+bxP/9tb2N1+fo/bDfn6P2f7mj3NB2tFfvQab3JNN7oep902AJNJQEGmoCDS2Bhp5AA6yv+K2hwXqFNw2w7/83DbDv9DcNsd/TvT1eXzy+9yXj6zs/xu+v7X/ojf1O99cb+/3/M73OvxfSYvuKvWxi+5W9bGL7oL1sYvurrWx6bN+2l01sP7iXTWyfuZdNJv/qzcbE5iMb+eLPbOSLP7ORL/7MRr74Mxv54o9shnzxZzbyxZ/ZyBd/ZiNf/JmNic1HNvLFn9nIF39mI1/8mY188Wc28sWf2FwP+eLPbOSLP7ORL/7MRr74MxsTm49s5Is/s5Ev/sxGvvgzG/niz2zkiz+yOeSLP7ORL/7MRr74Mxv54s9sTGw+spEv/sxGvvgzG/niz2zkiz+zkS/+yOYk9TcT/ZPXSepvptiQvqcmugKvk/Q9NcWG9D01xYb0PTXD5iLd30yxId3fTLEh9TcTfUnXRepvptiY2HxkQ7q/mWJD6oun2JD64ik2pL54ig2pL55hY6S+eIoNqS+eYiNf/JmNfPFnNpaIzQ++89GrvRQ+/yu/v/r4p68+S3kJbMcnkplc9F6SmTz3XpKZHPpekpn8vBPJNzqZHL07nZLJ0/vTyeTq/elk8vX+dDI5e386Jjo3dOTX7+iwevBRX9/5GO36g86/S9iF1YP7k2T14D8ieZ5fAq18Isnq191JBr/Zg0SSNQf4k2TNDP4kWfOFP0kTSSeSrLnlZyQndrrBb0ohkSTNOM/P9vpx7Pl4/8z/OuMEv6+FRJI04/yM5MwbJ/itMSSSpBlnAUnSjLOAJGnGWUDSRNKJJGnGWUCSNOP8kORExkl1DW8vSdaMcxxfcI6zO2ScVJf2tpJMdZdvGcmZN06qK357SbJmHH+SrBnHn6SJpBNJ1ozjT5I14/iTZM04PyM5kXFS3UHcS5L25zi9/iY5viHZxtd3fvz+2qP3N5KpbizuJUn7cxx3krQZpx5fJJs5bDBSXXvcS9JE8nuSM34y1SXJvSRpM447SdqM406SNuO4k6T9OY4zSUt1L3MvSdqf4/yI5PcbDEt1i3MvSWWc8+h//g7GGx0TnRs6yiJ3dFjzxXOP9fWZz/Lfbw8s1bXPvSRZ88WPSE55OdZ84U4y1d3RvSRZ84U/SdZ84U+SNV/4kzSRdCLJmlt+RnJie5DqFutekso4z//TvT5k6VS3W/3pKIvc0Dlp80XtX5+5Hw7bg5M2X7iTpM0XPyE54+VSXSDeS9JE0okkbb5wJ0mbL9xJ0uYLd5K0WcSdJG1u+RHJie1Bqtvfe0kq43iRVMbxIqmM40XSRNKJpDKOF0llHC+SyjhPkn/+hfgbHeWWOzrKIjd0Ut1Q//id3/RSpIA3vbG9+vjqS+zj7Tv/F3pjO2p/vZZH78xmKfjlcH+9sT2kv97YTs9fb2zv5q83thtz1xv8nvXP9E4kteAXqv31JvJXU3oT+aspvUamN5O/mtEb3F/133lwXA55IfiFZX+9wf3VT/RO+Y3g/spbb/Cbwv56g/srd73B/ZW73uD+yl2vJdI74TeCX6T115vIX03pTeSvpvRm8lczejP5qwm9se+Zjoe9vvN4lOqQF2JfHV2gN7S/+pneGb8R+4LnAr1Gpje0v1qgN7S/WqA3tL9aoDe0v/qh3hm/Edpf+euNfUtxgd5E/mpKbyZ/NaM3k7+a0WsweuufefBNA45n+qwBxwd91hDc24zX5xjPD+KQPWPffVugN7i3+YneGe8a+4baAr3BvY273uDexl1vcG/jrtfI9Ab3QT/SO+FdY9/JWqA3kb+a0pvIX03pzeSvvtdbYt9vWqA3k7+a0Qvkr8Y/Z9oS+wrRpAYLreGw3xre/s73n//d9fNVrNrfPvN5HO96Y/sgf72xfdCP9Lb+9Qvyx/nNd57YWZTYF3o2s4ntr/ayie3FtrKJfRdnM5vYHm8vm9h+cC+b2D5zLxsTm49sEnlddzbyxZ/ZyBd/ZiNf/JmNfPFHNrHvuWxmI1/8mY188Wc28sWf2ZjYfGQjX/yZjXzxZzbyxZ/ZyBd/ZiNf/JFN7Bsgm9nIF39mI1/8mY188Wc2JjYf2ZD6m2Kv36Mo9pENqb+ZYRO7d34hm/I6QlBq+8SG9D01xYb0PTXFhvQ9NcWGdH8zxYZ0fzPFhtTfTNx2L7G7+jezId3fzLCJfQNgMxtSXzzFhtQXT7Eh9cVTbExsPrIh9cVTbEh98RQb+eLPbOSLP7ORL/7IJvbthh+y+cF3bu31t7/tj7us73+TGPvOw2Y2mXyxN5tMvtibjYnNRzaZfLE3m0y+2JtNJl/879iM+olNJl/szSaTL3ZmE/zmxjI2b10dV/nEhtQXT7Eh9cVTbEh98RQbE5uPbEh98RQbUl88xYbUF8/0bQW/abKXDakvnmET/FaKE5s3vRRe901vbP96nq8vHtc1vtF7PLq9PvVTwe+vbn/8i47tSlcoNjrFsR3kCsWxfeEKxbHd3grFsT3cCsWxndkCxcHvt6xQHNtxrVBM57mCX3FZodjoFNN5ruC3XFYopvNcwe+5rFDM5rlq8JsuKxSzea4a/K7LCsVsnqs+jE4xm+eqwe/GrFDM5rlq8BsvKxTTea7g91hWKKbzXMFvp6xQTOe5gt85WaGYznMFv0myQjGd5wp+P2SFYjrPFfzWxwrFdJ4r+F2OFYrpPFfwGxorFNN5ruD3LlYopvNcwW9TrFBM57mC35FYoZjOcwW/+bBCMZ3nCn6fYYViOs910Xmu4Jc1Viim81wXnecyOs8V/NLJCsV0niv4VZIVio1OMZ3nCn4XZIViOs8V/IbHCsV0niv4vY0Viuk8V/DbGCsU03mu4HcsViim81zBb06sUEznuYLfh1ihmM5zBb/lsEIxnecKfndhhWI6zxX8RsIKxXSeK/g9gxWK6TxX8NsDKxTTea7gdwJWKKbzXME7/VcopvNcwfv3Vyim81zBu/JXKKbzXMF77VcopvNcwTvoVyim81x0PfSVroe+0vXQV7oe+krXQ1/peugrXQ99peuhr3Q99JWuh77S9dBXuh76StdDX+l66CtdD32l66GvdD30la6HvtH10De6HvpG10Pf6Hro28PoFLN5rkbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0/XQd7oe+k7XQ9/peuj7w+gUs3muTtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf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81fBe9b99ZL5q+A96/56yfxV8J51f71k/ip4z7q/XjJ/Fbxn3V8vmb8K3snur5fMX5H1t59k/e0nWX/7SdbffpL1t59k/e0nWX/7SdbffpL1t59k/e0nWX/7SdbffpL1t59k/e0nWX/7SdbffpL1t59k/e0nWX/7SdbffpL1t59k/e0XWX/7RdbffpH1t19k/e3Xw8j0cvmri6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrb7/I+tsvsv72i6y//SLrbzey/nYj6283sv52I+tvt4eR6eXyV0bW325k/e1G1t9uZP3tRtbfbmT97UbW325k/e1G1t9uZP3tRtbfbmT97UbW325k/e1G1t9uZP3tRtbfbmT97UbW325k/e1G1t9uZP3tRtbfbmT97UbW325k/e1G1t9uZP3tRtbfbmT97UbW325k/e1G1t9uZP3tRtbfbmT97UbW325k/e1G1t9uZP3tRtbfbmT97UbW325k/e1G1t9uZP3tRtbfbmT97Zap73q08/XF7fqkN9H7aEZvpj7k0fvri0f7pDfR82pKb6Ln1ZReI9ObKA9O6U2UB6f0Znr/zujN9P6d0ZsoD87ozdSHPKWXzF9l6kOe0gvrr940WAINsX1QO8dLQz/bd7n8MerrUx/H26eu5V1xbCe0QnFsL7RCcWw3tEJxbD+0QHHwBuMVimN7ohWKY7uiFYpj+6IVio1OMZ3nCt5mvEIxnecK3mi8QjGd5wrearxCMZ3nCt5svEIxnecK3m68QjGd5wrecLxCMZ3nCt5yvEIxm+cqwZuOVyhm81wleNvxCsVsnqs8jE4xm+cqwVuPVyhm81wlePPxCsV0nit4+/EKxXSeK3gD8grFdJ4reAvyCsV0nit4E/IKxXSeK3gb8grFdJ4reCPyCsV0nit4K/IKxXSeK3gz8grFdJ4reDvyCsV0nit4Q/IKxXSeK3hL8grFdJ4reFPyCsV0nit4W/IKxXSeK3hj8grFdJ4reGvyCsV0nit4c/IKxXSeK3h78grFdJ4reIPyCsV0nit4i/IKxXSeK3iT8grFdJ4reJvyCsV0nit4o/IKxXSeqxidYjrPVeg8V/Cu8BWK6TxXofNclc5zBe+EX6GYznMF74VfodjoFNN5ruDt8CsU03mu4A3xKxTTea7gLfErFNN5ruBN8SsU03mu4M3yKxTTeS66HvpC10Nf6HroC10PfaHroS90PfSFroe+0PXQF7oe+kLXQ1/oeugLXQ99oeuhL3Q99IWuh77Q9dAXuh76QtdDX+h66AtdD32h66EvdD30ha6HvtD10Fe6HvpK10Nf6XroK10PfX0YnWI2z1XpeugrXQ99peuhr3Q99JWuh77S9dBXuh76StdDX+l66CtdD32l66GvdD30la6HvtL10Fe6HvpK10Nf6XroK10PfaXroa+ZOsqfX/364vbnd37Tm+htPKM3U3f16P31xaN90pvoKT2lN9Ezekpvoif0lN5EmXhKb6JEPKU30/t3Rm+m9++M3kRZeEZvpqbqKb1k/ipTS/WUXlh/9abBEmiI7YN6aV//lEr9Lpnb+ZXM7Sq/v7qNd8WxndAKxbG90ArFsd3QCsWx/dACxcF7pFcoju2JViiO7YpWKI7ti1YoNjrFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsVsnqsF75FeoZjNc7XgPdIrFLN5rvYwOsVsnqsF75FeoZjNc7XgPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea6TznMF7wpfoZjOc510nuui81zBO+FXKKbzXMF74VcoNjrFdJ4reDv8CsV0nit4Q/wKxXSeK3hL/ArFdJ4reFP8CsV0nit4s/wKxXSei66HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10Pfafroe90PfSdroe+0/XQ94fRKWbzXJ2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66HumjvLRztcXtz+/85veRG/jKb2JntOj968vbp/0JnpKT+lN9Iye0pvoCT2lN1EmntGbqbF6Sm+m9++M3kzv3xm9ibLwlF4j00vmrzK1VE/phfVXbxpgPdObhtg+aHx95+NxnMd30bx8fXWxD//wgtdILxAc2wktEBzbCi0QHNsLLRBsbIJju6EFgmPboQWCY/uhBYJjm6cFgtmcVvDy6AWC2ZxW8OroBYLZnFbw4ugFgtmcVvDa6AWC2ZxW8NLoBYLJnNYIXhm9QDCZ0xrBC6MXCCZzWuNhbILJnNYIXha9QDCZ0xrBq6IXCGZzWsGLohcIZnNawWuiFwhmc1rBS6IXCGZzWsErohcIZnNawQuiFwhmc1rB66EXCGZzWsHLoRcIZnNawauhFwhmc1rBi6EXCGZzWsFroRcIZnNawUuhFwhmc1rBK6EXCGZzWsELoRcIZnNaweugFwhmc1rBy6AXCGZzWsGroBcIZnNawYugFwhmc1rBa6AXCGZzWsFLoBcIZnNawSug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3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wvd4nfA9Xid8j9cJ3+N1wfd4XfA9Xhd8j9cF3+N1PdDfyRd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4XfA9Xhd8j9cF3+N1wfd4GXyPl8H3eBl8j5fB93jZA/2dbPA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9Xgbf42XwPV4G3+Nl8D1eBt/jZfA9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vtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uh73Q99J2uh77T9dB3uh76/jA6xWyeq9P10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfc/UUT7a+fri9vfv/KY30dt4Sm+i5/To/fXFo33Sm+gpPaU30TN6Sm+iJ/SU3kSZeEZvpsbqKb2Z3r8zejO9f2f0JsrCU3qNTC+Zv8rUUj2lF9ZfvWmA9UxvGmL7oKt9/VOy8XBJ5sF7pFcoju2FViiO7YZWKI7th1YoNjrFsT3RCsWxXdEKxbF90QrFsV3UCsV0nit4j/QKxXSeK3iP9ArFdJ4reI/0CsV0nit4j/QKxXSeK3iP9ArFbJ5rBO+RXqGYzXON4D3SKxSzea7xMDrFbJ5rBO+RXqGYzXON4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5ruA90isU03mu4D3SKxTTea7gPdIrFNN5rkrnuYJ3ha9QTOe5Kp3nqkanmM5zBW+FX6GYznMFb4ZfoZjOcwVvh1+hmM5zBW+IX6GYznMFb4lfoZjOcwVvil+hmM5zBW+WX6GYznPR9dAPuh76QddDP+h66AddD/2g66EfdD30g66HftD10A+6HvpB10M/6HroB10P/aDroR90PfSDrod+0PXQD7oe+kHXQz/YeuivB1sP/VMxmed6KibzXE/FZJ7rqdjoFJN5rqdiMs/1VEzmuZ6KyTzXUzGd52LroX8qpvNcbD30T8V0nouth/6pmM5zsfXQPxXTeS62HvqnYjrPxdZD/1RM57nYeuifiuk8F1sP/VMxnedi66F/KqbzXGw99E/FdJ6LrYf+qZjOc7H10D8V03kuth76p2I6z8XWQ/9UTOe52Hron4rpPBdbD/1TMZ3nYuuhfyqm81xsPfRPxXSei62H/qmYznOx9dA/FdN5LrYe+qdiOs/F1kP/VEznudh66J+K6TwXWw/9UzGd52LroX8qpvNcbD30T8V0nouth/6pmM5zsfXQPxXTeS62HvqnYjrPxdZD/1RM57nYeuifiuk8F1sP/VMxnedi66F/KqbzXGw99E/FdJ6LrYf+qZjOc7H10D8V03kuth76p2I6z8XWQ/9UTOe52Hron4rpPBdbD/1TMZ3nYuuhfyqm81xsPfRPxXSei62H/qmYznOx9dA/FdN5LrYe+qdiNs910PXQH3Q99AddD/1B10P/1EOnmM1zHXQ99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/0PXQH3Q99AddD/1B10N/ZOooH+18fXH7+3f+1pupoXxKb6Ln9OhfXzzaJ72JntJTehM9o6f0JnpCT+lNlImn9CZKxFN6M71/J/Rmaque0psoC0/pTZSEp/SS+atMLdVTemH91ZsGWM/0piG2Dyr2ytqjjv5TMi+vj/FcKn36dxfbB/nrje2D3PUGb5D21xvbB/nrje2D/PXG9kH+eo1Mb2wf5K83tmfy10vmr4I3RvvrJfNXwdui/fWS+avgTdH+esn8VfCWaH+9ZP4qeEO0v14yfxW8HdpfL5e/OoM3Q/vr5fJXZ/BWaH+9XP7qfBiZXi5/dQZvg/bXy+WvzuBN0P56yfxV8BZof71k/ip4A7S/XjJ/Fbz92V8vmb8K3vzsr5fMXwVvffbXS+avgjc+++sl81fB25799ZL5q+BNz/56yfxV8JZnf71k/ip4w7O/XjJ/Fbzd2V8vmb8K3uzsr5fMXwVvdfbXS+avgjc6++sl81fB25z99ZL5q+BNzv56yfxV8BZnf71k/ip4g7O/XjJ/Fby92V8vmb8K3tzsr5fMXwVvbfbXS+avgjc2++sl81fB25r99ZL5q+BNzf56yfxVIfNXwXu43fUG7+H210vmryqZvwres+6v18j0kvmr4D3r/nrJ/FXwnnV/vWT+KnjPur9eMn8VvGfdXy+Zvwres+6vl8xfBe9k99dL5q/I+ttPsv72k6y//STrbz/J+ttPsv72k6y//STrbz/J+ttPsv72k6y//STrbz/J+ttPsv72k6y//STrbz/J+ttPsv72k6y//STrbz/J+ttPsv72i6y//SLrb7/I+tsvsv7262Fkern81UXW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bdfZP3tF1l/+0XW336R9bcbWX+7kfW3G1l/u5H1t9vDyPRy+Ssj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tv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pvNcwfv3Vyim81zBu/JXKKbzXMF77VcopvNcwTvoVyim81x0PfSVroe+0vXQV7oe+krXQ1/peugrXQ99peuhr3Q99JWuh77S9dBXuh76StdDX+l66CtdD32l66GvdD30la6HvtH10De6HvpG10Pf6Hro28PoFLN5rkbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0fXQN7oe+kbXQ9/oeugbXQ99o+uhb3Q99I2uh77R9dA3uh76RtdD3+h66BtdD32j66FvdD30ja6HvtH10De6HvpG10Pf6HroG10PfaProW90PfSNroe+0/XQd7oe+k7XQ9/peuj7w+gUs3muTtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30na6HvtP10He6HvpO10Pf6XroO10Pfafroe90PfSdroe+0/XQd7oe+k7XQ9/peug7XQ99p+uh73Q99J2uh77T9dB3uh76TtdD3+l66DtdD32n66HvdD30PVNH+Wjn64vbn9/5TW+i13hKb6Kf06P31xeP9klvop/SU3oT/Yye0pvoJ/SU3kSZeEZvpsbqKb2Z3t8ZvZne3xm9ibLwlF4j00vmrzK1VE/phfVXbxpgPdObhtg+6Gpff5RsPFySefAe6RWKY3uhFYpju6EVimP7oRWKjU5xbE+0QnFsV7RCcWxftEJxbBe1QjGd5wreI71CMZ3nCt4jvUIxnecK3iO9QjGd5wreI71CMZ3nCt4jvUIxm+cawXukVyhm81wjeI/0CsVsnms8jE4xm+cawXukVyhm81wjeI/0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WX/7RdbffpH1t19k/e0XWX/7RdbffpH1t19k/e0XWX/7RdbffpH1t19k/e0XWX/7RdbffpH1t19k/e0XWX/7RdbffpH1t19k/e0XWX/7RdbffpH1t19k/e0XWX/7RdbffpH1t19k/e0XWX/7RdbffpH1t19k/e0XWX+7kfW3G1l/u5H1txtZf7s9jEwvl78ysv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj6283sv52I+tvN7L+diPrbzey/nYj62+3TH3Xo52vL27XJ72J3qMZvZn6kEfvry8e7ZPeRD+vpvQm+nk1pdfI9CbKg1N6E+XBKb2Z3t8ZvZne3xm9ifLgjN5MfchTesn8VaY+5Cm9sP7qTYMl0BDbB7VzvDT0s/2Uyx+jvj71cbx96lreFcd2QisUx/ZCKxTHdkMrFMf2QwsUB28wXqE4tidaoTi2K1qhOLYvWqHY6BTTea7gbcYrFNN5ruCNxisU03mu4K3GKxTTea7gzcYrFNN5ruDtxisU03mu4A3HKxTTea7gLccrFLN5rhK86XiFYjbPVYK3Ha9QzOa5ysPoFLN5rhK89XiFYjbPVYI3H69QTOe5grcfr1BM57mCNyCvUEznuYK3IK9QTOe5gjchr1BM57mCtyGvUEznuYI3Iq9QTOe5grcir1BM57mCNyOvUEznuYK3I69QTOe5gjckr1BM57mCtySvUEznuYI3Ja9QTOe5grclr1BM57mCNyavUEznuYK3Jq9QTOe5gjcnr1BM57mCtyevUEznuYI3KK9QTOe5grcor1BM57mCNymvUEznuYK3Ka9QTOe5gjcqr1BM57mK0Smm81yFznMF7wpfoZjOcxU6z1XpPFfwTvgViuk8V/Be+BWKjU4xnecK3g6/QjGd5wreEL9CMZ3nCt4Sv0IxnecK3hS/QjGd5wreLL9CMZ3nouuhL3Q99IWuh77Q9dAXuh76QtdDX+h66AtdD32h66EvdD30ha6HvtD10Be6HvpC10Nf6HroC10PfaHroS90PfSFroe+0PXQF7oe+kLX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"}],"outputs":{"globals":{},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::entrypoint_parameters"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::entrypoint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrSingleKeyAccount::verify_private_authwit_abi"}]}},"file_map":{"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let event_bytes = event_selector.to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = event_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[36 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[40 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() < ARGS_HASH_CHUNK_COUNT * ARGS_HASH_CHUNK_LENGTH);\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let event_selector = 5;\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00846d6969c8c2f61d39cd2762efcb0abb14f88d59c2675910251ef2bcffe9a7);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let event_selector = 5;\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00880a801230ea08c98a802a11b4786cba474513875f0fc69a615e81c5f9f21c);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let event_selector = 5;\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00a78b5347813624ecfd26e5b8bc6146f418b0cfcc8296b5112d09b8ebba9496);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let event_selector = 5;\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x001f3390ea242afee7ce46dafdbdc4bd4f1cf20cd63850d12d60ff9956712c4f);\n}\n"},"124":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"137":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"163":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse dep::std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: 0 }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"165":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\nuse dep::std::cmp::Eq;\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, nullifier_counter: u32, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, nullifier_counter, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    nullifier_counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.nullifier_counter == other.nullifier_counter)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            nullifier_counter: 0,\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.nullifier_counter as Field, self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            nullifier_counter: reader.read_u32(),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n        assert(\n            (self.nullifier_counter == 0) | (read_request.counter() < self.nullifier_counter), \"Read request counter must be less than the nullifier counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"166":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr","source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        // WARNING: if updating, see comment in public_call_stack_item.ts's `PublicCallStackItem.hash()`\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs = PublicCircuitPublicInputs::empty();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector, note_hash::NoteHash,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = NoteHash {\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x2751111aa213d9d21279da53531bf90c2da272cf3f959e2a2a1dfceb487bf102;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = NoteHash {\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x1860d00d9602966e398c6d585216baba2ffa8c5eddda5faee041136665d8482a;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n"},"168":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    new_note_hashes: u32,\n    new_nullifiers: u32,\n    new_l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            new_note_hashes: validate_array(public_inputs.new_note_hashes),\n            new_nullifiers: validate_array(public_inputs.new_nullifiers),\n            new_l2_to_l1_msgs: validate_array(public_inputs.new_l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [NoteHash; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [Nullifier; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.new_note_hashes.len() {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..self.new_nullifiers.len() {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.new_l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            new_note_hashes: [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x1970bf189adc837d1769f9f44a8b55c97d45690e7744859b71b647e808ee8622;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"171":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\nuse dep::std::cmp::Eq;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"174":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint\n};\n\nstruct KeyValidationRequest {\n    pk_m: GrumpkinPoint,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: GrumpkinPoint::zero(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: GrumpkinPoint::new(fields[0], fields[1]),\n            sk_app: fields[2],\n        }\n    }\n}\n\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"188":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"189":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use dep::std::cmp::Eq;\nuse crate::{\n    abis::{caller_context::CallerContext, side_effect::{Ordered, RangeOrdered, Scoped}},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.hash == other.hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"203":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x22786e4f971661d2e49095e6b038e5170bc47b795253916d5657c4bdd1df50bf;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"204":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"206":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"210":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    abis::{gas_settings::GasSettings, gas::Gas}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n        serialized.push(self.side_effect_counter as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n            side_effect_counter: reader.read() as u32,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n            side_effect_counter: 0,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context = CallContext::empty();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context = CallContext::empty();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"212":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, note_hash::NoteHash, nullifier::Nullifier, read_request::ReadRequest,\n    gas::Gas, global_variables::GlobalVariables, log_hash::LogHash\n},\n    address::AztecAddress,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH, MAX_UNENCRYPTED_LOGS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize, Empty}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    l1_to_l2_msg_read_requests: [ReadRequest; MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [NoteHash; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [Nullifier; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    // Global variables injected into this circuit\n    global_variables: GlobalVariables,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n    \n    start_gas_left: Gas,\n    end_gas_left: Gas,\n    transaction_fee: Field,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.l1_to_l2_msg_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        for i in 0..MAX_UNENCRYPTED_LOGS_PER_CALL{\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n        fields.push(self.transaction_fee);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            l1_to_l2_msg_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            global_variables: reader.read_struct(GlobalVariables::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n            start_gas_left: reader.read_struct(Gas::deserialize),\n            end_gas_left: reader.read_struct(Gas::deserialize),\n            transaction_fee: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PublicCircuitPublicInputs {\n    fn empty() -> Self {\n        PublicCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [NoteHash::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [Nullifier::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0 as u32,\n            end_side_effect_counter: 0 as u32,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0 as u8,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PublicCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PublicCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x01681b19fb7fe21aa9c2cf9fb47520149f46edd679b2e7c2b2c4a279fd685125;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"214":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"22":{"path":"std/field.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"221":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"222":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"232":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<M, N>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<M, N>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<N>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.tx_tree_height);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"238":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    contract_class_id::ContractClassId, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{Hash, is_empty},\n    utils::{uint256::U256, field::field_from_bytes_32_trunc}\n};\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, note_hash_index: u32) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        note_hash_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, first_nullifier: Field, index: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, index);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    dep::std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"242":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"248":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"260":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"28":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n\n    pub fn hash<N>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<N>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"280":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"281":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"368":{"path":"/usr/src/noir-projects/noir-contracts/contracts/schnorr_single_key_account_contract/src/auth_oracle.nr","source":"use dep::authwit::auth_witness;\nuse dep::aztec::{protocol_types::{address::PartialAddress, grumpkin_point::GrumpkinPoint}, keys::PublicKeys};\n\nstruct AuthWitness {\n    keys: PublicKeys,\n    signature: [u8; 64],\n    partial_address: PartialAddress,\n}\n\nimpl AuthWitness {\n    fn deserialize(values: [Field; 73]) -> Self {\n        let mut signature = [0; 64];\n        for i in 0..64 {\n            signature[i] = values[i + 8] as u8;\n        }\n        Self {\n            keys: PublicKeys {\n                npk_m: GrumpkinPoint::new(values[0], values[1]),\n                ivpk_m: GrumpkinPoint::new(values[2], values[3]),\n                ovpk_m: GrumpkinPoint::new(values[4], values[5]),\n                tpk_m: GrumpkinPoint::new(values[6], values[7])\n            },\n            signature,\n            partial_address: PartialAddress::from_field(values[72])\n        }\n    }\n}\n\nunconstrained pub fn get_auth_witness(message_hash: Field) -> AuthWitness {\n    let witness: [Field; 73] = auth_witness::get_auth_witness(message_hash);\n    AuthWitness::deserialize(witness)\n}\n"},"369":{"path":"/usr/src/noir-projects/noir-contracts/contracts/schnorr_single_key_account_contract/src/main.nr","source":"mod util;\nmod auth_oracle;\n\ncontract SchnorrSingleKeyAccount {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, PrivateContext};\n\n    use dep::authwit::{entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions};\n\n    use crate::{util::recover_address, auth_oracle::get_auth_witness};\n\n    // Note: If you globally change the entrypoint signature don't forget to update default_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload);\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        let witness = get_auth_witness(outer_hash);\n        assert(recover_address(outer_hash, witness).eq(context.this_address()));\n        true\n    }\n}\n"},"370":{"path":"/usr/src/noir-projects/noir-contracts/contracts/schnorr_single_key_account_contract/src/util.nr","source":"use dep::std::{schnorr::verify_signature_slice};\nuse dep::aztec::prelude::AztecAddress;\nuse crate::auth_oracle::AuthWitness;\n\npub fn recover_address(message_hash: Field, witness: AuthWitness) -> AztecAddress {\n    let message_bytes = message_hash.to_be_bytes(32);\n    // In a single key account contract we re-used ivpk_m as signing key\n    let verification = verify_signature_slice(\n        witness.keys.ivpk_m.x,\n        witness.keys.ivpk_m.y,\n        witness.signature,\n        message_bytes\n    );\n    assert(verification == true);\n\n    AztecAddress::compute(witness.keys.hash(), witness.partial_address)\n}\n"},"4":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u32) -> T {\n        assert(index < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<Len>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, MaxLen> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, MaxLen, Len> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n    // TODO: Allow imports from \"super\"\n    use crate::collections::bounded_vec::BoundedVec;\n\n    #[test]\n    fn empty_equality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n        assert_eq(bounded_vec1, bounded_vec2);\n    }\n\n    #[test]\n    fn inequality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n        bounded_vec1.push(1);\n        bounded_vec2.push(2);\n\n        assert(bounded_vec1 != bounded_vec2);\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n}\n"},"50":{"path":"/usr/src/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n"},"51":{"path":"/usr/src/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::pedersen_hash\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\"),\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_new_nullifier(nullifier, 0);\n}\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"consume((Field),Field)\"),\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n// docs:start:compute_call_authwit_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_call_authwit_hash<N>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_outer_authwit_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_call_authwit_hash\n\npub fn compute_inner_authwit_hash<N>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\npub fn compute_outer_authwit_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field\n) -> Field {\n    pedersen_hash(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n * \n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\"),\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * @param reject True if all authwits should be rejected, false otherwise \n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"set_reject_all(bool)\"),\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n"},"52":{"path":"/usr/src/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::context::{PrivateContext, PublicContext};\nuse dep::aztec::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector, hash::pedersen_hash};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_outer_authwit_hash};\n\nstruct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\nimpl AccountActions<&mut PrivateContext> {\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload) {\n        let valid_fn = self.is_valid_impl;\n\n        let fee_hash = fee_payload.hash();\n        assert(valid_fn(self.context, fee_hash));\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n\n        let app_hash = app_payload.hash();\n        assert(valid_fn(self.context, app_hash));\n        app_payload.execute_calls(self.context);\n    }\n    // docs:end:entrypoint\n\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can \n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_outer_authwit_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n"},"53":{"path":"/usr/src/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::pedersen_hash, traits::{Hash, Serialize}};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_slice(self.nonce.to_be_bytes(32));\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n"},"55":{"path":"/usr/src/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::pedersen_hash, traits::{Hash, Serialize}};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: Field = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.push(self.is_fee_payer as Field);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_slice(self.nonce.to_be_bytes(32));\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n"},"64":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    grumpkin_point::GrumpkinPoint, traits::{Deserialize, Serialize}\n};\nuse crate::keys::constants::{NUM_KEY_TYPES, NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH = 8;\n\nstruct PublicKeys {\n    npk_m: GrumpkinPoint,\n    ivpk_m: GrumpkinPoint,\n    ovpk_m: GrumpkinPoint,\n    tpk_m: GrumpkinPoint,\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            poseidon2_hash(\n                [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH\n        ]\n            )\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> GrumpkinPoint {\n        assert(index as u8 < NUM_KEY_TYPES, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.tpk_m.x,\n            self.tpk_m.y,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: GrumpkinPoint { x: serialized[0], y: serialized[1] },\n            ivpk_m: GrumpkinPoint { x: serialized[2], y: serialized[3] },\n            ovpk_m: GrumpkinPoint { x: serialized[4], y: serialized[5] },\n            tpk_m: GrumpkinPoint { x: serialized[6], y: serialized[7] },\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint { x: 1, y: 2 },\n        ivpk_m: GrumpkinPoint { x: 3, y: 4 },\n        ovpk_m: GrumpkinPoint { x: 5, y: 6 },\n        tpk_m: GrumpkinPoint { x: 7, y: 8 }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x2406c1c88b7afc13052335bb9af43fd35034b5ba0a9caab76eda2833cf8ec717;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint { x: 1, y: 2 },\n        ivpk_m: GrumpkinPoint { x: 3, y: 4 },\n        ovpk_m: GrumpkinPoint { x: 5, y: 6 },\n        tpk_m: GrumpkinPoint { x: 7, y: 8 }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n"},"91":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message,\n    hash::{hash_args_array, ArgsHasher, compute_unencrypted_log_hash},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    note::note_interface::NoteInterface,\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{\n    emit_encrypted_note_log, emit_encrypted_event_log,\n    emit_contract_class_unencrypted_log_private_internal, emit_unencrypted_log_private_internal\n},\n    logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field,\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, grumpkin_point::GrumpkinPoint, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::{is_empty, Empty},\n    utils::arrays::find_index\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<NoteHash, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<Nullifier, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.new_nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n    // --> might be a better approach to force devs to make a public function call that emits the log if needed then\n    // it would be less easy to accidentally leak information.\n    // If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\n    pub fn emit_unencrypted_log<T, N, M>(&mut self, log: T) where T: ToBytesForUnencryptedLog<N, M> {\n        let event_selector = 5; // TODO: compute actual event selector.\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n        let log_slice = log.to_be_bytes_arr();\n        let log_hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n        // 44 = addr (32) + selector (4) + raw log len (4) + processed log len (4)\n        let len = 44 + log_slice.len().to_field();\n        let side_effect = LogHash { value: log_hash, counter, length: len };\n        self.unencrypted_logs_hashes.push(side_effect);\n        // call oracle\n        let _void = emit_unencrypted_log_private_internal(contract_address, event_selector, log, counter);\n    }\n\n    // This fn exists separately from emit_unencrypted_log because sha hashing the preimage\n    // is too large to compile (16,200 fields, 518,400 bytes) => the oracle hashes it\n    // It is ONLY used with contract_class_registerer_contract since we already assert correctness:\n    // - Contract class -> we will commit to the packed bytecode (currently a TODO)\n    // - Private function -> we provide a membership proof\n    // - Unconstrained function -> we provide a membership proof\n    // Ordinary logs are not protected by the above so this fn shouldn't be called by anything else\n    pub fn emit_contract_class_unencrypted_log<N>(&mut self, log: [Field; N]) {\n        let event_selector = 5; // TODO: compute actual event selector.\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n        let log_hash = emit_contract_class_unencrypted_log_private_internal(contract_address, event_selector, log, counter);\n        // 44 = addr (32) + selector (4) + raw log len (4) + processed log len (4)\n        let len = 44 + N * 32;\n        let side_effect = LogHash { value: log_hash, counter, length: len };\n        self.unencrypted_logs_hashes.push(side_effect);\n    }\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, encrypted_log: [u8; M]) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = encrypted_log.len() as Field + 4;\n        let log_hash = sha256_to_field(encrypted_log);\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, encrypted_log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, encrypted_log: [u8; M]) {\n        let counter = self.next_counter();\n        let len = encrypted_log.len() as Field + 4;\n        let log_hash = sha256_to_field(encrypted_log);\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, encrypted_log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, start_side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest { hash: item.hash(), caller_context, start_side_effect_counter, end_side_effect_counter }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"}}}