import { Fr } from '@aztec/foundation/fields';
import { AztecAddress } from '@aztec/stdlib/aztec-address';
import { TxHash } from '@aztec/stdlib/tx';

import { NoteValidationRequest } from './note_validation_request.js';

describe('NoteValidationRequest', () => {
  it('output of Noir serialization deserializes as expected', () => {
    const serialized = [
      '0x0000000000000000000000000000000000000000000000000000000000000001',
      '0x0000000000000000000000000000000000000000000000000000000000000002',
      '0x0000000000000000000000000000000000000000000000000000000000000003',
      '0x0000000000000000000000000000000000000000000000000000000000000004',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000002',
      '0x0000000000000000000000000000000000000000000000000000000000000006',
      '0x0000000000000000000000000000000000000000000000000000000000000007',
      '0x0000000000000000000000000000000000000000000000000000000000000008',
      '0x0000000000000000000000000000000000000000000000000000000000000009',
    ].map(Fr.fromHexString);

    const request = NoteValidationRequest.fromFields(serialized);

    expect(request.contractAddress).toEqual(AztecAddress.fromBigInt(1n));
    expect(request.storageSlot).toEqual(new Fr(2));
    expect(request.nonce).toEqual(new Fr(3));
    expect(request.content).toEqual([new Fr(4), new Fr(5)]);
    expect(request.noteHash).toEqual(new Fr(6));
    expect(request.nullifier).toEqual(new Fr(7));
    expect(request.txHash).toEqual(TxHash.fromBigInt(8n));
    expect(request.recipient).toEqual(AztecAddress.fromBigInt(9n));
  });
});
