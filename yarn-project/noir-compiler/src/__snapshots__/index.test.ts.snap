// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`noir-compiler using nargo binary compiles the test contract 1`] = `
[
  {
    "debug": {
      "debugSymbols": [
        "eJyrVsrJT04syczPK1ayqlYyULKKrlYqLkjMA/GKSxKLSpSsDE0MdZRS81KALFOzWh2ltMycVCC7VgdDpbEJVKGZOVydsQkWhUYGMJVGxkhKa2N1lAwH2gm1tQDKLFO0",
        "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      ],
      "fileMap": {
        "3": {
          "path": "std/hash",
          "source": "mod poseidon;

#[foreign(sha256)]
fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}

#[foreign(blake2s)]
fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}

fn pedersen<N>(input : [Field; N]) -> [Field; 2] {
    pedersen_with_separator(input, 0)
}

#[foreign(pedersen)]
fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}

#[foreign(hash_to_field_128_security)]
fn hash_to_field<N>(_input : [Field; N]) -> Field {}

#[foreign(keccak256)]
fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}

// mimc-p/p implementation
// constants are (publicly generated) random numbers, for instance using keccak as a ROM.
// You must use constants generated for the native field
// Rounds number should be ~ log(p)/log(exp)
// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended
fn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {
    //round 0
    let mut t = x + k;
    let mut h = t.pow_32(exp);
    //next rounds
    for i in 1 .. constants.len() {
        t = h + k + constants[i];
        h = t.pow_32(exp);
    };
    h + k
}

global MIMC_BN254_ROUNDS = 91;

//mimc implementation with hardcoded parameters for BN254 curve.
fn mimc_bn254<N>(array: [Field; N]) -> Field {
    //mimc parameters
    let exponent = 7;
    //generated from seed "mimc" using keccak256 
    let constants: [Field; MIMC_BN254_ROUNDS] = [
        0, 
        20888961410941983456478427210666206549300505294776164667214940546594746570981,
        15265126113435022738560151911929040668591755459209400716467504685752745317193,
        8334177627492981984476504167502758309043212251641796197711684499645635709656,
        1374324219480165500871639364801692115397519265181803854177629327624133579404,
        11442588683664344394633565859260176446561886575962616332903193988751292992472,
        2558901189096558760448896669327086721003508630712968559048179091037845349145,
        11189978595292752354820141775598510151189959177917284797737745690127318076389,
        3262966573163560839685415914157855077211340576201936620532175028036746741754,
        17029914891543225301403832095880481731551830725367286980611178737703889171730,
        4614037031668406927330683909387957156531244689520944789503628527855167665518,
        19647356996769918391113967168615123299113119185942498194367262335168397100658,
        5040699236106090655289931820723926657076483236860546282406111821875672148900,
        2632385916954580941368956176626336146806721642583847728103570779270161510514,
        17691411851977575435597871505860208507285462834710151833948561098560743654671,
        11482807709115676646560379017491661435505951727793345550942389701970904563183,
        8360838254132998143349158726141014535383109403565779450210746881879715734773,
        12663821244032248511491386323242575231591777785787269938928497649288048289525,
        3067001377342968891237590775929219083706800062321980129409398033259904188058,
        8536471869378957766675292398190944925664113548202769136103887479787957959589,
        19825444354178182240559170937204690272111734703605805530888940813160705385792,
        16703465144013840124940690347975638755097486902749048533167980887413919317592,
        13061236261277650370863439564453267964462486225679643020432589226741411380501,
        10864774797625152707517901967943775867717907803542223029967000416969007792571,
        10035653564014594269791753415727486340557376923045841607746250017541686319774,
        3446968588058668564420958894889124905706353937375068998436129414772610003289,
        4653317306466493184743870159523234588955994456998076243468148492375236846006,
        8486711143589723036499933521576871883500223198263343024003617825616410932026,
        250710584458582618659378487568129931785810765264752039738223488321597070280,
        2104159799604932521291371026105311735948154964200596636974609406977292675173,
        16313562605837709339799839901240652934758303521543693857533755376563489378839,
        6032365105133504724925793806318578936233045029919447519826248813478479197288,
        14025118133847866722315446277964222215118620050302054655768867040006542798474,
        7400123822125662712777833064081316757896757785777291653271747396958201309118,
        1744432620323851751204287974553233986555641872755053103823939564833813704825,
        8316378125659383262515151597439205374263247719876250938893842106722210729522,
        6739722627047123650704294650168547689199576889424317598327664349670094847386,
        21211457866117465531949733809706514799713333930924902519246949506964470524162,
        13718112532745211817410303291774369209520657938741992779396229864894885156527,
        5264534817993325015357427094323255342713527811596856940387954546330728068658,
        18884137497114307927425084003812022333609937761793387700010402412840002189451,
        5148596049900083984813839872929010525572543381981952060869301611018636120248,
        19799686398774806587970184652860783461860993790013219899147141137827718662674,
        19240878651604412704364448729659032944342952609050243268894572835672205984837,
        10546185249390392695582524554167530669949955276893453512788278945742408153192,
        5507959600969845538113649209272736011390582494851145043668969080335346810411,
        18177751737739153338153217698774510185696788019377850245260475034576050820091,
        19603444733183990109492724100282114612026332366576932662794133334264283907557,
        10548274686824425401349248282213580046351514091431715597441736281987273193140,
        1823201861560942974198127384034483127920205835821334101215923769688644479957,
        11867589662193422187545516240823411225342068709600734253659804646934346124945,
        18718569356736340558616379408444812528964066420519677106145092918482774343613,
        10530777752259630125564678480897857853807637120039176813174150229243735996839,
        20486583726592018813337145844457018474256372770211860618687961310422228379031,
        12690713110714036569415168795200156516217175005650145422920562694422306200486,
        17386427286863519095301372413760745749282643730629659997153085139065756667205,
        2216432659854733047132347621569505613620980842043977268828076165669557467682,
        6309765381643925252238633914530877025934201680691496500372265330505506717193,
        20806323192073945401862788605803131761175139076694468214027227878952047793390,
        4037040458505567977365391535756875199663510397600316887746139396052445718861,
        19948974083684238245321361840704327952464170097132407924861169241740046562673,
        845322671528508199439318170916419179535949348988022948153107378280175750024,
        16222384601744433420585982239113457177459602187868460608565289920306145389382,
        10232118865851112229330353999139005145127746617219324244541194256766741433339,
        6699067738555349409504843460654299019000594109597429103342076743347235369120,
        6220784880752427143725783746407285094967584864656399181815603544365010379208,
        6129250029437675212264306655559561251995722990149771051304736001195288083309,
        10773245783118750721454994239248013870822765715268323522295722350908043393604,
        4490242021765793917495398271905043433053432245571325177153467194570741607167,
        19596995117319480189066041930051006586888908165330319666010398892494684778526,
        837850695495734270707668553360118467905109360511302468085569220634750561083,
        11803922811376367215191737026157445294481406304781326649717082177394185903907,
        10201298324909697255105265958780781450978049256931478989759448189112393506592,
        13564695482314888817576351063608519127702411536552857463682060761575100923924,
        9262808208636973454201420823766139682381973240743541030659775288508921362724,
        173271062536305557219323722062711383294158572562695717740068656098441040230,
        18120430890549410286417591505529104700901943324772175772035648111937818237369,
        20484495168135072493552514219686101965206843697794133766912991150184337935627,
        19155651295705203459475805213866664350848604323501251939850063308319753686505,
        11971299749478202793661982361798418342615500543489781306376058267926437157297,
        18285310723116790056148596536349375622245669010373674803854111592441823052978,
        7069216248902547653615508023941692395371990416048967468982099270925308100727,
        6465151453746412132599596984628739550147379072443683076388208843341824127379,
        16143532858389170960690347742477978826830511669766530042104134302796355145785,
        19362583304414853660976404410208489566967618125972377176980367224623492419647,
        1702213613534733786921602839210290505213503664731919006932367875629005980493,
        10781825404476535814285389902565833897646945212027592373510689209734812292327,
        4212716923652881254737947578600828255798948993302968210248673545442808456151,
        7594017890037021425366623750593200398174488805473151513558919864633711506220,
        18979889247746272055963929241596362599320706910852082477600815822482192194401,
        13602139229813231349386885113156901793661719180900395818909719758150455500533,
    ];

    let mut r = 0;
    for elem in array {
        let h = mimc(elem, r, constants, exponent);
        r = r + elem + h;
    }
    r
}
",
        },
      },
    },
    "functions": [
      {
        "bytecode": "H4sIAAAAAAAA/61Q0QrDMAhMuqXfo1EbfduvLCz9/y8Y66gF6Wt7cJwncsjNKaVH2pE3zq6H//r8v3luLO6n0z7iyHu5wjVgvjFrClkEC/NodSDhG6p1FWDpi6KiqHyqEg1lbdatgSHTwFWMVg8r9/0FsfMcOo49l9DxD+/NSgK4AQAA",
        "functionType": "secret",
        "isInternal": false,
        "name": "constructor",
        "parameters": [
          {
            "name": "pub_param",
            "type": {
              "kind": "field",
            },
            "visibility": "public",
          },
        ],
        "returnTypes": [],
        "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f",
      },
      {
        "bytecode": "H4sIAAAAAAAA/6WPuw2AMAxEHSbyN7E7VkmEs/8IFIAUCVHxmpOuON3bAKDAm6fb7xSsqtk4Sagjx3BDtVGdnMztYBdJV28xomGQStK0kIkXZdnCX3D/+rp6nNHQ/4XYAAAA",
        "functionType": "open",
        "isInternal": false,
        "name": "openFunction",
        "parameters": [],
        "returnTypes": [
          {
            "kind": "field",
          },
        ],
        "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f",
      },
    ],
    "name": "TestContract",
  },
]
`;

exports[`noir-compiler using nargo binary generates Aztec.nr external interface 1`] = `
"/* Autogenerated file, do not edit! */
  
use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::aztec::constants_gen::RETURN_VALUES_LENGTH;



// Interface for calling TestContract functions from a private context
struct TestContractPrivateContextInterface {
  address: Field,
}

impl TestContractPrivateContextInterface {
  fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  fn openFunction(
    self,
    context: &mut PrivateContext
  ) {
    let mut serialized_args = [0; 0];

    context.call_public_function(self.address, 0x46be982e, serialized_args)
  }
  
}
  
  


// Interface for calling TestContract functions from a public context
struct TestContractPublicContextInterface {
  address: Field,
}

impl TestContractPublicContextInterface {
  fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  fn openFunction(
    self,
    context: PublicContext
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 0];

    context.call_public_function(self.address, 0x46be982e, serialized_args)
  }
  
}
  
  
"
`;

exports[`noir-compiler using nargo binary generates typescript interface 1`] = `
"
/* Autogenerated file, do not edit! */

/* eslint-disable */
import { AztecAddress, CompleteAddress, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, Wallet } from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { PXE, PublicKey } from '@aztec/types';
import { ContractAbi } from '@aztec/foundation/abi';
import TestContractContractAbiJson from '../target/test.json' assert { type: 'json' };
export const TestContractContractAbi = TestContractContractAbiJson as ContractAbi;

/**
 * Type-safe interface for contract TestContract;
 */
export class TestContractContract extends ContractBase {
  
  private constructor(
    /** The deployed contract's complete address. */
    completeAddress: CompleteAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    super(completeAddress, TestContractContractAbi, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    const extendedContractData = await wallet.getExtendedContractData(address);
    if (extendedContractData === undefined) {
      throw new Error('Contract ' + address.toString() + ' is not deployed');
    }
    return new TestContractContract(extendedContractData.getCompleteAddress(), wallet);
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(rpc: PXE, pub_param: FieldLike) {
    return new DeployMethod<TestContractContract>(Point.ZERO, rpc, TestContractContractAbi, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(rpc: PXE, publicKey: PublicKey, pub_param: FieldLike) {
    return new DeployMethod<TestContractContract>(publicKey, rpc, TestContractContractAbi, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return TestContractContractAbi;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** openFunction() */
    openFunction: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
"
`;
