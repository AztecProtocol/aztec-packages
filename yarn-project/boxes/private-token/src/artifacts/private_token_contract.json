{
    "name": "PrivateToken",
    "functions": [
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "preimage",
                    "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "H4sIAAAAAAAA/9Xd2XITSRYG4NJi2aWSF2zArGbfFy8yOxixGjCLwexLL9CGnoi5mui5mNeZ95gXmYu+6/doMrt+/DutrpCjT3b9ygiHq1Rynu+czErJhUVlSZJUkj9a7etXPdnYcLyTf5/5a222YtfXTExntU+cNUNnJZ8HMb31CHW1Ng70gbFhPO4wYg0Y/Po19PUr/frVTNbab/kEcY8P5I9hzqT081V6rBbUIKXjaA3a7tjk1W7Y131mIPcn9J3zHclzGbSNO5cGNeJ6hnVLKH6DnEYWP6d5TgwE9XDHhmgbjszWMev6aHVxZBQb8VvkGLZ1zLk+Rro4hsmB+CPkGLV1tNPA4VrRHBkly5itxc+RLRQLLsTJ6PgQObbYOvz7jbEgf+yzr1drs4+srZKtKT3WKNmSkWEknqWddYkdIc5cGuTsWtG5zpaJCJbxTVgmyLItgmXrJizbyDIZwbJ9E5ZJsuyMYNmxCctOsuyOYNm1CQviu5/bk2/zurLX1ufXkz2BBfuIxef5UERL1iU212FcoA4wNEusw1aBOsDQKrEO2wXqAEO1xDrsEKgDDLUS67BLoA4w1P/mOkSI006DnF0reu1iy5Stxf+OtY9iwTVFtcdxfo3aZ1z7CsVEv9hnX6/WZh9ZWyVbY8wr1+d+2z79ez6uqWtF581+yu+AraXtxsxdH8O4ov+wtvz6FeMa2iHKFzH5GtrBfPsQOQ7bOvy4sMO1onE5TJYjthZfk6MUCy7Eyeg4v5YctXX48+5IkD/22der9WDJ1lhrhHEufi5yLq4VzUXO75ixBWsExhX9o45wxl4jTlC+iMlrxPF8+wQ5ThrXIg0crhWNy0mynLK1+JqcplhwIU5Gx3lsTts6/Hl3Ksgf++zr1Xq8ZGuEsZp3fZ6x7dPPRa6pa0Vz8Qzld9bYgjUC44r+w9rGXiP4DwwQk9eIacQix6xxLdLA4VrRuMySZc7W4hltigUX4mR0nH83b9s6/Hk3F+SPffb1ap0u2RphrPy/0c/b9unnItfUtaK5OE/5nTO2YI3AuKL/sLax14gLlC9i8hpxPt++8Dc53Pv3WuCo0fHJytrz/kemS7Ymfz3nYrK+Fc2VS2S5bGvx9blCseBCnIyO8/WcK7YOvxZcDvLHPvt6tTb7yNoq2RrrdzXjXPway7m4VnTecH5XbS3frudgXNE/6ghn7DV2gfJFTF5jr+XbC+S4buvw48IO14rG5TpZOrYWX5MbFGsh6D+j43w954atY93fHKNf7LOvV+u1kq2x1gjjXPxc5FxcK5qLnN9NYwvWCIwr+g/rGHuNuJ1szJ3XiFv59m1y3DGuRRo4XCsalztkuWtr8TVZpFhwIU5Gx3lsFm0d/ry7G+SPffb1ar1VsjXW9RzjXPxc5FxcK5qLnN89YwvWCIwr+kcd4Yy9RjygfBGT14j7+fYDciwZ1yINHK4VjcsSWR7aWnxNHlEsuBAno+N8PeeRrcOfdw+D/LHPvl6t90u2xrqeY5yLn4uci2tFc5Hze2xswRqBcUX/qCOcsdeIZcoXMXmNeJJvL9MxbOOYe8+9WFlzPrN1+msrT5P1rWjcnlHNVmwtvmbPKRZciJPRcb628tzW4c/LlSB/7LOvV2uzj6ytkq2xfm8yzsWvd5yLa0XnDef3wtby7doKxhX9o45wxl7vXlG+iMnr3ct8+xU5Xts6/Liww7WicXlNlje2Fl+TtxQLLsTJ6DhfW3lr6/Dn3Zsgf+yzr1fry5KtsdYI41z8XORcXCuai5zfO2ML1giMK/pHHeGMvUZ8oHwRk9eI9/n2BzqG90Q4xu+JMuqP7R9s7bNF44ZYbKkJWepClgEhS0PIMihkGRKypEKWppAlE7K0hCzDQpYRIcuokGVMyLJFyDIuZJkQsmwVsmwTsmwXskwKWXYIWXYKWXYJWXYLWfYIWfYKWaaELPuELPuFLAeELAeFLIeELIeFLEeELEeFLMeELMeFLCeELCeFLKeELKeFLGeELGeFLNNClhkhy6yQZU7I0hayzAtZzglZzgtZLghZLgpZLglZLgtZrghZrgpZrglZFoQs14UsHSHLDSHLTSHLLSHLbSHLHSHLXSHLopDlnpDlvpDlgZBlScjyUMjySMjyWMjyRMiyLGR5KmR5JmRZEbI8F7K8ELK8FLK8ErK8FrK8EbK8FbK8E7K8F7JUSrakycbP6KR0vEmPVYOfdZ9t+C/de++7/PFql36+SzY+j3P/PkLuHKdD+99TbpXAV6blvZDlnZDlrZDljZDltZDllZDlpZDlhZDluZBlRcjyTMjyVMiyLGR5ImR5LGR5JGR5KGRZErI8ELLcF7LcE7IsClnuClnuCFluC1luCVluClluCFk6QpbrQpYFIcs1IctVIcsVIctlIcslIctFIcsFIct5Ics5Icu8kKUtZJkTsswKWWaELNNClrNCljNCltNCllNClpNClhNCluNClmNClqNCliNClsNClkNCloNClgNClv1Cln1Clikhy14hyx4hy24hyy4hy04hyw4hy6SQZbuQZZuQZauQZULIMi5k2SJkGROyjApZRoQsw0KWlpAlE7I0hSypkGVIyDIoZGkIWQaELHUhS03IUu1i+cHW4u9tg5gJmbh1aPsHsvxoa/H/LPSRYsGFOBkd58/efrR1+PH5Mcgf++zr1fqhZKuLO2UbdyZCLn4uci6uFc1Fzu+TsQX3WcK4on/UEc4qGWLcZ2mV8kVMvs/ST/n2Kjk+2zrm08DhWtG4fCbLF1uLr8nPFAsuxMnoOP//qz/bOvx59yXIH/vs69U63UfW831k/alka0qPrdJj1cA8mPz5PdBqEdxJ4EarUQ3RKiVb/uyzvLWgVlxXHHPvc3+lz/LWu/wMnltPNj6Pcx+IkDvH6dA+YvFneesClmoXS8PW4td4/N6WJOvvwQcHTHy/tSHjmrg+0i6OIXIgPt/frGnr8H9G1u2ehE36jvh8P7GWrcPfY5odrhWdv3w/sWFbi58jIxQLrmHax3G+V+GIrcOfN8NB/thnX6/WwT6ypiVbI8yrz67PUds+/e81XFPXis4bvsfbmK3l2z2mMa7oP6wtv/+Isb6Pr6W7bjxd438v4edhu07H+fUex/9fW8vJrdVYh76s/rKy+ulfq78srf6n0qXfKj02QNu8xk8EP8PvOSbo+Y1k7TWyk3+f+Wutze9V0IrmEeIHNVj+98d//uMT1aBC/da69MvvlQaC53H+/JocuswWhgYBqzmkngdvdEl+MC+Agzbp+O+CXyKXkbkAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "initial_supply",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "owner",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "getBalance",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "owner",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "field"
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "mint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "owner",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "transfer",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "recipient",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "debug": {
        "debugSymbols": [
            "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memkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjoZmelkZKaTkZlORmY62QR2WCMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTychMJyMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTychMJyMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTychMJyMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTychMJyMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTychMJyMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTychMJyMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTychMJyMznYzMdDIy08nITCcjM52MzHQyMtPJyEwnIzOdjMx0MjLTyclMJycznZzMdHIy08knsMM6menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5BZjoFmekUZKZTkJlOMYEdNshMpyAznYLMdAoy0ynITKcgM52CzHQKMtMpyEynIDOdgsx0CjLTKchMpyAznYLMdAoy0ynITKcgM52CzHQKMtMpyEynIDOdgsx0CjLTKchMpyAznYLMdAoy0ynITKcgM52CzHQKMtMpyEynIDOdgsx0CjLTKchMpyAznYLMdAoy0ynITKcgM52CzHQKMtMpyEynIDOdgsx0CjLTKchMpyAznYLMdAoy0ynITKcgM52CzHQKMtMpyEynIDOdgsx0CjLTKchMpyAznYLMdAoy0ynITKcgM52CzHQKMtMpyEynIDOdgsx0CjLTKchMpyAznYLMdAoy0ynITKcgM52CzHQKMtMpyEynSM100mW5iLdZbj+8TNeB11ciLtPM7MUdp5nZtTtOM7O/95tmavZUx2lm3jN0nGbm3UXHaWbeh3ScZuYdS8dpZt7bdJzmOXZBqQldHad5jl1QaupXt2luqflgHad5il3Qlpo51nGap9gFbRNmF+SvH34Wj9nblMRjdiwF8eUv8y5ql494JceXknbzi/Rte3l0voxfrKUdxy8WsY7jF6tHx/GLy7bj+MWV1XH84i9/x/GL++SO4xc3qB3HL+4M+41f/qpgx/HvvH7LX7jrOP6d12/5a2sdx7/z+i1/+avj+Hdev+WvUHUcv3X9yrw9PypLvB2//EWkjuO3rt/a+K3rV+SyTRL1wvit67c2fuv6rY3fun4l1sv421IYv3X91sZvXb+18VvXr17/qmpLYf2Wv0PRb/zy1xw6jt+6fmvjt67f2vit67c2fuv6rY3fun5r47eu39r4reu3Nv6d12/5De1+45dfou44/p3Xb/lV5I7j33n9ll/o7Tj+nddv+bXYjuPfef2WXy7tOP6d12/5Fc2fG38t7E/Kb1F2HL/j+i2O37p+TS77N/PS+K3rtzZ+6/qtjV9ev9dN67qur8f/9kPlt4EWv/7QtL79pPK7NbUfKv96VH6onPO//KEvX/4HBMZPKQ==",
            "eJzdmstuWjEQht/lrBHyXOzx8CpVFqhNpUhRUhV2iHcvNx8fkZHdqq0zyQqQfsPn2zcD4jA9v37d7p9eX3bT5jDRtPlymHY/ti/nV7v99ud+2oTV9Pjy7fR4XE3fn54fpw0cV29SgJryLXl6rjVNaMUpBy1xyorL+MNqYjck0Q1JckMibkiyGxJ1QwLBDwr4QUE/KH48C35EC35MC35UC35cC35kC35si35si35si35si35si35si35si35si35si35si35sS35sS35sS35sS35sSyNtq4IlziHme5SRtu2gjLRtB2WkbTsoI23bQRlp2zYKj7RtB2WkbTsoI23bQRlp2w6KH9uyH9uyH9uyH9uyH9uyH9tG07YZC0zm1MYJzOXtg/KcjcEIYyhZJJmjfOEwVfsOHKZn/4AD6nJTiG0OgZIVqRw5GlHVuesMUBHidRNNI3uHNt3tHdq0vHdosx7kNEOLLqDPA0xrtwaYbm0NMA2YNd4GKGNzHVVlni9VBWYysizltnNeRC/XPdn6+22O06enGURyG4SI4BYmitAOAy68DbrcUuOkpEKRoQKzdahYSpS1viuLhaCZiidDkOXSWSc7zFuCiO1wQ8DJLgSfeEdiKNEYU3tHMJfST0g1atG2ltiucR9tiXX+IUaTLpf4PEW7In7gKQrfT9Gun59qina1/U9TFC03hjLETjgV2dHConKpbckutw6oI5ZswjfUds13QJ24VKEkeE9tNx7eqf+y+3kfahnaK/0z6qH9RK7dVYjaDqOU9pgWUbp+DdW16b7a9kJtZYWuVX1tXgbm0jPExTpKugp2bcoKpSwoBbo/vHFtqqIzxmTrjDGvSWuMwNr+I1oMZb8T1ep12s6H4/EX/Attrg==",
            "",
            "eJzdmttqYjEUht9lX4tkHZKV+CpDL2SmA4Vih9E78d27W5tkYxcJZTSuzpUK/9Yvh/3lVzxOzy8/t4enl91+2hwnmjY/jtP+z3b39mp/2P49TBu3mh53v+bH02r6/fT8OG3gtPqUAkwhfiTn56mmCbU4RZdynGLCZfxhNbEZEm+GJJghETMk0QxJMkMCzg4K2EFBOyh2PAt2RAt2TAt2VAt2XAt2ZAt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bEt2bEt2bEt2bEt2bEsjbZsEc5ydj5coI23bQRlp2w7KSNt2UEbatoMy0rZtFB5p2w7KSNt2UEbatoMy0rYdFDu2ZTu2ZTu2ZTu2ZTu2ZTu29aptgYRKyUmpDeSYc9YlLlnvlDC6nEWSEuV3ElW2dyFRXfslEqiTTs63SQRyVqSSRK9EUyrd00Gob3teStXL9rFVh9vHVn1vH1s9G2YzlGuYYxM7JSlvT9U+kZQsS77JOC6i57tMPRq+QjJ/figoEtsoRAQfYSIP7TDgQpqQlnOoLE3IFBHq10HWVpElR3mxOVg0hBTzTkLnZDl52lZyZVEQsR1umU89I//vNfEuR70P7TXBmE9eQqpRjbY1yerp/w0nORXiFNJykudBBr1XfOtBCl8OUq8sNxsk+7ypiBczPoffYPTWcicYvYvcCUZvGDeDkVRgIvhOOGRxL+uCwDu3XjFMcHvM2YCfuP+5Y9yOO3A+VYPgJffgRnI17sGn9tW4Bx+E1+KWwWdbrK3R+dQOo+SfEWgRpXPxCGvVKLXQQy3pQueuslY31zzAXJoWMynhrNu1KgAsX43I0eVW4LV683WuUdk616ibrnWNuLX+7zbvfN4jVCvHvJwPp9MrIueB/g==",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod storage;\n\ncontract PrivateToken {\n    // Libs\n    use dep::std::option::Option;\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNoteMethods},\n    };\n\n    use dep::aztec::note::{\n        note_header::NoteHeader,\n        utils as note_utils,\n    };\n\n    use crate::storage::Storage;\n\n    // docs:start:constructor\n    // Constructs the contract and sets `initial_supply` which is fully owned by `owner`.\n    #[aztec(private)]\n    fn constructor(\n        initial_supply: Field, \n        owner: Field\n    )  {\n        let storage = Storage::init(Option::some(&mut context), Option::none());\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        if (initial_supply != 0) {\n            increment(owner_balance, initial_supply, owner);\n        }\n    }\n    // docs:end:constructor\n\n    // docs:start:mint\n    // Mints `amount` of tokens to `owner`.\n    #[aztec(private)]\n    fn mint(\n        amount: Field, \n        owner: Field\n    )  {\n        let storage = Storage::init(Option::some(&mut context), Option::none());\n\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        increment(owner_balance, amount, owner);\n    }\n    // docs:end:mint\n\n    // docs:start:transfer\n    // Transfers `amount` of tokens from msg_sender to a `recipient`.\n    #[aztec(private)]\n    fn transfer(\n        amount: Field, \n        recipient: Field,\n    )  {\n        let storage = Storage::init(Option::some(&mut context), Option::none());\n        let sender = context.msg_sender();\n\n        // Pick from the set of sender's notes to spend amount.\n        let sender_balance = storage.balances.at(sender);\n        decrement(sender_balance, amount, sender);\n\n        // Creates new note for the recipient.\n        let recipient_balance = storage.balances.at(recipient);\n        increment(recipient_balance, amount, recipient);\n    }\n    // docs:end:transfer\n\n    // docs:start:getBalance\n    // Helper function to get the balance of a user (\"unconstrained\" is a Noir alternative of Solidity's \"view\" function).\n    unconstrained fn getBalance(\n        owner: Field,\n    ) -> Field {\n        let storage = Storage::init(Option::none(), Option::none());\n\n        // Get the set of notes owned by the user.\n        let owner_balance = storage.balances.at(owner);\n\n        // Return the sum of all notes in the set.\n        balance_utils::get_balance(owner_balance)\n    }\n    // docs:end:getBalance\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    // docs:start:compute_note_hash_and_nullifier\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; VALUE_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n    }\n    // docs:end:compute_note_hash_and_nullifier\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-contracts/src/contracts/private_token_contract/src/main"
            },
            "4": {
                "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
                "path": "std/hash"
            },
            "32": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    private_global_variables: PrivateGlobalVariables,\n}\n\n// PublicContextInputs are expected to be provided to each public function\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/abi"
            },
            "34": {
                "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/log"
            },
            "40": {
                "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(storage_slot, nullifier, preimage, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/lifecycle"
            },
            "41": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_unique_siloed_note_hash,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::messaging::get_commitment_getter_data::make_commitment_getter_data;\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn ensure_note_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    let saved_note = get_note_internal(storage_slot, note_interface);\n\n    // Only copy over the header to the original note to make sure the preimage is the same.\n    let get_header = note_interface.get_header;\n    let set_header = note_interface.set_header;\n    let note_header = get_header(saved_note);\n    set_header(note, note_header);\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, *note);\n    context.push_read_request(note_hash_for_read_request);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\n// Modifies the note by populating it with header info.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    // Initialize header of note. Must be done before computing note hashes as it initializes the:\n    // - storage slot (used in inner note hash)\n    // - the contract address (used in siloed note hash)\n    // - and the nonce (used in the unique siloed note hash)\n    let set_header = note_interface.set_header;\n    let note_header = NoteHeader {\n        contract_address: (*context).this_address(),\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n        // real nonce (once public kernel applies nonces).\n        nonce: 0,\n        storage_slot\n    };\n    set_header(note, note_header);\n\n    // Get a note from oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let raw_oracle_ret = oracle::get_commitment::get_commitment(inner_note_hash);\n    let deserialized_oracle_ret = make_commitment_getter_data(raw_oracle_ret, 0);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // unique_siloed_note_hash once public kernel applies nonces\n    let saved_siloed_note_hash = deserialized_oracle_ret.message;\n\n    assert(saved_siloed_note_hash != 0); // TODO(dbanks12): necessary?\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    // Ensure that the note hash retrieved from oracle matches the one computed from note.\n    let computed_siloed_note_hash = compute_siloed_note_hash(note_interface, *note);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // compute_note_hash_for_read_or_nullify once public kernel applies nonces\n    assert(computed_siloed_note_hash == saved_siloed_note_hash);\n\n    context.push_read_request(computed_siloed_note_hash);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        let mut note_hash_for_read_request = 0;\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n            note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n        };\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n        // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n        context.push_read_request(note_hash_for_read_request);\n    };\n\n    // TODO(#1660)\n    // Move it back to get_notes_internal and only make read request for selected notes.\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/note_getter"
            },
            "43": {
                "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/note_hash"
            },
            "46": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n   fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/note_viewer_options"
            },
            "47": {
                "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    let mut note = deserialise(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/utils"
            },
            "50": {
                "source": "use crate::context::{PrivateContext, PublicContext};\nuse dep::std::option::Option;\n\nstruct Map<V> {\n    private_context: Option<&mut PrivateContext>,\n    public_context: Option<&mut PublicContext>,\n    storage_slot: Field,\n    state_var_constructor: fn(Option<&mut PrivateContext>, Option<&mut PublicContext>, Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(\n        private_context: Option<&mut PrivateContext>,\n        public_context: Option<&mut PublicContext>,\n        storage_slot: Field,\n        state_var_constructor: fn(\n            Option<&mut PrivateContext>,\n            Option<&mut PublicContext>,\n            Field,\n        ) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0); // Storage slot 0 not allowed. Storage slots must start from 1.\n        Map {\n            private_context,\n            public_context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(\n            self.private_context,\n            self.public_context,\n            derived_storage_slot,\n        )\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/state_vars/map"
            },
            "52": {
                "source": "use crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::note::lifecycle::{create_note, create_note_hash_from_public, destroy_note};\nuse crate::note::{\n    note_getter::{ensure_note_exists, ensure_note_hash_exists, get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_inner_note_hash,\n};\nuse dep::std::option::Option;\n\nstruct Set<Note, N> {\n    private_context: Option<&mut PrivateContext>,\n    public_context: Option<&mut PublicContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n\nimpl<Note, N> Set<Note, N> {\n    fn new(\n        private_context: Option<&mut PrivateContext>,\n        public_context: Option<&mut PublicContext>,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0); // Storage slot 0 not allowed. Storage slots must start from 1.\n        Set {\n            private_context,\n            public_context,\n            storage_slot,\n            note_interface,\n        }\n    }\n\n    fn insert(self, note: &mut Note) {\n        create_note(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.public_context.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    // TODO(#1386)\n    // Should be replaced by `assert_contains_and_remove`.\n    fn assert_contains_note_and_remove(self, note: Note) {\n        let mut note_with_header = note;\n        ensure_note_exists(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            self.note_interface,\n            &mut note_with_header,\n        );\n        self.remove(note_with_header);\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386):\n    // replace function above ^ once public kernel injects\n    // nonces to note hashes.\n    fn assert_contains_and_remove(self, note: Note) {\n        let mut note_with_header = note;\n        // Modifies note with the header which is necessary for the next step (remove).\n        ensure_note_hash_exists(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            self.note_interface,\n            &mut note_with_header,\n        );\n\n        let get_header = self.note_interface.get_header;\n        let set_header = self.note_interface.set_header;\n        let mut header = get_header(note);\n        // Set the nonce to nonzero so that the nullifier is treated as persistable\n        // (non-transient) and so the private kernel does not attempt to match it to\n        // a pending noteHash/commitment and squash them.\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): remove\n        // this hack once public kernel injects nonces.\n        header.nonce = 1;\n        set_header(&mut note_with_header, header);\n\n        self.remove(note_with_header);\n    }\n\n    fn remove(self, note: Note) {\n        destroy_note(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.private_context.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n\n    unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/state_vars/set"
            },
            "56": {
                "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n}\n\n// #[test]\n// fn test_vec() {\n//     let vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n//     assert(vec.len == 0);\n//     let vec1 = vec.push(1);\n//     assert(vec1.len == 1);\n//     let vec2 = vec1.push(1);\n//     assert(vec2.len == 2);\n//     let vec3 = vec2.push(1);\n//     assert(vec3.len == 3);\n//     let x = vec3.pop();\n//     assert(x == 1);\n// }",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/types/vec"
            },
            "61": {
                "source": "fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/utils"
            },
            "71": {
                "source": "use crate::types::point::Point;\nuse dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0];\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/get_public_key"
            },
            "72": {
                "source": "use crate::types::point::Point;\nuse crate::oracle::get_public_key::get_public_key;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> Field {}\n\nunconstrained fn get_secret_key(owner: Field) -> Field {\n    let owner_nullifying_public_key = get_public_key(owner);\n    get_secret_key_oracle(owner_nullifying_public_key)\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/get_secret_key"
            },
            "73": {
                "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained fn rand() -> Field {\n    rand_oracle()\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/rand"
            },
            "76": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _storage_slot: Field,\n    _nullifier: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_nullified_note<N>(\n    storage_slot: Field,\n    nullifier: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(storage_slot, nullifier, preimage, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialise the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialise the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_some.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let header = NoteHeader { contract_address, nonce, storage_slot };\n            let is_some = fields[read_offset + 1] as bool;\n            if is_some {\n                let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n                let mut note = deserialise(preimage);\n                set_header(&mut note, header);\n                placeholder_opt_notes[i] = Option::some(note);\n            }\n        };\n    };\n    placeholder_opt_notes\n}\n\nunconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {\n    // TODO\n    nullifier == 0\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/notes"
            },
            "78": {
                "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/logs"
            },
            "81": {
                "source": "use dep::aztec::note::{\n    note_getter::view_notes,\n    note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::set::Set;\nuse crate::value_note::{VALUE_NOTE_LEN, ValueNote};\n\nunconstrained fn get_balance(set: Set<ValueNote, VALUE_NOTE_LEN>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained fn get_balance_with_offset(set: Set<ValueNote, VALUE_NOTE_LEN>, offset: u32) -> Field {\n    let mut balance = 0;\n\n    let options = NoteViewerOptions::new().set_offset(offset);\n    let opt_notes = set.view_notes(options);\n    let len = opt_notes.len();\n    for i in 0..len {\n        if opt_notes[i].is_some() {\n            balance += opt_notes[i].unwrap_unchecked().value;\n        }\n    }\n    if (opt_notes[len - 1].is_some()) {\n        balance += get_balance_with_offset(set, offset + opt_notes.len() as u32);\n    }\n\n    balance\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/balance_utils"
            },
            "82": {
                "source": "use dep::std::option::Option;\nuse dep::aztec::constants_gen::MAX_READ_REQUESTS_PER_CALL;\nuse crate::value_note::ValueNote;\n\nfn filter_notes_min_sum(notes: [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL], min_sum: Field) -> [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & (sum < min_sum as u120) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum += note.value as u120;\n        }\n    }\n    selected\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/filter"
            },
            "83": {
                "source": "use dep::std::option::Option;\nuse dep::aztec::context::PrivateContext;\n// docs:start:encrypted_import\n\nuse dep::aztec::log::emit_encrypted_log;\n\n// docs:end:encrypted_import\nuse dep::aztec::note::note_getter_options::{NoteGetterOptions, SortOrder};\nuse dep::aztec::oracle::get_public_key::get_public_key;\nuse dep::aztec::state_vars::set::Set;\nuse crate::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, VALUE_NOTE_LEN},\n};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\nfn create_note_getter_options_for_decreasing_balance(amount: Field) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(0, SortOrder.DESC)\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\nfn increment(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    recipient: Field,\n) {\n    let mut note = ValueNote::new(amount, recipient);\n    create_note(balance, recipient, &mut note);\n\n    // It won't compile if Set.insert() is in an if statement :(\n    // if amount as u120 > 0 {\n    //     create_note(balance, recipient, &mut note);\n    // }\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\nfn decrement(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    owner: Field,\n) {\n    let sum = decrement_by_at_most(balance, amount, owner);\n    assert(sum == amount);\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\nfn decrement_by_at_most(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    max_amount: Field,\n    owner: Field,\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let opt_notes = balance.get_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..opt_notes.len() {\n        if opt_notes[i].is_some() {\n            decremented += destroy_note(balance, owner, opt_notes[i].unwrap_unchecked());\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if decremented as u120 > max_amount as u120 {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner);\n\n    decremented\n}\n\nfn create_note(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    owner: Field,\n    note: &mut ValueNote,\n) {\n    // Insert the new note to the owner's set of notes.\n    balance.insert(note);\n\n    // Remove this if statement if we can wrap this create_note function in an if statement.\n    if note.value != 0 {\n        // Emit the newly created encrypted note preimages via oracle calls.\n        // docs:start:encrypted\n        let context = balance.private_context.unwrap();\n        let application_contract_address = (*context).this_address();\n        let note_storage_slot = balance.storage_slot;\n        let encryption_pub_key = get_public_key(owner);\n        let encrypted_data = (*note).serialise();\n\n        emit_encrypted_log(\n            context,\n            application_contract_address,\n            note_storage_slot,\n            encryption_pub_key,\n            encrypted_data,\n        );\n        // docs:end:encrypted\n    }\n}\n\n// Removes the note from the owner's set of notes.\n// Returns the value of the destroyed note.\nfn destroy_note(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    owner: Field,\n    note: ValueNote,\n) -> Field {\n    // Ensure the note is actually owned by the owner (to prevent user from generating a valid proof while\n    // spending someone else's notes).\n    assert(note.owner == owner);\n\n    balance.remove(note);\n    \n    note.value\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/utils"
            },
            "84": {
                "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    get_secret_key::get_secret_key,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl ValueNote {\n    fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    fn serialise(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    fn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            self.value, \n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret,\n        ])[0]\n    }\n\n    // docs:end:nullifier\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialise(preimage)\n}\n\nfn serialise(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialise()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialise,\n    serialise,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/value_note"
            }
        }
    }
}
