{
    "name": "PrivateToken",
    "functions": [
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "preimage",
                    "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "initial_supply",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "owner",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "getBalance",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "owner",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "field"
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "mint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "owner",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "transfer",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "recipient",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "debug": {
        "debugSymbols": [
            "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OimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6aRkppOSmU5KZjopmemkZKaTkplOSmY6KZnppGSmk5KZTkpmOimZ6WRkppORmU5GZjoZmelkA7jCGpnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlORmY6GZnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlORmY6GZnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlORmY6GZnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlORmY6GZnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlORmY6GZnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlORmY6GZnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlORmY6GZnpZGSmk5GZTkZmOhmZ6WRkppORmU5GZjoZmelkZKaTkZlOTmY6OZnp5GSmk5OZTj6AK6yTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6eRkppOTmU5OZjo5menkZKaTk5lOTmY6OZnp5GSmk5OZTk5mOjmZ6RRkplOQmU5BZjoFmekUA7jCBpnpFGSmU5CZTkFmOgWZ6RRkplOQmU5BZjoFmekUZKZTkJlOQWY6BZnpFGSmU5CZTkFmOgWZ6RRkplOQmU5BZjoFmekUZKZTkJlOQWY6BZnpFGSmU5CZTkFmOgWZ6RRkplOQmU5BZjoFmekUZKZTkJlOQWY6BZnpFGSmU5CZTkFmOgWZ6RRkplOQmU5BZjoFmekUZKZTkJlOQWY6BZnpFGSmU5CZTkFmOgWZ6RRkplOQmU5BZjoFmekUZKZTkJlOQWY6BZnpFGSmU5CZTkFmOgWZ6RRkplOQmU5BZjoFmekUZKZTkJlOQWY6BZnpFGSmU5CZTkFmOgWZ6RRkplOQmU5BZjoFmekUZKZTkJlOkZrppB5n8bYs9x+ehrOKab4ScV5m5lrcbpmpOVENl5m5vjdcZuZOoOEyM/cMDZeZubtouMzMfUjDZWbuWBouM3Nv03CZx+iCUhO6mi1zSc3yarjMQ3RBS2o+WMNlHqILWoZDdEFLajpZw2UeogtaUhPPGi7zEF3Qkpqi1m6ZqXlrV8v0Ybp++CQe0tusi4d0LKvib7x0/KbdhsuHXNa0m5+lX/0DftV1sr+eS9vZX09i7eyvZ49m9m+8ANvO/vrOamd//R9/O/vrfXI7++sNajv7651hO/sP3r833jpsZ//B+/fGu3vN7N94va6d/Qfv3xsvqbWz/+D9e+NVr3b2a/evjJdHp1ixX7t/S/Zr92/Jfu3+FTk3KKK+Yr92/xbs33h5p5392v0rMZ8fXaYV+7X7t2S/dv+W7NfuX53OrbNNK/v3xrse7ezX7t+S/dr9W7Jfu39L9mv3b8H+jVcD2tmv3b8l+7X7t2S/dv+W7D94/974JXk7+w/evzd+j93O/oP3741fNTezf+OHx+3sP3j/3vj5bjv7D96/N34E287+g/fvjZ+S/pL9eaU/ufFrz3b2G+7fVfu1+9fk3L+Zr9i/8RPEdvZr92/J/vr+Xc5OVZFr+6cPrW/KwofWd1rhQ+vbp/Ch9T1hdvmQFnp2Gy7ufdtzamf763uinf31PdHO/vqe+An7cfa/LPN39sfhxi9SGn7B+q5o+AWrIZ78vJfmYf5uL71+ajVwxU+thqP0qfW/d93+1Nev/wOr2rwZ",
            "eJzdmttuGjEQht9lrxHynHzgVapcoDaVIkWkKtwh3j3LprZXMKyF2jpDrgDpt/lss9/MAsfh9e379vDyttsPm+NAw+bbcdj/2u7Or/aH7e/DsHGr4Xn3Y3w8rYafL6/PwwZOq6sUYPLxT3J8nmqaUItTdCnHKSacx59WA5shETMk3gxJMEMSzZAkMyTg7KCAHRS0g2LHs2BHtGDHtGBHtWDHtWBHtmDHtmjHtmjHtmjHtmjHtmjHtmjHtmjHtmjHtmjHtmjHtmTHtmTHtmTHtmTHttTTtilgjrOTeInS07YNlJ62baD0tG0DpadtGyg9bbuMwj1t20DpadsGSk/bNlB62raBYse2bMe2bMe2bMe2bMe2bMe2otoWJEEe5CEsAznmnHWJS1a0MLqcRarT8kSiyvZTSFTX3kUCddPJyTIJOFcmdt4vTpxSaT4d1KjQxK2K+QG4VYs/ALeq/AfgVusDeKrcMpfQeYjq8eUhqm+Xh6heBO99HhKAGusOZd1UZ49eyQpl4wrVLYph+tlT1+IdJOP7l6wLcRmFSDILUWhwA86MDml+uNfhUIgj1HtV1og55CinOitHVZ6lBqGb3QOPm6d9yD2VgjXfCS28oGWvF4gvfSbiclTEN84k5iMhrNvAfOcm67Xv8TY5la9pkk/zTT4vUi+UD73IwJeL1KvqF1ukXoL/2yIjZJVRJG6Efa5FNPNpmEqwv1GCLXALZjt4vOK+0QdY4Pacsz7gJfeNZsQ89193RJ/DHTr3T/+Mu3OPEZPknqsZxlAEK/W6JPnonNeqCWs7DFXJQT4q/Vq9KJhzHyFQ70hGuEm3a1VcGMr2O7r8CMtalUZjjMrWGKNeLEtjAqz1P66Jy+cy3q/UY3Gnp9PpHVUCdjs=",
            "",
            "eJzdmttuGjEQht9lr9HKc/CJV6lygdpEihSRqnCH9t27IbG9hdm1UMAMvQKk3+bzgW9moxy6t/efm/3r+3bXrQ8ddesfh273e7P9+LTbb/7su7VZdc/bX+PrsOpeXt+euzUMq7MUYHThKzm+jyVNKMUpmJjiFCJO40+rjtWQWDUkTg2JV0MS1JBENSRg9KCAHhTUg6LHs6BHtKDHtKBHtaDHtaBHtqDHtqjHtqjHtqjHtqjHtqjHtqjHtqjHtqjHtqjHtqjHtqTHtqTHtqTHtqTHttTSttFjirOx4RSlpW0rKC1tW0FpadsKSkvbVlBa2nYZhVvatoLS0rYVlJa2raC0tG0FRY9tWY9tWY9tWY9tWY9tWY9trWhbBOavQQi+AmRyFkzknLVSGE2el3yO8pFElO1dSETXXkQCZdPJ2GUSMAYytnOLE8eYm08DJWrpyC2K+QG4RYs/ALeo/AfgFusDQkgGQoRYmd7n6aksMTghaylNa6mQBH8kEcvDJSTj97uM4sMyCpFNExP5CjfgRJwTinEPz8PeJYoA5ZGQJWL2KcqxzMpBdFRWPZrJo+a4edJdcpTrwnQnpPCS/cQ6+X+fiTUpaq2rnElIR0JIJcoXbrLYATzgJsf815Do4nSTx0W6md7ikRfp+XSRM23LrRbJPv3KicM/4Q+Ymc7lPjAz7ch9YGZ6jFvBBMgwgbgSdqma0qQi+GOtdjM9hgZui8lvDs+4v91j3I7bcco6j6fcjTuSq3E3rtpX425cCK/F7RvXthBt6hqrYfS5DtrCQPaz9+9Fo5SGHkrl9J9DYi9eLubUCVkojy4j3FG3vSyA4mhDp1eBe/nHtzxGvvjLY+RLtzDGm17+Dzdr0rk4gnIsZngahr+QnYIO",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "contract PrivateToken {\n    use dep::std::option::Option;\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote, ValueNoteMethods},\n    };\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext},\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        state_vars::{map::Map, set::Set},\n    };\n\n    struct Storage {\n        // maps an aztec address to its balance\n        balances: Map<Set<ValueNote, VALUE_NOTE_LEN>>,\n    }\n\n    impl Storage {\n        fn init(\n            private_context: Option<&mut PrivateContext>,\n            public_context: Option<&mut PublicContext>,\n        ) -> pub Self {\n            Storage {\n                balances: Map::new(\n                    private_context,\n                    public_context,\n                    1, // Storage slot\n                    |private_context, public_context, slot| {\n                        Set::new(private_context, public_context, slot, ValueNoteMethods)\n                    },\n                ),\n            }\n        }\n    }\n\n    // docs:start:constructor\n    // Constructs the contract and sets `initial_supply` which is fully owned by `owner`.\n    #[aztec(private)]\n    fn constructor(\n        initial_supply: Field, \n        owner: Field\n    )  {\n        let storage = Storage::init(Option::some(&mut context), Option::none());\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        if (initial_supply != 0) {\n            increment(owner_balance, initial_supply, owner);\n        }\n    }\n    // docs:end:constructor\n\n    // docs:start:mint\n    // Mints `amount` of tokens to `owner`.\n    #[aztec(private)]\n    fn mint(\n        amount: Field, \n        owner: Field\n    )  {\n        let storage = Storage::init(Option::some(&mut context), Option::none());\n\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        increment(owner_balance, amount, owner);\n    }\n    // docs:end:mint\n\n    // docs:start:transfer\n    // Transfers `amount` of tokens from msg_sender to a `recipient`.\n    #[aztec(private)]\n    fn transfer(\n        amount: Field, \n        recipient: Field,\n    )  {\n        let storage = Storage::init(Option::some(&mut context), Option::none());\n        let sender = context.msg_sender();\n\n        // Pick from the set of sender's notes to spend amount.\n        let sender_balance = storage.balances.at(sender);\n        decrement(sender_balance, amount, sender);\n\n        // Creates new note for the recipient.\n        let recipient_balance = storage.balances.at(recipient);\n        increment(recipient_balance, amount, recipient);\n    }\n    // docs:end:transfer\n\n    // docs:start:getBalance\n    // Helper function to get the balance of a user (\"unconstrained\" is a Noir alternative of Solidity's \"view\" function).\n    unconstrained fn getBalance(\n        owner: Field,\n    ) -> Field {\n        let storage = Storage::init(Option::none(), Option::none());\n\n        // Get the set of notes owned by the user.\n        let owner_balance = storage.balances.at(owner);\n\n        // Return the sum of all notes in the set.\n        balance_utils::get_balance(owner_balance)\n    }\n    // docs:end:getBalance\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    // docs:start:compute_note_hash_and_nullifier\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; VALUE_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n    }\n    // docs:end:compute_note_hash_and_nullifier\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-contracts/src/contracts/private_token_contract/src/main"
            },
            "4": {
                "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
                "path": "std/hash"
            },
            "32": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    private_global_variables: PrivateGlobalVariables,\n}\n\n// PublicContextInputs are expected to be provided to each public function\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/abi"
            },
            "35": {
                "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/log"
            },
            "41": {
                "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(storage_slot, nullifier, preimage, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/lifecycle"
            },
            "42": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_unique_siloed_note_hash,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::messaging::get_commitment_getter_data::make_commitment_getter_data;\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn ensure_note_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    let saved_note = get_note_internal(storage_slot, note_interface);\n\n    // Only copy over the header to the original note to make sure the preimage is the same.\n    let get_header = note_interface.get_header;\n    let set_header = note_interface.set_header;\n    let note_header = get_header(saved_note);\n    set_header(note, note_header);\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, *note);\n    context.push_read_request(note_hash_for_read_request);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\n// Modifies the note by populating it with header info.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    // Initialize header of note. Must be done before computing note hashes as it initializes the:\n    // - storage slot (used in inner note hash)\n    // - the contract address (used in siloed note hash)\n    // - and the nonce (used in the unique siloed note hash)\n    let set_header = note_interface.set_header;\n    let note_header = NoteHeader {\n        contract_address: (*context).this_address(),\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n        // real nonce (once public kernel applies nonces).\n        nonce: 0,\n        storage_slot\n    };\n    set_header(note, note_header);\n\n    // Get a note from oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let raw_oracle_ret = oracle::get_commitment::get_commitment(inner_note_hash);\n    let deserialized_oracle_ret = make_commitment_getter_data(raw_oracle_ret, 0);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // unique_siloed_note_hash once public kernel applies nonces\n    let saved_siloed_note_hash = deserialized_oracle_ret.message;\n\n    assert(saved_siloed_note_hash != 0); // TODO(dbanks12): necessary?\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    // Ensure that the note hash retrieved from oracle matches the one computed from note.\n    let computed_siloed_note_hash = compute_siloed_note_hash(note_interface, *note);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // compute_note_hash_for_read_or_nullify once public kernel applies nonces\n    assert(computed_siloed_note_hash == saved_siloed_note_hash);\n\n    context.push_read_request(computed_siloed_note_hash);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        let mut note_hash_for_read_request = 0;\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n            note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n        };\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n        // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n        context.push_read_request(note_hash_for_read_request);\n    };\n\n    // TODO(#1660)\n    // Move it back to get_notes_internal and only make read request for selected notes.\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/note_getter"
            },
            "44": {
                "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/note_hash"
            },
            "47": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n   fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/note_viewer_options"
            },
            "48": {
                "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    let mut note = deserialise(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/note/utils"
            },
            "51": {
                "source": "use crate::context::{PrivateContext, PublicContext};\nuse dep::std::option::Option;\n\nstruct Map<V> {\n    private_context: Option<&mut PrivateContext>,\n    public_context: Option<&mut PublicContext>,\n    storage_slot: Field,\n    state_var_constructor: fn(Option<&mut PrivateContext>, Option<&mut PublicContext>, Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(\n        private_context: Option<&mut PrivateContext>,\n        public_context: Option<&mut PublicContext>,\n        storage_slot: Field,\n        state_var_constructor: fn(\n            Option<&mut PrivateContext>,\n            Option<&mut PublicContext>,\n            Field,\n        ) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            private_context,\n            public_context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(\n            self.private_context,\n            self.public_context,\n            derived_storage_slot,\n        )\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/state_vars/map"
            },
            "53": {
                "source": "use crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::note::lifecycle::{create_note, create_note_hash_from_public, destroy_note};\nuse crate::note::{\n    note_getter::{ensure_note_exists, ensure_note_hash_exists, get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_inner_note_hash,\n};\nuse dep::std::option::Option;\n\nstruct Set<Note, N> {\n    private_context: Option<&mut PrivateContext>,\n    public_context: Option<&mut PublicContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n\nimpl<Note, N> Set<Note, N> {\n    fn new(\n        private_context: Option<&mut PrivateContext>,\n        public_context: Option<&mut PublicContext>,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            private_context,\n            public_context,\n            storage_slot,\n            note_interface,\n        }\n    }\n\n    fn insert(self, note: &mut Note) {\n        create_note(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.public_context.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    // TODO(#1386)\n    // Should be replaced by `assert_contains_and_remove`.\n    fn assert_contains_note_and_remove(self, note: Note) {\n        let mut note_with_header = note;\n        ensure_note_exists(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            self.note_interface,\n            &mut note_with_header,\n        );\n        self.remove(note_with_header);\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386):\n    // replace function above ^ once public kernel injects\n    // nonces to note hashes.\n    fn assert_contains_and_remove(self, note: Note) {\n        let mut note_with_header = note;\n        // Modifies note with the header which is necessary for the next step (remove).\n        ensure_note_hash_exists(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            self.note_interface,\n            &mut note_with_header,\n        );\n\n        let get_header = self.note_interface.get_header;\n        let set_header = self.note_interface.set_header;\n        let mut header = get_header(note);\n        // Set the nonce to nonzero so that the nullifier is treated as persistable\n        // (non-transient) and so the private kernel does not attempt to match it to\n        // a pending noteHash/commitment and squash them.\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): remove\n        // this hack once public kernel injects nonces.\n        header.nonce = 1;\n        set_header(&mut note_with_header, header);\n\n        self.remove(note_with_header);\n    }\n\n    fn remove(self, note: Note) {\n        destroy_note(\n            self.private_context.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.private_context.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n\n    unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/state_vars/set"
            },
            "56": {
                "source": "use crate::types::type_serialisation::TypeSerialisationInterface;\n\nstruct GrumpkinScalar {\n    high: Field,\n    low: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(high: Field, low: Field) -> Self {\n        // TODO: max value check\n        GrumpkinScalar { high, low }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALISED_LEN: Field = 2;\n\nfn deserialise_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALISED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar {\n        high: fields[0],\n        low: fields[1],\n    }\n}\n\nfn serialise_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALISED_LEN] {\n    [scalar.high, scalar.low]\n}\n\nglobal GrumpkinScalarSerialisationMethods = TypeSerialisationInterface {\n    deserialise: deserialise_grumpkin_scalar,\n    serialise: serialise_grumpkin_scalar,\n};",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/types/grumpkin_scalar"
            },
            "58": {
                "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n}\n\n// #[test]\n// fn test_vec() {\n//     let vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n//     assert(vec.len == 0);\n//     let vec1 = vec.push(1);\n//     assert(vec1.len == 1);\n//     let vec2 = vec1.push(1);\n//     assert(vec2.len == 2);\n//     let vec3 = vec2.push(1);\n//     assert(vec3.len == 3);\n//     let x = vec3.pop();\n//     assert(x == 1);\n// }",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/types/vec"
            },
            "63": {
                "source": "fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/utils"
            },
            "73": {
                "source": "use crate::types::point::Point;\nuse dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0];\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/get_public_key"
            },
            "74": {
                "source": "use crate::types::{\n    point::Point,\n    grumpkin_scalar::{\n        GRUMPKIN_SCALAR_SERIALISED_LEN,\n        GrumpkinScalar,\n        deserialise_grumpkin_scalar,\n    },\n};\nuse crate::oracle::get_public_key::get_public_key;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; GRUMPKIN_SCALAR_SERIALISED_LEN] {}\n\nunconstrained fn get_secret_key(owner: Field) -> GrumpkinScalar {\n    let owner_nullifying_public_key = get_public_key(owner);\n    deserialise_grumpkin_scalar(get_secret_key_oracle(owner_nullifying_public_key))\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/get_secret_key"
            },
            "75": {
                "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained fn rand() -> Field {\n    rand_oracle()\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/rand"
            },
            "78": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _storage_slot: Field,\n    _nullifier: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_nullified_note<N>(\n    storage_slot: Field,\n    nullifier: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(storage_slot, nullifier, preimage, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialise the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialise the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_some.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let header = NoteHeader { contract_address, nonce, storage_slot };\n            let is_some = fields[read_offset + 1] as bool;\n            if is_some {\n                let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n                let mut note = deserialise(preimage);\n                set_header(&mut note, header);\n                placeholder_opt_notes[i] = Option::some(note);\n            }\n        };\n    };\n    placeholder_opt_notes\n}\n\nunconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {\n    // TODO\n    nullifier == 0\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/notes"
            },
            "80": {
                "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/noir-aztec/src/oracle/logs"
            },
            "84": {
                "source": "use dep::aztec::note::{\n    note_getter::view_notes,\n    note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::set::Set;\nuse crate::value_note::{VALUE_NOTE_LEN, ValueNote};\n\nunconstrained fn get_balance(set: Set<ValueNote, VALUE_NOTE_LEN>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained fn get_balance_with_offset(set: Set<ValueNote, VALUE_NOTE_LEN>, offset: u32) -> Field {\n    let mut balance = 0;\n\n    let options = NoteViewerOptions::new().set_offset(offset);\n    let opt_notes = set.view_notes(options);\n    let len = opt_notes.len();\n    for i in 0..len {\n        if opt_notes[i].is_some() {\n            balance += opt_notes[i].unwrap_unchecked().value;\n        }\n    }\n    if (opt_notes[len - 1].is_some()) {\n        balance += get_balance_with_offset(set, offset + opt_notes.len() as u32);\n    }\n\n    balance\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/balance_utils"
            },
            "85": {
                "source": "use dep::std::option::Option;\nuse dep::aztec::constants_gen::MAX_READ_REQUESTS_PER_CALL;\nuse crate::value_note::ValueNote;\n\nfn filter_notes_min_sum(notes: [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL], min_sum: Field) -> [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & (sum < min_sum as u120) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum += note.value as u120;\n        }\n    }\n    selected\n}",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/filter"
            },
            "86": {
                "source": "use dep::std::option::Option;\nuse dep::aztec::context::PrivateContext;\n// docs:start:encrypted_import\n\nuse dep::aztec::log::emit_encrypted_log;\n\n// docs:end:encrypted_import\nuse dep::aztec::note::note_getter_options::{NoteGetterOptions, SortOrder};\nuse dep::aztec::oracle::get_public_key::get_public_key;\nuse dep::aztec::state_vars::set::Set;\nuse crate::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, VALUE_NOTE_LEN},\n};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\nfn create_note_getter_options_for_decreasing_balance(amount: Field) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(0, SortOrder.DESC)\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\nfn increment(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    recipient: Field,\n) {\n    let mut note = ValueNote::new(amount, recipient);\n    create_note(balance, recipient, &mut note);\n\n    // It won't compile if Set.insert() is in an if statement :(\n    // if amount as u120 > 0 {\n    //     create_note(balance, recipient, &mut note);\n    // }\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\nfn decrement(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    owner: Field,\n) {\n    let sum = decrement_by_at_most(balance, amount, owner);\n    assert(sum == amount, \"Balance too low\");\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\nfn decrement_by_at_most(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    max_amount: Field,\n    owner: Field,\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let opt_notes = balance.get_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..opt_notes.len() {\n        if opt_notes[i].is_some() {\n            decremented += destroy_note(balance, owner, opt_notes[i].unwrap_unchecked());\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if decremented as u120 > max_amount as u120 {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner);\n\n    decremented\n}\n\nfn create_note(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    owner: Field,\n    note: &mut ValueNote,\n) {\n    // Insert the new note to the owner's set of notes.\n    balance.insert(note);\n\n    // Remove this if statement if we can wrap this create_note function in an if statement.\n    if note.value != 0 {\n        // Emit the newly created encrypted note preimages via oracle calls.\n        // docs:start:encrypted\n        let context = balance.private_context.unwrap();\n        let application_contract_address = (*context).this_address();\n        let note_storage_slot = balance.storage_slot;\n        let encryption_pub_key = get_public_key(owner);\n        let encrypted_data = (*note).serialise();\n\n        emit_encrypted_log(\n            context,\n            application_contract_address,\n            note_storage_slot,\n            encryption_pub_key,\n            encrypted_data,\n        );\n        // docs:end:encrypted\n    }\n}\n\n// Removes the note from the owner's set of notes.\n// Returns the value of the destroyed note.\nfn destroy_note(\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    owner: Field,\n    note: ValueNote,\n) -> Field {\n    // Ensure the note is actually owned by the owner (to prevent user from generating a valid proof while\n    // spending someone else's notes).\n    assert(note.owner == owner);\n\n    balance.remove(note);\n    \n    note.value\n}\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/utils"
            },
            "87": {
                "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    get_secret_key::get_secret_key,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    fn serialise(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    fn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            self.value, \n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ])[0]\n    }\n\n    // docs:end:nullifier\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialise(preimage)\n}\n\nfn serialise(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialise()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialise,\n    serialise,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
                "path": "/Users/danlee/code/aztec-packages-2/yarn-project/noir-libs/value-note/src/value_note"
            }
        }
    }
}
