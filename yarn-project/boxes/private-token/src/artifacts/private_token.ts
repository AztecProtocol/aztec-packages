/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  CompleteAddress,
  Contract,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  FieldLike,
  AztecAddressLike,
  EthAddressLike,
  Wallet,
} from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { PXE, PublicKey } from '@aztec/types';
import { ContractAbi } from '@aztec/foundation/abi';
import PrivateTokenContractAbiJson from './private_token_contract.json' assert { type: 'json' };
export const PrivateTokenContractAbi = PrivateTokenContractAbiJson as ContractAbi;

/**
 * Type-safe interface for contract PrivateToken;
 */
export class PrivateTokenContract extends ContractBase {
  private constructor(completeAddress: CompleteAddress, wallet: Wallet, portalContract = EthAddress.ZERO) {
    super(completeAddress, PrivateTokenContractAbi, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, PrivateTokenContract.abi, wallet) as Promise<PrivateTokenContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(pxe: PXE, initial_supply: FieldLike, owner: FieldLike) {
    return new DeployMethod<PrivateTokenContract>(
      Point.ZERO,
      pxe,
      PrivateTokenContractAbi,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(pxe: PXE, publicKey: PublicKey, initial_supply: FieldLike, owner: FieldLike) {
    return new DeployMethod<PrivateTokenContract>(
      publicKey,
      pxe,
      PrivateTokenContractAbi,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return PrivateTokenContractAbi;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: FieldLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      preimage: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** getBalance(owner: field) */
    getBalance: ((owner: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** mint(amount: field, owner: field) */
    mint: ((amount: FieldLike, owner: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** transfer(amount: field, recipient: field) */
    transfer: ((amount: FieldLike, recipient: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
