{
  "name": "Blank",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getPublicKey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJzN1MtqwzAQheF30dqEzM2W/SqlC9OmEAhOqb0zfvdcqNy0UaOshrOKAyP5V4i+ORyOb/20Pw5j6OYgoXuZw/jZD5dv49R/TaHbVmE3vJ8/lyp87A+70NFS3U2RmKbJ83PN67RoblwlWhpXrePt+GsVFKbEYEpqmJIGpiTClLQwJbTFSSGcFMZJwXGWcKAlHGkJh1rCsZZwsCUcbRlHW8bRlnG0ZRxtGUdbxtGWcbRlHG0ZR1vG0VZwtBUcbQVHW8HRVnC0FU9tTeOaUl9mfqd4altI8dS2kOKpbSHFU9vHKeqpbSHFU9tCiqe2hRRPbQspntoWUnC0VRxtFUdbxdFWcbQ1HG0tqy236RVC8jBHuEmT1q6TFq97Z/l8fm+N+j1pEm/3zhyzSYfk+LOp2DUjS+fzGaZtymji3yPSJnvvmdMavv9ZaJO9oIU12ZtUWJP9y/+/ZllOr84ynA=="
    ],
    "fileMap": {
      "34": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/mnt/user-data/dan/aztec-packages/yarn-project/aztec-nr/aztec/src/abi"
      },
      "35": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/mnt/user-data/dan/aztec-packages/yarn-project/aztec-nr/aztec/src/address"
      },
      "58": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/mnt/user-data/dan/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      }
    }
  }
}