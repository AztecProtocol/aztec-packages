{
  "name": "Blank",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getPublicKey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJzN1s2KwjAUhuF7ybpIz09M0lsZZlFGBwSpw7S70nsfR0wpGjmuwrdS4SS8Dc2DsztfvvrpdBlG181OXPcxu/GnH/5/jVP/O7mubdxxOFw/l8Z9n85H19HSPE1RIEr3yet3pXVatDie9prHY6thO/7ZOIUp8TAle5iSAFMSYUoSTAm1OCmEk8I4KTjOEg60hCMt4VBLONYSDraEoy3jaMs42jKOtoyjLeNoyzjaMo62jKMt42jLONoKjraCo63gaCs42gqOtlJR20gc1hQmeUypqK2VUlFbK6WitlZKRW2NFK2orZVSUVsrpaK2VkpFba2UitpaKTjaKo62iqOt4mirONp6HG19UVtOOUY2K0o5su4uPq2TPt72LvL5/t4a8z8tL3G7d+lU4n2U4+YR/S2jSOf7GV7zefsQHx+RdsV7z5zX8POx0K54QY01xZtkrCm+8q/XLMsfJBozLA=="
    ],
    "fileMap": {
      "34": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n    GENERATOR_INDEX__SIDE_EFFECT,\n    GENERATOR_INDEX__SIDE_EFFECT_LINKED_TO_NOTE_HASH,\n    GENERATOR_INDEX__SIDE_EFFECT_WITH_RANGE,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\nstruct SideEffect {\n    value: Field,\n    side_effect_counter: Field,\n}\nimpl SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.side_effect_counter]\n    }\n\n    fn deserialise(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            side_effect_counter: values[1],\n        }\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__SIDE_EFFECT)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self {\n            value: 0,\n            side_effect_counter: 0,\n        }\n    }\n}\n\n// like read, nullifier, and possibly encrypted logs\n// (they may be linked to a note / note-hash)\nstruct SideEffectLinkedToNoteHash {\n    value: Field,\n    note_hash: Field, // e.g. noteHash\n    side_effect_counter: Field,\n}\n\nimpl SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.side_effect_counter]\n    }\n\n    fn deserialise(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            side_effect_counter: values[2],\n        }\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__SIDE_EFFECT_LINKED_TO_NOTE_HASH)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self {\n            value: 0,\n            note_hash: 0,\n            side_effect_counter: 0,\n        }\n    }\n}\n\nstruct SideEffectWithRange {\n    value: Field,\n    start_side_effect_counter: Field,\n    end_side_effect_counter: Field,\n}\n\nimpl SideEffectWithRange {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.start_side_effect_counter, self.end_side_effect_counter]\n    }\n\n    fn deserialise(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            start_side_effect_counter: values[1],\n            end_side_effect_counter: values[2],\n        }\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__SIDE_EFFECT_WITH_RANGE)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self {\n            value: 0,\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n\n    // TODO(dbanks12): needed?\n    start_side_effect_counter: Field,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n\n    // TODO(dbanks12): needed?\n    start_side_effect_counter: Field,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n\n    start_side_effect_counter: Field,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [SideEffectWithRange; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [SideEffectWithRange; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [SideEffect; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.map_and_push_array(SideEffect::hash, self.read_requests);\n        fields.map_and_push_array(SideEffect::hash, self.new_commitments);\n        fields.map_and_push_array(SideEffectLinkedToNoteHash::hash, self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.map_and_push_array(SideEffectWithRange::hash, self.private_call_stack);\n        fields.map_and_push_array(SideEffectWithRange::hash, self.public_call_stack);\n        fields.map_and_push_array(SideEffect::hash, self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.flatten_and_push_array(SideEffect::serialize, self.read_requests);\n        fields.flatten_and_push_array(SideEffect::serialize, self.new_commitments);\n        fields.flatten_and_push_array(SideEffectLinkedToNoteHash::serialize, self.new_nullifiers);\n        // TODO(dbanks12): should nullified commitments be here!\n        fields.push_array(self.nullified_commitments);\n        fields.flatten_and_push_array(SideEffectWithRange::serialize, self.private_call_stack);\n        fields.flatten_and_push_array(SideEffectWithRange::serialize, self.public_call_stack);\n        fields.flatten_and_push_array(SideEffect::serialize, self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n    side_effect_counter: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value, self.side_effect_counter]\n    }\n\n    pub fn hash(self) -> Field {\n        // TODO(dbanks12): do we include side-effect counter in hash?\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0, side_effect_counter: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n    side_effect_counter: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value, self.side_effect_counter]\n    }\n\n    pub fn hash(self) -> Field {\n        // TODO(dbanks12): do we include side-effect counter in hash?\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0, side_effect_counter: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [SideEffectWithRange; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [SideEffect; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n\n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.map_and_push_array(SideEffectWithRange::hash, self.public_call_stack);\n        inputs.map_and_push_array(SideEffect::hash, self.new_commitments);\n        inputs.map_and_push_array(SideEffectLinkedToNoteHash::hash, self.new_nullifiers);\n        inputs.map_and_push_array(SideEffect::hash, self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.flatten_and_push_array(ContractStorageUpdateRequest::serialize, self.contract_storage_update_requests);\n        fields.flatten_and_push_array(ContractStorageRead::serialize, self.contract_storage_read);\n        fields.flatten_and_push_array(SideEffectWithRange::serialize, self.public_call_stack);\n        fields.flatten_and_push_array(SideEffect::serialize, self.new_commitments);\n        fields.flatten_and_push_array(SideEffectLinkedToNoteHash::serialize, self.new_nullifiers);\n        fields.flatten_and_push_array(SideEffect::serialize, self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/mnt/user-data/david/projects/3-aztec3/aztec-packages-hash/yarn-project/aztec-nr/aztec/src/abi"
      },
      "35": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/mnt/user-data/david/projects/3-aztec3/aztec-packages-hash/yarn-project/aztec-nr/aztec/src/address"
      },
      "58": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/mnt/user-data/david/projects/3-aztec3/aztec-packages-hash/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      }
    }
  }
}