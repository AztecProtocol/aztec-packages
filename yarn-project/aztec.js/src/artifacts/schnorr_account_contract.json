{
  "name": "SchnorrAccount",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signing_pub_key_x",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        {
          "name": "signing_pub_key_y",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzlmduKGkEQht+lr0W6Dn3yVUIuJLsLC4sbonfiu2cm2tPiFtN4kc4PuXKEf4pvqsuvBjy7j88f+9P75+Hodmcnbvft7I4/94f52/G0/3VyO79xr4eX6fOycW/vH69uR5fNlxSJ+HhLTtecl7QEK64UqMaVRe/j3zdOYUgCDEmEIUkwJBmGpMCQkMdBIRwUxkHB8SzhiJZwTEs4qiUc1xKObAnHtoxjW8axLePYlnFsyzi2ZRzbMo5tGce2jGNbxrGt4NhWcGwrOLYVHNvKSNsK6YKi3j+ijLRtB2WkbTsoI23bQRlp2w7KSNuuo+hI23ZQRtq2gzLSth2UkbbtoODYVnFsqzi2VRzbKo5tFce2wbQtJV9pKCVeB8ol1GwJsmSTFc55yXrf6qYri6nbf8Ri+vYZFvZSblmmqOssqdS6WeISVetENddo8O0JA5vtiMu7arkLF2/xUh0r1tIQ/jTDND5CMwItzYh+vRlc+BYVTq1qfrIV5sb5P1thbry/1ooicsuWIvetmFHMjTcEJT+imBtvslH7Jc41V1CmM6mnE1rLp8u5urnEnqmuua6DIPm+uqGPlGtLcuv4NIcziLnCngEJWhseUn54zGhvpcx1btnz+prkUkEkt6T66+BuzTZqqOUDtcbH67CnrTljzMvYfD2stDWHoXOPyda5xzyNtXui39p/2QZfb4rzC0VtwnTol8tvxbHQWQ==",
      "",
      "",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod public_key_note;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract SchnorrAccount {\n    use dep::std;\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        log::emit_encrypted_log,\n        note::{ note_header::NoteHeader, utils as note_utils },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    use crate::public_key_note::{PublicKeyNote, PublicKeyNoteMethods, PUBLIC_KEY_NOTE_LEN};\n\n    struct Storage {\n        // docs:start:storage\n        signing_public_key: ImmutableSingleton<PublicKeyNote, PUBLIC_KEY_NOTE_LEN>,\n        // docs:end:storage\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // docs:start:storage_init\n                signing_public_key: ImmutableSingleton::new(context, 1, PublicKeyNoteMethods),\n                // docs:end:storage_init\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Constructs the contract\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub Field,\n        signing_pub_key_y: pub Field,\n    ) {\n        let this = context.this_address();\n        // docs:start:initialize\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialize(&mut pub_key_note, Option::none());\n        // docs:end:initialize\n        \n        emit_encrypted_log(\n            &mut context,\n            this,\n            storage.signing_public_key.storage_slot,\n            get_public_key(this),\n            pub_key_note.serialize(),\n        );\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // docs:start:entrypoint\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        // docs:start:get_note\n        let public_key = storage.signing_public_key.get_note();\n        // docs:end:get_note\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify signature of the payload bytes\n        let verification = std::schnorr::verify_signature(public_key.x, public_key.y, signature, message_hash.to_be_bytes(32));\n        assert(verification == true);\n        // docs:end:entrypoint\n        true\n    }\n\n    // Computes notes hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(PublicKeyNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/noir-contracts/src/contracts/schnorr_account_contract/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "21": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/context"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/log"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "48": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALISATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse dep::std::hash::pedersen_with_separator;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_with_separator(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    } else {\n        pedersen_with_separator(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface);\n\n        note\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/singleton"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/utils"
      },
      "87": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/authwit/src/auth_witness"
      },
      "89": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/authwit/src/entrypoint"
      },
      "90": {
        "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_unique_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 3;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct PublicKeyNote {\n    x: Field,\n    y: Field,\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: Field, y: Field, owner: Field) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // serialize the note as 3 fields\n    pub fn serialize(self) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n        [self.x, self.y, self.owner]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(PublicKeyNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> PublicKeyNote {\n    PublicKeyNote {\n        x: preimage[0],\n        y: preimage[1],\n        owner: preimage[2],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: PublicKeyNote) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: PublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialize())[0]\n}\n\nfn compute_nullifier(note: PublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: PublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut PublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal PublicKeyNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/noir-contracts/src/contracts/schnorr_account_contract/src/public_key_note"
      }
    }
  }
}
