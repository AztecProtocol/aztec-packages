{
  "name": "EcdsaAccount",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signing_pub_key_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        {
          "name": "signing_pub_key_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJztnM1q4zAUhd/F6xD0a13lVYZZhLYDhZIOk+xC3r1OxrIOkzsxoZCK+qyawrE4+WRffYXiY/f2/rQ9vL7v9t3m2PWp2/w4dvvf29351/1h++fQbcyqe9k9Dz9Pq+7X69tLt7Gn1VXKem/6MTl8djKlfdTiwUZb4sH5gPGfq66XdqrkB1bxNkxVgjH/VEmmnSq2nSqunSq+nSqhnSqxnSp9O1UeOW1nqjxy2s5UaWfaSjvTVtqZttLOtJV2pq2o09YmW9rYlMLtQpJjyebop2zSwiJT1hhXs3+7qOP2i7qo8/aeLs74PGad7cPtLimXdcX3UzRoOxqkRKOp3zA6rYJIKhWyy1M4Gy1sy23lQo2GCwx14i8VhnrmLBWGeuotFEZWz92lwlBP/qXCUN1jqTBU+1kqjE/713eC8WkB/E4waKAAgwYKMGigAIMGWmEMf8iSBtCggyINSijSoIUiDWoo0qCHIg2KKNKgiSINqijSoIsCDUsXRRp0UaRBF0UadFGkQRdFGnRRpEEXRRp0UaRBF0UadFGg4eiiSIMuijTookiDLoo06KJIgy6KNOiiSIMuijTookiDLgo0PF0UadBFkQZdFGnQRZEGXRRp0EWRBl0UadBFkQZdFGnQRYFGoIsiDboo0qCLIg26KNKgiyINuijSoIsijWZdNE4VYm9maGQ3Rr1LdVW5l0WzJvoFLB7rodn7MZuzRxbnLvGxFohd5KqL7mC5vsUk+9tdhm0pGxQr9eHjZXldau5YPkiJRi+4/HXUJilQpEIf7sVLE10o7mgSQ2Eek1x90f+c0NlPy0MndU9zebucl/pMBDPevmv1YQ6xPB3RVvh9GPd2rZ4Nzk03j7Jjdq2O0LmL1HpzF6kP5e2Lwlr/R+doylX9+c08hcSw+afTB135qaE=",
      "",
      "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",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod ecdsa_public_key_note;\n\n// Account contract that uses ECDSA signatures for authentication on the same curve as Ethereum.\n// The signing key is stored in an immutable private note and should be different from the signing key.\ncontract EcdsaAccount {\n    use dep::std;\n    use dep::std::option::Option;\n    use dep::aztec::{\n        abi::CallContext,\n        context::{PrivateContext, PublicContext, Context},\n        log::emit_encrypted_log,\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    use crate::ecdsa_public_key_note::{\n        EcdsaPublicKeyNote, EcdsaPublicKeyNoteInterface, ECDSA_PUBLIC_KEY_NOTE_LEN,\n    };\n\n    struct Storage {\n        public_key: ImmutableSingleton<EcdsaPublicKeyNote, ECDSA_PUBLIC_KEY_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                public_key: ImmutableSingleton::new(context, 1, EcdsaPublicKeyNoteInterface),\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub [u8;32],\n        signing_pub_key_y: pub [u8;32],\n    ) {\n        let this = context.this_address();\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.public_key.initialize(&mut pub_key_note, Option::none());\n        \n        emit_encrypted_log(\n            &mut context,\n            this,\n            storage.public_key.storage_slot,\n            get_public_key(this),\n            pub_key_note.serialize(),\n        );\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_field: Field) -> pub bool {\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        let public_key = storage.public_key.get_note();\n        \n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_field);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify payload signature using Ethereum's signing scheme\n        // Note that noir expects the hash of the message/challenge as input to the ECDSA verification.\n        let hashed_message: [u8; 32] = std::hash::sha256(message_field.to_be_bytes(32));\n        let verification = std::ecdsa_secp256k1::verify_signature(public_key.x, public_key.y, signature, hashed_message);\n        assert(verification == true);\n\n        true\n    }\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(EcdsaPublicKeyNoteInterface, note_header, preimage)\n    }\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/noir-contracts/src/contracts/ecdsa_account_contract/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "21": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/context"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/log"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "48": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALISATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse dep::std::hash::pedersen_with_separator;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_with_separator(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    } else {\n        pedersen_with_separator(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface);\n\n        note\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/singleton"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/aztec/src/utils"
      },
      "87": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/authwit/src/auth_witness"
      },
      "89": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/aztec-nr/authwit/src/entrypoint"
      },
      "90": {
        "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_unique_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], owner: Field) -> Self {\n        EcdsaPublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = owner\n    pub fn serialize(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let bytex: Field = self.x[31 - i] as Field;\n          x = x + (bytex * mul);\n          let bytey: Field = self.y[31 - i] as Field;\n          y = y + (bytey * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n        \n        let res: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] = [x, last_x, y, last_y, self.owner];\n        res\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(EcdsaPublicKeyNoteInterface, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n    let mut x: [u8; 32] = [0;32];\n    let mut y: [u8; 32] = [0;32];\n\n    let part_x = preimage[0].to_be_bytes(32);\n    for i in 0..31 { x[i] = part_x[i + 1]; }\n    x[31] = preimage[1].to_be_bytes(32)[31];\n\n    let part_y = preimage[2].to_be_bytes(32);\n    for i in 0..31 { y[i] = part_y[i + 1]; }\n    y[31] = preimage[3].to_be_bytes(32)[31];\n\n    EcdsaPublicKeyNote {\n        x,\n        y,\n        owner: preimage[4],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: EcdsaPublicKeyNote) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: EcdsaPublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialize())[0]\n}\n\nfn compute_nullifier(note: EcdsaPublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: EcdsaPublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut EcdsaPublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal EcdsaPublicKeyNoteInterface = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/mnt/user-data/kev/aztec-packages/yarn-project/noir-contracts/src/contracts/ecdsa_account_contract/src/ecdsa_public_key_note"
      }
    }
  }
}
