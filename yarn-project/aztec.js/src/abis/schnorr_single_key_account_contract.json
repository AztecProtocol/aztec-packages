{
  "name": "SchnorrSingleKeyAccount",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod util;\nmod auth_oracle;\n\ncontract SchnorrSingleKeyAccount {\n    use dep::std::{\n        hash::pedersen_with_separator,\n        option::Option,\n    };\n    use dep::aztec::context::{ PrivateContext, PublicContext, Context };\n\n    use dep::authwit::{\n        entrypoint::EntrypointPayload,\n        account::AccountActions,\n    };\n\n    use crate::{ util::recover_address, auth_oracle::get_auth_witness };\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        let witness = get_auth_witness(message_hash);\n        assert(recover_address(message_hash, witness) == context.this_address());\n        true\n    }\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "21": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/context"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization"
      },
      "87": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/authwit/src/auth_witness"
      },
      "89": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/aztec-nr/authwit/src/entrypoint"
      },
      "90": {
        "source": "use dep::std::{schnorr::verify_signature};\nuse dep::aztec::address::compute_address;\nuse crate::auth_oracle::{AuthWitness};\n\npub fn recover_address(\n    message_hash: Field,\n    witness: AuthWitness,\n) -> Field {\n    let message_bytes = message_hash.to_be_bytes(32);\n    let verification = verify_signature(witness.owner.x, witness.owner.y, witness.signature, message_bytes);\n    assert(verification == true);\n\n    let reproduced_address = compute_address(witness.owner.x, witness.owner.y, witness.partial_address);\n    reproduced_address\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/util"
      },
      "91": {
        "source": "use dep::aztec::types::point::Point;\nuse dep::authwit::auth_witness;\n\nstruct AuthWitness {\n    owner: Point,\n    signature: [u8; 64],\n    partial_address: Field,\n}\n\nimpl AuthWitness {\n    fn deserialize(values: [Field; 67]) -> Self {\n        let mut signature = [0; 64];\n        for i in 0..64 {\n            signature[i] = values[i + 2] as u8;\n        }\n        Self {\n            owner: Point::new(values[0], values[1]),\n            signature,\n            partial_address: values[66],\n        }\n    }\n}\n\nunconstrained pub fn get_auth_witness(message_hash: Field) -> AuthWitness {\n    let witness: [Field; 67] = auth_witness::get_auth_witness(message_hash);\n    AuthWitness::deserialize(witness)\n}",
        "path": "/mnt/user-data/alvaro/aztec-packages/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/auth_oracle"
      }
    }
  }
}
