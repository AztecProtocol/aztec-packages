{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","name":"Benchmarking","functions":[{"name":"recreate_note","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"param_witnesses":{"index":[{"start":37,"end":38}],"inputs":[{"start":0,"end":36}],"owner":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287]},"bytecode":"","debug_symbols":"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MX8to2+zjO3mt3vRt7o9ufg/WJpYe2lGeyxNzPfd/qw+L139vHL1L39S9nvVV8x79VXzyeek5+NDZa2teyN7+VO7Rdb8q+96L38q+Deuo7X5WMdnG/L40P66Nlr++Sou/bVq/jirHp89e9LtG1Focatdbhfjn3+g199blp6o/sZF/8Yb0dJj4O8teTwubhFPlib9XnJW/fkqLj6OfuMp6eVPe6+zNLn2MeBbl2afd+zC72se8XbpLzy/UebxeZ/7vGN33qdD+tzn8dl5n/u8Y3fe5z7v2J33uc87dud97vOO3WmfG2Uen/cJmYc2yjw+7xMyD22UeXze55bzUMaHPrechz7pc8t56JM+t5yHPulzy3noY58bZR6f98n4G8wByTwekMzjAck8HpDM4wHJPB6QzOMByTwekMzjgGQeByTzOCCZxwHJPI6bQ/pkzEMByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTyOjfzU531C5qGN/NTnfTqkT8g8tJGf+rxPyDy0kZ/6vE/IPLSRn/q8T8g8tJGf+rxPyDy0kZ/6vE/IPLSRn/q8T8g8tJGf+rxPyDy0kZ/6vE/IPATxUwfETx0QP3VA/NQB8VMHxE8dED91QPzUCfFTJ8RPnRA/dUL81HlzSJ+MeSghfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+Kn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zF/LWNssY7v57V70rW5PLn6+NC9/HvmbSzPaY2livu/2Z/X90tXbpasfS1dfMe/VV80nn5Oejw+VtbbujezlT+0WWfMvv+vlPutobT7W8dmGHHFfxmj556u49Neq+eOsenz27Em3b0Shxa02uV28/CHiFf+BvvrekktPVH/jon/fjSiXHgN/b8njcXGLeLI06feSs+rPV3HxcfQbT0kvf9p7oaVZ+xjwrUuzzzt24fc1j3i79Bee3yjz+LzPfd6xO+9zn8dnp31ulHl83uc+79id97nPO3bnfe7zjt15nw7pc5937M77hMxDG2Uen/cJmYc2yjw+7XOjzON3fWZ86HPLeeiTPrechz7pc8t56JM+HdLnlvPQJ30y/gZzQDKPByTzeEAyjwOSeRyQzOOAZB4HJPM4bg7pk/E3mAHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQeByTzOCCZxwHJPA5I5nFAMo8DknkckMzjgGQex0Z+6vM+IfPQRn7q8z4h89BGfurzPiHz0EZ+6vM+IfPQRn7q8z4h89BGfurzPiHz0EZ+6vM+IfPQRn7q8z4h89BGfurzPiHz0EZ+6vM+IfMQxE8dED91QPzUAfFTJ8RPnRA/dUL81AnxU+fNIX0y5qGE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE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dwvexvy1jLXNMrab3+5F3+r25OLnS/Py55G/uTSjPZYm5vtuf1bfL129Xbr6sXT1FfNefdV88jnp+fhQWWvr3she/tRukTX/8rte7rOO1uZjHZ9tyOPE+OvaaPnnq7j016r546x6fPbsSbdvRKHFrTa5Xbz8IeIV/4G++t4yl56o/sZF/74b0Vx6DPy9JY/HxS3iydKk30vOqj9fxcXH0W88Jb38ae+FlmbtY8C3Ls0+79iF39c84u3SX3h+o8zj8z73ecfuvM99Hp+d9rlR5vF5n/u8Y3fe5z7v2J33uc87dud9OqTPfd6xO+8TMg9tlHl83idkHtoo8/isz9go8/hdnxkf+txyHvqkzy3noU/63HIe+qRPh/S55Tz0SZ+Mv8EMSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmccByTwOSOZxQDKPA5J5HJDM44BkHgck8zggmcexkZ/6vE/IPLSRn/q8T8g8tJGf+rxPyDy0kZ/6vE/IPLSRn/q8T8g8tJGf+rxPyDy0kZ/6vE/GPJQb+anP+2TMQ7mRn/q8T8Y8lDeH9MmYhxLip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifOiF+6oT4qRPip06InzohfuqE+KkT4qdOiJ86IX7qhPipE+KnToifekL81BPip54QP/WE+KnnzSF9MuahCfFTT4ifekL81BPip54QP/WE+KknxE89IX7qCfFTT4ifekL81BPip54QP/WE+KknxE89F/dTj8hHnzXe9/mz+rWnnGfVrz27PKveX1799Ef1Nd9X/7OgsVpBsVpBuVpBc7WC1v56e/KR3Okhstf92uh//dLa6SHyaZ+r3UBe/rTXxmz3i6PPJwtf9zKm3z7WPi9ce1229nr5k9bfqn2O+4afsz7W3i5ce79w7a+ejG3muF9czc9r78fTrF8X92lvX8P+WRnl96/syjq/tNntvijN/O33trTPrm4ej8vbeLfgbcxfy+jbLGO7+e1e9K1uTy7+D5Ym1l6a0R5LE/N9tz+rz0tXP69c/cuflP1e9RXzXn3VfPI56fn4UFlr697IXv7UbpE1/+q73sufCv6N62htPtbx2YYccV/GaPnnq7j016r546x6fPbsSbdvRKHFrXa5XYx//oFef29ZeqL6Gxf9G29ES4+Bv7fk8bi4RTxZmvR7yVn156u4+Dj6jaeklz/tvc7S9LWPAd+6NPu8Yxd+X/OIt0vtV5/7vGN33uc+79id9+mQPvd5fHbe5z7v2J33uc87dud97vOO3Xmf+7xjd9rnRpnH531C5qGNMo/P+4TMQxtlHp/3ueU8lPGhzy3noU/63HIe+qTPLeehT/rcch762OdGmcfnfTL+BrMgmccFyTwuSOZxQTKPC5J5XJDM44JkHhck87ggmccFyTwuSOZxQTKPC5J5XJDM44JkHhck87ggmccFyTwuSOZxQTKPC5J5XJDM44JkHhck87ggmccFyTwuSOZxQTKPC5J5XJDM44JkHhck87ggmccFyTwuSOZxQTKPC5J5XJDM44JkHhck87ggmccFyTwuSOZxQTKPC5J5XJDM44JkHhck87ggmccFyTwuSOZxQTKPC5J5XJDM44JkHhck87ggmcfFyDyeN0bm8dEnYh46+kTMQ0efiHno6NMhfSLmoaNPxDx09ImYh44+EfPQ0SdkHmJkHh99QuYhRubx0SdkHmJkHh99QuYhRubx0SdkHmJkHh99QuYhRubx0SdkHtrIT33eJ2Qe2shPfd4nZB7ayE993idkHtrIT33eJ2Qe2shPfd4nZB7a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7b/iT/4VW/c3wDbH+YadD8A23z/O+PS78tgG95r7rS88c/w7wdnma/7l88m/U60tso7trZCjm/5xdvh3srUl68+P9f873doq9R905fGrn+3knI+qs97dKR9fdv/OzrZns33tZvtjjDkeqdmTe9Roj3vUsGe0cvR7iyPftvxxvv+1MEZdmBz3og+y+H5hPl4a/tiLMd59vTZz8U6fjl12u6/NfPfG56fL3urtJHAb+RXLPqjLPtv9pHFA909uA2tPzd+4MGuPtt+4MIvPqt+3MIsPwb+3MP4AFNnjycJY3Fv08Y4D/4tl9PZ/+/yN8wP831dzvju4xv2HpvJDJfzQ52+rPvuhT4fo48vnvp+G2e2TH+vaj5n2Y6792NB+LLQfS+3HpvZjJf3Y5w+Zn/+YtkuGtkuGtkuGtkuGtkuGtkuGtkuGtkuGtktC2yWh7ZLQdklouyS0XRLaLgltl4S2S0LbJaHtktR2SWq7JLVdktouSW2XpLZLUtslqe2S1HZJartkartkartkartkartkartkartkartkartkartkaruktF1S2i4pbZeUtktK2yWl7ZLSdklpu6S0XVLaLmm3m/hzTfy5Lv6ciT/n4s8N8edC/LkUf26KPyfulybulybulybulybulybulybulybulybulybulybuly7uly7uly7uly7uly7uly7uly7uly7uly7uly7uFxP3i4n7xcT9YuJ+MXG/mLhfTNwvJu4XE/eLifvFxf0iUtomYtomctomgtomktomotomstomwtom0tom4tom8tomAtsmEtsmItsmMtsmQtsmUtsmYtsmctsmgtsmktsmotsmstsmwtsm0tsm4tsm8tsmAtwmEtwmItwmMtwmQtwmUtwmYtwmctwmgtwmktwmotwmstwmwtwm0twm4twm8twmAt0mEt0mIt0mMt0mQt0mUt0mYt0mct0mgt0mkt0mot0mst0mwt0m0t0m4t0m8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t0u8t3+b/juaPc/Pz7+3/7Zz5n4cy7+3BB/LsSfS/Hnpvhzpf3cv+G7z3+uiT/3b/aL3d+QHnO2z37OxJ9z8eeG+HMh/lyKPzfFnyvt5/4N333+c038OXG/DHG/DHG/DHG/DHG/DHG/DHG/DHG/hLhfQtwvIe6XEPdLiPslxP0S4n4Jcb+EuF9C3C8p7pcU90uK+yXF/ZLifklxv6S4X1LcLynulxT3yxT3yxT3yxT3yxT3yxT3yxT3yxT3yxT3yxT3yxT3S4n7pcT9UuJ+KXG/lLhfStwvJe6XEvdLifultP1it5v4c038uS7+nIk/5+LPDfHnQvy5FH9uij8n7pcm7pcm7pcm7pcm7pcm7pcm7pcm7pcm7pcm7pcm7pcu7pcu7pcu7pcu7pcu7pcu7pcu7pcu7pcu7pcu7hcT94uJ+8XE/WLifjFxv5i4X0zcLybuFxP3i4n7xcX94uJ+EfmuiXzXRL5rIt81ke+ayHdN5Lsm8l0T+a6JfNdEvmsi3zWR75rId03kuybyXRP5rol810S+ayLfNZHvmsh3TeS7JvJdE/muiXzXRL5rIt81ke+ayHdN5Lsm8l0T+a6JfNdEvmsi3zWR75rId03kuybyXRP5rol810S+ayLfNZHvmsh3TeS7JvJdE/muiXzXRL5rIt81ke+ayHdN5Lsm8l0T+a6JfNdFvusi33WR77rId13kuy7yXRf5rot810W+6yLfdZHvush3XeS7LvJdF/mui3zXRb7rIt91ke+6yHdd5Lsu8l0X+a6LfNdFvusi33WR77rId13kuy7yXRf5rot810W+6yLfdZHvush3XeS7LvJdF/mui3zXRb7rIt91ke+6yHdd5Lsu8l0X+a6LfNdFvusi33WR77rId13kuy7yXRf5rot810W+6yLfdZHvush3XeS7LvJdF/mui3zXRb7rIt91ke+6yHdd5Lsu8l0X+a6LfNdFvusi33WR77rId13kuy7yXRf5rot810W+6yLfdZHvush3XeS7LvJdF/mui3zXRb7rIt91ke+6yHdd5Lsu8l0X+a6LfNdFvusi33WR77rId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fId4fI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"},{"name":"broadcast","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"owner":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237]},"bytecode":"","debug_symbols":""},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243]},"bytecode":"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","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"serialized_note":[{"start":3,"end":6}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[6,7,8,9]},"bytecode":"H4sIAAAAAAAA/+3dCZcU1RUH8KrpgWGKhglxQePWLriBOj0zgSQqbpiIRjFRMRETRUBFEZRFwR0T933HFRMxKkZUjIqJigoKKCio7MvMMLK5nJN8AU+mqvvS/3n9qtOXvKvVeuucOXQtr97v3nq1va5qaj3P873ckGr/q/aKB5p/ZP7f+v9vyDpcV72k068QZ5VDp59vB5LelEBeXRurK8DYyfF2JyMdAzq3/9W0/3Vp/6tt//smyE2v8QpDxpWhqX5oGA9V3tnrOIRVV9FIdWEatVUfppG/qrrg7eTe21gDTmfrbd+u4Tp7egV7tXt7X5GctK+5xiu0D4frjdpnF6/QNjJQTyfIVS21B8/teaALrNeHemh6Cj7v6BWGWvhcBc5w6OoV2k9tTJlqo0wa5ne2xJ1xHLe5r9cYxup8HOFQF5qqC9PJ1lXAFu7ngddx8I3xDHzuavF8485TnwYP1tVNKPa0V37sZEhDOTR2FzJ2Yxi7g7GbxVgnZOzOMNbJeqI21N1SVw+h2H/klR97D4vH5fVxGjxY13ZCsf/YKz92MqShHBq3FzJuxzBuD8btLMYdhIzbM4w7gJHKYTvfUci4A8O4IxipHB6HegoZd2QYe4KRymEed3JvbAig3nKMO4HnJ0KenRien4BnZ/eerFCc0b3jLl5xXqmuNMzHdrqLQIw+1EvrpnE0VpI39PQ0rAEs1zMhRpq2s7AnMDzhUGq/shlxu+4qZNyFYdwVjFQOj5e7CRl3ZRh3AyOVwzzuLmTcjWHcHYxUDvO4h5Bxd4ZxDzBSOcxjRsi4B8OYASOVwzzuKWTMMIx7gpGmYx73EjLuyTDuBUYqh3ncW8i4F8O4NxipHOZxHyHj3gzjPmCkcpjHXkLGfRjGXmCkcpjHfYWMvRjGfcHYy2LcT8i4L8O4Hxj3tRj3FzLuxzDuD8b9LMYDhIz7M4wHgHF/i/FAIeMBDOOBYDzAYuwtZDyQYewNxgMtxj5Cxt4MYx8w9rYYDxIy9mEYDwJjH4vxYCHjQQzjwWA8yGI8RMh4MMN4CBgPthjrhYyHMIz1YDzEYswKGeu98o1ZMFI5vKZoEDJmGcYGMFI5zGOje2PUb9XAMDaC56fuPU0B1FGO56fgaXLvyQrFGTXBvl5xXqmuNMzHNtBXIEYf6qV10zga1avevuBpMKwBLNeQECNNaxL2BIYnHEodt2xG3K79hIx9GcZ+YLS1vZ+5N0bno34M48/A8wvnnsb6AOoox/ML8PzcuSd3PnIfZ+58dKhXnFeqKw3zsQ0cKhCjD/XSumkcjepVr3rVq171qle96lWvetWrXvWqV73qVa961ate9apXvepVr3rVq171qle9aAw9/QxrAMv1S4iRpv1c2BMYnnDwjfEMfLYZcbseJmQ8lGE8DIy2tne4kPEwhvFwMB5mMfYXMh7OMPYH4+EW4xHujdFzYf0ZxiPAc5RzT0P0XNgRDM9R4DnSuSf3XJj7OHPPhR3tFeeV6krDfGwDRwvE6EO9tG4aR6N61ate9apXvepVr3rVq171qle96lWvetWrXvWq9397Q09/wxrAcv0TYqRpRwp7AsMTDr4xnoHPNiNu12OEjEczjMeA0db2BggZj2EYB4DxGIvxWPfG6DunAQzjseD5lXtP9Ns4xzI8vwLPL917skJxRt85HecV55XqSsN8bAPHCcToQ720bhpHo3rVexx4BhjWAJYbkBAjTfulsCcwPOFQ6rhlM+J2HShkPI5hHAhGW9s73r0xOh8NZBiPB8+vnXtyz0Acz/D8GjwnOPfkzkfu48ydj070ivNKdaVhPraBEwVi9KFeWjeNo7Fcb12FeTW/ml/Nr+Y3zqv51fxqfjW/cV7Nr+ZX86v5jfNqfjW/ml/Nb5xX86v51fz+sPIbegYa1gCWG5gQI007QdgTGJ5w8I3xDHy2GbEdniRkPJFhPAmMtn1lkJDxJIZxEBipHO4fJ7s3Rt85DWIYTwbPb517cv8fw8kMz2/B8xvnntx3Tu7jzH3ndIpXnFeqKw3zsZ2eIhCjD/XSumkcjd9Xb12FebU9yHq1PahX24N647zaHtSr7UG9cV5tD+rV9qDeOK+2B/Vqe1BvnFfbg3q1Pag3zqvtQb3aHtQb59X2oF5tD+qN8yahPYSeQYY1gOUGJcRI034j7AkMTzj4xngGPtuM2A5PFTKewjCeCkbbvnKakPFUhvE0MJ5qMQ4WMp7GMA4GI5XDffh098boubDBDOPp4Pm9kOd0huf34Pmde09WKM76cB1neMV5pbrSMB/b6RkCMfpQL62bxtFYSd7QM9iwBrDc4IQYadrvhD2B4QmHUvuVzYjbdYiQ8QyGcQgYbW3vTPfG6Pg0hGE8Ezx/FPKcyfD8ETx/cO/JCsUZHS/P8orzSnWlYT62gbMEYvShXlo3jaOxkryhZ4hhDWC5IQkx0rQ/CHsCwxMOpfYrmxG369lCxrMYxrPBaGt7Q4WMZzOMQ8F4tsV4jpBxKMN4DhiHWozDhIznMIzDwEjl8F5iuHtjdC4axjAOB8+5Qp7hDM+54Bnh3pMVijM6N57nFeeV6krDfGyn5wnE6EO9tG4aR2MleUPPMMMawHLDEmKkaSOEPYHhCYdS+5XNiNv1fCHjeQzj+WCkcni8HClkPJ9hHAlGKod5vEDIOJJhvACMVA7zeKGQ8QKG8UIwUjnM4ygh44UM4ygwUjnM40VCxlEM40VgpHKYx9FCxosYxtFgpHKYxzFCxtEM4xgwUjnM48VCxjEM48VgpHKYx0uEjBczjJeAkcphHscKGS9hGMeC8RKLcZyQcSzDOA6MYy3G8ULGcQzjeDCOsxgnCBnHM4wTwDjeYrxUyDiBYbwUjBMsxsuEjJcyjJeB8VKLcaKQ8TKGcSIYL7MYJwkZJzKMk8A40WK8XMg4iWG8HIyTLMYrhIyXM4xXgJHK4bnwSiHjFQzjlWCkcj3AeJWQ8UqG8SowXmkxXi1kvIphvBqMV1mM1wgZr2YYrwEjlcP2eK2Q8RqG8VowUjncrycLGa9lGCeDkcphHq9zb4z6KCczjNeB589CnusYnj+D50/uPVmhOKM+0+u94rxSXWmYj+30eoEYfaiX1k3jaKwkb+iZbFgDWG5yQow07U/CnsDwhEOp/cpmxO16g5DxeobxBjBSOTxe3ihkvIFhvBGMVA7zeJOQ8UaG8SYwUjnM481CxpsYxpvBSOUwj7cIGW9mGG8BI5XDPN4qZLyFYbwVjFQO83ibkPFWhvE2MFI5zOPtQsbbGMbbwUjlMI93CBlvZxjvACOVwzzeKWS8g2G8E4xUDvN4l5DxTobxLjDeaTHeLWS8i2G8G4x3WYz3CBnvZhjvAePdFuO9QsZ7GMZ7wXiPxXifkPFehvE+MN5rMd4vZLyPYbwfjPdZjA8IGe9nGB8A4/0W44NCxgcYxgfB+IDFOEXI+CDDOAWMD1qMDwkZpzCMD4FxisX4sJDxIYbxYTA+ZDE+ImR8mGF8BIwPW4yPChkfYRgfBeMjFuNjQsZHGcbHwEjl8NrscSHjYwzj42B8zGKcKmR8nGGcCkYqh9v6CffGqI9yKsP4BHj+6t4T/X/uTzA8fwXPX9x7skJxRn2mT3rFeaW60jAf28CTAjH6UC+tm8bRqF71PgmeqYY1gOWmJsRI0/4i7AkMTziUOm7ZjLhdpwkZn2QYp4HR1vaecm+MzkfTGManwPO0c09T9H9rPMXwPA2evzn35M5H7uPMnY+e8YrzSnWlYT62gWcEYvShXlo3jaOxXG9dhXk1v5pfza/mN86r+dX8an41v3Feza/mV/Or+Y3zan41v5rfb8+r+dX8an41v3Feza/mV/Or+Y3zan41v5pfzW+cV/Or+dX8an7jvJpfza/mV/Mb59X8an41v5rfOK/m9/uf39AzzbAGsNy0hBhp2t+EPYHhCQffGM/AZ5sR2+GzQsZnGMZnwWjbV6YLGZ9lGKeDkcrh/vGce2P0zsF0hvE58Dzv3hO9A/ccw/M8eP7u3pMVijN652CGV5xXqisN87GdzhCI0Yd6ad00jkb1qncGeKYb1gCWm54QI037u7AnMDzhUOq4ZTPidn1ByDiDYXwBjLa296KQ8QWG8UUwvmAxviRkfJFhfAmML1qMM4WMLzGMM8H4ksX4sntjdO0xk2F8GTyvOPc0RO87vszwvAKefzj35K493MeZu/Z41SvOK9WVhvnYBl4ViNGHemndNI7Gcr11FebV/Gp+Nb+a3ziv5lfzq/nV/MZ5Nb+aX82v5jfOq/nV/Gp+Nb9xXs2v5lfz+8PKb+iZaVgDWG5mQow07R/CnsDwhINvjGfgs82I7fA1IeOrDONrYLTtK7OEjK8xjLPASOVw/3jdvTH6zmkWw/g6eP7l3NMYfef0OsPzL/D807kn952T+zhz3zm94RXnlepKw3xsp28IxOhDvbRuGkfj99VbV2FebQ+yXm0P6tX2oN44r7YH9Wp7UG+cV9uDerU9qDfOq+1Bvdoe1Bvn1fagXm0P6o3zantQr7YH9cZ5tT2oV9uDeuO8SWgPoWeWYQ1guVkJMdK0fwp7AsMTDr4xnoHPNiO2wzeFjG8wjG+C0bavvCVkfJNhfAuMb1qMs4WMbzGMs8FI5XAfftu9MXoubDbD+DZ43nXviX4H6W2G513wvOPekxWKM3oubI5XnFeqKw3zsZ3OEYjRh3pp3TSORvWqdw54ZhvWAJabnRAjTXtH2BMYnnAoddyyGXG7zhUyzmEY54LR1vbec2+MzkdzGcb3wDPPvSc6H73H8MwDz/vuPVmhOKPz0XyvOK9UVxrmYxuYLxCjD/XSumkcjepV73zwzDWsASw3NyFGmva+sCcwPOFQ6rhlM+J2XSBknM8wLgCjre194N4YnY8WMIwfgGehkOcDhmcheD5078kKxRmdjxZ5xXmlutIwH9vAIoEYfaiX1k3jaKwkb+hZYFgDWG5BQow07UNhT2B4wqHUfmUz4nb9SMi4iGH8CIy2tvexkPEjhvFjMH5kMS4WMn7MMC4GI5XDfrkl7o3RcX4xw7gEPJ8KeZYwPJ+C5xP3nqxQnNF55zOvOK9UVxrmYzv9TCBGH+qlddM4GivJG3oWG9YAllucECNN+0TYExiecCi1X9mMuF2XChk/YxiXgpHK4fFymZBxKcO4DIxUDvO4XMi4jGFcDkYqh3lcIWRczjCuACOVwzyuFDKuYBhXgpHKYR5XCRlXMoyrwEjlMI+rhYyrGMbVYKRymMc1QsbVDOMaMFI5zONaIeMahnEtGKkc5nGdkHEtw7gOjFQO89gsZFzHMDaDcZ3F2CJkbGYYW8DYbDG2ChlbGMZWMLZYjOuFjK0M43owtlqMbULG9QxjGxjXW4yfCxnbGMbPwUjleoBxg5Dxc4ZxAxipHOZxo5BxA8O4EYwbLMZNQsaNDOMmMG60GDcLGTcxjJvBuMli3CJk3MwwbgHj5m/JGHo6G57Ohue7rvsL93VH/UxbvI5DqW3zBXi+cu9pDKCOcjxfgedL956sUJxRv9fXXnFeqa40zMe2/7VAjD7US+umcTSqV84berYY1gCW25IQI037Eow1Rh6r2/92qC146TzzjTtvY+ilc0N4rLwGHFRfCpaZGhRsO9cWvJuN/OI5H3MucZ3mex2vLzIwjtc4FM9G8Ehck/lex2uJTEzdZHO4PeuFrtejdkLX3Z3z6yY/1ZeCZXrl20b3/Dhe61NbwW2z0VgO43CYn6zQfWGUn1YjP+RfD/mhZfoY+aHpmB+8h2gzlsM4HOanQaj/IcpPs5Ef8rdAfmiZRiM/zZb84L1qq7Fc0vpRJPvHWhiedeCR6lPk9IWtBY9UPyyn/3ANeKT6rjl9rqvBI9Xfz+mnXgUeqe9IOH37+B0J7ZfYx9GS/4x9XNQ+sf+Q2kgVTKPtlIJplKtqSx58d3mox+8qVkJdAt9BNnK/l1oGHonvG4XijO4V8bvWFUY8+J0qXqdJfDftex2/U83AOBrL9bZVmLc1AV6pdib0zEVjt/Z11EJePzPyi3FJPdvFeeYDn+2SepZKIM7oOIHPsH1qxIPPAuF5QOKZP9/r+PxaBsbRWK53aQK8QnU30P5hPpO1zMiH0LO4DdznMxeBR+K5W6E4o/1jIcTxsREPPltcBTEKPG8ftbdFRn5pHI3lepckwCu03ZqE3qXYut9RXj808otxCbwzxH63ZD54JN4PEooz2u/mQRwfGPHgO1ApiHGeQIy+1/EdqAyMo7Fc78IEeIW2W2O4XoF3arfud5TX9438Yu7p3cLweoXaBvW/pmD+2trCclPguweJPlPuswtkkHomRSjOaL9tgTg2GPFgPwXed7YIxOh7HZ8NynjF/bAcb1uFeVsT4JVqZ0LPN26976S8Nhv5bYG4BPpwG7h9ytiHK9HHLRRndJzAvth1Rjxx/Y8S/dS+17GfOgPjaCzX25IAr1DdW8/D64z61hv5COsXePehgdtnvgI8En34QnFG+we+47HKiAff5cD7Tok+at/r2GeegXE0lutdkwCv0HZrEupn3brfUV6XGfnFuKTeLeW8u4Xvlkq8kycUZ7TffQJxLDXiScN8vO+U6PP1vfj3INFYrnd5ArxC261Rup+V8rrYyC/FFe4fXYxp4XXLj4NC3Hpfue1DuI4WiEPvK787r95Xsge9r+w46H0lTNf7Sr2vNAa9r4Tpel/53d9X4vUtTcPr2yC/Hg+WC+dvHxS2Ew3YrgTO4dlyrn/RU5MwT5eEeTolzNM5YZ6FCfOkEuapTZhnXsI81QnztCXMsyRhHj8BnsArvj7F38Jog2lVRtnw+LkYztvm+wD43kYKppn3TXjN3AmmrYR6TNdamEb9CGtgWkv+82qYRvfKq2Aa3SestNSL20fiPRLfqCsD41RfV3CsTIhnScI8bQnzVCfMMy9hntqEeVIJ8yxMmKdzwjydEubpkjBPTcI8VRaPQJ9tI7fvTfq9Vcm+aXw/d5URD76bifdMEv3vpfp60ViuV/pda9fe5gR4pdqZUB9ko9lXuMLIL8Yl8J5jE/d3b4XffcwKxVn0++bLjXjwN5vx3ljqt7iXGvml8bjfNy/lXVhh3nkV5l2bAC8+K4bfH5jv8GLfxFKYljLWF16nVfLvLgl4ot+Yoed36DdmagxPCpZ5Jt/fQ78xg7/1if37FMdGY7lwnsDvt0ZxrI+Jow3ioGVmQBxSz1QJxZoN19GaX1fY17DJEifNfxl+e+wV6Kuj7bEZ1jPXMp+GUudHfBZM4JmX+rBuui6kbdtsqXstWB3VncW6/fyfea2ags9zgq1p6XANSXnG34VusSyHnz83yuB1Z4sl7ozjuPE3mzIwTvWFbWYWtK+58IyixLET48b81EB+aD4eN2m/cPmbaOE6WsFiHmvwNxXJif3XeJ5pEcgVHg9p3eYzYvjb1RvASLHgMQZ/U7GTe28Tnq9pKHXMwXNNtUD+wnC3y6/rvBHjT5owatTIc0eOGHvCiEknDx051gdiCtKEbN/rGII5PxyqLNOEUhw1iWqvYzqrLemk7j7XP7FY4z6mpjAm6n6jUwN+rR8OKVhmjXH5QtNpOQ/KY1cjPkpR4z4/0S1grVB+AiM/5K+FuGmZNiM/gSU/eHnXxVgO43D9E4tdhfKTNvJTC/FR3LTMF0Z+bI9LYPnAWA7jcPmTtOF6uwnlp7uRH/J3g7hpmf8Y+aF/aTkPyneFvGB7o8/4NTLVhV8P03+jgm3wR/CZ/qX/8iAN06os9aaMuMJpdHysg2lkwLromNEDTObpy+mB3DxYefkKq/LzqgHqeYVAwuVr8sBar9BYEbtPfuLO+fGjxo4dOikzcvTwERMzYyaMz4w5N3POmAmjh4/DQr23pVDDthR6OtiGQs9vS6HV21Jo/bYU2rIthf5dbiHvv2xNAKZi7gEA","debug_symbols":""},{"name":"increment_balance","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"owner":[{"start":34,"end":35}],"value":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},"bytecode":"","debug_symbols":""},{"name":"create_note","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"owner":[{"start":36,"end":37}],"value":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266]},"bytecode":"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","debug_symbols":"7ZjbbtswDIbfxddBwKMo5lWGXgRbBxQo0mHJXZB3n3OQ5KZCvDrtasO7CgL8lD7/pklK++b55ft69/Sy2TarfYPYrL7tm+2v9eb4d7tb/941K1g0j5sf7e9h0fx8en5sVhjiYfFGh252kaK7Z7VZRUwc6SIm4SJGrS6NEiStjUrxlf5h0SBNlpz/HbliSORq4W5yqZFju0uKIpM+foCsBuWsdh5EpKMjCh9AhBTzHlFvE/1t4jglpbOVJeUEbVOEjlOE9glCE9ShpUBH71ufOa0fOoXIqFa2InsqW1G0o+YTDt6Pg+CUPQR+BXTcgj5/C/78LeQjtgihbCE9b65dO6cmd1NTKuIYUspFL3VUqo2sffUpIwioiKupJqlDuvltKTLkas5XmTag+JPO0vAWE3IHdegR95oYRm0igmleWqhr4xHeJgRv1/Bx3PCoBb4vgS3mJzXvlEY9dzSfy5MyjPtJqcwyZNxTlBRzUdLuQaxarZWSLWol0wOeXMG5umKaoC3GritvpUFyFgbtdNK2Uw6p60yz9ZyTMRHCbc/RIQ0vBGp3e85z9TxiOkJE8euvX/67UnFl3MPrV7ky8mn0i1wZ+Zj7Plck3zYYhR5XOKSeKFqY5XwxAcvqN+Sen7OcF8J55A7L6ihqmclCieFLCMKAmOrII576h4bSPS7NA5b16yr2dNwTgevMgGX9uqgvCIcE0ZAgfneQLetXKZIP1NKd0jkF6ZCgasHRmEcx6+SQHh4Ohz8="}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/log.nr"},"46":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        GET_NOTE_ORACLE_RETURN_LENGTH,\n        GET_NOTES_ORACLE_RETURN_LENGTH,\n        MAX_NOTES_PER_PAGE,\n        VIEW_NOTE_ORACLE_RETURN_LENGTH,\n    },\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u3; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"},"47":{"source":"use crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(context: &mut PublicContext, storage_slot: Field, note: &mut Note) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"},"48":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n    },\n    hash::pedersen_hash,\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/utils.nr"},"52":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/public.nr"},"54":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/private.nr"},"56":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::RETURN_VALUES_LENGTH,\n};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"},"58":{"source":"use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u3; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u2,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u3; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u3; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"},"60":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"},"61":{"source":"use dep::protocol_types::{\n    address::{\n        AztecAddress,\n        PartialAddress,\n        PublicKeysHash,\n    },\n    grumpkin_point::GrumpkinPoint,\n};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"},"63":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"},"65":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::NUM_FIELDS_PER_SHA256,\n    grumpkin_point::GrumpkinPoint,\n};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: AztecAddress, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"},"67":{"source":"#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/rand.nr"},"70":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"77":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/abi.nr"},"78":{"source":"mod private;\nmod public;\nmod avm;\n\nuse public::PublicContext;\nuse private::PrivateContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context.nr"},"80":{"source":"pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/utils.nr"},"90":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"},"93":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"94":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Set<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Set<T> {}\n\nimpl<Note> Set<Note> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"},"121":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"134":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"147":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"149":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/field.nr"},"155":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\nglobal AZTEC_ADDRESS_SERIALIZED_LEN = 1;\nglobal ETH_ADDRESS_SERIALIZED_LEN = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/type_serialization.nr"},"158":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"165":{"source":"use crate::{\n    constants::{\n        CONTRACT_STORAGE_READ_LENGTH,\n        GENERATOR_INDEX__PUBLIC_DATA_READ,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Empty,\n        Serialize,\n    },\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"168":{"source":"// A contract used for running benchmarks.\n// We should try to change this contract as little as possible, since any modification\n// would alter the metrics we're capturing in the benchmarks, and we want to keep the\n// subject being tested as unmodified as possible so we can detect metric changes that\n// arise from code changes.\n\ncontract Benchmarking {\n    use dep::value_note::{\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote},\n    };\n\n    use dep::aztec::{\n        protocol_types::{\n            abis::function_selector::FunctionSelector,\n            address::AztecAddress,\n        },\n        context::{Context},\n        note::{utils as note_utils, note_getter_options::NoteGetterOptions, note_header::NoteHeader},\n        log::emit_unencrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set},\n    };\n\n    struct Storage {\n        notes: Map<AztecAddress, Set<ValueNote>>,\n        balances: Map<AztecAddress, PublicState<Field>>,\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    // Creates a new value note for the target owner. Use this method to seed an initial set of notes.\n    #[aztec(private)]\n    fn create_note(owner: AztecAddress, value: Field) {\n        increment(storage.notes.at(owner), value, owner);\n    }\n\n    // Deletes a note at a specific index in the set and creates a new one with the same value.\n    // We explicitly pass in the note index so we can ensure we consume different notes when sending\n    // multiple txs that will land on the same block.\n    // See https://discourse.aztec.network/t/utxo-concurrency-issues-for-private-state/635\n    // by @rahul-kothari for a full explanation on why this is needed.\n    #[aztec(private)]\n    fn recreate_note(owner: AztecAddress, index: u32) {\n        let owner_notes = storage.notes.at(owner);\n        let getter_options = NoteGetterOptions::new().set_limit(1).set_offset(index);\n        let notes = owner_notes.get_notes(getter_options);\n        let note = notes[0].unwrap_unchecked();\n        owner_notes.remove(note);\n        increment(owner_notes, note.value, owner);\n    }\n\n    // Reads and writes to public storage and enqueues a call to another public function.\n    #[aztec(public)]\n    fn increment_balance(owner: AztecAddress, value: Field) {\n        let current = storage.balances.at(owner).read();\n        storage.balances.at(owner).write(current + value);\n        let _callStackItem1 = context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"broadcast((Field))\"),\n            [owner.to_field()]\n        );\n    }\n\n    // Emits a public log.\n    #[aztec(public)]\n    fn broadcast(owner: AztecAddress) {\n        emit_unencrypted_log(&mut context, storage.balances.at(owner).read());\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; VALUE_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNote::deserialize_content, note_header, serialized_note)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/benchmarking_contract/src/main.nr"},"172":{"source":"use dep::std::option::Option;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::note::note_getter_options::{NoteGetterOptions, SortOrder};\nuse dep::aztec::oracle::get_public_key::get_public_key;\nuse dep::aztec::state_vars::set::Set;\nuse crate::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, VALUE_NOTE_LEN},\n};\nuse dep::aztec::protocol_types::address::AztecAddress;\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\npub fn create_note_getter_options_for_decreasing_balance(amount: Field) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(0, SortOrder.DESC)\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\npub fn increment(balance: Set<ValueNote>, amount: Field, recipient: AztecAddress) {\n    let mut note = ValueNote::new(amount, recipient);\n    // Insert the new note to the owner's set of notes and emit the log if value is non-zero.\n    balance.insert(&mut note, amount != 0);\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\npub fn decrement(balance: Set<ValueNote>, amount: Field, owner: AztecAddress) {\n    let sum = decrement_by_at_most(balance, amount, owner);\n    assert(sum == amount, \"Balance too low\");\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\npub fn decrement_by_at_most(balance: Set<ValueNote>, max_amount: Field, owner: AztecAddress) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let opt_notes = balance.get_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..opt_notes.len() {\n        if opt_notes[i].is_some() {\n            decremented += destroy_note(balance, owner, opt_notes[i].unwrap_unchecked());\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if decremented as u120 > max_amount as u120 {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner);\n\n    decremented\n}\n\n// Removes the note from the owner's set of notes.\n// Returns the value of the destroyed note.\npub fn destroy_note(balance: Set<ValueNote>, owner: AztecAddress, note: ValueNote) -> Field {\n    // Ensure the note is actually owned by the owner (to prevent user from generating a valid proof while\n    // spending someone else's notes).\n    assert(note.owner.eq(owner));\n\n    balance.remove(note);\n\n    note.value\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/value-note/src/utils.nr"},"173":{"source":"use dep::aztec::{\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Deserialize, Serialize}\n    },\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    oracle::{\n        rand::rand,\n        nullifier_key::get_nullifier_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    fn serialize_content(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(),0)\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/value-note/src/value_note.nr"}}}