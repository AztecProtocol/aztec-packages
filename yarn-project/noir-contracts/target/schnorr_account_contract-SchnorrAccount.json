{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","name":"SchnorrAccount","functions":[{"name":"entrypoint","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"payload","type":{"kind":"struct","path":"authwit::entrypoint::EntrypointPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]},"visibility":"public"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"payload":[{"start":36,"end":53}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148]},"bytecode":"","debug_symbols":"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UZFWPb7JIZ/vJa5Vj29yyOdliWtV5JuQz58S16rINyGf5ySuFbi/urWK7Fo70Cp7lpJDPsPmVi7AfftWLsA9/lYuwH7gTi7IZ8LcygXYZ9zKBdiT3MoFeN3nVi7RuGxyMb+7zUWj3z3e1+OQzze5jsvh7+wd8pklt3LR6Hc7uCCfLXIrF41+t4eLRr/bw0Wj3+1Yx0Q+q+NWLhr9bg8XlX63g4tKv9vBRaXf7eCi0u8ec0E+o+JWLir9bgcXlX63g4v53W0u0bhscjG/u83F/O42F/O721zM725zMb+7yQX5rINbuZjf3eZifnebi/ndbS7RuGxyMb+7zcX87jYX87vbXMzvbnMxv7vJBflMiFu5mN/d5mJ+d5uL+d1tLtG4bHIxv7vNxfzuNhfzu9tczO9ucvn0OQ6yv+L/9MkMwtUH6uojdfWJuvpMXX2hrr5SV9+Yq//0SQHC1VP32orbazv2tVXcXtuxC+LTifvC1eP22p7qcXttT/W4vbanetxe21M9bq/tmAwbbq/tqR631/ZUD9xrO6oH7rUd1QP32o7qgXttR/XAvbajeuBe21E9cK/tqJ651/qFudf6hbnX+oW51/qFudf6hbnX+oW51/qFudf6hbnX+oW51/qFutc66l7rqHuto+61jrrXOupe66h7raPutY661zrqXuuoe62n7rWeutd66l7rqXvtp9OIhas//7xfngU9UCTB6o9/p+AFklrvrL4xVy+Qenpn9Y66ek9dfaCuPlJXn6irz9TVU/fagNtrj38T6ANurz3+dZGPuL22p3rcXttTPW6v7aket9f2VI/ba3uqx+21HZNhxO21PdXj9tqe6oF7bUf1wL32uPoE3Gs7qgfutR3VA/fajuqBe21H9cC9tqN66l6bqHttou61ibrXJupem6l7babutZm612bqXiuQgHRn9dS9NlP32kzdazN1r83UvbZQ99pC3WsLda8t1L1WILvozuqpe22h7rWFutcW6l5bqHttpe615/NznH9+iHfFCVbf8TuF8/k5t1afqKvP1NUX6uordfWNufrz+Tm3Vu+oq/fU1VP32vP5OZdV3/GbwIbbazt+XdRwe21P9bi9tqd63F7bUz1urz2uPiy4vbanetxeezwZhgW31/ZUj9tre6oH7rUd1QP32o7qgXttR/XAvbajeuBe21E9cK89rt4B99qO6ql7raPutY66157Pz7m1eupe66h7raPutY661zrqXuupe62n7rWeutd66l57Pj/n1uqpe62n7rWeutd66l7rqXttoO61gbrXBupeG6h77fnsolurp+61gbTXumVJ/2nHIC/P61qsr+Lb67IwdlkcuyyNXZZ/fZlL9T/thOqXpTz/Qd+vK2/XlcHr6uB1bey67cXfjuvc4HV+8LoweF0cvO7sY2j3pa+PyNd/xGnzvMQ1tnTJ5eBxFPMTa6zh2yPm74oqXEXtworWTzm/8NP1Ke4jn+I/8inhI58SP/Ip6SOfkj/yKeUjn1I/8ikf+e6Hj3z3w0e+++Ej3/3wke9++Mh3P3zku//pwSM9+2pOdbuvhgJXEe5iXPZ1fW3cqR53Ma6j+oi7GNdTPe5iXE/1uItxPdXjLsb1VB+pq8ddjOupHncxrqd63D989VRP3Wsjda9N1L02UffaRN1rE3WvPR9uemv1pBvT/1RPujH97+oz6R/b/1RP+sf2P9WT/rH9T/W4z5ye6kn/2P6netY/tv9dPfAP247/apaBf9jWUT3wD9uOqy/AP2zrqB6413ZUD9xrO6oH7rUd1QP32o7qgXttR/XAvbajeupeW6h7baHutRWl174qQumfr4o+3BN311K+v9a58nxn5+pbxGaIb/UH8vojef2JvP5MXn8hr7+S139lh1w/5dL4ytenfDjC//hXP83DVYQbtd/xd4rzcZC3Vo8btd9TPW7Ufk/1uFH7PdXjRu33VI8btX9cvUAc5K3V4x5r01M97rE2PdUz91qBOMhbq2futQJxkLdWz9xrBeIgb62eutc66l7rqHuto+61jrrXno+DvLV66l7rqHuto+61jrrXOupe66l7rafutR73eX/8i2WBSMJbqyc9tvJP9aTHVv5dfSA9tvJP9aRHRP+pnvSI6D/Vkx4R/ad63Of98e+QBGLxbq0e+IjojuqBj4juqB6413ZUD9xrj6uPwL22o3rgXttRPXCv7ageuNd2VE/dayN1r43UvTai9NpXRSj981XRh3vib37vGEP782IXk3+92tVX/Wkhr9+R1+/J6w/k9Ufy+hN5/Rm4fre86g9f6v/+6hafK60tvVXh33pFKoq0VkVakT1AfWltYfs7mJE9QE/9yB6gp35kD9BTP7IH6Kk/kteP7AF66kf2AK/60+J26kfu6z31I/fqnvqB+2/yZa0/Ltv1F+D+21U/cP/tqh+4/3bVD9x/u+oH7r9d9QP33676gfvvl/rrTv3A/berfuD+21U/cv8tda2/7fiHitx/e+pH7r899SP33576kftvT/3I/benfuT+21M/cv99r7/t1I/cf3vqR+6/PfVf2X/XT2nLRz7lfC8r6wldIYSjf4vDhJggkFkjXVH4bEWyez0EMmvurD5RV5+pqy/U1Vfq6htx9VEgs+bO6h119Z66euZeGxfmXhsX5l4bF+ZeGxfmXhsX5l4bF+pe66h7raPutY661zrqXiuQWXNn9dS91lH3Wkfdax11r3XUvdZT91pP3Ws9da/11L1WIC/ozuqpe62n7rWeutd66l7rqXttoO61gbrXBupeG6h7rUBW053VU/faQN1rA3WvDdS9NlD32kjdayN1r43UvTZS91qBrKY7q6futZG610bqXhupe22k7rWJutcm6l6bqHttou61AslPd1ZP3WsTda9N1L02UffaRN1rM3WvzdS9NlP32kzdawUSlu6snrrXZupem6l7babutZm61xbqXluoe22h7rWFutcKpCndWT11ry3UvbZQ99pC3WsLda+t1L22UvfaSt1rK3WvFUhOurN66l5bqXttpe61lbrXVupe26h7baPutY2611LnRkXq3KhInRsVqXOjInVuVKTOjYrUuVGJOjcqUedGJercqESdG5UW5l6bqHOjEnVuVKLOjUrUuVGJOjcqUedGJercqESdG5Woc6MSdW5Uos6NStS5UYk6NypR50Yl6tyoRJ0blahzoxJ1blSizo1K1LlRiTo3KlHnRiXq3KhEnRuVqHOjEnVuVKLOjUrUuVGJOjcqUedGJercqESdG5Woc6MSdW5Uos6NStS5UYk6NypR50Yl6tyoRJ0blahzoxJ1blSizo1K1LlRiTo3KlHnRiXq3KhEnRuVqHOjEnVuVKLOjUrUuVGJOjcqUedGJercqESdG5Woc6MSdW5Uos6NStS5UYk6NypR50Yl6tyoRJ0blahzoxJ1blSizo1K1LlRiTo3KlHnRiXq3KhEnRuVqHOjEnVuVKLOjUrUuVGJOjcqUedGJercqESdG5Woc6MSdW5Uos6NStS5UYk6NypR50Yl6tyoRJ0blahzoxJ1blSizo1K1LlRiTo3KlHnRiXq3KhMnRuVqXOjMnVuVKbOjcoLc6/N1LlRmTo3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IZfLVVUuV+W5h/sKuZlLLper8tzGfYVcLlfluZH7CrlcrspzK/cVcrlcledm7ivkcrkqz+3cV8jlclWeG7qvkMvlqjy3f18hl8tVuW4Wv0Aul6ty3S5+gVwuV+W6YfwCuVyuynXL+AVyuVyV66bxC+RSuarium38ArlUrqq4bhy/QC6VqypL5pJL5aqK60bzC+RSuariuS39CrlcroqrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrV65u9crVrV65utUrV7d6XTKXXCpXVbm61StXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3qdpo76WO8vPtbfP/kkdpY1ZBI7y9vUkct95Fx7Ymd5kzKJneUtyiJ2mppik9hZQp9JbMzIdxIQc3eeBDjeh/u2Pl7clldeZ1/b3evs9fSzl3yW6ziWXSHXcSy7Qq5jv3OFXMeO5wq5jj0PXu7huUb4CrmOfc8Vch07nyvkOvZJ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nntur5DL5ao8N91eIZfLVXluxr1CLper8tyOe4VcLlfluSH3CrlcrspzS+4Vcrlcleem3Cvkcrkqz225V8jlclWeG3OvkMvlqjy38V4hl8tVeW7kvUIul6vy3Mp7hVwuV+W5mfcKuVyuynM77xVyuVyV54beK+RyuSrPLb1XyOVyVZ6beq+Qy+WqPLf1XiGXy1V5buy9Qi6Xq/Lc2nuFXC5X5bm59wq5XK7Kc3vvFXK5XJXnBt8r5HK5Ks8tvlfI5XJVhctVeW5pvkCu557mK+RyuarK5ao893BfITdzyeVyVZ7buK+Qy+WqPDdyXyGXy1V5buW+Qi6Xq/LczH2FXC5X5bmd+wq5XK7Kc0P3FXK5XJXn9u8r5HK5KtfN4hfI5XJVrtvFL5DL5apcN4xfIJfLVbluGb9ALperct00foFcKldVXLeNXyCXylUV143jF8ilclVlyVxyqVxVcd1ofoFcKldVPLelXyGXy1VxdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9crVrV65utUrV7d65epWr0vmkkvlqipXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3rl6lavXN3qlatb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"},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"field"},"visibility":"public"},{"name":"signing_pub_key_y","type":{"kind":"field"},"visibility":"public"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"signing_pub_key_x":[{"start":36,"end":37}],"signing_pub_key_y":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261]},"bytecode":"H4sIAAAAAAAA/+2dB3QcxRnH55qapRjjEEiA5BJsU4LhTneyTlQbY5qNMb0XyXeyBbJk5LON6JCE9IT0nhCSkJ6Q3hNCeoX0HnrvvRu+v7SDPtZn4D1968e8P/Pe/+3u3N7s/GZnp+3sfLmUc7e7cSe7Li3KiPLqOBvt++Nc7Lgpdtwc+39r7Lgjdjw1djwtdjw9drxZdKxdKtrOjbalwpxyudbdWSuWir2Fzp6+Sleh3NU3p1KsFLsqXdXOSqlUq5Qr3T19Pd2FnmK5VCv2d/WU+gvjbpYKqzBJh7i1qDjPEK0TzYy2s8i2O4q2je6ZTpdtSdNDp8t27pnOOl9v78zyddHfPx/H7SOOJtEOMY50jKMwOVdsNkyT1xqnCVgRZt5N5PFMFH782U9FWxfdf39+OpamO6rzZkfhZdyG3VxDnvh1UsbXmGEXViGpOM4MII6pBOKYRDxnO9u61bud3HhbAq5Z+eetrlcuzEHbZ6xB5MbbQdq1uYnn1p+DeGTs4zFW/mWtw5V706a4stEFUJ63KsZc5O9Zpyq/lEr/pgTil1LcPmx/7K+HuE6L9oeG6wP9o/NHar31WnXxcL2mM4z/g/bThV1a/Z5p8HuugV/qWcJrcxMZs0n5+ev431piYYy5udG2MDlXdLHIWoa9k0umBLJuPegaf7Kth52dfesBYeajzLNeRnAv7JojpeLoMz9uJjJep2jryC+hErqsS+h42jUqofEgTldxMi9Vo9I6Zx1uoVBqdhPpaBju0z1Wnz55dZ2cSitfKxjmn6K+ti9M/XW8f0btb+omXKvajxeqU9wza4hG/8nG/tOufm9qwJ035o4/E82xOGaVH2rdVHYiPXzckshnbW7DvQAdX+90HkmilYL08OXIslp9yeq+wYGlC2uj84aqS3pH6gO9g/Oq1ZHaqlWNCqNMDGBDNbb2Szfw002ljPLzGSWr/NKxhNEJ6s9PtNaP9ytRIqM/WYy2W4pKbv3+Zyn6vTPaIteVY3GM186TrVEtS5OyXViFjFu/ze9cOP046zyVZBoUEkoD63gWnW2t++JYC99Yi66IfFnaJZrjxsc04BJqLffo1rK+Blyj1rKuuFLKz1d2aeX3dOWowjcfE5AWf0Kt4CLiuoVK/wR6Bt0Jtdg6X+wZOLe5m3AMPYP2aB9ttObs+qwtGzluLSqOm0T7tRUD9QVDS0dGV8p43KLhZbrBq++td7q9lVb7up7MNjgfYTTFzm3UdvPnNuoAgGNKtJ93ds8mysbWBnHQLq/2p6j4tNnHp5gQ51jd2644WmM87er3FsXYngBjSl3Xh63jEb/2OmebDh3PkQ4dDeLSsZHTwV+vTfnpcX/9u9+mYyy6feDP32jD2dbDxDqsyXZqu51thkqKOWXIXAmEOW3I3BMIc8aQeZdAmLOGzLsGwpwzZN4tEOYmQ+bdA2G2nBC1RyDM2xky7xkI8yxD5rmEzPMImfciZJ5PyLw3IfMCQuZ9CJn3JWTej5B5f0LmAwiZFxIyLyJkPpCQeTEh80GEzEsImQ8mZD6EkPlQQubDCJkPJ2Q+gpD5SELmowiZjyZkPoaQ+VhC5uMImY8nZD6BkPlEQuaTCJl7CZn7CJmXEjJXCZlrhMz9hMzLCJmXEzIPEDKfTMh8CiHzICHzCkLmIULmYULmlYTMpxIyjxAyryJkrhMyryZkXkPIvJaQ+TRC5lFC5tMJmc8gZD6TkPksQuazCZnPIWQ+l5D5PELm8wmZX0fI/HpC5jcQMl9AyPxGQuY3BcI825D5zYEwW5pQeUsgzJZ5+62EzG8jZH47IfM7CJnfSch8ISHzuwiZ303I/B5C5vcSMr+PkPn9hMwfIGT+ICHzhwiZP0zI/BFC5o8SMn+MkPnjhMyfIGS+iJD5k4TMFxMyf4qQ+dOEzJ8hZL6EkPmzhMyfC4R5B0PmzxPe5y8Ewmxp4+eLhPf5S4TMXyZk/goh81cJmS8lZP4aIfPXCZm/Qcj8TULmbxEyf5uQ+TuEzN8lZP4eIfP3CZl/QMj8Q0LmHxEy/5iQ+SeEzJcRMv+UkPlyQuafETL/nJD5F4TMvyRk/hUh868JmX9DyPxbQubfETL/npD5D4TMfyRkvoKQ+UpC5j8RMv+ZkPkvhMx/JWT+GyHz3wmZ/0HI/E9C5n8RMv+bkPk/hMz/JWT+HyHz/wmZryJkvpqQ+RpC5msDYd7ZkPk6wvt8PSHzDYTMNxIy30TIfDMh8y2BMLcYMt8aCHOrIfNtgTC3GTLfHgjzFEPmOwJhbjdkvjMQ5g5D5rsCYX6JIfPdgTBPNWS+JxDmTQyZ7w2EeZoh832BMG9qyHx/IMzTDZkfCIT5pYbMDwbCvJkh80OBML/MkPnhQJg3N2R+JBDmLQyZHw2E+eWGzI8FwvwKQ+bHA2He0pD5iUCYtzJkXhcI89aGzE8GwvxKQ2aXCoP5VYbMqUCY84bM6UCYX23InAmE+TWGzNlAmLcxZM4ZMktQLhOFNUPxp6I0wG9ZUU7UJMJ6tHgPhfcyeE+BcXuMY2NcF+OcGPfDOBjGhTBOgnED9KPRr0Q/C/0OtMPRLkU7De0W1OOo11DOo9zLi/BcIJ9so+4F4jdTdEV03C2qiHpEu4h2Fe0m2l20h2jPKM3nifYSzRftLVog2ke0r2g/0f6iA0QLRYtEB4oWiw4SLREdLDpEdKjoMNHhoiNER4qOEh0tOkZ0rOg40fGiE0Qnik4S9Yr6REtFVVFN1C9aJlouGhCdLDpFNChaIRoSDYtWik4VjYhWieqi1aI1orWi00SjotNFZ4jOFJ0lOlt0juhc0Xmi80WwDw976bAffoEI9qVhbxn2h2GPF/ZpYa8V9kthzxP2LS8Uwf4h7AHCPh7sxcF+GuyJwb4W7E3B/hLsEcE+D+zVwH4L7JnAvsdFIth/uFgE+wBYLx/rx18iwvriWG8b609jPWasT4z1erF+LdZzxfqml4qw/iXWg8T6iFgvEOvnYT05rK+G9caw/hbWo8L6TFivCOv3YD0brO9ymQjrf1wuwvoQWC8B6wfge3p8X47vrfH9Mb7Hxfep+F4T3y/iez7ksytF+P4J3wPh+xh8L4LvJ/A9AebXY7455l9jPjLm52K+KuZvYj4j5vddLcL8r2tFmB+E+TKYP4L5FJhfgPfteP+M97F4P4n3dXh/hfc5eL+B8X6Mf2M8GOOjGC/E+BnGkzC+gvEG9L/RH0X/DP0VtN/RnkX7Dg8y6n/Uh6gfUF6i/PDPFNy0aLtVtO2t12srVtbz9eF8b7WaXztQX54fXlMb6R8cRpYbe4af9/lPAaJEStNu7AAA","debug_symbols":"3ZbbSgNBDIbfZa5LmWSSSdJXES+KBxCkiu1d2Xe3ajOz1qGDq1Tbq2XhT/iSyWkbHp9ulpuHp9U6LLYBICyutmH9vFy9/a43y5dNWMRZuFvd7r7DLNw/PN6FBSIMsy86MJG9FMysqEUaYkyKezFSqmJgbbkGyuS+gVE/6a9nAfBsydPpyBmyk7PkH5NTixwSFSKK1uFHiepIQlLUlltiQHYxRjwu7uPzeePn38BnKfjWwVcUr3tNsRYm0zuO/C8c/QUcrY9rmDo42VtWrb4VNdsQJLXqgFpdaIXYxI5LcTeZil8dT444qcDsQlIIkdwxRIsdcS8tGE+cFojCBYhwnJg3HPhTHDnEwVPjAFecXtmIFnaxmA5mBqYzZqdTs+9GjLtGSZ12ZSueM1JnMnFZkyy1vjK8x8mXE6ewX2OiOo7zqzRTqZTMoz2wC3zSDMsXlMXkoWrMx7MIFst9EVl+nEW5nCwqmGeR7LDn9F/HmUsBoAJ04kzZ+4i45oTSx2afN08eIc+N5Lp+3QTiBJvm0ibzQDjXYtvXGs3b91gyv22I4uHD0bx9rfSMYIoRTjFK3zbSeXvXUbkeabxKkxvxFKPmnGQts1jq22YerofhFQ=="},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"serialized_note":[{"start":3,"end":6}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[6,7,8,9]},"bytecode":"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","debug_symbols":""},{"name":"set_is_valid_storage","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"},{"name":"value","type":{"kind":"boolean"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"message_hash":[{"start":34,"end":35}],"value":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},"bytecode":"","debug_symbols":""},{"name":"is_valid","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"message_hash":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256]},"bytecode":"","debug_symbols":""},{"name":"is_valid_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"message_hash":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237]},"bytecode":"","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/log.nr"},"46":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        GET_NOTE_ORACLE_RETURN_LENGTH,\n        GET_NOTES_ORACLE_RETURN_LENGTH,\n        MAX_NOTES_PER_PAGE,\n        VIEW_NOTE_ORACLE_RETURN_LENGTH,\n    },\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u3; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"},"47":{"source":"use crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(context: &mut PublicContext, storage_slot: Field, note: &mut Note) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"},"48":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n    },\n    hash::pedersen_hash,\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/utils.nr"},"49":{"source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::Empty;\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_header.nr"},"52":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/public.nr"},"54":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/private.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::{\n        function_selector::FunctionSelector,\n        private_call_stack_item::PrivateCallStackItem,\n    },\n    address::AztecAddress,\n    constants::PRIVATE_CALL_STACK_ITEM_LENGTH,\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"},"58":{"source":"use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u3; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u2,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u3; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u3; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"},"59":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"61":{"source":"use dep::protocol_types::{\n    address::{\n        AztecAddress,\n        PartialAddress,\n        PublicKeysHash,\n    },\n    grumpkin_point::GrumpkinPoint,\n};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"},"63":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"},"65":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::NUM_FIELDS_PER_SHA256,\n    grumpkin_point::GrumpkinPoint,\n};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: AztecAddress, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"},"70":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"77":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/abi.nr"},"78":{"source":"mod private;\nmod public;\nmod avm;\n\nuse public::PublicContext;\nuse private::PrivateContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context.nr"},"80":{"source":"pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/utils.nr"},"90":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"},"93":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"96":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    },\n    hash::pedersen_hash,\n};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for ImmutableSingleton<T> {}\n\nimpl<Note> ImmutableSingleton<Note> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            context: context.private,\n            storage_slot,\n        }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, ImmutableSingleton>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash([self.storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(\n        self,\n        note: &mut Note, \n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note  where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"},"104":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext {\n            public_key: self.public_key,\n            secret_key: self.secret_key,\n            contract_address,\n        }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"105":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        GENERATOR_INDEX__GLOBAL_VARIABLES,\n        GLOBAL_VARIABLES_LENGTH,\n    },\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/global_variables.nr"},"106":{"source":"use crate::{\n    abis::{\n        function_data::FunctionData,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    },\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__CALL_STACK_ITEM,\n        PRIVATE_CALL_STACK_ITEM_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x2442dd521c59987a4291be0fd11198e5a4d87c8bc36cf3b65c5229f61fc37b30);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"},"108":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        side_effect::{\n            SideEffect,\n            SideEffectLinkedToNoteHash,\n        },\n    },\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n        GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    },\n    contrakt::deployment_data::ContractDeploymentData,\n    header::Header,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    meta_hwm: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_commitments == other.new_commitments) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.meta_hwm as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            meta_hwm: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"110":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"111":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"112":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::AztecAddress,\n    constants::{\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n        PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::pedersen_hash,\n    header::Header,\n    traits::{\n        Hash,\n        Serialize,\n        Deserialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"115":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs,\n        };\n        call_stack_item\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"118":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"121":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"123":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot {\n            root : serialized[0],\n            next_available_leaf_index : serialized[1] as u32\n        }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            root: 0,\n            next_available_leaf_index: 0,\n        }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"},"131":{"source":"use crate::{\n    abis::{\n        append_only_tree_snapshot::{\n            AppendOnlyTreeSnapshot,\n            APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n        },\n        global_variables::{\n            GlobalVariables,\n            GLOBAL_VARIABLES_LENGTH,\n        },\n    },\n    constants::{\n        GENERATOR_INDEX__BLOCK_HASH,\n        HEADER_LENGTH,\n        NUM_FIELDS_PER_SHA256,\n        STATE_REFERENCE_LENGTH,\n    },\n    hash::pedersen_hash,\n    state_reference::StateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    body_hash: [Field; NUM_FIELDS_PER_SHA256],\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        (self.body_hash == other.body_hash) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.body_hash);\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let body_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n        offset = offset + NUM_FIELDS_PER_SHA256;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            body_hash,\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            body_hash: [0; NUM_FIELDS_PER_SHA256],\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/header.nr"},"134":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"147":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"151":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"155":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\nglobal AZTEC_ADDRESS_SERIALIZED_LEN = 1;\nglobal ETH_ADDRESS_SERIALIZED_LEN = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/type_serialization.nr"},"156":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot,\n    constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"},"157":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\n// Copied over from \"yarn-project/aztec-nr/aztec/src/utils.nr\"\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils.nr"},"158":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"163":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{\n        AppendOnlyTreeSnapshot,\n        APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n    },\n    constants::{\n        PARTIAL_STATE_REFERENCE_LENGTH,\n        STATE_REFERENCE_LENGTH,\n    },\n    partial_state_reference::PartialStateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/state_reference.nr"},"167":{"source":"use crate::{\n    address::EthAddress,\n    contract_class::ContractClassId,\n    constants::{\n        CONTRACT_DEPLOYMENT_DATA_LENGTH,\n        GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n    },\n    grumpkin_point::GrumpkinPoint,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"},"200":{"source":"use dep::aztec::context::PrivateContext;\nuse dep::aztec::protocol_types::{\n  abis::function_selector::FunctionSelector,\n  address::AztecAddress,\n  constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  hash::pedersen_hash,\n  traits::{Hash, Serialize}\n};\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: FunctionSelector,\n  target_address: AztecAddress,\n  is_public: bool,\n}\n\nimpl Serialize<FUNCTION_CALL_SIZE> for FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector.to_field(), self.target_address.to_field(), self.is_public as Field]\n  }\n}\n\nimpl FunctionCall {\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_field().to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_field().to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl Serialize<ENTRYPOINT_PAYLOAD_SIZE> for EntrypointPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl EntrypointPayload {\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if !call.target_address.is_zero() {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/authwit/src/entrypoint.nr"},"201":{"source":"#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/authwit/src/auth_witness.nr"},"202":{"source":"use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<Field, PublicState<bool>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/authwit/src/account.nr"},"220":{"source":"use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    hash::pedersen_hash,\n    oracle::{\n        nullifier_key::get_nullifier_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    protocol_types::{\n        address::AztecAddress,\n    }\n};\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 3;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct PublicKeyNote {\n    x: Field,\n    y: Field,\n    owner: AztecAddress, // We store the owner address only to get the secret key to compute the nullifier and to broadcast\n    header: NoteHeader,\n}\n\nimpl NoteInterface<PUBLIC_KEY_NOTE_LEN> for PublicKeyNote {\n    fn serialize_content(self) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n        [self.x, self.y, self.owner.to_field()]\n    }\n\n    fn deserialize_content(serialized_note: [Field; PUBLIC_KEY_NOTE_LEN]) -> PublicKeyNote {\n        PublicKeyNote {\n            x: serialized_note[0],\n            y: serialized_note[1],\n            owner: AztecAddress::from_field(serialized_note[2]),\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let unique_siloed_note_hash = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let unique_siloed_note_hash = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn compute_note_content_hash(note: PublicKeyNote) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(note.serialize_content(), 0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: Field, y: Field, owner: AztecAddress) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/schnorr_account_contract/src/public_key_note.nr"},"221":{"source":"mod public_key_note;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract SchnorrAccount {\n    use dep::std;\n    use dep::std::option::Option;\n\n    use dep::aztec::protocol_types::address::AztecAddress;\n\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        note::{ note_header::NoteHeader, utils as note_utils },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    use crate::public_key_note::{PublicKeyNote, PUBLIC_KEY_NOTE_LEN};\n\n    struct Storage {\n        // docs:start:storage\n        signing_public_key: ImmutableSingleton<PublicKeyNote>,\n        // docs:end:storage\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Constructs the contract\n    #[aztec(private)]\n    fn constructor(signing_pub_key_x: pub Field, signing_pub_key_y: pub Field) {\n        let this = context.this_address();\n        // docs:start:initialize\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialize(&mut pub_key_note, true);\n        // docs:end:initialize\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update default_entrypoint.ts file\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // docs:start:entrypoint\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        // docs:start:get_note\n        let public_key = storage.signing_public_key.get_note();\n        // docs:end:get_note\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify signature of the payload bytes\n        let verification = std::schnorr::verify_signature(\n            public_key.x,\n            public_key.y,\n            signature,\n            message_hash.to_be_bytes(32)\n        );\n        assert(verification == true);\n        // docs:end:entrypoint\n        true\n    }\n\n    // Computes notes hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; PUBLIC_KEY_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        assert(storage_slot == storage.signing_public_key.get_storage_slot());\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(\n            PublicKeyNote::deserialize_content,\n            note_header,\n            serialized_note\n        )\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/schnorr_account_contract/src/main.nr"}}}