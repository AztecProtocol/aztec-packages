{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","name":"SchnorrSingleKeyAccount","functions":[{"name":"set_is_valid_storage","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"},{"name":"value","type":{"kind":"boolean"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"message_hash":[{"start":34,"end":35}],"value":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},"bytecode":"","debug_symbols":"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8coT1pUnrCtPWFeesK48YUN5wobyhA3lCavsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51K2elUyk6nUnY6lbLTqZSdTqXsdCplp1MpO51a2enUyk6nVnY6tbLTqS/hCdvKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nVrZ6dTKTqdWdjq1stOplZ1Orex0amWnUys7nUbZ6TTKTqdRdjqNstNpLuEJO8pOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudRtnpNMpOp1F2Oo2y02mUnU6j7HQaZafTKDudVtnptMpOp1V2Oq2y02kv4Qm7yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MqO51W2em0yk6nVXY6rbLTaZWdTqvsdFplp9MKO53u7+lO2Pt7uhP2/p7uhL2/pzth7+/pTtj7e7oT9v6e7oS9v6c7Ye/v6U7Y+3vKE1bY6XQXrzxhhZ1Od/HKE1bY6XQXrzxhhZ1Od/HKE1bY6XQXrzxhhZ1O9+2VJ6yw0+m+vfKEFXY63bdXnrDCTqf79soTVtjpdN9eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4pUnrLDT6S5eecIKO53u4oUnrCk7nUzZ6WTKTidTdjrZJTxhTdnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKTudTNnpZMpOJ1N2Opmy08mUnU6m7HQyZaeTKzudXNnp5MpOJ1d2OvklPGFd2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp5MrO51c2enkyk4nV3Y6ubLTyZWdTq7sdHJlp1MoO51C2ekUyk6nUHY6xSU8YUPZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWnUyg7nULZ6RTKTqdQdjqFstMplJ1Ooex0CmWn01F2Oh1lp9NRdjodZafTuYQn7FF2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6HWWn01F2Oh1lp9NRdjodZafTUXY6pbLTKZWdTqnsdEplp1NewhM2lZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqlstMplZ1Oqex0SmWnUyo7nVLZ6ZTKTqdUdjqVstOplJ1Opex0KmWnU13CE7aUnU6l7HQqZadTKTudStnpVMpOp1J2OpWy06mUnU6l7HQqZadTKTudStnpVMpOp1J2OpWy06mUnU6l7HQqZadTKTudStnpVMpOp1J2OpWy06mUnU6l7HQqZadTKTudStnpVMpOp1J2OpWy06mUnU6l7HQqZadTKTudStnpVMpOp1J2OpWy06mUnU6l7HQqZadTKTudStnpVMpOp1J2OpWy06mUnU6l7HQqZadTKTudStnpVMpOp1J2OpWy06mUnU6l7HQqZadTfbTT6fEy+ZqXqde8TL/mZb7FJLA9z5eZ/MoH66uf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"},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243]},"bytecode":"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","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"entrypoint","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"payload","type":{"kind":"struct","path":"authwit::entrypoint::EntrypointPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]},"visibility":"public"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"payload":[{"start":36,"end":53}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729]},"bytecode":"","debug_symbols":"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/qni/Jc/1VyOz90YYusdwvR3iNPfIU1/hzz9Hcr0d6iz3+HDI5qS7+Cmv4Of/g7Tr+k0/ZpO06/pNP2aTtOv6TT9mk7Tr+k8/ZrO06/pPP2aztOv6Tz9ms7Tr+k8/ZrO06/pPP2aztOv6TL9mi7Tr+ky/Zou06/pMv2aLtOv6TL9mi7Tr+ky/Zou06/pOv2artOv6Tr9mq7Tr+k6/Zqu06/pOv2artOv6Tr9mq7Tr2m3bfPfws1/Cz//Lfb5bxHmv0Wc/xZp/lvk+W9R5r/F/Kvbzb+63fyr282/ut38q9vNv7rd/Kvbzb+63fyr282/ut38q9vPv7r9/Kvbz7+6/fyr28+/uv38q9vPv7r9/Kvbz7+6/fyre59/de/zr+59/tW9z7+69/lX9z7/6t7nX937/Kt7n3917/Ov7jD/6g7zr+4w/+oO86/uMP/qDvOv7jD/6g7zr+4w/+oO86/uOP/qjvOv7jj/6p7/9Jmb//iZm//8mZv/AJqb/wSam/8Impv/DJqb/xCam/8Umpv/GJqb/xyam/8gmpv/JJqb/yiam/8smpv/MJqb/zSam/84mpv/PJqb/0Cam/9Empv/SJqb/0yam/9Qmpv/VJqb/1iam/9cmpv/YJqb/2Sam/9ompv/bJqb/3Cam/90mpv/eJqb/3yam/+Ampv/hJqb/4iam/+Mmpv/kJqb/5Sam/+Ympv/nJqb/6Cam/+kmpv/qJqb/6yan/+smp//rJqf/6yan/+smt/C/LeI898izX+LPP8tyvy3mH91z39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39Wzc9/Vs3Pf1bNz39W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3OlUkTudKnKnU0XudKrInU4VudOpInc6VeROp4rc6VSRO50qcqdTRe50qsidThW506kidzpV5E6nitzpVJE7nSpyp1NF7nSqyJ1OFbnTqSJ3OlXkTqeK3OlUkTud3IZc6vSYHnjHPqYHXrKP6YG37GN64DX7mB54zz6mB160j+mBN+1jeuBV+5geetci1zs9pofetcgFT4/poXctcsXTY3roXYtc8vSYHnrXItc8PaaH3rXIRU+P6aF3LXLV02N66F2LXPb0mB561yLXPT2mh961yIVPj+mhdy1y5dNjeuhdi1z69Jgeetci1z49pofetcjFT4/poXctcvXTY3roXYtc/vSYHnrXItc/PaaH3rXIBVCP6aF3LXIF1GN66F2LXAL1mB561yLXQD2mh961yEVQj+mhdy1yFdRjeuhdi1wG9Zgeetci10E9pofetciFUI+3gN61yJVQj7eA3rXIpVCPt4Detci1UI+3gN61yMVQj7eA3rXI1VCP6aF3LXI51GN66F2LXA/1mB561yIXRD2mh961yBVRj+mhdy1ySdRjeuhdi1wT9ZgeetciF0U9pofetchVUY/poXctclnUY3roXYtcF/WYHnrXIhdGPaaH3rXIlVGP6aF3LXJp1GN66F2LXBv1mB551zro3igH3RvloHujHHRvlNuQd62D7o1y0L1RDro3ykH3Rjno3igH3RvloHujHHRvlIPujXLQvVEOujfKQfdGOejeKAfdG+Wge6McdG+Ug+6NctC9UQ66N8pB90Y56N4oB90b5aB7oxx0b5SD7o1y0L1RDro3ykH3Rjno3igH3RvloHujHHRvlIPujXLQvVEOujfKQfdGOejeKAfdG+Wge6McdG+Ug+6NctC9UQ66N8pB90Y56N4oB90b5aB7oxx0b5SD7o1y0L1RDro3ykH3Rjno3igH3RvloHujHHRvlIPujXLQvVEOujfKQfdGOejeKAfdG+Wge6McdG+Ug+6NctC9UQ66N8pB90Y56N4oB90b5aB7oxx0b5SD7o1y0L1RDro3ykH3Rjno3igH3RvloHujHHRvlIPujXLQvVEOujfKQfdGOejeKAfdG+Wge6McdG+Ug+6NctC9UQ66N8pB90Y56N4oB90b5aB7ozx0b5SH7o3y0L1RHro3ym/Iu9ZD90Z56N4oD90b5aF7ozx0b5SH7o3y0L1RHro3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p4rc6VSRO50qcqdTRe50qsidThW506kidzpV5E6nFbnTaUXudFqRO51W5E6n9QG8YVfkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe50WpE7nVbkTqcVudNpRe502pA7nTbkTqcNudNpQ+502h7AG3ZD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROpw2502lD7nTakDudNuROp/RALnV6Tg+8Y5/TAy/Z5/TAW/Y5PfCafU4PvGef0wMv2uf0wJv2OT3wqn1OD71rkeudntND71rkgqfn9NC7Frni6Tk99K5FLnl6Tg+9a5Frnp7TQ+9a5KKn5/TQuxa56uk5PfSuRS57ek4PvWuR656e00PvWuTC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clWR23qvkMvlqiI39l4hl8tVRW7tvUIul6uK3Nx7hVwuVxW5vfcKuVyuKnKD7xVyuVxV5BbfK+RyuarC5aoitzRfIDdyT/MVcrlcVeVyVZF7uK+Qm7nkcrmqyG3cV8jlclWRG7mvkMvlqiK3cl8hl8tVRW7mvkIul6uK3M59hVwuVxW5ofsKuVyuKnL79xVyuVxV6GbxC+RyuarQ7eIXyOVyVaEbxi+Qy+WqQreMXyCXy1WFbhq/QC6Vqyqh28YvkEvlqkroxvEL5FK5qvLIXHKpXFUJ3Wh+gVwqV1Uit6VfIZfLVXF1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71wtWtXri61QtXt3rh6lYvXN3qhatbvXB1qxeubvXC1a1euLrVC1e3euHqVi9c3eqFq1u9cHWrF65u9cLVrV64utULV7d64epWL1zd6oWrW71wdasXrm71ytWtXrm61StXt3rl6lavj8wll8pVVa5u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV65utUrV7d65epWr1zd6pWrW71ydatXrm71ytWtXrm61StXt3rl6lavXN3qlatbvXJ1q1eubvXK1a1eubrVK1e3euXqVq9c3eqVq1u9cnWrV65u9crVrV6HqaNep9eL1+nPr/wldpQ1ZBI7ytvUmstr5FyPxI7yJmUSO8pblEXsMDXFJrGjhD6TWMzI9yUA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"},{"name":"is_valid_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"message_hash":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237]},"bytecode":"","debug_symbols":""},{"name":"is_valid","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"message_hash":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451]},"bytecode":"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","debug_symbols":"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"}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/public.nr"},"54":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/private.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::{\n        function_selector::FunctionSelector,\n        private_call_stack_item::PrivateCallStackItem,\n    },\n    address::AztecAddress,\n    constants::PRIVATE_CALL_STACK_ITEM_LENGTH,\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"},"59":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"63":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"},"77":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/abi.nr"},"78":{"source":"mod private;\nmod public;\nmod avm;\n\nuse public::PublicContext;\nuse private::PrivateContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context.nr"},"90":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"},"93":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"104":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext {\n            public_key: self.public_key,\n            secret_key: self.secret_key,\n            contract_address,\n        }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"105":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        GENERATOR_INDEX__GLOBAL_VARIABLES,\n        GLOBAL_VARIABLES_LENGTH,\n    },\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/global_variables.nr"},"106":{"source":"use crate::{\n    abis::{\n        function_data::FunctionData,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    },\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__CALL_STACK_ITEM,\n        PRIVATE_CALL_STACK_ITEM_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x2442dd521c59987a4291be0fd11198e5a4d87c8bc36cf3b65c5229f61fc37b30);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"},"108":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        side_effect::{\n            SideEffect,\n            SideEffectLinkedToNoteHash,\n        },\n    },\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n        GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    },\n    contrakt::deployment_data::ContractDeploymentData,\n    header::Header,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    meta_hwm: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_commitments == other.new_commitments) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.meta_hwm as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            meta_hwm: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"110":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"111":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"112":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::AztecAddress,\n    constants::{\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n        PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::pedersen_hash,\n    header::Header,\n    traits::{\n        Hash,\n        Serialize,\n        Deserialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"115":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs,\n        };\n        call_stack_item\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"118":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"121":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"123":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot {\n            root : serialized[0],\n            next_available_leaf_index : serialized[1] as u32\n        }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            root: 0,\n            next_available_leaf_index: 0,\n        }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"},"131":{"source":"use crate::{\n    abis::{\n        append_only_tree_snapshot::{\n            AppendOnlyTreeSnapshot,\n            APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n        },\n        global_variables::{\n            GlobalVariables,\n            GLOBAL_VARIABLES_LENGTH,\n        },\n    },\n    constants::{\n        GENERATOR_INDEX__BLOCK_HASH,\n        HEADER_LENGTH,\n        NUM_FIELDS_PER_SHA256,\n        STATE_REFERENCE_LENGTH,\n    },\n    hash::pedersen_hash,\n    state_reference::StateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    body_hash: [Field; NUM_FIELDS_PER_SHA256],\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        (self.body_hash == other.body_hash) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.body_hash);\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let body_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n        offset = offset + NUM_FIELDS_PER_SHA256;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            body_hash,\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            body_hash: [0; NUM_FIELDS_PER_SHA256],\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/header.nr"},"134":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"147":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"151":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"155":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\nglobal AZTEC_ADDRESS_SERIALIZED_LEN = 1;\nglobal ETH_ADDRESS_SERIALIZED_LEN = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/type_serialization.nr"},"156":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot,\n    constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"},"157":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\n// Copied over from \"yarn-project/aztec-nr/aztec/src/utils.nr\"\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils.nr"},"158":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"163":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{\n        AppendOnlyTreeSnapshot,\n        APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n    },\n    constants::{\n        PARTIAL_STATE_REFERENCE_LENGTH,\n        STATE_REFERENCE_LENGTH,\n    },\n    partial_state_reference::PartialStateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/state_reference.nr"},"167":{"source":"use crate::{\n    address::EthAddress,\n    contract_class::ContractClassId,\n    constants::{\n        CONTRACT_DEPLOYMENT_DATA_LENGTH,\n        GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n    },\n    grumpkin_point::GrumpkinPoint,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"},"200":{"source":"use dep::aztec::context::PrivateContext;\nuse dep::aztec::protocol_types::{\n  abis::function_selector::FunctionSelector,\n  address::AztecAddress,\n  constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  hash::pedersen_hash,\n  traits::{Hash, Serialize}\n};\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: FunctionSelector,\n  target_address: AztecAddress,\n  is_public: bool,\n}\n\nimpl Serialize<FUNCTION_CALL_SIZE> for FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector.to_field(), self.target_address.to_field(), self.is_public as Field]\n  }\n}\n\nimpl FunctionCall {\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_field().to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_field().to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl Serialize<ENTRYPOINT_PAYLOAD_SIZE> for EntrypointPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl EntrypointPayload {\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if !call.target_address.is_zero() {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/authwit/src/entrypoint.nr"},"201":{"source":"#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/authwit/src/auth_witness.nr"},"202":{"source":"use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<Field, PublicState<bool>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/authwit/src/account.nr"},"223":{"source":"use dep::aztec::protocol_types::address::{AztecAddress, PublicKeysHash};\nuse dep::std::{schnorr::verify_signature};\nuse crate::auth_oracle::{AuthWitness};\n\npub fn recover_address(message_hash: Field, witness: AuthWitness) -> AztecAddress {\n    let message_bytes = message_hash.to_be_bytes(32);\n    let verification = verify_signature(\n        witness.owner.x,\n        witness.owner.y,\n        witness.signature,\n        message_bytes\n    );\n    assert(verification == true);\n\n    AztecAddress::compute(\n        PublicKeysHash::compute(witness.owner),\n        witness.partial_address\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/schnorr_single_key_account_contract/src/util.nr"},"224":{"source":"use dep::authwit::auth_witness;\nuse dep::aztec::protocol_types::{\n    address::PartialAddress,\n    grumpkin_point::GrumpkinPoint,\n};\n\nstruct AuthWitness {\n    owner: GrumpkinPoint,\n    signature: [u8; 64],\n    partial_address: PartialAddress,\n}\n\nimpl AuthWitness {\n    fn deserialize(values: [Field; 67]) -> Self {\n        let mut signature = [0; 64];\n        for i in 0..64 {\n            signature[i] = values[i + 2] as u8;\n        }\n        Self {\n            owner: GrumpkinPoint::new(values[0], values[1]),\n            signature,\n            partial_address: PartialAddress::from_field(values[66]),\n        }\n    }\n}\n\nunconstrained pub fn get_auth_witness(message_hash: Field) -> AuthWitness {\n    let witness: [Field; 67] = auth_witness::get_auth_witness(message_hash);\n    AuthWitness::deserialize(witness)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/schnorr_single_key_account_contract/src/auth_oracle.nr"},"225":{"source":"mod util;\nmod auth_oracle;\n\ncontract SchnorrSingleKeyAccount {\n    use dep::std::{\n        option::Option,\n    };\n    use dep::aztec::context::{ PrivateContext, PublicContext, Context };\n\n    use dep::authwit::{\n        entrypoint::EntrypointPayload,\n        account::AccountActions,\n    };\n\n    use crate::{ util::recover_address, auth_oracle::get_auth_witness };\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    // Note: If you globally change the entrypoint signature don't forget to update default_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        let witness = get_auth_witness(message_hash);\n        assert(recover_address(message_hash, witness).eq(context.this_address()));\n        true\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/schnorr_single_key_account_contract/src/main.nr"}}}