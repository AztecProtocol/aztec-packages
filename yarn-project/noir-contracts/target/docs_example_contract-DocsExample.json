{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","name":"DocsExample","functions":[{"name":"update_legendary_card","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"points":[{"start":37,"end":38}],"randomness":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380]},"bytecode":"","debug_symbols":"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"},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"serialized_note":[{"start":3,"end":6}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[6,7,8,9]},"bytecode":"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","debug_symbols":""},{"name":"simple_macro_example","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"a":[{"start":36,"end":37}],"b":[{"start":37,"end":38}],"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248]},"bytecode":"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","debug_symbols":"1c7LCsIwEIXhd5l1Fp7cJpNXERdBKxRKKia7kHdXoVXE7gTB1TDwcfgbTfMx1XHOhWIjgOK+Ubmk/HhLTddKcadoyKf77YrO4zRQhJiuPhyEeaEQkadm3sDaBL1gbc0Lw4WtaVhv1204Hd78QRH035ab35U7+LXcsf+uvPcb"},{"name":"initialize_stable","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"points":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237]},"bytecode":"","debug_symbols":""},{"name":"get_leader","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::leader::Leader","fields":[{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[0,1]},"bytecode":"H4sIAAAAAAAA/81VzU7DMAx2knbr0g3OXCAXOGcVNy7lFXiDohbEZZW6TYKXRzQQi69ZhJCWISxVdhz/fklcQUSSvkjRN0k6JDF+d16eg96MX+1lewzd2ip3QTKK0sx/jjTYSdCJbNrLecRuDvJ7qtqtXS9pihXnUqlxGnMJmpIBWSEegZ2GfcQtvAMOZwv7ecRnFsnHcg66DGKGvohTDr3UXrbH0SdOmMvAmvOVUMfsD+rB621gnf+T3Py2E74N62IW6XuqXE8LODsD9XM+BTZXnp95znq2I/AvAZcF7BXp8Vm7uPpE+JQBPly/hr7Z5ibAh/Vsh7iWgEsJ+Giwq9P0YUVQSwG5NXAd1OPWPJdxJq0ivjzblqDjnleQF2d6wjtQubg8f0zCuDiDmX76f5x6Brpz4/PZ7vqhee4euqYVUBqXK4NyBU1LlwEPZRXROcJfUAY6fvp4VWQAC14LHDUhpEnntvQJOJGiOGGjgg4BdHTp+YXn98PQvJmXTdu9mn6/M/2Teez3m3aLTte/daIP+engY1MKAAA=","debug_symbols":"zdbNaoNQEAXgd5m1lDs/989XKV1Im0IgmFLdyX33NkQlEAlEEnN2CnOcbzEcHOhw/Gz6/bHtqB7IvQWq3wfqfpr29N71zW9PdeIYKtq1X6fHHEtF3/vDjmrOWqqraeag4zRztnk6u4VhjTLOGus8GrR8VP+aCKVJUJoMpWGHxWEsjmBxFItjWByPxcGqZMbqZMYqZcZqZcFqZcFqZXluK5936AY7bIMdfoMdj2g6cTbtEAm3z8MkTeehlx+ePBHMk8A8GcujDszDYB4B8+jWHps9fsljYB4P5glgngjmSWCejOUx9zpP0AUPg3kEzLN4zxLiGFJnV//Ulu/PeLciwysysiKj92VK+QM="},{"name":"increase_legendary_points","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426]},"bytecode":"","debug_symbols":""},{"name":"update_leader","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"account":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}],"points":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},"bytecode":"","debug_symbols":"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NzKHG5nDjczhRuZwI3O4kTncyBxuZA43MocbmcOtSwZx95GlHzH9iOtHQj+S+pHSj2z9SOtH9O4vvftL7/7Su7/07i+9+0vv/tK7v/TuL737S+++6d03vfumd9/07pvefdO7b3r3Te++6d03vfuud9/17rvefde773r3Xe++6913vfuud9/17ofe/dC7H3r3Q+9+6N0Pvfuhdz/07ofe/dC7n3r3U+9+6t1Pvfupdz/17qfe/dS7n3r3U+9+6d0vvfuld7/07pfe/dK7X3r3S+9+6d0vvftb7/7Wu7/17m+9+1vv/ta7v/Xub737W+/+1rvfevdb737r3W+9+613v/Xut9791rvfevdb7/7o3R+9+6N3f/Tuj9790bs/evdH7/7o3ddZ39JZ39JZ39JZ39JZ3/23Xv1I6kdKP7L1I60f0buvs76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76ls76lsz7TWZ/prM901mc66zOd9ZnO+kxnfaazPtNZn+msz3TWZzrrM531mc76TGd9prM+01mf6azPdNZnOusznfWZzvpMZ32msz7TWZ/prM901mc66zOd9ZnO+kxnfaazPtNZn+msz3TWZzrrM531mc76TGd9prM+01mf6azPdNZnOusznfWZzvpMZ32msz7TWZ/prM901mc66zOd9ZnO+kxnfaazPtNZn+msz3TWZzrrM531mc76TGd9prM+01mf6azPdNZnOusznfWZzvpMZ32msz7TWZ/prM901mc66zOd9ZnO+kxnfaazPtNZn+msz3TWZzrrM531mc76TGd9prM+01mf6azPdNZnOusznfWZzvpMZ32msz7TWZ/prM901mc663Od9bnO+lxnfa6zPtdZn+usz3XW5zrrc531uc76XGd9rrM+11mf66zPddbnOutznfW5zvpcZ32usz7XWZ/rrM911uc663Od9bnO+lxnfa6zPtdZn+usz3XW5zrrc531uc76XGd9rrM+11mf66zPddbnOutznfW5zvpcZ32usz7XWZ/rrM911uc663Od9bnO+lxnfa6zPtdZn+usz3XW5zrrc531uc76XGd9rrM+11mf66zPddbnOutznfW5zvpcZ32usz7XWZ/rrM911uc663Od9bnO+lxnfa6zPtdZn+usz3XW5zrrc531uc76XGd9rrM+11mf66zPddbnOutznfW5zvpcZ32usz7XWZ/rrM911uc663Od9bnO+lxnfa6zvtBZX+isL3TWFzrrC531hc76Qmd9obO+0Flf6KwvdNYXOusLnfWFzvpCZ32hs77QWV/orC901hc66wud9YXO+kJnfaGzvtBZX+isL3TWFzrrC531hc76Qmd9obO+0Flf6KwvdNYXOusLnfWFzvpCZ32hs77QWV/orC901hc66wud9YXO+kJnfaGzvtBZX+isL3TWFzrrC531hc76Qmd9obO+0Flf6KwvdNYXOusLnfWFzvpCZ32hs77QWV/orC901hc66wud9YXO+kJnfaGzvtBZX+isL3TWFzrrC531hc76Qmd9obO+0Flf6KwvdNYXOusLnfWFzvpCZ32hs77QWV/orC901hc66wud9YXO+kJnfaGzvtBZX+isL3TWFzrrS531pc76Umd9qbO+1Flf6qwvddaXOutLnfWlzvpSZ32ps77UWV/qrC911pc660ud9aXO+lJnfamzvtRZX+qsL3XWlzrrS531pc76Umd9qbO+1Flf6qwvddaXOutLnfWlzvpSZ32ps77UWV/qrC911pc660ud9aXO+lJnfamzvtRZX+qsL3XWlzrrS531pc76Umd9qbO+1Flf6qwvddaXOutLnfWlzvpSZ32ps77UWV/qrC911pc660ud9aXO+lJnfamzvtRZX+qsL3XWlzrrS531pc76Umd9qbO+1Flf6qwvddaXOutLnfWlzvpSZ32ps77UWV/qrC911pc660ud9aXO+lJnfamzvtRZX+qsL3XWlzrrS531pc76Umd9qbO+0llf6ayvdNZXOusrnfWVzvpKZ32ls77SWV/prK901lc66yud9ZXO+kpnfaWzvtJZX+msr3TWVzrrK531lc76Smd9pbO+0llf6ayvdNZXOusrnfWVzvpKZ32ls77SWV/prK901lc66yud9ZXO+kpnfaWzvtJZX+msr3TWVzrrK531lc76Smd9pbO+0llf6ayvdNZXOusrnfWVzvpKZ32ls77SWV/prK901lc66yud9ZXO+kpnfaWzvtJZX+msr3TWVzrrK531lc76Smd9pbO+0llf6ayvdNZXOusrnfWVzvpKZ32ls77SWV/prK901lc66yud9ZXO+kpnfaWzvtJZX+msr3TWVzrrK531lc76Smd9pbO+0llf6ayvdNZXOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOuvbOutrnfW1zvpaZ32ts77WWV/rrK911tc662ud9bXO+lpnfa2zvtZZX+usr3XW1zrra531tc76Wmd9rbO+1llf66yvddbXOutrnfW1zvpaZ32ts77WWV/rrK911tc662ud9bXO+lpnfa2zvtZZX+usr3XW1zrra531tc76Wmd9rbO+1llf66yvddbXOutrnfW1zvpaZ32ts77WWV/rrK911tc662ud9bXO+lpnfa2zvtZZX+usr3XW1zrra531tc76Wmd9rbO+1llf66yvddbXOutrnfW1wvp++Q+fqzVvnyyfX332er8+nr0+n72+nr1+f+f6vOLtk2n5/tndn3z0BpRvH7Xr41pf74U0pZCBFKLQ2WcLWY8U8rrdHr3dH709Hr39W8mS0a/by775G6AohWxKIU0pZCCFzEUpZFEKMUohTikkKIVQknUoyTqUZB1Ksg4kWeeCJOtckGSdC5Ksc0GSdS5Iss4FSda5IMk6FyRZ54Ik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"},{"name":"simple_macro_example_expanded","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"a":[{"start":36,"end":37}],"b":[{"start":37,"end":38}],"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248]},"bytecode":"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","debug_symbols":"1c/NCsIwDMDxd8m5lzRN0/RVxEPRCYPRie2t9N39wE3E3QTBWwI/Qv4NpvmQ6jjnArEBIsRdg3JO+b6Wmi4VIiJSMDDk42Nm7AZO4zTcNqVuPr2KLFxVVy2ygS0F+8TW0Qsjh63T6LxbX2Eb3vzeANq/L6DfFzD6pYDFf1fQ+xU="},{"name":"get_stable","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::leader::Leader","fields":[{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[0,1]},"bytecode":"H4sIAAAAAAAA/81VzU7DMAx2knbr0g3OXCAXOGcVEgcu5RV4g6IWxGWVuk2Cl0csEIuvWYSQlqFZquw4/v2SuIKIJH2Toh+StE9i9917eQp6s/tqL9tD6NZWuQuSUZQm/nOkwU6CTmTjXs4jdlOQP1LVbu3dnMZYcS6VGidrl4LGZEBWiEdgp2EfcQvvgMPZwn4e8ZlE8rGcgy6DmKEv4pRDL7WX7WH0hRPmMrDmfCXUMfmHevB6G1jnJ5Kb33bCt2FdzCJ9T5XraQZnZ6B+zqfA5srzM89Zz3YE/iXgMoO9Ij0+SxdXHwmfMsCH69fQN9vcBPiwnu0Q1xJwKQEfDXZ1mj6sCGopILcGroN63JrnMs6kRcSXZ9scdNzzAvLiTE94ByoXl+ePSRgXZzDTb/+PY89Ad258PutNPzQv3WPXtAJK43JlUK6gceky4KGsIjpH+AvKQMdPH6+KDGDBa4GjJoQ06dyWPgEnUhQnbFTQPoCOLj2/8PxhGJp387pquzfTbzemfzZP/XbVrtHp+q9O9Al7vp5WUwoAAA==","debug_symbols":"zdbJaoNQFAbgdzlrKfcMd/JVShfSphAIplR34rvXUM1AJBBJzL+7whm+xeHHjnb7z6rd7uuGyo7cW6DyvaPmp6oP301b/bZUeie5oE39dXgG7Qv63u42VHIe3lfVHLyO1RySHauznynWKGOt8WnwsOOjGDQRSpOgNBlKww6Lw1gcweIoFsewOB6LgxXJjJXJjBXKjJXKgpXKgpXK8txU/t+hK+ywFXb4FXY8JOmyTTsih9vnYZKm89B4NtiNngjmSWCejOVRB+ZhMI+AeXRtjx09fs5jYB4P5glgngjmSWCejOUx9zrPxeDJw2AeAfPM3rOEODaps6t/asv393i3oIcX9MiCHr2vp+//AA=="},{"name":"insert_note","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":36,"end":37}],"inputs":[{"start":0,"end":36}],"randomness":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259]},"bytecode":"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","debug_symbols":"7ZbbagJBDIbfZa5FJpkcJr5K6YX0AIViS/VO9t2r1sxsdXDpCrZKr5aFP9kv/2aSWYfXt4f56uVtsQyzdQAMs7t1WL7PF9vX5Wr+sQqzOAlPi8fNs5uE55fXpzADS93kSAemupeCmRW1akOMKeNejJSqGDi3UgMJeW5gzN/095MA6WrJ6XLkDOLkrHI2ObfIBdSjBKMN8SNl/0bKXNRGDXEWtyVbpaFmqaDJS8WIVdyq1Mg9NLXTUqCSFxgqL2QbZaHciIUQyRNDtDggHrRF/21p2ZIvbAtE5QJE2Ddmi2O/iqMHOBgvjQNccYbaRnNhV4upiJl27HDF7HhpdsQiRk0Dx5WhHFfub+vmwGb0Qllrfwns6ky3U6eyXwQ0536dx1Kh0inCvfUIicbMMKQbcjE5dI5y2kWw6HcMjKxnu8i342IGcxfJDs+c/O06ydFRUQbqTOLniDaDsyROX5t92lymWj6gUtevh0AcEdPcNGRuKEtttn2v4bS96ZP53YYoHv44nLb38VAQjAnCMUHpx0EybU8vKrdH6q/S5EE8JqjZ+ZzLLNb6b4W7+677BA=="},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243]},"bytecode":"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","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"get_legendary_card","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"","debug_symbols":""},{"name":"match_stable","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"account":[{"start":36,"end":37}],"inputs":[{"start":0,"end":36}],"points":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005]},"bytecode":"","debug_symbols":""},{"name":"insert_notes","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"amounts","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"param_witnesses":{"amounts":[{"start":36,"end":46}],"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367]},"bytecode":"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","debug_symbols":"7Zzbbhs3EED/ZZ8NgzOc4cW/UvTBaFMgQOAUtd8M/3tJ1bvr2swKM1qIF+1TEIRHmZ0cSyc2wNfpx88/Hl++/3x6nh5eJ4Tp4bfX6fnvx6f82+eXx39epgdzN317+jP9+nY3/fX9x7fpAaJ9u/tyDqL370chxric9r5wGG3A98NIdj0MHEovDeRofm1gDP87//vdhNjt5PZ6kzO4eXL27uLJqTQ5Rw7vFMc88/b8SPNpsIGX05EKh4Ob1xLiOg0VHxW8nR8VDa6HS08aad5h9HH7KNDyusCwzgshqlbIxwovXaEbZIVgaH5hMNGcOXx2Lf5YS2kt4cprAeN5GYjw42LyOLHqOP7TONZcexzgdZxz2viwzO6jWedgOs0OHc+O154dcTmM3p75cmVYvlz5Y/AU37AZ5wdlv/rl4PScdpzn9Dy3lA/h43N+PepoMcXxh49HsKR5D7M00Bbt/KjBuO0tQjRzY6Bhf/EWeZwtBojzFil+/ppzbT8nzaOjR3fmOa2bv44ovXEuL2xPzzlK8NRLaRuOZiytJTbVjGSaakbquLsIO559oJbaakaioxkvb0YaqHbqNSM13lJ7NSP522hGGiV46jUjxaMZC2th01QzMjTVjNxxd7HteHa6jWbkkWqnWjPyQLVTrxm58Zbaqxk53EYz8ijBU68ZnTmasbQWaKoZHTbVjK7j7nLU8ewDtdRWM7qRaqdaM7qBaqdeM7rGW2qvZnTxNprRjxI89ZrRw9GMpbVgU83obVPN6Knf7vLc8ewDtdRWM/qRaqdaM/qBaqdeM/rGW2qvZgzmNpoxjBI89Zox4NGMpbXYppoxUFPNGDruruA6nn2gltpqxjBS7VRrxjBQ7dRrxth4S+3VjBFuoxnjKMFTrxmjPZqxtBZqqhkjN9WMsePuir7j2Qdqqa1mjCPVTrVmBDNQ7tSLRjCN19Re1Qim8WsZ9spGMKNET71uTLl1hGNxL9xUOYJxTaVj+tN++wtM6Hn4gapqqx4BRuqeevkIA3VPxXyEgS672sxHaPyGht3yEejIx0vzEUa5CXTnfATXVj6CbysfoecCg9jx8DhQVW3mI47UPfXyEQfqnor5iAPde7WZj1e/Xr1WPh6XoF+ej8ct6L/Yi28rHyvfP/4lH7HnAuv5unKwA1XVZj6OdLl5xXwc6u70evk40uXpm/nY+v3me+UjhvviZ5hf/gLv1o/hGSn/SOQMU3zHpjgLx27V7f3maLwvf4vDxjlyiMynf7kElb+1cA4CDYQayIohd1/+7wwtGUkfP0/tDLEGKrdwWN6O/fpv6/i/G77FDiVE7FBmxA6RVTiUILlDGQINhBpI7BB5hUMZYg0kdoiN2KGEiB3KjNghJoVDCZI7lCHQQKiBxA5xUDiUIdZAYocciB1KiNihzIgdcqxwKEFyhzIEGgg1kNghFxUOZYg1kNghj2KHEiJ2KDNih7xTOJQguUMZAg2EGkjsUDAKhzLEGkjsULBihxIidigzYoeCVziUILlDGQINhBpI7FAEhUMZYg0kdiiS2KGEiB3KjNihGBQOJUjuUIZAA6EGEjsEBhUSnShWUWKNwLDYo8yIRTpBYpPSzygUKmVK7tKJAhWFKkquE1iNTpliFSXXCZxcp8TIdcqQXCc0Gp0SpdApU6CiUEXJdULS6JQpVlFyndDLdUqMXKcMyXWyoNEpUQqdMgUqClWUXCfLGp0yxSpKqNPb278="},{"name":"get_imm_card","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"","debug_symbols":""},{"name":"initialize_immutable_singleton","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"points":[{"start":37,"end":38}],"randomness":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261]},"bytecode":"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","debug_symbols":"3ZbJbgIxDIbfJWeE4i22eZWqB9RFqlTRqnBD8+7dSDKlEVGnFQVOCOm357PjbRsen26Wm4en1TostgEwLK62Yf28XL3/XW+WL5uwiLNwt7p9+x1m4f7h8S4swGmYfdOBq+6k4O5FrdoQIxnuxMhUxSDWcg2cOPsGQfuiv54FoLMl5+ORC6RMLpp+TS4tcqEoOyshsQ4/arSMpKxF7aklBsyuESMeFvfx03nj61/gixZ87+Abaq57o1gLU/gDx04Lx/8Ax+rjOlIHJ+WWNa+OudmGoNSqA251oXNOiasflgIXvyAgNTrzKQWG8UJSCJGzY4geO+JuWuDIaYGoUoAYx4l5x8F/xdF9HDo2DkjF6ZWNWmFXj7Q3M5DPmF2OzY6YxYBKnXYVKO0q45OpOZmkrEnRWl8JPuJMlxOnSr7G1Gwc53dp4lIpSUZ7AIgnzTC9oCxSDtViOpxF8Fjuiyj66yza5WTRwHMW2fd7zk87TvZyNGLqxEkpQ/Pb4CyO6XOzz5uRavmAprp+swnECTbNG4I9l5ukms9drcm8fdKS59uGOe4/nMzbR1zPCKYY4RQj+rGRz9t7msv1yONVStlIphi1t42VWaz1bZMM18PwCg=="},{"name":"initialize_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"points":[{"start":37,"end":38}],"randomness":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261]},"bytecode":"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","debug_symbols":"3ZbNTisxDIXfJeuqiv9iu69yxaK6lyshoYJod9W8OwUmyVCiRgyo0K6qSseZz85x7H24f/i73t09bLZhtQ+AYfVnH7aP683L3+1u/bQLq7gIt5t/h99hEf7f3d+GFTgNiw86cNVRCu5e1KoNMZLhKEamKgax1tHAifPZIGjv9DeLAHSx5Hw+coGUyUXTl8mlRS7JfYwSFe/wUzQb1QSoRe3Q5I+V3+i0uI+fLhtfvwEfSAu+dvANNfveKFZjCr/i2O/C8e/AqZeLzB2clFvWvN4VN9sQlLIPMGIVt7rQOZfE1U9Lgcu5ICA1O/M5BsN4JSWEyPlgiB474m5Z4MxlgahSgBinhXnBwR/F0WMcOjcOSMXp2UatsKtHOnozkC+YXc7NjpjFh8FHnXYVKO0q05Wp+TIJSoGu/krwmme6njxV8jqgZtM8P0oTF6ckmcwBIJ71hukVVZFyqhbT6SqCxzxMMYp+uYp2PVU0yNDGftxz/rvz5Mxx2AhTJ09KuY9YKgXT22RfNjPV8gFNdfzmEIgzYpo7BHu2m6RqttFrsmyvtOR5t2GOxxcny/YS1wuCOUE4J4g+HeTL9pzmsj3ydJRSDpI5Qe1pY+Ut1nq3SYabYXgG"},{"name":"view_imm_card","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"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","debug_symbols":""},{"name":"read_note","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"comparator","type":{"kind":"integer","sign":"unsigned","width":3},"visibility":"private"}],"param_witnesses":{"amount":[{"start":0,"end":1}],"comparator":[{"start":1,"end":2}]},"return_type":{"abi_type":{"kind":"array","length":10,"type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]}}]}},"visibility":"public"},"return_witnesses":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81]},"bytecode":"","debug_symbols":""},{"name":"is_imm_initialized","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"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","debug_symbols":""},{"name":"is_legendary_initialized","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"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","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"18":{"source":"global PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\npub fn decompose(x: Field) -> (Field, Field) {\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n","path":"std/field/bn254.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"27":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [u8; N], _state_length: u32) -> [u8; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n","path":"std/hash.nr"},"29":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/log.nr"},"46":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        GET_NOTE_ORACLE_RETURN_LENGTH,\n        GET_NOTES_ORACLE_RETURN_LENGTH,\n        MAX_NOTES_PER_PAGE,\n        VIEW_NOTE_ORACLE_RETURN_LENGTH,\n    },\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u3; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"},"47":{"source":"use crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(context: &mut PublicContext, storage_slot: Field, note: &mut Note) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"},"48":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n    },\n    hash::pedersen_hash,\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/utils.nr"},"49":{"source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::Empty;\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/note/note_header.nr"},"52":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/public.nr"},"54":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/private.nr"},"58":{"source":"use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u3; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u2,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u3; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u3; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"},"59":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"60":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"},"61":{"source":"use dep::protocol_types::{\n    address::{\n        AztecAddress,\n        PartialAddress,\n        PublicKeysHash,\n    },\n    grumpkin_point::GrumpkinPoint,\n};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"},"63":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"},"65":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::NUM_FIELDS_PER_SHA256,\n    grumpkin_point::GrumpkinPoint,\n};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: AztecAddress, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"},"69":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT,\n    hash::pedersen_hash,\n    traits::{Hash, Serialize}\n};\nuse crate::utils::arr_copy_slice;\n\nglobal LEAF_PREIMAGE_LENGTH: Field = 4;\n// TODO: move this to constants_gen.nr so that it gets computed as INDEX_LENGTH + LEAF_DATA_LENGTH + PUBLIC_DATA_TREE_HEIGHT\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\n// TODO(#3470) replace with /mnt/user-data/jan/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/abis/public_data_tree_leaf.nr\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_index : u32,\n    next_slot :Field,\n}\n\nimpl Serialize<LEAF_PREIMAGE_LENGTH> for PublicDataTreeLeafPreimage {\n    fn serialize(self) -> [Field; LEAF_PREIMAGE_LENGTH] {\n        [self.slot, self.value, self.next_index as Field, self.next_slot]\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        // Performs the same hashing as StandardIndexedTree::encodeLeaf(...)\n        pedersen_hash(self.serialize(), 0)\n    }\n}\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(_block_number: u32, _leaf_slot: Field) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"70":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"77":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/abi.nr"},"78":{"source":"mod private;\nmod public;\nmod avm;\n\nuse public::PublicContext;\nuse private::PrivateContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context.nr"},"80":{"source":"pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/utils.nr"},"83":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    header::Header,\n    hash::pedersen_hash,\n        address::{\n        AztecAddress\n    },\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{\n    context::PrivateContext,\n    oracle::get_public_data_witness::{\n        get_public_data_witness,\n    },\n    utils::{\n        full_field_less_than,\n    },\n};\n\nfn _public_value_inclusion(\n    value: Field,\n    storage_slot: Field,\n    contract_address: AztecAddress,\n    header: Header\n) {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 3) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 4) Check that the witness matches the corresponding public_value\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    if is_in_range {\n        assert_eq(value, 0, \"Non-existant public data leaf value is non-zero\");\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot don't match witness\");\n        assert_eq(preimage.value, value, \"Public value does not match the witness\");\n    }\n\n    // 5) Prove that the leaf we validated is in the public data tree\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and that way verified that a specific\n    // `value` was really set in a given contract storage slot at block `block_number` in public data tree.\n}\n\npub fn prove_public_value_inclusion(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    context: PrivateContext\n) {\n    _public_value_inclusion(\n        value,\n        storage_slot,\n        contract_address,\n        context.historical_header\n    );\n}\n\npub fn prove_public_value_inclusion_at(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32, // The block at which we'll prove that the note exists\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _public_value_inclusion(value, storage_slot, contract_address, header);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/history/public_value_inclusion.nr"},"90":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"},"91":{"source":"use dep::std::option::Option;\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    },\n    hash::pedersen_hash,\n};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    nullifier_key::get_nullifier_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Singleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Singleton<T> {}\n\nimpl<Note> Singleton<Note> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            context: context.private,\n            storage_slot,\n        }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, Singleton>` type (for example), because the storage slot often also identifies an actor. e.g. \n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy. \n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash([self.storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(\n        self,\n        note: &mut Note,\n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/singleton.nr"},"93":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"94":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Set<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Set<T> {}\n\nimpl<Note> Set<Note> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"},"95":{"source":"use crate::context::{Context};\nuse crate::oracle::{\n    storage::{storage_read, storage_write},\n};\nuse crate::history::public_value_inclusion::prove_public_value_inclusion;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\nstruct StablePublicState<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for StablePublicState<T> {}\n\nimpl<T> StablePublicState<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            context,\n            storage_slot,\n        }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state wrties only supported in public functions\");\n        // TODO: Must throw if the storage slot is not empty -> cannot allow overwriting\n        // This is currently impractical, as public functions are never marked `is_contract_deployment`\n        // in the `call_context`, only private functions will have this flag set.\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i,\n                (*private_context).this_address(),\n                (*private_context),\n            )\n        }\n        T::deserialize(fields)\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/stable_public_state.nr"},"96":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    },\n    hash::pedersen_hash,\n};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for ImmutableSingleton<T> {}\n\nimpl<Note> ImmutableSingleton<Note> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            context: context.private,\n            storage_slot,\n        }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, ImmutableSingleton>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash([self.storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(\n        self,\n        note: &mut Note, \n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note  where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"},"111":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"112":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::AztecAddress,\n    constants::{\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n        PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::pedersen_hash,\n    header::Header,\n    traits::{\n        Hash,\n        Serialize,\n        Deserialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"115":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs,\n        };\n        call_stack_item\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"118":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"121":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"134":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"147":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"151":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"158":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"165":{"source":"use crate::{\n    constants::{\n        CONTRACT_STORAGE_READ_LENGTH,\n        GENERATOR_INDEX__PUBLIC_DATA_READ,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Empty,\n        Serialize,\n    },\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"189":{"source":"use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    oracle::{\n        nullifier_key::get_nullifier_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n    protocol_types::{\n        address::AztecAddress,\n        traits::Empty\n    }\n};\n\n// Shows how to create a custom note\n\nglobal CARD_NOTE_LEN: Field = 3;\n\n// docs:start:state_vars-CardNote\nstruct CardNote {\n    points: u8,\n    randomness: Field,\n    owner: AztecAddress,\n    header: NoteHeader,\n}\n// docs:end:state_vars-CardNote\n\nimpl CardNote {\n    pub fn new(points: u8, randomness: Field, owner: AztecAddress) -> Self {\n        CardNote {\n            points,\n            randomness,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n}\n\nimpl NoteInterface<CARD_NOTE_LEN> for CardNote {\n    fn serialize_content(self) -> [Field; CARD_NOTE_LEN] {\n        [self.points as Field, self.randomness, self.owner.to_field()]\n    }\n\n    fn deserialize_content(serialized_note: [Field; CARD_NOTE_LEN]) -> Self {\n        CardNote {\n            points: serialized_note[0] as u8,\n            randomness: serialized_note[1],\n            owner: AztecAddress::from_field(serialized_note[2]),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: CardNote) -> NoteHeader {\n        note.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/docs_example_contract/src/types/card_note.nr"},"190":{"source":"use dep::aztec::protocol_types::{\n    address::AztecAddress,\n    traits::{Serialize, Deserialize}\n};\n\n// Shows how to create a custom struct in Public\nstruct Leader {\n    account: AztecAddress,\n    points: u8,\n}\n\nglobal LEADER_SERIALIZED_LEN: Field = 2;\n\nimpl Deserialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn deserialize(fields: [Field; LEADER_SERIALIZED_LEN]) -> Self {\n        Leader { account: AztecAddress::from_field(fields[0]), points: fields[1] as u8 }\n    }\n}\n\nimpl Serialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn serialize(self) -> [Field; LEADER_SERIALIZED_LEN] {\n        [self.account.to_field(), self.points as Field]\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/docs_example_contract/src/types/leader.nr"},"193":{"source":"mod options;\nmod types;\n\n// Following is a very simple game to show case use of singleton in as minimalistic way as possible\n// It also serves as an e2e test that you can read and then replace the singleton in the same call\n// (tests ordering in the circuit)\n\n// you have a card (singleton). Anyone can create a bigger card. Whoever is bigger will be the leader.\n// it also has dummy methods and other examples used for documentation e.g. \n// how to create custom notes, a custom struct for public state, a custom note that may be unencrypted\n// also has `options.nr` which shows various ways of using `NoteGetterOptions` to query notes\n// it also shows what our macros do behind the scenes!\n\ncontract DocsExample {\n    // how to import dependencies defined in your workspace\n    use dep::aztec::protocol_types::{\n        abis::function_selector::FunctionSelector,\n        address::AztecAddress,\n    };\n    use dep::aztec::{\n        note::{\n            note_header::NoteHeader,\n            note_getter_options::{NoteGetterOptions, Comparator},\n            note_viewer_options::{NoteViewerOptions},\n            utils as note_utils,\n        },\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{map::Map, public_state::PublicState,singleton::Singleton, immutable_singleton::ImmutableSingleton, set::Set, stable_public_state::StablePublicState},\n    };\n    // how to import methods from other files/folders within your workspace\n    use crate::options::create_account_card_getter_options;\n    use crate::types::{\n        card_note::{CardNote, CARD_NOTE_LEN},\n        leader::Leader,\n    };\n\n    struct Storage {\n        // Shows how to create a custom struct in PublicState\n        // docs:start:storage-leader-declaration\n        leader: PublicState<Leader>,\n        // docs:end:storage-leader-declaration\n        // docs:start:storage-singleton-declaration\n        legendary_card: Singleton<CardNote>,\n        // docs:end:storage-singleton-declaration\n        // just used for docs example to show how to create a singleton map. \n        // docs:start:storage-map-singleton-declaration\n        profiles: Map<AztecAddress, Singleton<CardNote>>,\n        // docs:end:storage-map-singleton-declaration\n        // docs:start:storage-set-declaration\n        set: Set<CardNote>,\n        // docs:end:storage-set-declaration\n        // docs:start:storage-immutable-singleton-declaration\n        imm_singleton: ImmutableSingleton<CardNote>,\n        // docs:end:storage-immutable-singleton-declaration\n        // docs:start:storage-stable-declaration\n        stable_value: StablePublicState<Leader>,\n        // docs:end:storage-stable-declaration\n        // docs:start:storage-minters-declaration\n        minters: Map<AztecAddress, PublicState<bool>>, \n        // docs:end:storage-minters-declaration\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                // docs:start:storage-leader-init\n                leader: PublicState::new(\n                    context,\n                    1\n                ),\n                // docs:end:storage-leader-init\n                // docs:start:start_vars_singleton\n                legendary_card: Singleton::new(context, 3),\n                // docs:end:start_vars_singleton\n                // just used for docs example (not for game play):\n                // docs:start:state_vars-MapSingleton\n                profiles: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        Singleton::new(context, slot)\n                    },\n                ),\n                // docs:end:state_vars-MapSingleton\n                // docs:start:storage-set-init\n                set: Set::new(context, 5),\n                // docs:end:storage-set-init\n                imm_singleton: ImmutableSingleton::new(context, 6),\n                // docs:start:storage-stable-init\n                stable_value: StablePublicState::new(context, 7),\n                // docs:end:storage-stable-init\n                // docs:start:storage-minters-init\n                minters: Map::new(\n                    context,\n                    8,\n                    |context, slot| {\n                        PublicState::new(context, slot)\n                    },\n                ),\n                // docs:end:storage-minters-init\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn initialize_stable(points: u8) {\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.stable_value.initialize(new_leader);\n    }\n\n    #[aztec(private)]\n    fn match_stable(account: AztecAddress, points: u8) {\n        let expected = Leader { account, points };\n        let read = storage.stable_value.read_private();\n\n        assert(read.account == expected.account, \"Invalid account\");\n        assert(read.points == expected.points, \"Invalid points\");\n    }\n\n    unconstrained fn get_stable() -> pub Leader {\n        storage.stable_value.read_public()\n    }\n\n    // docs:start:initialize-immutable-singleton\n    #[aztec(private)]\n    fn initialize_immutable_singleton(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.imm_singleton.initialize(&mut new_card, true);\n    }\n    // docs:end:initialize-immutable-singleton\n\n    #[aztec(private)]\n    // msg_sender() is 0 at deploy time. So created another function\n    fn initialize_private(randomness: Field, points: u8) {\n        let mut legendary_card = CardNote::new(points, randomness, context.msg_sender());\n        // create and broadcast note\n        storage.legendary_card.initialize(&mut legendary_card, true);\n    }\n\n    #[aztec(private)]\n    fn insert_notes(amounts: [u8; 10]) {\n        for i in 0..amounts.len() {\n            let mut note = CardNote::new(amounts[i], 1, context.msg_sender());\n            storage.set.insert(&mut note, true);\n        }\n    }\n\n    #[aztec(private)]\n    fn insert_note(amount: u8, randomness: Field) {\n        let mut note = CardNote::new(amount, randomness, context.msg_sender());\n        storage.set.insert(&mut note, true);\n    }\n\n    // docs:start:state_vars-NoteGetterOptionsComparatorExampleNoir\n    unconstrained fn read_note(amount: Field, comparator: u3) -> pub [Option<CardNote>; 10] {\n        let options = NoteViewerOptions::new().select(0, amount, Option::some(comparator));\n        let notes = storage.set.view_notes(options);\n\n        notes\n    }\n    // docs:end:state_vars-NoteGetterOptionsComparatorExampleNoir\n\n    #[aztec(private)]\n    fn update_legendary_card(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.legendary_card.replace(&mut new_card, true);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(private)]\n    fn increase_legendary_points() {\n        // Ensure `points` > current value\n        // Also serves as a e2e test that you can `get_note()` and then `replace()`\n\n        // docs:start:state_vars-SingletonGet\n        let card = storage.legendary_card.get_note(false);\n        // docs:end:state_vars-SingletonGet\n\n        let points = card.points + 1;\n\n        let mut new_card = CardNote::new(points, card.randomness, context.msg_sender());\n        // docs:start:state_vars-SingletonReplace\n        storage.legendary_card.replace(&mut new_card, true);\n        // docs:end:state_vars-SingletonReplace\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn update_leader(account: AztecAddress, points: u8) {\n        let new_leader = Leader { account, points };\n        storage.leader.write(new_leader);\n    }\n\n    unconstrained fn get_leader() -> pub Leader {\n        storage.leader.read()\n    }\n\n    unconstrained fn get_legendary_card() -> pub CardNote {\n        storage.legendary_card.view_note()\n    }\n\n    // docs:start:singleton_is_initialized\n    unconstrained fn is_legendary_initialized() -> pub bool {\n        storage.legendary_card.is_initialized()\n    }\n    // docs:end:singleton_is_initialized\n\n    // docs:start:get_note-immutable-singleton\n    unconstrained fn get_imm_card() -> pub CardNote {\n        storage.imm_singleton.get_note()\n    }\n    // docs:end:get_note-immutable-singleton\n\n    unconstrained fn view_imm_card() -> pub CardNote {\n        storage.imm_singleton.view_note()\n    }\n\n    unconstrained fn is_imm_initialized() -> pub bool {\n        storage.imm_singleton.is_initialized()\n    }\n\n    // TODO: remove this placeholder once https://github.com/AztecProtocol/aztec-packages/issues/2918 is implemented\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; CARD_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(CardNote::deserialize_content, note_header, serialized_note)\n    }\n\n    /// Macro equivalence section\n    use dep::aztec::abi;\n    use dep::aztec::abi::Hasher;\n    use dep::aztec::abi::PrivateContextInputs;\n    use dep::aztec::abi::PrivateCircuitPublicInputs;\n\n    // docs:start:simple_macro_example\n    #[aztec(private)]\n    fn simple_macro_example(a: Field, b: Field) -> Field {\n        a + b\n    }\n    // docs:end:simple_macro_example\n\n    // docs:start:simple_macro_example_expanded\n    fn simple_macro_example_expanded(\n        // ************************************************************\n        // The private context inputs are made available to the circuit by the kernel\n        // docs:start:context-example-inputs\n        inputs: PrivateContextInputs,\n        // docs:end:context-example-inputs\n        // ************************************************************\n\n        // Our original inputs!\n        a: Field,\n        b: Field // The actual return type of our circuit is the PrivateCircuitPublicInputs struct, this will be the \n        // input to our kernel! \n        // docs:start:context-example-return\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        // docs:end:context-example-return\n        // ************************************************************\n        // The hasher is a structure used to generate a hash of the circuits inputs. \n        // docs:start:context-example-hasher\n        let mut hasher = Hasher::new();\n        hasher.add(a);\n        hasher.add(b);\n        // docs:end:context-example-hasher\n\n        // The context object is created with the inputs and the hash of the inputs\n        // docs:start:context-example-context\n        let mut context = PrivateContext::new(inputs, hasher.hash());\n        // docs:end:context-example-context\n\n        // docs:start:storage-example-context\n        let mut storage = Storage::init(Context::private(&mut context));\n        // docs:end:storage-example-context\n        // ************************************************************\n\n        // Our actual program\n        let result = a + b;\n\n        // ************************************************************\n        // Return values are pushed into the context\n        // docs:start:context-example-context-return\n        context.return_values.push(result);\n        // docs:end:context-example-context-return\n\n        // The context is returned to be consumed by the kernel circuit!\n        // docs:start:context-example-finish\n        context.finish()\n        // docs:end:context-example-finish\n        // ************************************************************\n    }\n    // docs:end:simple_macro_example_expanded\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/docs_example_contract/src/main.nr"}}}