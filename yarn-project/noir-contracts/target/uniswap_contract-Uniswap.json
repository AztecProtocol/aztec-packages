{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","name":"Uniswap","functions":[{"name":"_approve_bridge_and_exit_input_asset_to_L1","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":36,"end":37}],"inputs":[{"start":0,"end":34}],"token":[{"start":34,"end":35}],"token_bridge":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239]},"bytecode":"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","debug_symbols":""},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243]},"bytecode":"H4sIAAAAAAAA/+XdZ3NUZRjG8YQWURERsZcoobfd7G6yS++99w4JSejF3hURe8PeFRF7w94VsVewFyzYe+ULeF3DymT2Lc+bZ/5n5prlDMPO/pZk95yn3Pf2oqKirUU7jmKlgdJQKa133ij/5//PGxecNyk4Lyn4900LzpsVnDcvOG9RcN6y4LxV/rz+UZx/7Jt/TCUq0unayvLaZCpZlSjPVWcziXSmuiKbzCYz2UxNeTaVqs2ms5W56lxlIpdMp2qTdZlcqi6x4yir91yJXTzqv84GBa8zsWtHMqS5TSTm4oDmtpGYGwQ0t4vE3DCguX0k5kYBzR0iMTcOaO4YiblJQHOnSMwlAc2dIzGXBTR3AZq7As3dgOYE0JwEmsuB5hTQnAaaM0BzBdBcCTRngeYc0NwdaO4BNPcEmnsBzb2B5j5Ac1+guR/Q3B9oHgA0DwSaBwHNg4HmIUDzUKB5GNA8HGgeATSPBJpHAc2jgeYxQPNYoHkc0DweaJ4ANE8EmicBzZOB5ilA81SgeRrQPB1ongE0zwSaZwHNs4HmOUDzXKC5CmiuBprnAc01QHMt0FwHNM8HmhcAzQuB5kVA82KgeQnQvBRoXgY0LweaVwDNRwHNRwPNxwDNxwLNxwHNxwPNJwDNJwLNJwHNJwPNpwDNpwLNpwHNpwPNZwDNK4HmM4HmVUDzWUDzaqD5bKD5HKD5XKD5PKD5fKD5AqD5QqD5IqD5YqD5EqD5UqB5DdB8GdB8OdB8BdB8JdB8FdB8NdB8DdB8LdB8HdB8PdB8A9B8I9B8E9B8M9B8C9C8Fmi+FWheBzTfBjSvB5pvB5rvAJrvBJrvAprvBprvAZrvBZrvA5rvB5ofAJofBJo3AM0PAc0PA82PAM2PAs2PAc2PA81PAM1PAs1PAc1PA83PAM3PAs3PAc3PA80vAM0bgeYXgeZNQPNLQPPLQPMrQPOrQPNrQPPrQPMbQPObQPNbQPPbQPM7QPO7QPNmoHlLJOaSgOb3gP/P7wPNHwDNHwLNHwHNHwPNn0Ri3i2g+dNIzE0Dmj+LxLx7QPPnkZj3CGjeGol5z4DmLyIxNwto/jIS814BzV9FYm4e0Px1JOa9A5q3RWJuEdD8TSTmfQKav43E3DKg+btIzPsGNH8fiblVQPMPkZj3C2j+MRLz/gHNP0ViPiCg+edIzAcGNP8SifmggOZfIzEfHND8WyTmQwKaf4/EfGhA8x+RmA8LaP4zEvPhAc1/RWIuDWj+OxLzEQHN/0RiPjKg+d9IzK0DmrcHNBfrORrmn6usnr84/x747xopjZUmitdLeB7K8zKep/C4vcexPa7rcU6P+3kczONCHifxuIHvo31f6fss33f4OtzXpb5O83WLv8f9vebPeX/ulSr+vfDPSet6r2lz/rGN0lZpp7RXOigdlU5KZ6WL0lXp5vdHSSrlft+VtJJRKpRKJavklO5KD6Wn0kvprfTJv8/9lP7KAGWgMkgZrAxRhirDlOHKCGWkMkoZrYxRxirjlPHKBGWiMkmZrExRpirTlOnKDGWmMkuZrcxR5ipVSrUyT6lRapU6Zb6yQFmoLFIWK0uUpcoyZbmyQnFfePdJd99w99F2X2n3WXbfYffhdV9a92l131L38XRfS/d5dN/DlYr74q1S3DdtteK+Wu4z5b5L7kPkvjzuU+O+Le5j4r4e7nPhvg9rFPcFcJ181413HXXXFXedbdeddh1m1yV2nV7XrXUdV9c1dZ1P171cq7gu4jrFdfPWK66r5jpjrrvlOlSuy+Q6Ra7b4zo2ruviOieu+7FBcV0I10lw3QDvo/e+cu+z9r5j78P1vlTv0/S+Re/j87427/PyvqeNivfFbFK8b8L7CLyu3uvMve7a65C9LtfrVL1u0+sYva7P69z887pF8bogr5PxuhGvo/C6As+ze97Z87Cel/Q8neetPI/jeQ2P83vce5vicVGPE3rczONIHlfxOIPvu30f6vsy36f4ut3Xsb6u83WOv/f9PejvBX9O+nNj5/Ef8ujUx6nKAAA=","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"serialized_note":[],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[3,4,5,6]},"bytecode":"H4sIAAAAAAAA/+2W2w7CIAyGC2MHmIl3ertHmIfEW9//oYygVH6ru7JcmKwJEQr8fO26SUdEhp7WxObo03j+mn/n3+ygqDXX5DR/wmkVOc0XTgN1wTXSxtbFdsz+HvZNWjzn+ZLO4cMbercQm+WBKz5eZ8DH/NYV3laf99TnvKjqxmecNPeQa1eJXT0nUbmnUh+Kuo9aHbJWl7X5nBZy5bkeSPfbMICugXPY30B/R8U89C1wJhup1I9f2OPEng3Md1/inpTjlu96LxhdjiPZNuXBFX9FtnMQbMmMGE/Q98AzVMhVpTjnpBuy1o10/6NGyI98rhuYD7BmrJA7fJ9Ym8fIuPKuvMjgBWuA+QF8VsSC9wZcL78fqgHxgXixMQCXbOni9bI7IvTp/cILAAA=","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"_assert_token_is_same","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"token":[{"start":34,"end":35}],"token_bridge":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},"bytecode":"","debug_symbols":"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Vu7hVu7hVu7hVu7hziUXcfeSoy8xfYnrS0JfkvqS0pe0vmT0JfrpH/30j376Rz/9o5/+0U//6Kd/9NM/+ukf/fSPfvqmn77pp2/66Zt++qafvumnb/rpm376pp++6afv+um7fvqun77rp+/66bt++q6fvuun7/rpu376oZ9+6Kcf+umHfvqhn37opx/66Yd++qGffuinn/rpp376qZ9+6qef+umnfvqpn37qp5/66ad++qWffumnX/rpl376pZ9+6adf+umXfvqln37pp9/66bd++q2ffuun3/rpt376rZ9+66ff+um3fvqjn/7opz/66Y9++qOf/uinP/rpj376o5/+6Ke/+umvfvqrn/7qp7/66a9++quf/uqnv/rp613f0bu+o3d9R+/6jt713V/16ktSX1L6ktaXjL5EP3296zt613f0ru/oXd/Ru76jd31H7/qO3vUdves7etd39K7v6F3f0bu+o3d9R+/6jt71Hb3rO3rXd/Su7+hd39G7vqN3fUfv+o7e9R296zt613f0ru/oXd/Ru76jd31H7/qO3vUdves7etd39K7v6F3f0bu+o3d9R+/6jt71Hb3rO3rXd/Su7+hd39G7vqN3fUfv+o7e9R296zt613f0ru/oXd/Ru76jd31H7/qO3vUdves7etd39K7v6F3f0bu+o3d9R+/6jt71Hb3rO3rXd/Su7+hd39G7vqN3fUfv+o7e9R296zt613f0ru/oXd/Ru76jd31H7/qO3vUdves7etd39K7v6F3f0bu+o3d9R+/6jt71Hb3rO3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rXZ3rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rX53rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXF3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXl3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rXV3rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rX13rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN3rXN0rX94e/eF3O+fbKOvX+2uPxvn0+u309u30/u/38pu2v+PbKtHx/bc8HL72/s/32Uru+b+vnfZCFDKL0qM8OciiD2CODvO3uj+4ej+6ej+7+25Il5m33st94AzRlkKEMspBB6qIMciiDGGUQpwwSlEGSMgglWYuSrEVJ1qIka1OStSnJ2pRkbUqyNiVZm5KsTUnWpiRrU5K1Kck6lGQdSrIOJVmHkqxDSdahJOtQknUoyTqUZB1Ksi4lWZeSrEtJ1qUk61KSdSnJupRkXUqyLiVZF5Kse0GSdS9Isu4FSda9IMm6FyRZ94Ik616QZN0Lkqx7QZJ1L0qyHkqyHkqyHkqyHkqyHkqyHkqyHkqyHkqyHkqyHkqyGiVZjZKsRklWoySrUZLVKMlqlGQ1SrIaJVmNkqxOSVanJKtTktUpyeqUZHVKsjolWZ2SrE5JVqcka1CSNSjJGpRkDUqyBiVZg5KsQUnWoCRrUJI1KMmalGRNSrImJVmTkqxJSdakJCvFYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3FYC3EYN0fYyTr/TFGst4fYyTr/TFGst4fYyTr/TFGst4fYyTr/TFGst4fYyTr/TFKskIM1j0IJVkhBusehJKsEIN1D0JJVojBugehJCvEYN2DUJIVYrDuQSjJCjFY9yCUZIUYrHsQSrJCDNY9CCVZIQbrHoSSrBCDdQ9CSVaIwboHoSQrxGDdg1CSFWKw7kEoyQoxWPcglGSFGKx7EEqyQgzWPQglWSEG6x6EkqwQg3UPQklWiMG6B6EkK8Rg3YNQkhVisO5BKMkKMVj3IJRkhRisexBKskIM1j0IJVkhBusehJKsEIN1D0JJVojBugehJCvEYN2DUJIVYrDuQSjJCjFY9yCUZIUYrHsQSrJCDNY9CCVZIQbrHoSSrBCDdQ9CSVaIwboHoSQrxGDdg1CSFWKw7kEoyQoxWPcglGSFGKx7EEqyQgzWPQglWSEG6x6EkqwQg3UPQklWiMG6B6EkK8Rg3YNAkvVQDNahGKxDMViHYrDOBUnWQzFYh2KwDsVgHYrBOhSDdSgG61AM1qEYrEMxWIdisA7FYB2KwToUg3UoButQDNahGKxDMViHYrAOxWAdisE6FIN1KAbrUAzWoRisQzFYh2KwDsVgHYrBOhSDdSgG61AM1qEYrEMxWIdisA7FYB2KwToUg3UoButQDNahGKxDMViHYrAOxWAdisE6FIN1KAbrUAzWoRisQzFYh2KwDsVgHYrBOhSDdSgG61AM1qEYrEMxWIdisA7FYB2KwToUg3UoButQDNahGKxDMViHYrAOxWAdisE6FIN1KAbrUAzWoRisQzFYh2KwDsVgHYrBOhSDdSgG61AM1qEYrEMxWIdisA7FYB2KwToUg3UoButQDNahGKxDMViHYrAOxWAdisE6FIN1KAbrUAyWUQyWUQyWUQyWUQyWXZBkNYrBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBMorBcorBcorBcorBcorB8guSrE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWE4xWEExWEExWEExWEExWHFBkjUoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBisoBispBispBispBispBisvSLImxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAlxWAVxWAVxWAVxWAVxWDVBUnWohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisohisphisphisphisphisviDJ2hSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSD1RSDNRSDNRSDNRSDNRSDNRckWYdisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisIZisJZisJZisJZisJZisPaCJOtSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNZSDNYqButtyehLVl6iCKS3Jb8pAf721vbc1v7c1vHc1vn7b/2Xr6trv72yrN5fu/4+RSGmaMQUg5hiH7rl/PptcuZvb32e29qe29qf2zqe2zqf27qe2/prnvF9e7fuE9+frut9ikFMsYQpzoWY4rnkOM8lx3kuOc5zyaGYibclpS9pfcnoS1ZeYpe+5OhLTF/y4d10Lq/6tuz+8+aHS+P1pfn60np9aX++NM5nt/nxiLeX+55fvdo/evWZfHv1me9fdR0772MNc6xFjvXxb13/+LEOcyxjjuXMsYI5VjLHKuZYzJR3Zso7M+WDmfLBTPlgpnwwUz6YKR/MlA9mygcz5YOZ8sFM+WSmfDJTPpkpn8yUT2bKJzPlk5ny9SMCwuz91eb94ViHOdaPuOWtr/ex+nw4VjLHKuZYzRxrmGMtcqy+mGP9iNxyt/dXt//ZWB+9+vLvr44PL8L+K1yE4y+i3yfpX73bxL5fQvz8l5A//yXUz38J/fNfwtAvwa63Nwe7zoeXsD/9Jcz1818C/h3680vAvz9/fgn4ULXz9qucZteHl4AP1U8vYfGPs7//gr7vx5fwQx7nv/7V51++euPtxZv50Veqaz//JfjPfwnx9CW8faL8qk9UX/WJ+qs+0e/0ReB1vn+i+uQ2m+s9r+aq73mV9j7VAqc614Wc6iCnMuRUjpwqkFMlcqpCTtXIqYjZfi5kth9kth9kth9kth9kth9kth9kth9kth9kth9kth9kthsy2w2Z7YbMdkNmuyGz3ZDZbshsN2S2GzLbDZntjsx2R2a7I7PdkdnuyGx3ZLY7Mtsdme2OzHZHZnsgsz2Q2R7IbA9ktgcy2wOZ7YHM9kBmeyCzPZDZnshsT2S2JzLbE5nticz2RGZ7IrM9kdmeyGxPZLYXMtsLme2FzPZCZnshs72Q2V7IbC9kthcy2wuZ7Y3M9kZmeyOzvZHZ3shsb2S2NzLbG5ntjcz2Rmb7ILN9kNk+yGwfZLYPMtsHme2DzPZBZvsgs32Q2b7IbF9kti8y2xeZ7YvM9kVm+yKzfZHZjnSpB+lSDelSDelSDelSDelS7SJmuyFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiFdqiNdqiNdqiNdqiNdql/EbHekS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkS3WkSw2kSw2kSw2kSw2kS42LmO2BdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmBdKmJdKmJdKmJdKmJdKl5EbM9kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41kS41f4xLPfvJVI2capBTLXGqH+NSO96mOjsfTXWQUxlyKkdOFcipEjlVIadq5FSDnGqBU9VFzPa6iNleFzHb6yJme13EbK+LmO11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"},{"name":"nonce_for_burn_approval","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/81UwU7DMAx1kqbtOgRnDiBL3FGK+IDxC/xBUQviskrdJsHPIxaItbcs4rIM7UmRHceJnRc7RESKfmFoB0X7uA+yAhtvxyLo7hg8utb6QwpKotwOG/QG/HSwXYFNQZ6y/pUrT+ceLuiQowq443yx2vgNGHQDfMR+DaxrsOlor+f1DtZtYk+ZiCc6vkkBZ8Z7kScLd1kE3R2HH54wFsNc4s0hj/If8sFSZpjbM4ktfZyxN5w/sz7RnWbwdgz5SzwDPrdBXgYpdvEj2D8HXsSvAR1rXEd+Ne33fkYu24p2dcoZz8VeFfz1z5y6V2bhDTxW63Hq3obnoesVpFZEaaJUiWtosKFuEjYP/KoKsEmJpEoAv7m4pGo6pDRrLxhKI0UG2m6CvA7yaZq6T35f9sMHj5s1j6/8Mm6W/Yq+AfdQRTsWCAAA","debug_symbols":"zZTLCsIwFET/5a6L3EeaNP0VcVF8gCBVbHcl/+6zdaEILVpml8BM5izC6ehwXFft/lg3VHbEi5zKZUfNqapv96atzi2VwsE0o229uZ8Dp4x2+8OWSs3zlL3nxVsfl+iGdOQPYQv9005siHpLq+zK48F4AhhPAcYTwXiE0YAEDUjRgAwNyKEBoVla0DQtaJ4WNFELmqkVzdT6b1M/VnSWFZtlxc2y8hv7Kbs+ruq/fxTh+EJiHcJyffrB5AGZAiBTAcgU8ZiMAZkEkOmjC9SHZ8vYvXnd/IROmNApJnTi+I7jcZ2ULg=="},{"name":"is_valid_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"message_hash":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237]},"bytecode":"","debug_symbols":""},{"name":"swap_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_amount","type":{"kind":"field"},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_transfer_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"deadline_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"canceller_for_L1_to_L2_message","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_swap_approval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":45,"end":46}],"canceller_for_L1_to_L2_message":[{"start":44,"end":45}],"deadline_for_L1_to_l2_message":[{"start":43,"end":44}],"input_amount":[{"start":36,"end":37}],"input_asset_bridge":[{"start":35,"end":36}],"inputs":[{"start":0,"end":34}],"minimum_output_amount":[{"start":40,"end":41}],"nonce_for_swap_approval":[{"start":46,"end":47}],"nonce_for_transfer_approval":[{"start":38,"end":39}],"output_asset_bridge":[{"start":37,"end":38}],"recipient":[{"start":41,"end":42}],"secret_hash_for_L1_to_l2_message":[{"start":42,"end":43}],"sender":[{"start":34,"end":35}],"uniswap_fee_tier":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249]},"bytecode":"","debug_symbols":""},{"name":"swap_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"input_asset","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_amount","type":{"kind":"field"},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_unshield_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"deadline_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"canceller_for_L1_to_L2_message","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":47,"end":48}],"canceller_for_L1_to_L2_message":[{"start":46,"end":47}],"deadline_for_L1_to_l2_message":[{"start":45,"end":46}],"input_amount":[{"start":38,"end":39}],"input_asset":[{"start":36,"end":37}],"input_asset_bridge":[{"start":37,"end":38}],"inputs":[{"start":0,"end":36}],"minimum_output_amount":[{"start":42,"end":43}],"nonce_for_unshield_approval":[{"start":40,"end":41}],"output_asset_bridge":[{"start":39,"end":40}],"secret_hash_for_L1_to_l2_message":[{"start":44,"end":45}],"secret_hash_for_redeeming_minted_notes":[{"start":43,"end":44}],"uniswap_fee_tier":[{"start":41,"end":42}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990]},"bytecode":"H4sIAAAAAAAA/+1dB3wcxfXek1xlgem9nMAFY2zfnmRJxriAwRR3G5uOLcsyGIwNxobQIZVeQu+9914ChB5CDR1C7yUJhEBCEv6B/4z0nvTd09xJOr2Rb7nd3+/d25kt871v52bezr6dPbJHEDzWLWhcEkZKjJQaSUK6G61zurtI9xDpnuL43iK9gkj3FemVRXpVkV6d0rgkSI8lXZmqrqpqqEk3hJVhXSo9Ym7t8FTV8LnVtWFtOLx2+Lx0bWVlQ21Vbc2IuSNqUiPCqsqGcP7wEZXzU7TAuVKdXCy2XoC5n5EfjPQnPYD0QNKbkB5EelPSg0lvRnoI6aGkh5FOFbi2+EO6ZshLGBH8PnlJO3iR9aUYeal08FJZpHwgL1VBU3vN7R+3kbjItjHVuSXsp3eulC+M/QPd9puX4UFT/2WXnpCf1CqvKlVp+9eA+mR5LXtCnmKZqZ5Uj1TPa65DD+CpzGIXdvWFvATY2M0DlgTYyOfmNJdnfRW+vvvX1e+75ZK9lu3XsGjpgVgJeGfMc/0BSxzb8JgSIKa7OHcZbOdtvcTxjctY0qnOLWHgAKZ17qpAzzMbrocrVQqE46LdGiUC/RZTsw7Up8J5DXVzG3xyUOWJA22cPQP9nsPqFWm92kiNkVojI4xsbmSkkS2MjDIy2sgYwrClka2MjAtavB4/vU6Yxl5H/iewMeKNNo9bzwTk8bElkMcNWCnl2V5hDbBHvbWvSlX1hHLVzptKNfQMWq6B4nmb7xKZnySU0x246s2cB7rtUy84bwLK4fxSWF89aFl6w3oJ4LRLH7JF7ofr3cQx5bC9h8PupLLd8v/UU2C0+Mpo3Xor3QjwioCtlz62hjKwnxfZ+SdhvRfg8VA/Q8vH2nSuhkUHLGtY1jB12dyFC+rHL1tUv3TB4kXj6hYuxAaPwa8owEsvaEUgmhd0e9Flw326O/JwKQsy/1Ccxxc2wy2l9V6Qx+XiH8Gb91UatPb1g0C/d6sJCtoTCXkFudia9DZBy4XsDttd97ucZyvHj2Ib6wQc/2OQ211PZDlPmQNHX0eet4rDxlqS3hFllCqXhZUnTzc+TW58uHXnz9V8S7BN4KdSa98Gado83nGuuan6ecPDudXzasKGuuG19fUjKsMwXVddVz03XTu/Ye7wsHZ4rTlnfV261hSXrqsPG1J11Q04gISLduMzPtB1l3jZNmhpELo78MvraRf+b/SE/X5QtDUQZUksfR04vd7b+7iY23o473aB3p/El93b6V8jJ1aNhnE7D+d9t9RPg6vVYTFOzbq0faBXhzT5YwfA4qsgDrvCk6wN/NSBQBdnGrnYgfSEIPYk5dLsSVqS/gfGT3AUqu1ZYmXK94/aML9p2SHQ+9NPCPxUcm3PUtPmiXCusLYyna6ptPvVzjNjuPPq07Xp9Ly5VWbIuK4+3TCiKhwxvypdVVk/r36uOWddOD81v65+xPzaJlxd5VlODHQbVF4mBbFn2SYYHxdzkofzTg4K27O0dk/Wv0ZePMsJhFX7vFMC3T+y/WNOCVri2rrCMxoR+Ok0lOtFhmc0lfS0IPaM5NLsGVmS0DOaFvj3jLAyddYzmhro/VGnBX4qubZnpGnz9CB6ntH0QLdB5WVGEHtGbYLxcTFneDjvjkFhe0bW7h31r5EXz2gaYdU+78xA949s/5gzg671jDYP/HQayvUiwzOaRXqnIPaM5NLsGVmS0DPaKfDvGWFl6qxnNCvQ+6PuFPip5NqekabNOwfR84x2DnQbVF52CWLPqE0wPi7mLh7Ou2tQ2J6RtXtX/WvkxTPaibBqn3e3QPePbP+YuwVd6xmNDvx0Gkr1whmXtTvpPYLYM2pFGBtrSXoHjLdkJUWZ2p4RVqbOxmntHuj9UfcI/FRybc9I0+Y9Hecq9DitPQPdBpWX2UHsGbUJxsfFnO3hvHOCwvaMrN1z9K+RF89oD8Kqfd73IxKnNUfR5rpArw697yFOy+KrCLrOsxwT+KkDgS7OjDG3uaTrg9izlEuzZ2lJ+p8oQ9uTxMrT2TG2uYHen7w+8FOptT1JTZvnBdEbY5sX6DagvNg3lWNPsg0wPi5mg4fzzg8K25O0ds/Xv0ZePMl6wqp93r0C3T+y/WPuFXTtGNvYwE+noVwvMjyhvUkvCGJPSC7NnpAlybcnNDbQ84T2DvT+mAsCP5Va2xPStHmfIHqe0D6BbgPKy75B7Am1CcbHxdzXw3kXBoXtCVm7F+pfIy+e0ALCqn3e/QLdP7L9Y+4XdK0ntGXgp9NQrhcZntAi0ouD2BOSS7MnZEny7Qlh5emsJ7Qo0PtjLg78VGptT0jT5v2D6HlC+we6DSgvBwSxJ9QmGB8X8wAP510SFLYnZO1eon+NvHhCiwmr9nkPDHT/yPaPeWDQtZ7QVoGfTkOpXjjjrpaSXhbEnlArwthYSxLGXVmykqJMbc8IK1Nn466WBnp/1GWBn0qu7Rlp2nyQ41yFHnd1UKDboPJycBB7Rm2C8XExD/Zw3p8Fhe0ZWbt/pn+NvHhGywir9nk/jEjclWZdOiTQq0Mfeoi7svgqgsxFuwNLKPJZHfipQ9r/920UbE7Pb0iHw6sqc12bzvKpOK97GBWHqqcif4cq/0+srfacySBz0eZA89sT44Jo/CfrI4JzQURwdtXQcmfrZ0LR5pFFaPMWXVQfO2vzYQo4+ZsvFpud2p6n0bfntjd6E0hPI70TaTvCczjZZI97Gmz8AfQo0nsEub9i1pN0VVDcX3OLdaxjHetYZ2r71dsjgpb+pvmbU7T9cNJHkF7FyJGwfzJoWX6A4/iru5sUCY/2a6FHOXg5qkjsz8XL0UHrr6jKzwpp31MonivlC2MiAhgHRADjJooY8SHIMYH3r9EOz/VdwKh/jbab42u03X6qX6Pt5tjmOs9P/mu0Rwd6d+LH6OHqsq/R9gv8jHJo1YGa2spU5dzaET45ODrompGeVOeWUHHUPVUDOH9O+hekf0n6V6R/Tfo3pI8lfRzp40mfQPpE0ieRPpn0KUGmN3WqkdOM/NbI6ZR3Bu0zltJnGjnLyNlGzjFyrpHzjJxv5AIjFxq5yMjFRi4xcqmRy4xcbuQKI1caucrI1UauMXKtkeuMXG/kBiM3GrnJyM1GbjFyq5HbjNxu5A4jdxq5y8jdRu4xcq+R+4z8zsj9Rh4w8qCR3xt5yMjDRh4x8qiRx4w8buQJI38w8qSRPxp5KmgaKXvGyLNGnjPyvJE/GXnByItGXjLysuDrFSOvGnnNyOu0LUnb3jDyZyNvGnnLyNtBU8jTu0beM/K+kQ+MfGjkIyMfG/nEyKdGPjPyuZEvjPzFyF+N/M3Il0a+MvJ3I18b+YeRb4x8a+SfRv5l5Dsj/yYsXPn/Y+S/Rr438n9BUxC69a4bY8TMjgkjJUZKjXQz0t1IDyM9jfQy0ttImZE+RsqNrGBkRSN9jaxkZGUjqxhZ1chqRlY3soaRNY2sZWRtI+sYWdfIekbWN7KBkQ2NJI1UGNnIyMZG+hnpb2SAkYFGNklkcj7IJDY1MtjIZmLbEJMYamSYkVQis4O1XXqaGoBKsa3KJIaLvGqTqKH9a0mPIL056ZHimC1MYhRtG016DOmxpLckvRXpcaS3Jr0N6fGktyW9HentSe9AegLpiaQnkZ5MegrpqaSnkZ5OegbpHUnPNPrN1ZrW/Xit82q7+mvWz8G5pVfZeAzllUJeD4HP5vWkRHfI6wXlcF5vykNvtozy8CO2fSivN+SVgy2sV6C8PpC3IuWVQ15fylsB8lYSX0S2eStTHodxWZxb03oy0LrOYdqedxvt86aavh6+rf55G+/e+OuB/JVvLmcb4Gp7Wk8Euncc28F5E1AO55fC+sZBy7I9rK9EmnHbOjPesR+uby2OKYft4x12J5Xt3hawJCHN5dnquhat2/q7BtXfVQCbh/pb46f+VqXi+mv64qBlwbq4KumfWv0dCDj06+rwmritbffS4brK5eI1tcvqpH9qdXU44PBQV+f6qavpuF0NMr9Rh/VuTdI/tbo6DnDo19UaT3W1Mq6rQcsc5XhN7bI26Z9aXZ0GOPTrat3c2Ado99LhurpP0LJgvVuX9E+trs4GHB7q6vy4rrZ76XBdxTe8sN6tT/qnVlf3Axz6dXVupae6mo7rasuzLLymdtmQ9E+trh5G63Yc604ax6oAbB7qb3Vcf9u9dLj+nhm0LFgXNyL9U6u/xwMOD3W1Nq6r7V46XFcvD1oWrHf9SP/U6uo5tG7b2vuorR0Aeb+jvIGQdz/lbQJ5D1DeILDLQ91viOt+u5cO1/07g5YF6/GmpH9qdf86Wrf19yGqv5tB3sOUNwTyHqG8oZD3KOUNg7zHKC8FeY9TXgh5T1BeGvL+QHmVkPck5VVB3h8pbzjkPUV51ZD3NOXVQN4zlFcLec9S3gjIe47yNoe85ylvJOT9ifK2gLwXKG8U5L1IeaMh7yXKGwN5L1PeWMh7hfK2hLxXKW8ryHuN8njcE6NiX6Y8W/fY/0gGWnVvXlUZnQ+XhEjj9o0AT4U6nlTYO2h5Xlhft3Dh1CULDqpb2jB+2aL6pQsWL0oARIb1soCdCDJN4O3dIK8E1jEoGPfp7sjDxc8laWoOKqCcJKQ3issu2rI31i87XQZl8JLr788YygUXdimD7Yi7nyfONhYYOd0PMHJehWc8ZQJPWzz2c+D5QQ9PqtzBhy2rvwfbc9Xf/gVS9gD9shv/O/2DzCXXNR8AeDbxwEUZlNEePJsAnoEe8Hiys9FDHRS05pXLKoftWPcHebAxAeXyuTk9CPD0F1jLYL/+BYKR8/DWuYfg0fpCiUQLXv6vKbZdjXi5PFv+UYCDyyuFfS5frQVbd8LWB7ZvBPYkRZ6ntiFE/5TPzWkur0+Q6UJzHq9vDBj5mmjyjFgQA5eFfXw/4HATB4eFUG8rII+5Q67l/83asqnIs7YM9mQLl8Xn5vRgwMh2bQp4NvWEZ5DA4yqbsWn6Jva8m3myiYc+eOiK8XN5pbDPhtRWcBg959uF6wpem03Ffj1hPRl0jU9TKGV7uH6N/hReA7skRDoJ65sBnmH6eBqHRjbrAJ5hgGeoPp7Qk52N/lTKwSuXVQ7bB4ONKQ82JqBcPjenEWOMN8abAjxDBNYy2G9IgWDkPByK7yl4tD7s1uBfe+h/7ZuRzTyxfy1xlMI++4J/vR3417wd/etBIs/XvW4u/4XL6wP2DII8XvfsX1chFsTg8q+x3g5wcOhr7ET6/5zuDxg5bzDkMXfINe+Hj5/6iTxfjw3wnpHPzekKwMh2ucbftPH0F3hcZXu4f270r5P6NjW2G9x2sX+N19IupbDPXOFfc75duK7gtekn9vNkRyohsCSDzDpgFxwrQDzcnmveh9vzhvp2Nl4vfkzL14vxc3mlsM9Ccb3wdT6+Xny8vV7DxH5oRyLQvV6IBftbfDQdOvDw42fF69UYesGPsJOB7vXix+B8vRg/l1cK+xwkrhfn24WvFx9vr1el2A/t0L5eiCUBZeOj/+EOPPx4X/F6NYb6cohAMtC9XhxmwNeL8XN5pbDP0eJ6cb5d+Hrx8fZ61Yj90A7t64VYElA2hlaMcOAZqc9rY985GPAkIT2yQMreQr/sxvGPkUHmkhDpJKxvAXhGq+Opn18GZbQHz2jAM0odT1M/qW9n0/jHmKA1r1xWOWyvABvHeLAxAeXyuTmNGGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeMfGeGO8cM6xMd4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfHGeGO8Md4Y73LCa/GMFFjLYL+RBYKR80YBxl6Cx25GXu7WgreW8n9Qw1s/3+LdnM7Vw8hRgIPLK4V9KldrwfY6YesD2zcCe2pEnrWhGngZq2JDE+dcFp+b01xeH7CnBvJ4fWPAWBXo84xYEAOXVQ48bQ4cVjo4THvisDLI5JDTacDIebWQx9wh17zfSLAlJfKsLcM82cJl8bk5PQwwsl0pwJPyhCct8MRlF0bZHupfGus6LwmRTsI6YyiH4/j/UwbbEfdQT5wNExg5PRQwcl7aM54ygactHoc68Oi14alUuYMPW9YQD7bnqr9DCqTszfTLbvzvDAkyl1zXfDPAM0gfT20ZlNEePIMAz2B9PKEnOxublk2C1rxyWeWwHev+Jh5sTEC5fG5OI8YYb4w3xhvj/SngtXiGCKxlsN+QAsHIeYMBY2/Box0WqOzegpfvdRV9sVqLl+9BedyCcXB5pbDP96u2YKshbDgmkAJ7qkUejgkkA13OcUwgCWkuD8co8P6a14cBxkoPPCMWxFAJWKRviD4T1lsf/lAiyPTPkpAeDBi5bqK/6MF/bcQzVOBxlc3YNO9PfPnA1iZuA3rQuRk/l1cK+0yg/9eKlMZ2mOsKXpvNxH5ohyI/jb7zQE/8DBD8MP6BwA/vM13ww/nIzyDgZxOxH9qhyE/anre/J376CX4Yf3/gh/fZRfDD+cjPQOBngNgP7VDkp9KedyNP/FQIfhj/RsAP7zNH8MP5yE9/4Kef2M+THamEwJKEsvG5wEYOPDwmrHi9qux5t9C3s/F68XMbvl7ymVMp7LOPuF6cbxe+Xnw8PksZBfzweROB7vVCLPgsCJ+dbeHAw8+yFK/X8J5wrmSge722pHPx9WL8XEYp7LNUXC/OtwtfLz7eXq/RYj+0Q/t6IRZ81shllME64hlH64rXq9qed2s6VzLQvV7b0Ln4ejF+Lq8U9jlSXC/OtwtfLz7eXq+txH5oh/b1QiwJKJvLK4N1xLMtrSterxp73u3oXMlA93ptT+fi68X4ubxS2OdYcb043y58vfh4e73Gi/082ZFKCCxJKJvLK4N1xLODPp6cz7V3gLInqJfdFBcwkc7F15TvA7m8UtjndHFNJ7bAbr7HxnvaHRz74Trvi+M1KXG+MsCC9+qTAm0+mq7FBMCXhPQkwMh5NZA3TNjn55rlri8T/PKTxmvBS0Kkk7A+CfBM0cdTVQZltAfPFMAzWR9P6MnOxmo/NWjNK5dVDtsHg41TPdiYgHL53JxGjDHeGO9UwCPb0TLYb0KBYOS8yYCxTPBox5YfgHFvDz5clfS1jgIcXB76Wo/CuPfDMO7N23Hce7zIszZsA7yM1bGhkXMui8/NaS6vD9gzHvJ4Hce9PdzbVCEWxOC6j5gAHI4ReRbfaE8cjhEccno0YOR7wDGAx1fc65YCT1eWva0oe1tH2frXoclPlmNB24jrgGNBr+YYC+L/JP4Hxoj90A7NsXGJRdqA/jfjtPWdx62wzeAxpGSge41HAr4kpDcHjJy3LeQNc3DoAWPKhXGMwFgG6xgHW+uJs2z/i1oou0a/7Mb7gdogc8nlf9cAHv1nrVUpjEdvD54qwOMjZt2PnU3PAD08B278e6cd1wvj13l7JXDnK1a9Slw3Tqf9lt3Iw9A2eBjqwOIrXjcbD4ixvXgrI4Y35jfmN+Y35jcb3pjfmN+Y35jfbHhjfmN+Y35jfrPhjfmN+Y35jfnNhjfmN+Y35jfmNxvemN+Y35jfmN9seGN+Y35jfmN+s+GN+Y35jfmN+c2GN+Y35jfmN+Y3G96Y35jfmN+Y32x4C4Ffi0fOy10G+9UWCEbOqwY8nDdWD09jnHofOhef37679V2PlnK3pXy9+O50xrvvPei8jMP1XlkA75V9T9jwvTJ8R3u8yCu098p6wro2nm0FHlfZHrhII++8JEQ6Ces494SHd7Qa38fepgN48L2tcfp4Qk92pjy9n9X43oHr/Sz8pgRvHw3cjfLAXSLI/u4hYozxxnhHAR7ZFuP7suMLBCPnjQM8OFeUEp7Gfr6czsXnt33pxj1byh3nodwE8N+dzlsubMa5lb5cuQXbQMLWB7bzdct2LZfnu8/jBL+e2vxGPOMEHlfZHrhII++85OpXsS0YqY4nncJvLbUHD74D6+N/78fOpn5e/3tMTf18jeN6sQ3lsN3zO7w537mu8Vt2Iw/VbfBQ7cDi6/tS2XhAjO3FWxsxvDG/Mb8xvzG/2fDG/Mb8xvzG/GbDG/Mb8xvzG/ObDW/Mb8xvzG/Mbza8Mb8xvzG/ncOLz7YYK87fOaZAMHIeztXJeWP18DQ+p1iBzsXnt8+4HoLnb/rP8cPG52/8fIzjbFYQ16UU9hkMz98eg+dvvJ2vWxlwNsbBXTLQvZb47DkJafyOEduD19LXs93RAo+rbA9cpJF3XhIinYR1fN6l/9ykMoX/6fbgwbbJxxy0vp4PYTul/fytynG98HseuWIBk4Fuvc72PQ/EGCW8nspuvG6VbfBQ6cBS2cU8IMb24q2O8XrFG9eHGG9cH2K82fDG9SHGG9eHGG82vHF9iPHG9SHGmw1vXB9ivHF9iPFmwxvXhxhvXB9ivNnwxvUhxhvXhxhvNrxxfYjxxvUhxpsNbyHUB5yPgrHiN3lHFQhGznO9Wz1WD09jnM6KdC4+v43xurBXS7nMk3b8GceHcfzZiuK6lMI+Y1ZqwXYpYXN9lxy/9zzKwV0y0L2W+G3pZNB6DrE+YA9eS1/f2c4W21hc39lumueppgN4sG3yEXfqK94I26li/s52jDfGixg7Mp/j8sQoYyItxr6CR9vnPQn9Mduj+H+vsni5v7T98VGAg8srhX16Qn/8DPTHvD0F9lSLPE9tYSPn+C5EEtJcXh+wpxryeH0YYPTQrlYhFsSAvh/zhD5N2sGhr3lI04JDTuM8pJyHfj5zh1zzfjgP5xCRZ20Z7MkWLovPzenBgJHtGgJ4hnjCM1Tg6cqys913DPF7HdJ4zXnJ5YsNBjwD9fE0+oaDO4BnIOAZpI8n9GRno2/Yn86l7Rv2C1pfL7ahHLb3B+76eeAuAeXyuTmNGGO8Md5+gEf2A2Ww35ACwch5gwDjSoJH63+V9m7B62EuQKdvyDi4PPQNn+/bgq0nYcvmG9aIPF/337n6P/QDXeM3vI6+YZUHnhELYsB7LJdvWOng0Jc/VSk45PRgwMh5tZDH3CHXvN8QsGWQyPPUNzbawmXxuTk9EDCyXYMAjw8fIBFk+iTJLi472zjmIL/XIY3XnJf2+mIe2uY09gPtwdMP8PTXxxN6srPRN6ygc2n7hhOC1tcL+zXeXgHcTfDAXSLI9EuSkEaMUcJr8ch2qgz2G1QgGKW/ZzGuLHi0/kG1X98l7fJdGIfLdzkbfJfNY9+l3TwjFsSAY0Hcp6M/21/k+fS5+weZHHK6H2Dk/xTep/ho13PdA3RF2dn6e7/3Z/Xzbdn8/+8RZI7RcnmlsM8U+g/ys+GKFtjN/0n8D/QX+6EdivU9lFikDdl8dW4jsc2YSOvJQPcaY7+WhPREwMh5Ll+9wi/GlAtjf4GxDNYnAJ5JnjjL9r+YBGVP1i+70e+cFGQuufzOyYBnqic8kzuAZyrgmaKPJ/RkZ6MfPI3Ope0HTw9aXy+2oRy2TwPupnvgLgHl8rk5jRijhNfimSSwlsF+kwoEI+dNAYyrCB6tr3kQ+MHcX2j7wdx+sh/MOLi8UthnNvjBh4IfLPsvjPvBPm15xluxPbWQx+voB3uYtymNWBADzi3HPE0ADqscHPoa68kWlzAIMHIefpOKuUOueb9JYEt/kbe8fXq2qyv86mxjil1Rdra58Dw/c0njNeelvWNmvnypfh3Ag75UhT6e0JOdKfS1tH2XqY7rxTa4+jVP/lljvZ4srpv0TaKG1+KR7RT62/0LBCPnVQDGVQWP1j+4djn4LozD5bsMBN/lxth3aTfPiAUx4PiKa1x3ksjz1N41cjhJcCjvASxGrq/of/gaL6gQeLqy7Gz9vd+xiqYxPP7/8xhejbgOpbDPI2IMb0oL7Ob/JP4HJon90A7tMTzEIm3w2f5mu3Y4jjJNveyma8f3p3ztmAMurxT2eUZcOxwj4GvHx/cJ2h5X4H2xb3bdDzEWbJdnBNp8NF2LaYAvCekZgJHzXPdD0wGj/jXLXV+mFUjZHq5NGusBL7n8+BmAZ6Y6nrAxbnRGB/DMBDw7quNpuq/Qt7PpvmIWnUv7vmKnoPX1YhvKYfss4G4nD9wloFw+N6cRY4w3xhvjjfHGeGO8Md4Yb4w3xhvjjfEWI14cB2GsZbDftALByHk7AsbVBI/22cCIsha8+uOLYZUcJz0KcLjGSb9asQXbKMLWB7bjcwtXHKGvb5pliyPk8vqAPRMgj9fxuYV+jHdYhVgQA8Y0Mk8Yh1Pj4HB5xW/jnE84NsrcIde83zSwpb/I8xn3lC3mYjpgZLu6Iu4h25wP/T1z0dG4h+kOPJrja+WOa+Fz3Dwb7zgO62HcM93RcdgdAc8sT3h27AAe7Ms9jN+GnuxsNX67o7AH/RWsf758gVlBJr+czuZfFTpei2eGwFoG+80oEIycNxMwri54tD7M/uBfeYixTstnmUcBDtezzAfBv1oK/tV0wa/dNEXk+YxpwGfQyaD1M9I+YA8+E/cRZ5/reSg+5+V17GPZ79KOScFYJS4X3zXsL/jy6Qtn6/NwrkkPczt2+Pu+OLeShz6mw/M9xs9CMxd7jp0c1ysqYxWFjhfn+cW5x3i/UQWC0TVWsYbg0fZX50Jf6qOddY1VMA4uD8cqToS+9ELHWIXrnUfPbWTOsQqMp5RjFcipNp5scbaucRLsS9nv0O5Lsc3mcjHOqb/gy1d7nasvxfs1X31XR+7XsO/y0FbUYbvUHjw7AR4P93mhJzsb+9Kd6VzafekuQevrhe0sb98ZuNvFA3eJILOfTEIaMcZ4Y7wx3hhvjDfG2xZei2dHgbUM9tuxQDDK+z+LcU3Bo71f+MDvvUydxcs+Ld/LMA68l+F9doV7mU/gXsY1FjtK5Pm8l8kWd4/3Mq57q+X5HNj1zjHXWc1rjDwgBhyPcN3L+PCXc93LeB4LSePzAV7ae+/goa2oxnapPXh2ATw76+MJPdnZeC+zK51L+15mt6D19cJ2lrfvCtzt5oG7RJDZTyYhjRhjvDHeGG/X4MXnr4y1DPabVSAYpf9sMa4leLT+1rp9WvCyT6XYnlbjODz7goyDyyuFfTYBX3BDwtYHtqNvO0rkLW9fkO3pCl9wR4GnK8vO9nza9XxBs2/2NDdEGv1Hfidbzg1RCvsMoXrJ72Sj78mxDFgv5DyZaIfm+/SeYvzSeP8p5xvoD/zwPlWCn50c/NQAP9ViP092pBJB6/toGauIMYWIx4dvnOv51M5dUHa2+0nfYy5lUAYv7blHKYfjaj1jzMUP3jPtql92Gv2J9vCDftHunvDs2gE8uwMeHz6QJzsb7/32CFrzymWVw3asf3t4sDEB5fK5OY0Yo4QX/VLGWgb77VIgGDlvN8C4tuDR+qe7gu/sIUapVb97FODg8rDf/W6FFmx7gu8s76msPdNFHsaIJgNdznH+mWTQeh7bPmCPK0ZfG0+2GFt8f4LXsS/08X0E5AEx4LszOwu+PPnBOfu8Gijbwzs66Y5+Lxp9aQ99TC1+N7U9eHYDPB58gtCTnSnsS7XHUfdwXC8co+Dt6C/4avd3E9eN09n60hhvjDfGG+ONKl58nxW/bc771RQIRjm2bzGuI3i0/uz54Gt78MNq0U9lX5tx4HeqeJ/Hwde+GHztGYJfnEMPOfcV75xtbBbjnV3fkVhevr/PsrP5+dMc10F7nNrHO0iucWoZX4/j1DfmGKfme0KsF9PEfp7+a6GnMc00PhuT4/g7Az+8zx2Cn10c/OA4frXYz5MdqUTQ+hlftbADx1A9j0fm/B97fiZbi2M2ss5zeaWwz+/FNcXxHm6bsc7LMTOfduwh7Kh12MH7PC7s2MNhB9ZNOY7l634xIbAkA/d42W4OPLNpXXP8xJ53jr6djderjs7F14vxc3mlsM/z4npxvl34evHxdtc9xX5ohyI/lfa8cz3xUy/4YfxzgR/e51XBD+cjP3OAnzqxnyc7UgmBJQllc3llsI54Gmhd8xvk9rzz9e1svF570bn4ejF+Lq8U9nlPXC/OtwtfLz7e7jpP7Id2KPIz3J53b0/8LBD8MP69gR/e51PBD+cjP/OBn73Efp7sSCUEliSUzeWVwTri2ZfWNeN/7HkX6tvZeL32o3Px9WL8XF4p7PO1uF6cbxe+Xny83XUfsR/aochPjT3vIk/8LBb8MP5FwA/v82/BD+cjPwuBn/3Efp7sSCUEliSUzeWVwTri2V8fT87Yq/2h7AP0y26MpVtC55K+MJdXCvuUljdpvqZLWmA3x9OhL7y/2M+nHQcKO2oddvA+vYUdnI92oC+8ROzn046lwo7ZDjt4n77CDs5HO9BHPFDs59OOZcKOOQ47eJ/VhR2cj3bMATuWiv182nGQsKPBYQfvs66wg/PRDvRxlon9fNpxsLBjvsMO3qdC2MH5aAf6IgeJ/XrCejLQbSuzxbcVStkerl/js2y8BnZJiHQS1g8APIfo42l8J+iADuA5BPD8TB9P6MnOxmfOhwateeWyymE7zj1yqAcbE1Aun5vTiDHGG+ON8XYNXovnYIG1DPY7uEAwct7PAOO6gkf73HFyeQtevu/RfneHeeJnooyDyyuFfU6CZ6LTCVsf2I7zZ+8n8jyNE4Q4TsDn5jTez7I9+0Eer+P82T7GSBALYsDxCB6nORg4nC/ycEwyqczh/CCTQ06jf8zjTPMBj4exzBDHMvncrrI9jM82Ptut17ep2vW8gfFzefi8Yb7w+TnfLlxX8NrMF/uhHdrPdud44me24IfxzwF+eJ/9BD+cj/zUAz91Yj9Pz2PSnuJtql3PSRn/HsAP77NU8LO7g585wM9ssR/aof28yse8CJYf+Q4b498F+OF9DhP87OTgZw/gZ3exH9qh/XzIwxward7TTQat32nG93R/LviZ6eBnF+BnJ7Gfp3cmhuN7zEllfmYIfhg/vsfM+xwn+Jnh4GcW8DNT7Ncz8PfdADmevthRtj6H7m8fL3RwyPucJjjEGBT2KdGHm+HYD9d533qvdubmGOct0o8BbOKYx8KZY+YA517ifc4THOOcPgcIDvEdd9wP13lf5hi//YL3XK7v5yyvd1rKIW8x5A0T9vm5Zk0YtxQYOd0Vc+RuK8retgvLHifKHteFZY8WZY/uwrJHirJHdmHZQ0XZQ7uw7MGi7MFdWPZAUfbALix7kCh7UBeWXSHKrujCstuaf9tn2dn64EIpW38OkPr5WIYdh3PNY8LbH4a+P+7b4r5Nq+y4b4v7tq4qu1j7trhNjdvUrio7blPjNrWryo7b1LhN7aqy4zY1blO7quxCblP7wPrGgIfjj/TGJ+Y1fiue32XuBuVyWfj+ei+KJ7LjExintSlpm4dxWpx3GK2HkHc4rQ+HvCNofQTkHUnrm0HeUbS+CeQdTesDIO8YWt8I8n5O61tA3i9ofSzk/ZLWt4a8X9H6dpD3a1rfAfJ+Q+tbQd6xtL4l5B1H65tD3vG0vj3knUDr20LeibS+DeSdROvjIO9kWh8PeafQ+mjIO5XWx0DeabQ+EvJ+S+tpyDud1odC3hm0Xgl5Z9L6YMg7i9aHQN7ZtD4Q8s6h9YmQdy6tV0HeebQ+CPLOp/V+kHcBrVdA3oW0PgnyLqL1qZB3Ma2PgrxLaB3nrb2U1qdA3mW0PhnyLqf1aZB3Ba3j/AJX0jrOzXIVreO73lfT+p6Qdw2t4zu019L6PMi7jtbx3cTraX0fyLuB1vGdrxtpfX/Iu4nWl0DezbR+IOTdQutLIe9WWl8GebfR+kGQdzutz4e8O2i9DvLupPXZkHcXre8OeXfTOs4nfw+t4/eG7qV1/E72fbSO38gpofVDIK+U1g+FvG60fhjkdaf1wyGvB60fAXk9af1IyOtF60dBXm9aPxry6BM/ze2lTfeh9Z9DHg1PN7eXNo+6hOb20ubxs+tfQV5fWv815K1E67+BvJVp/VjIW4XWj4O8VWn9eMhbjdZPgLzVaf1EyFuD1k+CvDVp/WTIW4vWT4G8tWn9VMjjeYlOgzyOy/0t5K1H66dD3vq0fgbkbUDrZ0LehrR+FuQlaf1syOP27BzI4/7vXMhjv+I8yOP28XzI4/bsAsjjPvZCyOO2+iLI4/75YsjjdvkSyNuU1i+FPO4jLoM89gEuhzzuN66APO6HroQ8jh24CvI41uFqyGMf5RrI477uWsjjfu06yON+6HrIY//mBshrng8I8vh50E2Qx8+KboY89o1ugTz2H26FPO6zb4M89nluhzzuw+6APPYL7oQ89gvugryxtH435LF/cw/ksR90L+Sxj8LtpW2rbJvDMSkYV72fyCvk2HSMqd9X5FncCzzh3lfg5vQCwMg27At5vD4Mjsf5Cnj7umCDfgx5U5wUx0dznBTjwPkweJ8L4V4kgHy77OewfS+xX1fGjTN3rrjxy8GOnpCvicmTrY1N5Rw6l/VdFjvs5O3XwLso19F6WdD6fWC7/V7Hdl4SIp2EdebOU0x349wHMqZ7D0fZuwBWpbIz5kpPkHA5nI/x5PewYxZkzl3GPGOs9GzHfrjeII7BeeNnO+xOKtst57eSceK2ztwI9Yvrj5+2qqnez3bwsy7ww9v3An58vN9hzzEHsMi2Bt+xY5z2f8X1FfvU2R64wvaQz83p2YCR8/Aejm2ZQxrfsbP1Vn67Bn0rnNvT1/dasn3jksuzGNmHw31xne8dcA5MD/+jxm/A8rhBD4EX37fgfZ4X/St+b2SGsKMP2Lw85h9kDl3zD74i+lcP3ymp9WRr43+b2zqMHXPNT/hnaP/egv6Tr8d0OM9fHNt5ydW/4rtGHtqKxv51Dp1Lzt+CZdcBVqWyQyyb+1cuh/PRn/kC+lds35jnXHMLyvVdxTHYHu7psDupbDf2ZUlIc3m2zrwL9esv0L/66PPRbuRnHeCHt+P3QPh/od2/ov8h2xqc19v1DR3sh/b0wBW2h3xuTu8JGOU3fXDcCtsYntfbqqh+p8YDnsb+U77Hs7bAg+/xcMfpeo+H+8+1wQ75nRmMR07q2eGcs5pxuL6t2APs6Bn4+daMJ1sb/7v4bdVZDjt5ex/4zukKtI5jcDvBedZzbOclV/+J83j7+F4a3ivxtd3dUfaegFWp7Iz7NO4/uRx835nX1+U/RpDZ1jPPjNv+N3Zz7IfrteIY7B92c9idDLq2/bV1ZiWoX1x/fLWdaDfyszbww9ux3fTxDVR7DvQxZVuDYwmME+/jsJ/x9f3mbPdx2MdzHj6jZVuwjdkV+s/2fiPZw7dVc34jmcuzGOV3iuU6PwPDfmkndbxhlcXLvlwPgZfLK4V90qJ/xe+X1gg7+oDNnr+lWu26z2YOXffZtaJ/9fC9gGqffjr/R2zd39FhJ28fBe3fGOg/+XrMhPNMdmznJVf/imMPvsZ/uU2X479Y9mzAqlR2iGVz/8rlcH4prE+C/hXv75hn11wZuB+u7yyOwfFNz2MCOcd/uTxbZ7aC+jUZ+lf9tqqp3u/u4Gct4Ie39wd+PMw/0qqvl22NxTJL4MRxH+yHPPikIbaHfG7Xd3E5D2Nu2BZsY9aF/pXvozDWZpTIs3bN9GRXtv6Vy8M4zmz9K8edYP+qP59MU/8q59uRvgjOtzNP9K84346rf50p9vM07l6Hz73YDubQ9U2hfUT/6mNs3dczBnsO9C0nOOzk7Yuh/TsA+k++HjPgPEc7tvOSq39FX7yr71+x7EK4fz0qy/0r89yR+1d5z1uI969LoX4dDf2rh7mvWvVpzM+awA9vx/mr+H/h8/5VtjUWy44Cp/1fcX3FfsjX/av8Nhmn8f5Vzh2GMY/YxnxAwaC23nLcMsY514o8a5evebFqhV2c5vKwf802/xHHek4GvPpzTDX1r3K+NsaBc2nxPmeJ/hXna6sRdqCv45qvLRnojcW6/ATm0OUnXCD6Vw/+dtpnO8P/Y+xf0U7efim0f5dD/8nXYwqc5zbHdl5y9a/oO3kYB2jsX7lN4Gu7q6NsjDNSKjvj+7Pcv8rv1OF4wa3Qv2L/xDw3j9sHreOg5PpMcYzredjyvP+xdeYqqF+3Qf/qYz48tBv5WQP44e04B6GH+SEz/oOIYRZgkfdV6LdiP+Qr/gx95GTQ+rloOeThvSjbgm3MudC/8tg7vj8yReRZuyZ7sovL4nNzmsuzGHm8e4pXPE39J7e/3DatLvDgXEl/EP0n59uF+8/VwY4pYj9rxyh1O5r6z9osdowCO3ifZ0X/6eM7xZ5sbfzvcn23dXuaw07e/iK0by9D/8jXA+OTPnRs5yVX/+l3DKWp/5S+0SxH2TsDVqWyM9oh7j+5HHw+wusfQP+J7Svz7JrrFvfDdekXlQetx+19xllm+244tquvQf36EPpPH20n2o38rA78SL8Q/4Pa/Sd+/062NRaL/M4y3sdhP+NrnDTbfdxMwMh5+F4s24JtzP6O+1N8JjtB5Plq+7C/4nPLsd4+Qe53+/FdoVqR5ysmJtf1qAGMbAPeg/I6vitUA+u8fTWwQf/ZtnveasbB5eG81T8KXwHjyiY4bK8W+/kZ42jyeXYUdjB3M8AO3qd73xY7fI1j+BrPsefIeMbrsLPZv+/bsl85rWPsId5rr+vYzksuXwHH5TyMWaSwf+Zru5OjbF/vCqEPgmOE+OyA19fhl7ODzPtC5plxY7xltneFpotjXGOPy/NezdaZvlC/uP74aaua6v0sBz+rAT+8HWP0+H+h7Sug3yLbGotlmsBp/1dcX7FP9TEeh+0hn5vT6HtyHs61wbZgGzMCfIUJjmNqRV4h97noK1SLPIu7nyfc2WLj+gFGtgHfB+J19BX6wTpvXxVsmKRuQ5OvwH0Nt8OMg8srhX1qoI8Ngsy5mmodtleI/awdU9TtaBpXmCrsYO6mgB28zyjhK0z1gMmTrY3tFLc19n88ymEnb98K2vKtwReQfrfdPsOxnZdcvgJz58k3Srn8wBmOsmcCVqWyM9pc9hW4HHxuxevTwVdw3QPjs7npjv1wXfqAeN883WF3Utlu/AZQMmj9jM3WmW2hfs0AX0G/rWqq99Md/KwK/PD2CuCH/xfavsI0wCLbGoulv8Bp/1dcX7FPne6BK2wP+dycng4YOQ/n9GJbsI25liZGQl8Bj6kVeVH2Fao84c7mK1QBxvb6ClWwzttXARt8jStw387tMOPAcQXeZ7HwFdC/qXXYPkjsZ+2oULejyVeQPg9zVwF28D7LhK/gYcw07cnWxnYKxwNGOezk7YdCW344+AJ8PdBXOMGxnZdcvgL6gR7e7Um5xr6mOcqeAViVys54J5N9BfmNNxx3Ox58Bexr5Rit/W9MdeyH6/3EMTiu7dk/a7Qb+8IkpDGu8iioXyd0wbjCVAc/qwA/vH0Q8MP/C21fAZ8ly7bGYpkkcKIPjn2qh/uUnHPuTgWMnIdjBGwLtjEHga/A7Q3ON1oj8jy9N9toV42wy9W/uvwHXkdfoUrkWdxDPOGuErg5PQQwuvwHXkdfYQis8/aVwYau8hUYh8tXuDqHr1DjsH2g2M+nryDjLpg77EN5nxuFr+BhjmyvvsJEOhfOp4J28vbboC2/w+ELjILzPJqnr4CxKB58rkZfgdstvrau7zdMBaxKZWfEF7GvwOXgOA6vPwK+AvZrzDPGJE1y7OfqC/kY133g8uxrbJ25G+rXo13gK0xy8LMy8MPbBwI/vnyFiYBFtjUWi7xPwuf62Kf6GIPB9pDPLccD8Pu06CuwLdjGVDt8BZzrXLb9UfYVKj3hzuYrVALG9voKlbDO21cCGwap29DkK/D/itthxsHllcI+7wpfYWAL5OZrgbYPFvt5akeqXD4Pc+fyeT4WvoKHZ1RVPttMbpPQV0A7efsX0Jb/FXwBvh7oK3zv2M5LLl8B/cCJ+vY2+grcvvG1negoezJgVSo7xLLZV5D3hqWw/l/wFbCvZZ4ZN47l4n64PlAcg/eBnv2zRruxL0xCmsuzdeYrqF/fg6+g31Y11fsJDn5WAn54+2Dgh/8X2r5CBWCRbY3FMkTgRB8c+1QP9ykhtod8bjmWWA55OEbAtmAbU+rwFVxz4mCscaGO5aOvUCnyLO60J9yVAjen04DR5T/wOvoKaVjn7X3BBv2xkSZfgf9X3A4zDi6vFPZZkyoS+wqDWyA3Xwu0fajYz1M7UuXyeZg7l8+zPtjRE/I1MflsM7lNsv/jGoedvH2jlVr260fr+L0L9BUqHdt5yeUruO7hkoGuryDHjCocZU8ErEplZ9yfsa/A5XA+jleluaENMvta+ZzI/jf6OfbD9cHimPLA7SN58M9yfrMO7zcHQv3i+uNrHBftRn76Aj+8fSjww/8LbV+hP2CRbQ2+Y8A40QfHPtVXLB36+8mg9RhvOeThGAHbgm3Mk/RxJ1tv+dssbb2nvzzjFfh7NL7nN+3onJw4P68HX6oSx3jag6cK8PgYB/JkZwrHfxT/140uY9pxvdiGctheCdz58i+zjUUhxhivP7zYjuN3H3i/2gLByHnVgHE9waNtx+dAH837Kv5/KnHc1/pqRwEOLq8U9vkG/Id5tP5TGgPGeqHJM2JBDFgnmCest0MdHPp65j40yOSQ00MAI+dVQx5zh1zzfjg+MVjk+brfwntkPjenBwFGtgvvdQd7wjNE4HGV7cHvTXm6V25sN9jf5Hs8xs/l4X3tkWIcAn1xrit4bQaL/dAOzfsCT/58Jd6PMT/Sn8dnBL8S/HA+8jMQ+Okv9kM7FPlJexobrcT7cvneDd6n8z4nCn4mOvhxvXczEfjxYEcqEbQeo68QduDzaRzz4OcVJYSHbUsDZv0YhMpGzByfyNzLmAl8h+YsMfamH7damfJja+Y7E9ZnGemwk7efD77NhTC2xs9axsB5bnBs5yXX/Ru+I7mjvr2N11bOM5fr/UztsTd8BykB5XA+vsd9PYy94TuwzDPjtv/nGY79cH2yOAbfm3XNUZVUtrut91JtnbkE6tcN4Nf7ekduhoMfjFHh7dzXWjvw/aKxgTvuRz+GutL5jpuc/wrfM7tDtEn6/6WmNqkr5jqY4rCTt98LdeZ30OZw+4XPgZ9ybOclV5sUz3XQsv5HaJNw3gLmuSNzHUwVxxTiXAcPQv16CtokX9+dmeXgB9/H4+3s32KfEhAW3h/bJP12vdI5n5f8ZgvOqfWiaJP0/0tNbVJXzHU6zWEnb38N6swb0ObI923s9s8c23nJ1SbFc522rH8KbRLOW8o8d2Su0xnimEKc6/QtqF+fQZvUFXOdyne8sc3GmJ1RYn/8Fg0+U/Plb+4seOS0aw4+fH8fjxsbtI4hLQtafzOp8X4InifK+aezja8X6lgvjlGnRZ7FPdQT7rTAzemhgNEVj8TrGHuEY7W8fT2wQX8csyn2iMfouM2U8UKlsE8pBbxzfRrUArn5WqDtQ8R+XTl2ydy5xi57gx2e4okrPdmaEYPR+L6Bw07evuLKLfutROtlcD1q4DwbOrbzkqtfx/Fc3+NxfG0nOMrGeGKlsjPidblf53I4H8c0N+AXQoLM92+YZ5wTssKxH64PEsfgOzsVDruTyna39U6MrTOrQv3i+uPrmQvajfysB/zwdowD9vGMwZ4D46BkW4PPrDEGmOsr9qkVHrjC9pDPLZ8v4HwuGB/FtmAbMweeC4+n/DFwzCiRZ+0a6cmubN/g4vIsxtG0PsovnnSZwGOXXG3lSMDjKxZqZAfwYCyUh3nIQ092pjzFTjS6jFWO64XfrpVxHj5j8rO9v4cYo4QX77MYK8bLjSoQjK77ofUFj7Zd3A76PN5X81ltAnjiWJ71BbZS2Ocu6I8n0jrGYuJ9kozvwf9UMugaztv7HirG8lR54BmxIAasE8wT1ttCes+lHPJqIY+5Q655P4wfHirylmdcEt4jYxz58rqPRy60Y3k8+Mpp1329jE/C+/r5Oe7rua7gtZHxPWiHdiyPh3votGu8QL5TjeMF+wl++jv4GQz8DBL7ebIj5fLzZcwWvvOAz2DYv+dYlRUojfHo+u+1pJ3vHcv3cPDd34PFWI3+/W465cfWpvtEfJ472mEnbz8c+u4jYSyG79fGw3lOcmznJZe/73kuFGcckmseFpxTTqnsjDnbeKyGy+F8jIE6EcZqMEaCeWbc9v88xbEfrleIY3De1ikOu5PKdrc1L6qtM8dA/ToJ/FYf70mj3cgPvvfE27kvsXZg3NVY2B9javVja5raJDnXNmNxzbV9pmiT9P9LTW1SV8y1PcFhJ28/D+rMBdDmcPtVAee53rGdl1xtUjzXdsv6ddAmYYwE89yRubYnimMKca7ti6F+XQ9tUlfMtS3n3cA2G8dxx4j9bf3m/weOd/r4r2KfxueW32fEb3jgMxA8bmzQ4t/hWC/nYXvwUM+mdRw3wPtE11hNPH9VJm7f81etDzbo3xM3PRfm+z05fxWXVwr7PCHuj/DdGNf8VXJ+i668D2buXPfBz4h+3cO7TGmfz8e43cL5q9BO3v4CtLsvQb/N12MknOcDx3ZecvXrODbg4X2cxn6d+0V5H4ll49wRSmVnzM3A/TqXw/n4LtD70K/jc1XmGd9z6e/YD9eHiGNccxP68utx3IDP7ZpL/VWoXx9Av+5j/A7tRn7WB354O76H42O8yp5jIGCRbQ0+/8D5Hri+Yp/qY447bA/53HKsCufjHAoY2RZsY7aDZwzbUP54OGaMyLN2jfZkF5fF5+Y0l2cxjqP1MX7xpMsEHrvkaitHAx4Pz6mryqCM9uDB59Q+vqXqyc6Up+dwjS5jjeN6sQ2uZ4aenn2H+EyQzy2f+8Z4Y7yIEe9jGSvGiowpEIyu+80NBI+NcWertOD18I3txrnsmCd+7r6BwFYK+zy5Sgu2NWkd45DwPlQ+i8c2Kxl0Def4DSlX/BSv43P3Gg88IxbEgHWCecJ6W0jfuCqHPPwGO3OHXPN+GDtXKfKWZwyBa67M5TlOglxoP3f3cC9S5Ro3kbEEOG4SUlvhGjdxzeUpn8WjHdrP3T2MUVS5xmNyvW9QK/gZ5OCnrfcNPNznpT09z2/kpyNxCWMEP/0d/LQ3LkFzbiRPYz5VrjEfxu+ag2W84IfzkZ+BwI+MkcbyOE6inNIYO+shdqDRVhknwVhccRKTwFZPz1CquipOYpzDTt4+HXytHWkd5wDfBs5T79jOS6773zhOomV97irNtGQ8P2OeOxIn0U8cU4hxEjtB/aqH+4yuiJNgfiqAH97Ofb+1Q8ZJ8P4Yr+jheWQVctieOIl9RZvk4b9UVQhxEvtDnVkCbY6cK7oxDsexnZdcbVIcJ9GyfjS0SRjzwDz/1OIklkH9OgbapOUdJ8H+NvYpAWHh/bFN8tCuVyGH8vu4+I1a3uc40SZ5+C9V+erD7Dn4P2DrwiSHnbz9ZKgzp0Kbw+0XziF/sWM7L7naJM/zcDnna3HNAYbzASmVnTHfDrdJXA7n41wxF0GbhHMyMM+M27ZJMx374foUcQzO/TDTYXdS2W6c0ycJaZw/4nSoXxdDm+Rrzr+ZDn7w29C8ne9xsU8JCAvvj22Sh3a9CjmUc/bhvHm8z9WiTfLwX6ry1YfZc/B/wNaFqQ47efsNUGdugjZH3gPY7Q84tvOSq03yPA9XY5vEc9zwtXXNAYbzASmVnTHfDrdJXA7nl8L6/dAm7day2swz47Zt0s6O/XB9ujimHLbv7LA7qWw3zumThDSXZ+vMrVC/HoA2ydecfzs7+MH5Knk7xlaMF/vb+s3/D4yT8OVvZptDDudH4jzmTR43NmgZB8MYEc7D9mBjiCflZzj4/MP1DLJQn4dF/f1ZPAb33QBs0H/W0xRPmqZzcZvJOLi8UtjndTFui+9njnTYLufe78rnO8yd6/nOO6Jf9/A+bZXPuDp+dmD/x6McdvL2D6Hd/Rj6bb4eo+E83zq285KrX3fN6ZIMdPt1+exloKPsfoBVqeyM+Vq4X+dy8PuzvP4N9Os4rs084zONQY79cD0tjnF9v9LT85x2fSOrcc5AqF/fQr/u47k02o38bAD88HZ8V9bHc1h7jsGARbY1GNfDODFOG/tUX9/lyPYdDPwOG+dVAka2BduYVSF2ZnvKxzk4xos8a9c2nuzisvjcnObyLMZtaX28XzzpMoHHLrnaym0AzxhPeLbpAB6sh+P08YSe7ExhfLB2POkox/ViGzBOHGODfcTiJoLssdOIMUp48T6LsWaLR1+eGDlvHGDcUPBo28X1V23By/tqzzPEPHG844YCWynsc8KqLdgqaB3fAcD7pDEiD/9TyaBrOM/1DgB+TxPjHT3ElaYRC2LAOsE8Yb11xYwWQpzuOMhj7pBr3g/fCakWecszdhPvkXF+tOV1H49caMc7evCV0677ehnDiff1I6mtyHVfj9dGxkCiHdrxjh7uodOu8YJc79FuJfgZ4uCnrfdoPdiRcvn5Mq4V5xDD58Ls33P8XB9K+33XrSqF99AylhLvqZvnHgLu/dzvVqX82Jo5N67tk7d12Mnbp0HfPYPW8R3E7eE8cx3becnl7zN3nuIFnXNIub7LPhmwKpUdYtk8ViO/xYRxmXWrNtOSEbfFPDNu+7+Y4NgP1weJY8ph+wSH3UlluzFeKRm0jg2xdWYW1K+54Ld6GLML0W7kB9+35e3cl1g7KuCYsbA/vnegH+9X5ZzLnLFweTif+D6iTdL/LzW1Sb5iG3Gu8IEOO3n7YqgzB0Cbw+3XIDjP0Y7tvORqk/C7kR7iBZ1zSE1xlI2xt0plZ8S2cpvE5eB3EXn9KGiTMG6LeWbctk2a7NgP1/uLY3A+mskOu5PKdmO8UjJoHRti68xSqF9HQ5vkY0wb7UZ+KoAfGRuH88Xz/rZ+8/8Dxzt9zeswSfDIadf3B/AZCB43Nmjx73Csl/OwPfiuR9N6VOcOwHEDHO8YJfI8veue91z4+IwbnwvjfT9v3xBs0L8nbnouzPd73GbK57ulsM/54v4I3x8c47BdzuPclffBzJ3rPvhS0a97eN8z7fP5GLdb+K4O2snbr4J29xrot/l64Ls6dzu285KrX3fN6ZIMdPt1+c7iYEfZAwGrUtkZ87Vwv87lNH+TCdbvgn59YMtqM8/4LuAQx364XiWOKQ/cz8N9+PU4bsDnlu9BNs4ZCPXrbujXfYzfod3Iz4bAD2/HdwN9jFfZc+Ac6rKtwecfjBPjLbBP9TXHe7Y51YcARs6rBoxsC7Yx68MzBr5vngDHjBd5hfZcGL+bg77COJFncW/lCfc4gZvTWwFGtmEc5PE6+gpbwTo+u2Ib9J/FNvkKOCdHEnBweTgnx0vCV8DnLuMdtm8p9vP0bLAKn7GwHcwdzi3C+7whfAUf80P5eg5qz7E5nQvHJdFO3v4OtOXvgS/A1wPHJb9ybOcll6/g+ftLKXzmxNe2xlF2FWBVKjvjeRf7CvLbP6Ww/iX4CuhvMc8YR1rr2A/XR4tj8LtDtQ67k8p2t/VNH1tnPoT69RX4Ch7iRkK0G/kpA354+5bAj4dnzhn/QcSAz5wnOHByfcU+dXnFZeMzZ4wdZ1uwjXmge9M61luca7Fa5BXa82d87om+QiF9a8g1TxDOT4O+AvqBvL032LCZug1NvgLfL8h5eLg8jF/us1qTZl8B7z1c8/DIOWs8xVfWWjs2EXYwd3j/x/usDHb0hHxNTJ5sbTV/cY3DTt6+xmot+61F62VwPXCuuIGO7bzk8hWYO0/PbJ3Pp/s7yt4IsCqVnTGPL/sKXA7Oo8PrA1ZrpqV5P7vIMWv73xjg2A/X5TP4ctg+wGF3UtnubN9F5fJsnVkX6hfXHz9tVVO9H+Dgpzfww9vxvVX+X/icv1i2NTjGgd8R4PqKfeoAD1xhe8jn5vQAwMh5mwFGtgXbmErwFdiHcH2XEn33Qn3HayPAXSXyfI0F4z0Gn7uj3zrYGI53feugF9iQUrdhXuP9OPsrMkaLyyuFfcYJXwF9nVzfOsDY0q76ZgNz54o12174CvrjgPXz/dja1E7xfxu/dYB28vbJ0JZPBV+ArwfeO8x2bOcll6+A7Z4H3yjl8gMHOcr29QxiEzgvPoPgfPRB9wRfAfsS5plx2//GYMd+uD5MHIPPIAY77E4q251trnzsQ2ZA/ZoNvoJ+W9X6fTDmpxfw43o25evdtM0Ai2xr8J6dcbq+MeLpuV3Od9PwmRbn4b0224JtzMvdmtb7QL7rGw74f/Rw/5WzXnJ5+N/C/xuvo68wUOT59N0GCtycHgAY2QZ8h5XX0VdAn3kgYGetH9szzzn/KONwzT96mPAVKlogN18LtF3GCvUMWvoZPTuankEMFXb0hHLYDt7nGOEr+Hi33pOtje0Utz/2LzzYYSdv/zW05ceCL8DXA9uDsx3becnlK+A9XKhvbwqfvfK1DR1l43ySSmVnPPdlX0GOHWIczFngK6DvzzwzbvvfSDn2w/UKcQx+D70rvvkWApYkpLk8W2dOgPp1NvgKvuIQUw5+egI/vB3ng07SuravgP60bGuwH2acrvdJfPlV2B7yuTmdAoyc1w8wsi3YxmxNDUCfoPU8DmVBi93Iu68+l8vic3Ma+50K2M55vN6Wr+DLx8nmK6CPwza05SvgmBFv7wE2bKpuQ5OvIJ9BMA4uD59B3J7jGUTSYbt818HX+KRrXIG5w2cpvM+93scVmt7X8zUWi3FHFQ47efuD0JY/5HjGgPOXPJ/nMwjP7V4K+y2+tilH2dinK5Wd0Weyr8DlcH4prD8HvgI+U2SeGbf9bwxz7Ifrg8UxGIs2zGF3Utlu7JeTkObybJ15FOrX8+Ar6LdVrftnbLeYHzkWg/9Bn7GNsq3B7zniMwiur9inDvPAFbaHfG5ODwOMnLcpYGRbsI1JUAMg2wFVwCVGfhm0/NFs+lci/WuRPp6M4/TJIn2GSJ8l0ueI9HkifYFIXyTSl4j0ZSJ9hUhfJdLXiPR1In2DSN8k0reI9G0ifYdI3yXS94j0fSJ9v0g/KNIPifQjIv2YSD8h0k+K9FMi/YxIPyfSfxLpF0X6ZZH+s0i/JdLviPR7Iv2BSH8k0p+I9Gci/YVI/1WkvxTpv4v0P0T6W5H+l0j/W6S/F+kfRNr+0THdTaR7inSZSK8g0iuJ9KoivYZIry3S64n0hiK9kUj3F+lNRLpSpEeK9BiR3lKkx4n0NiK9LaVxKSE9lnRlqrqqqqEm3RBWhnWp9Ii5tcNTVcPnVteGteHw2uHz0rWVlQ21VbU1I+aOqEmNCKsqG8L5w0dUzqfG8tBAr909We9cqVw2pzq3hPa6afE3K6Hfb81qx3VPdW4J+ynWoZ8Hfq57QtnmXyjYXFNTP7++qqbW57U5WvHanBKRa3NCRHCeGBGcJwVd0xZ3tn4mFG3+TURs7qdo87FdVB87a/NOCv1kTW1lqnJu7QiLzT6wfpnOZ/m0vqctw+pfUvpXpH9NOkGa9z+O9PGkU1n0oaSPJn0q6dNI/5b06aTPIH0m6bNIn036HNLnkj6P9PmkLyB9IemLSF9M+hLSl5K+jPTlpK8gfSXpq0hfTfoa0teSvo709aRvIH0j6ZtI30z6FtK3kr6N9O2k7yB9J+m7SN9N+h7S95K+j/TvSN9P+gHSD5L+PemHSD9M+hHSj5J+jPTjpJ8g/QfST5L+I+mnSD9N+hnSz5J+jvTzpP9E+gXSL5J+ifTLpF8h/Srp10i/TvoN0n8m/Sbpt0i/Tfod0u+Sfo/0+6Q/IP0h6Y9If0z6E9Kfkv6M9OekvyD9F9J/Jf030l+S/or030l/TfofpL8h/S3pf5L+F+nvSP+b9H9I/5f096T/j/T/SLP8SDqg/3mCdAnpUtLdSHcn3YN0T9K9SPcmXUa6D+ly0iuQXpF0X9IrkV6Z9CqkVyW9GunVSa9Bek3Sa5Fem/Q6pNclvR7p9UlvQHpD0knSFaQ3Ir0x6X6k+5MeQHog6U1IDyK9KenBpDcjPYT0UNLDSKdIh6TTpCtJV5EeTrqadA3pWtIjSG9OeiTpLUiPIj2a9BjSY0lvSXor0uNIb016G9LjSW9LejvS25PegfQE0hNJTyI9mfQU0lNJTyM9nfQM0juSnsn1w8jOiab+x/ZbyaBp4X6oP+kBpFNFou0A9y4OXnZJFBcPLl52TTQ9DGI/zOrSIHPRvmdQ9EtTvjD2jwDGAYoYE3C9dzOJFWi9J+QntcqrSlU1vh9CgZ+yvtkyS/TLbJyQr1T7vOY69ACe7MOoUrKLbegLeQmwsZsHLPL/m4Q0l2df2OHru39d/b5bLtlr2X4Ni5YeiJWAd8Y8bCTYuFLHNjymFIjpLs5dBufhbb0Cj0/s8Jzao2m7JvTuYndL6P2zS4FwXLRbo0TgZ4RAqw5Ujpg3oiFsmOeTg10TXTNKkurcEio+TUjhH59DrHY3iT2M7GlktpE5RuqMzDVSb2SekQYj9t2qvYzsbWRBosUz89PrhGnsdeR/Ahsj3tjYmrN9kMfHlkAeN2Dc0tteYQ2wR721r2oK7e6ufd5UqqFnkBlKqnTeFHvgzE8SyukOXPErpYptSohlcyfF5XB+KayvHrQsvWG9BHDapU/QEn7SO8sx3cQx5bC9h8PupLLd8v/UU2C0+HjKD+utdCPAKwK2XvrYGjB0hxfZ+SdhHV9Z9VA/Q8vH2nSuhkUHLGtY1jB12dyFC+rHL1tUv3TB4kXj6hYuxAaPwa8owEsvaEUgmpcSWEeXDffp7sjDBd+p6gF5OA8I53F5vSCPy8U/gjfvqzTINJoX7d5tj0RBeyIhryAX+xAJ+yZaLmR32F7i4IzzbOX4UWxjnYDjf4RjXPskspynzIGjryPPW8VhYy1J74gySpXL2qPzbnya3PhwH8Vbgn09VWrt2yBNmxc6zjU3VT9veDi3el5N2FA3vLa+fkRlGKbrquuq56Zr5zfMHR7WDq8156yvS9ea4tJ19WFDqq66AQe5cNFufBZ6cK3tsl+ipUHo7sAvr6dd+L/RE/ZrHNhWsjUQZUksfR04vd7b+7iY+yX0z7tI8U/iy+5FCfVr5MSq0TAuSuif9+NSPw2uVofFODXr0mK9xivU5I8dAIuvgjjsCk9yz8L2JHlJIxf7EwkHxJ5kq6XZk7Qk/Q+MPyDRulBtz3JPhT9qw/ymZX/FP/0BEfEsNW1eAucKayvT6ZpKu1/tvFRYNa8+XZtOz5tblapP1dWnG0ZUhSPmV6WrKuvn1c8156wL56fm19WPmF/bhKurPMslnjzLA2PPsm0wPi7mgR48y6UF7llau5dGxLM8gLBqn3eZ8h/Z/jHtOa3uKs9odgQ9o4OIhINjz6jV0uwZHSQ8o4O7wDOaregZHaTYAB4cEc9I0+afRdAz+pknz+iQ2DNqG4yPi3mIB8/o0AL3jKzdh0bEMzqYsGqf9zAPntFhXewZzYmgZ3Q4kXBE7Bm1Wpo9o8OFZ3REF3hGcxQ9o8MVG8AjIuIZadp8ZAQ9oyM9eUZHxZ5R22B8XMyjPHhGRxe4Z2TtPjointERhFX7vMd48IyO6WLPaF5he0bOuKyfEwm/iD2j1oSxsZakd8B4S1ZSlKntGc3rfKPVHKf1c8UG8BcR8Yw0bf6l41yFHqf1S0+e0a9iz6htMD4u5q88eEa/LnDPyNr964h4Rr8grNrn/TQicVqadek3eo1X+KmHOC2LryLoOs+yobA9S14yxtyOJRKOiz3LVkuzZ3ksjbnhou1JNiiOsR2r+Cc/LiKepKbNx0dwjO14T57kCbEn2TYYHxfzBA+e5IkF7klau0+MiCd5HGHVPu9JHsbYTuriMbb5EfSETiYSTok9oVZLsyd0chd4QvMVPaGTFRu8UyLiCWnafGoEPaFTPXlCp8WeUNtgfFzM0zx4Qr8tcE/I2v3biHhCpxBW7fOe7sETOr2LPaG9IugJnUEknBl7Qq2WZk/ojC7whPZS9ITOUGzwzoyIJ6Rp81kR9ITO8uQJnR17Qm2D8XExz/bgCZ1T4J6QtfuciHhCZxJW7fOe68ETOreLPaG9C9sTcsZdnUcknB97Qq0JY2MtSRh3ZclKijK1PaO9O99oNcddnafYAJ4fEc9I0+YLHOcq9LirCzx5RhfGnlHbYHxczAs9eEYXFbhnZO2+KCKe0fmEVfu8n0ck7kqzLl2s13iFn3uIu7L4KoLMRbsDSyjWod09ddra//d9FerQ3Op0ddgQVuW6NoX0ldioOFSzFP/flyR0/yfW1kscTrk2B5rfnlgQkf/kcRHBeUpEcHbV0HIhfcm1rghtnttF9bGzNl+qgJO/+WKx2anteRp9e257o3cA6YNJH0HajvBcRj6zPe5psPEH0PW0/y8Sub+0Nou275oo7i/OxTrWsY51rDP1YCOXQ3+DH9Wz2y+jfuNy0vZLr1ck3IOKQaDvG2p+DRPxXploeZri6UuTGd/8kly5vvnVI8j8lE7C8TXHhDif/XzOWrS+V8PSqYuXLK1bOG7xoqVL6uqXbjlv3pKGAzM+rojXN3Csu54g4XfHSh34eZv3T/h0RYUbGPipcFfFFa55iSsclHOlp8dSV8ePpdoG4+NiXp3QP+81Bf5Yytp9jafHUrJC+OA01cmlqxqLqzw1FtfGjUXbYHxczGs9NBbXFXhjYe2+LmKNxXWKfzz8E/nAqulRJOk815tz3mDkRiM3GbnZyC1GbjVym5Hbjdxh5E4jdxm528g9Ru41cp+R3xm538gDRh408nsjDxl52MgjRh418piRx408YeQPRp408kcjTyWaSLKqhLCw62fTN4j0jSJ9k0jfLNK3iPStIn2bSN8u0neI9J0ifZdI3y3S94j0vSJ9n0j/TqTvF+kHRPpBkf69SD8k0g+L9CMi/ahIPybSj4v0EyL9B5F+UqT/KNJPJVo+HcuLdnDhlYpt5vWK5/pLF8W6dO5Vk1R4Q0LnXPZa3KjI318Lnr/GU4c3dd7m5uDWmxX5+1sh81fVjDO8pXM2p8Dm8FZF/r4sVP7SGTjD2/K3OSVsDm9X5O+rAuSven4rnOEd+dlc67A5vFORv78XGn+1TpzhXR23uSaLzeHdivx9XUj81WTFGd7TMZvTOWwO71Xk7x+Fwl9NTpzhfe23ub4Nm8PfKfL3TSHwV9MmzvD+9tmcaofN4QOK/H27vPlLtQtn+GDbNg9vp83h7xX5++fy5K+q3TjDh3LaXDW/AzaHDyvy96/lxV9Nh3CGj2S3ubaDNoePKvL33XLgb8T8DuMMH3PbnMrD5vBxRf7+3dX8pfLCGT7R2uYwT5vDPyjy95+u5G9e3jjDJzNtruyEzeEfFfn7bxfxl57fKZzhUwm9sUQcs+ssf98X+LtutISK42zh3xT5+7+I8Kc4ThR+pcjf/yLCn+I4R/i1In8/RIQ/xfv08BtF/n6MCH+K95nhPxX5s7FyUeBP8T4p/E6Rv0RE+FP088P/KPJXEhH+FP3U8HtF/kojwp+inxX+T5G/bhHhT9FPCH9U5K97RPhT7OdCbPM7y1+PiPCn2E6HpYr89YwIf4rtTNhdkb9eEeFP8X8SKtaZUJO/kiBzSShzOEDvXM1xn08bkM8YedbIc0aeN/InIy8YedHIS0ZeNvKKkVeNvGbkdSNvGPmzkTeNvGXkbSPvGHnXyHtG3jfygZEPjXxk5GMjnxj51MhnRj438kUiyIj7fFrEBT4j0s+K9HMi/bxI/0mkXxDpF0X6JZF+WaRfEelXRfo1kX5dpN8Q6T+L9Jsi/ZZIvy3S74j0uyL9nki/L9IfiPSHIv2RSH8s0p+I9Kci/ZlIfy7SXyT8x33if6azbe3TiuPmA7uo3e5s3OczCZ1z2WvxrCJ/mxQ8f42nDp/rvM3NcZ/PK/I3qJD5g7jPP3XO5oy4zxcU+du0UPkTcZ8v5m9zq7jPlxT5G1yA/LniPl/Oz2Zn3OcrivxtVmj8ZYn7fLXjNmeN+3xNkb8hhcRfjrjP1ztmc864zzcU+RtaKPy1Eff55/bb3Gbc55uK/A0rBP7aEff5Vvtsblfc59uK/KWWN3/tjPt8p22b2x33+a4if+Hy5K8DcZ/v5bS5Y3Gf7yvyl15e/HUw7vOD7DZ3OO7zQ0X+KpcDf/nEfX7ktjmvuM+PFfmr6mr+8oz7/KS1zXnHfX6qyN/wruSvE3Gfn2Xa3Km4z88V+avuIv46G/f5RUJvLHGg4nObmog8t1EcZwsHKfJXGxH+FMeJwsGK/I2ICH+K4xzhEEX+No8If4r36eEwRf5GRoQ/xfvMMFTkb4uI8Kd4nxRWKvI3KiL8Kfr54XBF/kZHhD9FPzWsUeRvTET4U/SzwhGK/I2NCH+KfkI4UpG/LSPCn2I/F45S5G+riPCn2E6HYxT5GxcR/hTbmXBLRf62jgh/iv+TULHOhJr8lQSZS0KZw0F652qO+/yLAflXI38z8qWRr4z83cjXRv5h5Bsj3xr5p5F/GfnOyL+N/MfIf418b+T/jPzPyA9GfqSgvoSREiOlRroZ6W6kh5GeRnoZ6W2krCTIiPv8i4gL/KtI/02kvxTpr0T67yL9tUj/Q6S/EelvRfqfIv0vkf5OpP8t0v8R6f+K9Pci/X8i/T+R/kGkfxRp+4PphEiXiHSpSHcT6e4i3UOke4p0L5HuLdJlJf7jPvE/0+k5OhXHzesjEvf5V8W4z78p8jcvInGfXyrGfX6lyF9DROI+/64Y9/m1In/zIxL3+Q/FuM9vFPnbKyJxn98qxn3+U5G/vSMS9/kvxbjP7xT5WxCRuM9/K8Z9/keRv30iEvf5X8W4z+8V+ds3InGf/6cY9/k/Rf4WRiTu8wfFuM8fFfnbLyJxn/ZGMfu5Ohb3mSjR429RROI+S7Lb3OG4z1JF/hZHJO6zm9vmvOI+uyvyt39E4j57tLY577jPnor8HRCRuM9emTZ3Ku6ztyJ/SyIS91lWojeWWK/43ObAiDy3URxnCxsU+VsaEf4Ux4nCvRT5WxYR/hTHOcIFivwdFBH+FO/Tw30V+Ts4Ivwp3meG+yny97OI8Kd4nxQuVuTvkIjwp+jnhwco8ndoRPhT9FPDAxX5Oywi/Cn6WeEyRf4Ojwh/in5CeLAif0dEhD/Ffi48RJG/IyPCn2I7HR6myN9REeFPsZ0Jj1Dk7+iI8Kf4PwkV60yoyV9JkLlox31epffucnPcZx8DutzICkZWNNLXyEpGVjayipFVjaxmZHUjaxhZ08haRtY2so6RdY2sZ2R9IxsY2dBI0kiFkY2MbGykn5H+RgYYGWhkEyODjGxaEmTEfVosGBdYLtIriPSKIt1XpFcS6ZVFehWRXlWkVxPp1UV6DZFeU6TXEum1RXodkV5XpNcT6fVFegOR3lCkkyJdIdIbifTGIt1PpPuL9ACRHijSm4j0IJHetMR/3OdVis9Kbf3UOtfFEYn7LC/ROZe9Fiso8ndJROI+V+y8zc1xn30V+bs0InGfK3XO5oy4z5UV+bssInGfq+Rvc6u4z1UV+bs8InGfq+VnszPuc3VF/q6ISNznGh23OWvc55qK/F0ZkbjPtTpmc864z7UV+bsqInGf67Tf5jbjPtdV5O/qiMR9rtc+m9sV97m+In/XRCTuc4O2bW533OeGivxdG5G4z2ROmzsW91mhyN91EYn73Ci7zR2O+9xYkb/rIxL32c9tc15xn/0V+bshInGfA1rbnHfc50BF/m6MSNznJpk2dyruc5AifzdFJO5z0xK9scSLFZ/b3ByR5zaK42zhpYr83RIR/hTHicLLFfm7NSL8KY5zhFcq8ndbRPhTvE8Pr1bk7/aI8Kd4nxleq8jfHRHhT/E+Kbxekb87I8Kfop8f3qjI310R4U/RTw1vVuTv7ojwp+hnhbcq8ndPRPhT9BPC2xX5uzci/Cn2c+GdivzdFxH+FNvp8G5F/n4XEf4U25nwXkX+7o8If4r/k1CxzoSa/JUEmYt23OemeudqjvscbEBvZmSIkaFGhhmxhoRG0kYqjVQZGW6k2kiNkVojI4xsbmSkkS2MjDIy2sgYO85mZEsjWxkZZ2RrI9sYGW9kWyPbGdneyA4lQUbcp8WCcYGbifQQkR4q0sNEOiXSoUinRbpSpKtEerhIV4t0jUjXivQIkd5cpEeK9BYiPUqkR4v0GJEeK9JbivRWIj1OpLcW6W1EerxIbyvS24n09iK9Q4n/uE/8z3S2rbX1U+tcb0Yk7nOzEp1z2WsxRJG/tyIS9zm08zY3x30OU+Tv7YjEfaY6Z3NG3GeoyN87EYn7TOdvc6u4z0pF/t6NSNxnVX42O+M+hyvy915E4j6rO25z1rjPGkX+3o9I3Gdtx2zOGfc5QpG/DyIS97l5+21uM+5zpCJ/H0Yk7nOL9tncrrjPUYr8fRSRuM/Rbdvc7rjPMYr8fRyRuM+xOW3uWNznlor8fRKRuM+tstvc4bjPcYr8fRqRuM+t3TbnFfe5jSJ/n0Uk7nN8a5vzjvvcVpG/zyMS97ldps2divvcXpG/LyIS97lDid5Y4puKz23+EpHnNorjbOHbivz9NSL8KY4The8q8ve3iPCnOM4Rvq/I35cR4U/xPj38UJG/ryLCn+J9ZvixIn9/jwh/ivdJ4aeK/H0dEf4U/fzwc0X+/hER/hT91PAvivx9ExH+FP2s8G+K/H0bEf4U/YTwK0X+/hkR/hT7ufBrRf7+FRH+FNvp8BtF/r6LCH+K7Uz4T0X+/h0R/hT/J6FinQk1+SsJMhftuM/BeudqjvucYEBPNDLJyGQjU4xMNTLNyHQjM4zsaGSmkVlGdjKys5FdjOxqZDcjuxvZw8ieRmYbmWOkzshcI/VG5hlpMDLfyF5G9jaywMg+JUFG3KfFgnGBE0V6kkhPFukpIj1VpKeJ9HSRniHSO4r0TJGeJdI7ifTOIr2LSO8q0ruJ9O4ivYdI7ynSs0V6jkjXifRcka4X6Xki3SDS80V6L5HeW6QXiPQ+Jf7jPvE/09m21tZPrXOt2X05PTfsYNznxBKdc9lrMUmRv7UKnr/GU4eTO29zc9znFEX+1i5k/iDuc2rnbM6I+5ymyN86hcqfiPucnr/NreI+Zyjyt24B8ueK+9wxP5udcZ8zFflbr9D4yxL3OavjNmeN+9xJkb/1C4m/HHGfO3fM5pxxn7so8rdBofDXRtznru23uc24z90U+duwEPhrR9zn7u2zuV1xn3so8pdc3vy1M+5zz7Ztbnfc52xF/iqWJ38diPuck9PmjsV91inyt9Hy4q+DcZ9zs9vc4bjPekX+Nl4O/OUT9znPbXNecZ8Nivz162r+8oz7nN/a5rzjPvdS5K9/V/LXibjPvTNt7lTc5wJF/gZ0EX+djfvcp0RvLBHH7DrL38Au4i/VuSVUHGcL11bkb5OI8Kc4ThSuq8jfoIjwpzjOEa6vyN+mEeFP8T493FCRv8ER4U/xPjOsUORvs4jwp3ifFG6syN+QiPCn6OeH/RX5GxoR/hT91HCgIn/DIsKfop8VDlLkLxUR/hT9hHCwIn9hRPhT7OfCIYr8pSPCn2I7HQ5T5K8yIvwptjNhqMhfVUT4U/yfhIp1JtTkryTIXLTjPjfTO1dz3Oe+BvRCI/sZWWRksZH9jRxgZImRA40sNbLMyEFGDjbyMyOHGDnUyGFGDjdyhJEjjRxl5Ggjxxj5uZFfGPmlkV8Z+bWR3xg51shxRo4vCTLiPi0WjAtcKNL7ifQikV4s0vuL9AEivUSkDxTppSK9TKQPEumDRfpnIn2ISB8q0oeJ9OEifYRIHynSR4n00SJ9jEj/XKR/IdK/FOlfifSvRfo3In2sSB8n0seX+I/7xP9MZ9taWz+1zjUjInGfC0t0zmWvxX6K/O0YkbjPRZ23uTnuc7EifzMjEve5f+dszoj7PECRv1kRiftckr/NreI+D1Tkb6eIxH0uzc9mZ9znMkX+do5I3OdBHbc5a9znwYr87RKRuM+fdczmnHGfhyjyt2tE4j4Pbb/NbcZ9HqbI324Rifs8vH02tyvu8whF/naPSNznkW3b3O64z6MU+dsjInGfR+e0uWNxn8co8rdnROI+f57d5g7Hff5Ckb/ZEYn7/KXb5rziPn+lyN+ciMR9/rq1zXnHff5Gkb+6iMR9Hptpc6fiPo9T5G9uROI+jy/RG0ucofjcpj4iz20Ux9nCmYr8zYsIf4rjROFOivw1RIQ/xXGOcBdF/uZHhD/F+/RwN0X+9ooIf4r3meEeivztHRH+FO+TwtmK/C2ICH+Kfn5Yp8jfPhHhT9FPDesV+ds3Ivwp+llhgyJ/CyPCn6KfEO6lyN9+EeFPsZ8LFyjytygi/Cm20+G+ivwtjgh/iu1MuJ8if/tHhD/F/0moWGdCTf5KgsxFO+5ziN65muM+TzCgTzRykpGTjZxi5FQjpxn5rZHTjZxh5EwjZxk528g5Rs41cp6R841cYORCIxcZudjIJUYuNXKZkcuNXGHkSiNXGbnayDVGrjVyXUmQEfdpsWBc4IkifZJInyzSp4j0qSJ9mkj/VqRPF+kzRPpMkT5LpM8W6XNE+lyRPk+kzxfpC0T6QpG+SKQvFulLRPpSkb5MpC8X6StE+kqRvkqkrxbpa0T6WpG+rsR/3Cf+Zzrb1tr6qXWuUyIS93liic657LU4SZG/UyMS93ly521ujvs8RZG/0yIS93lq52zOiPs8TZG/30Yk7vO3+dvcKu7zdEX+To9I3OcZ+dnsjPs8U5G/MyIS93lWx23OGvd5tiJ/Z0Yk7vOcjtmcM+7zXEX+zopI3Od57be5zbjP8xX5OzsicZ8XtM/mdsV9XqjI3zkRifu8qG2b2x33ebEif+dGJO7zkpw2dyzu81JF/s6LSNznZdlt7nDc5+WK/J0fkbjPK9w25xX3eaUifxdEJO7zqtY25x33ebUifxdGJO7zmkybOxX3ea0ifxdFJO7zuhK9scRTFJ/bXByR5zaK42zhaYr8XRIR/hTHicLTFfm7NCL8KY5zhGcq8ndZRPhTvE8Pz1bk7/KI8Kd4nxmeq8jfFRHhT/E+KTxfkb8rI8Kfop8fXqjI31UR4U/RTw0vVuTv6ojwp+hnhZcq8ndNRPhT9BPCyxX5uzYi/Cn2c+GVivxdFxH+FNvp8GpF/q6PCH+K7Ux4rSJ/N0SEP8X/SahYZ0JN/kqCzEU77nOo3rma4z6vN6BvMHKjkZuM3GzkFiO3GrnNyO1G7jByp5G7jNxt5B4j9xq5z8jvjNxv5AEjDxr5vZGHjDxs5BEjjxp5zMjjRp4w8gcjTxr5o5GnSoKMuE+LBeMCbxDpG0X6JpG+WaRvEelbRfo2kb5dpO8Q6TtF+i6Rvluk7xHpe0X6PpH+nUjfL9IPiPSDIv17kX5IpB8W6UdE+lGRfkykHxfpJ0T6DyL9pEj/UaSfKvEf94n/mU73VSV653o6InGfN5TonMteixsV+XsmInGfN3Xe5ua4z5sV+Xs2InGft3TO5oy4z1sV+XsuInGft+Vvc6u4z9sV+Xs+InGfd+RnszPu805F/v4UkbjPuzpuc9a4z7sV+XshInGf93TM5pxxn/cq8vdiROI+72u/zW3Gff5Okb+XIhL3eX/7bG5X3OcDivy9HJG4zwfbtrndcZ+/V+TvlYjEfT6U0+aOxX0+rMjfqxGJ+3wku80djvt8VJG/1yIS9/mY2+a84j4fV+Tv9YjEfT7R2ua84z7/oMjfGxGJ+3wy0+ZOxX3+UZG/P0ck7vOpEr2xxKcVn9u8GZHnNorjbOGzivy9FRH+FMeJwucV+Xs7IvwpjnOELyjy905E+FO8Tw9fUuTv3Yjwp3ifGb6iyN97EeFP8T4pfE2Rv/cjwp+inx++ocjfBxHhT9FPDd9U5O/DiPCn6GeFbyvy91FE+FP0E8J3Ffn7OCL8KfZz4fuK/H0SEf4U2+nwQ0X+Po0If4rtTPixIn+fRYQ/xf9JqFhnQk3+SoLMRTvuc5jeuZrjPp82oJ8x8qyR54w8b+RPRl4w8qKRl4y8bOQVI68aec3I60beMPJnI28aecvI20beMfKukfeMvG/kAyMfGvnIyMdGPjHyqZHPjHxu5IuSICPu02LBuMBnRPpZkX5OpJ8X6T+J9Asi/aJIvyTSL4v0KyL9qki/JtKvi/QbIv1nkX5TpN8S6bdF+h2Rflek3xPp90X6A5H+UKQ/EumPRfoTkf5UpD8T6c9F+osS/3Gf+J/pdKxmid65evbQ+y/n4q+zcZ/PlOicy16LZxX561Xw/DWeOnyu8zY3x30+r8hf70LmD+I+/9Q5mzPiPl9Q5K+sUPkTcZ8v5m9zq7jPlxT561OA/LniPl/Oz2Zn3OcrivyVFxp/WeI+X+24zVnjPl9T5G+FQuIvR9zn6x2zOWfc5xuK/K1YKPy1Eff55/bb3Gbc55uK/PUtBP7aEff5Vvtsblfc59uK/K20vPlrZ9znO23b3O64z3cV+Vt5efLXgbjP93La3LG4z/cV+VtlefHXwbjPD7Lb3OG4zw8V+Vt1OfCXT9znR26b84r7/FiRv9W6mr884z4/aW1z3nGfnyryt3pX8teJuM/PMm3uVNzn54r8rdFF/HU27vOLEr2xRByz6yx/a3YRf6nOLaHiOFvYW5G/tSLCn+I4UdhHkb+1I8Kf4jhHuIIif+tEhD/F+/SwryJ/60aEP8X7zHBlRf7Wiwh/ivdJ4aqK/K0fEf4U/fxwdUX+NogIf4p+arimIn8bRoQ/RT8rXFuRv2RE+FP0E8J1FfmriAh/iv1cuL4ifxtFhD/FdjrcUJG/jSPCn2I7E1Yo8tcvIvwp/k9CxToT+uJPxnx29jr/RW38au48nzj/qoaztsYnzr+p4ZwX+sT5pRrOqrkWm/1fb00gbZ2ycZd/Jf030l+SfirRpP9I+knSfyD9BOnHST9G+lHSj5B+mPRDpH9P+kHSD5C+n/TvSN9H+l7S95C+m/RdpO8kfQfp20nfRvpW0reQvpn0TaRvJH0D6etJf0H6c9Kfkf6U9CekPyb9EekPSX9A+n3S75F+l/Q7pN8m/RbpN0n/mfQbpF8n/RrpV0m/Qvpl0i+RfpH0C6T/RPp50s+Rfpb0M6SfJl1G9aA36V6ke5LuQbo76W6kS0mXkE6QDkj/SOf/gfT/SP8f6e9J/5f0f0j/m/R3pP9F+p+kvyX9Del/kP6a9N9Jf0X6S9J/I/1X0n8hvSnhHUR6E9IDSQ8g3Z90P9Ibk96IdAXpJOkNSW9Aen3S65Fel/Q6pNcmvRbpNUmvQXp10quRXpX0KqRXJr0S6b6kVyS9Auly0n1I70B6e9Lbkd6W9HjS25DemvQ40luR3pL0WNJjSI8mPYr0FqRHkt6c9AjStaRrSFeTHk66inQl6TTpkHSK9DDSQ0kPIb0Z6cGk9yG9gPTepPciPZ90A+l5pOtJzyVdR3oO6dmk9yS9B+ndSe9GelfSu5DemfROpGeRnkl6R9IzSE8nPY30VNJTSE8mPYn0RNITSB9P+jjSx5L+Delfk/4V6V+S/gXpn5M+hvTRpI8ifSTpI0gfTvow0oeSPoT0z0gfTPog0stILyV9IOklpA8gvT/pxaQXkd6P9ELS+5K+jvS1pK8hfTXpq0hfSfoK0peTvoz0paQvIX0x6YtIX0j6AtLnkz6P9LmkzyF9NumzSJ9J+gzSp5P+LenTSJ9K+hTSJ5M+ifSJpE8gzfNx8zzdPH83z+vN833zPOA8PzjPG87zifM84w+R5nnJeb5ynsec5zfnec95PnSeJ53nT+d51Xm+dZ6Hnedn53nbeT53nued53/neeF5vnieR57nl+d55/m9FH5fhd9j4fdb+L0Xfh+G35Ph92f4vRp+3+Y90vx+Dr+3w+/z8Hs+/P4PvxfE7wvxe0T8fhG/d8TvI/F7Svz+Er/XxO878XtQ/H4UvzfF71Pxe1b8/lUyaFq+Mum/G/nayD+MfGPkWyP/NPIvI98Z+beR/xj5r5Hvjfyfkf8Z+cHIj0as45kwUmKk1Eg3I92N9DDS00gvI72NlBnpY6TcyApGVuQbUVpa3ZeGqU4t1rbmc6U6d7a/l+j5/eO68r6+E1Z/XdIKZ95n+4cif1t39bhInlZ/U+LEmdfZvlXkb5vlMa6Uh9X/LMmKs8Nn+5cif+OX17hcB63+riQnzg6d7d+K/G27PMc1O2D1f0raxNnus/1Xkb/tlve4cDut/r6kXTjbdbb/U+Rv+0IYV2+H1f8raTfONs/2gyJ/OxTKc4k2rP6xpEM4c57NgtPib0IhPdfJYXWitMM4s56tRJG/iYX2XCyL1aWleeF0nq2bIn+TCvG5osPq7qV542x1th6K/E0u1OeywuqepZ3CmXG2Xor8TSnk59pgde/STuNsPluZIn9TCz0ugKzuU6qCs/Fs5Yr8TYtCXIWxeoVSNZzhior8TY9IXIriOFu4tWJcz4yI8Kc4ThSOV+Rvx4jwpzjOEW6nyN/MiPCneJ8e7qDI36yI8Kd4nxlOVORvp4jwp3ifFE5W5G/niPCn6OeHUxX52yUi/Cn6qeF0Rf52jQh/in5WuKMif7tFhD9FPyGcpcjf7hHhT7GfC3dW5G+PiPCn2E6Huyryt2dE+FNsZ8LdFfmbHRH+FP8n4Z6K/M0phHnl2jP/neL4lWKdCX3xV6Jc/zSvxUql0bA5oWjzyhGxuUTR5lUiYnOpos2rRsTmboo2rxYRm7sr2rx6RGzuoWjzGhGxuaeizWtGxOa0os1rRcTmlKLNaxehzesUoc3rFqHN6xWhzesXoc0bFKHNGxahzckitLmiCG3eqAht3rgIbe5XhDb3L0KbBxShzQOL0OZNitDmQUVo86ZFaPPgIrR5syK0eUgR2jy0CG0eVoQ2p4rQ5rAIbU4Xoc2VRWhzVRHaPLwIba4uQptritDm2iK0eUQR2rx5Edo8sght3qIIbR5VhDaPLkKbxxShzWOL0OYti9DmrYrQ5nFFaPPWRWjzNkVo8/gitHnbIrR5uyK0efsitHmHIrR5QhHaPLEIbZ5UhDZPLkKbpxShzVOL0OZpRWjz9CK0eUYR2rxjEdo8swhtnlWENu9UhDbvXIQ271KENu9ahDbvVoQ2716ENu9RhDbvWYQ2zy5Cm+cUoc11RWjz3CK0ub4IbZ5XhDY3FKHN84vQ5r2K0Oa9i9DmBUVo8z5FaPO+RWjzwiK0eb8itHlREdq8uAht3r8IbT6gCG1eUoQ2H1iENi8tQpuXFaHNBxWhzQcXoc0/K0KbDylCmw8tQpsPK0KbDy9Cm48oQpuPLEKbjypCm48uQpuPKUKbf16ENv+iCG3+ZRHa/KsitPnXRWjzb4rQ5mOL0ObjitDm44vQ5hOK0OYTi9Dmk4rQ5pOL0OZTitDmU4vQ5tOK0ObfFqHNpxehzWcUoc1nFqHNZxWhzWcXoc3nFKHN5xahzecVoc3nF6HNFxShzRcWoc0XFaHNFxehzZcUoc2XFqHNlxWhzZcXoc1XFKHNVxahzVcVoc1XF6HN1xShzdcWoc3XFaHN1xehzTcUoc03FqHNNxWhzTcXoc23FKHNt0bE5p0TejbfVoTX+fYitPmOIrT5zojYfKSizXdFxOYrFNuwu4uwbt9ThDbfGxGb+5bq2XxfEV7n30XE5ksU27D7i/A6P1CENj9YhDb/vghtfqgIbX64CG1+JCI291K0+dGI2Nxb0ebHImJzmaLNj0fE5j6KNj8REZvLFW3+Q0RsXkHR5icjYvOKijb/MSr3z4o2PxURm1dStPnpiNi8sqLNz0TE5lUUbX42IjavqmjzcxGxeTVFm5+PiM2rK9r8p4jYvIaizS9ExOY1FW1+MSI2r6Vo80sRsXltRZtfjojN6yja/EpEbF5X0eZXI2Lzeoo2vxYRm9dXtPn1iNi8gaLNb0TE5g0Vbf5zRGxOKtr8ZkRsrlC0+a2I2LyRos1vR8TmjRVtfkfR5oQ5RymfC+xPEAd2Wzcj3Y30MNLTiH0OZZ/L2OcUdtzejmPbcV07zmnH/ew4mB0XsuMkdtzA3kfb+0p7n2XvO6wfbv1S66dZv8X247Zfs+28bfeSRuz/wtYTy1s/I/2NDDAy0MgmRgYZ2dTIYCObGRliZKiRYWDD86RXMkasbGQVI6saWc3I6kbWMLKmkbWMrG1kHSPrGlnPyPpGNjCyoZGkkQojGxnZ2Eg/I/2NDDAy0MgmRgYZ2dTIYCObGRliZKiRYUZSRkIjaSOVRqqMDDdSbaTGSK2REUY2NzLSyBZGRhkZbWSMvdZGtjSylZFxRrY2so2R8Ua2NbKdke2N7GBkgpGJRiYZmWxkipGpRqYZmW5khpEdjcw0MsvITkZ2NrKLkV2N7GbEfkfeflfdfmfcfnfbfofafpfZfqfYfrfXfsfWftfVfufUfvfTfgfTfhfSfifRfjfQfkfPflfOfmfNfnfMfofLfpfKfqfJfrfIfsfHftfGfufFfvfEfgfEfhfDfifCfjfBfkfAzqtv55m3867becjtvNx2nmo7b7Odx9jO62vnubXzvtp5UO28oHaeTDtvpJ1H0c4raOfZs/PO2XnY7Lxkdp4uO2+VncfJzmtk5/mx897YeWDsvCh2nhA7b4adR8LOq2DnGbDv3dv30O172fY9Zfvern2P1b7Xad9ztO/92ffg7Hth9j0p+96QfY/Gvldi37Ow7x3YOHwbl27jtG3cso3jtXGtNs7Txj3aOEAbF2fjxGzclI0jsnE1Ns7Exl3YOAT7XN4+p7bPbe1zTPtczz7nss997HMQ+1zAjpPbcWM7jmrHFe04mx13suMwdlzC3qfb+1Z7H2fva6yfb/1e6wdav8j6CbbftP2IbVdtO7MM/k/7k16PdN3SpQ377b80uXRxsm7evOTBC5bunVx8UMOS+QsXH4z/v/buv0WiY/tPpP2H0v4Tw+T+i5csrVtod1/ScOCBycXzkwsW7b9s6ey6Aw9sWDrwwOTcJQvm7dWQXHBgsrGxm0pnGJbrDIuXLc1yCnv0UXToBnSqtSm95ZIldYeY0uc1/MyewZ5o7uJli+YdiAfV5XPQvvkctCyfg47K56Aduudx0LR8Dto5n4Nm53PQgnwOOjCfg47I56Df5HPQb/M56JV8DprcO4+DHs7noKfzOWizPnkcVJnPQTfkc9Dt+Rz0YD4HPZbPQc/lc9Ar+Rz0bj4HfZLPQX/P56Dv8jmopDyPg3rlc9CK+Ry0Wj4HrZPPQcl8DmrI56CF+Rx0YD4HHZrPQcfkc9Cx+Rx0aj4HnZvPQQ/RQezYTW+om9ewJDlvwbzkosVLk0tMMlm3cGFyXt3SOjyu5wr5HXfBCnmAvCyfg57L56CX8znox3wO6r5iHgeF+RxUk89B9fkctCCfg87M56Dz8znoiXwOeiafg37I56BuffM4qDqfg7bI56BF+Ry0NJ+DrsrnoBvyOeidfA76KJ+D1lgpj4PWy+egI/I56Jf5HHRCPgedmc9Bt+dz0Av5HFSych4H9crnoIZ8DlqYz0EH5XPQGfkc9Hg+Bz2dz0GpVfI4qCafg0bnc9A2+Rw0MZ+D9snnoGPzOeiqfA56LZ+D3s7noM1XzeOgLfM5aEI+By3I56Dz8jnoknwOejGfg17P56Cy1fI4aKV8Dtoqn4O2y+egQ/M56Oh8Drotn4Puae9Bwf8DGhdjFrJABwA=","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/public.nr"},"54":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/private.nr"},"56":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::RETURN_VALUES_LENGTH,\n};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::{\n        function_selector::FunctionSelector,\n        private_call_stack_item::PrivateCallStackItem,\n    },\n    address::AztecAddress,\n    constants::PRIVATE_CALL_STACK_ITEM_LENGTH,\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"},"59":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"60":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"},"63":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"},"64":{"source":"use dep::protocol_types::address::{\n    AztecAddress,\n    EthAddress,\n};\n\n#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: AztecAddress) -> EthAddress {}\n\nunconstrained pub fn get_portal_address(contract_address: AztecAddress) -> EthAddress {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/context.nr"},"77":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/abi.nr"},"78":{"source":"mod private;\nmod public;\nmod avm;\n\nuse public::PublicContext;\nuse private::PrivateContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context.nr"},"90":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"},"93":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"104":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext {\n            public_key: self.public_key,\n            secret_key: self.secret_key,\n            contract_address,\n        }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"105":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        GENERATOR_INDEX__GLOBAL_VARIABLES,\n        GLOBAL_VARIABLES_LENGTH,\n    },\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/global_variables.nr"},"106":{"source":"use crate::{\n    abis::{\n        function_data::FunctionData,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    },\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__CALL_STACK_ITEM,\n        PRIVATE_CALL_STACK_ITEM_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x2442dd521c59987a4291be0fd11198e5a4d87c8bc36cf3b65c5229f61fc37b30);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"},"108":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        side_effect::{\n            SideEffect,\n            SideEffectLinkedToNoteHash,\n        },\n    },\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n        GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    },\n    contrakt::deployment_data::ContractDeploymentData,\n    header::Header,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    meta_hwm: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_commitments == other.new_commitments) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.meta_hwm as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            meta_hwm: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"110":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"111":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"112":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::AztecAddress,\n    constants::{\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n        PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::pedersen_hash,\n    header::Header,\n    traits::{\n        Hash,\n        Serialize,\n        Deserialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"115":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs,\n        };\n        call_stack_item\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"118":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"121":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"123":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot {\n            root : serialized[0],\n            next_available_leaf_index : serialized[1] as u32\n        }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            root: 0,\n            next_available_leaf_index: 0,\n        }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"},"131":{"source":"use crate::{\n    abis::{\n        append_only_tree_snapshot::{\n            AppendOnlyTreeSnapshot,\n            APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n        },\n        global_variables::{\n            GlobalVariables,\n            GLOBAL_VARIABLES_LENGTH,\n        },\n    },\n    constants::{\n        GENERATOR_INDEX__BLOCK_HASH,\n        HEADER_LENGTH,\n        NUM_FIELDS_PER_SHA256,\n        STATE_REFERENCE_LENGTH,\n    },\n    hash::pedersen_hash,\n    state_reference::StateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    body_hash: [Field; NUM_FIELDS_PER_SHA256],\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        (self.body_hash == other.body_hash) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.body_hash);\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let body_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n        offset = offset + NUM_FIELDS_PER_SHA256;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            body_hash,\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            body_hash: [0; NUM_FIELDS_PER_SHA256],\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/header.nr"},"134":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"147":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"149":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/field.nr"},"151":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"155":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\nglobal AZTEC_ADDRESS_SERIALIZED_LEN = 1;\nglobal ETH_ADDRESS_SERIALIZED_LEN = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/type_serialization.nr"},"156":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot,\n    constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"},"157":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\n// Copied over from \"yarn-project/aztec-nr/aztec/src/utils.nr\"\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils.nr"},"158":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"163":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{\n        AppendOnlyTreeSnapshot,\n        APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n    },\n    constants::{\n        PARTIAL_STATE_REFERENCE_LENGTH,\n        STATE_REFERENCE_LENGTH,\n    },\n    partial_state_reference::PartialStateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/state_reference.nr"},"165":{"source":"use crate::{\n    constants::{\n        CONTRACT_STORAGE_READ_LENGTH,\n        GENERATOR_INDEX__PUBLIC_DATA_READ,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Empty,\n        Serialize,\n    },\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"167":{"source":"use crate::{\n    address::EthAddress,\n    contract_class::ContractClassId,\n    constants::{\n        CONTRACT_DEPLOYMENT_DATA_LENGTH,\n        GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n    },\n    grumpkin_point::GrumpkinPoint,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"},"199":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n    },\n    hash::{\n        hash_args,\n        pedersen_hash,\n    },\n};\nuse dep::aztec::context::{\n    PrivateContext,\n    PublicContext,\n    Context,\n};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    message_hash: Field\n) {\n    let is_valid_selector = FunctionSelector::from_field(IS_VALID_SELECTOR);\n    let result = context.call_private_function(on_behalf_of, is_valid_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let is_valid_public_selector = FunctionSelector::from_field(IS_VALID_PUBLIC_SELECTOR);\n    let result = context.call_public_function(on_behalf_of, is_valid_public_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(\n    caller: AztecAddress,\n    target: AztecAddress,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash(\n        [caller.to_field(), target.to_field(), selector.to_field(), args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n}\n// docs:end:compute_authwit_message_hash\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/authwit/src/auth.nr"},"253":{"source":"// docs:start:interfaces\nuse dep::aztec::protocol_types::{\n        abis::function_selector::FunctionSelector,\n        address::{\n          AztecAddress,\n          EthAddress,\n        },\n    };\nuse dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n  pub fn at(address: AztecAddress) -> Self {\n    Self { address }\n  }\n\n  pub fn transfer_public(self: Self, context: PublicContext, from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      FunctionSelector::from_signature(\"transfer_public((Field),(Field),Field,Field)\"),\n      [from.to_field(), to.to_field(), amount, nonce]\n    );\n  }\n\n  pub fn unshield(self: Self, context: &mut PrivateContext, from: AztecAddress, to: AztecAddress,  amount: Field, nonce: Field) {\n    context.call_private_function(\n      self.address,\n      FunctionSelector::from_signature(\"unshield((Field),(Field),Field,Field)\"),\n      [from.to_field(), to.to_field(), amount, nonce]\n    );\n  }\n}\n\nstruct TokenBridge {\n  address: AztecAddress,\n}\n\nimpl TokenBridge {\n  pub fn at(address: AztecAddress) -> Self {\n    Self { address }\n  }\n\n  pub fn token(self: Self, context: PublicContext) -> AztecAddress {\n    let return_values = context.call_public_function(self.address, FunctionSelector::from_signature(\"get_token()\"), []);\n    AztecAddress::from_field(return_values[0])\n  }\n\n  pub fn exit_to_l1_public(self: Self, context: PublicContext, recipient: EthAddress, amount: Field, callerOnL1: EthAddress, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      FunctionSelector::from_signature(\"exit_to_l1_public((Field),Field,(Field),Field)\"),\n      [recipient.to_field(), amount, callerOnL1.to_field(), nonce]\n    );\n  }\n}\n// docs:end:interfaces\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/uniswap_contract/src/interfaces.nr"},"254":{"source":"// docs:start:uniswap_public_content_hash\nuse dep::aztec::protocol_types::{\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    hash::sha256_to_field,\n};\n\n// This method computes the L2 to L1 message content hash for the public\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_public_content_hash(\n    input_asset_bridge_portal_address: EthAddress,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: EthAddress,\n    minimum_output_amount: Field,\n    aztec_recipient: AztecAddress,\n    secret_hash_for_L1_to_l2_message: Field,\n    deadline_for_L1_to_l2_message: Field,\n    canceller_for_L1_to_L2_message: EthAddress,\n    caller_on_L1: EthAddress\n) -> Field {\n    let mut hash_bytes: [u8; 324] = [0; 324]; // 10 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let aztec_recipient_bytes = aztec_recipient.to_field().to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let deadline_for_L1_to_l2_message_bytes = deadline_for_L1_to_l2_message.to_be_bytes(32);\n    let canceller_bytes = canceller_for_L1_to_L2_message.to_field().to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_field().to_be_bytes(32);\n\n    // function selector: 0xf3068cac keccak256(\"swap_public(address,uint256,uint24,address,uint256,bytes32,bytes32,uint32,address,address)\")\n    hash_bytes[0] = 0xf3;\n    hash_bytes[1] = 0x06;\n    hash_bytes[2] = 0x8c;\n    hash_bytes[3] = 0xac;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = aztec_recipient_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = deadline_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 260] = canceller_bytes[i];\n        hash_bytes[i + 292] = caller_on_L1_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:uniswap_public_content_hash\n\n// docs:start:compute_swap_private_content_hash\n// This method computes the L2 to L1 message content hash for the private\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_private_content_hash(\n    input_asset_bridge_portal_address: EthAddress,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: EthAddress,\n    minimum_output_amount: Field,\n    secret_hash_for_redeeming_minted_notes: Field,\n    secret_hash_for_L1_to_l2_message: Field,\n    deadline_for_L1_to_l2_message: Field,\n    canceller_for_L1_to_L2_message: EthAddress,\n    caller_on_L1: EthAddress\n) -> Field {\n    let mut hash_bytes: [u8; 324] = [0; 324]; // 10 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let secret_hash_for_redeeming_minted_notes_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let deadline_for_L1_to_l2_message_bytes = deadline_for_L1_to_l2_message.to_be_bytes(32);\n    let canceller_bytes = canceller_for_L1_to_L2_message.to_field().to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_field().to_be_bytes(32);\n\n    // function selector: 0xbd87d14b keccak256(\"swap_private(address,uint256,uint24,address,uint256,bytes32,bytes32,uint32,address,address)\")\n    hash_bytes[0] = 0xbd;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xd1;\n    hash_bytes[3] = 0x4b;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = secret_hash_for_redeeming_minted_notes_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = deadline_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 260] = canceller_bytes[i];\n        hash_bytes[i + 292] = caller_on_L1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:compute_swap_private_content_hash\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/uniswap_contract/src/util.nr"},"255":{"source":"// docs:start:uniswap_setup\nmod interfaces;\nmod util;\n\n// Demonstrates how to use portal contracts to swap on L1 Uniswap with funds on L2\n// Has two separate flows for private and public respectively\n// Uses the token bridge contract, which tells which input token we need to talk to and handles the exit funds to L1 \ncontract Uniswap {\n    use dep::aztec::protocol_types::{\n        abis::function_selector::FunctionSelector,\n        address::{\n            AztecAddress,\n            EthAddress,\n        },\n    };\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        oracle::{context::get_portal_address},\n        state_vars::{map::Map, public_state::PublicState},\n    };\n\n    use dep::authwit::auth::{IS_VALID_SELECTOR, assert_current_call_valid_authwit_public, compute_authwit_message_hash};\n\n    use crate::interfaces::{Token, TokenBridge};\n    use crate::util::{compute_swap_private_content_hash, compute_swap_public_content_hash};\n\n    struct Storage {\n        // like with account contracts, stores the approval message on a slot and tracks if they are active\n        approved_action: Map<Field, PublicState<bool>>,\n        // tracks the nonce used to create the approval message for burning funds\n        // gets incremented each time after use to prevent replay attacks\n        nonce_for_burn_approval: PublicState<Field>,\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n    // docs:end:uniswap_setup\n\n    // docs:start:swap_public\n    #[aztec(public)]\n    fn swap_public(\n        sender: AztecAddress,\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        // params for using the transfer approval\n        nonce_for_transfer_approval: Field,\n        // params for the swap\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        // params for the depositing output_asset back to Aztec\n        recipient: AztecAddress,\n        secret_hash_for_L1_to_l2_message: Field,\n        deadline_for_L1_to_l2_message: Field,\n        canceller_for_L1_to_L2_message: EthAddress,\n        caller_on_L1: EthAddress,\n        // nonce for someone to call swap on sender's behalf\n        nonce_for_swap_approval: Field\n    ) {\n        if (!sender.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, sender);\n        }\n\n        let input_asset = TokenBridge::at(input_asset_bridge).token(context);\n\n        // Transfer funds to this contract\n        Token::at(input_asset).transfer_public(\n            context,\n            sender,\n            context.this_address(),\n            input_amount,\n            nonce_for_transfer_approval\n        );\n\n        // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n        let _void = context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n            [input_asset.to_field(), input_asset_bridge.to_field(), input_amount]\n        );\n\n        // Create swap message and send to Outbox for Uniswap Portal\n        // this ensures the integrity of what the user originally intends to do on L1.\n        let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge);\n        let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge);\n        // ensure portal exists - else funds might be lost\n        assert(\n            !input_asset_bridge_portal_address.is_zero(), \"L1 portal address of input_asset's bridge is 0\"\n        );\n        assert(\n            !output_asset_bridge_portal_address.is_zero(), \"L1 portal address of output_asset's bridge is 0\"\n        );\n\n        let content_hash = compute_swap_public_content_hash(\n            input_asset_bridge_portal_address,\n            input_amount,\n            uniswap_fee_tier,\n            output_asset_bridge_portal_address,\n            minimum_output_amount,\n            recipient,\n            secret_hash_for_L1_to_l2_message,\n            deadline_for_L1_to_l2_message,\n            canceller_for_L1_to_L2_message,\n            caller_on_L1\n        );\n        context.message_portal(content_hash);\n    }\n    // docs:end:swap_public\n\n    // docs:start:swap_private\n    #[aztec(private)]\n    fn swap_private(\n        input_asset: AztecAddress, // since private, we pass here and later assert that this is as expected by input_bridge\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        // params for using the unshield approval\n        nonce_for_unshield_approval: Field,\n        // params for the swap\n        uniswap_fee_tier: Field,// which uniswap tier to use (eg 3000 for 0.3% fee)\n        minimum_output_amount: Field, // minimum output amount to receive (slippage protection for the swap)\n        // params for the depositing output_asset back to Aztec\n        secret_hash_for_redeeming_minted_notes: Field,// secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        secret_hash_for_L1_to_l2_message: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n        deadline_for_L1_to_l2_message: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n        canceller_for_L1_to_L2_message: EthAddress, // L1 address of who can cancel the message to consume assets on L2.\n        caller_on_L1: EthAddress // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n    ) {\n        // Assert that user provided token address is same as expected by token bridge.\n        // we can't directly use `input_asset_bridge.token` because that is a public method and public can't return data to private\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_token_is_same((Field),(Field))\"),\n            [input_asset.to_field(), input_asset_bridge.to_field()]\n        );\n\n        // Transfer funds to this contract\n        Token::at(input_asset).unshield(\n            &mut context,\n            context.msg_sender(),\n            context.this_address(),\n            input_amount,\n            nonce_for_unshield_approval\n        );\n\n        // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n            [input_asset.to_field(), input_asset_bridge.to_field(), input_amount]\n        );\n\n        // Create swap message and send to Outbox for Uniswap Portal\n        // this ensures the integrity of what the user originally intends to do on L1.\n        let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge);\n        let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge);\n        // ensure portal exists - else funds might be lost\n        assert(\n            !input_asset_bridge_portal_address.is_zero(), \"L1 portal address of input_asset's bridge is 0\"\n        );\n        assert(\n            !output_asset_bridge_portal_address.is_zero(), \"L1 portal address of output_asset's bridge is 0\"\n        );\n\n        let content_hash = compute_swap_private_content_hash(\n            input_asset_bridge_portal_address,\n            input_amount,\n            uniswap_fee_tier,\n            output_asset_bridge_portal_address,\n            minimum_output_amount,\n            secret_hash_for_redeeming_minted_notes,\n            secret_hash_for_L1_to_l2_message,\n            deadline_for_L1_to_l2_message,\n            canceller_for_L1_to_L2_message,\n            caller_on_L1\n        );\n        context.message_portal(content_hash);\n    }\n    // docs:end:swap_private\n\n    // docs:start:authwit_uniswap_get\n    // Since the token bridge burns funds on behalf of this contract, this contract has to tell the token contract if the signature is valid\n    // implementation is similar to how account contracts validate public approvals.\n    // if valid, it returns the IS_VALID selector which is expected by token contract\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let value = storage.approved_action.at(message_hash).read();\n        if (value) { IS_VALID_SELECTOR } else { 0 }\n    }\n    // docs:end:authwit_uniswap_get\n\n    // docs:start:authwit_uniswap_set\n    // This helper method approves the bridge to burn this contract's funds and exits the input asset to L1\n    // Assumes contract already has funds. \n    // Assume `token` relates to `token_bridge` (ie token_bridge.token == token)\n    // Note that private can't read public return values so created an internal public that handles everything\n    // this method is used for both private and public swaps.\n    #[aztec(public)]\n    internal fn _approve_bridge_and_exit_input_asset_to_L1(token: AztecAddress, token_bridge: AztecAddress, amount: Field) {\n        // approve bridge to burn this contract's funds (required when exiting on L1, as it burns funds on L2):\n        let nonce_for_burn_approval = storage.nonce_for_burn_approval.read();\n        let selector = FunctionSelector::from_signature(\"burn_public((Field),Field,Field)\");\n        let message_hash = compute_authwit_message_hash(\n            token_bridge,\n            token,\n            selector,\n            [context.this_address().to_field(), amount, nonce_for_burn_approval]\n        );\n        storage.approved_action.at(message_hash).write(true);\n\n        // increment nonce_for_burn_approval so it won't be used again\n        storage.nonce_for_burn_approval.write(nonce_for_burn_approval + 1);\n\n        // Exit to L1 Uniswap Portal !\n        TokenBridge::at(token_bridge).exit_to_l1_public(\n            context,\n            context.this_portal_address(),\n            amount,\n            context.this_portal_address(),\n            nonce_for_burn_approval\n        );\n    }\n    // docs:end:authwit_uniswap_set\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    internal fn _assert_token_is_same(token: AztecAddress, token_bridge: AztecAddress) {\n        assert(\n            token.eq(TokenBridge::at(token_bridge).token(context)), \"input_asset address is not the same as seen in the bridge contract\"\n        );\n    }\n    // docs:end:assert_token_is_same\n\n    // /// Unconstrained /// \n\n    // this method exists solely for e2e tests to test that nonce gets incremented each time.\n    unconstrained fn nonce_for_burn_approval() -> pub Field {\n        storage.nonce_for_burn_approval.read()\n    }\n\n    // TODO: remove this placeholder once https://github.com/AztecProtocol/aztec-packages/issues/2918 is implemented\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; 0]\n    ) -> pub [Field; 4] {\n        [0, 0, 0, 0]\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/uniswap_contract/src/main.nr"}}}