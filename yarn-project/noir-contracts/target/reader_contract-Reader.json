{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","name":"Reader","functions":[{"name":"check_name_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"what":[{"start":37,"end":68}],"who":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492]},"bytecode":"","debug_symbols":""},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243]},"bytecode":"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","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"get_name","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"who":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"string","length":6},"visibility":"public"},"return_witnesses":[1,2,3,4,5,6]},"bytecode":"H4sIAAAAAAAA/81XW27EIAx0EhICrFSpvUCOQKp9SP3a+5+qgUKZddimUp2oltAC3njGY5zHQESavqxbRkNry3v39Ov/ZrNgLN8AxwHmbcpHLaNPvo/k15DbJMXl7G8BJwJWdLSJE8F/Aqc34KTkOc065S8a1/urpqKjYNxYz5GKPhPg9KCVoaKzEPaM2E0aGSfvdzB/pWIG5i3wDOaonE3z5BrFrjmBf6jkPQnnzXtCM44K9l6W0ag1tz3OWeibjh6N99YEczwj4v3kd+snr0HLUSzu5T1rka1jOp3Aj7XcobfjOevpsW5YL44tp8P1kuP9pMNY4TIerMNYwRbUIT57zYYOpsJlr/vOMx1MBVtQh3OIYTd0sBUu9mAdkONv+ep/wBex5ep2i/czt6GDq3BxB+uAHHrG1YJfwV7LcsFnnwMtV+/od8GE2gSQgdo0cN2xtWLrnq0HWOeEah8aWy/w3/YJw/Xv0bYMAAA=","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"check_symbol_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"what":[{"start":35,"end":66}],"who":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268]},"bytecode":"","debug_symbols":""},{"name":"check_decimals_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"what":[{"start":37,"end":38}],"who":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468]},"bytecode":"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","debug_symbols":""},{"name":"get_symbol","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"who":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"string","length":3},"visibility":"public"},"return_witnesses":[1,2,3]},"bytecode":"H4sIAAAAAAAA/81WUQ6CMAwt24CJJCZ6Af79GTr/uf+pBFzdsxBjYjE2aei60b6+tcksETl6iB21oKWwb0jf8J30irFCARgt2Catz8lXQz2dVv4YYkmZQMldk3AQnKlGPQEmp4+pn+KW2nFDuNaUeVSMO9+hp8xPB3lK4GpHmWel3D3mLpJyHvZbsI+UZQe2AZyT7FMt8hzaTvzTwn61UnenXLeciVpgdOA7jFq4zAdj26LPGsjBImerAxt7RH2ewmbzFKa4fM9eLe7twlywWMFTC/vYZxvM9txnJb3eG96XzK3HQ4wc7x0PfgWL/zEPiPFTvNUf4G3AZ8HH+w58RtSCM+7hu3h/DIoFmZSAE5mkuLawxgeFlLXHxlPuQlNOBVYJAAA=","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"check_decimals_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"what":[{"start":35,"end":36}],"who":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},"bytecode":"","debug_symbols":""},{"name":"check_name_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"what":[{"start":35,"end":66}],"who":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268]},"bytecode":"","debug_symbols":""},{"name":"check_symbol_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"what":[{"start":37,"end":68}],"who":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492]},"bytecode":"H4sIAAAAAAAA/+1dCZhcRbW+w2RjZtg3ka0HMpkMk0m6ezozE8IkgZAEyL4S1uxB1rAEUBADrijijoiIiCgugAuoiIoPxV0UF9z33ee+PfWpT19V9/kz/5yp7sw0VZNubt3vq6+qzq269Z9TdatO7ZP2SJIrGpLiYy3jTRqNyZB/jLjhH6v845R/vIq/p/Lvpfz7KP9+yn+A8h+k/G3GTCD/JOVvV/7Jyt+h/Mcqf6fyT1H+LuWfqvzTlD+r/Dnlzyt/t/IXlH+68vcof6/y9yn/DOU/TvlnKv/xyt+v/LOUf7byz1H+E5T/ROWfS/4Jkvf2mWjMv5NS/lt7ktjtYk8Wu0PsY8XuFHuK2F1iTxV7mthZsXNi58XuFrsg9nSxe8TuFbtP7BliHyf2TLGPF7tf7FlizxZ7jtgniH2i2HMJ/0nJ4Ed+5WJc+3RnewqFLb35Lbnu3IZsfsbGvunZwvSNPX25vtz0vumb833d3Vv6Cn29MzbO6M3OyBW6t+S2Tp/RvTVbeubRt7JP8tH5d5LwMS+lts2/+Umpvh2TDH10Xmaf3JOb6O9bWQfcJ/3t7s3dG7O9mzeG+LYLt2/5jveIs5dwLhD7ZLFPEftUsReKvUjsxWIvEXup2MvEXi72CrFXir1KZIKyuNqYNcacZsxaoZ0uYeaI/wxjzjTmLGPONuYcY9YZs96YDcbYzNxkzGZjthiz1ZhzjXmGMecZc74xFxhzoTEXGXOxMduMucSYS425zJjLjdluzBXGXGnMVcY805hnGXO1MdcY82xjrjXmOcbsMOY6Y6435rnGPM+Y5xvzAmNeaMyLjLnBmBcb8xJjbjTmpcbcZMzLjHm5Ma8w5pXGvMqYVxvzGmNuNua1xtxizOuMuVXJ6/XG3GbMG4y5Xd5l5N0bjbnDmDcZc6cxbzbmLmPeYsxbjbnbmLcZ83Zj3mHMO425x5h7jbnPmHcZ825j3mPMe42535gHjHmfMe835gPGPGjMB415yJgPGfNhYz5izMOCBYX/o8b8lzGPGPMxYz5uzKPGfMKYTxrzKWM+bcxnjPmsMZ8z5vPGPGbMF4z5ojGPG/MlY75szFeM+aoxTxjzNWO+bsw3jPmmMd8y5tvGfMeY7xrzPWO+b8wPjPmhMT8y5sfG/MSYnxrzM2N+bswvjPmlMf9tzK+M+bUxvzHmt0rmvzPm98b8wZg/qnd/MubPxvzFmP9JBvQJ+/zVmL+J++/q3f8a8w9F+6cx/xL3/4n9b7H/I7aNwHEajGcPqWQaxR4j9lixx4k9XuwJYu8pdpPYzWK3iL2X2HuLvY/Y+4q9n9j7i32A2AeKfZDYB4t9iNhPE/tQsZ9u7O8cKBiTgSeTeKrrCpv7xhYFI/JJBj9NyYA88dLSGoXUQDTE3YNoY4XWKDTbV/kifXuM0Pcg2lihNRJtnMJnaePFM5ZoEygd0PYU2niiNQltAtGahbYn0VqIF9h7Ca2ZaHsLrYVo+whtL6LtK7S9ibaf0PZJBnBCr8wkvvI5l7ffnef7u+bL9rsL/H+3qK+izR0n30Y680hWaI8b/KWd47TRt0Y6oDeS+5hk4DmF3PuKDdy2zMx3hGP3SSpOC72f7+A745nvBYQlQ36kZ4vr08Rty+/BUn73J2wBym9vmPJbyMbyW+pb4+GyeIDYT7Xy2044/JfV6b2xrh32M+KyinQ5T+1zkNhPtbI6nXAEKKsbw5TVfKxXk4ExAM5T+xwi9lOtrM4lHP7Lam+gstody2pSGkNKVJ7a51Cxn2pldTnh8F9WN2yMOsCwnxGX1fOTgYfL3WFiP9XK6jrCEaCsbo1lddjPiMvqM5OBh8vdEWI/1crqRYTDf1nd2B2orOZjWS3NzyQqT+1zlNhPtbJ6jbjtONb7ZRyrlbAFKL89sfwO+xlx+b05GXi4LB4t9lOt/L6EcAQoq32xrA77GXFZvSsZeLjcTRT7qVZWXyduW9d+SOraSUT7sNDaifYRoU0m2sNC6yC+ApT9LbHsD/sZcdl/fzLwcDk+VuynWtl/p7ht+X1Eyu8Uon1MaF1E+7jQphLtUaFNI9onhJYl2ieFliPap4SWJ9qnhdZNtM8IrUC0zwptOtE+J7Qeon1eaL1Ee0xofUT7gtBmEO2LQjuOaI8LbSbRviS044n2ZaH1E+0rQptFtK8KbTbRnhDaHKJ9TWgnEO3rQjuRaN8QGsY97Rw+1jQ8ITRb9qB/ZBJfZW9zoUm+x0+D8vP7owlPq3c82dyeycB84aYNF1647LLzrtywfcv8Ky7etP28bRc3EETAekLBbkgGs4D3Y4i2B7kbyc1hxjpo/ITJklJ10ErpZMh/dEw7tWkf4z/tfBOlgafS7w8MLUoW9mmi94x7YiCZHaMwwj+RMILWGhhPk8KzKzlOdOD5tz882RaHPGxabQF4r1R+22ok7Un+0y7+O23J4KdSnk8iPJMDyKKJ0hgOnsmEpz0AnkB8FjXUjmSoXJFWC73nst8RgMcGShffhr+D8LQprE0Urq1GMILGXedxSo5WF2poGMCLf81j3VXEi/Rs+jsIB9JrpDB3HTiADUuym+n90cRPRtEC1Q051k/xbfiRXnMyWIUGDe5jCCPyxKecGQtjQFrcxk8kGU52yLAWym0r0SA7lrX+3ywvxyqa5aUzEC9IC9+Gv5Mwgq9jCc+xgfB0KDyutIHNp25ivzslEE8Y+sDQFfAjvUYKc5TUFVhGD7p9UFY4b45V4caTO5OMjk5TK2kHyL+iPsV5YJ8G5c+QewrhmeYfT3FoZMoI8EwjPFP948kF4rOoT2UdckVaLfS+k3jMBuCxgdLFt+FnjBFvxJslPF0KaxOF66oRjKDxUPx4JUerw55E+nWA9rfQQHKCfq1xNFKYC0i/Ppn0a7xn/bpD0UL1dSvpL0ivmfjpIBrcgfXrAmNhDC79msvtJIcMQ42daP0f/jbCCFon0SA7ljXC8fTTREULNW3AfUZ8G/5Wwgi+XONvvvG0KTyutAP0n4v6dcY/T8V6A3UX9GvOS/s0UpiNSr8G3T4oK5w3E1W4QHxkGxSWTDK4DNiHxwoYD+pzn/1w+92cfz6L+YVpWuQX8CO9Rgpzocov3s6H/EJ8m1/TVDjmoyHxm1+MhdtbnprOOfBg+tljfhWXXmAKO5P4zS9MgyO/gB/pNVKYK1V+gW4f5Bfi2/zqVuGYD9/5xVgaKG2e+p/uwIPpfY/5VVzqiyUCmcRvfmGZAfIL+JFeI4W5TuUX6PZBfiG+za9eFY758J1fjKWB0ualFTMceGb6l2ux7ewkPBnyz6yRtI/3n3Zx/GNmMvhpUP4MuY8nPLO849m0tYnSGA6eWYSn3zueUjvpn8/S+MfsZKhckVYLvW8lHmcH4LGB0sW34WeMEW/EG/FGvBFvxBvxRrwRb8Qb8Ua8EW/EG/FGvBFvxBvxRrwRb8Qb8Ua8EW/EG/FGvBFvxBvxRrwRb8Qb8Ua8EW/EG/FGvBFvxBvxRrwRb8Qb8Ua8cyLeiDfijXgj3og34o14I96IN+KNeCPeiDfijXgj3og34o14I96IN+KNeCPeiDfijXgj3og34o14I96IN+KNeCPeiDfijXgj3og34o14I96IN+KNeCPeiDfijXgj3og34o14I96IN+KNeCPeiDfijXgj3og34o14I96IN+KNeCPeiDfijXgj3og34o14I96IN+KNeCPeiDfijXgj3og34o14awCvxTNTYW2icDNrBCNo/YRxgpLjGGOeGDOAt0/o//aGd9NWi/c4+dY4Y3YQDqTXSGG6DxzA9k3B1kzvjyZ+ehXN8tBDcpnjhYeSzJEWvg0/0msmfnqJBvcxhLGQ+JczY2EMSKuF5HQcybDbIcN8IBl2J4NlCH+eMILWRzTIjmWNcDOJl6yiWV6mBeIFaeHb8E8jjOArS3iygfDkFZ6Ydm2kHaD85bms42lQ/gy5gaGF4uH/aaL3jHtqIJlNUxjhn0oYQcsHxtOk8OxKjlMdePzV4dlsi0MeNq2uALxXKr9dNZL2FP9pF/+drmTwUynPpxCeDv94+poojeHg6SA8nf7x5ALxWaxaJidD5Yq0Wug9l/3JAXhsoHTxbfgZY8Qb8Ua8Ee9TAa/F06WwNlG4rhrBCFonYdxTydEOC3SPHcCLvq5HXazP4kUfFOMWwIH0GinMPw8YwNYr2HhMIEv89CgajwlkEr8y5zGBDPmRHo9RcP8a7mmEsTuAnBkLY+gmLFo3ZJ2Jy20IfaghGayfZcjfSRhRNllfDKC/FvFMVXhcaQObz/5JKB3Y8oQ6YJx8G/iRXiOFWSj/197i53oYZYXzZooKx3x4lE9Rd24PJJ9JSj7A307yQZgVSj6gs3w6SD6TVTjmw6N88va7bYHkM1HJB/jbSD4Ic7qSD+gsn3aSzyQVjvnwKJ9u+92jA8mnVckH+I8m+SDMeiUf0Fk+bSSfiSpcID6yDQpLhtLmeYGjHXgwJuwxvwr2u8f757OYX5i3QX7pOadGCnO+yi/Q7YP8QnyeS+kn+eC7DYnf/GIsPBfEc2fHO/BgLstjfk0fT9/KJH7z6wT5FvIL+JFGI4XZrvILdPsgvxDf5tcsFY758J1fjIXnGpFGE7kZz1xxe8yvHvvdk+RbmcRvfs2TbyG/gB/pNVKY56j8At0+yC/Et/l1ogrHfPjOL8bSQGkjvSZyM54F4vaYX732uyfLtzKJ3/w6Rb6F/AJ+pNdIYW5Q+QW6fZBfiG/za74KF4iPbIPCkqG0kV4TuRnPqUnpySSjM6+N9GzaC72nXVoXsEi+hTxFPxDpNVKYV6s8XTQAe2cfm/u0pzrCsRthebwmq77XRFi4r7448S2PUl4sJHwZ8i8mjKD1Em2a4i9MnlUuLwvDyifPeYGnQfkz5F5MeJb6x1NoojSGg2cp4VniH08uEJ/FYr8sGSpXpNVC7zuJx2UBeGygdPFt+BljxBvxLiM8uh5tonALawQjaEsIY5OSox1bfpjGvQPocAWta+0gHEiPda1Hadz7YzTujfc87j1f0SwP80guc/zwUJQ50sK34Ud6zcTPfKLBzePeAfo2BcbCGFz9iIUkw9mKZvHNCiTD2UqG8M8ijOgDziY8oda9nqDwjGbaC1TaCxxp+8+Hkp6sx4LmqXzgsaCvVxgLwj/J/8BsFY758Dk2rrFoHlj/Bk5b3jFuxXUGxpAyid88nkn4MuQ/jjCCtoBo0xwyDIAx68I4W2FsIjevg+0LJLNy/0Ufpd3rP+1if6AvGfxU0r97CY//udZCltejDwdPgfCEWLMehs/SHGCAeeDi75135BevX8f7bpJdqLXqBZVv8OfDpl2Uw9RdyGGqA0uo9brl5MAYh4u3u87wRvlG+Ub5RvmWwxvlG+Ub5RvlWw5vlG+Ub5RvlG85vFG+Ub5RvlG+5fBG+Ub5RvlG+ZbDG+Ub5RvlG+VbDm+Ub5RvlG+Ubzm8Ub5RvlG+Ub7l8Eb5RvlG+Ub5lsMb5RvlG+Ub5VsOby3I1+LR53I3Ubi+GsEIWg/hAW2OPzzFderN8i183+7d+tu4gXQXCN3f+u78oL3v4+S7wOHaV5bQvrJ/CjbeV8Z7tOcrWq3tKxtPbt94Fig8rrQDyCLPcsfToPwZcvPZEwH2aBX3Y88bAR7etzXXP55cID6zgfZnFfcduPZn8Z0SeD+LZNcfQHYNSfm9h4wx4o14+wmProt5v+z8GsEI2lzCw2dFecJTbOdb5Fv4vm1Ljxk/kO7cAOk2kPzHyndbFM98ttLv9hvA1i7Ymuk98q1cXu7Ovc9zlXwD1flFPHMVHlfaAWSRZ7njqdSucl0w0zuefJbvWhoOHt4DG+K/D8NnqZ33fx9TqZ3vdeQXeGih94H38Fbcc90bNu2iHHp2IYceB5ZQ90uVkwNjHC7evjrDG+Ub5RvlG+VbDm+Ub5RvlG+Ubzm8Ub5RvlG+Ub7l8Eb5RvlG+Ub5lsMb5RvlG+X75PDy3Baw8vmds2sEI2h8Vidoc/zhKc5T7CXfwvftHNcjNP/mfx4/V5x/w/wY1tnspfKlkcJ00vzbJ2j+De+Rb00ks9kO2WUSv3nJc88Z8vM9RuCH8zLU3O4shceVdgBZ5FnueBqUP0Nunu/yP2/SneV/ejh4uG4KcQZtqPkhrqd8z78VHPnF93lUWguYSfyW63L3eTDGesIbKO1ivnXvQg7dDizdoywHxjhcvD0Rb1C8sTxEvLE8RLzl8MbyEPHG8hDxlsMby0PEG8tDxFsObywPEW8sDxFvObyxPES8sTxEvOXwxvIQ8cbyEPGWwxvLQ8Qby0PEWw5vLZQHPo8CWPlO3v4awQiaa2/1HH94iut09pZv4ft2jdftEwbShZx8rz/D+jCsP9tb5UsjhZm97wC2OwWb615yvu+53yG7TOI3L/lu6Uwy9AyxZuKH8zLUPdvl1jam657t0jlPvSPAw3VTiHWnodYbcT2V5nu2I96IlzGO5DzH3YlRr4m0GPdRcrRt3meoPQY/Hv/3gsWL9tK2xzsIB9JrpDDjqT1+jNpjvM8SPz2KFqguLMqc90JkyI/0momfHqLBPY0wBqhXC4yFMbDuBzmxTpN3yDDUOaR5JUP4+RxS0FjPh+xY1gjH53B2KZrlpTMQL0gL34a/kzCCry7C0xUIz1SFZzTTLtfv6AqbD3nOczyVdLFOwtPuH09RN+wcAZ52wtPhH08uEJ9F3bBNvuVbN5yYDM0v8NBC79tIdhMDyK6B0sW34WeMEW/EO5Hw6HagicJ11QhG0DoI475Kjlb/atxzAG+AswCduiFwID3WDR/fZwDbeMFWTjfsVbRQ/e9K7R/rga7xG7hZNywEkDNjYQzcx3Lpht0OGYbSp7qVDOHvJIyg9RENsmNZI1wX8dKhaIHaxiIvSAvfhr+dMIKvDsITQgdoSAbrJJlRTrvcOGZH2HzIc57jGa4uFqBuznM7MBw8EwlPm388uUB8FnXDVvmWb91wYTI0v7hdw/tWkt3CALJrSAbrJRnyM8Z6wmvx6HqqicJ11AhGre9ZjPspOVr9oCes7pJ36S7A4dJdbiHd5biouwxbzoyFMfBYENp01mfbFC2kzt2WDJYh/BMJI/4p7qeEqNcr9QFGI+1y7X3Y/tmmrTZt/P/jksFjtEivkcIslX8Qc8OtA7B3/pP8D7SpcMyHx/Ke01g0D+V0ddSRXGcsEncm8ZvH3K5lyL+IMILm0tVbw2LMujC2KYxN5F5IeBYHklm5/2Ixpb3Ef9pFvXNxMvippHcuITzLAuFZMgI8ywjPUv94coH4LOrBy+VbvvXgFcnQ/AIPLfR+OcluRQDZNVC6+Db8jLGe8Fo8ixXWJgq3uEYwgraUMO6v5Gh1zStJD0Z74VsPRv0JPRg4kF4jhVlHevDVpAfr9ovX/XCbtjvXW4GfPqLBzXpwgHOb8oyFMfDZcpDTQpJhwSHDUGM95dYldBBG0PhOKsiOZY1wi4mXNkXb3To9+BoNvbrcmOJopF3uLLzAcy55znM8wx0zC6VLTRwBHtalWv3jyQXiM8u6lm/dZZkjv8CDq10LpJ8Vy/USlW9aN6k3vBaPrqdY326rEYygtRLGA5QcrX7wjt2guwCHS3dpJ93lvqi7DFvOjIUx8PiKa1x3saIFqu+KMlysZKj7ABYjyivrH6HGC1oVntFMu1x7H3asojSGh/8fY3i9Kh8aKczH1Rje0gHYO/9J/gcWq3DMh+8xPMaieQhZ/5bLOx5HWe497VLeoX+KvIMMkF4jhXlM5R2PESDvEL852fW4AsJy2+zqDwEL18srE9/yKOXFcsKXIf9Kwgiaqz+0gjD6z7PK5WV5jaQdIG/yXA7wVNLjVxKe1d7x5IrrRleOAM9qwrPKO55Sv8I/n6V+xRr5lu9+xWnJ0PwCDy30fg3J7rQAsmugdPFt+BljxBvxRrwRb8Qb8Ua8EW/EG/FGvBFvGvHyOAiwNlG45TWCEbRVhPFAJUc7NzCjaQCv//HFXEGPk+4gHK5x0t/vPYCtX7A103uet3CtIwx1p1m5dYRIr5n4WUg0uHnewv8a71yBsTAGXtMIOfE6nF6HDHfX+m0+84nHRiE7ljXCLSde2hQt5LqncmsuVhBG8DUa6x7KnfnQFlgWI133sMKBx+f4WosjL0KOm5eTO4/DBhj3zI90HHYV4VkTCM+qEeDhtjzA+G0uEJ9Dxm9XKX5YX+HyF0oXWJMMli/85fSrWsdr8axUWJso3MoawQjaasJ4kJKj1WEuIf0qwBrrvJ7L3EE4XHOZHyX9ajvpVyuUfO2rpYoWck0Dz0FnkqFzpM3ED8+Jh1hnX2k+lOd54eY2FnqX7zUpvFYJ6fJewzYlr5C6cLk2j8+aDHC244jv9+WzlQK0MSM+7zHOhQ5+7DdOc+RXvYxV1DpePueXzx5DuP4awegaqzhYydG2V7dSWxqinnWNVQAH0uOxipdSW3q7Y6zCtecxcB1ZcayC11PqsQqWqW885dbZusZJuC2F3uG7LeU6G+nyOqc2Ja9Q9XWltpT7a6HarpH017jtClBXbOB6aTh4TiM8Afp5uUB8FtvStfIt323p6cnQ/OJ6Fu/XkuxODyC7hmRwO5khP2OMeCPeiDfijXgj3l3htXhWKaxNFG5VjWDU/T+L8RAlR9tf+HHYvswGixc6LfoywMF9GYQ5g/oyP6e+jGsstl/RQvZlyq27576Mq2+1O+eBXXuOUWZ95jHLgTHweISrLxNCX67Ulwk8FpLn+QE8w+07BKgrerheGg6e0wnPWv94coH4LPZlzpBv+e7LnJkMzS+uZ/H+DJLdmQFk15AMbicz5GeMEW/EG/GODl6efwXWJgq3pkYwav3ZYnyakqPVtw5rHsALncpjfdrD4/DQBYED6TVSmMmkCx4l2JrpPeu2/Yq2u3VB8DMauuAqhWc00y43P+2aX/DZNgc6GyLP+iP2ZOuzIRopTJeUS+zJZt0Taxm4XOhzMpkPn/vpA63xy3P/U5830EbyQZiCks9pDvn0knx6VLhAfGQbkqH9aL1WkdcUMp4QunGl+am1o5B2uf5k6DGXJkoDz3D6KC0Ury8wxkry4T7TGf7TzrM+MRz5sF50ViA8Z4wAz1mEJ4QOFIjPYt/v7GSoXJFWC73n8nd2AB6tfJGufTLkZ4z1hJf1UmBtonCn1whG0M4kjIcqOVr99AzSnQOsURrS7u4gHEiP292/7TWA7RzSnXWfyvKzQtF4jWgm8StzPn8mkww9x7aZ+HGt0feNp9waW94/ATe3hSHuR2A5MAbeO7NWySuQHlyxzeultAPs0cmP9L5o1qUDtDF9fG/qcPCcSXgC6AS5QHxmuS31PY56tiO/eIwC71lfCFXvn6nyDf5ybWnEG/FGvBFvveLl/ax8tznC9dYIRj22bzE+XcnR6rO3ka4dQA/rYz0VujZw8D1VCPNJ0rXvIF17pZIvn6HHMg+13rnc2Cyvd3bdI7G7dP+QaZfT85c78sH3OHWIPUiucWq9vp7Hqe+rME6NPiGXi+UqXKB/LRdoTDPPc2N6HH8tyQdh3qfkc7pDPjyO36PCBeIj25AMnePrUXzwGGrg8ciK/3HgOdk+HrPRZR7pNVKY/1J5yuM9qJu5zOsxs5B8nK346HPwgTCfVHyc7eCDy6YexwrVX2xQWDKJe7zsTAeedeL2OX5iv7veP5/F/Nog30J+AT/Sa6Qwj6v8At0+yC/Et0HPUeGYD4/y6bbf3RhIPpuUfIB/I8kHYb6u5AM6y2c9yWeDCheIj2yDwpKhtJFeE7kZzxZx+7yD3H53q38+i/l1rnwL+QX8SK+RwvxQ5Rfo9kF+Ib4NulmFYz48yme6/e4zAsnnPCUf4H8GyQdhfqHkAzrLZyvJ51wVLhAf2QaFJUNpI70mcjOeC8Ttc/2P/e6F/vks5tdF8i3kF/AjvUYK80eVX6DbB/mF+Dbo+Soc8+FRPr32uxcHks82JR/gv5jkgzB/V/IBneVzIcnnIhUuEB/ZBoUlQ2kjvSZyM55L/OOpuPbqEkr7Uv9pF9fSXSbf0row0mukMI0tJRt5etkA7J3r6VgXvkSFC8nH5YqPPgcfCLOn4gN05oN14ctUuJB8bFd8rHPwgTD7KD5AZz5YR7xchQvJxxWKj/UOPhDmIMUH6MzHeuJjuwoXko8rFR9bHHwgzGGKD9CZD9ZxrlDhQvJxleJjq4MPhGlVfIDOfLAucqUKN57cmcRvXVlufVutpB0g/4pz2ZwH9mlQ/gy5LyU8z/KPp7gn6NIR4HkW4Xmmfzy5QHwW55yvTobKFWm10Hs+e+TqADw2ULr4NvyMMeKNeCPe0cFr8VylsDZRuKtqBCNozySMhyk52nnHJS0DeNHv8b13B3LCnChwIL1GCnMTzYmuEGzN9J7Pz75I0QKNE+R4nADfhp/7s+DnIqLBzednhxgjYSyMgccjME5zFclwq6LxmGTGswy3JoNlCD/rxxhn2kp4Aoxl5ngsE992pR1gfLY4t7vJP089rvkG4Ed6PN+wVen8oNsHZYXzZqsKx3z4nttdH0g+65R8gH89yQdhLlLyAZ3ls4nks0GFCzQfkw+03qbHNU8K/GeTfBBmu5LPWQ75rCf5rFPhmA/f81UhzkWw8tF72ID/dJIPwlyj5HOaQz5nk3zOUuGYD9/zQwHO0BiyTzeTDN3TzPt0n6vks9ohn9NJPqepcIH2TEznfcwZz/JZqeQD/LyPGWFerOSz0iGfNSSf1Src+CTcvQF6PH2bI23/MnTffXyhQ4YI80olQ16DAp2SdbiVjnDsRthNQfmsLGM+t8j/GsCSjDEWDhlDBnz2EsK8XsmYz/S5VMmQ97hzOHYjLGTMd79wn8t1f87u2tPSQrRtRJum+AuTZyWMJyiM8I/GGbkLVNoLRjHtuSrtuaOY9iyV9qxRTHumSnvmKKY9VaU9dRTT7lRpd45i2u0q7fZRTLtDpd0ximm3qrRbRzHtXZ2/HTLtcm1wraTt/wyQTVs5DTsO5zrHBO8/Rm1/bNti2+Yr7di2xbZttNJOa9sW69RYp45W2rFOjXXqaKUd69RYp45W2rFOjXXqaKVdy3VqM7mPITxYf+RvfGJz8a547GUeQ+kiLd6/PkHWE9nxCV6ndazYlsbrtEC7Rtw5oj1b3NOJdq24ZxDtOeKeQrQd4p5MtOvEPYlo14v7aKI9V9zHE+154p5DtOeL+ySivUDcJxPtheI+lWgvEveJRLtB3CcQ7cXiPo5oLxH3KUS7UdwLiPZScc8j2k3inku0l4l7PtFeLu5ZRHuFuGcT7ZXinkm0V4k7T7RXi3sq0V4j7m6i3SzuTqK9VtxdRLtF3O1Ee524FxHtVnEXiPZ6cXcQ7TZxTyTaG8TdSrTbxb2YaG8U9zKi3SHufqK9Sdx8bu2d4l5KtDeLewnR7hL3cqK9Rdx8vsBbxc1ns9wtbt7r/TZxn0O0t4ub99C+Q9ybifZOcfPexHvEfT7R7hU37/m6T9yXEO1d4r6MaO8W9+VEe4+4txPtveK+gmj3i/tKoj0g7q1Ee5+4NxDt/eJeR7QPiPssoj0obj5P/oPi5vuGHhI335P9IXHzHTl7iPtZRGsU99VEGyPua4g2VtzPJto4cV9LtPHifg7RJoh7B9H2FPd1RJMrfnbWl9bfLO7nEk2Gp3fWl5YmTcLO+tLSMHf9AqLtI+4XEm1fcb+IaPuJ+wai7S/uFxPtAHG/hGgHivtGoh0k7pcS7WBx30S0Q8T9MqI9TdwvJ9qh4n4F0XAu0SuJhnW5ryLa4eJ+NdGOEPdriHakuG8m2lHifi3RMuK+hWioz15HNLR/txINesXriYb68TaioT57A9HQxt5ONNTVbyQa2uc7iIZ6+U1EO1bcdxINbcSbiQYd4C6iod14C9HQDr2VaFg7cDfRsNbhbUSDjvJ2oqGtewfR0K69k2hoh+4hGvSbe4m28zwgomE+6F1Ew1zRu4kG3eg9RIP+8F6ioc2+n2jQeR4gGtqw9xENesH7iQa94ANEmyPuB4kG/eaDRIMe9BDRoKOgvrR1la1zsCaF11VfpGi1vDad19RfoGgW93mBcF+gcMN/HmEEDxcQDe5pFJ/PK8D7w4gH/2vIS+uksD4a66SAg8/DQJjbqS+SEN0+Fzl4P1eFG81145Cda934XcTHeKL7xBSI12JVuV6+ZXWXbQ4+8f7ttBflneJuSobuB7bvH3K8x9Og/BlyQ3aB1nQXzz7Qa7rPdqR9OmH1lPags9IbxCAd0Hk9+QehmCWDzy6DnHmt9DpHOHZvUXH43Ph1Dr4znvnW51vpdeK2zNxH5QvlJ0xdVSr36xzyOYzkg/fnknxC7O+w31hPWHRdw3vsgNP+Vyiv3KauCyArrg/xbfjXEUbQuA8HXtaLzXvsbLnVd9ewbsVne4a6r6XcHZdIz2KEDsdh2Y2+A5+BGeA/Kt4Bi3GDcQov77dAmMdV+8r3jaxUfDQTz7vj/EHI0HX+4NdU+xrgnpK+QLwW/23Udbx2zHU+4bep/vsutZ/IjxX0nV873uOp1L7yXqMAdUWxfV0v39Lnt3DaGwirp7RznDbaV6QDOuszv6L2les3yLnS2YLafYaKw/XhOQ6+M5755rYsQ36kZ8vMD6h8/Zra1xBtPvPN8nk6yQfv+T4Q/Be+21fWP3Rdw+d6u+7Q4XbonACy4voQ34b/HMKo7/ThcSuuY3Cut7Xq9Z6aAHiK7afex3OowsP7eNBwuvbxoP08lPjQ98zweuSMPz6cZ1YDh+tuxXHEx/gkzF0zgXgt/rt8t+oaB59430z3nO4lbh6DO42+c7jjPZ5K7Sef4x3ivjTuKyFvz3KkfQ5h9ZT2oH4a2k+kw/ud4T4MP0YyuK6HnIHb/htnOsKxu0/F4fbhTAffmWR0619bZval8oXyE6ruZL5ZPoeSfPCe680Qd6Dab7COqesaHksATu7HcTsT6v7mcv04buNB4zla8MJ1zBnUfg73juQAd6tWvCMZ6VmM+p5i7cYcGLdLp3nHmytYvNDlxim8SK+RwuRV+8r3l/YqPpqJ58B3qfa4+tmQoauf3afa1wD3BfSE1NPxj9iyv8rBJ973U/03m9pP5Mdq+s4Sx3s8ldpXHnsINf6LOl2P/3La6wirp7RznDbaV6QDeiO5F1P7yv07yNl1VgaHY/daFYfHNwOPCVQc/0V6tsycSOVrCbWv/uuqUrk/yyGfp5F88L6N5BPg/JEhbb2uayyWNQonj/twOxRAJ81xfYhvu+7FBY3X3IAXrmMOo/YV/Shea9OvaJav1YH4Kte+Ij1ex1mufcW6E25f/Z8nU2pf9Xk7Whfh83Y2q/aVz9txta+rVbhA4+4beN4LfECGrjuFzlfta4ix9VBzDPYbrFsudPCJ99uo/ruU2k/kx0r6znWO93gqta+si492/5XTroX+644y/VfIeST9V93nrcX+63YqX9dR+xrg7KshbRrkcwjJB+/5/Cr8FyH7r7qusVhWKZz2v0J55XYoVP9V300GP/df9dlhvOaR65gfy2JQW26xbpnXOfcpmuUr1LlYfYov+JEet6/lzj/CWs8lhNf/GVOl9lWf1wYcfJYWwrxWta98Xluv4oN1Hdd5bZnE31isS0+ADF16whtU+xpA386HrGfwH3P7ynzi/Z1U/91F7SfyYyl9537HezyV2lfWnQKMAxTbV9QJyNszHGnzOiNPaQ+6fxbtq76njscL3kvtK7dPkPPOcftk6Doo7V6t4rjmw3Zn/8eWmbupfN1P7WuI8/CYb5bPwSQfvOczCAOcDznoH2QMawiL7lex3srtUKj1Z6wjZ5Kh86ItROO+KHjhOuZWal8x9s77R5YqmuVrSSC+kBa+DT/Ssxgx3r00KJ5S+4n6F3XTQQoPn5X0adV+gm4ftJ8HER9LVTjLR793PkrtZ18ZPvqJD4T5gmo/Q9xTHIjX4r+L8m7L9nIHn3j/FarfnqD2EfnB65N+4niPp1L7GXYMpdR+at1ojSPttYTVU9qD6iG0n0iH50fg/jG1n1y/Qs6us245HLu1XtSSDB23D7nOsty94VyvfoPK10+o/QxRdzLfLJ+DSD5aL+R/0Hf7yfff6brGYtH3LHM/jtuZUOOk5fpxqwkjaLwvFrxwHXOJo3/Kc7ILFS1U3cftFb6tx3qbk8p7+3mvUJ+ihVoTUyk/egkjeOA+KNy8V6iX3Hh/IPHgf27bfW41cCA9Prf6P0pX4HVlCx2896hwYcY4SjrPKsUHZLeS+ECYsfsM8BFqHCPUeI79xqA5XgefO/X7fQbCtYib1x5yX/swx3s8lXQFHpcLMGaR5fYZeXuaI+1Qe4VYB+ExQp47gPvp2JydDO4XQs7Azesty+0VWqHiuMYed2dfzZaZfah8ofyEqatK5X6NQz4Hknzwntfo4b/wrSuw3qLrGotlucJp/yuUV25TQ4zHcX2Ib8PPuidofNYGeOE6ZgbpCgsdcfoUrZbbXNYVehTN4p4YCHe5tXETCSN44P1AcLOuMJHceH8A8bDYOw8lXQFtDeph4EB6jRSml9rYJBl8VlOfg/dWFc7ysdQ7H6VxhWWKD8huKfGBMP1KV1gWAFMgXov1FOoa+x/3O/jE+xOpLj+JdAGtd9v3Kx3v8VTSFSC7QLpR1qUHrnSkvZqwekp7UJ0LXQHp8LwV3CtIV3D1gXluboUjHLu1Dsj95hUOvjOe+eY7gDLJ0Dk2W2YWUPlaSbqC/7qqVO5XOORzAMkH71tJPvgvfOsKywmLrmssljaF0/5XKK/cpq4IICuuD/Ft+FcQRtD4TC/wwnXMO+RgJNYVOE6fotWzrlAIhLucrlAgjMPVFQrkxvv9iYdQ4wpo21EPAwePKyDMNqUrsH7T5+C9Q4WzfLR656OkK2idB7JrJT4Q5gqlKwQYM80H4rVYT/F4QL+DT7y/muryZ5MugPxgXeFGx3s8lXQF1gMD7O3Jusa+ljvSXklYPaU9aE8mdAV9xxuPu72EdAVua/UYrf03ljnCsXuiisPj2oH1syLf3BZmyM/rKndQ+bpxFMYVljnksz/JB+87SD74L3zrCjyXrOsai2Wxwsk6OLepAfopFc/cXUYYQeMxAvDCdcyVpCugvuHzRnsVLdC+2SJfvYovV/vq0h/gZl2hoGgWd1cg3AWFG/4uwujSH+BmXaGL3Hi/H/EwWroCcLh0hbdV0BV6Hby3q3AhdQW97gKy4zYUYe5TukKAM7KD6gqL5Ft8ngrziff3U13+Pocu0E/febRKXYHXogTQuYq6Auot5K3r/oZlhNVT2oPWF0FXQDo8jgP3x0lX4HYNcuY1SYsd4VxtIeK4+oG7s62xZeZBKl+PjoKusNghn/1IPnjfTvIJpSssIiy6rrFYdD+J5/W5TQ0xBsP1Ib6txwP4flrWFcAL1zE9Dl2BzzrXdX896wrdgXCX0xW6CeNwdYVucuP9vsRDh3ceSroC/ivUw8CB9BopzA+UrtA+AHlnXjDvnSpcoHqk4NJ5IDuXzvMzpSsEmKMqhKwzUSexrsB84v2vqC7/DekCyA/WFf7peI+nkq7AeuAi//wWdQXUb8jbRY60lxBWT2nnOG3oCrpv2Ejuf5CuwG0t5AzcPJbL4djdruJwPzCwflbkm9vCDPmRni0zv6fy9U/SFfzXVaVyv9Ahn31JPnjfSfLBf+FbV2glLLqusVi6FE7WwblNDdBPyXF9iG/rscQWovEYAXjhOqbRoSu4zsThtca1OpbPukK3olnc+UC4uxVu+POE0aU/wM26Qp7ceL8P8eB/bKSkK+C/Qj0MHEivkcIcIgUJukLnAOSdecG8T1XhAtUjBZfOA9m5dJ4jiI/xRPeJKWSdiTrJ/se9Dj7x/uh9B8JNFDffd8G6QrfjPZ5KuoKrD5dJ/OoKesyo1ZH2IsLqKe1B/TPoCkgHdB6vyqOiTQa3tXqeyP4bEx3h2N2p4rQkbh0pgH5W8c467m+2U/lC+Qk1jst8s3z2Ifng/VSSD/4L37pCG2HRdQ3vMQBO1sG5TQ21lo71/UwydIy3hWg8RgBeuI75jFzuZMst7mbZ1T793bleAffRhD7fdKRncvL5vAF0qW4e4xkOngLhCTEOFIjPLI//ePyviypj3pFf4KGF3neT7ELpl+XGohhjxBsOL9fjfO8DwvXVCEbQegjj4UqOth5fT200wnr8f7p53NfqajsIB9JrpDB/Jv1hs7ifSmPAXC58ypmxMAYuE5ATl9upDhmGmnOfmgyWIfxdhBG0HqJBdixrhOPxiU5FC9Xf4j4yvg1/B2EEX9zX7QyEp0vhcaUdQO/NBuorF+sN6Jvo4wE/0uN+7XPUOATr4igrnDedKhzz4bNfEEif7+b+GOSj9XmeI3iBkg/oLJ92kk+bCsd8eJRPPtDYaDf3y/W+G+6nI8xLlXwWOeTj2neziOQTgI9sQzJ0jL5V8cHz0zzmgfmKPQQPeMsTZv9rELqLmLE+EbLXayZ4D81r1dib/3Wr3dkwvA7eM2F1lpkOPvH+NtJtbqexNcy1zKbv3Ot4j6dS/433SK7yz28xb/U5c5X2Z/oee+M9SA2UDui8j/seGnvjPbCQM3Db/3mlIxy7l6g4vG/WdUZVxjPfu9qXasvMm6h83Ut6fag9cisd8uE1KniPttbywfuL5iTudT/+11B3O/e46fOveJ/Z+1Sd5P9fKtVJo3HWwVIHn3j/EJWZD1Odg/qL54E/53iPp1KdFM86GHB/luokPrcAch7JWQfLVJxaPOvgo1S+Pkd1Uqh7Z9Y45MP78fAe+i23KYlgQXiuk/zX693O87z0nS18ptZXVJ3k/18q1UmjcdbpcgefeP8NKjPfojpH77ex73/peI+nUp0UzzodcP+C6iQ+txRyHslZpytVnFo86/S7VL5+SXXSaJx1qvd4c53Na3b6VXi+i4bn1ELpm2uVHOF3ncHH+/c53pxk6BrSpmTonUnF/hDNJ+rzp8uNr9fqWC+PUecVzeKeGgh3XuGGfyphdK1HgpvXHvFYLd4fTjz4H8csrT3CGB3qTL1eqJHCNMqCd5SnjgHIO/OCee9S4UZz7BKyc41d7kl8BFpP3B2I10FrMIr7DRx84v3e+w2E21fcTZQfvfSdoxzv8VRq13k8N/R4HPJ2oSNtXk/sKe1B63XRriMd0HlM80hsCEkG77+BnPlMyFZHOHZ3qDi8Z6fVwXfGM9+72hNjy8wBVL5QfkLNuTDfLJ/DST54z+uAQ8wx2G/wOihd1/CcNa8BRnnlNrU1gKy4PsS39fwCn+fC66PAC9cx62leeL7QZ1OcfkWzfM0MxFe5O7iQnsU4S9z9YfHkmxQe+1SqK2cSnlBroWaOAA+vhQpwDnkuEJ/ZQGsniipjwZFffHetXucRck1+uf17jLGe8HI/C1h5vVx/jWB09YeOUHK09eLJ1OYhrM+52gaSE9byHKGwNVKYD1B7vEjcvBaT+0l6fQ//U5lkdGQ+3H2ovJanEEDOjIUxcJmAnLjc1tI+lxai9RENsmNZIxyvH56qaLtzXRL3kXkd+e7qx7MsfK/lCaAr5139er0+ifv1Wyv061FWOG/0+h7mw/dangB96LxrvEDvqebxgouUfNoc8ukk+XSocIH4yLr0fL1mi/c88BwM9HusVdlL/Lwe3f++lrxz37Heh8N7f69SYzX++7v5bBheS/1Ens+d5eAT759NbfdzaCwG/bX59J2bHO/xVNL3A5+F4lyH5DqHhc+U85T2oDPbMFaDdEDnNVAvpbEaXiMBOQO3/Z+XOsKxu1XF4XNblzr4znjme1fnotoycz2Vr5tIbw2xT5r5Zvnwvie8R1ti+eB1V3MoPK+p9b+2plQn6bO2gcV11vbNqk7y/y+V6qTROGt7oYNPvH89lZk3UJ2D+quVvnOP4z2eSnVSPGt7wP1OqpN4jQTkPJKzthepOLV41vYdVL7uoTppNM7a1uducJ3N47izVXhbvvF/8HhniH+V2zR8W9/PyHd48BwIx5uTDOh3PNYLGtcHj4wvuXncgPuJrrGaeH7VYNyhz686gnjw3ycuzQujv6fPr0J6jRTmU6p/xHtjXOdX6fMtRrMfDNm5+sGPqXY9wF6mfMj5MdRbfH4V84n3X6Z696vUbiM/ZtJ3fux4j6dSu85jAwH24xTbdbSLuh/JafPZEZ7SHnQ2A9p1pAM67wX6EbXrPK8KOfM+lzZHOHZ3qTiuswlD6fU8boBvu85S/zqVrx9Tux5i/I75tg/kg/+c5zl5H06I8Sr7DfxjjKGTsLjOhER55TY1xBl3XB/i23qsis/jnEoYwQvXMSfTHMM8oc+nOLMVzfI1KxBfSAvfhh/pWYxzxT07LJ58k8Jjn0p15SzCE2CeutBEaQwHD89Th7hLNRCf2UDzcEWVsdeRX+DBNWcYaO47x3OC+Lae9414I17GyP1YYOW1IrNrBKOrv3mkkmNx3dn+A3gD3LFdPMsOcsK8+5EKWyOF+cz+A9gOETevQ+J+qJ6L5zork4yOzPkOKdf6Kbh53r03gJwZC2PgMgE5cbmtpTuuWojGd7BDdixrhOO1c92KtjvXELjOytyd4yQsC9/z7gH6IgXXuIleS8DjJjmpK1zjJq6zPPVcPPPhe949wBhFwTUeU2m/QZ+ST4dDPrvabxCgn5cPNJ9flM9I1iXMVvJpc8hnuOsSfJ6NFGjMp+Aa8wF+1xks85V8QGf5tJN89BppTg/rJFrEz2tnA6wdKPKq10kAi2udxGLiNdAcSmG01knMdfCJ9ytI11olbj4DfB59Z5PjPZ5K/d+4TmLAvXH/nWIZNH8GOY9kncREFacW10mcRuVrE/UzRmOdBOTTSvLBe7T9lg+9TgLheb1igPnIAstwOOskLlB1UoB/qVAL6yQuoTJzGdU5+qzo4jocx3s8leqkuE5iwH0d1Um85gFyfqqtk7iCytf1VCft7nUS0Le5TUkEC8JznRSgXi+wDPX9uHxHLcK8WNVJAf6lQqg2zH4D/4AtC4sdfOL9y6jMvILqHNRffIb8HY73eCrVSYHP4XKe1+I6A4zPA/KU9qDzdlAnIR3Q+ayYN1KdxGcyQM7Abeuk1Y5w7F6q4vDZD6sdfGc8881n+mTIz+dHvJrK1x1UJ4U682+1Qz58NzTeo4/LbUoiWBCe66QA9XqBZajP7ONz8xDmbapOCvAvFUK1YfYb+AdsWVjm4BPv76Uy8y6qc3QfwL5/2PEeT6U6KfA5XMU6CWfcIG9dZ4DxeUCe0h503g7qJKQDeiO5P0J10pkDzp1yBm5bJ611hGP3ChWnhd6vdfCd8cw3n+mTIT/Ss2XmvVS+HqY6KdSZf2sd8uHzKvGe11bMV+Ft+cb/weskQumb5c6Q4/ORQIPcdLw5ycA4GK8RAY3rg2NoPSnmcHj+wzUHWavzYfW+f5bjcNgjiQf/cz2l9aR5+RbqTOBAeo0U5ptq3Jb3Z8508K7P3h/N+R3IzjW/833VrgfYT1sIua4Ocwf2P+538In3P6F692fUbiM/ZtF3/uJ4j6dSu+460yWT+G3X9dxLuyPtiYTVU9qDzmtBu450+P5ZuP9M7TqPa0POPKfR4QjH7ryK47q/MtB8zrDuyCqeGUjl6y/UroeYl2a+WT5HknzwnvfKhpiHtd/oJCy6ruF1PcDJ67S5TQ11L0e5ezD4HjbQugkjeOE65gBaO3OK0PkMjvmKZvmaF4gvpIVvw4/0LMYF4p4fFk++SeGxT6W6ch7hmR0Iz7wR4OFyONc/nlwgPrO8Ptj3etJ+R36BB14nzmuDQ6zFbUjKr51mjPWEl/tZwFpuPfruxAjaXMJ4lJKjrRePOGAAL8L6PmcIcsJ6x6MUtkYKc+MBA9haxc17ALifNFvR+J/KJKMj80p7APg+TV7vGGBdaZ6xMAYuE5ATl1vXmtFaWKc7l2iQHcsa4XhPSI+i7c61m9xH5vPRdlc/nmXhe71jAF057+rX6zWc3K+fKXVFpX49541eA8l8+F7vGKAPnXeNF1TaR3uikk+XQz672kcbgI+sS8/X61r5DDGeF4Z+j/VzzeIPu9etkOU+tF5LyX3qnWcPkezD9HcL2TC8Dj4b17bJCxx84v1yartXipv3IJ5C39noeI+nkr4P2QVaL+g8Q8p1L/sSwuop7RynjbEafRcTr8vccMBOsQxatwU5A7f9LxY6wrG7Q8VpofcLHXxnPPPN65UyydC1IbbMrKHytZH01gBjdjnmm+XD+23xHm2J5aOV4syh8LzvwP96v4LzLHNgQXp8nvj5qk7y/y+V6qRQaxv5rPB2B594v43KzKVU56D+6qDvXOd4j6dSncT3RgZYL+g8Q2qpI21ee+sp7UFrW1EnIR2+FxHuHVQn8botyBm4bZ20xBGO3W0qDp9Hs8TBd8Yz37xeKZMMXRtiy8x2Kl/XUZ0UYkyb+Wb5tJJ89No4Pi8e4W35xv/B452hznVYrOQIv+v+AZ4D4XhzkgH9jsd6QeP64G/jSu56PTuAxw14vKNf0QLtda/6LHye4+Z5Ye734/1RxIP/PnFpXhj9PdSZen63kcLcpvpHvH9wtoN3fY7zaPaDITtXP/hO1a4H2O+ZDzk/hnqL9+own3h/N9W7b6d2G/nBe3UedLzHU6ldd53pkkn8tut6z2KnI+12wuop7UHntaBdRzo772Qi9weoXW8fcO6UM+8F7HKEY3dBxWlJ3PPhIfR6HjfAt/U+yOKZgVS+HqR2PcT4HfPN8jmK5IP3vDcwxHiV/Qafoa7rGp7/AE5eb8Ftaqgz3sudqd5FGEHrIYzgheuYI2iOAf3mhRRnvqLV2rww35vDusJcRbO4TwyEe67CDf+JhBE8zCUa3KwrnEhunrsCD/7nYku6Ap/JkSEcSI/P5Piq0hV43mW+g/cTVLhAc4MFnmMBH5Adny2CMN9SukKI86FCzYPabxwn3+JxSeYT779PdfkPSRdAfvC45O8d7/FU0hUC37+U5Tkn5G2vI+0CYfWU9qD5LugK+u6fRnL/jnQF1rcgZ15H2ucIx+5ZKg7fO9Tn4Dvjme9d3eljy8xPqHz9nnSFAOtGcsw3y6eJ5IP3J5B8Asw5D/oHGQPPOS904ER55TZ1d63L5jlnXjsOXriOeXhsyc3lls9a7FG0Wpt/5nlP1hVq6a4h1zlBfD4N6wqsB+L9nsTDFO88lHQF9Bf0OTxIj9cvNx9YsqErcN/DdQ6PPrMm0PrKPsvHZMUHZMf9P4TZj/gYT3SfmALxOuT84l4Hn3h/8IED4Z4m7ibKDz4rrt3xHk8lXQGyCzRn65yfbnOkfTRh9ZT2oHN8oSsgHT5HB+5JB+4Uy85w9tFj1vbfmOQIx249B99C7yc5+M545rvcvahIz5aZw6h8ofyEqatK5X6SQz57knzwnvet4r8IeX6xrmt4jIPvEUB55TZ1UgBZcX2Ib8M/iTCCNoUwgheuY7pJV4AO4bqXknX3Wt3jdTThLihaqLFg7mPg2yO96+AYiu+662AC8ZD1zsPmYn8c+opeo4X0GinMXKUrsK5T6a4DXls6Wnc2QHautWanKF3B/zjgpq1heC3VU/i3+a4D5hPvl1Bdvox0AeQH9x3WOd7jqaQrcL0XQDfKuvTADkfaoeYgJtN3eQ4CdNZBzyFdgdsSyBm47b/R6QjH7mkqDs9BdDr4znjmu9xZ+dyGrKTytY50Bf911dD9YJDPBJKPa24q1N60KYRF1zXcZwdO1x0jgebtKu5N4zkt0LivDV64jnliTMndTHTXHQ78Pwbof1Usl0iP/y3+3+BmXaFd0ULqbu0KN/yTCCN44D2scLOuwDpzO2GH7X9tz2bn+aPA4Tp/9BqlK7QOQN6ZF8y7Xis0PhloZ/zxUZqDmKr4GE/pgA+EuV7pCiH21gfitVhPof6xv3Cng0+8fyHV5TeQLoD84PrgFsd7PJV0Be7D5fzzm+W5V+RtzpE2nyfpKe1B877QFfTYIa+DeS3pCqz7Q87Abf+NrCMcu1tVHL4PfTTufMsRlgz5kZ4tMzdS+bqFdIVQ6xCzDvmMJ/ngPZ8HnRG3b12B9Wld13A7DJyu/SSh9CquD/Ft+LOEEbSJhBG8cB1zklQAzcnQcxyakgG+We6h2lykhW/Dz+1OK70HDe5d6QqhdJxyugLrOOBhV7oCjxnh/Tji4VjvPJR0BT0HARxIj+cgHqgwB5Fx8K73OoQan3SNK0B2PJeCMA8FH1co7dcLNRbL645aHXzi/UepLn/EMcfA55c8XuUcROB6L8vtFvI260ib23RPaQ9qM6ErIB3QG8n9RdIVeE4RcgZu+29Mc4Rjd6eKw2vRpjn4znjmm9vlDPmRni0zj1L5epx0Bf911dD2mestyEePxfA/GHJto65r+D5HnoNAeeU2dVoAWXF9iG/DP40wgnYsYQQvXMc0SAWg6wGvgPdISgt78KNZ/6nKv1D5lwpz8K9U/tOV/0zlP1v51yn/BuXfpPxblP9c5T9P+S9Q/ouUf5vyX6r8lyv/Fcp/lfI/S/mvUf5rlX+H8l+v/M9T/hco/4uU/8XKf6Py36T8L1f+Vyr/q5X/ZuW/RflvVf47lP9O5b9L+d+q/G9T/nco/z3Kf5/yv1v536v8Dyj/+5X/QeV/SPk/rPwPK/8jyv+o8n9K+T+r/I8p/+PK/xXl/5ryf1P5v6P831f+Hyn/T5X/F8r/K+X/rfL/Xfmtg/1jlH+c8k9Q/iblbxE/P3uIPUfs7mxPobClN78l153bkM3P2Ng3PVuYvrGnL9eXm943fXO+r7t7S1+hr3fGxhm92Rm5QveW3NbpM7q3SmU5PvFX7670961sJZ6zT+7J/d2j/A5r8N9uHTaMfM8+uSc30aMMFiRh8r3BM88ne+B5Y35TYWtfvqcSzicrz1V1Is9ldYJzeZ3gXJGMTv35ZMtng0eeF9UJzxM98rx4lMrjk+X5cA9tW/fm7o3Z3s0bLTY7yfyEfM/K03aibRrWPkX8p4q9UOwGsRF+idhLxZ5Xxh6v/KvFXiP2aWKvFft0sc8Q+0yxzxL7bLHPEXud2OvF3iD2RrE3ib1Z7C1ibxX7XLGfIfZ5Yp8v9gViXyj2RWJfLPY2sS8R+1KxLxP7crG3i32F2FeKfZXYzxT7WWJfLfY1Yj9b7GvFfo7YO8S+TuzrxX6u2M8T+/liv0DsF4r9IrFvEPvFYr9E7BvFfqnYN4n9MrFfLvYrxH6l2K8S+9Viv0bsm8V+rdi3iP06sW8V+/Vi3yb2G8S+Xew3in2H2G8S+06x3yz2XWK/Rey3in232G8T++1iv0Psd4p9j9j3in2f2O8S+91iv0fs94p9v9gPiP0+sd8v9gfEflDsD4r9kNgfEvvDYn9E7IfF/qjY/yX2I2J/TOyPi/2o2J8Q+5Nif0rsT4v9GbE/K/bnxP682I+J/QWxvyj242J/Sewvi/0Vsb8q9hNif03sr4v9DbG/Kfa3xP622N8R+7tif0/s74v9A7F/KPaPxP6x2D8R+6di/0zsn4v9C7F/KfZ/i/0rsX8t9m/E/q3YvxP792L/Qew/iv0nsf8s9l/E/h+x/yr238T+u9j/K/Y/xP6n2P8S+//EhvmP2InU3w1i7yF2o9hjxB4r9jixx4s9Qew9xW4Su1nsFrH3EntvsfcRe1+x9xN7f7EPEPtAsQ8S+2CxDxH7aWIfKvbT8R1jjkCDKk+j2HPENu1r95NoX3NtiWqrN1f/rUmJv3b/tw1h9BOH/CzOXLU8t7t4zlb3rcke5fe70ZWfxZmthueOMjzP2Drybx3rUX6/H335WZx9I+W5sxLPvSP71hSP8vvD7pGfwVnYOhKeu3bFc2H435rqUX5/3G3yK+KcPlyepw2H5+zwvpX1KL8/7V75WZzZ4fCcGy7Pvbv+Vt6j/P68++VncW7aFc/dI+G5t/K3Ch7l95fakJ/Fma/E8/SR8txb/ls9HuX3P7UjP4uztxzPvdXw3Of+Vp9H+f21tuRncfa5eJ5RJc89W4d+6ziP8vtb7cnP4sxqnmc+GZ7zg791vEf5/b025WdxZpnn/ifLc2HgW7M8yu9/a1d+FmcePM/2wPOW0sdyczzK7x+1LT/D81YLNXeCp2+Zr+VO9Ci/f9a4/IBzbuJvTmy1R1z/GiX5ZZ/ck/M4zpbjMacnK7//qxP5eRwnyv3Bo/z+XSfy8zjOkfuTR/n9p07k57GfnvuLR/nZxQ/1ID+P/czcXz3Kr6FO5Oexn5T7u0f57VEn8vOo5+f+4VF+jXUiP496au5fHuU3pk7k51HPyv3bo/zG1on8POoJOW4zn6z8xtWJ/Dy2c7k9PMpvfJ3Iz2M9nRvjUX4T6kR+HuuZ3DiP8tuzTuTn8T/JeSwzuVDy28Oz/PhbT7bMHNlQHzw3eOT5qDrheQ+PPGfqhOdGjzy31gnPYzzyfHSd8DzWI8/H1AnP4zzyPLFOeB7vkee2OuF5vkeeJ9UJz/M88tyeQp4np5DnjhTyfGwKee5MIc9TUshzVwp5nppCnqelkOdsCnnOpZDnfAp57k4hz4UU8jw9hTz3pJDn3hTy3JdCnmekkOfjUsjzzBTyfHwKee5PIc+zUsjz7BTyPCeFPJ+QQp5PTCHPc1PI80kp5HleCnmen0KeF6SQ55NTyPMpKeT51BTyvDCFPC9KIc+LU8jzkhTyvDSFPC9LIc/LU8jzihTyvDKFPK9KIc+rU8jzmhTyfFoKeV6bQp5PTyHPZ6SQ5zNTyPNZKeT57BTyfE4KeV6XQp7Xp5DnDSnkeWMKed6UQp43p5DnLSnkeWsKeT43hTw/I4U8n5dCns9PIc8XpJDnC1PI80Up5PniFPK8LYU8X5JCni9NIc+XpZDny1PI8/YU8nxFCnm+MoU8X5VCnp+ZQp6flUKer04hz9ekkOdnp5Dna1PI83NSyPOOFPJ8XQp5vj6FPD83hTw/L4U8Pz+FPL8ghTy/MIU8vyiFPN+QQp5fnEKeX5JCnm9MIc8vTSHPN6WQ55elkOeXp5DnV6SQ51emkOdXpZDnV6eQ59ekkOebU8jza1PI8y0p5Pl1KeT51hTy/PoU8nxbCnl+Qwp5vj2FPL8xhTzfkUKe35RCnu9MIc9vTiHPd6WQ57ekkOe3ppDnu1PI89tSyPPbU8jzO1LI8ztTyPM9KeT53hTyfF8KeX5XCnl+dwp5fk8KeX5vCnm+P4U8P5BCnt+XQp7fn0KeP5BCnh9MIc8fTCHPD6WQ5w+lkOcPp5Dnj6SQ54dTyPNHU8jzf9UJz0c0+OP5kRTm88dSyPPHU8jzoynk+RMp5PmTKeT5Uynk+dMp5PkzKeT5s3XC82Ee9bDPpTCfP59Cnh9LIc9fSCHPX0whz4+nkOcv1QnPEzzy/OU64XlPjzx/pU54bvLI81frhOdmjzw/USc8t3jk+Wt1wvNeHnn+ep3wvLdHnr9RJzzv45Hnb9YJz/t65PlbdcLzfh55/nad8Ly/R56/Uyc8H+CR5+/WCc8HeuT5e3XC80Eeef5+nfB8sEeef1AnPB/ikecf1gnPT/PI84/qhOdDPfL84zrh+ekeef5JvcxjeOT5p3XC8+Eeef5Zvawb8sjzz+uE5yM98vyLOuH5KI88/7JOeM545Pm/64TnVo88/6pOeD7aI8+/rhOej/HI82888mw+lTTKt04i/htEBvbdGGPGGjPOmPHG2HkoOy9j5ynsuL0dx7bjunac04772XEwOy5kx0nsuIHtR9t+pe1n2X6H1cOtXmr1NKu32Hbctmu2nrf1XsYY+1/YcmLlNtGYNmMmGdNuzGRjOow51phOY6YY02XMVGOmWZkYkzMmb2VtTMGY6cb0GNNrTJ8xM4w5zpiZxhxvTL8xs4yZLfl0gjEnGjOXZPK42Eca4RxlTMaYVmOONuYYYyYa02bMJGPajZlsTIcxxxrTacwUY7qMmWrMNGOs8HPG5I3pNqZgzHRjeozpNabPmBnGHGfMTGOON6bfmFnGzLZlwJgTjDnRmLnGnGTMPGPmG7PAmJONOcWYU41ZaMwiYxYbs8SYpcYsM2a5MSuMWWnMKmNWG7PGmNOMWWvM6cacYcyZxpxlzNnGnGPMOmPWG7PBmI3GbDJmszFbjNlqzLnGPMOY84yx99Lbe9rtveX2Hm97r7W959nee2zvAbb34tp7Yu29qfYeUXuvpr1n0t67aO8htPfy2Xvq7L1t9h4ze6+XvefK3vtk70Gy9wLZe3LsvTH2HhV7r4i9Z8PeO2HvYbD3Ethz+u259fYcd3uuuT3n2557bc+Btuci23OC7bm59hxZe66qPWfUnrtpz6G05zLacwrtuX32HDt7rps958ye+2XPwbLnQtlzkuy5QfYcHXuujD1nxZ47Ys/hsOdS2HMa7LkFdh+/3ddu93nbfc92H7DdF2v3idp9k3Yfod1XZ/eZ2X1Xdh+S3Zdj96nYfRt2H4Nd12/Xudt133YdtF0XbNfJ2nWjdh2lXVdo19nZdWd2HZZdl2TX6dh1K3Ydh13XYOf57by3nQe286J2ntDOm9l5JDuvYucZ7Li7HYe247J2nNKO29lxLDuuY8c5bL/f9oNtv9D2k2y/werRVq+0epbVO2w7bNslW0/beutS+p+uFftwsTds377loku2Z7Zvy2zYvDlz1Xnbn5HZduWWy7ZeuM0Wh+I/jv8vkTrEPidcdtmGZ2XOu3jzlmdmtl2xPbNta2bjtisu3nw5R9pQTaQLqol0RTWRdlQT6dSxVURaXk2ktdVEWldNpPOqiXR5NZGurSbSi6qJ9KpqIn2tmkhL9qwi0seqifT5aiJNaa4iUnc1ke6tJtID1UT6aDWRPlFNpC9WE+lr1UT6QTWRfl5NpD9UE+lv1UTao6WKSBOqibR3NZEOrCbS06uJlKkm0pZqIl1YTaTLq4l0dTWRrq8m0g3VRHpFNZFurSbSIxIJOtWKLRs2b7kss/m8zZmLt23PXGa8mQ0XXpjZvGH7Bo43fq/q4r1hrypAvrmaSF+sJtIT1UT6TzWRxu5dRaRcNZF6q4m0qZpI51UT6eZqIt1WTaRPVRPpsWoi/buaSGP2qSJSTzWRjq8m0sXVRNpeTaS7q4l0bzWRvl9NpJ9WE+ngfauIdHg1ka6tJtLzq4l0YzWRbq4m0gPVRPpyNZH22K+KSBOqibSlmkgXVhPpymoivaaaSJ+sJtLnq4mU3b+KSL3VRJpVTaR51URaVE2k86uJdEM1ke6uJtI3qon0vWoiHXdAFZFOqCbSwmoinVdNpNdXE+lN1UT6SjWRvllNpKYDq4i0bzWRTqwm0snVRLq6mkjXVRPp/moifXC4kZL/BwZrVYMPjgQA","debug_symbols":""},{"name":"get_decimals","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"who":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"return_witnesses":[1]},"bytecode":"H4sIAAAAAAAA/61S2w2AMAgEWx/pjys4Am0cwP2nUiPo1Sb+yCUEchDuQmAi6uhCOIKphXGbZvmH7LhL+OUzaT0Cv3jprVL6c0ms72JIcEubGTSsz8rb3Awcg/eg9eTlXXJJj617P3qOoNn8gY8JyayCDEJm5uv5qt4OLC1fMrYCAAA=","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"}],"events":[],"file_map":{"52":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/public.nr"},"54":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/context/private.nr"},"56":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::RETURN_VALUES_LENGTH,\n};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::{\n        function_selector::FunctionSelector,\n        private_call_stack_item::PrivateCallStackItem,\n    },\n    address::AztecAddress,\n    constants::PRIVATE_CALL_STACK_ITEM_LENGTH,\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"},"77":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/aztec/src/abi.nr"},"104":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext {\n            public_key: self.public_key,\n            secret_key: self.secret_key,\n            contract_address,\n        }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"105":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        GENERATOR_INDEX__GLOBAL_VARIABLES,\n        GLOBAL_VARIABLES_LENGTH,\n    },\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/global_variables.nr"},"106":{"source":"use crate::{\n    abis::{\n        function_data::FunctionData,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    },\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__CALL_STACK_ITEM,\n        PRIVATE_CALL_STACK_ITEM_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x2442dd521c59987a4291be0fd11198e5a4d87c8bc36cf3b65c5229f61fc37b30);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"},"108":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        side_effect::{\n            SideEffect,\n            SideEffectLinkedToNoteHash,\n        },\n    },\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n        GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    },\n    contrakt::deployment_data::ContractDeploymentData,\n    header::Header,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    meta_hwm: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_commitments == other.new_commitments) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.meta_hwm as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            meta_hwm: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"110":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"111":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"118":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"121":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"123":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot {\n            root : serialized[0],\n            next_available_leaf_index : serialized[1] as u32\n        }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            root: 0,\n            next_available_leaf_index: 0,\n        }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"},"131":{"source":"use crate::{\n    abis::{\n        append_only_tree_snapshot::{\n            AppendOnlyTreeSnapshot,\n            APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n        },\n        global_variables::{\n            GlobalVariables,\n            GLOBAL_VARIABLES_LENGTH,\n        },\n    },\n    constants::{\n        GENERATOR_INDEX__BLOCK_HASH,\n        HEADER_LENGTH,\n        NUM_FIELDS_PER_SHA256,\n        STATE_REFERENCE_LENGTH,\n    },\n    hash::pedersen_hash,\n    state_reference::StateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    body_hash: [Field; NUM_FIELDS_PER_SHA256],\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        (self.body_hash == other.body_hash) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.body_hash);\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let body_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n        offset = offset + NUM_FIELDS_PER_SHA256;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            body_hash,\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            body_hash: [0; NUM_FIELDS_PER_SHA256],\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/header.nr"},"134":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"147":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"149":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/field.nr"},"151":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"156":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot,\n    constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"},"157":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\n// Copied over from \"yarn-project/aztec-nr/aztec/src/utils.nr\"\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils.nr"},"158":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"163":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{\n        AppendOnlyTreeSnapshot,\n        APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n    },\n    constants::{\n        PARTIAL_STATE_REFERENCE_LENGTH,\n        STATE_REFERENCE_LENGTH,\n    },\n    partial_state_reference::PartialStateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/state_reference.nr"},"165":{"source":"use crate::{\n    constants::{\n        CONTRACT_STORAGE_READ_LENGTH,\n        GENERATOR_INDEX__PUBLIC_DATA_READ,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Empty,\n        Serialize,\n    },\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"167":{"source":"use crate::{\n    address::EthAddress,\n    contract_class::ContractClassId,\n    constants::{\n        CONTRACT_DEPLOYMENT_DATA_LENGTH,\n        GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n    },\n    grumpkin_point::GrumpkinPoint,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"},"243":{"source":"use dep::aztec::protocol_types::{\n  utils::field::field_from_bytes,\n  traits::{Serialize, Deserialize}  \n};\nuse dep::std;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\nstruct FieldCompressedString{\n  value: Field\n}\n\nimpl Serialize<1> for FieldCompressedString {\n  fn serialize(self) -> [Field; 1] {\n    [self.value]\n  }\n}\n\nimpl Deserialize<1> for FieldCompressedString {\n  fn deserialize(input: [Field; 1]) -> Self {\n    Self { value: input[0] }\n  }\n}\n\nimpl FieldCompressedString{\n  pub fn is_eq(self, other: FieldCompressedString) -> bool {\n    self.value == other.value\n  }\n\n  pub fn from_field(input_field: Field) -> Self {\n    Self {value: input_field}\n  }\n\n  pub fn from_string(input_string: str<31>) -> Self {\n    Self {value: field_from_bytes(input_string.as_bytes(), true)}\n  }\n\n  pub fn to_bytes(self) -> [u8; 31] {\n    let mut result = [0; 31];\n    let bytes = self.value.to_be_bytes(31);\n    for i in 0..31 {\n        result[i] = bytes[i];\n    }\n    result\n  }\n}\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\nstruct CompressedString<N, M> {\n  value: [Field; N]\n}\n\nimpl<N, M> CompressedString<N, M> {\n  pub fn from_string(input_string: str<M>) -> Self {\n    let mut fields = [0; N];\n    let byts = input_string.as_bytes();\n\n    let mut r_index = 0 as u32;\n\n    for i in 0..N {\n      let mut temp = [0 as u8; 31];\n      for j in 0..31 {\n        if r_index < M {\n          temp[j] = byts[r_index];\n          r_index += 1;\n        }\n      }\n\n      fields[i] = field_from_bytes(temp, true);\n    }\n\n    Self { value: fields }\n  }\n\n  pub fn to_bytes(self) -> [u8; M] {\n    let mut result = [0; M];\n    let mut w_index = 0 as u32;\n    for i in 0..N {\n      let bytes = self.value[i].to_be_bytes(31);\n      for j in 0..31 {\n        if w_index < M {\n          result[w_index] = bytes[j];\n          w_index += 1;\n        }\n      }\n    }\n    result\n  }\n\n  pub fn serialize(self) -> [Field; N] {\n    self.value\n  }\n\n  pub fn deserialize(input: [Field; N]) -> Self {\n    Self { value: input }\n  }\n}\n\n#[test]\nfn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nfn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nfn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test(should_fail)]\nfn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/aztec-nr/compressed-string/src/compressed_string.nr"},"256":{"source":"contract Reader {\n    use dep::aztec::protocol_types::{\n        address::AztecAddress,\n        abis::function_selector::FunctionSelector,\n    };\n\n    use dep::compressed_string::FieldCompressedString;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn check_name_public(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"public_get_name()\");\n        let ret = context.call_public_function_no_args(who, selector);\n        let name = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(name.is_eq(_what));\n    }\n\n    #[aztec(private)]\n    fn check_name_private(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"private_get_name()\");\n        let ret = context.call_private_function_no_args(who, selector);\n        let name = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(name.is_eq(_what));\n    }\n\n    unconstrained fn get_name(who: AztecAddress) -> pub str<6> {\n        // We cannot yet call an unconstrained function from another\n        \"Reader\"\n    }\n\n    #[aztec(public)]\n    fn check_symbol_public(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"public_get_symbol()\");\n        let ret = context.call_public_function_no_args(who, selector);\n        let symbol = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(symbol.is_eq(_what));\n    }\n\n    #[aztec(private)]\n    fn check_symbol_private(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"private_get_symbol()\");\n        let ret = context.call_private_function_no_args(who, selector);\n        let symbol = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(symbol.is_eq(_what));\n    }\n\n    unconstrained fn get_symbol(who: AztecAddress) -> pub str<3> {\n        // We cannot yet call an unconstrained function from another\n        \"RDR\"\n    }\n\n    #[aztec(public)]\n    fn check_decimals_public(who: AztecAddress, what: u8) {\n        let selector = FunctionSelector::from_signature(\"public_get_decimals()\");\n        let ret = context.call_public_function_no_args(who, selector);\n        assert(ret[0] as u8 == what);\n    }\n\n    #[aztec(private)]\n    fn check_decimals_private(who: AztecAddress, what: u8) {\n        let selector = FunctionSelector::from_signature(\"private_get_decimals()\");\n        let ret = context.call_private_function_no_args(who, selector);\n        assert(ret[0] as u8 == what);\n    }\n\n    unconstrained fn get_decimals(who: AztecAddress) -> pub u8 {\n        // We cannot yet call an unconstrained function from another\n        18\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-contracts/contracts/reader_contract/src/main.nr"}}}