use crate::constants_gen::READ_REQUESTS_LENGTH;

struct SortOrderEnum {
    DESC: u8,
    ASC: u8,
    NADA: u8,
}

global SortOrder = SortOrderEnum {
    DESC: 1,
    ASC: 2,
    NADA: 0,
};

struct Sort {
    field_index: u8,
    order: u8,
}

impl Sort {
    fn new(field_index: u8, order: u8) -> Self {
        Sort { field_index, order }
    }

    fn nada() -> Self {
        Sort { field_index: 0, order: SortOrder.NADA }
    }
}

struct NoteGetterOptions<Note, N, S, P> {
    sort_by: [Sort; N],
    offset: u32,
    filter: fn ([Note; READ_REQUESTS_LENGTH], P) -> [Note; S],
    filter_args: P,
}

impl<Note, N, S, P> NoteGetterOptions<Note, N, S, P> {
    fn new(
        filter: fn ([Note; READ_REQUESTS_LENGTH], P) -> [Note; S],
        filter_args: P,
        sort_by: [Sort; N],
        offset: u32,
    ) -> Self {
        NoteGetterOptions {
            sort_by,
            offset,
            filter,
            filter_args,
        }
    }

    fn with_filter(
        filter: fn ([Note; READ_REQUESTS_LENGTH], P) -> [Note; S],
        filter_args: P,
    ) -> Self {
         NoteGetterOptions {
            sort_by: [Sort::nada(); N],
            offset: 0,
            filter,
            filter_args,
        }
    }
}
