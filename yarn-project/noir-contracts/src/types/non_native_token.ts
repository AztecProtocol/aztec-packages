/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  Contract,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  Wallet,
} from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { Fr, Point } from '@aztec/foundation/fields';
import { AztecRPC, PublicKey } from '@aztec/types';

import { NonNativeTokenContractAbi } from '../artifacts/index.js';

/**
 * Type-safe interface for contract NonNativeToken;
 */
export class NonNativeTokenContract extends Contract {
  constructor(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    super(address, NonNativeTokenContractAbi, wallet);
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(
    rpc: AztecRPC,
    initial_supply: Fr | bigint | number | { toField: () => Fr },
    owner: Fr | bigint | number | { toField: () => Fr },
  ) {
    return new DeployMethod(Point.ZERO, rpc, NonNativeTokenContractAbi, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    rpc: AztecRPC,
    publicKey: PublicKey,
    initial_supply: Fr | bigint | number | { toField: () => Fr },
    owner: Fr | bigint | number | { toField: () => Fr },
  ) {
    return new DeployMethod(publicKey, rpc, NonNativeTokenContractAbi, Array.from(arguments).slice(2));
  }

  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return NonNativeTokenContractAbi;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** addUnshieldedBalance(amount: field, recipient: field) */
    addUnshieldedBalance: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      recipient: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: Fr | bigint | number | { toField: () => Fr },
      nonce: Fr | bigint | number | { toField: () => Fr },
      storage_slot: Fr | bigint | number | { toField: () => Fr },
      preimage: (Fr | bigint | number | { toField: () => Fr })[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** getBalance(owner: field) */
    getBalance: ((owner: Fr | bigint | number | { toField: () => Fr }) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** mint(amount: field, owner: field, msg_key: field, secret: field, canceller: field) */
    mint: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      owner: Fr | bigint | number | { toField: () => Fr },
      msg_key: Fr | bigint | number | { toField: () => Fr },
      secret: Fr | bigint | number | { toField: () => Fr },
      canceller: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** mintPublic(amount: field, owner_address: field, msg_key: field, secret: field, canceller: field) */
    mintPublic: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      owner_address: Fr | bigint | number | { toField: () => Fr },
      msg_key: Fr | bigint | number | { toField: () => Fr },
      secret: Fr | bigint | number | { toField: () => Fr },
      canceller: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** redeemShield(amount: field, secret: field, owner: field) */
    redeemShield: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      secret: Fr | bigint | number | { toField: () => Fr },
      owner: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** shield(amount: field, secretHash: field) */
    shield: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      secretHash: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** transfer(amount: field, sender: field, recipient: field) */
    transfer: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      sender: Fr | bigint | number | { toField: () => Fr },
      recipient: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** unshieldTokens(amount: field, owner: field, recipient: field) */
    unshieldTokens: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      owner: Fr | bigint | number | { toField: () => Fr },
      recipient: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** withdraw(amount: field, sender: field, recipient: field, callerOnL1: field) */
    withdraw: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      sender: Fr | bigint | number | { toField: () => Fr },
      recipient: Fr | bigint | number | { toField: () => Fr },
      callerOnL1: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** withdrawPublic(amount: field, recipient: field, callerOnL1: field) */
    withdrawPublic: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      recipient: Fr | bigint | number | { toField: () => Fr },
      callerOnL1: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
