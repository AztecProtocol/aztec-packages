/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  Contract,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  Wallet,
} from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { Fr, Point } from '@aztec/foundation/fields';
import { AztecRPC } from '@aztec/types';

import { PendingCommitmentsContractAbi } from '../examples/index.js';

/**
 * Type-safe interface for contract PendingCommitments;
 */
export class PendingCommitmentsContract extends Contract {
  constructor(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    super(address, PendingCommitmentsContractAbi, wallet);
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(rpc: AztecRPC) {
    return new DeployMethod(Point.ZERO, rpc, PendingCommitmentsContractAbi, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(rpc: AztecRPC, publicKey: Point) {
    return new DeployMethod(publicKey, rpc, PendingCommitmentsContractAbi, Array.from(arguments).slice(2));
  }

  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return PendingCommitmentsContractAbi;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** create_note(amount: field, owner: struct) */
    create_note: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      owner: { x: Fr | bigint | number | { toField: () => Fr }; y: Fr | bigint | number | { toField: () => Fr } },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** get_and_check_note(expected_value: field, owner: struct) */
    get_and_check_note: ((
      expected_value: Fr | bigint | number | { toField: () => Fr },
      owner: { x: Fr | bigint | number | { toField: () => Fr }; y: Fr | bigint | number | { toField: () => Fr } },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** stev(contract_address: field, storage_slot: field, preimage: array) */
    stev: ((
      contract_address: Fr | bigint | number | { toField: () => Fr },
      storage_slot: Fr | bigint | number | { toField: () => Fr },
      preimage: (Fr | bigint | number | { toField: () => Fr })[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** test_bad_read_then_insert_flat(amount: field, owner: struct) */
    test_bad_read_then_insert_flat: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      owner: { x: Fr | bigint | number | { toField: () => Fr }; y: Fr | bigint | number | { toField: () => Fr } },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** test_insert_then_read_both_in_nested_calls(amount: field, owner: struct, createFnSelector: field, getAndCheckFnSelector: field) */
    test_insert_then_read_both_in_nested_calls: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      owner: { x: Fr | bigint | number | { toField: () => Fr }; y: Fr | bigint | number | { toField: () => Fr } },
      createFnSelector: Fr | bigint | number | { toField: () => Fr },
      getAndCheckFnSelector: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** test_insert_then_read_flat(amount: field, owner: struct) */
    test_insert_then_read_flat: ((
      amount: Fr | bigint | number | { toField: () => Fr },
      owner: { x: Fr | bigint | number | { toField: () => Fr }; y: Fr | bigint | number | { toField: () => Fr } },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
