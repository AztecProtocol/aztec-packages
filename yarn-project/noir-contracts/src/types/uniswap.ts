/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  Contract,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  Wallet,
} from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { Fr, Point } from '@aztec/foundation/fields';
import { AztecRPC } from '@aztec/types';

import { UniswapContractAbi } from '../examples/index.js';

/**
 * Type-safe interface for contract Uniswap;
 */
export class UniswapContract extends Contract {
  constructor(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    super(address, UniswapContractAbi, wallet);
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(rpc: AztecRPC) {
    return new DeployMethod(Point.ZERO, rpc, UniswapContractAbi, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(rpc: AztecRPC, publicKey: Point) {
    return new DeployMethod(publicKey, rpc, UniswapContractAbi, Array.from(arguments).slice(2));
  }

  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return UniswapContractAbi;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** _compute_swap_content_hash(inAmount: field, uniswapFeeTier: field, outputTokenPortal: field, amountOutMin: field, aztecRecipientAddress: field, secretHash: field, deadlineForL1ToL2Message: field, canceller: field, callerOnL1: field) */
    _compute_swap_content_hash: ((
      inAmount: Fr | bigint | number | { toField: () => Fr },
      uniswapFeeTier: Fr | bigint | number | { toField: () => Fr },
      outputTokenPortal: Fr | bigint | number | { toField: () => Fr },
      amountOutMin: Fr | bigint | number | { toField: () => Fr },
      aztecRecipientAddress: Fr | bigint | number | { toField: () => Fr },
      secretHash: Fr | bigint | number | { toField: () => Fr },
      deadlineForL1ToL2Message: Fr | bigint | number | { toField: () => Fr },
      canceller: Fr | bigint | number | { toField: () => Fr },
      callerOnL1: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** swap(withdrawFnSelector: field, inputAsset: field, inputAssetPortalAddress: field, inputAmount: field, uniswapFeeTier: field, outputAsset: field, outputAssetPortalAddress: field, minimumOutputAmount: field, sender: field, recipient: field, secretHash: field, deadlineForL1ToL2Message: field, cancellerForL1ToL2Message: field, l1UniswapPortal: field, callerOnL1: field) */
    swap: ((
      withdrawFnSelector: Fr | bigint | number | { toField: () => Fr },
      inputAsset: Fr | bigint | number | { toField: () => Fr },
      inputAssetPortalAddress: Fr | bigint | number | { toField: () => Fr },
      inputAmount: Fr | bigint | number | { toField: () => Fr },
      uniswapFeeTier: Fr | bigint | number | { toField: () => Fr },
      outputAsset: Fr | bigint | number | { toField: () => Fr },
      outputAssetPortalAddress: Fr | bigint | number | { toField: () => Fr },
      minimumOutputAmount: Fr | bigint | number | { toField: () => Fr },
      sender: Fr | bigint | number | { toField: () => Fr },
      recipient: Fr | bigint | number | { toField: () => Fr },
      secretHash: Fr | bigint | number | { toField: () => Fr },
      deadlineForL1ToL2Message: Fr | bigint | number | { toField: () => Fr },
      cancellerForL1ToL2Message: Fr | bigint | number | { toField: () => Fr },
      l1UniswapPortal: Fr | bigint | number | { toField: () => Fr },
      callerOnL1: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
