/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import ContractClassRegistererContractArtifactJson from '../target/contract_class_registerer_contract-ContractClassRegisterer.json' assert { type: 'json' };

export const ContractClassRegistererContractArtifact = loadContractArtifact(
  ContractClassRegistererContractArtifactJson as NoirCompiledContract,
);

/**
 * Type-safe interface for contract ContractClassRegisterer;
 */
export class ContractClassRegistererContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, ContractClassRegistererContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(
      address,
      ContractClassRegistererContract.artifact,
      wallet,
    ) as Promise<ContractClassRegistererContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<ContractClassRegistererContract>(
      Point.ZERO,
      wallet,
      ContractClassRegistererContractArtifact,
      ContractClassRegistererContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
    return new DeployMethod<ContractClassRegistererContract>(
      publicKey,
      wallet,
      ContractClassRegistererContractArtifact,
      ContractClassRegistererContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return ContractClassRegistererContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** broadcast_private_function(contract_class_id: struct, artifact_metadata_hash: field, unconstrained_functions_artifact_tree_root: field, private_function_tree_sibling_path: array, artifact_function_tree_sibling_path: array, function_data: struct) */
    broadcast_private_function: ((
      contract_class_id: WrappedFieldLike,
      artifact_metadata_hash: FieldLike,
      unconstrained_functions_artifact_tree_root: FieldLike,
      private_function_tree_sibling_path: FieldLike[],
      artifact_function_tree_sibling_path: FieldLike[],
      function_data: {
        selector: FunctionSelectorLike;
        metadata_hash: FieldLike;
        vk_hash: FieldLike;
        bytecode: FieldLike[];
      },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** broadcast_unconstrained_function(contract_class_id: struct, artifact_metadata_hash: field, private_functions_artifact_tree_root: field, artifact_function_tree_sibling_path: array, function_data: struct) */
    broadcast_unconstrained_function: ((
      contract_class_id: WrappedFieldLike,
      artifact_metadata_hash: FieldLike,
      private_functions_artifact_tree_root: FieldLike,
      artifact_function_tree_sibling_path: FieldLike[],
      function_data: { selector: FunctionSelectorLike; metadata_hash: FieldLike; bytecode: FieldLike[] },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** constructor() */
    constructor: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** register(artifact_hash: field, private_functions_root: field, public_bytecode_commitment: field, packed_public_bytecode: array) */
    register: ((
      artifact_hash: FieldLike,
      private_functions_root: FieldLike,
      public_bytecode_commitment: FieldLike,
      packed_public_bytecode: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
