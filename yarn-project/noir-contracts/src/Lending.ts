/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import LendingContractArtifactJson from '../target/lending_contract-Lending.json' assert { type: 'json' };

export const LendingContractArtifact = loadContractArtifact(LendingContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract Lending;
 */
export class LendingContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, LendingContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, LendingContract.artifact, wallet) as Promise<LendingContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<LendingContract>(
      Point.ZERO,
      wallet,
      LendingContractArtifact,
      LendingContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
    return new DeployMethod<LendingContract>(
      publicKey,
      wallet,
      LendingContractArtifact,
      LendingContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return LendingContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** get_assets() */
    get_assets: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** update_accumulator() */
    update_accumulator: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** deposit_public(amount: field, nonce: field, on_behalf_of: field, collateral_asset: struct) */
    deposit_public: ((
      amount: FieldLike,
      nonce: FieldLike,
      on_behalf_of: FieldLike,
      collateral_asset: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** repay_private(from: struct, amount: field, nonce: field, secret: field, on_behalf_of: field, stable_coin: struct) */
    repay_private: ((
      from: AztecAddressLike,
      amount: FieldLike,
      nonce: FieldLike,
      secret: FieldLike,
      on_behalf_of: FieldLike,
      stable_coin: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** constructor() */
    constructor: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** init(oracle: struct, loan_to_value: field, collateral_asset: struct, stable_coin: struct) */
    init: ((
      oracle: AztecAddressLike,
      loan_to_value: FieldLike,
      collateral_asset: AztecAddressLike,
      stable_coin: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** withdraw_private(secret: field, to: struct, amount: field) */
    withdraw_private: ((secret: FieldLike, to: AztecAddressLike, amount: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** get_asset(assetId: field) */
    get_asset: ((assetId: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** deposit_private(from: struct, amount: field, nonce: field, secret: field, on_behalf_of: field, collateral_asset: struct) */
    deposit_private: ((
      from: AztecAddressLike,
      amount: FieldLike,
      nonce: FieldLike,
      secret: FieldLike,
      on_behalf_of: FieldLike,
      collateral_asset: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** borrow_private(secret: field, to: struct, amount: field) */
    borrow_private: ((secret: FieldLike, to: AztecAddressLike, amount: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** get_position(owner: struct) */
    get_position: ((owner: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** repay_public(amount: field, nonce: field, owner: struct, stable_coin: struct) */
    repay_public: ((
      amount: FieldLike,
      nonce: FieldLike,
      owner: AztecAddressLike,
      stable_coin: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** borrow_public(to: struct, amount: field) */
    borrow_public: ((to: AztecAddressLike, amount: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** withdraw_public(to: struct, amount: field) */
    withdraw_public: ((to: AztecAddressLike, amount: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
