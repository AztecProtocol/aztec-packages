/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import EcdsaAccountContractArtifactJson from '../target/ecdsa_account_contract-EcdsaAccount.json' assert { type: 'json' };

export const EcdsaAccountContractArtifact = loadContractArtifact(
  EcdsaAccountContractArtifactJson as NoirCompiledContract,
);

/**
 * Type-safe interface for contract EcdsaAccount;
 */
export class EcdsaAccountContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, EcdsaAccountContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, EcdsaAccountContract.artifact, wallet) as Promise<EcdsaAccountContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, signing_pub_key_x: (bigint | number)[], signing_pub_key_y: (bigint | number)[]) {
    return new DeployMethod<EcdsaAccountContract>(
      Point.ZERO,
      wallet,
      EcdsaAccountContractArtifact,
      EcdsaAccountContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    publicKey: PublicKey,
    wallet: Wallet,
    signing_pub_key_x: (bigint | number)[],
    signing_pub_key_y: (bigint | number)[],
  ) {
    return new DeployMethod<EcdsaAccountContract>(
      publicKey,
      wallet,
      EcdsaAccountContractArtifact,
      EcdsaAccountContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return EcdsaAccountContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** entrypoint(payload: struct) */
    entrypoint: ((payload: {
      function_calls: {
        args_hash: FieldLike;
        function_selector: FunctionSelectorLike;
        target_address: AztecAddressLike;
        is_public: boolean;
      }[];
      nonce: FieldLike;
    }) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** constructor(signing_pub_key_x: array, signing_pub_key_y: array) */
    constructor: ((
      signing_pub_key_x: (bigint | number)[],
      signing_pub_key_y: (bigint | number)[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** is_valid(message_hash: field) */
    is_valid: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_valid_public(message_hash: field) */
    is_valid_public: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
