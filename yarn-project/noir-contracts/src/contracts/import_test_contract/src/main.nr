mod test_contract_interface;

// Contract that uses the autogenerated interface of the Test contract for calling its functions.
// Used for testing calling into other contracts via autogenerated interfaces.
contract ImportTest {
    use dep::aztec::abi;
    use dep::aztec::abi::PrivateContextInputs;
    use dep::aztec::context::PrivateContext;
    
    use crate::test_contract_interface::{
        TestContractInterface,
        AStructTestCodeGenStruct,
        ADeepStructTestCodeGenStruct,
        ANoteADeepStructTestCodeGenStruct,
        ManyNotesADeepStructTestCodeGenStruct,
    };

    fn constructor(
        inputs: PrivateContextInputs,
    ) -> distinct pub abi::PrivateCircuitPublicInputs {
        PrivateContext::new(inputs, 0).finish()
    }   
 
    // Calls the testCodeGen on the Test contract at the target address
    // Used for testing calling a function with arguments of multiple types
    // See yarn-project/acir-simulator/src/client/private_execution.ts
    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts
    fn main(
        inputs: PrivateContextInputs,
        target: Field
    ) -> distinct pub abi::PrivateCircuitPublicInputs {
        let mut context = PrivateContext::new(inputs, abi::hash_args([target]));
        let test_contract_instance = TestContractInterface::at(target);
        let return_values = test_contract_instance.testCodeGen(
            &mut context,
            1,
            true,
            1 as u32,
            [1, 2],
            AStructTestCodeGenStruct { amount: 1, secretHash: 2 },
            ADeepStructTestCodeGenStruct {
                aField: 1, 
                aBool: true, 
                aNote: ANoteADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },
                manyNotes: [
                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },
                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },
                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },
                ]
            }
        );

        context.return_values.push(return_values[0]);
        context.finish()
    }

    // Calls the getThisAddress on the Test contract at the target address
    // Used for testing calling a function with no arguments
    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts
    fn callNoArgs(
        inputs: PrivateContextInputs,
        target: Field
    ) -> distinct pub abi::PrivateCircuitPublicInputs {
        let mut context = PrivateContext::new(inputs, abi::hash_args([target]));
        let test_contract_instance = TestContractInterface::at(target);
        let return_values = test_contract_instance.getThisAddress(&mut context);
        context.return_values.push(return_values[0]);
        context.finish()
    }

    // Calls the createNullifierPublic on the Test contract at the target address
    // Used for testing calling an open function
    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts
    fn callOpenFn(
        inputs: PrivateContextInputs,
        target: Field,
    ) -> distinct pub abi::PrivateCircuitPublicInputs {
        let mut context = PrivateContext::new(inputs, abi::hash_args([target]));
        let test_contract_instance = TestContractInterface::at(target);
        test_contract_instance.createNullifierPublic(&mut context, 1, 2);
        context.finish()
    }
}

