/* Autogenerated file, do not edit! */
  
use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::aztec::constants_gen::RETURN_VALUES_LENGTH;



// Interface for calling NonNativeToken functions from a private context
struct NonNativeTokenPrivateContextInterface {
  address: Field,
}

impl NonNativeTokenPrivateContextInterface {
  fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  fn addUnshieldedBalance(
    self,
    context: &mut PrivateContext,
    amount: Field,
    recipient: Field
  ) {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;

    context.call_public_function(self.address, 0x716a727f, serialised_args)
  }
  

  fn mint(
    self,
    context: &mut PrivateContext,
    amount: Field,
    owner: Field,
    msg_key: Field,
    secret: Field,
    canceller: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 5];
    serialised_args[0] = amount;
    serialised_args[1] = owner;
    serialised_args[2] = msg_key;
    serialised_args[3] = secret;
    serialised_args[4] = canceller;

    context.call_private_function(self.address, 0x641662d1, serialised_args)
  }
  

  fn mintPublic(
    self,
    context: &mut PrivateContext,
    amount: Field,
    owner_address: Field,
    msg_key: Field,
    secret: Field,
    canceller: Field
  ) {
    let mut serialised_args = [0; 5];
    serialised_args[0] = amount;
    serialised_args[1] = owner_address;
    serialised_args[2] = msg_key;
    serialised_args[3] = secret;
    serialised_args[4] = canceller;

    context.call_public_function(self.address, 0x93343cc1, serialised_args)
  }
  

  fn redeemShield(
    self,
    context: &mut PrivateContext,
    amount: Field,
    secret: Field,
    owner: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 3];
    serialised_args[0] = amount;
    serialised_args[1] = secret;
    serialised_args[2] = owner;

    context.call_private_function(self.address, 0x8ecff612, serialised_args)
  }
  

  fn shield(
    self,
    context: &mut PrivateContext,
    amount: Field,
    secretHash: Field
  ) {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = secretHash;

    context.call_public_function(self.address, 0x72451161, serialised_args)
  }
  

  fn transfer(
    self,
    context: &mut PrivateContext,
    amount: Field,
    recipient: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;

    context.call_private_function(self.address, 0xc0888d22, serialised_args)
  }
  

  fn unshieldTokens(
    self,
    context: &mut PrivateContext,
    amount: Field,
    recipient: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;

    context.call_private_function(self.address, 0x906b1f4f, serialised_args)
  }
  

  fn withdraw(
    self,
    context: &mut PrivateContext,
    amount: Field,
    sender: Field,
    recipient: Field,
    callerOnL1: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 4];
    serialised_args[0] = amount;
    serialised_args[1] = sender;
    serialised_args[2] = recipient;
    serialised_args[3] = callerOnL1;

    context.call_private_function(self.address, 0x760d58ea, serialised_args)
  }
  

  fn withdrawPublic(
    self,
    context: &mut PrivateContext,
    amount: Field,
    recipient: Field,
    callerOnL1: Field
  ) {
    let mut serialised_args = [0; 3];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;
    serialised_args[2] = callerOnL1;

    context.call_public_function(self.address, 0xc80c80d3, serialised_args)
  }
  
}
  
  


// Interface for calling NonNativeToken functions from a public context
struct NonNativeTokenPublicContextInterface {
  address: Field,
}

impl NonNativeTokenPublicContextInterface {
  fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  fn addUnshieldedBalance(
    self,
    context: PublicContext,
    amount: Field,
    recipient: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;

    context.call_public_function(self.address, 0x716a727f, serialised_args)
  }
  

  fn mintPublic(
    self,
    context: PublicContext,
    amount: Field,
    owner_address: Field,
    msg_key: Field,
    secret: Field,
    canceller: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 5];
    serialised_args[0] = amount;
    serialised_args[1] = owner_address;
    serialised_args[2] = msg_key;
    serialised_args[3] = secret;
    serialised_args[4] = canceller;

    context.call_public_function(self.address, 0x93343cc1, serialised_args)
  }
  

  fn shield(
    self,
    context: PublicContext,
    amount: Field,
    secretHash: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = secretHash;

    context.call_public_function(self.address, 0x72451161, serialised_args)
  }
  

  fn withdrawPublic(
    self,
    context: PublicContext,
    amount: Field,
    recipient: Field,
    callerOnL1: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 3];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;
    serialised_args[2] = callerOnL1;

    context.call_public_function(self.address, 0xc80c80d3, serialised_args)
  }
  
}
  
  
