/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import ParentContractArtifactJson from '../target/parent_contract-Parent.json' assert { type: 'json' };

export const ParentContractArtifact = loadContractArtifact(ParentContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract Parent;
 */
export class ParentContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, ParentContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, ParentContract.artifact, wallet) as Promise<ParentContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<ParentContract>(
      Point.ZERO,
      wallet,
      ParentContractArtifact,
      ParentContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
    return new DeployMethod<ParentContract>(
      publicKey,
      wallet,
      ParentContractArtifact,
      ParentContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return ParentContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** enqueueCallToChild(targetContract: struct, targetSelector: struct, targetValue: field) */
    enqueueCallToChild: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
      targetValue: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** enqueueCallsToChildWithNestedLast(targetContract: struct, targetSelector: struct) */
    enqueueCallsToChildWithNestedLast: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** enqueueCallsToPubEntryPoint(targetContract: struct, targetSelector: struct, targetValue: field) */
    enqueueCallsToPubEntryPoint: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
      targetValue: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** enqueueCallsToChildWithNestedFirst(targetContract: struct, targetSelector: struct) */
    enqueueCallsToChildWithNestedFirst: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** constructor() */
    constructor: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** enqueueCallToChildTwice(targetContract: struct, targetSelector: struct, targetValue: field) */
    enqueueCallToChildTwice: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
      targetValue: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** entryPoint(targetContract: struct, targetSelector: struct) */
    entryPoint: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** pubEntryPointTwice(targetContract: struct, targetSelector: struct, initValue: field) */
    pubEntryPointTwice: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
      initValue: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** pubEntryPoint(targetContract: struct, targetSelector: struct, initValue: field) */
    pubEntryPoint: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
      initValue: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** enqueueCallToPubEntryPoint(targetContract: struct, targetSelector: struct, targetValue: field) */
    enqueueCallToPubEntryPoint: ((
      targetContract: AztecAddressLike,
      targetSelector: FunctionSelectorLike,
      targetValue: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
