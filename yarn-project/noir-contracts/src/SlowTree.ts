/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import SlowTreeContractArtifactJson from '../target/slow_tree_contract-SlowTree.json' assert { type: 'json' };

export const SlowTreeContractArtifact = loadContractArtifact(SlowTreeContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract SlowTree;
 */
export class SlowTreeContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, SlowTreeContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, SlowTreeContract.artifact, wallet) as Promise<SlowTreeContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<SlowTreeContract>(
      Point.ZERO,
      wallet,
      SlowTreeContractArtifact,
      SlowTreeContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
    return new DeployMethod<SlowTreeContract>(
      publicKey,
      wallet,
      SlowTreeContractArtifact,
      SlowTreeContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return SlowTreeContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** update_at_private(index: field, new_value: field) */
    update_at_private: ((index: FieldLike, new_value: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** un_read_root(address: struct) */
    un_read_root: ((address: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** initialize() */
    initialize: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** read_at(index: field) */
    read_at: ((index: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** read_at_pub(key: field) */
    read_at_pub: ((key: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** read_leaf_at_pub(key: field) */
    read_leaf_at_pub: ((key: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** constructor() */
    constructor: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** update_at_public(p: struct) */
    update_at_public: ((p: {
      index: FieldLike;
      new_value: FieldLike;
      before: { value: FieldLike; sibling_path: FieldLike[] };
      after: { value: FieldLike; sibling_path: FieldLike[] };
    }) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** un_read_leaf_at(address: struct, key: field) */
    un_read_leaf_at: ((address: AztecAddressLike, key: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(_contract_address: struct, _nonce: field, _storage_slot: field, _serialized_note: array) */
    compute_note_hash_and_nullifier: ((
      _contract_address: AztecAddressLike,
      _nonce: FieldLike,
      _storage_slot: FieldLike,
      _serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
