{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","hash":16453564428192608308,"abi":{"parameters":[{"name":"input","type":{"kind":"struct","path":"private_kernel_lib::private_kernel_inner::PrivateKernelInputsInner","fields":[{"name":"previous_kernel","type":{"kind":"struct","path":"private_kernel_lib::types::abis::previous_kernel_data::PreviousKernelData","fields":[{"name":"public_inputs","type":{"kind":"struct","path":"private_kernel_lib::types::abis::kernel_circuit_public_inputs::KernelCircuitPublicInputs","fields":[{"name":"aggregation_object","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::AggregationObject","fields":[]}},{"name":"meta_hwm","type":{"kind":"field"}},{"name":"end","type":{"kind":"struct","path":"private_kernel_lib::types::abis::combined_accumulated_data::CombinedAccumulatedData","fields":[{"name":"read_requests","type":{"kind":"array","length":128,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::nullifier_key_validation_request::NullifierKeyValidationRequestContext","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":64,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":64,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack","type":{"kind":"array","length":8,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack","type":{"kind":"array","length":8,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"new_contracts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::new_contract_data::NewContractData","fields":[{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}},{"name":"public_data_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::public_data_update_request::PublicDataUpdateRequest","fields":[{"name":"leaf_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"public_data_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::public_data_read::PublicDataRead","fields":[{"name":"leaf_slot","type":{"kind":"field"}},{"name":"value","type":{"kind":"field"}}]}}}]}},{"name":"constants","type":{"kind":"struct","path":"private_kernel_lib::types::abis::combined_constant_data::CombinedConstantData","fields":[{"name":"historical_header","type":{"kind":"struct","path":"private_kernel_lib::types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"private_kernel_lib::types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"private_kernel_lib::types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"private_kernel_lib::types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"tx_context","type":{"kind":"struct","path":"private_kernel_lib::types::transaction::context::TxContext","fields":[{"name":"is_fee_payment_tx","type":{"kind":"boolean"}},{"name":"is_rebate_payment_tx","type":{"kind":"boolean"}},{"name":"is_contract_deployment_tx","type":{"kind":"boolean"}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"private_kernel_lib::types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]}},{"name":"is_private","type":{"kind":"boolean"}}]}},{"name":"proof","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::Proof","fields":[]}},{"name":"vk","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::VerificationKey","fields":[]}},{"name":"vk_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"vk_path","type":{"kind":"array","length":3,"type":{"kind":"field"}}}]}},{"name":"private_call","type":{"kind":"struct","path":"private_kernel_lib::types::abis::private_kernel::private_call_data::PrivateCallData","fields":[{"name":"call_stack_item","type":{"kind":"struct","path":"private_kernel_lib::types::abis::private_call_stack_item::PrivateCallStackItem","fields":[{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_data","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_data::FunctionData","fields":[{"name":"selector","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_internal","type":{"kind":"boolean"}},{"name":"is_private","type":{"kind":"boolean"}},{"name":"is_constructor","type":{"kind":"boolean"}}]}},{"name":"public_inputs","type":{"kind":"struct","path":"private_kernel_lib::types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"private_kernel_lib::types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"private_kernel_lib::types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"private_kernel_lib::types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"private_kernel_lib::types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"private_kernel_lib::types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]}},{"name":"private_call_stack","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"proof","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::Proof","fields":[]}},{"name":"vk","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::VerificationKey","fields":[]}},{"name":"salted_initialization_hash","type":{"kind":"struct","path":"private_kernel_lib::types::address::SaltedInitializationHash","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"public_keys_hash","type":{"kind":"struct","path":"private_kernel_lib::types::address::PublicKeysHash","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_class_artifact_hash","type":{"kind":"field"}},{"name":"contract_class_public_bytecode_commitment","type":{"kind":"field"}},{"name":"function_leaf_membership_witness","type":{"kind":"struct","path":"private_kernel_lib::types::abis::membership_witness::FunctionLeafMembershipWitness","fields":[{"name":"leaf_index","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}}}]}},{"name":"read_request_membership_witnesses","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::membership_witness::ReadRequestMembershipWitness","fields":[{"name":"leaf_index","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":32,"type":{"kind":"field"}}},{"name":"is_transient","type":{"kind":"boolean"}},{"name":"hint_to_commitment","type":{"kind":"field"}}]}}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"acir_hash","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"input":[{"start":0,"end":2212}]},"return_type":{"abi_type":{"kind":"struct","path":"private_kernel_lib::types::abis::kernel_circuit_public_inputs::KernelCircuitPublicInputs","fields":[{"name":"aggregation_object","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::AggregationObject","fields":[]}},{"name":"meta_hwm","type":{"kind":"field"}},{"name":"end","type":{"kind":"struct","path":"private_kernel_lib::types::abis::combined_accumulated_data::CombinedAccumulatedData","fields":[{"name":"read_requests","type":{"kind":"array","length":128,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::nullifier_key_validation_request::NullifierKeyValidationRequestContext","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":64,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":64,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack","type":{"kind":"array","length":8,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack","type":{"kind":"array","length":8,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"new_contracts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::new_contract_data::NewContractData","fields":[{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}},{"name":"public_data_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::public_data_update_request::PublicDataUpdateRequest","fields":[{"name":"leaf_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"public_data_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::public_data_read::PublicDataRead","fields":[{"name":"leaf_slot","type":{"kind":"field"}},{"name":"value","type":{"kind":"field"}}]}}}]}},{"name":"constants","type":{"kind":"struct","path":"private_kernel_lib::types::abis::combined_constant_data::CombinedConstantData","fields":[{"name":"historical_header","type":{"kind":"struct","path":"private_kernel_lib::types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"private_kernel_lib::types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"private_kernel_lib::types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"private_kernel_lib::types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"tx_context","type":{"kind":"struct","path":"private_kernel_lib::types::transaction::context::TxContext","fields":[{"name":"is_fee_payment_tx","type":{"kind":"boolean"}},{"name":"is_rebate_payment_tx","type":{"kind":"boolean"}},{"name":"is_contract_deployment_tx","type":{"kind":"boolean"}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"private_kernel_lib::types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]}},{"name":"is_private","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843]},"bytecode":"","debug_symbols":"1P3dijVKlqbZ3UseF2LNH5tmVrcidNBILWhoqoWqzoq6d5lDb49KMsQuoezV4yNPksBZ6w0Ie9yDPQfxX//lf/3f/u//03/5X/63//Sf/+U//td/+fxf6vQ9//If/6//9V/+8//rf/pPP//af/4v/9P/+7/8y3/MT/6Hf/mf/9P/4/1/vf7bf/iX/+f/8r/+z//yHyPmv/2Hf/Ozcfb+3384zq3/7qc//+3/9h/+92+5X/iW9fl85VviK9+SX/mW+sq39Fe+ZX3lW+Yr37K/8i3nK9/ylbcfX3n78ZW3H195+/GVtx9fefvxlbcfX3n78ZW3H195+/GVt59fefv5lbefX3n7+ZW3n195+/mVt59fefv5lbefX3n7+ZW3X195+/WVt19fefv1lbdfX3n79ZW3X195+/WVt19fefv1lbffX3n7/ZW33195+/2Vt99fefv9lbffX3n7/ZW33195+/2Vt7++8vbXV97++srbX195++srb3995e2vr7z99ZW3v77y9tdX3v585e3PV97+fOXtz1fe/nzl7c9X3v585e3PV97+fOXtz1fe/v7K299fefv7K29/f+Xt76+8/f2Vt7+/8vb3V97+/srb3195++crb/985e2fr7z985W3f77y9s9X3v75yts/X3n75ytv/3zl7d+vvP37lbd/v/L271fe/v3K279fefv3K2//fuXtf+Wub33lrm++ctc3X7nrm6/c9c1X7vrm01/5lvWVb5mvfMv+yrecr3zLV97+V+765it3ffOVu775yl3ffOWub75y1zdfueubr9z1zVfu+uYrd33zlbu++cpd33zlrm++ctc3X7nrm6/c9c1X7vrmK3d985W7vvnKXd985a5vvnLXN1+565uv3PXNV+765it3ffOVu775yl3ffOWub75y1zdfueubr9z1zVfu+uYrd33zlbu++cpd33zlrm++ctc3X7nrm6/c9c1X7vrmK3d985W7vvnKXd985a5vvnLXN1+565uv3PXNV+765it3ffOVu775yl3ffOWub75y1zdfueubr9z1zVfu+uYrd33zlbu++cpd33zlrm++ctc3X7nrm6/c9c1X7vrmK3d985W7vvnKXd985a5vvnLXN1+565uv3PXNV+765it3ffOVu775yl3ffOWub75y1zdfueubr9z1zVfu+uYrd33zlbu++cpd33zl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c4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec4Gec0DPOaDnHNBzDug55+N1fEDPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE95wY95wY95wY95wY95/54Hd+g59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg59yg5zyg5zyg5zyg5zyg5zwfr+MH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH9JwH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zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM+5Qc+5Qc+5Qc+5Qc+5P17HN+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5N+g5D+g5D+g5D+g5D+g5z8fr+AE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wE95wU95wU95wU95wU95/14Hb+g57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg57yg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0HMe0HMe0HOej9fxA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOA3rOC3rOC3rOC3rOC3rO+/E6fkHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeUHPeT3PuT+e53ybuI6/TVzH3yau428T1/G3iev428R1/G3iOv42cR1/m8COe57zbQI77nnOtwnsuOc53yaw457nfJvAjnue820CO+55zrcJ7LjnOd8msOOe53ybwI57nvNtAjvuec63Cey45znfJrDjnud8m8COe57zbQI77nnOtwnsuOc53yaw457nfJvAjnue820CO+55zrcJ7LjnOd8msOOe53ybwI57nvNtAjvuec63Cey45znfJrDjnud8m8COe57zbQI77nnOtwnsuOc53yaw457nfJvAjnue820CO+55zrcJ7LjnOd8msOOe53ybwI57nvNtAjvuec63Cey45znfJrDjnud8m8COe57zbQI77nnOtwnsuOc53yaw457nfJvAjnue820CO+55zrcJ7Ljn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9JwDes4Nes4Nes4Nes4Nes798Tq+Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc+5Qc95QM95QM95QM95QM95Pl7HD+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5L+g5L+g5L+g5L+g578fr+AU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU9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D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5D+g5L+g5L+g5L+g5L+g578fr+AU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95wU95+U85/p8OM/5s0nr+M8mreM/m7SO/2zSOv6zSev4zyat4z+btI7/bNI6/rMJ7DjnOX82gR3nPOfPJrDjnOf82QR2nPOcP5vAjnOe82cT2HHOc/5sAjvOec6fTWDHOc/5swnsOOc5fzaBHec8588msOOc5/zZBHac85w/m8COc57zZxPYcc5z/mwCO855zp9NYMc5z/mzCew45zl/NoEd5zznzyaw45zn/NkEdpzznD+bwI5znvNnE9hxznP+bAI7znnOn01gxznP+bMJ7DjnOX82gR3nPOfPJrDjnOf82QR2nPOcP5vAjnOe82cT2HHOc/5sAjvOec6fTWDHOc/5swnsOOc5fzaBHec8588msOOc5/zZBHac85w/m8COc57zZxPYcc5z/mwCO855zp9NYMc5z/mzCew45zl/NoEd5zznzyaw45zn/NkEdpzznD+bwI5znvNnk9fxAD1ngJ4zQM8ZoOeMj9fxAD1ngJ4zQM8ZoOcM0HMG6DkD9JwBes4APWeAnjNAzxmg5wzQcwboOQP0nAF6zgA9Z4CeM0DPGaDnDNBzBug5A/ScAXrOAD1ngJ4zQM8ZoOcM0HMG6DkD9JwBes4APWeAnjNAzxmg5wzQcwboOQP0nAF6zgA9Z4CeM0DPGaDnDNBzBug5A/ScAXrOAD1ngJ4zQM8ZoOcM0HMG6DkD9JwBes4APWeAnjNAzxmg5wzQcwboOQP0nAF6zgA9Z4CeM0DPGaDnDNBzBug5A/ScAXrOAD1ngJ4zQM8ZoOcM0HMG6DkD9JwBes4APWeAnjNAzxmg5wzQcwboOQP0nAF6zgA9Z4CeM0DPGaDnDNBzBug5A/ScCXrOBD1ngp4zQc+ZH6/jCXrOBD1ngp4zQc+ZoOdM0HMm6DkT9JwJes4EPWeCnjNBz5mg50zQcyboORP0nAl6zgQ9Z4KeM0HPmaDnTNBzJug5E/ScCXrOBD1ngp4zQc+ZoOdM0HMm6DkT9JwJes4EPWeCnjNBz5mg50zQcyboORP0nAl6zgQ9Z4KeM0HPmaDnTNBzJug5E/ScCXrOBD1ngp4zQc+ZoOdM0HMm6DkT9JwJes4EPWeCnjNBz5mg50zQcyboORP0nAl6zgQ9Z4KeM0HPmaDnTNBzJug5E/ScCXrOBD1ngp4zQc+ZoOdM0HMm6DkT9JwJes4EPWeCnjNBz5mg50zQcyboORP0nAl6zgQ9Z4KeM0HPmaDnTNBzJug5C/ScBXrOAj1ngZ6zPl7HC/ScBXrOAj1ngZ6zQM9ZoOcs0HMW6DkL9JwFes4CPWeBnrNAz1mg5yzQcxboOQv0nAV6zgI9Z4Ges0DPWaDnLNBzFug5C/ScBXrOAj1ngZ6zQM9ZoOcs0HMW6DkL9JwFes4CPWeBnrNAz1mg5yzQcxboOQv0nAV6zgI9Z4Ges0DPWaDnLNBzFug5C/ScBXrOAj1ngZ6zQM9ZoOcs0HMW6DkL9JwFes4CPWeBnrNAz1mg5yzQcxboOQv0nAV6zgI9Z4Ges0DPWaDnLNBzFug5C/ScBXrOAj1ngZ6zQM9ZoOcs0HMW6DkL9JwFes4CPWeBnrNAz1mg5yzQcxboOQv0nAV6zgI9Z4Ges0DPWaDnLNBzNug5G/ScDXrOBj1nf7yON+g5G/ScDXrOBj1ng56zQc/ZoOds0HM26Dkb9JwNes4GPWeDnrNBz9mg52zQczboORv0nA16zgY9Z4Oes0HP2aDnbNBzNug5G/ScDXrOBj1ng56zQc/ZoOds0HM26Dkb9JwNes4GPWeDnrNBz9mg52zQczboORv0nA16zgY9Z4Oes0HP2aDnbNBzNug5G/ScDXrOBj1ng56zQc/ZoOds0HM26Dkb9JwNes4GPWeDnrNBz9mg52zQczboORv0nA16zgY9Z4Oes0HP2aDnbNBzNug5G/ScDXrOBj1ng56zQc/ZoOds0HM26Dkb9JwNes4GPWeDnrNBz9mg52zQczboORv0nA16zgY9Z4Oes0HP2aDnXKDnXKDnXKDnXKDnfP8pBzd5HV+g51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg51yg5xzQcw7oOQf0nAN6zvl4HR/Qcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rOAT3ngJ5zQM85oOcc0HMO6DkH9JwDes4BPeeAnnNAzzmg5xzQcw7oOQf0nAN6zgE954Cec0DPOaDnHNBzDug5B/ScA3rO+brnfH+J/LVpZ/yrTf/2p+P+tSNu/f7s/fzO/zr9/HeeH3/2/Pyz59efPb//7PlLnp8R//jofzp//uz5dPf/bv7+0N3/+/l0eXI+f330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lbCfsxL2c1bCfs5K2M9ZCfs5K2E/ZyXs56yE/ZyVsJ+zEvZzVsJ+zkrYz1kJ+zkrYT9nJeznrIT9nJWwn7MS9nNWwn7OStjPWQn7OSthP2cl7OeshP2clbCfsxL2c1bCfs5K2M9ZCfs5K2E/ZyXs56yE/ZyVsJ+zEvZzVsJ+zkrYz1kJ+zkrYT9nJeznrIT9nJWwn7MS9nNWwn7OStjPWQn7OSthP2cl7OeshP2clbCfsxL2c1bCfs5K2M9ZCfs5K2E/ZyPs52yE/ZyNsJ+zEfZzto0vjjfCfs5G2M/ZCPs5G2E/ZyPs52yE/ZyNsJ+zEfZzNsJ+zkbYz9kI+zkbYT9nI+znbIT9nI2wn7MR9nM2wn7ORtjP2Qj7ORthP2cj7OdshP2cjbCfsxH2czbCfs5G2M/ZCPs5G2E/ZyPs52yE/ZyNsJ+zEfZzNsJ+zkbYz9kI+zkbYT9nI+znbIT9nI2wn7MR9nM2wn7ORtjP2Qj7ORthP2cj7OdshP2cjbCfsxH2czbCfs5G2M/ZCPs5G2E/ZyPs52yE/ZyNsJ+zEfZzNsJ+zkbYz9kI+zkbYT9nI+znbIT9nI2wn7MR9nM2wn7ORtjP2Qj7ORthP2cj7OdshP2cjbCfsxH2czbCfs5G2M/ZCPs5G2E/ZyPs52yE/ZyNsJ+zEfZzNsJ+zkbYz9kI+zkbYT9nI+znbIT9nI2wn7MR9nM2wn7ORtjP2Qj7ORthP2cj7OdshP2cjbCfsxP2c3bCfs5O2M/ZCfs5+8YXxzthP2cn7OfshP2cnbCfsxP2c3bCfs5O2M/ZCfs5O2E/Zyfs5+yE/ZydsJ+zE/ZzdsJ+zk7Yz9kJ+zk7YT9nJ+zn7IT9nJ2wn7MT9nN2wn7OTtjP2Qn7OTthP2cn7OfshP2cnbCfsxP2c3bCfs5O2M/ZCfs5O2E/Zyfs5+yE/ZydsJ+zE/ZzdsJ+zk7Yz9kJ+zk7YT9nJ+zn7IT9nJ2wn7MT9nN2wn7OTtjP2Qn7OTthP2cn7OfshP2cnbCfsxP2c3bCfs5O2M/ZCfs5O2E/Zyfs5+yE/ZydsJ+zE/ZzdsJ+zk7Yz9kJ+zk7YT9nJ+zn7IT9nJ2wn7MT9nN2wn7OTtjP2Qn7OTthP2cn7OfshP2cnbCfsxP2c3bCfs5O2M/ZCfs5O2E/Zyfs5+yE/ZydsJ+zE/ZzdsJ+zk7Yz9kJ+zk7YT9n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","file_map":{"0":{"source":"\n// TODO: Once we fully move to the new SSA pass this module can be removed and replaced\n// by the methods in the `slice` module\nimpl<T, N> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(self) -> Field {}\n\n    #[builtin(arraysort)]\n    pub fn sort(self) -> Self {}\n\n    // Sort with a custom sorting function.\n    pub fn sort_via<Env>(mut a: Self, ordering: fn[Env](T, T) -> bool) -> Self { \n        for i in 1 .. a.len() {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                }\n            }\n        }\n        a\n    }\n\n    // Converts an array into a slice.\n    pub fn as_slice(self) -> [T] {\n        let mut slice = [];\n        for elem in self {\n            slice = slice.push_back(elem);\n        }\n        slice\n    }\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1 .. self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1 .. self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/array.nr"},"2":{"source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u16 { fn eq(self, other: u16) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i16 { fn eq(self, other: i16) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, N> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<N> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, N> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n","path":"std/cmp.nr"},"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"27":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [u8; N], _state_length: u32) -> [u8; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n","path":"std/hash.nr"},"40":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\n\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 {\n            lo: lo as Field,\n            hi: hi as Field,\n        }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo,hi)\n    }\n\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 {\n            lo,\n            hi,\n        }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0;16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0;16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<N>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1; \n        if N <= 18 {\n            for i in 0..N-2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N-1 {           \n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 {\n            lo: lo as Field,\n            hi: hi as Field,\n        }\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            if ascii < 71 {\n                ascii - 55\n            } else {\n                ascii - 87\n            }\n            \n        } as Field\n    }\n\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if self < b {\n            (U128::from_u64s_le(0, 0), self)\n        } else {\n            //TODO check if this can overflow?\n            let (q,r) = self.unconstrained_div(b * U128::from_u64s_le(2,0));\n            let q_mul_2 = q * U128::from_u64s_le(2,0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::from_u64s_le(1,0), r - b)\n            }\n\n        }  \n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f-lo) / pow64;\n        U128 {\n            lo,\n            hi,\n        }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo+self.hi*pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64))as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift left with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift right with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n","path":"std/uint128.nr"},"44":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext {\n            public_key: self.public_key,\n            secret_key: self.secret_key,\n            contract_address,\n        }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"46":{"source":"use crate::{\n    abis::{\n        function_data::FunctionData,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    },\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__CALL_STACK_ITEM,\n        PRIVATE_CALL_STACK_ITEM_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x2442dd521c59987a4291be0fd11198e5a4d87c8bc36cf3b65c5229f61fc37b30);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"},"48":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        side_effect::{\n            SideEffect,\n            SideEffectLinkedToNoteHash,\n        },\n    },\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n        GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    },\n    contrakt::deployment_data::ContractDeploymentData,\n    header::Header,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    meta_hwm: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_commitments == other.new_commitments) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.meta_hwm as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            meta_hwm: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"49":{"source":"use crate::abis::function_selector::FunctionSelector;\nuse crate::constants::GENERATOR_INDEX__FUNCTION_LEAF;\nuse crate::traits::Hash;\n\nstruct FunctionLeafPreimage {\n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    vk_hash : Field,\n    acir_hash : Field\n}\n\nimpl Hash for FunctionLeafPreimage {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.vk_hash,\n            self.acir_hash\n        ], GENERATOR_INDEX__FUNCTION_LEAF)\n    }\n}\n\nstruct ContractClassFunctionLeafPreimage {\n    selector : FunctionSelector,\n    vk_hash : Field,\n}\n\nimpl Hash for ContractClassFunctionLeafPreimage {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.selector.to_field(),\n            self.vk_hash,\n        ], GENERATOR_INDEX__FUNCTION_LEAF)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_leaf_preimage.nr"},"50":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"51":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"58":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"60":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::contract_class::ContractClassId;\nuse crate::constants::GENERATOR_INDEX__CONTRACT_LEAF;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash};\n\nstruct NewContractData {\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_class_id: ContractClassId,\n}\n\nimpl Eq for NewContractData {\n    fn eq(self, data: NewContractData) -> bool {\n        data.contract_address.eq(self.contract_address)\n            & data.portal_contract_address.eq(self.portal_contract_address)\n            & data.contract_class_id.eq(self.contract_class_id)\n    }\n}\n\nimpl Empty for NewContractData {\n    fn empty() -> Self {\n        Self {\n            contract_address : AztecAddress::empty(),\n            portal_contract_address : EthAddress::empty(),\n            contract_class_id: ContractClassId::from_field(0),\n        }\n    }\n}\n\nimpl Hash for NewContractData {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0 // We want to return 0 here since the contract_address is zero\n        } else {\n            dep::std::hash::pedersen_hash_with_separator([\n                self.contract_address.to_field(),\n                self.portal_contract_address.to_field(),\n                self.contract_class_id.to_field(),\n            ], GENERATOR_INDEX__CONTRACT_LEAF)\n        }\n    }\n}\n\nimpl NewContractData {\n    pub fn is_empty(self) -> bool {\n        (self.contract_address.to_field() == 0) & \n        (self.portal_contract_address.to_field() == 0) & \n        (self.contract_class_id.to_field() == 0)\n    }\n\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/new_contract_data.nr"},"61":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"62":{"source":"use crate::address::AztecAddress;\nuse dep::std::cmp::Eq;\nuse crate::traits::Empty;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, caller_context: CallerContext) -> bool {\n        caller_context.msg_sender.eq(self.msg_sender)\n            & caller_context.storage_contract_address.eq(self.storage_contract_address)\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nstruct CallRequest {\n    hash: Field,\n    caller_contract_address: AztecAddress,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Eq for CallRequest {\n    fn eq(self, call_request: CallRequest) -> bool {\n        (call_request.hash == self.hash)\n            & (call_request.caller_contract_address.eq(self.caller_contract_address))\n            & (call_request.caller_context.eq(self.caller_context))\n            & (call_request.start_side_effect_counter == self.start_side_effect_counter)\n            & (call_request.end_side_effect_counter == self.end_side_effect_counter)\n    }\n}\n\nimpl Empty for CallRequest {\n    fn empty() -> Self {\n        CallRequest {\n            hash: 0,\n            caller_contract_address: AztecAddress::zero(),\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl CallRequest {\n    pub fn is_empty(self) -> bool {\n        self.hash == 0\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_request.nr"},"63":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot {\n            root : serialized[0],\n            next_available_leaf_index : serialized[1] as u32\n        }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            root: 0,\n            next_available_leaf_index: 0,\n        }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"},"64":{"source":"use crate::abis::{\n    combined_accumulated_data::{\n        CombinedAccumulatedData,\n        FinalAccumulatedData,\n        AccumulatedMetaData,\n        AccumulatedMetaDataBuilder,\n        CombinedAccumulatedDataBuilder,\n    },\n    combined_constant_data::CombinedConstantData\n};\nuse crate::mocked::AggregationObject;\n\nstruct KernelCircuitPublicInputs {\n    aggregation_object: AggregationObject,\n    meta_hwm: Field,\n    end: CombinedAccumulatedData,\n    constants: CombinedConstantData,\n    is_private: bool,\n}\n\nstruct KernelCircuitPublicInputsFinal {\n    aggregation_object: AggregationObject,\n    meta_hwm: Field,\n    end_meta: AccumulatedMetaData,\n    // TODO(fees) change this to end_app_logic\n    end: FinalAccumulatedData,\n    constants: CombinedConstantData,\n    is_private: bool,\n}\n\nstruct KernelCircuitPublicInputsBuilder {\n    aggregation_object: AggregationObject,\n    meta_hwm: Field,\n    end_meta: AccumulatedMetaDataBuilder,\n    end: CombinedAccumulatedDataBuilder,\n    constants: CombinedConstantData,\n    is_private: bool,\n}\n\nimpl KernelCircuitPublicInputsBuilder {\n    pub fn finish(self) -> KernelCircuitPublicInputs {\n        KernelCircuitPublicInputs {\n            aggregation_object: self.aggregation_object,\n            meta_hwm: self.meta_hwm,\n            end: self.end.finish(),\n            constants: self.constants,\n            is_private: self.is_private,\n        }\n    }\n\n    pub fn to_final(self) -> KernelCircuitPublicInputsFinal {\n        let meta = self.end_meta.finish();\n        let app = self.end.to_final();\n        KernelCircuitPublicInputsFinal {\n            aggregation_object: self.aggregation_object,\n            meta_hwm: self.meta_hwm,\n            end_meta: meta,\n            end: app,\n            constants: self.constants,\n            is_private: self.is_private,\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/kernel_circuit_public_inputs.nr"},"71":{"source":"use crate::{\n    abis::{\n        append_only_tree_snapshot::{\n            AppendOnlyTreeSnapshot,\n            APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n        },\n        global_variables::{\n            GlobalVariables,\n            GLOBAL_VARIABLES_LENGTH,\n        },\n    },\n    constants::{\n        GENERATOR_INDEX__BLOCK_HASH,\n        HEADER_LENGTH,\n        NUM_FIELDS_PER_SHA256,\n        STATE_REFERENCE_LENGTH,\n    },\n    hash::pedersen_hash,\n    state_reference::StateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    body_hash: [Field; NUM_FIELDS_PER_SHA256],\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        (self.body_hash == other.body_hash) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.body_hash);\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let body_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n        offset = offset + NUM_FIELDS_PER_SHA256;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            body_hash,\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            body_hash: [0; NUM_FIELDS_PER_SHA256],\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/header.nr"},"74":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"87":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"90":{"source":"use dep::std::array;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, is_empty};\n\npub fn array_to_bounded_vec<T, N>(array: [T; N]) -> BoundedVec<T, N> where T: Empty + Eq {\n    let mut len = 0;\n    for elem in array {\n        if !is_empty(elem) {\n            len += 1;\n        }\n    }\n\n    BoundedVec { storage: array, len, empty_value: T::empty() }\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, N>(array: [T; N]) where T: Empty + Eq {\n    let array_length = array.len();\n\n    let mut first_zero_pos = array_length;\n    let mut last_non_zero_pos = 0;\n\n    for i in 0..array_length {\n        let is_empty = is_empty(array[i]);\n        if !is_empty {\n            last_non_zero_pos = i;\n        } else if is_empty & (first_zero_pos == array_length) {\n            first_zero_pos = i;\n        }\n    }\n    assert((last_non_zero_pos as u64) <= (first_zero_pos as u64), \"invalid array\");\n}\n\n// Helper method to determine the number of non-zero/empty elements in a validated array (ie, validate_array(array) \n// should be true).\npub fn array_length<T, N>(array: [T; N]) -> Field where T: Empty + Eq {\n    let mut length = 0;\n    let mut end = false;\n    for elem in array {\n        end |= is_empty(elem);\n        if !end {\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_eq<T, N, S>(array: [T; N], expected: [T; S]) -> bool where T: Empty + Eq {\n    let mut eq = array_length(array) == S;\n\n    for i in 0..S {\n        eq &= array[i].eq(expected[i]);\n    }\n\n    eq\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array = [];\n    validate_array(valid_array);\n\n    let valid_array = [0];\n    validate_array(valid_array);\n\n    let valid_array = [1, 2, 3];\n    validate_array(valid_array);\n\n    let valid_array = [1, 2, 3, 0];\n    validate_array(valid_array);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    validate_array(valid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid() {\n    let invalid_array = [0, 1];\n    validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([]), 0);\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n    assert_eq(array_length([123, 0, 456]), 1);\n    assert_eq(array_length([0, 123, 0, 456]), 0);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/arrays.nr"},"92":{"source":"// This is a quick struct made to pack 32 bytes into 4 u64s\n// and then pack those into two u128s.\n//\n// Creating a u256 was made for convenience.\n//\n// This is needed because in the cpp code, we have accumulate_sha256\n// which returns 2 field elements, one for the high and low limb.\nstruct U256 {\n    // This is in big-endian order, typically because\n    // sha256 is usually in big endian order.\n    // Note: this means that inner[0] has the most significant 64 bits.\n    inner : [u64; 4]\n}\n\nimpl U256 {\n    pub fn from_bytes32(bytes : [u8;32]) -> U256 {\n        // We use addition rather than a bitwise OR as the bitshifts ensure that none of the bytes overlap each other.\n        let high_0 = ((bytes[0] as u64) << 56)\n                + ((bytes[1] as u64) << 48)\n                + ((bytes[2] as u64) << 40)\n                + ((bytes[3] as u64) << 32)\n                + ((bytes[4] as u64) << 24)\n                + ((bytes[5] as u64) << 16)\n                + ((bytes[6] as u64) << 8)\n                +  (bytes[7] as u64);\n        \n        let high_1 = ((bytes[8] as u64) << 56)\n                + ((bytes[9] as u64) << 48)\n                + ((bytes[10] as u64) << 40)\n                + ((bytes[11] as u64) << 32)\n                + ((bytes[12] as u64) << 24)\n                + ((bytes[13] as u64) << 16)\n                + ((bytes[14] as u64) << 8)\n                +  (bytes[15] as u64);\n        \n        let low_0 = ((bytes[16] as u64) << 56)\n                + ((bytes[17] as u64) << 48)\n                + ((bytes[18] as u64) << 40)\n                + ((bytes[19] as u64) << 32)\n                + ((bytes[20] as u64) << 24)\n                + ((bytes[21] as u64) << 16)\n                + ((bytes[22] as u64) << 8)\n                +  (bytes[23] as u64);\n        \n        let low_1 = ((bytes[24] as u64) << 56)\n                + ((bytes[25] as u64) << 48)\n                + ((bytes[26] as u64) << 40)\n                + ((bytes[27] as u64) << 32)\n                + ((bytes[28] as u64) << 24)\n                + ((bytes[29] as u64) << 16)\n                + ((bytes[30] as u64) << 8)\n                +  (bytes[31] as u64);\n\n        U256{inner : [high_0, high_1, low_0, low_1]}\n    }\n\n    // We cannot represent u128 in the type system\n    // so we cannot return a u128 type.\n    // \n    // This as conversion assumes that Field can store 128 bits of information\n    // or else the conversion is lossy.\n    //\n    // TODO: Add a test for this.\n    pub fn to_u128_limbs(self) -> [Field;2] {\n        let two_pow_64 = 2.pow_32(64);\n\n        let high = (self.inner[0] as Field) * two_pow_64 + self.inner[1] as Field;\n        let low  = (self.inner[2] as Field) * two_pow_64 + self.inner[3] as Field;\n        \n        [high,low]\n    }\n}\n\n#[test]\nfn smoke_u256_from_bytes32_all_zeroes() {\n    let input = [0; 32];\n    let result = U256::from_bytes32(input);\n    assert(result.inner[0] == 0);\n    assert(result.inner[1] == 0);\n    assert(result.inner[2] == 0);\n    assert(result.inner[3] == 0);\n}\n\n#[test]\nfn smoke_u256_from_bytes32_one_zero_zero_zero() {\n    // We want to output [1,0,0,0]\n    let input = [\n        0, 0, 0, 0, 0, 0, 0, 1,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let result = U256::from_bytes32(input);\n\n    assert(result.inner[0] == 1);\n    assert(result.inner[1] == 0);\n    assert(result.inner[2] == 0);\n    assert(result.inner[3] == 0);\n}\n\n#[test]\nfn smoke_u256_from_bytes32_test() {\n    /*\n    input:  [   0xAA, 0xBB, 0xCC, 0xDD, \n                0xEE, 0xFF, 0x00, 0x11, \n                0x22, 0x33, 0x44, 0x55, \n                0x66, 0x77, 0x88, 0x99, \n                0x11, 0x22, 0x33, 0x44, \n                0x55, 0x66, 0x77, 0x88, \n                0x99, 0xAA, 0xBB, 0xCC, \n                0xDD, 0xEE, 0xFF, 0x00\n            ]\n    output: inner[0]: 0xAABBCCDDEEFF0011\n            inner[1]: 0x2233445566778899\n            inner[2]: 0x1122334455667788\n            inner[3]: 0x99AABBCCDDEEFF00\n    */\n    let input : [u8;32] = [\n        0xAA, 0xBB, 0xCC, 0xDD,\n        0xEE, 0xFF, 0x00, 0x11,\n        0x22, 0x33, 0x44, 0x55,\n        0x66, 0x77, 0x88, 0x99,\n        0x11, 0x22, 0x33, 0x44,\n        0x55, 0x66, 0x77, 0x88,\n        0x99, 0xAA, 0xBB, 0xCC,\n        0xDD, 0xEE, 0xFF, 0x00\n    ];\n    let result = U256::from_bytes32(input);\n\n    assert(result.inner[0] == 0xAABBCCDDEEFF0011);\n    assert(result.inner[1] == 0x2233445566778899);\n    assert(result.inner[2] == 0x1122334455667788);\n    assert(result.inner[3] == 0x99AABBCCDDEEFF00);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/uint256.nr"},"94":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u16 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/traits.nr"},"96":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot,\n    constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"},"98":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"99":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::{\n    GENERATOR_INDEX__CONTRACT_LEAF,\n};\nuse crate::traits::Hash;\n\nstruct ContractClassId {\n  inner: Field\n}\n\nimpl Eq for ContractClassId {\n    fn eq(self, other: ContractClassId) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl ContractClassId {\n    pub fn compute(artifact_hash: Field, private_functions_root: Field, public_bytecode_commitment: Field) -> Self {\n        let hash = dep::std::hash::pedersen_hash_with_separator([\n            artifact_hash,\n            private_functions_root,\n            public_bytecode_commitment,\n        ], GENERATOR_INDEX__CONTRACT_LEAF); // TODO(@spalladino): Update generator index\n        \n        ContractClassId::from_field(hash)\n    }\n\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n\n    pub fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] }\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contract_class.nr"},"101":{"source":"use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            x: 0,\n            y: 0,\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/grumpkin_point.nr"},"103":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{\n        AppendOnlyTreeSnapshot,\n        APPEND_ONLY_TREE_SNAPSHOT_LENGTH,\n    },\n    constants::{\n        PARTIAL_STATE_REFERENCE_LENGTH,\n        STATE_REFERENCE_LENGTH,\n    },\n    partial_state_reference::PartialStateReference,\n    traits::{\n        Deserialize,\n        Empty,\n        Hash,\n        Serialize,\n    },\n    utils::{\n        arr_copy_slice,\n    },\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/state_reference.nr"},"104":{"source":"use dep::std::{\n    cmp::Eq,\n    grumpkin_scalar::GrumpkinScalar,\n    grumpkin_scalar_mul::grumpkin_fixed_base,\n};\nuse crate::grumpkin_point::GrumpkinPoint;\n\nglobal GRUMPKIN_PRIVATE_KEY_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPrivateKey {\n    high: Field,\n    low: Field,\n}\n\nimpl Eq for GrumpkinPrivateKey {\n    fn eq(self, key: GrumpkinPrivateKey) -> bool {\n        (key.high == self.high) & (key.low == self.low)\n    }\n}\n\nimpl GrumpkinPrivateKey {\n    pub fn new(high: Field, low: Field) -> Self {\n        GrumpkinPrivateKey { high, low }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            high: 0,\n            low: 0,\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.high == 0) & (self.low == 0)\n    }\n\n    pub fn serialize(self) -> [Field; GRUMPKIN_PRIVATE_KEY_SERIALIZED_LEN] {\n        [self.high, self.low]\n    }\n\n    pub fn derive_public_key(self) -> GrumpkinPoint {\n        let public_key = grumpkin_fixed_base(GrumpkinScalar { high: self.high, low: self.low });\n        GrumpkinPoint { x: public_key[0], y: public_key[1] }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/grumpkin_private_key.nr"},"110":{"source":"use crate::common;\nuse dep::std::unsafe;\nuse dep::types::{\n    abis::{\n        previous_kernel_data::PreviousKernelData,\n        private_kernel::private_call_data::PrivateCallData,\n        kernel_circuit_public_inputs::{KernelCircuitPublicInputs, KernelCircuitPublicInputsBuilder},\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    mocked::verify_previous_kernel_state,\n};\n\nstruct PrivateKernelInputsInner {\n    previous_kernel: PreviousKernelData,\n    private_call: PrivateCallData,\n}\n\nimpl PrivateKernelInputsInner {\n    fn pop_and_validate_this_private_call_hash(self, public_inputs: &mut KernelCircuitPublicInputsBuilder){\n        let call_request = public_inputs.end.private_call_stack.pop();\n        common::validate_call_against_request(self.private_call, call_request);\n    }\n\n    fn validate_contract_tree_root(self) {\n        let purported_contract_tree_root = self.private_call.call_stack_item.public_inputs.historical_header.state.partial.contract_tree.root;\n        let previous_kernel_contract_tree_root = self.previous_kernel.public_inputs.constants.historical_header.state.partial.contract_tree.root;\n\n        assert(purported_contract_tree_root == previous_kernel_contract_tree_root, \"purported_contract_tree_root does not match previous_kernel_contract_tree_root\");\n    }\n\n    fn validate_inputs(self) {\n        let this_call_stack_item = self.private_call.call_stack_item;\n        let function_data = this_call_stack_item.function_data;\n        assert(function_data.is_private, \"Private kernel circuit can only execute a private function\");\n        assert(self.previous_kernel.public_inputs.is_private, \"Can only verify a private kernel snark in the private kernel circuit\");\n    }\n\n    pub fn native_private_kernel_circuit_inner(self) -> KernelCircuitPublicInputs {\n        let mut public_inputs : KernelCircuitPublicInputsBuilder = unsafe::zeroed();\n        public_inputs.is_private = true;\n\n        common::validate_previous_kernel_values(self.previous_kernel.public_inputs.end);\n\n        // Do this before any functions can modify the inputs.\n        common::initialize_end_values(self.previous_kernel, &mut public_inputs);\n\n        self.validate_inputs();\n\n        common::validate_arrays(self.private_call.call_stack_item.public_inputs);\n\n        self.pop_and_validate_this_private_call_hash(&mut public_inputs);\n\n        common::validate_read_requests(\n            public_inputs.constants.historical_header.state.partial.note_hash_tree.root,\n            self.private_call.call_stack_item.public_inputs.read_requests,  // read requests from private call\n            self.private_call.read_request_membership_witnesses);\n\n        //TODO(David): feels like update_end_values should happen later\n        common::update_end_values(self.private_call, &mut public_inputs);\n\n        // ensure that historical/purported contract tree root matches the one in previous kernel\n        self.validate_contract_tree_root();\n\n        let this_call_stack_item = self.private_call.call_stack_item;\n\n        common::contract_logic(self.private_call,\n            &mut public_inputs,\n            this_call_stack_item.public_inputs.contract_deployment_data,\n            this_call_stack_item.function_data);\n\n        let (is_previous_state_valid, updated_aggregation_object) = verify_previous_kernel_state(public_inputs.aggregation_object,self.private_call.proof);\n        assert(is_previous_state_valid);\n\n        public_inputs.aggregation_object = updated_aggregation_object;\n\n        public_inputs.finish()\n    }\n}\n\nmod tests {\n    use crate::private_kernel_inner::PrivateKernelInputsInner;\n    use dep::types::constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_TX,\n    };\n    use dep::types::{\n        abis::{\n            kernel_circuit_public_inputs::KernelCircuitPublicInputs,\n            side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n        },\n        tests::{\n            previous_kernel_data_builder::PreviousKernelDataBuilder,\n            private_call_data_builder::PrivateCallDataBuilder,\n        },\n        address::AztecAddress,\n        hash::compute_logs_hash,\n        utils::{\n            arrays::array_length,\n        },\n    };\n\n    struct PrivateKernelInnerInputsBuilder {\n        previous_kernel: PreviousKernelDataBuilder,\n        private_call: PrivateCallDataBuilder,\n    }\n\n    impl PrivateKernelInnerInputsBuilder {\n        pub fn new() -> Self {\n            let previous_kernel = PreviousKernelDataBuilder::new();\n            let private_call = PrivateCallDataBuilder::new(false);\n\n            PrivateKernelInnerInputsBuilder { previous_kernel, private_call }\n        }\n\n        pub fn is_delegate_call(&mut self) -> Self {\n            let _ = self.private_call.is_delegate_call();\n            *self\n        }\n\n        pub fn is_static_call(&mut self) -> Self {\n            let _ = self.private_call.is_static_call();\n            *self\n        }\n\n        pub fn is_internal_call(&mut self) -> Self {\n            let _ = self.private_call.is_internal_call();\n            self.previous_kernel.contract_address = self.private_call.contract_address;\n            *self\n        }\n\n        pub fn execute(&mut self) -> KernelCircuitPublicInputs {\n            let private_call = self.private_call.finish();\n            // Update the previous_kernel's private_call_stack with the current call_stack_item.\n            let hash = private_call.call_stack_item.hash();\n            let is_delegate_call = private_call.call_stack_item.public_inputs.call_context.is_delegate_call;\n            self.previous_kernel.push_private_call_request(hash, is_delegate_call);\n            let previous_kernel = self.previous_kernel.finish();\n\n            let kernel = PrivateKernelInputsInner {\n                previous_kernel,\n                private_call,\n            };\n\n            kernel.native_private_kernel_circuit_inner()\n        }\n\n        pub fn succeeded(&mut self) {\n            let _ = self.execute();\n        }\n\n        pub fn failed(&mut self) {\n            let _ = self.execute();\n        }\n    }\n\n    #[test(should_fail_with = \"contract address cannot be zero\")]\n    fn private_function_zero_storage_contract_address_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // Set (storage) contract_address to 0\n        builder.private_call.contract_address = AztecAddress::zero();\n        builder.private_call.public_inputs.call_context.storage_contract_address = AztecAddress::zero();\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"purported_contract_tree_root does not match previous_kernel_contract_tree_root\")]\n    fn private_function_incorrect_contract_tree_root_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // Set historical contract tree root to a wrong value (the correct value + 1).\n        let contract_tree_root = builder.previous_kernel.historical_header.state.partial.contract_tree.root;\n        builder.previous_kernel.historical_header.state.partial.contract_tree.root = contract_tree_root + 1;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_function_leaf_index_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // Set the leaf index of the function leaf to a wrong value (the correct value + 1).\n        let leaf_index = builder.private_call.function_leaf_membership_witness.leaf_index;\n        builder.private_call.function_leaf_membership_witness.leaf_index = leaf_index + 1;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_function_leaf_sibling_path_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // Set the first value of the sibling path to a wrong value (the correct value + 1).\n        let sibling_path_0 = builder.private_call.function_leaf_membership_witness.sibling_path[0];\n        builder.private_call.function_leaf_membership_witness.sibling_path[0] = sibling_path_0 + 1;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_contract_class_preimage_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n        builder.private_call.contract_class_artifact_hash = builder.private_call.contract_class_artifact_hash + 1;\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_partial_address_preimage_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n        builder.private_call.salted_initialization_hash.inner = builder.private_call.salted_initialization_hash.inner + 1;\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_address_preimage_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n        builder.private_call.public_keys_hash.inner = builder.private_call.public_keys_hash.inner + 1;\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"calculated private_call_hash does not match provided private_call_hash at the top of the call stack\")]\n    fn private_function_incorrect_call_stack_item_hash_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        let private_call = builder.private_call.finish();\n        let hash = private_call.call_stack_item.hash();\n        // Set the first call stack hash to a wrong value (the correct hash + 1).\n        builder.previous_kernel.push_private_call_request(hash + 1, false);\n        let previous_kernel = builder.previous_kernel.finish();\n\n        let kernel = PrivateKernelInputsInner { previous_kernel, private_call };\n\n        let _ = kernel.native_private_kernel_circuit_inner();\n    }\n\n    #[test(should_fail_with=\"call stack msg_sender does not match caller contract address\")]\n    fn incorrect_msg_sender_for_regular_calls_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // Set the msg_sender to a wrong value.\n        builder.private_call.public_inputs.call_context.msg_sender.inner += 1;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"call stack storage address does not match expected contract address\")]\n    fn incorrect_storage_contract_for_regular_calls_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // Set the storage contract address to a wrong value.\n        builder.private_call.public_inputs.call_context.storage_contract_address.inner += 1;\n\n        builder.failed();\n    }\n\n    #[test]\n    fn delegate_call_succeeds() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_delegate_call();\n        builder.succeeded();\n    }\n\n    #[test(should_fail_with=\"caller context cannot be empty for delegate calls\")]\n    fn empty_caller_context_for_delegate_calls_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_delegate_call();\n\n        let private_call = builder.private_call.finish();\n        let hash = private_call.call_stack_item.hash();\n        // Caller context is empty for regular calls.\n        let is_delegate_call = false;\n        builder.previous_kernel.push_private_call_request(hash, is_delegate_call);\n        let previous_kernel = builder.previous_kernel.finish();\n\n        let kernel = PrivateKernelInputsInner { previous_kernel, private_call };\n\n        let _ = kernel.native_private_kernel_circuit_inner();\n    }\n\n    #[test(should_fail_with=\"call stack msg_sender does not match expected msg_sender for delegate calls\")]\n    fn incorrect_msg_sender_for_delegate_calls_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_delegate_call();\n\n        // Set the msg_sender to be the caller contract.\n        builder.private_call.public_inputs.call_context.msg_sender = builder.previous_kernel.contract_address;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"call stack storage address does not match expected contract address for delegate calls\")]\n    fn incorrect_storage_address_for_delegate_calls_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_delegate_call();\n\n        // Set the storage contract address to be the contract address.\n        builder.private_call.public_inputs.call_context.storage_contract_address = builder.private_call.contract_address;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"curent contract address must not match storage contract address for delegate calls\")]\n    fn incorrect_storage_contract_for_delegate_calls_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_delegate_call();\n\n        builder.private_call.contract_address = builder.private_call.public_inputs.call_context.storage_contract_address;\n\n        builder.failed();\n    }\n\n    #[test]\n    fn internal_call_succeeds() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_internal_call();\n        builder.succeeded();\n    }\n\n    #[test(should_fail_with = \"call is internal but msg_sender is not self\")]\n    fn private_function_incorrect_is_internal() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_internal_call();\n\n        // Tweak the (storage) contract_address to be different to msg_sender.\n        let msg_sender = builder.private_call.public_inputs.call_context.msg_sender.to_field();\n        builder.private_call.contract_address = AztecAddress::from_field(msg_sender + 1);\n        builder.private_call.public_inputs.call_context.storage_contract_address = AztecAddress::from_field(msg_sender + 1);\n\n        builder.failed();\n    }\n\n    #[test]\n    fn call_requests_succeeds() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_private_call_requests(2, false);\n        builder.private_call.append_private_call_requests(1, true);\n        builder.private_call.append_public_call_requests(1, false);\n        builder.private_call.append_public_call_requests(2, true);\n\n        builder.succeeded();\n    }\n\n    #[test(should_fail_with = \"call requests length does not match the expected length\")]\n    fn incorrect_private_call_requests_length_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_private_call_requests(2, false);\n        // Remove one call request.\n        let _ = builder.private_call.private_call_stack.pop();\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"call requests length does not match the expected length\")]\n    fn incorrect_public_call_requests_length_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_public_call_requests(2, false);\n        // Remove one call request.\n        let _ = builder.private_call.public_call_stack.pop();\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"call stack hash does not match call request hash\")]\n    fn incorrect_private_call_request_hash_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_private_call_requests(2, false);\n        let mut call_request = builder.private_call.private_call_stack.pop();\n        // Change the hash to be a different value.\n        call_request.hash += 1;\n        builder.private_call.private_call_stack.push(call_request);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"call stack hash does not match call request hash\")]\n    fn incorrect_public_call_request_hash_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_public_call_requests(2, false);\n        let mut call_request = builder.private_call.public_call_stack.pop();\n        // Change the hash to be a different value.\n        call_request.hash += 1;\n        builder.private_call.public_call_stack.push(call_request);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid caller\")]\n    fn incorrect_caller_address_for_private_call_request_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_private_call_requests(1, false);\n        let mut call_request = builder.private_call.private_call_stack.pop();\n        // Change the caller contract address to be a different value.\n        call_request.caller_contract_address.inner += 1;\n        builder.private_call.private_call_stack.push(call_request);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid caller\")]\n    fn incorrect_caller_address_for_public_call_request_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_public_call_requests(1, false);\n        let mut call_request = builder.private_call.public_call_stack.pop();\n        // Change the caller contract address to be a different value.\n        call_request.caller_contract_address.inner += 1;\n        builder.private_call.public_call_stack.push(call_request);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid caller\")]\n    fn incorrect_caller_context_for_private_delegate_call_request_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_private_call_requests(1, true);\n        let mut call_request = builder.private_call.private_call_stack.pop();\n        // Change the storage contract to be a different value.\n        call_request.caller_context.storage_contract_address.inner += 1;\n        builder.private_call.private_call_stack.push(call_request);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid caller\")]\n    fn incorrect_caller_context_for_public_delegate_call_request_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_public_call_requests(1, true);\n        let mut call_request = builder.private_call.public_call_stack.pop();\n        // Change the storage contract to be a different value.\n        call_request.caller_context.storage_contract_address.inner += 1;\n        builder.private_call.public_call_stack.push(call_request);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_return_values() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.public_inputs.return_values.extend_from_array([0, 553]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_read_requests() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.public_inputs.read_requests.extend_from_array(\n            [\n            SideEffect { value: 0, counter: 0 },\n            SideEffect { value: 9123, counter: 1 }\n        ]\n        );\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_commitments() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.public_inputs.new_commitments.extend_from_array(\n            [\n            SideEffect { value: 0, counter: 0 },\n            SideEffect { value: 9123, counter: 1 }\n        ]\n        );\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_nullifiers() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.public_inputs.new_nullifiers.extend_from_array(\n            [\n            SideEffectLinkedToNoteHash { value: 0, note_hash: 0, counter: 0 },\n            SideEffectLinkedToNoteHash { value: 12, note_hash: 0, counter: 1 }\n        ]\n        );\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_private_call_stack() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.public_inputs.private_call_stack_hashes.extend_from_array([0, 888]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_public_call_stack() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.public_inputs.public_call_stack_hashes.extend_from_array([0, 888]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_new_l2_to_l1_msgs() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.public_inputs.new_l2_to_l1_msgs.extend_from_array([0, 888]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"extend_from_bounded_vec out of bounds\")]\n    fn private_kernel_should_fail_if_aggregating_too_many_commitments() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // The current call stack has 1 commitment;\n        builder.private_call.public_inputs.new_commitments.push(SideEffect { value: 4321, counter: 0 });\n\n        // Mock the previous new commitments to be full, therefore no more commitments can be added.\n        let mut full_new_commitments = [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_TX];\n        for i in 0..MAX_NEW_COMMITMENTS_PER_TX {\n            full_new_commitments[i] = SideEffect {\n                value: i + 1,\n                counter: i as u32,\n            };\n        }\n        builder.previous_kernel.end.new_commitments.extend_from_array(full_new_commitments);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"Private kernel circuit can only execute a private function\")]\n    fn private_function_is_private_false_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.function_data.is_private = false;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"Can only verify a private kernel snark in the private kernel circuit\")]\n    fn previous_kernel_is_private_false_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.previous_kernel.is_private = false;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"note hash tree root mismatch\")]\n    fn native_read_request_bad_request() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        // tweak read_request so it gives wrong root when paired with its sibling path\n        let read_request = builder.private_call.public_inputs.read_requests.pop();\n        builder.private_call.public_inputs.read_requests.push(SideEffect { value: read_request.value + 1, counter: read_request.counter });\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"note hash tree root mismatch\")]\n    fn native_read_request_bad_leaf_index() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        // Tweak leaf index so it gives wrong root when paired with its request and sibling path.\n        let mut read_request_membership_witness = builder.private_call.read_request_membership_witnesses.pop();\n        read_request_membership_witness.leaf_index += 1;\n        builder.private_call.read_request_membership_witnesses.push(read_request_membership_witness);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"note hash tree root mismatch\")]\n    fn native_read_request_bad_sibling_path() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        // Tweak the sibling path of the second read so it gives wrong root when paired with its request.\n        let mut read_request_membership_witness = builder.private_call.read_request_membership_witnesses.pop();\n        read_request_membership_witness.sibling_path[1] += 1;\n        builder.private_call.read_request_membership_witnesses.push(read_request_membership_witness);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"note hash tree root mismatch\")]\n    fn native_read_request_root_mismatch() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(1);\n\n        // Set the root to be a different root so the above read request is not under this root.\n        let old_root = builder.previous_kernel.historical_header.state.partial.note_hash_tree.root;\n        builder.previous_kernel.historical_header.state.partial.note_hash_tree.root = old_root + 1;\n\n        builder.failed();\n    }\n\n    #[test]\n    fn native_no_read_requests_works() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        assert_eq(builder.private_call.public_inputs.read_requests.len(), 0);\n\n        let public_inputs = builder.execute();\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_one_read_requests_works() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(1);\n\n        let public_inputs = builder.execute();\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_two_read_requests_works() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        let public_inputs = builder.execute();\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_max_read_requests_works() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(MAX_READ_REQUESTS_PER_CALL);\n\n        let public_inputs = builder.execute();\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_one_transient_read_requests_works() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_transient_read_requests(1);\n\n        let public_inputs = builder.execute();\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 1);\n    }\n\n    #[test]\n    fn native_max_read_requests_one_transient_works() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_read_requests(1);\n        builder.private_call.append_transient_read_requests(1);\n        builder.private_call.append_read_requests(MAX_READ_REQUESTS_PER_CALL - 2);\n\n        let public_inputs = builder.execute();\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 1);\n    }\n\n    #[test]\n    fn native_max_read_requests_all_transient_works() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.private_call.append_transient_read_requests(MAX_READ_REQUESTS_PER_CALL);\n\n        let public_inputs = builder.execute();\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), MAX_READ_REQUESTS_PER_CALL);\n    }\n\n    #[test]\n    fn native_logs_are_hashed_as_expected() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        // Logs for the current call stack.\n        let encrypted_logs_hash = [16, 69];\n        let encrypted_log_preimages_length = 100;\n        let unencrypted_logs_hash = [26, 47];\n        let unencrypted_log_preimages_length = 50;\n        builder.private_call.set_encrypted_logs(encrypted_logs_hash, encrypted_log_preimages_length);\n        builder.private_call.set_unencrypted_logs(unencrypted_logs_hash, unencrypted_log_preimages_length);\n\n        // Logs for the previous call stack.\n        let prev_encrypted_logs_hash = [80, 429];\n        let prev_encrypted_log_preimages_length = 13;\n        let prev_unencrypted_logs_hash = [956, 112];\n        let prev_unencrypted_log_preimages_length = 24;\n        builder.previous_kernel.set_encrypted_logs(prev_encrypted_logs_hash, prev_encrypted_log_preimages_length);\n        builder.previous_kernel.set_unencrypted_logs(\n            prev_unencrypted_logs_hash,\n            prev_unencrypted_log_preimages_length\n        );\n\n        let public_inputs = builder.execute();\n\n        assert_eq(\n            public_inputs.end.encrypted_log_preimages_length, encrypted_log_preimages_length + prev_encrypted_log_preimages_length\n        );\n        assert_eq(\n            public_inputs.end.unencrypted_log_preimages_length, unencrypted_log_preimages_length + prev_unencrypted_log_preimages_length\n        );\n\n        let expected_encrypted_logs_hash = compute_logs_hash(prev_encrypted_logs_hash, encrypted_logs_hash);\n        assert_eq(public_inputs.end.encrypted_logs_hash, expected_encrypted_logs_hash);\n\n        let expected_unencrypted_logs_hash = compute_logs_hash(prev_unencrypted_logs_hash, unencrypted_logs_hash);\n        assert_eq(public_inputs.end.unencrypted_logs_hash, expected_unencrypted_logs_hash);\n    }\n\n    #[test(should_fail_with=\"new_commitments must be empty for static calls\")]\n    fn creating_new_commitments_on_static_call_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_static_call();\n\n        builder.private_call.public_inputs.new_commitments.push(SideEffect { value: 1, counter: 0 });\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"new_nullifiers must be empty for static calls\")]\n    fn creating_new_nullifiers_on_static_call_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new().is_static_call();\n\n        builder.private_call.public_inputs.new_nullifiers.push(SideEffectLinkedToNoteHash { value: 1, note_hash: 0, counter: 0 });\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"The 0th nullifier in the accumulated nullifier array is zero\")]\n    fn zero_0th_nullifier_fails() {\n        let mut builder = PrivateKernelInnerInputsBuilder::new();\n\n        builder.previous_kernel.end.new_nullifiers = BoundedVec::new(SideEffectLinkedToNoteHash::empty());\n\n        builder.failed();\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/private-kernel-lib/src/private_kernel_inner.nr"},"112":{"source":"use dep::std;\nuse dep::types::{\n    abis::{\n        call_request::CallRequest,\n        combined_accumulated_data::CombinedAccumulatedData,\n        function_data::FunctionData,\n        kernel_circuit_public_inputs::KernelCircuitPublicInputsBuilder,\n        membership_witness::ReadRequestMembershipWitness,\n        new_contract_data::NewContractData,\n        nullifier_key_validation_request::NullifierKeyValidationRequestContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_kernel::private_call_data::PrivateCallData,\n        previous_kernel_data::PreviousKernelData,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{AztecAddress, EthAddress, PartialAddress, compute_initialization_hash},\n    contract_class::ContractClassId,\n    contrakt::deployment_data::ContractDeploymentData,\n    constants::{\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::{\n        compute_constructor_hash,\n        compute_l2_to_l1_hash,\n        compute_logs_hash,\n        compute_new_contract_address_hash,\n        contract_tree_root_from_siblings,\n        function_tree_root_from_siblings,\n        pedersen_hash,\n        private_functions_root_from_siblings,\n        read_request_root_from_siblings,\n        silo_commitment,\n        silo_nullifier,\n        stdlib_recursion_verification_key_compress_native_vk,\n    },\n    utils::{\n        arrays::{\n            array_length,\n            array_to_bounded_vec,\n            validate_array,\n        },\n    },\n    traits::{is_empty, is_empty_array},\n};\n\npub fn validate_arrays(app_public_inputs: PrivateCircuitPublicInputs) {\n    // Each of the following arrays is expected to be zero-padded.\n    // In addition, some of the following arrays (new_commitments, etc...) are passed\n    // to extend_from_array_to_array() routines which rely on the passed arrays to be well-formed.\n\n    validate_array(app_public_inputs.return_values);\n    validate_array(app_public_inputs.read_requests);\n    validate_array(app_public_inputs.nullifier_key_validation_requests);\n    validate_array(app_public_inputs.new_commitments);\n    validate_array(app_public_inputs.new_nullifiers);\n    validate_array(app_public_inputs.private_call_stack_hashes);\n    validate_array(app_public_inputs.public_call_stack_hashes);\n    validate_array(app_public_inputs.new_l2_to_l1_msgs);\n    // encrypted_logs_hash and unencrypted_logs_hash have their own integrity checks.\n}\n\n// Validate all read requests against the historical note hash tree root.\n// Use their membership witnesses to do so. If the historical root is not yet\n// initialized, initialize it using the first read request here (if present).\n//\n// More info here:\n// - https://discourse.aztec.network/t/to-read-or-not-to-read/178\n// - https://discourse.aztec.network/t/spending-notes-which-havent-yet-been-inserted/180\npub fn validate_read_requests(\n    historical_note_hash_tree_root: Field,\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    read_request_membership_witnesses: [ReadRequestMembershipWitness; MAX_READ_REQUESTS_PER_CALL]\n) {\n    // membership witnesses must resolve to the same note hash tree root\n    // for every request in all kernel iterations\n    for rr_idx in 0..MAX_READ_REQUESTS_PER_CALL {\n        let read_request = read_requests[rr_idx].value;\n        let witness = read_request_membership_witnesses[rr_idx];\n\n        // A pending commitment is the one that is not yet added to note hash tree\n        // A \"transient read\" is when we try to \"read\" a pending commitment within a transaction\n        // between function calls, as opposed to reading the outputs of a previous transaction\n        // which is a \"pending read\".\n        // A transient read is when we try to \"read\" a pending commitment\n        // We determine if it is a transient read depending on the leaf index from the membership witness\n        // Note that the Merkle membership proof would be null and void in case of an transient read\n        // but we use the leaf index as a placeholder to detect a 'pending note read'.\n\n        if (read_request != 0) & (witness.is_transient == false) {\n            let root_for_read_request = read_request_root_from_siblings(read_request, witness.leaf_index, witness.sibling_path);\n            assert(root_for_read_request == historical_note_hash_tree_root, \"note hash tree root mismatch\");\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1354): do we need to enforce\n            // that a non-transient read_request was derived from the proper/current contract address?\n        }\n    }\n}\n\npub fn initialize_end_values(\n    previous_kernel: PreviousKernelData,\n    public_inputs: &mut KernelCircuitPublicInputsBuilder\n) {\n    public_inputs.constants = previous_kernel.public_inputs.constants;\n\n    // Ensure the arrays are the same as previously, before we start pushing more data onto them in other\n    // functions within this circuit:\n    let start = previous_kernel.public_inputs.end;\n\n    public_inputs.end.read_requests = array_to_bounded_vec(start.read_requests);\n    public_inputs.end.nullifier_key_validation_requests = array_to_bounded_vec(start.nullifier_key_validation_requests);\n\n    public_inputs.end.new_commitments = array_to_bounded_vec(start.new_commitments);\n    public_inputs.end.new_nullifiers = array_to_bounded_vec(start.new_nullifiers);\n\n    public_inputs.end.private_call_stack = array_to_bounded_vec(start.private_call_stack);\n    public_inputs.end.public_call_stack = array_to_bounded_vec(start.public_call_stack);\n    public_inputs.end.new_l2_to_l1_msgs = array_to_bounded_vec(start.new_l2_to_l1_msgs);\n\n    public_inputs.end.encrypted_logs_hash = start.encrypted_logs_hash;\n    public_inputs.end.unencrypted_logs_hash = start.unencrypted_logs_hash;\n\n    public_inputs.end.encrypted_log_preimages_length = start.encrypted_log_preimages_length;\n    public_inputs.end.unencrypted_log_preimages_length = start.unencrypted_log_preimages_length;\n\n    public_inputs.end.new_contracts = array_to_bounded_vec(start.new_contracts);\n}\n\nfn perform_static_call_checks(private_call: PrivateCallData) {\n    let public_inputs = private_call.call_stack_item.public_inputs;\n    let is_static_call = public_inputs.call_context.is_static_call;\n    if is_static_call {\n        // No state changes are allowed for static calls:\n        assert(\n            is_empty_array(public_inputs.new_commitments), \"new_commitments must be empty for static calls\"\n        );\n        assert(\n            is_empty_array(public_inputs.new_nullifiers), \"new_nullifiers must be empty for static calls\"\n        );\n    }\n}\n\nfn is_valid_caller(request: CallRequest, private_call: PrivateCallData) -> bool {\n    let call_context = private_call.call_stack_item.public_inputs.call_context;\n    let valid_caller_context = request.caller_context.msg_sender.eq(call_context.msg_sender)\n        & request.caller_context.storage_contract_address.eq(call_context.storage_contract_address);\n    request.caller_contract_address.eq(private_call.call_stack_item.contract_address)\n        & (request.caller_context.is_empty() | valid_caller_context)\n}\n\nfn validate_call_requests<N>(\n    call_requests: BoundedVec<CallRequest, N>,\n    hashes: [Field; N],\n    private_call: PrivateCallData\n) {\n    assert_eq(\n        array_length(hashes), call_requests.len(), \"call requests length does not match the expected length\"\n    );\n    for i in 0..N {\n        let hash = hashes[i];\n        if hash != 0 {\n            let request = call_requests.get_unchecked(i);\n            assert_eq(request.hash, hash, \"call stack hash does not match call request hash\");\n            assert(is_valid_caller(request, private_call), \"invalid caller\");\n        }\n    }\n}\n\npub fn update_end_values(private_call: PrivateCallData, public_inputs: &mut KernelCircuitPublicInputsBuilder) {\n    // If this call is a static call, certain operations are disallowed, such as creating new state.\n    perform_static_call_checks(private_call);\n\n    let private_call_public_inputs = private_call.call_stack_item.public_inputs;\n\n    let read_requests = private_call_public_inputs.read_requests;\n    let read_request_membership_witnesses = private_call.read_request_membership_witnesses;\n\n    let nullifier_key_validation_requests = private_call_public_inputs.nullifier_key_validation_requests;\n\n    let new_commitments = private_call_public_inputs.new_commitments;\n    let new_nullifiers = private_call_public_inputs.new_nullifiers;\n\n    let storage_contract_address = private_call_public_inputs.call_context.storage_contract_address;\n\n    // Transient read requests and witnesses are accumulated in public_inputs.end\n    // We silo the read requests (domain separation per contract address)\n    let mut siloed_read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL> = BoundedVec::new(SideEffect::empty());\n    for i in 0..MAX_READ_REQUESTS_PER_CALL {\n        let read_request = read_requests[i].value;\n        let witness = read_request_membership_witnesses[i];\n        if witness.is_transient & (read_request != 0) { // only forward transient to public inputs\n            siloed_read_requests.push(\n                SideEffect { counter: read_requests[i].counter, value: silo_commitment(storage_contract_address, read_request) }\n            )\n        }\n    }\n    public_inputs.end.read_requests.extend_from_bounded_vec(siloed_read_requests);\n\n    // Nullifier key validation requests.\n    for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL {\n        let request = nullifier_key_validation_requests[i];\n        if !is_empty(request) {\n            public_inputs.end.nullifier_key_validation_requests.push(request.to_context(storage_contract_address));\n        }\n    }\n\n    // Enhance commitments and nullifiers with domain separation whereby domain is the contract.\n    //\n    // nullifiers\n    let mut siloed_new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL> = BoundedVec::new(SideEffectLinkedToNoteHash::empty());\n    for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n        let new_nullifier = new_nullifiers[i];\n        if new_nullifier.value != 0 {\n            let siloed_note_hash = if new_nullifier.note_hash == 0 {\n                0\n            } else {\n                silo_commitment(storage_contract_address, new_nullifier.note_hash)\n            };\n            siloed_new_nullifiers.push(\n                SideEffectLinkedToNoteHash {\n                value: silo_nullifier(storage_contract_address, new_nullifier.value),\n                counter: new_nullifier.counter,\n                note_hash: siloed_note_hash\n            }\n            );\n        }\n    }\n    public_inputs.end.new_nullifiers.extend_from_bounded_vec(siloed_new_nullifiers);\n\n    // commitments\n    let mut siloed_new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL> = BoundedVec::new(SideEffect::empty());\n    for i in 0..MAX_NEW_COMMITMENTS_PER_CALL {\n        let new_commitment = new_commitments[i].value;\n        if new_commitment != 0 {\n            siloed_new_commitments.push(\n                SideEffect { value: silo_commitment(storage_contract_address, new_commitment), counter: new_commitments[i].counter }\n            );\n        }\n    }\n    public_inputs.end.new_commitments.extend_from_bounded_vec(siloed_new_commitments);\n\n    // Call stacks\n    // Private call stack.\n    let private_call_stack = array_to_bounded_vec(private_call.private_call_stack);\n    validate_call_requests(\n        private_call_stack,\n        private_call_public_inputs.private_call_stack_hashes,\n        private_call\n    );\n    public_inputs.end.private_call_stack.extend_from_bounded_vec(private_call_stack);\n    // Public call stack.\n    let public_call_stack = array_to_bounded_vec(private_call.public_call_stack);\n    validate_call_requests(\n        public_call_stack,\n        private_call_public_inputs.public_call_stack_hashes,\n        private_call\n    );\n    public_inputs.end.public_call_stack.extend_from_bounded_vec(public_call_stack);\n\n    // new l2 to l1 messages\n    let portal_contract_address = private_call.portal_contract_address;\n    let new_l2_to_l1_msgs = private_call_public_inputs.new_l2_to_l1_msgs;\n    let mut new_l2_to_l1_msgs_to_insert : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL> = BoundedVec::new(0);\n    for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n        let msg_is_zero = new_l2_to_l1_msgs[i] == 0;\n        if msg_is_zero == false {\n            let new_l2_to_l1_msgs = compute_l2_to_l1_hash(\n                storage_contract_address,\n                private_call_public_inputs.version,\n                portal_contract_address,\n                private_call_public_inputs.chain_id,\n                new_l2_to_l1_msgs[i]\n            );\n            new_l2_to_l1_msgs_to_insert.push(new_l2_to_l1_msgs)\n        }\n    }\n    public_inputs.end.new_l2_to_l1_msgs.extend_from_bounded_vec(new_l2_to_l1_msgs_to_insert);\n\n    // logs hashes\n    // See the following thread if not clear:\n    // https://discourse.aztec.network/t/proposal-forcing-the-sequencer-to-actually-submit-data-to-l1/426\n    let previous_encrypted_logs_hash = public_inputs.end.encrypted_logs_hash;\n    let current_encrypted_logs_hash = private_call_public_inputs.encrypted_logs_hash;\n    public_inputs.end.encrypted_logs_hash = compute_logs_hash(previous_encrypted_logs_hash,current_encrypted_logs_hash);\n    let previous_unencrypted_logs_hash = public_inputs.end.unencrypted_logs_hash;\n    let current_unencrypted_logs_hash = private_call_public_inputs.unencrypted_logs_hash;\n    public_inputs.end.unencrypted_logs_hash = compute_logs_hash(previous_unencrypted_logs_hash,current_unencrypted_logs_hash);\n\n    // Add log preimages lengths from current iteration to accumulated lengths\n    public_inputs.end.encrypted_log_preimages_length = public_inputs.end.encrypted_log_preimages_length +\n                                                           private_call_public_inputs.encrypted_log_preimages_length;\n    public_inputs.end.unencrypted_log_preimages_length = public_inputs.end.unencrypted_log_preimages_length + private_call_public_inputs.unencrypted_log_preimages_length;\n}\n\npub fn contract_logic(\n    private_call: PrivateCallData,\n    public_inputs: &mut KernelCircuitPublicInputsBuilder,\n    contract_dep_data: ContractDeploymentData,\n    function_data: FunctionData\n) {\n    let private_call_public_inputs = private_call.call_stack_item.public_inputs;\n    let portal_contract_address = private_call.portal_contract_address;\n    let contract_address = private_call.call_stack_item.contract_address;\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3062): Why is this using a hash function from the stdlib::recursion namespace\n    let private_call_vk_hash = stdlib_recursion_verification_key_compress_native_vk(private_call.vk);\n\n    let is_contract_deployment = public_inputs.constants.tx_context.is_contract_deployment_tx;\n\n    // input storage contract address must be 0 if its a constructor call and non-zero otherwise\n    if is_contract_deployment {\n        let computed_initialization_hash = compute_initialization_hash(\n            function_data.selector.to_field(),\n            private_call_public_inputs.args_hash\n        );\n\n        assert(\n            computed_initialization_hash == contract_dep_data.initialization_hash, \"initialization hash does not match computed one\"\n        );\n\n        let new_contract_address = AztecAddress::compute_from_public_key(\n            contract_dep_data.public_key,\n            contract_dep_data.contract_class_id,\n            contract_dep_data.contract_address_salt,\n            contract_dep_data.initialization_hash,\n            contract_dep_data.portal_contract_address\n        );\n\n        let new_contract_data = NewContractData {\n            contract_address: new_contract_address,\n            portal_contract_address,\n            contract_class_id: contract_dep_data.contract_class_id\n        };\n        public_inputs.end.new_contracts.push(new_contract_data);\n\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3062) VKs are mocked out for now\n        // assert(contract_dep_data.constructor_vk_hash == private_call_vk_hash, \"constructor_vk_hash doesn't match private_call_vk_hash\");\n\n        assert(\n            contract_address.eq(new_contract_address), \"contract address supplied does not match derived address\"\n        );\n\n        let new_contract_address_nullifier = compute_new_contract_address_hash(new_contract_address);\n\n        public_inputs.end.new_nullifiers.push(\n            SideEffectLinkedToNoteHash { value: new_contract_address_nullifier, note_hash: 0, counter: 1 }\n        );\n    } else {\n        // non-contract deployments must specify contract address being interacted with\n        assert(!contract_address.is_zero(), \"contract address cannot be zero\");\n        // std::println(f\"contract_address={contract_address}\");\n        // std::println(f\"private_call_vk_hash={private_call_vk_hash}\");\n\n        // Recompute the contract class id\n        let computed_private_functions_root = private_functions_root_from_siblings(\n            private_call.call_stack_item.function_data.selector,\n            private_call_vk_hash,\n            private_call.function_leaf_membership_witness.leaf_index,\n            private_call.function_leaf_membership_witness.sibling_path\n        );\n        // std::println(f\"computed_private_functions_root={computed_private_functions_root}\");\n\n        let computed_contract_class_id = ContractClassId::compute(\n            private_call.contract_class_artifact_hash,\n            computed_private_functions_root,\n            private_call.contract_class_public_bytecode_commitment\n        );\n        // std::println(f\"computed_contract_class_id={computed_contract_class_id}\");\n\n        // Recompute contract address using the preimage which includes the class_id\n        let computed_partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            computed_contract_class_id,\n            private_call.salted_initialization_hash\n        );\n        // std::println(f\"computed_partial_address={computed_partial_address}\");\n\n        let computed_address = AztecAddress::compute(private_call.public_keys_hash, computed_partial_address);\n        // std::println(f\"computed_address={computed_address}\");\n\n        assert(\n            computed_address.eq(contract_address), \"computed contract address does not match expected one\"\n        );\n    }\n}\n\npub fn validate_previous_kernel_values(end: CombinedAccumulatedData) {\n    assert(end.new_nullifiers[0].value != 0, \"The 0th nullifier in the accumulated nullifier array is zero\");\n}\n\npub fn validate_call_against_request(private_call: PrivateCallData, request: CallRequest) {\n    let call_stack_item = private_call.call_stack_item;\n    assert(\n        request.hash == call_stack_item.hash(), \"calculated private_call_hash does not match provided private_call_hash at the top of the call stack\"\n    );\n\n    let call_context = call_stack_item.public_inputs.call_context;\n\n    // Ensures that if the function is internal, only the contract itself can call it.\n    if call_stack_item.function_data.is_internal {\n        assert(\n            call_context.msg_sender.eq(call_context.storage_contract_address), \"call is internal but msg_sender is not self\"\n        );\n    }\n\n    if call_context.is_delegate_call {\n        let caller_context = request.caller_context;\n        assert(!caller_context.is_empty(), \"caller context cannot be empty for delegate calls\");\n        assert(\n            call_context.msg_sender.eq(caller_context.msg_sender), \"call stack msg_sender does not match expected msg_sender for delegate calls\"\n        );\n        assert(\n            call_context.storage_contract_address.eq(caller_context.storage_contract_address), \"call stack storage address does not match expected contract address for delegate calls\"\n        );\n        assert(\n            !call_stack_item.contract_address.eq(call_context.storage_contract_address), \"curent contract address must not match storage contract address for delegate calls\"\n        );\n    } else {\n        let caller_contract_address = request.caller_contract_address;\n        assert(\n            call_context.msg_sender.eq(caller_contract_address), \"call stack msg_sender does not match caller contract address\"\n        );\n        assert(\n            call_context.storage_contract_address.eq(call_stack_item.contract_address), \"call stack storage address does not match expected contract address\"\n        );\n    }\n}\n\nfn field_to_grumpkin_private_key(val: Field) -> GrumpkinPrivateKey {\n    let bytes = val.to_be_bytes(32);\n    let mut v = 1;\n    let mut high = 0;\n    let mut low = 0;\n\n    for i in 0..16 {\n        high = high + (bytes[15 - i] as Field) * v;\n        low = low + (bytes[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    GrumpkinPrivateKey { high, low }\n}\n\npub fn compute_siloed_nullifier_secret_key(secret_key: GrumpkinPrivateKey, contract_address: AztecAddress) -> GrumpkinPrivateKey {\n    // TODO: Temporary hack. Should replace it with a secure way to derive the secret key.\n    // Match the way keys are derived in circuits.js/src/keys/index.ts\n    let hash = pedersen_hash(\n        [secret_key.high, secret_key.low, contract_address.to_field()],\n        0\n    );\n    field_to_grumpkin_private_key(hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/private-kernel-lib/src/common.nr"},"116":{"source":"use dep::private_kernel_lib::PrivateKernelInputsInner;\nuse dep::types::KernelCircuitPublicInputs;\n\nunconstrained fn main(input: PrivateKernelInputsInner) -> distinct pub KernelCircuitPublicInputs {\n    input.native_private_kernel_circuit_inner()\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/private-kernel-inner-simulated/src/main.nr"}}}