{"noir_version":"0.23.0+f1b91511124df89bbe9e059b87536901bdf0d6f3","hash":17090990659433109575,"abi":{"parameters":[{"name":"input","type":{"kind":"struct","path":"private_kernel_lib::private_kernel_init::PrivateKernelInputsInit","fields":[{"name":"tx_request","type":{"kind":"struct","path":"private_kernel_lib::types::transaction::request::TxRequest","fields":[{"name":"origin","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"tx_context","type":{"kind":"struct","path":"private_kernel_lib::types::transaction::context::TxContext","fields":[{"name":"is_fee_payment_tx","type":{"kind":"boolean"}},{"name":"is_rebate_payment_tx","type":{"kind":"boolean"}},{"name":"is_contract_deployment_tx","type":{"kind":"boolean"}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"private_kernel_lib::types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"function_data","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_data::FunctionData","fields":[{"name":"selector","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_internal","type":{"kind":"boolean"}},{"name":"is_private","type":{"kind":"boolean"}},{"name":"is_constructor","type":{"kind":"boolean"}}]}}]}},{"name":"private_call","type":{"kind":"struct","path":"private_kernel_lib::types::abis::private_kernel::private_call_data::PrivateCallData","fields":[{"name":"call_stack_item","type":{"kind":"struct","path":"private_kernel_lib::types::abis::private_call_stack_item::PrivateCallStackItem","fields":[{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_data","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_data::FunctionData","fields":[{"name":"selector","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_internal","type":{"kind":"boolean"}},{"name":"is_private","type":{"kind":"boolean"}},{"name":"is_constructor","type":{"kind":"boolean"}}]}},{"name":"public_inputs","type":{"kind":"struct","path":"private_kernel_lib::types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"private_kernel_lib::types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"private_kernel_lib::types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"private_kernel_lib::types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"private_kernel_lib::types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"private_kernel_lib::types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"private_kernel_lib::types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]}},{"name":"private_call_stack","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"proof","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::Proof","fields":[]}},{"name":"vk","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::VerificationKey","fields":[]}},{"name":"salted_initialization_hash","type":{"kind":"struct","path":"private_kernel_lib::types::address::SaltedInitializationHash","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"public_keys_hash","type":{"kind":"struct","path":"private_kernel_lib::types::address::PublicKeysHash","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_class_artifact_hash","type":{"kind":"field"}},{"name":"contract_class_public_bytecode_commitment","type":{"kind":"field"}},{"name":"function_leaf_membership_witness","type":{"kind":"struct","path":"private_kernel_lib::types::abis::membership_witness::FunctionLeafMembershipWitness","fields":[{"name":"leaf_index","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":5,"type":{"kind":"field"}}}]}},{"name":"read_request_membership_witnesses","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::membership_witness::ReadRequestMembershipWitness","fields":[{"name":"leaf_index","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":32,"type":{"kind":"field"}}},{"name":"is_transient","type":{"kind":"boolean"}},{"name":"hint_to_commitment","type":{"kind":"field"}}]}}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"acir_hash","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"input":[{"start":0,"end":1409}]},"return_type":{"abi_type":{"kind":"struct","path":"private_kernel_lib::types::abis::kernel_circuit_public_inputs::KernelCircuitPublicInputs","fields":[{"name":"aggregation_object","type":{"kind":"struct","path":"private_kernel_lib::types::mocked::AggregationObject","fields":[]}},{"name":"meta_hwm","type":{"kind":"field"}},{"name":"end","type":{"kind":"struct","path":"private_kernel_lib::types::abis::combined_accumulated_data::CombinedAccumulatedData","fields":[{"name":"read_requests","type":{"kind":"array","length":128,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::nullifier_key_validation_request::NullifierKeyValidationRequestContext","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":64,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":64,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack","type":{"kind":"array","length":8,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_stack","type":{"kind":"array","length":8,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallRequest","fields":[{"name":"hash","type":{"kind":"field"}},{"name":"caller_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"caller_context","type":{"kind":"struct","path":"private_kernel_lib::types::abis::call_request::CallerContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"new_contracts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::new_contract_data::NewContractData","fields":[{"name":"contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}},{"name":"public_data_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::public_data_update_request::PublicDataUpdateRequest","fields":[{"name":"leaf_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"public_data_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"private_kernel_lib::types::abis::public_data_read::PublicDataRead","fields":[{"name":"leaf_slot","type":{"kind":"field"}},{"name":"value","type":{"kind":"field"}}]}}}]}},{"name":"constants","type":{"kind":"struct","path":"private_kernel_lib::types::abis::combined_constant_data::CombinedConstantData","fields":[{"name":"historical_header","type":{"kind":"struct","path":"private_kernel_lib::types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"private_kernel_lib::types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"private_kernel_lib::types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"private_kernel_lib::types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"private_kernel_lib::types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"private_kernel_lib::types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"tx_context","type":{"kind":"struct","path":"private_kernel_lib::types::transaction::context::TxContext","fields":[{"name":"is_fee_payment_tx","type":{"kind":"boolean"}},{"name":"is_rebate_payment_tx","type":{"kind":"boolean"}},{"name":"is_contract_deployment_tx","type":{"kind":"boolean"}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"private_kernel_lib::types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"private_kernel_lib::types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"private_kernel_lib::types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"private_kernel_lib::types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]}},{"name":"is_private","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[19489,19490,19491,19492,19493,19494,19495,19496,19497,19498,19499,19500,19501,19502,19503,19504,19505,19506,19507,19508,19509,19510,19511,19512,19513,19514,19515,19516,19517,19518,19519,19520,19521,19522,19523,19524,19525,19526,19527,19528,19529,19530,19531,19532,19533,19534,19535,19536,19537,19538,19539,19540,19541,19542,19543,19544,19545,19546,19547,19548,19549,19550,19551,19552,19553,19554,19555,19556,19557,19558,19559,19560,19561,19562,19563,19564,19565,19566,19567,19568,19569,19570,19571,19572,19573,19574,19575,19576,19577,19578,19579,19580,19581,19582,19583,19584,19585,19586,19587,19588,19589,19590,19591,19592,19593,19594,19595,19596,19597,19598,19599,19600,19601,19602,19603,19604,19605,19606,19607,19608,19609,19610,19611,19612,19613,19614,19615,19616,19617,19618,19619,19620,19621,19622,19623,19624,19625,19626,19627,19628,19629,19630,19631,19632,19633,19634,19635,19636,19637,19638,19639,19640,19641,19642,19643,19644,19645,19646,19647,19648,19649,19650,19651,19652,19653,19654,19655,19656,19657,19658,19659,19660,19661,19662,19663,19664,19665,19666,19667,19668,19669,19670,19671,19672,19673,19674,19675,19676,19677,19678,19679,19680,19681,19682,19683,19684,19685,19686,19687,19688,19689,19690,19691,19692,19693,19694,19695,19696,19697,19698,19699,19700,19701,19702,19703,19704,19705,19706,19707,19708,19709,19710,19711,19712,19713,19714,19715,19716,19717,19718,19719,19720,19721,19722,19723,19724,19725,19726,19727,19728,19729,19730,19731,19732,19733,19734,19735,19736,19737,19738,19739,19740,19741,19742,19743,19744,19745,19746,19747,19748,19749,19750,19751,19752,19753,19754,19755,19756,19757,19758,19759,19760,19761,19762,19763,19764,19765,19766,19767,19768,19769,19770,19771,19772,19773,19774,19775,19776,19777,19778,19779,19780,19781,19782,19783,19784,19785,19786,19787,19788,19789,19790,19791,19792,19793,19794,19795,19796,19797,19798,19799,19800,19801,19802,19803,19804,19805,19806,19807,19808,19809,19810,19811,19812,19813,19814,19815,19816,19817,19818,19819,19820,19821,19822,19823,19824,19825,19826,19827,19828,19829,19830,19831,19832,19833,19834,19835,19836,19837,19838,19839,19840,19841,19842,19843,19844,19845,19846,19847,19848,19849,19850,19851,19852,19853,19854,19855,19856,19857,19858,19859,19860,19861,19862,19863,19864,19865,19866,19867,19868,19869,19870,19871,19872,19873,19874,19875,19876,19877,19878,19879,19880,19881,19882,19883,19884,19885,19886,19887,19888,19889,19890,19891,19892,19893,19894,19895,19896,19897,19898,19899,19900,19901,19902,19903,19904,19905,19906,19907,19908,19909,19910,19911,19912,19913,19914,19915,19916,19917,19918,19919,19920,19921,19922,19923,19924,19925,19926,19927,19928,19929,19930,19931,19932,19933,19934,19935,19936,19937,19938,19939,19940,19941,19942,19943,19944,19945,19946,19947,19948,19949,19950,19951,19952,19953,19954,19955,19956,19957,19958,19959,19960,19961,19962,19963,19964,19965,19966,19967,19968,19969,19970,19971,19972,19973,19974,19975,19976,19977,19978,19979,19980,19981,19982,19983,19984,19985,19986,19987,19988,19989,19990,19991,19992,19993,19994,19995,19996,19997,19998,19999,20000,20001,20002,20003,20004,20005,20006,20007,20008,20009,20010,20011,20012,20013,20014,20015,20016,20017,20018,20019,20020,20021,20022,20023,20024,20025,20026,20027,20028,20029,20030,20031,20032,20033,20034,20035,20036,20037,20038,20039,20040,20041,20042,20043,20044,20045,20046,20047,20048,20049,20050,20051,20052,20053,20054,20055,20056,20057,20058,20059,20060,20061,20062,20063,20064,20065,20066,20067,20068,20069,20070,20071,20072,20073,20074,20075,20076,20077,20078,20079,20080,20081,20082,20083,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20094,20095,20096,20097,20098,20099,20100,20101,20102,20103,20104,20105,20106,20107,20108,20109,20110,20111,20112,20113,20114,20115,20116,20117,20118,20119,20120,20121,20122,20123,20124,20125,20126,20127,20128,20129,20130,20131,20132,20133,20134,20135,20136,20137,20138,20139,20140,20141,20142,20143,20144,20145,20146,20147,20148,20149,20150,20151,20152,20153,20154,20155,20156,20157,20158,20159,20160,20161,20162,20163,20164,20165,20166,20167,20168,20169,20170,20171,20172,20173,20174,20175,20176,20177,20178,20179,20180,20181,20182,20183,20184,20185,20186,20187,20188,20189,20190,20191,20192,20193,20194,20195,20196,20197,20198,20199,20200,20201,20202,20203,20204,20205,20206,20207,20208,20209,20210,20211,20212,20213,20214,20215,20216,20217,20218,20219,20220,20221,20222,20223,20224,20225,20226,20227,20228,20229,20230,20231,20232,20233,20234,20235,20236,20237,20238,20239,20240,20241,20242,20243,20244,20245,20246,20247,20248,20249,20250,20251,20252,20253,20254,20255,20256,20257,20258,20259,20260,20261,20262,20263,20264,20265,20266,20267,20268,20269,20270,20271,20272,20273,20274,20275,20276,20277,20278,20279,20280,20281,20282,20283,20284,20285,20286,20287,20288,20289,20290,20291,20292,20293,20294,20295,20296,20297,20298,20299,20300,20301,20302,20303,20304]},"bytecode":"","debug_symbols":"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sq/Tt5f83LeX/Ny3l/zct0Q/95vf3ntKH3R6eZ3TNr+993X6nuXa92zXXu61Pcu9tk/5732f8t/7Pum/OVP+mzM2v639lF7+mzM2v639kH7z29pfp58hP/cz5Od+hvzczwo/9/lV4HXOlT7o9PA650oPr3PeILJ0erv2cK99Q5XA6b/f1bk2vfz3PtN/czL9N6fQf3MK/TenZHh9n0uR1/dR5Oc+ivzcR5Gf+wj5ua9VXufUzclmT+nldU7dnGz2dfom30O+0tu1l3ttk+8h5/GS/96Pl/z3frzkvznjJf/NmfT6ftLr+0mv76e8vi8vudde6eHn/koPP/fltTlB5uv09O/3hf79vtC/3xf69/tCU+XK7lS5p/Ryr92dAPd1+irfz7nSy3/vq3w/50ov/81pMjfqSi//zWkyN6p0mRtV6Pv3hb5/X+j794W+fx8vmRt1pQ86PbzOudLD65ygf1MI+jeFKz3ca6/0cK+NkLlRV3r5733I3Kgrvfw35/v5OX28v3qOnP6T/v9J9N1clvSqOd5L9Krz9VDRFh+foLU0Pl49x92bp2gfb55q/s/L/3ze9N2ft6e/n7f3J+dpu3aw75935Pi/f978y/596y/7vO2XPc/9uz/v9a/08XnHbI//vn//eV+f/v5/N1l7cfopp88vOn2i02c6faHTB52+0ukbnZ7utdnptb19Tu/02pv0xem1d+mdXnuX3um1d+mdXnuXfvNe23P58+r+P0k+0m/eax/Sb95rH9Jv3msf0m/eax/Sb95rv04fm/fah/Sb99qH9Jv32of0m/fah/R0rw261wbda4PutUH32qB7baV7baV7baV7baV77XcTaRanp3ttpXttpXttpXttpXtto3tto3ttk3ttT7vXPuZ7+pY/p//2XvtPbzD177+x9U9vMPUknwl3+v5Vp+9fdfr+VafvX3X6/lWn7191+v5Vp+9fdfr+VafvX3X6/lWH7l/dpad7LX3/qtP3rzp9/6rT96/67vevHtI7vfYuvfw7dafvX3X6/lWn7191+v5Vp+9fdfr+VafvX3X6/lWn7191+v5Vp+9fdfr+VafvX3X6/lWn7191+v5Vp+9fdfr+VafvX3X6/lWn7191+v5Vp+9fdfr+VafvX3X7/lWje22je22je22je22je22je22je22ne22ne22ne22ne22ne22ne22n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b1+jvX2N9vY12tvXaG9fo719jfb2Ndrb12hvX6O9fY329jXa29dob1+jvX2N9vY12tvXaG9fp719nfb2ddrb12lvX3/JvbbT3r5Oe/s67e3rtLev096+Tnv7Ou3t67S3r9Pevk57+zrt7eu0t6/T3r5Oe/s67e3rtLev096+TnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY0a299Li/mevuXP6Xev/dfpv73X1hwf6et8PaRvMd7fvV2f++PVc9y9eYr28eap5v+8/M/n/fbu3NPfz3ttxJ8+b3+93j/vyPF//7yb9/MWf/95X5+fzs37+UP6zfv5Q/rN+/nX6Xe/f/WQfvOe8pB+873zQ/rN984P6YNOv/ne+SE93Wt3v3/1kJ7utbvfv/o6/e73r/4nfW+f0zu99i6902vv0ju99i6902vv0ju99i69/Dv1oO9fDfr+1aDvXw36/tWg718N+v7VoO9fDfr+1aDvXw36/tWg718N+v7VoO9fDfr+1aDvXw36/tWg718N+v7VoO9fDfr+1aDvXw36/tWg718N+v7VsO9f0d6+QXv7Bu3tG7S3b9DevkF7+wbt7Ru0t2/S3r5Je/sm7e2btLdvvuReO2lv36S9fZP29k3a2zdpb9+kvX2T9vZN2ts3aW/fpL19k/b2TdrbN2lv36S9fZP29k3a2zdpb9+kvX2T9vZN2ts3aW/fpL19k/b2TdrbN2lv36S9fZP29k3a2zdpb9+kvX2T9vZN2ts3aW/fpL19k/b2TdrbN2lv36S9fZP29k3a2zdpb9+kvX2T9vZN2ts3aW/fpL19k/b2TdrbN2lv36S9fZP29k3a2zdpb9+kvX2T9vZN2ts3aW/fpL19k/b2TdrbN2lv36S5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRk+ZGTZobNWlu1KS5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRk+ZGTZobNWlu1KS5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRU+ZGtZfMjbrSw732Sg/32is93Guv9HCvvdLDvfZKD/faKz3ca6/0cK+90tO9VuZGXenpXitzo670dK+VuVFXerrXytyoKz3da2Vu1JWe7rUyN+pKT/damRt1pad7rcyNutLTvVbmRl3p6V4rc6Ou9HSvlblRV3q618rcqCs93WtlbtSVnu61299Li/mevuXP6Xev/dfpv73X1hwf6et8PaRvMd7fvV2f++PVc9y9eYr28eap5v+8/M/n/fbu3NPfz9t7ffq8/fV6/7wjx//58+5+/6rF33/e16enc/f7Vw/pN+/nD+k37+cP6TfvKQ/pN+8pD+k33zs/pN987/yQfvO980P6zffOX6ZPu9+/ekgv99q0+/2rh/Ryr00vp9f29jm902vv0ju99i6902vv0ju99i6902tv0tP3rxJ9/yrR968Sff8q0fevEn3/KtH3rxJ9/yrR968Sff8q0fevEn3/KtH3rxJ9/yrR968Sff8q0fevEn3/KtH3rxJ9/yrR968Sff8q0fevEn3/KtH3rxJ9/yrJ3r4rPd1rZW/flZ7utbK370pP91rZ23elp3ut7O270tO9Vvb2XenpXit7+670dK+VvX1XerrXyt6+Kz3da2Vv35We7rWyt+9KT/da2dt3pad7reztu9LTvVb29l3p6V4re/uu9HSvlb19V3q618revis93Wtlb9+Vnu61srfvSk/3Wtnbd6Wne63s7bvS071W9vZd6eleK3v7rneie63s7bveie61srfveie618revuud6F4re/uud6J7reztu9LTvVb29l3p6V4re/uu9HSvlb19V3q618reviu93Gsz7e3LtLcv096+THv78kvutZn29mXa25dpb1+mvX2Z9vZlmhuVaW5UprlRmeZGZZoblWluVKa5UZnmRmWaG5VpblSmuVGZ5kZlmhuVaW5UprlRmeZGZZoblWluVKa5UZnmRmWaG5VpblSmuVGZ5kZlmhuVaW5UprlRmeZGZZoblWluVKa5UZnmRmWaG5VpblSmuVGZ5kZlmhuVaW5UprlRmeZGZZoblWluVKa5UZnmRmWaG5VpblSmuVGZ5kZlmhuVaW5UprlRmeZGZZoblWluVKa5UZnmRmWaG5VpblSmuVGZ5kZlmhuVaW5UprlRmeZGZZoblWluVKa5UZnmRmWaG5VpblTZ/l5azPf0LX9Ov3vtv0z//Xejao6P9HW+HtK3GO/v3q7P/fHqOe7ePEX7ePNU839e/ufzfnt37unv5+29Pn3e/nq9f96R4//+eTfv5y3+/vO+Pj+dm/fzh/Sb9/OH9Jv384f0m/eUh/Sb95Sv0+9+/+oh/eZ754f0m++dH9Jvvnd+SE/32t3vXz2kp3vt7vevHtI7vba3z+mdXnuTfvf7Vw/pnV57l97ptXfpnV57l37zXvv1L170/atC378q9P2rQt+/KvT9q0Lfvyr0/atC378q9P2rQt+/KvT9q0Lfvyr0/atC378q9P2rQt+/KvT9q0Lfvyr0/atC378q9P2rQt+/KvT9q0Lfvyr2/Sva21dob1+hvX2F9vYV2ttXaG9fob19hfb2FdrbV2hvX6G9fYX29hXa21dob1+hvX2F9vYV2ttXaG9fob19hfb2Be3tC9rbF7S3L2hvX7zkXhu0ty9ob1/Q3r6gvX1Be/uC9vYF7e0L2tsXtLcvaG9f0N6+oL19QXv7gvb2Be3tC9rbF7S3L2hvX9DevqC9fUF7+4L29gXt7Qva2xe0ty9ob1/Q3r6gvX1Be/uC9vYF7e0L2tsXtLcvaG9f0N6+oL19QXv7gvb2Be3tC9rbF7S3L2hvX9DevqC9fUF7+4L29gXt7Qva2xe0ty9oblTQ3KiguVFBc6OC5kYFzY0KmhsVNDcqaG5U0NyooLlRQXOjguZGBc2NCpobFTQ3KmhuVNDcqKC5UUFzo4LmRgXNjQqaGxU0NypoblTQ3KiguVFBc6OC5kYFzY0KmhsVNDcqaG5U0NyooLlRQXOjguZGBc2NCpobFTQ3KmhuVNDcqKC5UUFzo4LmRgXNjao0N6rS3KhKc6MqzY2qL7nXVpobVWluVKW5UZXmRlWaG1VpblSluVGV5kZVmhtVaW5UpblRleZGVZobVWluVKW5UZXmRlWaG1VpblSluVF1+3tpMd/Tt/w5/e61/zr9t/famuMjfZ2vh/Rv5+F/Xt6uz/3x6jnu3jxF+3jzVPN/Xv7n8357d+7p7+ftvT593v56vX/ekeP//nk37+ct/v7zvj4/nZv386/T737/6iH95v38If3mPeUh/eY95SF90Ok33zs/pN987/yQfvO980N6utfufv/q6/S73796SE/32t3vX/1P+t4+p3d67V16p9fepXd67V16p9fepXd67V16+ndq+v5Vo+9fNfr+VaPvXzX6/lV7bd5rH9LLZ8KNvn/V6PtXjb5/1ej7V42+f9Xo+1eNvn/V6PtXjb5/1ej7V42+f9Xo+1eNvn/V6PtXjb5/1ej7V42+f9Xo+1eN9vY12tvXaG9fo719jfb2Ndrb12hvX6O9fY329jXa29dob1+jvX2N9vY12tvXaG9fo719jfb2Ndrb12hvX6O9fY329jXa29dob1+jvX2N9vY12tvXaG9fo719jfb2Ndrb12hvX6O9fY329jXa29dob1+jvX2N9vY12tvXaG9fo719jfb2Ndrb12hvX6O9fY329jXa29dob1+jvX2N9vY12tvXaG9fo719jfb2Ndrb12hvX6O9fY329jXa29dob1+jvX2N9vY12tvXaG9fo719jfb2Ndrb12hvX6O9fY329jXa29dob1+jvX2N9vY12tvXaG5Uo7lRneZGdZob1WluVKe5Uf0l99pOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDeq09yoTnOjOs2N6jQ3qtPcqE5zozrNjeo0N6rT3KhOc6M6zY3qNDdqbH8vLeZ7+pY/p9+99l+m//67UTXHR/o6Xw/pW4z3d3+TL368eo67N0/RPt481fyfl//5vN/enXv6+3l7r0+ft79e75935Pi/f97N+3mLv/+8r89P5+b9/CH95v38If3m/fwh/eY95SH95j3lIf3me+eH9Jvvnb9Ov/v9q4f0m++dH9LTvXb3+1cP6eleu/v9q4f0Tq/t7XN6p9fepXd67V16p9fepN/9/tVDeqfX3qWXf6ce9P2rQd+/GvT9q0Hfvxr0/atB378a9P2rQd+/GvT9q0Hfvxr0/atB378a9P2rQd+/GvT9q0Hfvxr0/atB378a9P2rQd+/GvT9q0Hfvxr0/atB378a9v0r2ts3aG/foL19g/b2DdrbN2hv36C9fYP29g3a2zdob9+gvX2D9vYN2ts3aG/foL19g/b2DdrbN2hv36C9fYP29g3a2zdob9+gvX2D9vYN2ts3aG/foL19g/b2DdrbN2hv36C9fYP29k3a2zdpb9+kvX2T9vbNl9xrJ+3tm7S3b9Levkl7+ybt7Zu0t2/S3r5Je/sm7e2btLdv0t6+SXv7Ju3tm7S3b9Levkl7+ybt7Zu0t2/S3r5Je/sm7e2btLdv0t6+SXv7Ju3tm7S3b9Levkl7+ybt7Zu0t2/S3r5Je/sm7e2btLdv0t6+SXv7Ju3tmzQ3atLcqElzoybNjZo0N2rS3KhJc6MmzY2aNDdq0tyoSXOjJs2NmjQ3atLcqElzoybNjZo0N2rS3KhJc6MmzY2aNDdq0tyoSXOjJs2NmjQ3atLcqElzoybNjZo0N2rS3KhJc6MmzY2aNDdq0tyoSXOjJs2NmjQ3atLcqElzoybNjZo0N2rS3KhJc6MmzY2aNDdq0tyoSXOjJs2NmjQ3atLcqElzoybNjZo0N2rS3KhJc6MmzY2aNDdqytyo/pK5UVd6uNde6eFee6WHe+2VHu61V3q4117p4V57pYd77ZUe7rVXerrXytyoKz3da7e/lxbzPX3Ln9PvXvuv0397r605PtLX+XpI32K8v3u7PvfHq+e4e/MU7ePNU83/efmfz/vt3bmnv5+39/r0ea8/pO+fd+T4v3/ezft5i7//vK/PT+fm/fwh/eb9/CH95v386/S73796SL95T3lIv/ne+SH95nvnh/RBp9987/yQnu61u9+/ekhP99rd7199nX73+1f/k763z+mdXnuX3um1d+mdXnuX3um1d+mdXnuXnv6dWr5/daWnf6eW71/1l3z/6kpP/04t37+60tNnwvL9qys9fSYs37+60tO9Vr5/daWXe22i718l+v5Vou9fJfr+VXrJvTbR968Sff8q0fevEn3/KtH3rxJ9/yrR96+S7O270tO9Vvb2XenpXit7+670dK+VvX1XerrXyt6+Kz3da2Vv35We7rWyt+9KT/da2dt3pad7reztu9LTvVb29l3p6V4re/uu9HSvlb19V3q618revis93Wtlb9+Vnu61srfvSk/3Wtnbd6Wne63s7bvS071W9vZd6eleK3v7rvR0r5W9fVd6utfK3r4rPd1rZW/flZ7utbK370pP91rZ23el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2n+d/tt7bc3xkb7O10P6FuP93dv1uT9ePcfdm6doH2+eav7Py/983m/vztcRycfn7b0+fd7+er1/3pHj//55N+/nLf7+874+P52b9/Mv04/d7189pN+8nz+k37ynPKTfvKc8pA86/eZ754f0m++dH9Jvvnd+SC/32rH7/auv0+9+/+ohPd1rd79/9T/pe/uc3um1d+mdXnuX3um1d+mdXnuX3um1d+nl36kHff9q0PevBn3/atD3rwZ9/2rQ968Gff9q0PevBn3/atD3rwZ9/2rQ968Gff9q0PevBn3/atD3rwZ9/2rQ968Gff9q0PevBn3/atD3rwZ9/2rQ968Gff9q0N6+QXv7Bu3tG7S3b9DevkF7+wbt7Ru0t2/Q3r5Be/sG7e0btLdv0N6+QXv7Bu3tG7S3b9DevkF7+wbt7Ru0t2/Q3r5Be/sG7e0btLdv0N6+QXv7Bu3tG7S3b9DevkF7+wbt7Ru0t2/Q3r5Be/sG7e0btLdv0N6+QXv7Bu3tG7S3b9DevkF7+wbt7Ru0t2/Q3r5Be/sG7e0btLdv0N6+QXv7Bu3tG7S3b9DevkF7+wbt7Ru0t2/S3r5Je/sm7e2btLdvvuReO2lv36S9fZP29k3a2zdpb9+kvX2T9vZN2ts3aW/fpL19k/b2TdrbN2lv36S5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRk+ZGTZobNWlu1KS5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRk+ZGTZobNWlu1KS5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRk+ZGTZobNWlu1KS5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRk+ZGTZobNWlu1KS5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRk+ZGTZobNWlu1KS5UZPmRk2aGzVpbtSkuVGT5kZNmhs1aW7UpLlRU+ZGjdf299Jivqdv+XP63Wv/dfpvX+fM/0k/Z39In2p7vb+89vicf9r5v/9u2uL8Cc+f8fwFzx94/ornb3j+jufH+2/g/bfi/bfi/bdK/Xd+3rtUqf/e5Zf6711+qf/e5d+9//b88fIe5XP+3fvvU/7d++9T/t3770P+BXfYRn3/cSnGrA/5Sx3vP4eUltLTq2f/8+KW//52chXpT/jdm+8o+f3lo/3vH5/Pr63tPUgd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VOn0pEqnJ1U6PanS6UmVTk+qdHpSpdOTKp2eVOm04bzThvNOG847bTjvtOG804bzThvOO20477ThvNOG804bzjttOO+04bzThvNOG847bTjvtOG804bzThvOO20477ThvNOG804bzjttOO+04bzThvNOG847bTjvtOG804bzThvOO20477ThvNOG804bzjttOO+04bzThvNOG84HbTgftOF80IbzQRvOx0vutYM2nA/acD5ow/mgDeeDNpwP2nA+aMP5oA3ngzacD9pwPmjD+aAN54PmRg2aGzVobtSguVGD5kYNmhs1aG7UoLlRg+ZGDZobNWhu1KC5UYPmRo3t506+MqSM7edOvk7/7X/v/6nfZew+qfIlOXzsPqnykF4m5o/dJ1Ue0svE/LH7pMpDetlOM3afVHlIL9tpxu6TKg/p6V67+6TKQ3q61+4+qfKQ3um1n10LY/dJlYf0sp1m7D6p8pBettOM3SdVHtLLdppBT6oMelJl0JMqg55UGfSkyqAnVQY9qTLoSZVBT6oMelJl0JMqg55UGfSkyqAnVSY9qTLpSZVJT6pMelJlvuReO+lJlUlPqkx6UmXSkyqTnlSZ9KTKpCdVJj2pMulJlUlPqkx6UmXSkyqTnlSZ9KTKpCdVJj2pMulJlUlPqkx6UmXSkyqTnlSZ9KTKpCdVJj2pMulJlUkbzidtOJ+04XzShvNJG84nbTiftOF80obzSRvOJ204n7ThfNKG80kbzidtOJ+04XzShvNJG84nbTiftOF80obzSRvOJ204n7ThfNKG80kbzidtOJ+04XzShvNJG84nbTiftOF80obzSRvOJ204n7ThfNKG80kbzidtOJ+04XzShvNJG84nbTiftOF80obzSRvOJ204n7ThfNKG80kbzidtOJ+04XzShvNJG84nbTiftOF80obzSXOjJs2NmjQ3atLcqElzoybNjZo0N2rS3KhJc6MmzY2aNDdq0tyoKXOj0mv7uZMvDClXethOc6X/9r/3/9Lvcn3ezTvEV+TwKz1MzL/Sw8T8Kz1MzL/Sw8T8Kz1sp0mv3SdVHtLDdporPWynudLDdporPd1rd59UeUhP99rdJ1Ue0ju99pNr4UoP22nSa/dJlYf0sJ3mSg/baa70sJ3mSu/02rv08C+fV3r4l88rPfzL55We/uVTnlRJL3lS5UoPnzJe6eFTxis9fMp4pd+81z6kp3utPKlypad7rTypcqWne608qXKlp3utPKlypad7rTypcqWne608qXKlp3utPKlypad7rTypcqWne608qXKlp3utPKlypad7rTypcqWne608qXKlp3utPKlypad7rTypcqWne608qXKlp3utPKlypad7rT2pIhvOU5IN51d6udcm2XB+pZd7bXrJvTbJhvMrvdxrk2w4v9LLvTbJhvPr/0D3Wtlwfv0f6F4rG86v/wPda2XD+fV/oHutbDi//g90r5UN59d/Qfda2XB+/Rd0r5UN59d/Qfda2XB+/Rd0r5UN59d/Qfda2XB+5aF7rWw4v/LQvVY2nF956F4rG87fiGF0errXyobzKw/da2XD+Rvbj05P91rZcH7993SvlQ3nbwBNOj3da2XD+fXf071WNpxf6eleKxvOr/R0r5UN51d6utfS3KhEc6MSzY1KNDcq0dyoRHOjEs2NSjQ3KtHcqERzoxLNjUo0NypvP3fylSElbz938nX6b/97/0/9Lnn3SZUvyeH5tXmHeEgvE/Pz7pMqD+llYn7efVLlIb1sp8m7T6o8pJftNHn3SZWH9HSv3X1S5SE93Wt3n1R5SO/02s+uhbz7pMpDetlOk3efVHlIL9tp8u6TKg/pZTtNpidVMj2pkulJlUxPqmR6UiXTkyqZnlTJ9KRKpidVMj2pkulJlUxPqmR6UiXTkyqZnlTJ9KRKpidVMj2pkulJlUxPqmR6UiXTkyqZnlTJ9KRKpidVMj2pkulJlUxPqmR6UiXTkyqZnlTJ9KRKpidVMj2pkulJlUxPqmR6UiXTkyqZnlTJ9KRKpidVMj2pkulJlWxPqtCG80wbzjNtOM+04TzThvNMG84zbTjPtOE804bzTBvOM204z7ThPNOG80wbzjNtOM+04TzThvNMG84zbTjPtOE804bzTBvOM204z7ThPNOG80wbzjNtOM+04TzThvNMG84zbTjPtOG80IbzQhvOC204L7ThvLzkXltow3mhDeeFNpwX2nBeaMN5oQ3nhTacF9pwXmjDeaEN54U2nBfacF5ow3mhDeeFNpwX2nBeaMN5oQ3nhTacF5obVWhuVKG5UYXmRhWaG1VoblShuVGF5kYVmhtVaG5UoblRheZGFZobVbafO/nKkFK2nzv5Ov23/73/p36Xsvukypfk8LL7pMpD+s07xEN6mZhfdp9UeUgv22nK7pMqD+llO03ZfVLlIb1spym7T6o8pKd77e6TKg/p6V67+6TKl66FsvukykN62U5Tdp9U+Tr97pMqD+llO03ZfVLlIT39yyc9qVLoSZVCT6oUelKl0JMqhZ5UCXpSJehJlaAnVYKeVImX3GuDnlQJelIl6EmVoCdVgp5UCXpSJehJlaAnVYKeVAl6UiXoSZWgJ1WCnlQJelIl6EmVoCdVgp5UCXpSJehJlaAnVYKeVAl6UiXoSZWgJ1WCnlQJelIl6EmVoCdVgp5UCXpSJehJlaAnVYI2nAdtOA/acB604Txow3nQhvOgDedBG86DNpwHbTgP2nAetOE8aMN50IbzoA3nQRvOgzacB204D9pwHrThPGjDedCG86AN50EbzoM2nAdtOA/acB604Txow3nQhvOgDedBG86DNpwHbTgP2nAetOE8aMN50IbzoA3nQRvOgzacB204D9pwHrThPGjDedCG86AN50EbzoM2nAdtOA/acB604Txow3nQhvOgDedBG86D5kYFzY0KmhsVNDcqaG5U0NyooLlRleZGVZobVWluVKW5UfUl99pKc6Pq9nMnXxlS6vZzJ1+m//65k3/qd6m7T6p8SQ6vu0+qPKSXifl190mVh/QyMb/uPqnykF6209TdJ1Ue0st2mrr7pMpDerrX7j6p8pCe7rW7T6o8pHd67WfXQt19UuUhvWynqbtPqjykl+00dfdJlYf0sp2m0pMqlZ5UqfSkSqUnVSo9qVLpSZVKT6pUelKl0pMqlZ5UqfSkSqUnVSo9qVLpSZVKT6pUelKl0pMqlZ5UqfSkSqUnVSo9qVLpSZVKT6pUelKl0pMqlZ5UqfSkSqUnVSo9qVLpSZVKT6pUelKl0pMqlZ5UqfSkSqUnVSo9qVLpSZVGT6o0elKl0ZMqjZ5UaS+51zZ6UqXRhvNGG84bbThvtOG80YbzRhvOG204b7ThvNGG80YbzhttOG+04bzRhvNGG84bbThvtOG80YbzRhvOG204b7ThvNGG80YbzhttOG+04bzRhvNGG84bbThvtOG80YbzRhvOG204b7ThvNGG80YbzhttOG+04bzRhvNGG84bbThvtOG80YbzRhvOG204b7ThvNGG80YbzhttOG+04bzRhvNGG84bbThvtOG80YbzRhvOG204b7ThvNHcqEZzoxrNjWo0N6rR3KhGc6MazY1qNDeq0dyoRnOjGs2NajQ3qtHcqL793MlXhpS+/dzJ1+m//e99zPyRvvbykP6Nu/v+8trjU/7vnzxZnD/h+TOev+D5A89f8fwNz9/x/APPj/ffjPffjPffjPffLPXf+Xnv8v1TKYvzS/33Lr/Uf+/y795/ex7vL+9RPuffvf8+5d+9/z7kL7v336f8u/ffUT5ePtr/fn8/v7a29yB1fO50ZfdOve6T7t7T133S+DWfdPd1wrpPuvuKYt0n3X3tse6T4quUgq9SAl+lxO6rlIf8dfe1x1P+3VcUT/kDz79793/I3/Hnv+PPf8ef//9fe+eW5citY9G59Aj4AF+D67m37FJERt3kEbsqeYNE4Px5LYdlYKckbJAUUZS//5ty/2m6/ac63f5TnW7/qcpXyer2q2Sj+HXX37r9itYg/qz7+79m5d//Rfn3T9H9/dO2P6U2il/390/b/pTaKH7d/t+y8vd/Vv7+z8rf/1n1+z+47U8JjuJX7T/BbX9KcBS/av8JrirnX7XzV11/X/Grrr/Bi+7vfy+6v/990v3945Pu75+w/SnxUfy6v3/C9qfER/Hr9v/odL//o9P9/o9O9/s/OuXv/6rbf2LV7T+x6faf2HT7jyjvf0V5/yvK+19R3v+mcvv3f07+jL84GcT/+v8fkUg6n22u82ir5ws793X3SZNeGE7kfPjy49McDi6NXHpc7v++VMLFG+XSvqLI7srl+8PpfOHs8/noi+YbYSDCnyKMRPhThGIToS/leDiE+hlhOJ99rQD9jHYi7RtpZ9K+kXYh7RHtGI9nxf/we9toI7OIttH2aA3tZrbpil+02/emq1ltukZcjHZSr1c7Ho6+dLgYbY+GXIRculyMdieX75foa4eL0T4ixnMRUFzocDFq/EMuRt18yMXsJkP84hK/ccmOmwy9TYbszPrugIvVnYMRF24H/HA7IDshwp8itGrRExFy4f6+hfvsuHB/J20u3N9Jmwv39y3cZ2+0kVlE22h7tIi22abr4+ZL9labrhEX4SZDZ5Mhe6Pt0ZCL0Z5nyMVodzLYlMqemwy9TYbsjRr/iEsw6uZDLjxU092UCrv77jlOLOR65fIOf3ctHYQvusPfXfIG4Rt1sdEGWzDrYgMu/FVpn4vVAx/ztsKi1bMhExHyt6o/Rmh08XPNplU0uqS6iLaQ9o20+QvYGzetIg/S3EmbB2nupG226fq88Rh5yr7LRYx2UqMNNjHaHg258FelfS488NHdkBXhBltvg02MGv+QC39V2ufCAx/dDVnZ3Xc/76nJ7lr6Ofy0uz0Owt9d8gbh6z6MkHQfRkjC7c3e9mYye1/GgAuPT/S5WDWbeRuRyeqi30SEPJTxU4SZv3O7ccsw83dud9LmUY87afOox41bhvdPnzZNm0c97qRttun6vO2buZzc52K0kxptb2aj7dGIS+HxiT4X/n6wux1ejPYRo+3NYtT4h1yEXLpceCl3dzu87O67n/fUyu5aOghf92GE7cddfg5/+6mUg/B1H0a4f3Bj8e4MvyY3CL+kdMzALanUwdNewrlcIbGXbrSVrthKN9lKN9tKt9hKt9pKt5lK9/6xcGvT9bbStWVVzZZV3T9ybW26tqyq2bKqZsuq2vZWFduRbs6/N/fvDLYXpUEGxW3vPsMMtteZYQbbG8owg+2lY5iBbJ5BdWcGtbleBrurwTiD3av9OIPdC3jzx3p1adJGT7tyxFJ8zIOnPx8jK273Yr8Qze4WsQ6N311PFqLZ3Xv+DI2Xo1ko4cdodheqhWh2N7WFaIRoEJrd3fLP0MR4fg3H5jse53c30Q/5vjNQbKLvDBQL4zsDxV73K4OgWL/eGexuScOeMuwuM+MMdneOcQbCNgSoQXiWGkxFo9gi/ttouFAG0TxroWxmGxKetVA2E0181kLZVDRcKINonrVQNuzro+LVr3cGoj4DxcL4zkD96lBUvzoUd7ekYU8Zd5eZYQayu3OMM3iWGsxsQ+RZajAVzbP20KaiEaJBaJ61UDazDZFnLZRNRfOshbKpaLhQBtE8a6Fs2Ncn9fuUSbGJvjNQLIzvDNSvDt0/UGF6BupPsSf1p9jT7s4xzoCHzZEaJB42R2gyD5tDNFwog2h42Byi4WFziEaIBqHhQhlE86yFsmFfn9XvU2b1p9iz+lPsRf3qUFG/OnT/rd015TODNvzi9em8m9Ony4y9eMQflccvyuNPyuPPyuMvyuOvyuNvuuO//2bpyfF75fErr79Vef29//bnH8R/6cXO+DXV3178mupvL35N9bcX/+71t4TjakNfJH6Pf/f6O4i/7V5/R/HvXn9H8e9ef2sMx+M1Xz+/nUXKfASS6vdK13av1KO/1O6VehT/7pV6FP/ulfpz/NXp5l+ddv67m9Ioft2mVKPy939U/v6Pyt//Ufn7//6VitZOdQtO1s1VPOdNussCyDFXsd6/AqKESyKXLpdslEv7GimY3ZVLpxP7eFyk3r9o9DyElQh/irDZROjLOf4khPoZYTifjSH8iPb9C32maXvSvpF2IO0R7RiPZ8X/7Hu7GW1kFtEW0r6RttmmK37Rbt+brma16RpxMdpJvV7teDj60uFitD0acjHa8wy4NGe0O7l8v0RfO1yM9hExnouA4kKHi1HjH3Ix6uZDLmL++0Vc7HDhJkNvk6E5s7474GJ152DEhdsBP9wOaM6oGk9E6K1a9ESEXLi/b+G+eS7c30mbC/d30hbSvm3hvnmjjcwi2kbbo0W0zTZdHzdfmrfadI24cJOhu8kQjLZHQy5Ge54hF6PdyWhTKnCTobvJcP80YCVcjLr5kAsP1XQ3pcLuvnteaRFyvXJ5h7+7lg7C390eP4cfd5e8QfhGXWy0wRbNutiAC39V2uci3Ar74VZYtHo2ZCJC/lb1xwiNLn6u2bSKRpdUF9HmL2BvpC38BeyNm1bCgzR30uZBmjtpm226Pm883j/lWwkXo53UaINNjLZHQy78VWmfCw98dDdkxWgfMdpgS0aNf8iFvyrtc+GBj+6GbNrddz/vqd0//Xxu+Lvb4yD83SVvEL7uwwhJ92GEZPVHgYPtzWz2vowBFx6f6HOxajbzNiKz1UW/iQiFCH+KkL9zu3HLMPN3bnfS5lGPO2nzqMeNW4aZRz1upF141ONO2mabrs/bvoXLyX0uRjup0fZmEXLpcuHxiT4X/n6wux1ejPYRo+3NYtT4h1x4fKLLpfJS7u52eN3ddz/vqdXdtXQQvu7DCNuPuxyEr/swwvbDIwfh3202wSV3hu9rHYRfUjpm4JZURk97CedyhcReutVWus1UurdPJFycrreVbrCVbrSVrthKN9lKN9tK15ZVNVtW1SxZVXTOklW90rVkVa90LVnVK93trSq2I92cf2/u3xmI+gy2d59hBtvrzDCD7Q1lmMH20jHMYHePqO7MoDbXycDvrgbjDHav9uMMdi/gzR87ZaVJGz3tyhFL8TEPnv54jOyFZvdivxCNEA1Cs7ueLESzu/f8GRovR7NQwo/R7C5UC9HsbmoL0eyugOvQhN3d8s/QxHh+DcfmOx4XdjfRD/m+M1Bsou8MFAvjOwNRn4Fi/XpnsLslDXvKsLvMjDPY3TnGGTxLDWa2IfFZajAVjWKL+G+j4UIZRPOshbKZbcjtY18UoXnWQtlUNFwog2ietVA27Ouj4tWvdwaKTfRXBqJYGN8ZqF8dEvWrQ7K7JQ17ytvHKczPYHfnGGfwLDWY2YbIs9RgKppn7aFNRcOFMoQmPWuhbGYbkp61UDYVzbMWyqai4UIZRCO2+vqkfp8yKTbRdwaKhfGdgfrVoaR+dSirP8We1Z9iz7s7xzgDHjZHanD7Lf2K0PCwOUTDhTKIhofNIRoeNodoeNgcoSlcKINonrVQNuzri/p9yqL+FPvt95bPz0D96lBRvzp0+63dwbfz/uMQShhk4NN5N6dPlxl78Yi/Ko+/6Y7/9tuqZ8fvlccflMcflccvyuNPyuPPyuNXXn+r8vpbNdXfSy92xN801d9e/Jrqby9+TfW3F//u9beE42pDXyR+j3/3+juKf/f6O4p/9/o7in/3+lvjOcmi5uvnt7NImY9AUv1e6drulXr0l9q9Un+O37vdK/Uo/t0r9SB+r5y/185/d1Maxa/blLwof/+L8ve/KH//i/L3//0rFSXmM/7WyiD+0upxeq46/+VvrXYe/nrWu3CJu/UCkTNsLxKuD7/JNJLpk7l/dUUNGU8ygEwgGUAmkgwgIyQDyCSSAWQyyQAyhWQAGTowIkMH7pMJjg6MyNCBERk6MCJDB0ZkhGQAGTowIkMHRmTowIgMHRiRoQMDMp4OjMjQgREZOjAiQwdGZIRkABk6MCJDB0Zk6MCIDB0YkaEDAzKBDozI0IERGTowIkMHRmSEZAAZOjAiQwdGZOjAiAwdGJGhAwMykQ6MyNCBERk6MCJDB0ZkhGQAGTowIkMHRmTowIgMHRiRoQMDMkIHRmTowIgMHRiRoQMjMkIygAwdGJGhAyMydGBEhg6MyNCBAZlEB0Zk6MCIDB0YkaEDIzJCMoAMHRiRoQMjMnRgRIYOjMjQgQGZTAdGZOjAiAwdGJGhAyMyQjKADB0YkaEDIzJ0YESGDozI0IEBmUIHRmTowIgMHRiRoQMjMkIygAwdGJGhAyMydGBEhg6MyNCBAZlKB0Zk6MCIDB0YkaEDIzJCMoAMHRiRoQMjMnRgRIYOjMjQgQEZzomDZOjAiAwdGJGhAyMyQjKADB0YkaEDIzJ0YESGDozI0IH7ZCLnxEEydGBEhg6MyNCBERkhGUCGDozI0IERGTowIkMHRmTowIAM58RBMnRgRIYOjMjQgREZIRlAhg6MyNCBERk6MCJDB0Zk6MCADOfEQTJ0YESGDozI0IERGSEZQIYOjMjQgREZOjAiQwdGZOjAgAznxEEydGBEhg6MyNCBERkhGUCGDozI0IERGTowIkMHRmTowIAM58RBMnRgRIYOjMjQgREZIRlAhg6MyNCBERk6MCJDB0Zk6MCADOfEQTJ0YESGDozI0IERGSEZQIYOjMjQgREZOjAiQwdGZOjAgAznxEEydGBEhg6MyNCBERkhGUCGDozI0IERGTowIkMHRmTowIAM58RBMnRgRIYOjMjQgREZIRlAhg6MyNCBERk6MCJDB0Zk6MCADOfEQTJ0YESGDozI0IERGSEZQIYOjMjQgREZOjAiQwdGZOjAgAznxEEydGBEhg6MyNCBERkhGUCGDozI0IERGTowIkMHRmTowH0ywjlxkAwdGJGhAyMydGBERkgGkKEDIzJ0YESGDozI0IERGTowIMM5cZAMHRiRoQMjMnRgREZIBpChAyMydGBEhg6MyNCBERk6MCDDOXGQDB0YkaEDIzJ0YERGSAaQoQMjMnRgRIYOjMjQgREZOjAgwzlxkAwdGJGhAyMydGBERkgGkKEDIzJ0YESGDozI0IERGTowIMM5cZAMHRiRoQMjMnRgREZIBpChAyMydGBEhg6MyNCBERk6MCDDOXGQDB0YkaEDIzJ0YERGSAaQoQMjMnRgRIYOjMjQgREZOjAgwzlxkAwdGJGhAyMydGBERkgGkKEDIzJ0YESGDozI0IERGTowIMM5cZAMHRiRoQMjMnRgREZIBpChAyMydGBEhg6MyNCBERk6MCDDOXGQDB0YkaEDIzJ0YERGSAaQoQMjMnRgRIYOjMjQgREZOjAgwzlxkAwdGJGhAyMydGBERkgGkKEDIzJ0YESGDozI0IERGTpwn0zinDhIhg6MyNCBERk6MCIjJAPI0IERGTowIkMHRmTowIgMHRiQ4Zw4SIYOjMjQgREZOjAiI3uTqd75g4y/xNIl44Or52uHdn34ne3mXvtn2WZ/POxzSJ1sN3fVydlu7p+Ts93cKSdnu7knzs129/lok7Pd3OcmZ7u5o03OdnPvmpytmMrWlEvtPhdscramXGr3+V2TszXlUrvP2ZqcrSmX2n0e1uRsTbnU7nOrJmdryqV2ny81OVtTLrX7HKjJ2Zpyqd3nNU3O1pRL7T5XaXK2plxq9/lHk7M15VKcU/Q/YGebc4ogGZ5HQ2R4Hg2Q4ZwiSIbn0RAZnkdDZHgeDZERkgFk+JsMRIYOjMjQgREZOjAiQwcGZDinCJKhAyMydGBEhg6MyAjJADJ0YESGDozI0IERGTowIkMHBmQ4pwiSoQMjMnRgRIYOjMgIyQAydGBEhg6MyNCBERk6MCJDBwZkOKcIkqEDIzJ0YESGDozICMkAMnRgRIYOjMjQgREZOjAiQwcGZDinCJKhAyMydGBEhg6MyAjJADJ0YESGDozI0IERGTowIkMH7pPJnFMEydCBERk6MCJDB0ZkhGQAGTowIkMHRmTowIgMHRiRoQMDMpxTBMnQgREZOjAiQwdGZIRkABk6MCJDB0Zk6MCIDB0YkaEDAzK7z2taSIYOjMjQgREZOjAiIyQDyNCBERk6MCJDB0Zk6MCIDB0YkNl9ztZCMnRgRIYOjMjQgREZIRlAhg6MyNCBERk6MCJDB0Zk6MCAzO7z0RaSoQMjMnRgRIYOjMgIyQAydGBEhg6MyNCBERk6MCJDBwZkOCcOkqEDIzJ0YESGDozICMkAMnRgRIYOjMjQgREZOjAiQwcGZDgnDpKhAyMydGBEhg6MyAjJADJ0YESGDozI0IERGTowIkMHBmQ4Jw6SoQMjMnRgRIYOjMgIyQAydGBEhg6MyNCBERk6MCJDBwZkOCcOkqEDIzJ0YESGDozICMkAMnRgRIYOjMjQgREZOjAiQwcGZDgnDpKhAyMydGBEhg6MyAjJADJ0YESGDozI0IERGTowIkMH7pMpnBMHydCBERk6MCJDB0ZkhGQAGTowIkMHRmTowIgMHRiRoQMDMpwTB8nQgREZOjAiQwdGZIRkABk6MCJDB0Zk6MCIDB0YkaEDAzKcEwfJ0IERGTowIkMHRmSEZAAZOjAiQwdGZOjAiAwdGJGhAwMynBMHydCBERk6MCJDB0ZkhGQAGTowIkMHRmTowIgMHRiRoQMDMpwTB8nQgREZOjAiQwdGZIRkABk6MCJDB0Zk6MCIDB0YkaEDAzKcEwfJ0IERGTowIkMHRmSEZAAZOjAiQwdGZOjAiAwdGJGhAwMynBMHydCBERk6MCJDB0ZkhGQAGTowIkMHRmTowIgMHRiRoQMDMpwTB8nQgREZOjAiQwdGZIRkABk6MCJDB0Zk6MCIDB0YkaEDAzKcEwfJ0IERGTowIkMHRmSEZAAZOjAiQwdGZOjAiAwdGJGhAwMynBMHydCBERk6MCJDB0ZkhGQAGTowIkMHRmTowIgMHRiRoQP3yVTOiYNk6MCIDB0YkaEDIzJCMoAMHRiRoQMjMnRgRIYOjMjQgQEZzomDZOjAiAwdGJGhAyMyQjKADB0YkaEDIzJ0YESGDozI0IEBGc6Jg2TowIgMHRiRoQMjMkIygAwdGJGhAyMydGBEhg6MyNCBARnOiYNk6MCIDB0YkaEDIzJCMoAMHRiRoQMjMnRgRIYOjMjQgQEZzomDZOjAiAwdGJGhAyMyQjKADB0YkaEDIzJ0YESGDozI0IEBGc6Jg2TowIgMHRiRoQMjMkIygAwdGJGhAyMydGBEhg6MyNCBARnOiYNk6MCIDB0YkaEDIzJCMoAMHRiRoQMjMnRgRIYOjMjQgQEZzomDZDZ34OqdP8j4SyxdMj64er52aNeH39ne7bXR+SP81z/nMMg2y/HiObvz2XhEH1VHL6qjT6qjz6qjL6qjr6qjb5qjv3021tzoveroVdfaqqfWlvw9ej21the9nlrbi15Pre1Fr6fW9qLXU2t70W9ea0uI76fLJZIj+rZ5rR1Ev3mtHUS/ea0dRL95rR1Ev3mtHUS/ea0dRL95rR1Ev3mtHUS/ea0dRK+51janudY2p7nWNqe51janudY2p7nWNqe51janudY2p7nWNqe51janutZ61bXWq661XnWt9apr7e133M+NXnWt9aprrVdda73qWutV19qgutYG1bU2qK61QXWtvf0u7bnRq661QXWtDaprbVBda+Pu3/dyHBQul2fP6O//vq/xjN4XP4jep+yOx1OR7/FH5fGL8viT8viz8viL8vir8vib7vjFKY/fK49fef0V5fX39nsrZ8evvP6Kpvrbvtu/aKq/vfg11d9e/Jrqbyf+tHv9LeH8MWWR+D3+3evvKP7d6+8o/t3r7yj+3etvjeF4vObr5/f7sykfgaT6vdKl3Sv1vEx3r+nzMt29+s/LdHdPGH3P7O4Jg/izck/Iyj3h9juKYkpf8edQR/E7X8+PuguXG0G6d2REycerR6lfwYjr7SDkI8vqLrsN7UBTnoUmndeHxOTzFc0732os32Yr39uvCVqdrzeWbzCWbzSWrxjLNxnL92EqNszXmF+V7f3qFcFXvsXdp9plexX7MzSjt0LdXsUm57u9ik3Od3sVm5zv9io2OV8xlu/2KjY53+1VbHK+26vY5HwfpmLDfI35Vdver9x5V9or3xo+5/vaZTjybVnS54dfEcrx0q9YPnv5zNu2W9ve8h5JfXvXfCT17Y33kdSF1BdQ397+H0l9+x7kkdS374QeSX37fuyR1LfvCp9HXZxjb7qCOnvTFdTZm66gzt50BXUh9QXU2ZuuoG66N03nS/tS7qRuujddRt10b7qMuunedBV1b7o3XUbddG+6jLrp3nQZddO96TLqQuoLqJvuTZdRZ2+6gjp70xXU2ZuuoM7edAH1wN50BXX2piuoszddQZ37pr+o37qXdP90EFJ/Uee+6QrqPNO7gjrP9K6gzjO9K6jzTO8C6pFneldQ55neFdR5pncFdfamK6gLqS+gzt50BXX2piuoszddQZ296Qrq3Df9Rf3WXQ3hvukK6tw3XUGd+6YrqPNM7wrqQuoLqPNM7wrqPNO7gjrP9K6gzjO9K6izN11APbE3XUGdvekK6uxNV1Bnb7qCupD6AursTVdQf1hvWs/ZCq2m3x5+5/uwrrCmduZ7GWPWfTi3g03JX++xFg40D2vdZqJ5WH/1d2iq99/R5Ic1QTPRPKxT+Us0KXXQPKydmInmYc7/l2ha66ARokFoHmbPf4emSeygeZriTkRDG/732dxBQxuGaGjDv16584kq1GHMxrAPe3dZ4QnSgWPYiMdwDDvxb3ByR/2KEA6GY9iLr3CC732sDJvxGI5hN/4NTup9rAzb8RiOYT++womu87GqhgV5DIeG/CsUqR04NOQPcGjIv0LpLVhUIRwMx7Ihiy/HS0vtfawsG/IQjmVDvsBJsbPYVS0b8hCOZUO+wimdj1WzbMhDOJYN+QIn9xbYm2VDHsKxbMhXOLn3sRLCwXBoyP++dPGhA4eG/AEODfkXnOQ6cGjIH+BYNuRS/fHSvx3if8N5/b8JB8OxbMhXOK104Fg25CEcy4Z8gdOk97ESwsFwLBvyFU7tfawsG/IQjmVD/oITXOx9rCwb8hAODfkXnPJ9U897GvIHODTkf9P0nWNv/mmD5efCud2Qq5xn6mMLZQjH1/AF53I7QDffKPlAH+UCp3vtQMlHltV9v0jA3z+k/b+LJp0XCcTkf7tn+p1vMpZvNpZvMZZvNZZvs5Xv/QOoF+frjeUbjOX7MBUb5ivG8t3er14RfOVb3H2qHbZXsT9DM3wrbK9ik/PdXsUm57u9is3NN26vYpPz3V7FJue7vYpNznd7FZucrxjL92EqNszXmF/F7f3qgfMEfdze8h5JfXvXfCJ12d54H0l9e+9+JPXt7f+R1LfvQR5JXUh9AfXt+7FHUt++K3wkdfamK6izN11Bnb3pAuqJvekK6uxNV1Bnb7qCuunedNFkO3//FEdSf1E33Zsuo266N11G3XRvuoy66d50GXXTvekq6tl0b7qMuunedBl1073pMursTVdQF1JfQJ296Qrq7E1XUGdvuoI6e9MV1NmbLqBeuG/6i/qte0mF+6YrqHPfdAV1nuldQV1IfQF1nuldQZ1neldQ55neFdR5pncFdZ7pXUC9sjddQZ296Qrq7E1XUGdvuoK6kPoC6uxNV1Dnvukv6rfualTum66gzn3TFdS5b7qAeuOZ3hXUeaZ3BXWe6V1BnWd6V1AXUl9AnWd6V1Bnb7qCOnvTFdTZm66gzt70furBsTddQZ296Qrq7E1XUH9Yb1rP2Qqtpt8efucrD8v3D8Yp53ZEUvJXHMcw5eAe1rrNRPOw/urv0FTvO2ge1gTNRPOwTuUv0aTUQfOwdmIiGv8w5/9LNK110DxMzGeieZg9/x2aJrGD5mmKOxGNEM0//zp30NCGIRra8K9X7n2iqMOYjWEf9u6ywhOkA8ewEQ/hBMNO/Buc3FG/YNiKx3AMe/EVzkv1OnAMm/EYjhDOv3BS72Nl2I7HcAz78RVOdL2PlWFBHsOhIf8KRWoHDg0Zw4k05F+h9BYsIg35AxzLhiy+HC8ttfexsmzIQzhCOP+8dIqdxa5o2ZCHcCwb8hVO6X2sLBvyEI5lQ77Ayb0F9mjZkEdwxLIhX+HkzsdKLBvyEA4N+d+XLj504NCQP8ARwvkXTnIdODTkD3AsG3Kp/njp3w7xn3AsG/IQjmVDvsJpnYP8YtmQR3CSZUO+wGnS+Vgly4Y8hGPZkK9wau9jZdmQh3CEcP5J08Xex8qyIQ/h0JB/wSmdTb1EQ/4Ah4b8b5q+d+ztaYPlp8KZMf+9uvfD6fW9NoKTYjoe90mqDODkGo5Qcrvcjlyk9+Je8tddyinUK5x3vv7ufJM//7gp/Ue+75jChjHFDWOSu2PKNZ4xvf7T0Qf5tUtzLrtffgjbfa9mOU+x5FTaz9/YaXc46bI+6D/n+086xxduvCwmdh9Or0WQI+7UJpDMTyLpm/siOXr49cE7Hi4h/Jxk2Z2k818kR/k2V04JS+XncOrNcHKK7evr6T/gvGNq+8VU3IYx3W0R+fJLxFxSHLyxi4Tz9hdpA6H0Lp+fAnf5/nyJ6zvbu/0kl68PT26+jRzx1Od8aY7iEX1UHb2ojj6pjj6rjr6ojr7uHX05Vb9cIjmjb5qjr0519F519JvX2kH0m9faQfSb19pB9JvX2kH0m9faQfSb19pB9KprbVVda5vqWttU19qmutY21bV2xiybhdGrrrVNda1tqmttU11rm+ZaG53mWhud5lobneZaG53mWhud5lobneZaG53mWhud5lobneZaG53qWutV11qvutZ61bXWq661M+4fXxi96lrrVddar7rWetW11quutUF1rQ2qa21QXWuD6lo74z7jhdGrrrVBda0NqmttUF1rg+paG1XX2qi61kbVtTaqrrUzbkZdGL3qWhtV19qoutZG1bU2qq61orrWiupaK6prraiutTPuWFwYvepaK6prraiutaK61orqWptU19qkutYm1bU2qa61M25rWxi96lqbVNfapLrWJtW1NqmutVl1rc2qa21WXWuz6lp7+/1dc6NXXWuz6lqbVdfarLrWZtW1tqiutUV1rd393qhB9Kpr7e73Rg2iV11rd783ahC96lqr+t6oqPreqKj63qio+t6oqPreqKj63qio+t6oqPreqKj63qio+t6oqPreqKj63qio+t6oqPreqKj63qio+t6oqPreqKj63qio+t6oqPreqKj63qio+t4oUX1vlKi+N0pU3xslqu+NEqe51orqe6NE9b1RovreKFF9b5SovjdKVN8bJarvjRLV90aJ6nujRPW9UaL63ihRfW+UqL43SlTfGyWq740S1fdGiep7o0T1vVGi+t4oUX1vlKi+N0pU3xslqu+NEtX3Ronqe6NE9b1RovreKFF9b5SovjdKVN8bJarvjRLV90aJ6nujRPW9UaL63ihRfW+U3H5vVHHxnC1fXJZB9MH74/Hg49erFzkSCNoTiNoTkPsTKDCBd0xpw5juLpAlRnfGlH0Z/KGzS8f3Snb169Vb7TxczzdFK19hSztyLbvnWtuRqy/pc67x9fT74Zhj+Pywz/6Io9avKE4wlWD6YBrBdMHcfleWGjCeYPpgAsH0wUSC6YMRgumDSQTTB7O9zK4CQ/MFYB5lviUc7V4s8huYd7aP0tkajodjzYPOMNeajlduPg/eM16+FrN8CvU7yfwo/11K8lHCvJTkowx7KclHKflSkkKSk0g+SvqXknxUlzByvvwo9V/6vnlUr7CUJPuQSSQL+5BZJNmHzCLJPmQWSfYhs0iKJecr7BVmvW8e1SssJck+ZBZJ9iGzSLIPmUSysg+ZRZJ9yCySj+pDRs5X2SvMet8ISU4iyT5kFkn2IbNIsg+ZRZJ9yCyS7EMmkWyP6kNGztfYK8x633DPYhZJ9iGzSApJTiLJPmQWSfYhs0iyD5lF8vY+pKR8kmypjkieFlcv92K04ycotw+GqL6cb4Qawyh8Sen4uY2U8GWhRf7qz5VuHyVRReKZbwp+kK9v7vh7BZfKz/O9W9Lr6/N65ptT59aHdPtIif9PTHGrmP73f/8P","file_map":{"2":{"source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u16 { fn eq(self, other: u16) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i16 { fn eq(self, other: i16) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, N> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<N> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, N> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n","path":"std/cmp.nr"},"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"27":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [u8; N], _state_length: u32) -> [u8; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n","path":"std/hash.nr"},"40":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\n\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 {\n            lo: lo as Field,\n            hi: hi as Field,\n        }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo,hi)\n    }\n\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 {\n            lo,\n            hi,\n        }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0;16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0;16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<N>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1; \n        if N <= 18 {\n            for i in 0..N-2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N-1 {           \n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 {\n            lo: lo as Field,\n            hi: hi as Field,\n        }\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            if ascii < 71 {\n                ascii - 55\n            } else {\n                ascii - 87\n            }\n            \n        } as Field\n    }\n\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if self < b {\n            (U128::from_u64s_le(0, 0), self)\n        } else {\n            //TODO check if this can overflow?\n            let (q,r) = self.unconstrained_div(b * U128::from_u64s_le(2,0));\n            let q_mul_2 = q * U128::from_u64s_le(2,0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::from_u64s_le(1,0), r - b)\n            }\n\n        }  \n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f-lo) / pow64;\n        U128 {\n            lo,\n            hi,\n        }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo+self.hi*pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64))as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift left with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift right with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n","path":"std/uint128.nr"},"44":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    traits::{Empty, Serialize, Deserialize},\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext {\n            public_key: self.public_key,\n            secret_key: self.secret_key,\n            contract_address,\n        }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"49":{"source":"use crate::abis::function_selector::FunctionSelector;\nuse crate::constants::GENERATOR_INDEX__FUNCTION_LEAF;\nuse crate::traits::Hash;\n\nstruct FunctionLeafPreimage {\n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    vk_hash : Field,\n    acir_hash : Field\n}\n\nimpl Hash for FunctionLeafPreimage {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.vk_hash,\n            self.acir_hash\n        ], GENERATOR_INDEX__FUNCTION_LEAF)\n    }\n}\n\nstruct ContractClassFunctionLeafPreimage {\n    selector : FunctionSelector,\n    vk_hash : Field,\n}\n\nimpl Hash for ContractClassFunctionLeafPreimage {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.selector.to_field(),\n            self.vk_hash,\n        ], GENERATOR_INDEX__FUNCTION_LEAF)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_leaf_preimage.nr"},"50":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"58":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"62":{"source":"use crate::address::AztecAddress;\nuse dep::std::cmp::Eq;\nuse crate::traits::Empty;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, caller_context: CallerContext) -> bool {\n        caller_context.msg_sender.eq(self.msg_sender)\n            & caller_context.storage_contract_address.eq(self.storage_contract_address)\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nstruct CallRequest {\n    hash: Field,\n    caller_contract_address: AztecAddress,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Eq for CallRequest {\n    fn eq(self, call_request: CallRequest) -> bool {\n        (call_request.hash == self.hash)\n            & (call_request.caller_contract_address.eq(self.caller_contract_address))\n            & (call_request.caller_context.eq(self.caller_context))\n            & (call_request.start_side_effect_counter == self.start_side_effect_counter)\n            & (call_request.end_side_effect_counter == self.end_side_effect_counter)\n    }\n}\n\nimpl Empty for CallRequest {\n    fn empty() -> Self {\n        CallRequest {\n            hash: 0,\n            caller_contract_address: AztecAddress::zero(),\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl CallRequest {\n    pub fn is_empty(self) -> bool {\n        self.hash == 0\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_request.nr"},"69":{"source":"use crate::constants::GENERATOR_INDEX__TX_REQUEST;\nuse crate::address::AztecAddress;\nuse crate::transaction::context::TxContext;\nuse crate::abis::function_data::FunctionData;\nuse crate::traits::Hash;\n\nstruct TxRequest {\n    origin : AztecAddress,\n    args_hash : Field,\n    tx_context : TxContext,\n    function_data : FunctionData\n}\n\nimpl Hash for TxRequest {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.origin.to_field(),\n            self.function_data.hash(),\n            self.args_hash,\n            self.tx_context.hash(),\n        ], GENERATOR_INDEX__TX_REQUEST)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/transaction/request.nr"},"70":{"source":"use crate::constants::GENERATOR_INDEX__TX_CONTEXT;\nuse crate::contrakt::deployment_data::ContractDeploymentData;\nuse crate::traits::Hash;\n\nstruct TxContext {\n    is_fee_payment_tx : bool,\n    is_rebate_payment_tx : bool,\n    is_contract_deployment_tx : bool,\n\n    contract_deployment_data : ContractDeploymentData,\n\n    chain_id : Field,\n    version : Field,\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.is_fee_payment_tx as Field,\n            self.is_rebate_payment_tx as Field,\n            self.is_contract_deployment_tx as Field,\n            self.contract_deployment_data.hash(),\n            self.chain_id,\n            self.version,\n        ], GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/transaction/context.nr"},"74":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"90":{"source":"use dep::std::array;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, is_empty};\n\npub fn array_to_bounded_vec<T, N>(array: [T; N]) -> BoundedVec<T, N> where T: Empty + Eq {\n    let mut len = 0;\n    for elem in array {\n        if !is_empty(elem) {\n            len += 1;\n        }\n    }\n\n    BoundedVec { storage: array, len, empty_value: T::empty() }\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, N>(array: [T; N]) where T: Empty + Eq {\n    let array_length = array.len();\n\n    let mut first_zero_pos = array_length;\n    let mut last_non_zero_pos = 0;\n\n    for i in 0..array_length {\n        let is_empty = is_empty(array[i]);\n        if !is_empty {\n            last_non_zero_pos = i;\n        } else if is_empty & (first_zero_pos == array_length) {\n            first_zero_pos = i;\n        }\n    }\n    assert((last_non_zero_pos as u64) <= (first_zero_pos as u64), \"invalid array\");\n}\n\n// Helper method to determine the number of non-zero/empty elements in a validated array (ie, validate_array(array) \n// should be true).\npub fn array_length<T, N>(array: [T; N]) -> Field where T: Empty + Eq {\n    let mut length = 0;\n    let mut end = false;\n    for elem in array {\n        end |= is_empty(elem);\n        if !end {\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_eq<T, N, S>(array: [T; N], expected: [T; S]) -> bool where T: Empty + Eq {\n    let mut eq = array_length(array) == S;\n\n    for i in 0..S {\n        eq &= array[i].eq(expected[i]);\n    }\n\n    eq\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array = [];\n    validate_array(valid_array);\n\n    let valid_array = [0];\n    validate_array(valid_array);\n\n    let valid_array = [1, 2, 3];\n    validate_array(valid_array);\n\n    let valid_array = [1, 2, 3, 0];\n    validate_array(valid_array);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    validate_array(valid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid() {\n    let invalid_array = [0, 1];\n    validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([]), 0);\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n    assert_eq(array_length([123, 0, 456]), 1);\n    assert_eq(array_length([0, 123, 0, 456]), 0);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/arrays.nr"},"92":{"source":"// This is a quick struct made to pack 32 bytes into 4 u64s\n// and then pack those into two u128s.\n//\n// Creating a u256 was made for convenience.\n//\n// This is needed because in the cpp code, we have accumulate_sha256\n// which returns 2 field elements, one for the high and low limb.\nstruct U256 {\n    // This is in big-endian order, typically because\n    // sha256 is usually in big endian order.\n    // Note: this means that inner[0] has the most significant 64 bits.\n    inner : [u64; 4]\n}\n\nimpl U256 {\n    pub fn from_bytes32(bytes : [u8;32]) -> U256 {\n        // We use addition rather than a bitwise OR as the bitshifts ensure that none of the bytes overlap each other.\n        let high_0 = ((bytes[0] as u64) << 56)\n                + ((bytes[1] as u64) << 48)\n                + ((bytes[2] as u64) << 40)\n                + ((bytes[3] as u64) << 32)\n                + ((bytes[4] as u64) << 24)\n                + ((bytes[5] as u64) << 16)\n                + ((bytes[6] as u64) << 8)\n                +  (bytes[7] as u64);\n        \n        let high_1 = ((bytes[8] as u64) << 56)\n                + ((bytes[9] as u64) << 48)\n                + ((bytes[10] as u64) << 40)\n                + ((bytes[11] as u64) << 32)\n                + ((bytes[12] as u64) << 24)\n                + ((bytes[13] as u64) << 16)\n                + ((bytes[14] as u64) << 8)\n                +  (bytes[15] as u64);\n        \n        let low_0 = ((bytes[16] as u64) << 56)\n                + ((bytes[17] as u64) << 48)\n                + ((bytes[18] as u64) << 40)\n                + ((bytes[19] as u64) << 32)\n                + ((bytes[20] as u64) << 24)\n                + ((bytes[21] as u64) << 16)\n                + ((bytes[22] as u64) << 8)\n                +  (bytes[23] as u64);\n        \n        let low_1 = ((bytes[24] as u64) << 56)\n                + ((bytes[25] as u64) << 48)\n                + ((bytes[26] as u64) << 40)\n                + ((bytes[27] as u64) << 32)\n                + ((bytes[28] as u64) << 24)\n                + ((bytes[29] as u64) << 16)\n                + ((bytes[30] as u64) << 8)\n                +  (bytes[31] as u64);\n\n        U256{inner : [high_0, high_1, low_0, low_1]}\n    }\n\n    // We cannot represent u128 in the type system\n    // so we cannot return a u128 type.\n    // \n    // This as conversion assumes that Field can store 128 bits of information\n    // or else the conversion is lossy.\n    //\n    // TODO: Add a test for this.\n    pub fn to_u128_limbs(self) -> [Field;2] {\n        let two_pow_64 = 2.pow_32(64);\n\n        let high = (self.inner[0] as Field) * two_pow_64 + self.inner[1] as Field;\n        let low  = (self.inner[2] as Field) * two_pow_64 + self.inner[3] as Field;\n        \n        [high,low]\n    }\n}\n\n#[test]\nfn smoke_u256_from_bytes32_all_zeroes() {\n    let input = [0; 32];\n    let result = U256::from_bytes32(input);\n    assert(result.inner[0] == 0);\n    assert(result.inner[1] == 0);\n    assert(result.inner[2] == 0);\n    assert(result.inner[3] == 0);\n}\n\n#[test]\nfn smoke_u256_from_bytes32_one_zero_zero_zero() {\n    // We want to output [1,0,0,0]\n    let input = [\n        0, 0, 0, 0, 0, 0, 0, 1,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let result = U256::from_bytes32(input);\n\n    assert(result.inner[0] == 1);\n    assert(result.inner[1] == 0);\n    assert(result.inner[2] == 0);\n    assert(result.inner[3] == 0);\n}\n\n#[test]\nfn smoke_u256_from_bytes32_test() {\n    /*\n    input:  [   0xAA, 0xBB, 0xCC, 0xDD, \n                0xEE, 0xFF, 0x00, 0x11, \n                0x22, 0x33, 0x44, 0x55, \n                0x66, 0x77, 0x88, 0x99, \n                0x11, 0x22, 0x33, 0x44, \n                0x55, 0x66, 0x77, 0x88, \n                0x99, 0xAA, 0xBB, 0xCC, \n                0xDD, 0xEE, 0xFF, 0x00\n            ]\n    output: inner[0]: 0xAABBCCDDEEFF0011\n            inner[1]: 0x2233445566778899\n            inner[2]: 0x1122334455667788\n            inner[3]: 0x99AABBCCDDEEFF00\n    */\n    let input : [u8;32] = [\n        0xAA, 0xBB, 0xCC, 0xDD,\n        0xEE, 0xFF, 0x00, 0x11,\n        0x22, 0x33, 0x44, 0x55,\n        0x66, 0x77, 0x88, 0x99,\n        0x11, 0x22, 0x33, 0x44,\n        0x55, 0x66, 0x77, 0x88,\n        0x99, 0xAA, 0xBB, 0xCC,\n        0xDD, 0xEE, 0xFF, 0x00\n    ];\n    let result = U256::from_bytes32(input);\n\n    assert(result.inner[0] == 0xAABBCCDDEEFF0011);\n    assert(result.inner[1] == 0x2233445566778899);\n    assert(result.inner[2] == 0x1122334455667788);\n    assert(result.inner[3] == 0x99AABBCCDDEEFF00);\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/uint256.nr"},"94":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u16 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/traits.nr"},"98":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"99":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::{\n    GENERATOR_INDEX__CONTRACT_LEAF,\n};\nuse crate::traits::Hash;\n\nstruct ContractClassId {\n  inner: Field\n}\n\nimpl Eq for ContractClassId {\n    fn eq(self, other: ContractClassId) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl ContractClassId {\n    pub fn compute(artifact_hash: Field, private_functions_root: Field, public_bytecode_commitment: Field) -> Self {\n        let hash = dep::std::hash::pedersen_hash_with_separator([\n            artifact_hash,\n            private_functions_root,\n            public_bytecode_commitment,\n        ], GENERATOR_INDEX__CONTRACT_LEAF); // TODO(@spalladino): Update generator index\n        \n        ContractClassId::from_field(hash)\n    }\n\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n\n    pub fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] }\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contract_class.nr"},"101":{"source":"use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            x: 0,\n            y: 0,\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/grumpkin_point.nr"},"104":{"source":"use dep::std::{\n    cmp::Eq,\n    grumpkin_scalar::GrumpkinScalar,\n    grumpkin_scalar_mul::grumpkin_fixed_base,\n};\nuse crate::grumpkin_point::GrumpkinPoint;\n\nglobal GRUMPKIN_PRIVATE_KEY_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPrivateKey {\n    high: Field,\n    low: Field,\n}\n\nimpl Eq for GrumpkinPrivateKey {\n    fn eq(self, key: GrumpkinPrivateKey) -> bool {\n        (key.high == self.high) & (key.low == self.low)\n    }\n}\n\nimpl GrumpkinPrivateKey {\n    pub fn new(high: Field, low: Field) -> Self {\n        GrumpkinPrivateKey { high, low }\n    }\n\n    pub fn zero() -> Self {\n        Self {\n            high: 0,\n            low: 0,\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.high == 0) & (self.low == 0)\n    }\n\n    pub fn serialize(self) -> [Field; GRUMPKIN_PRIVATE_KEY_SERIALIZED_LEN] {\n        [self.high, self.low]\n    }\n\n    pub fn derive_public_key(self) -> GrumpkinPoint {\n        let public_key = grumpkin_fixed_base(GrumpkinScalar { high: self.high, low: self.low });\n        GrumpkinPoint { x: public_key[0], y: public_key[1] }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/grumpkin_private_key.nr"},"107":{"source":"use crate::{\n    address::EthAddress,\n    contract_class::ContractClassId,\n    constants::{\n        CONTRACT_DEPLOYMENT_DATA_LENGTH,\n        GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n    },\n    grumpkin_point::GrumpkinPoint,\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"},"111":{"source":"use crate::common;\nuse dep::std::unsafe;\nuse dep::types::{\n    abis::{\n        combined_constant_data::CombinedConstantData,\n        private_kernel::private_call_data::PrivateCallData,\n        kernel_circuit_public_inputs::{KernelCircuitPublicInputs, KernelCircuitPublicInputsBuilder},\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{AztecAddress, PublicKeysHash, compute_initialization_hash},\n    mocked::{Proof, verify_previous_kernel_state},\n    transaction::request::TxRequest,\n    traits::is_empty_array,\n};\n\n// Initialization struct for private inputs to the private kernel\nstruct PrivateKernelInputsInit {\n    tx_request: TxRequest,\n    private_call: PrivateCallData,\n}\n\nimpl PrivateKernelInputsInit {\n    fn initialize_end_values(self, public_inputs: &mut KernelCircuitPublicInputsBuilder) {\n        public_inputs.constants = CombinedConstantData {\n            historical_header: self.private_call.call_stack_item.public_inputs.historical_header,\n            tx_context: self.tx_request.tx_context,\n        };\n    }\n\n    // Confirm that the TxRequest (user's intent) \n    // matches the private call being executed\n    fn validate_this_private_call_against_tx_request(self) {\n        let tx_request = self.tx_request;\n        // Call stack item for the initial call\n        let call_stack_item = self.private_call.call_stack_item;\n        \n        // Checks to ensure that the user's intent matches the initial private call\n        //\n        // We use the word correct to denote whether it matches the user intent.\n        //\n        // Ensure we are calling the correct initial contract\n        let origin_address_matches = tx_request.origin.eq(call_stack_item.contract_address);\n        assert(origin_address_matches, \"origin address does not match call stack items contract address\");\n        //\n        // Ensure we are calling the correct initial function in the contract\n        let entry_point_function_matches = tx_request.function_data.hash() == call_stack_item.function_data.hash();\n        assert(entry_point_function_matches, \"tx_request function_data must match call_stack_item function_data\");\n        //\n        // Ensure we are passing the correct arguments to the function.\n        let args_match = tx_request.args_hash == call_stack_item.public_inputs.args_hash;\n        assert(args_match, \"noir function args passed to tx_request must match args in the call_stack_item\");\n    }\n\n    fn validate_inputs(self) {\n        let call_stack_item = self.private_call.call_stack_item;\n\n        let function_data = call_stack_item.function_data;\n        assert(function_data.is_private, \"Private kernel circuit can only execute a private function\");\n        assert(function_data.is_internal == false, \"Cannot call an internal function directly\");\n\n        let call_context = call_stack_item.public_inputs.call_context;\n        assert(call_context.is_delegate_call == false, \"Users cannot make a delegatecall\");\n        assert(call_context.is_static_call == false, \"Users cannot make a static call\");\n        // The below also prevents delegatecall/staticcall in the base case\n        assert(call_context.storage_contract_address.eq(call_stack_item.contract_address), \"Storage contract address must be that of the called contract\");\n    }\n\n    fn update_end_values(self, public_inputs: &mut KernelCircuitPublicInputsBuilder) {\n        // Since it's the first iteration, we need to push the the tx hash nullifier into the `new_nullifiers` array\n        public_inputs.end.new_nullifiers.push(SideEffectLinkedToNoteHash{\n            value: self.tx_request.hash(),\n            note_hash: 0,\n            counter: 0,\n        });\n\n        // Note that we do not need to nullify the transaction request nonce anymore.\n        // Should an account want to additionally use nonces for replay protection or handling cancellations,\n        // they will be able to do so in the account contract logic:\n        // https://github.com/AztecProtocol/aztec-packages/issues/660\n    }\n\n    pub fn native_private_kernel_circuit_initial(self) -> KernelCircuitPublicInputs {\n        let mut public_inputs: KernelCircuitPublicInputsBuilder = unsafe::zeroed();\n        public_inputs.is_private = true;\n        \n        self.initialize_end_values(&mut public_inputs);\n\n        self.validate_inputs();\n\n        common::validate_arrays(self.private_call.call_stack_item.public_inputs);\n\n        self.validate_this_private_call_against_tx_request();\n\n        common::validate_read_requests(\n            public_inputs.constants.historical_header.state.partial.note_hash_tree.root,\n            self.private_call.call_stack_item.public_inputs.read_requests,\n            self.private_call.read_request_membership_witnesses\n        );\n\n        // TODO(dbanks12): feels like update_end_values should happen after contract logic\n        self.update_end_values(&mut public_inputs);\n        common::update_end_values(self.private_call, &mut public_inputs);\n\n        common::contract_logic(self.private_call,\n                          &mut public_inputs,\n                          self.tx_request.tx_context.contract_deployment_data,\n                          self.tx_request.function_data);\n\n        // TODO(David): What previous kernel proof are we talking about, since this is private-kernel-init\n        let (is_previous_state_valid, updated_aggregation_object) = verify_previous_kernel_state(public_inputs.aggregation_object,self.private_call.proof);\n        assert(is_previous_state_valid);\n\n        public_inputs.aggregation_object = updated_aggregation_object;\n\n        public_inputs.finish()\n    }\n}\n\nmod tests {\n    use crate::private_kernel_init::PrivateKernelInputsInit;\n    use dep::types::constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n    };\n    use dep::types::{\n        abis::{\n            kernel_circuit_public_inputs::KernelCircuitPublicInputs,\n            nullifier_key_validation_request::NullifierKeyValidationRequest,\n            private_kernel::private_call_data::PrivateCallData,\n            side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n        },\n        grumpkin_point::GrumpkinPoint,\n        grumpkin_private_key::GrumpkinPrivateKey,\n        address::{AztecAddress, compute_initialization_hash},\n        hash::{\n            compute_constructor_hash,\n            compute_logs_hash,\n            stdlib_recursion_verification_key_compress_native_vk,\n        },\n        tests::private_call_data_builder::PrivateCallDataBuilder,\n        transaction::request::TxRequest,\n        utils::arrays::array_length,\n    };\n\n    struct PrivateKernelInitInputsBuilder {\n        tx_request: TxRequest,\n        private_call: PrivateCallDataBuilder,\n    }\n\n    impl PrivateKernelInitInputsBuilder {\n        pub fn new() -> Self {\n            PrivateKernelInitInputsBuilder::new_with_config(false)\n        }\n\n        pub fn new_constructor() -> Self {\n            PrivateKernelInitInputsBuilder::new_with_config(true)\n        }\n\n        fn new_with_config(is_constructor: bool) -> Self {\n            let private_call = PrivateCallDataBuilder::new(is_constructor);\n            let tx_request = private_call.build_tx_request();\n\n            PrivateKernelInitInputsBuilder {\n                tx_request,\n                private_call,\n            }\n        }\n\n        pub fn execute(self) -> KernelCircuitPublicInputs {\n            let kernel = PrivateKernelInputsInit {\n                tx_request: self.tx_request,\n                private_call: self.private_call.finish(),\n            };\n\n            kernel.native_private_kernel_circuit_initial()\n        }\n\n        pub fn failed(self) {\n            let _ = self.execute();\n        }\n    }\n\n    pub fn validate_deployed_contract_address(\n        tx_request: TxRequest,\n        private_call: PrivateCallDataBuilder,\n        public_inputs: KernelCircuitPublicInputs\n    ) {\n        assert_eq(public_inputs.end.new_contracts.len(), 1);\n        let cdd = tx_request.tx_context.contract_deployment_data;\n\n        let computed_initialization_hash = compute_initialization_hash(\n            tx_request.function_data.selector.to_field(),\n            tx_request.args_hash\n        );\n        assert(\n            computed_initialization_hash == cdd.initialization_hash, \"initialization hash does not match computed one\"\n        );\n        let contract_address = AztecAddress::compute_from_public_key(\n            cdd.public_key,\n            cdd.contract_class_id,\n            cdd.contract_address_salt,\n            cdd.initialization_hash,\n            cdd.portal_contract_address\n        );\n        assert(public_inputs.end.new_contracts[0].contract_address.eq(contract_address));\n    }\n\n    pub fn validate_no_new_deployed_contract(public_inputs: KernelCircuitPublicInputs) {\n        for new_contract in public_inputs.end.new_contracts {\n            assert(new_contract.is_empty());\n        }\n    }\n\n    #[test]\n    fn deposit() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        // Logs for the private call.\n        let encrypted_logs_hash = [16, 69];\n        let encrypted_log_preimages_length = 100;\n        let unencrypted_logs_hash = [26, 47];\n        let unencrypted_log_preimages_length = 50;\n        builder.private_call.set_encrypted_logs(encrypted_logs_hash, encrypted_log_preimages_length);\n        builder.private_call.set_unencrypted_logs(unencrypted_logs_hash, unencrypted_log_preimages_length);\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n\n        // Check the first nullifier is hash of the signed tx request\n        let tx_hash = builder.tx_request.hash();\n        assert_eq(public_inputs.end.new_nullifiers[0].value, tx_hash);\n\n        // Log preimages length should increase by `(un)encrypted_log_preimages_length` from private input\n        assert_eq(public_inputs.end.encrypted_log_preimages_length, encrypted_log_preimages_length);\n        assert_eq(public_inputs.end.unencrypted_log_preimages_length, unencrypted_log_preimages_length);\n\n        // Logs hashes should be a sha256 hash of a 0 value (the previous log hash) and the `(un)encrypted_logs_hash` from private input\n        let expected_encrypted_logs_hash = compute_logs_hash([0, 0], encrypted_logs_hash);\n        assert_eq(public_inputs.end.encrypted_logs_hash, expected_encrypted_logs_hash);\n\n        let expected_unencrypted_logs_hash = compute_logs_hash([0, 0], unencrypted_logs_hash);\n        assert_eq(public_inputs.end.unencrypted_logs_hash, expected_unencrypted_logs_hash);\n    }\n\n    #[test]\n    fn basic_contract_deployment() {\n        let builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        let public_inputs = builder.execute();\n\n        validate_deployed_contract_address(builder.tx_request, builder.private_call, public_inputs);\n\n        // Since there are no logs, log preimages length should be 0 and both logs hashes should be a sha256 hash of 2 zero\n        // values\n        assert_eq(public_inputs.end.encrypted_log_preimages_length, 0);\n        assert_eq(public_inputs.end.unencrypted_log_preimages_length, 0);\n\n        let expected_logs_hash = compute_logs_hash([0, 0], [0, 0]);\n        assert_eq(public_inputs.end.encrypted_logs_hash, expected_logs_hash);\n        assert_eq(public_inputs.end.unencrypted_logs_hash, expected_logs_hash);\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_return_values() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.public_inputs.return_values.extend_from_array([0, 9123]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_read_requests() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.public_inputs.read_requests.extend_from_array(\n            [\n            SideEffect { value: 0, counter: 0 },\n            SideEffect { value: 9123, counter: 1 }\n        ]\n        );\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_commitments() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.public_inputs.new_commitments.extend_from_array(\n            [\n            SideEffect { value: 0, counter: 0 },\n            SideEffect { value: 9123, counter: 1 }\n        ]\n        );\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_nullifiers() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.public_inputs.new_nullifiers.extend_from_array(\n            [\n            SideEffectLinkedToNoteHash { value: 0, note_hash: 0, counter: 0 },\n            SideEffectLinkedToNoteHash { value: 9123, note_hash: 0, counter: 1 }\n        ]\n        );\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_private_call_stack() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.public_inputs.private_call_stack_hashes.extend_from_array([0, 9123]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_public_call_stack() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.public_inputs.public_call_stack_hashes.extend_from_array([0, 9123]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with = \"invalid array\")]\n    fn input_validation_malformed_arrays_new_l2_to_l1_msgs() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.public_inputs.new_l2_to_l1_msgs.extend_from_array([0, 9123]);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"contract address supplied does not match derived address\")]\n    fn contract_deployment_incorrect_contract_address_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        let random_address = AztecAddress::from_field(27);\n        builder.private_call.public_inputs.call_context.storage_contract_address = random_address;\n        builder.tx_request.origin = random_address;\n        builder.private_call.contract_address = random_address;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"origin address does not match call stack items contract address\")]\n    fn contract_deployment_contract_address_mismatch_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        let random_address = AztecAddress::from_field(27);\n        builder.private_call.public_inputs.call_context.storage_contract_address = random_address;\n        builder.private_call.contract_address = random_address;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"tx_request function_data must match call_stack_item function_data\")]\n    fn contract_deployment_function_data_mismatch_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.tx_request.function_data.selector.inner = 27;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"noir function args passed to tx_request must match args in the call_stack_item\")]\n    fn contract_deployment_args_hash_mismatch_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        // Modify the args hash in tx request.\n        builder.tx_request.args_hash = 29;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"Private kernel circuit can only execute a private function\")]\n    fn private_function_is_private_false_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        // Set is_private in function data to false.\n        builder.private_call.function_data.is_private = false;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"Cannot call an internal function directly\")]\n    fn private_function_is_internal_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        builder.private_call.function_data.is_internal = true;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"Users cannot make a static call\")]\n    fn private_function_static_call_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        // Set is_static_call to true.\n        builder.private_call.public_inputs.call_context.is_static_call = true;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"Users cannot make a delegatecall\")]\n    fn private_function_delegate_call_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        // Set is_delegate_call to true.\n        builder.private_call.public_inputs.call_context.is_delegate_call = true;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"Storage contract address must be that of the called contract\")]\n    fn private_function_incorrect_storage_contract_address_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        // Set the storage_contract_address to a random scalar.\n        builder.private_call.public_inputs.call_context.storage_contract_address = AztecAddress::from_field(356);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_function_leaf_index_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        // Set the leaf index of the function leaf to a wrong value (the correct value + 1).\n        let leaf_index = builder.private_call.function_leaf_membership_witness.leaf_index;\n        builder.private_call.function_leaf_membership_witness.leaf_index = leaf_index + 1;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_function_leaf_sibling_path_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        // Set the first value of the sibling path to a wrong value (the correct value + 1).\n        let sibling_path_0 = builder.private_call.function_leaf_membership_witness.sibling_path[0];\n        builder.private_call.function_leaf_membership_witness.sibling_path[0] = sibling_path_0 + 1;\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_contract_class_preimage_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n        builder.private_call.contract_class_artifact_hash = builder.private_call.contract_class_artifact_hash + 1;\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_partial_address_preimage_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n        builder.private_call.salted_initialization_hash.inner = builder.private_call.salted_initialization_hash.inner + 1;\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"computed contract address does not match expected one\")]\n    fn private_function_incorrect_address_preimage_fails() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n        builder.private_call.public_keys_hash.inner = builder.private_call.public_keys_hash.inner + 1;\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"note hash tree root mismatch\")]\n    fn native_read_request_bad_request() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        // tweak read_request so it gives wrong root when paired with its sibling path\n        let read_request = builder.private_call.public_inputs.read_requests.pop();\n        builder.private_call.public_inputs.read_requests.push(SideEffect { value: read_request.value + 1, counter: read_request.counter });\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"note hash tree root mismatch\")]\n    fn native_read_request_bad_leaf_index() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        // tweak leaf index so it gives wrong root when paired with its request and sibling path\n        let mut read_request_membership_witness = builder.private_call.read_request_membership_witnesses.pop();\n        read_request_membership_witness.leaf_index += 1;\n        builder.private_call.read_request_membership_witnesses.push(read_request_membership_witness);\n\n        builder.failed();\n    }\n\n    #[test(should_fail_with=\"note hash tree root mismatch\")]\n    fn native_read_request_bad_sibling_path() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        // tweak sibling path so it gives wrong root when paired with its request\n        let mut read_request_membership_witness = builder.private_call.read_request_membership_witnesses.pop();\n        read_request_membership_witness.sibling_path[1] += 1;\n        builder.private_call.read_request_membership_witnesses.push(read_request_membership_witness);\n\n        builder.failed();\n    }\n\n    #[test]\n    fn native_no_read_requests_works() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n        // Check the first nullifier is hash of the signed tx request\n        assert_eq(public_inputs.end.new_nullifiers[0].value, builder.tx_request.hash());\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_one_read_requests_works() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_read_requests(1);\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n        // Check the first nullifier is hash of the signed tx request\n        assert_eq(public_inputs.end.new_nullifiers[0].value, builder.tx_request.hash());\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_two_read_requests_works() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_read_requests(2);\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n        // Check the first nullifier is hash of the signed tx request\n        assert_eq(public_inputs.end.new_nullifiers[0].value, builder.tx_request.hash());\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_max_read_requests_works() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_read_requests(MAX_READ_REQUESTS_PER_CALL);\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n        // Check the first nullifier is hash of the signed tx request\n        assert_eq(public_inputs.end.new_nullifiers[0].value, builder.tx_request.hash());\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 0);\n    }\n\n    #[test]\n    fn native_one_transient_read_requests_works() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_transient_read_requests(1);\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n        // Check the first nullifier is hash of the signed tx request\n        assert_eq(public_inputs.end.new_nullifiers[0].value, builder.tx_request.hash());\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 1);\n    }\n\n    #[test]\n    fn native_max_read_requests_one_transient_works() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_transient_read_requests(1);\n        builder.private_call.append_read_requests(MAX_READ_REQUESTS_PER_CALL - 1);\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n        // Check the first nullifier is hash of the signed tx request\n        assert_eq(public_inputs.end.new_nullifiers[0].value, builder.tx_request.hash());\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), 1);\n    }\n\n    #[test]\n    fn native_max_read_requests_all_transient_works() {\n        let mut builder = PrivateKernelInitInputsBuilder::new();\n\n        builder.private_call.append_transient_read_requests(MAX_READ_REQUESTS_PER_CALL);\n\n        let public_inputs = builder.execute();\n\n        validate_no_new_deployed_contract(public_inputs);\n        // Check the first nullifier is hash of the signed tx request\n        assert_eq(public_inputs.end.new_nullifiers[0].value, builder.tx_request.hash());\n\n        // non-transient read requests are NOT forwarded\n        assert_eq(array_length(public_inputs.end.read_requests), MAX_READ_REQUESTS_PER_CALL);\n    }\n\n    #[test]\n    fn propagate_nullifier_key_validation_requests() {\n        let mut builder = PrivateKernelInitInputsBuilder::new_constructor();\n\n        let request = NullifierKeyValidationRequest { public_key: GrumpkinPoint { x: 1, y: 2 }, secret_key: GrumpkinPrivateKey { high: 3, low: 4 } };\n        builder.private_call.public_inputs.nullifier_key_validation_requests.push(request);\n\n        let public_inputs = builder.execute();\n\n        assert_eq(array_length(public_inputs.end.nullifier_key_validation_requests), 1);\n\n        let request_context = public_inputs.end.nullifier_key_validation_requests[0];\n        assert_eq(request_context.public_key, request.public_key);\n        assert_eq(request_context.secret_key, request.secret_key);\n        assert_eq(\n            request_context.contract_address, builder.private_call.public_inputs.call_context.storage_contract_address\n        );\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/private-kernel-lib/src/private_kernel_init.nr"},"112":{"source":"use dep::std;\nuse dep::types::{\n    abis::{\n        call_request::CallRequest,\n        combined_accumulated_data::CombinedAccumulatedData,\n        function_data::FunctionData,\n        kernel_circuit_public_inputs::KernelCircuitPublicInputsBuilder,\n        membership_witness::ReadRequestMembershipWitness,\n        new_contract_data::NewContractData,\n        nullifier_key_validation_request::NullifierKeyValidationRequestContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_kernel::private_call_data::PrivateCallData,\n        previous_kernel_data::PreviousKernelData,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{AztecAddress, EthAddress, PartialAddress, compute_initialization_hash},\n    contract_class::ContractClassId,\n    contrakt::deployment_data::ContractDeploymentData,\n    constants::{\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::{\n        compute_constructor_hash,\n        compute_l2_to_l1_hash,\n        compute_logs_hash,\n        compute_new_contract_address_hash,\n        contract_tree_root_from_siblings,\n        function_tree_root_from_siblings,\n        pedersen_hash,\n        private_functions_root_from_siblings,\n        read_request_root_from_siblings,\n        silo_commitment,\n        silo_nullifier,\n        stdlib_recursion_verification_key_compress_native_vk,\n    },\n    utils::{\n        arrays::{\n            array_length,\n            array_to_bounded_vec,\n            validate_array,\n        },\n    },\n    traits::{is_empty, is_empty_array},\n};\n\npub fn validate_arrays(app_public_inputs: PrivateCircuitPublicInputs) {\n    // Each of the following arrays is expected to be zero-padded.\n    // In addition, some of the following arrays (new_commitments, etc...) are passed\n    // to extend_from_array_to_array() routines which rely on the passed arrays to be well-formed.\n\n    validate_array(app_public_inputs.return_values);\n    validate_array(app_public_inputs.read_requests);\n    validate_array(app_public_inputs.nullifier_key_validation_requests);\n    validate_array(app_public_inputs.new_commitments);\n    validate_array(app_public_inputs.new_nullifiers);\n    validate_array(app_public_inputs.private_call_stack_hashes);\n    validate_array(app_public_inputs.public_call_stack_hashes);\n    validate_array(app_public_inputs.new_l2_to_l1_msgs);\n    // encrypted_logs_hash and unencrypted_logs_hash have their own integrity checks.\n}\n\n// Validate all read requests against the historical note hash tree root.\n// Use their membership witnesses to do so. If the historical root is not yet\n// initialized, initialize it using the first read request here (if present).\n//\n// More info here:\n// - https://discourse.aztec.network/t/to-read-or-not-to-read/178\n// - https://discourse.aztec.network/t/spending-notes-which-havent-yet-been-inserted/180\npub fn validate_read_requests(\n    historical_note_hash_tree_root: Field,\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    read_request_membership_witnesses: [ReadRequestMembershipWitness; MAX_READ_REQUESTS_PER_CALL]\n) {\n    // membership witnesses must resolve to the same note hash tree root\n    // for every request in all kernel iterations\n    for rr_idx in 0..MAX_READ_REQUESTS_PER_CALL {\n        let read_request = read_requests[rr_idx].value;\n        let witness = read_request_membership_witnesses[rr_idx];\n\n        // A pending commitment is the one that is not yet added to note hash tree\n        // A \"transient read\" is when we try to \"read\" a pending commitment within a transaction\n        // between function calls, as opposed to reading the outputs of a previous transaction\n        // which is a \"pending read\".\n        // A transient read is when we try to \"read\" a pending commitment\n        // We determine if it is a transient read depending on the leaf index from the membership witness\n        // Note that the Merkle membership proof would be null and void in case of an transient read\n        // but we use the leaf index as a placeholder to detect a 'pending note read'.\n\n        if (read_request != 0) & (witness.is_transient == false) {\n            let root_for_read_request = read_request_root_from_siblings(read_request, witness.leaf_index, witness.sibling_path);\n            assert(root_for_read_request == historical_note_hash_tree_root, \"note hash tree root mismatch\");\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1354): do we need to enforce\n            // that a non-transient read_request was derived from the proper/current contract address?\n        }\n    }\n}\n\npub fn initialize_end_values(\n    previous_kernel: PreviousKernelData,\n    public_inputs: &mut KernelCircuitPublicInputsBuilder\n) {\n    public_inputs.constants = previous_kernel.public_inputs.constants;\n\n    // Ensure the arrays are the same as previously, before we start pushing more data onto them in other\n    // functions within this circuit:\n    let start = previous_kernel.public_inputs.end;\n\n    public_inputs.end.read_requests = array_to_bounded_vec(start.read_requests);\n    public_inputs.end.nullifier_key_validation_requests = array_to_bounded_vec(start.nullifier_key_validation_requests);\n\n    public_inputs.end.new_commitments = array_to_bounded_vec(start.new_commitments);\n    public_inputs.end.new_nullifiers = array_to_bounded_vec(start.new_nullifiers);\n\n    public_inputs.end.private_call_stack = array_to_bounded_vec(start.private_call_stack);\n    public_inputs.end.public_call_stack = array_to_bounded_vec(start.public_call_stack);\n    public_inputs.end.new_l2_to_l1_msgs = array_to_bounded_vec(start.new_l2_to_l1_msgs);\n\n    public_inputs.end.encrypted_logs_hash = start.encrypted_logs_hash;\n    public_inputs.end.unencrypted_logs_hash = start.unencrypted_logs_hash;\n\n    public_inputs.end.encrypted_log_preimages_length = start.encrypted_log_preimages_length;\n    public_inputs.end.unencrypted_log_preimages_length = start.unencrypted_log_preimages_length;\n\n    public_inputs.end.new_contracts = array_to_bounded_vec(start.new_contracts);\n}\n\nfn perform_static_call_checks(private_call: PrivateCallData) {\n    let public_inputs = private_call.call_stack_item.public_inputs;\n    let is_static_call = public_inputs.call_context.is_static_call;\n    if is_static_call {\n        // No state changes are allowed for static calls:\n        assert(\n            is_empty_array(public_inputs.new_commitments), \"new_commitments must be empty for static calls\"\n        );\n        assert(\n            is_empty_array(public_inputs.new_nullifiers), \"new_nullifiers must be empty for static calls\"\n        );\n    }\n}\n\nfn is_valid_caller(request: CallRequest, private_call: PrivateCallData) -> bool {\n    let call_context = private_call.call_stack_item.public_inputs.call_context;\n    let valid_caller_context = request.caller_context.msg_sender.eq(call_context.msg_sender)\n        & request.caller_context.storage_contract_address.eq(call_context.storage_contract_address);\n    request.caller_contract_address.eq(private_call.call_stack_item.contract_address)\n        & (request.caller_context.is_empty() | valid_caller_context)\n}\n\nfn validate_call_requests<N>(\n    call_requests: BoundedVec<CallRequest, N>,\n    hashes: [Field; N],\n    private_call: PrivateCallData\n) {\n    assert_eq(\n        array_length(hashes), call_requests.len(), \"call requests length does not match the expected length\"\n    );\n    for i in 0..N {\n        let hash = hashes[i];\n        if hash != 0 {\n            let request = call_requests.get_unchecked(i);\n            assert_eq(request.hash, hash, \"call stack hash does not match call request hash\");\n            assert(is_valid_caller(request, private_call), \"invalid caller\");\n        }\n    }\n}\n\npub fn update_end_values(private_call: PrivateCallData, public_inputs: &mut KernelCircuitPublicInputsBuilder) {\n    // If this call is a static call, certain operations are disallowed, such as creating new state.\n    perform_static_call_checks(private_call);\n\n    let private_call_public_inputs = private_call.call_stack_item.public_inputs;\n\n    let read_requests = private_call_public_inputs.read_requests;\n    let read_request_membership_witnesses = private_call.read_request_membership_witnesses;\n\n    let nullifier_key_validation_requests = private_call_public_inputs.nullifier_key_validation_requests;\n\n    let new_commitments = private_call_public_inputs.new_commitments;\n    let new_nullifiers = private_call_public_inputs.new_nullifiers;\n\n    let storage_contract_address = private_call_public_inputs.call_context.storage_contract_address;\n\n    // Transient read requests and witnesses are accumulated in public_inputs.end\n    // We silo the read requests (domain separation per contract address)\n    let mut siloed_read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL> = BoundedVec::new(SideEffect::empty());\n    for i in 0..MAX_READ_REQUESTS_PER_CALL {\n        let read_request = read_requests[i].value;\n        let witness = read_request_membership_witnesses[i];\n        if witness.is_transient & (read_request != 0) { // only forward transient to public inputs\n            siloed_read_requests.push(\n                SideEffect { counter: read_requests[i].counter, value: silo_commitment(storage_contract_address, read_request) }\n            )\n        }\n    }\n    public_inputs.end.read_requests.extend_from_bounded_vec(siloed_read_requests);\n\n    // Nullifier key validation requests.\n    for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL {\n        let request = nullifier_key_validation_requests[i];\n        if !is_empty(request) {\n            public_inputs.end.nullifier_key_validation_requests.push(request.to_context(storage_contract_address));\n        }\n    }\n\n    // Enhance commitments and nullifiers with domain separation whereby domain is the contract.\n    //\n    // nullifiers\n    let mut siloed_new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL> = BoundedVec::new(SideEffectLinkedToNoteHash::empty());\n    for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n        let new_nullifier = new_nullifiers[i];\n        if new_nullifier.value != 0 {\n            let siloed_note_hash = if new_nullifier.note_hash == 0 {\n                0\n            } else {\n                silo_commitment(storage_contract_address, new_nullifier.note_hash)\n            };\n            siloed_new_nullifiers.push(\n                SideEffectLinkedToNoteHash {\n                value: silo_nullifier(storage_contract_address, new_nullifier.value),\n                counter: new_nullifier.counter,\n                note_hash: siloed_note_hash\n            }\n            );\n        }\n    }\n    public_inputs.end.new_nullifiers.extend_from_bounded_vec(siloed_new_nullifiers);\n\n    // commitments\n    let mut siloed_new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL> = BoundedVec::new(SideEffect::empty());\n    for i in 0..MAX_NEW_COMMITMENTS_PER_CALL {\n        let new_commitment = new_commitments[i].value;\n        if new_commitment != 0 {\n            siloed_new_commitments.push(\n                SideEffect { value: silo_commitment(storage_contract_address, new_commitment), counter: new_commitments[i].counter }\n            );\n        }\n    }\n    public_inputs.end.new_commitments.extend_from_bounded_vec(siloed_new_commitments);\n\n    // Call stacks\n    // Private call stack.\n    let private_call_stack = array_to_bounded_vec(private_call.private_call_stack);\n    validate_call_requests(\n        private_call_stack,\n        private_call_public_inputs.private_call_stack_hashes,\n        private_call\n    );\n    public_inputs.end.private_call_stack.extend_from_bounded_vec(private_call_stack);\n    // Public call stack.\n    let public_call_stack = array_to_bounded_vec(private_call.public_call_stack);\n    validate_call_requests(\n        public_call_stack,\n        private_call_public_inputs.public_call_stack_hashes,\n        private_call\n    );\n    public_inputs.end.public_call_stack.extend_from_bounded_vec(public_call_stack);\n\n    // new l2 to l1 messages\n    let portal_contract_address = private_call.portal_contract_address;\n    let new_l2_to_l1_msgs = private_call_public_inputs.new_l2_to_l1_msgs;\n    let mut new_l2_to_l1_msgs_to_insert : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL> = BoundedVec::new(0);\n    for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n        let msg_is_zero = new_l2_to_l1_msgs[i] == 0;\n        if msg_is_zero == false {\n            let new_l2_to_l1_msgs = compute_l2_to_l1_hash(\n                storage_contract_address,\n                private_call_public_inputs.version,\n                portal_contract_address,\n                private_call_public_inputs.chain_id,\n                new_l2_to_l1_msgs[i]\n            );\n            new_l2_to_l1_msgs_to_insert.push(new_l2_to_l1_msgs)\n        }\n    }\n    public_inputs.end.new_l2_to_l1_msgs.extend_from_bounded_vec(new_l2_to_l1_msgs_to_insert);\n\n    // logs hashes\n    // See the following thread if not clear:\n    // https://discourse.aztec.network/t/proposal-forcing-the-sequencer-to-actually-submit-data-to-l1/426\n    let previous_encrypted_logs_hash = public_inputs.end.encrypted_logs_hash;\n    let current_encrypted_logs_hash = private_call_public_inputs.encrypted_logs_hash;\n    public_inputs.end.encrypted_logs_hash = compute_logs_hash(previous_encrypted_logs_hash,current_encrypted_logs_hash);\n    let previous_unencrypted_logs_hash = public_inputs.end.unencrypted_logs_hash;\n    let current_unencrypted_logs_hash = private_call_public_inputs.unencrypted_logs_hash;\n    public_inputs.end.unencrypted_logs_hash = compute_logs_hash(previous_unencrypted_logs_hash,current_unencrypted_logs_hash);\n\n    // Add log preimages lengths from current iteration to accumulated lengths\n    public_inputs.end.encrypted_log_preimages_length = public_inputs.end.encrypted_log_preimages_length +\n                                                           private_call_public_inputs.encrypted_log_preimages_length;\n    public_inputs.end.unencrypted_log_preimages_length = public_inputs.end.unencrypted_log_preimages_length + private_call_public_inputs.unencrypted_log_preimages_length;\n}\n\npub fn contract_logic(\n    private_call: PrivateCallData,\n    public_inputs: &mut KernelCircuitPublicInputsBuilder,\n    contract_dep_data: ContractDeploymentData,\n    function_data: FunctionData\n) {\n    let private_call_public_inputs = private_call.call_stack_item.public_inputs;\n    let portal_contract_address = private_call.portal_contract_address;\n    let contract_address = private_call.call_stack_item.contract_address;\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3062): Why is this using a hash function from the stdlib::recursion namespace\n    let private_call_vk_hash = stdlib_recursion_verification_key_compress_native_vk(private_call.vk);\n\n    let is_contract_deployment = public_inputs.constants.tx_context.is_contract_deployment_tx;\n\n    // input storage contract address must be 0 if its a constructor call and non-zero otherwise\n    if is_contract_deployment {\n        let computed_initialization_hash = compute_initialization_hash(\n            function_data.selector.to_field(),\n            private_call_public_inputs.args_hash\n        );\n\n        assert(\n            computed_initialization_hash == contract_dep_data.initialization_hash, \"initialization hash does not match computed one\"\n        );\n\n        let new_contract_address = AztecAddress::compute_from_public_key(\n            contract_dep_data.public_key,\n            contract_dep_data.contract_class_id,\n            contract_dep_data.contract_address_salt,\n            contract_dep_data.initialization_hash,\n            contract_dep_data.portal_contract_address\n        );\n\n        let new_contract_data = NewContractData {\n            contract_address: new_contract_address,\n            portal_contract_address,\n            contract_class_id: contract_dep_data.contract_class_id\n        };\n        public_inputs.end.new_contracts.push(new_contract_data);\n\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3062) VKs are mocked out for now\n        // assert(contract_dep_data.constructor_vk_hash == private_call_vk_hash, \"constructor_vk_hash doesn't match private_call_vk_hash\");\n\n        assert(\n            contract_address.eq(new_contract_address), \"contract address supplied does not match derived address\"\n        );\n\n        let new_contract_address_nullifier = compute_new_contract_address_hash(new_contract_address);\n\n        public_inputs.end.new_nullifiers.push(\n            SideEffectLinkedToNoteHash { value: new_contract_address_nullifier, note_hash: 0, counter: 1 }\n        );\n    } else {\n        // non-contract deployments must specify contract address being interacted with\n        assert(!contract_address.is_zero(), \"contract address cannot be zero\");\n        // std::println(f\"contract_address={contract_address}\");\n        // std::println(f\"private_call_vk_hash={private_call_vk_hash}\");\n\n        // Recompute the contract class id\n        let computed_private_functions_root = private_functions_root_from_siblings(\n            private_call.call_stack_item.function_data.selector,\n            private_call_vk_hash,\n            private_call.function_leaf_membership_witness.leaf_index,\n            private_call.function_leaf_membership_witness.sibling_path\n        );\n        // std::println(f\"computed_private_functions_root={computed_private_functions_root}\");\n\n        let computed_contract_class_id = ContractClassId::compute(\n            private_call.contract_class_artifact_hash,\n            computed_private_functions_root,\n            private_call.contract_class_public_bytecode_commitment\n        );\n        // std::println(f\"computed_contract_class_id={computed_contract_class_id}\");\n\n        // Recompute contract address using the preimage which includes the class_id\n        let computed_partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            computed_contract_class_id,\n            private_call.salted_initialization_hash\n        );\n        // std::println(f\"computed_partial_address={computed_partial_address}\");\n\n        let computed_address = AztecAddress::compute(private_call.public_keys_hash, computed_partial_address);\n        // std::println(f\"computed_address={computed_address}\");\n\n        assert(\n            computed_address.eq(contract_address), \"computed contract address does not match expected one\"\n        );\n    }\n}\n\npub fn validate_previous_kernel_values(end: CombinedAccumulatedData) {\n    assert(end.new_nullifiers[0].value != 0, \"The 0th nullifier in the accumulated nullifier array is zero\");\n}\n\npub fn validate_call_against_request(private_call: PrivateCallData, request: CallRequest) {\n    let call_stack_item = private_call.call_stack_item;\n    assert(\n        request.hash == call_stack_item.hash(), \"calculated private_call_hash does not match provided private_call_hash at the top of the call stack\"\n    );\n\n    let call_context = call_stack_item.public_inputs.call_context;\n\n    // Ensures that if the function is internal, only the contract itself can call it.\n    if call_stack_item.function_data.is_internal {\n        assert(\n            call_context.msg_sender.eq(call_context.storage_contract_address), \"call is internal but msg_sender is not self\"\n        );\n    }\n\n    if call_context.is_delegate_call {\n        let caller_context = request.caller_context;\n        assert(!caller_context.is_empty(), \"caller context cannot be empty for delegate calls\");\n        assert(\n            call_context.msg_sender.eq(caller_context.msg_sender), \"call stack msg_sender does not match expected msg_sender for delegate calls\"\n        );\n        assert(\n            call_context.storage_contract_address.eq(caller_context.storage_contract_address), \"call stack storage address does not match expected contract address for delegate calls\"\n        );\n        assert(\n            !call_stack_item.contract_address.eq(call_context.storage_contract_address), \"curent contract address must not match storage contract address for delegate calls\"\n        );\n    } else {\n        let caller_contract_address = request.caller_contract_address;\n        assert(\n            call_context.msg_sender.eq(caller_contract_address), \"call stack msg_sender does not match caller contract address\"\n        );\n        assert(\n            call_context.storage_contract_address.eq(call_stack_item.contract_address), \"call stack storage address does not match expected contract address\"\n        );\n    }\n}\n\nfn field_to_grumpkin_private_key(val: Field) -> GrumpkinPrivateKey {\n    let bytes = val.to_be_bytes(32);\n    let mut v = 1;\n    let mut high = 0;\n    let mut low = 0;\n\n    for i in 0..16 {\n        high = high + (bytes[15 - i] as Field) * v;\n        low = low + (bytes[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    GrumpkinPrivateKey { high, low }\n}\n\npub fn compute_siloed_nullifier_secret_key(secret_key: GrumpkinPrivateKey, contract_address: AztecAddress) -> GrumpkinPrivateKey {\n    // TODO: Temporary hack. Should replace it with a secure way to derive the secret key.\n    // Match the way keys are derived in circuits.js/src/keys/index.ts\n    let hash = pedersen_hash(\n        [secret_key.high, secret_key.low, contract_address.to_field()],\n        0\n    );\n    field_to_grumpkin_private_key(hash)\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/private-kernel-lib/src/common.nr"},"113":{"source":"use dep::private_kernel_lib::PrivateKernelInputsInit;\nuse dep::types::KernelCircuitPublicInputs;\n\nfn main(input: PrivateKernelInputsInit) -> distinct pub KernelCircuitPublicInputs {\n    input.native_private_kernel_circuit_initial()\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-packages/yarn-project/noir-protocol-circuits/src/crates/private-kernel-init/src/main.nr"}}}