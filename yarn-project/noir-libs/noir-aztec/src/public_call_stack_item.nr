use crate::abi::CallContext;
use crate::abi::hash_args;
use crate::abi::ContractDeploymentData;
use crate::context::Context;
use crate::abi::PublicCircuitPublicInputs;
use crate::abi::FunctionData;
use crate::types::vec::BoundedVec;
use crate::utils::arr_copy_slice;
use crate::constants_gen::{
    RETURN_VALUES_LENGTH,
    MAX_NEW_COMMITMENTS_PER_CALL,
    MAX_NEW_NULLIFIERS_PER_CALL,
    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,
    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,
    MAX_PUBLIC_DATA_READS_PER_CALL,
    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,
    NUM_FIELDS_PER_SHA256,
    GENERATOR_INDEX__CALL_STACK_ITEM,
};

// oracles
use crate::oracle::enqueue_public_function_call::enqueue_public_function_call_internal;
use crate::oracle::public_call::call_public_function_internal;
use crate::oracle::arguments;

struct PublicCallStackItem {
    contract_address: Field,
    function_data: FunctionData,
    public_inputs: PublicCircuitPublicInputs,
    is_execution_request: bool,
}

impl PublicCallStackItem {
    fn call<ARGS_COUNT>(
        contract_address: Field, 
        function_selector: Field, 
        args: [Field; ARGS_COUNT], 
        mut context: Context) -> (Self, Context) {
        let args_hash = hash_args(args);
        assert(args_hash == arguments::pack_arguments(args));
        PublicCallStackItem::call_with_packed_args(contract_address, function_selector, args_hash, context)
    }

    fn call_with_packed_args(contract_address: Field, function_selector: Field, args_hash: Field, mut context: Context) -> (Self, Context) {
        let fields = enqueue_public_function_call_internal(
            contract_address, 
            function_selector, 
            args_hash
        );
        let item = PublicCallStackItem {
            contract_address: fields[0],
            function_data: FunctionData {
                function_selector: fields[1],
                is_private: fields[2] as bool,
                is_constructor: fields[3] as bool,
            },
            public_inputs: PublicCircuitPublicInputs {
                call_context: CallContext {
                    msg_sender : fields[4],
                    storage_contract_address : fields[5],
                    portal_contract_address : fields[6],
                    
                    is_delegate_call : fields[7] as bool,
                    is_static_call : fields[8] as bool,
                    is_contract_deployment: fields[9] as bool,
                },
                args_hash: fields[10],
                return_values: [0; RETURN_VALUES_LENGTH],
                contract_storage_update_requests: [crate::abi::empty_contract_storage_update_request(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],
                contract_storage_read: [crate::abi::empty_contract_storage_read(); MAX_PUBLIC_DATA_READS_PER_CALL],
                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],
                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],
                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],
                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],
                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],
                unencrypted_log_preimages_length: 0,
                commitment_trees_roots: crate::abi::empty_commitment_trees_roots(),
                historic_public_data_tree_root: 0,
                prover_address: 0,
            },
            is_execution_request: true,
        };

        assert(contract_address == item.contract_address);
        assert(function_selector == item.function_data.function_selector);
        
        assert(args_hash == item.public_inputs.args_hash);

        // Assert that the call context of the enqueued call generated by the oracle matches our request.
        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain
        // the msg_sender in the nested call to be equal to our address, and the execution context address
        // for the nested call to be equal to the address we actually called.
        assert(item.public_inputs.call_context.is_delegate_call == false);
        assert(item.public_inputs.call_context.is_static_call == false);
        assert(item.public_inputs.call_context.is_contract_deployment == false);
        assert(item.public_inputs.call_context.msg_sender == context.inputs.call_context.storage_contract_address);
        assert(item.public_inputs.call_context.storage_contract_address == contract_address);

        context.public_call_stack = context.public_call_stack.push(item.hash());

        (item, context)
    }

    fn hash(self) -> Field {
        dep::std::hash::pedersen_with_separator([
            self.contract_address,
            self.function_data.hash(),
            self.public_inputs.hash(),
        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]
    }
}


fn call_public_function<N>(
    contract_address: Field, 
    function_selector: Field,
    args: [Field; N],
) -> [Field; RETURN_VALUES_LENGTH] {
    let args_hash = hash_args(args);
    assert(args_hash == arguments::pack_arguments(args));
    call_public_function_internal(
        contract_address, 
        function_selector, 
        args_hash,
    )
}

fn call_public_function_no_args(
    contract_address: Field, 
    function_selector: Field,
) -> [Field; RETURN_VALUES_LENGTH] {
    call_public_function_internal(
        contract_address, 
        function_selector, 
        0,
    )
}
