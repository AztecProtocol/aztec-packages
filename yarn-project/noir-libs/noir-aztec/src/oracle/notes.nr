use crate::note::{
    note_header::NoteHeader,
    note_interface::NoteInterface,
};
use crate::utils::arr_copy_slice;

#[oracle(notifyCreatedNote)]
fn notify_created_note_oracle<N>(
    _storage_slot: Field,
    _preimage: [Field; N],
    _inner_note_hash: Field,
) -> Field {}

unconstrained fn notify_created_note<N>(
    storage_slot: Field,
    preimage: [Field; N],
    inner_note_hash: Field,
) -> Field {
    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)
}

#[oracle(notifyNullifiedNote)]
fn notify_nullified_note_oracle<N>(
    _storage_slot: Field,
    _nullifier: Field,
    _preimage: [Field; N],
    _inner_note_hash: Field,
) -> Field {}

unconstrained fn notify_nullified_note<N>(
    storage_slot: Field,
    nullifier: Field,
    preimage: [Field; N],
    inner_note_hash: Field,
) -> Field {
    notify_nullified_note_oracle(storage_slot, nullifier, preimage, inner_note_hash)
}

#[oracle(getNotes)]
fn get_notes_oracle<N, S>(
    _storage_slot: Field,
    _sort_by: [u8; N],
    _sort_order: [u8; N],
    _limit: u32,
    _offset: u32,
    _return_size: u32,
    _zero_fields: [Field; S],
) -> [Field; S] {}

unconstrained fn get_notes_oracle_wrapper<N, S>(
    storage_slot: Field,
    sort_by: [u8; N],
    sort_order: [u8; N],
    limit: u32,
    offset: u32,
    mut fields: [Field; S],
)-> [Field; S] {
    let return_size = fields.len() as u32;
    get_notes_oracle(storage_slot, sort_by, sort_order, limit, offset, return_size, fields)
}

unconstrained fn get_notes<Note, N, M, S, NS>(
    storage_slot: Field,
    note_interface: NoteInterface<Note, N>,
    sort_by: [u8; M],
    sort_order: [u8; M],
    limit: u32,
    offset: u32,
    mut notes: [Note; S], // TODO: Remove it and use `limit` to initialise the note array.
    zero_fields: [Field; NS], // TODO: Remove it and use `limit` to initialise the note array.
) -> [Note; S] {
    let fields = get_notes_oracle_wrapper(storage_slot, sort_by, sort_order, limit, offset, zero_fields);
    let num_notes = fields[0] as u32;
    let contract_address = fields[1];
    let deserialise = note_interface.deserialise;
    let set_header = note_interface.set_header;
    for i in 0..notes.len() {
        if i as u32 < num_notes {
            let read_offset: comptime Field = 2 + i * (N + 1);
            let nonce = fields[read_offset];
            let header = NoteHeader { contract_address, nonce, storage_slot };

            let preimage = arr_copy_slice(fields, [0; N], read_offset + 1);
            let mut note = deserialise(preimage);

            set_header(&mut note, header);
            notes[i] = note;
        };
    };
    notes
}

unconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {
    // TODO
    nullifier == 0
}