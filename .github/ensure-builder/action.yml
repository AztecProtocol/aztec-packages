# Reusable setup workflow for CI tasks
name: Setup Workflow
description: "Reusable setup steps"

inputs:
  runner_type:
    required: true
  username:
    required: false
  run:
    # command to run once builder/tester available
    required: false
  spot_strategy:
    default: BestEffort
runs:
  # define an action, runs in OS of caller
  using: composite
  steps:
    - name: Select Instance Type and AMI
      id: select_instance
      shell: bash
      run: |
        TYPE=${{ inputs.runner_type }}
        # Try to use spot for every runner type for now
        echo "spot_strategy=${{ inputs.spot_strategy }}" >> $GITHUB_OUTPUT
        if [ -n "${{ inputs.username }}" ]; then
          USERNAME="${{ inputs.username }}"
        fi
        # Otherwise expect in env
        echo "runner_label=$USERNAME-$runner_type" >> $GITHUB_OUTPUT
        if [[ $TYPE == builder-x86 ]]; then
          # 128-core x86 instance types, aws chooses for us based on capacity
          echo "instance_type=m6a.32xlarge m6i.32xlarge m6in.32xlarge m7a.32xlarge r6a.32xlarge r6i.32xlarge r6in.32xlarge" >> $GITHUB_OUTPUT
          echo "ami_id=ami-052a1e16394277fdf" >> $GITHUB_OUTPUT
          echo "runner_concurrency=20" >> $GITHUB_OUTPUT
          echo "runner_label=$USERNAME-x86" >> $GITHUB_OUTPUT
          echo "ttl=40" >> $GITHUB_OUTPUT
        elif [[ $TYPE == builder-arm ]]; then
          # 64-core ARM instance type
          echo "instance_type=r6g.16xlarge" >> $GITHUB_OUTPUT
          echo "ami_id=ami-0d8a9b0419ddb331a" >> $GITHUB_OUTPUT
          echo "runner_concurrency=8" >> $GITHUB_OUTPUT
          echo "runner_label=$USERNAME-arm" >> $GITHUB_OUTPUT
          echo "ttl=40" >> $GITHUB_OUTPUT
        fi
        if [ -n "$RUNNER_CONCURRENCY" ]; then
          echo "runner_concurrency=$RUNNER_CONCURRENCY" >> $GITHUB_OUTPUT
        fi

    - name: Start Builder
      uses: ./.github/spot-runner-action
      with:
        # inputs:
        runner_label: ${{ steps.select_instance.outputs.runner_label }}
        subaction: start
        github_token: ${{ env.GH_SELF_HOSTED_RUNNER_TOKEN }}
        aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        ec2_key: ${{ env.BUILD_INSTANCE_SSH_KEY }}
        # idempotency, see https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html
        # makes e2e tests hitting the API at once not cause multiple spots
        client_token: ${{ format('ci-yml-{0}-{1}-{2}', inputs.runner_type, env.RUN_ID, env.RUN_ATTEMPT) }}
        # constants:
        runner_concurrency: ${{ steps.select_instance.outputs.runner_concurrency }}
        ec2_instance_type: ${{ steps.select_instance.outputs.instance_type }}
        ec2_ami_id: ${{ steps.select_instance.outputs.ami_id }}
        ec2_spot_instance_strategy: ${{ steps.select_instance.outputs.spot_strategy }}
        ec2_instance_ttl: ${{ steps.select_instance.outputs.ttl }} # refreshed by jobs if runner_concurrency > 0
        aws_region: us-east-2
        ec2_subnet_id: subnet-4cfabd25
        ec2_security_group_id: sg-0ccd4e5df0dcca0c9
        ec2_key_name: "build-instance"
        ec2_instance_tags: '[{"Key": "Keep-Alive", "Value": "true"},{"Key": "Builder", "Value": "true"}]'
    # This disambiguates from 'tester'
    - name: Set BUILDER_SPOT_IP and BUILDER_SPOT_KEY
      shell: bash
      run: |
        echo "BUILDER_SPOT_IP=${SPOT_IP}" >> $GITHUB_ENV
        echo "BUILDER_SPOT_KEY=${SPOT_KEY}" >> $GITHUB_ENV
    # Set up a context for this run
    # Run the test
    - name: Run On Builder
      id: test
      shell: bash
      env:
        INPUT: ${{ inputs.run }}
      run: |
        .github/ensure-builder/run ${{ steps.select_instance.outputs.ttl }}

    - name: Re-run with On-Demand
      uses: ./.github/ensure-builder
      if: steps.test.outputs.exit_code == '155' && inputs.spot_strategy != 'None'
      with:
        username: ${{ inputs.username }}
        runner_type: ${{ inputs.runner_type}}
        spot_strategy: None
        run: ${{ inputs.run }}

    # If we aren't rerunning, report exit code
    - name: Report Exit Code
      shell: bash
      if: steps.test.outputs.exit_code != '155' || inputs.spot_strategy == 'None'
      run: exit ${{ steps.test.outputs.exit_code }}