# Reusable setup workflow for CI tasks
name: Setup Workflow
description: "Reusable setup steps"

inputs:
  concurrency_key:
    required: false
    description: "Concurrency key for locking jobs"

runs:
  # define an action, runs in OS of caller
  using: composite
  steps:
    # Since we use multiple runners, dont want them clashing
    - name: Generate Unique Home Directory
      shell: bash
      run: |
        RUN_HOME=~/run-$RANDOM-$(date +%s)
        echo HOME=$RUN_HOME >> $GITHUB_ENV
        mkdir -p $RUN_HOME

    - name: Cache Submodules
      id: cache-submodules
      uses: actions/cache@v4
      with:
        path: .git/modules
        key: submodules-${{ hashFiles('.gitmodules') }}-spot-ebs

    - name: Checkout Submodules
      shell: bash
      run: |
        git config --global --add safe.directory '*'
        git submodule sync --recursive && git submodule update --init --recursive

    # TODO reconsider how jq gets into image
    - name: Setup jq
      uses: dcarbone/install-jq-action@v2.1.0
    - name: Setup yq
      uses: dcarbone/install-yq-action@v1.1.1
      with:
        version: v4.44.3

    - name: Setup Earthly
      uses: earthly/actions-setup@v1
      with:
        # permission issue with spot runners, simpler to leave out
        use-cache: false
        # NOTE also update in .github/spot-runner-action/src/userdata.ts
        version: "v0.8.10"

    - name: Setup Env
      shell: bash
      run: ./scripts/setup_env.sh ${{ env.DOCKERHUB_PASSWORD }}
      env:
        PULL_REQUEST: "${{ github.event.pull_request.number }}"
        BRANCH: "${{ github.ref_name }}"

    # As detailed in https://github.com/ben-z/gh-action-mutex
    # things do not become 'pending' in github actions, and instead just cancel one another
    # so we can't use the native concurrency in GA. We use a simple file-lock since we're on the same machine.
    - name: Limit concurrency
      uses: gacts/run-and-post-run@v1
      if: ${{ inputs.concurrency_key }}
      with:
        run: |
          while [ -f "/home/ubuntu/${{ inputs.concurrency_key }}.lock" ]; do sleep 1 ; echo "Lock is currently held by $(cat '/home/ubuntu/${{ inputs.concurrency_key }}.lock'), waiting..." ; done
          echo "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" > "/home/ubuntu/${{ inputs.concurrency_key }}.lock"
          echo "/home/ubuntu/${{ inputs.concurrency_key }}.lock acquired."
        post: |
          rm "/home/ubuntu/${{ inputs.concurrency_key }}.lock" || true
          echo "/home/ubuntu/${{ inputs.concurrency_key }}.lock removed."

    - name: Wait for runner completion
      shell: bash
      run: |
        for i in {1..60} ; do
          # HACK: detecting bare spot. TODO Find better solution
          [ ! -f ~/delay_shutdown.sh ] && ( ! [ -f ~/.user-data-started ] || [ -f ~/.user-data-finished ] ) && break
          [ -f ~/.setup-complete ] && ( ! [ -f ~/.user-data-started ] || [ -f ~/.user-data-finished ] ) && break
          sleep 1
        done
        if ! [ -f ~/.setup-complete ] && [ -f ~/.user-data-started ] ; then
          echo "Cache mount not seeming to be complete, exiting!"
          exit 1
        fi
