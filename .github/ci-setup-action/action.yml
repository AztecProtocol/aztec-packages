# Reusable setup workflow for CI tasks
name: Setup Workflow
description: 'Reusable setup steps'

inputs:
  dockerhub_password:
    required: true
    description: 'DockerHub Password'
  concurrency_key:
    required: false
    description: 'Concurrency key for locking jobs'
  concurrency_token:
    required: false
    description: 'TODO unused'
runs:
  # define an action, runs in OS of caller
  using: composite
  steps:
    # Since we use multiple runners, dont want them clashing
    - name: Generate Unique Home Directory
      shell: bash
      run: |
        RUN_HOME=~/run-$RANDOM-$(date +%s)
        echo HOME=$RUN_HOME >> $GITHUB_ENV
        mkdir -p $RUN_HOME

    - name: Cache Submodules
      id: cache-submodules
      uses: actions/cache@v3
      with:
        path: .git/modules
        key: submodules-${{ hashFiles('.gitmodules') }}-spot-ebs

    - name: Checkout Submodules
      shell: bash
      run: |
        git config --global --add safe.directory '*'
        git submodule sync --recursive && git submodule update --init --recursive

    # TODO reconsider how jq gets into image
    - name: Setup jq
      uses: dcarbone/install-jq-action@v2.1.0

    - name: Setup Earthly
      uses: earthly/actions-setup@v1
      with:
        # permission issue with spot runners, simpler to leave out
        use-cache: false
        version: 'v0.8.5'

    - name: Setup Env
      shell: bash
      run: ./scripts/setup_env.sh ${{ inputs.dockerhub_password }}

    - name: Setup Docker
      shell: bash
      run: |
        if ! [ -f /etc/docker/daemon.json ] ; then
          echo '{"default-address-pools":[{"base":"172.17.0.0/12","size":20}, {"base":"10.99.0.0/12","size":20}, {"base":"192.168.0.0/16","size":24}]}' > /etc/docker/daemon.json
          sudo service docker restart
          echo "Configured docker daemon for making many networks."
        else
          echo "Docker daemon already configured."
        fi
    # As detailed in https://github.com/ben-z/gh-action-mutex
    # things do not become 'pending' in github actions, and instead just cancel one another
    # so we can't use the native concurrency in GA. We use a simple file-lock since we're on the same machine.
    - name: Limit concurrency
      uses: gacts/run-and-post-run@v1
      if: ${{ inputs.concurrency_key }}
      with:
        run: |
          while [ -f "/run/${{ inputs.concurrency_key }}.lock" ]; do sleep 1 ; echo "Lock is currently held, waiting..." ; done
          touch "/run/${{ inputs.concurrency_key }}.lock"
          echo "/run/${{ inputs.concurrency_key }}.lock acquired."
        post: |
          rm "/run/${{ inputs.concurrency_key }}.lock"
          echo "/run/${{ inputs.concurrency_key }}.lock removed."
