name: CI
on:
  push:
    branches: [master]
  pull_request: {}
  workflow_dispatch:
    inputs:
      runner_action:
        description: "The action to take with the self-hosted runner (start, stop, restart)."
        required: false
      just_start_spot:
        description: "Should we just run spots?"
        type: boolean
        required: false
concurrency:
  # force parallelism in master
  group: ci-${{ github.ref_name == 'master' && github.run_id || github.ref_name }}
  cancel-in-progress: true
jobs:
  setup:
    uses: ./.github/workflows/setup-runner.yml
    with:
      runner_label: ${{ github.actor }}-x86
      ebs_cache_size_gb: 256
      runner_concurrency: 50
      subaction: ${{ github.event.inputs.runner_action || 'start' }}
      ec2_instance_type: m6a.32xlarge
      ec2_ami_id: ami-04d8422a9ba4de80f
      ec2_instance_ttl: 40 # refreshed by jobs
    secrets: inherit

  build:
    needs: setup
    runs-on: ${{ github.actor }}-x86
    if: ${{ github.event.inputs.just_start_spot != 'true' }}
    outputs:
      e2e_list: ${{ steps.e2e_list.outputs.list }}
    steps:
      - {uses: actions/checkout@v4, with: { ref: "${{ github.event.pull_request.head.sha }}"}}
      - uses: ./.github/ci-setup-action
        with:
          dockerhub_password: "${{ secrets.DOCKERHUB_PASSWORD }}"
          concurrency_key: build-${{ github.actor }}-x86
      # prepare images locally, tagged by commit hash
      - name: "Build E2E Image"
        timeout-minutes: 40
        run: earthly ./yarn-project+export-end-to-end
      # We base our e2e list used in e2e-x86 off the targets in ./yarn-project/end-to-end
      # (Note ARM uses just 2 tests as a smoketest)
      - name: Create list of end-to-end jobs
        id: e2e_list
        run: echo "list=$(earthly ls ./yarn-project/end-to-end | grep -v '+base' |  sed 's/+//' | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT

  # all the end-to-end integration tests for aztec
  e2e:
    needs: build
    runs-on: ${{ github.actor }}-x86
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJson( needs.build.outputs.e2e_list )}}
    steps:
      - {uses: actions/checkout@v4, with: { ref: "${{ github.event.pull_request.head.sha }}"}}
      - uses: ./.github/ci-setup-action
        with:
          dockerhub_password: "${{ secrets.DOCKERHUB_PASSWORD }}"
          # must be globally unique for build x runner
          concurrency_key: e2e-${{ github.actor }}-x86-${{ matrix.test }}
      - name: Test
        working-directory: ./yarn-project/end-to-end/
        timeout-minutes: 25
        run: earthly -P --no-output +${{ matrix.test }} --e2e_mode=cache
      # TODO
      # - name: Upload logs
      #   run: BRANCH=${{ github.ref_name }} PULL_REQUEST=${{ github.event.number }} scripts/ci/upload_logs_to_s3 ./yarn-project/end-to-end/log

  # barretenberg (prover) native and AVM (public VM) tests
  # only ran on x86 for resource reasons (memory intensive)
  bb-native-tests:
    needs: setup
    runs-on: ${{ github.actor }}-x86
    strategy:
      fail-fast: false
    steps:
      - {uses: actions/checkout@v4, with: { ref: "${{ github.event.pull_request.head.sha }}"}}
      # Only allow one memory-hunger prover test to use this runner
      - uses: ./.github/ci-setup-action
        with:
          dockerhub_password: "${{ secrets.DOCKERHUB_PASSWORD }}"
          # must be globally unique for build x runner
          concurrency_key: bb-native-tests-${{ github.actor }}-x86
      - name: "Native Prover Tests"
        working-directory: ./barretenberg/cpp/
        timeout-minutes: 25
        # limit our parallelism to half our cores
        run: earthly --no-output +test --hardware_concurrency=64

  # push benchmarking binaries to dockerhub registry
  bb-bench-binaries:
    needs: setup
    runs-on: ${{ github.actor }}-x86
    steps:
      - {uses: actions/checkout@v4, with: { ref: "${{ github.event.pull_request.head.sha }}"}}
      - uses: ./.github/ci-setup-action
        with:
          dockerhub_password: "${{ secrets.DOCKERHUB_PASSWORD }}"
          concurrency_key: bb-bench-binaries-${{ github.actor }}-x86
      - name: Build and Push Binaries
        if: ${{ github.event.inputs.just_start_spot != 'true' }}
        timeout-minutes: 15
        working-directory: ./barretenberg/cpp/
        run: earthly --push +bench-binaries

  setup-bench:
    uses: ./.github/workflows/setup-runner.yml
    needs: bb-bench-binaries
    with:
      runner_label: ${{ github.actor }}-bench-x86
      ebs_cache_size_gb: 64
      runner_concurrency: 1
      subaction: ${{ github.event.inputs.runner_action || 'start' }}
      ec2_instance_type: m6a.4xlarge
      ec2_ami_id: ami-04d8422a9ba4de80f
      ec2_instance_ttl: 15 # refreshed by jobs
    secrets: inherit

  bb-bench:
    runs-on: ${{ github.actor }}-bench-x86
    needs: setup-bench
    steps:
      - {uses: actions/checkout@v4, with: { ref: "${{ github.event.pull_request.head.sha }}"}}
      - uses: ./.github/ci-setup-action
        with:
          dockerhub_password: "${{ secrets.DOCKERHUB_PASSWORD }}"
          concurrency_key: bb-bench-${{ github.actor }}-bench-x86
      # Use bench_mode=cache to read the pushed build above
      - name: Client IVC Bench
        working-directory: ./barretenberg/cpp/
        timeout-minutes: 15
        run: earthly --no-output +bench-client-ivc --bench_mode=cache

      - name: Ultrahonk Bench
        working-directory: ./barretenberg/cpp/
        timeout-minutes: 15
        run: earthly --no-output +bench-ultra-honk --bench_mode=cache
