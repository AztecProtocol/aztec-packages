
# Start cheap (~1/8th the cost of on demand, ~13th the cost of large GA runners) spot builders
# just for the CI job. These are specced per user and run the entire CI.
# TODO These have a persistent EBS volume that forms a fast-online docker image cache (used by Earthly), meaning
# TODO build steps that ran in previous invocations are quickly ran from cache.
name: Reusable Spot Instance and Setup Workflow
on:
  workflow_call:
    inputs:
      runner_label:
        required: true
        type: string
      runner_concurrency:
        required: true
        type: number
      ec2_instance_type:
        required: true
        type: string
      ec2_ami_id:
        required: true
        type: string
      ec2_instance_ttl:
        required: true
        type: number
      ec2_subnet_id:
        default: subnet-4cfabd25
        type: string
      ec2_security_group_id:
        default: sg-0ccd4e5df0dcca0c9
        type: string
      ec2_spot_instance_strategy:
        default: BestEffort
        type: string
      aws_region:
        default: "us-east-2"
        type: string
      ebs_cache_size_gb:
        required: true
        type: string
      subaction:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GH_SELF_HOSTED_RUNNER_TOKEN:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
jobs:
  start-builder:
    runs-on: ubuntu-latest
    steps:
      - name: Start EC2 runner
        uses: AztecProtocol/ec2-action-builder@v0.8
        with:
          github_token: ${{ secrets.GH_SELF_HOSTED_RUNNER_TOKEN }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ inputs.aws_region }}
          ec2_subnet_id: ${{ inputs.ec2_subnet_id }}
          ec2_security_group_id: ${{ inputs.ec2_security_group_id }}
          ec2_spot_instance_strategy: ${{ inputs.ec2_spot_instance_strategy }}
          runner_label: ${{ inputs.runner_label }}
          subaction: ${{inputs.subaction }}
          runner_concurrency: ${{ inputs.runner_concurrency }}
          ec2_instance_type: ${{ inputs.ec2_instance_type }}
          ec2_ami_id: ${{ inputs.ec2_ami_id }}
          ec2_instance_ttl: ${{ inputs.ec2_instance_ttl }}
          ec2_key_name: "build-instance"
          ec2_instance_tags: '[{"Key": "Keep-Alive", "Value": "true"}]'

  setup:
    needs: start-builder
    runs-on: ${{ inputs.runner_label }}
    if: ${{inputs.subaction != 'stop'}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup CI
        uses: ./.github/ci-setup-action
        with:
          dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Attach EBS Cache Disk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: ./scripts/attach_ebs_cache.sh ${{ inputs.runner_label }} ${{ inputs.ebs_cache_size_gb }}

      - name: Configure and Restart Docker
        shell: bash
        run: |
          # We need to restart after attaching disk cache
          # Both only happen once, so we just make sure this happens once
          if ! [ -f /etc/docker/daemon.json ] ; then
            echo '{"default-address-pools":[{"base":"172.17.0.0/12","size":20}, {"base":"10.99.0.0/12","size":20}, {"base":"192.168.0.0/16","size":24}]}' > /etc/docker/daemon.json
            sudo service docker restart
            echo "Configured docker daemon for making many networks."
          else
            echo "Docker daemon already configured."
          fi

      - name: Run Docker Prune
        # helps to not overuse space
        run: docker system prune -f || true

      - name: Run Earthly Bootstrap
        run: earthly bootstrap
