name: Aztec Network Deployment

on:
  workflow_call:
    inputs:
      cluster:
        description: The cluster to deploy to, e.g. aztec-gke-private
        required: true
        type: string
      namespace:
        description: The namespace to deploy to, e.g. smoke
        required: true
        type: string
      values_file:
        description: The values file to use, e.g. 1-validators.yaml
        required: true
        type: string
      aztec_docker_image:
        description: The Aztec Docker image to use, e.g. aztecprotocol/aztec:da809c58290f9590836f45ec59376cbf04d3c4ce-x86_64
        required: true
        type: string
      deployment_mnemonic_secret_name:
        description: The name of the secret which holds the boot node's contract deployment mnemonic
        required: false
        type: string
        default: testnet-deployment-mnemonic
      deployment_salt:
        description: The salt to use for this deployment. Defaults to random
        required: false
        type: string
        default: ""
      respect_tf_lock:
        description: Whether to respect the Terraform lock
        required: false
        type: string
        default: "true"
      run_terraform_destroy:
        description: Whether to run terraform destroy before deploying
        required: false
        type: string
        default: "false"
      ref:
        description: The branch name to deploy from
        required: false
        type: string
        default: "master"
      sepolia_deployment:
        description: "Whether to deploy on Sepolia network (default: false)"
        required: false
        type: string
        default: "false"
      sepolia_accounts_mnemonic_secret_name:
        description: The name of the secret which holds the sepolia accounts mnemonic
        required: false
        type: string
        default: sepolia-accounts-mnemonic
    secrets:
      GCP_SA_KEY:
        required: true
  workflow_dispatch:
    inputs:
      cluster:
        description: The cluster to deploy to, e.g. aztec-gke-private
        required: true
        type: string
      namespace:
        description: The namespace to deploy to, e.g. smoke
        required: true
      values_file:
        description: The values file to use, e.g. 1-validators.yaml
        required: true
      aztec_docker_image:
        description: The Aztec Docker image to use, e.g. aztecprotocol/aztec:da809c58290f9590836f45ec59376cbf04d3c4ce-x86_64
        required: true
      deployment_mnemonic_secret_name:
        description: The name of the secret which holds the boot node's contract deployment mnemonic
        required: false
        default: testnet-deployment-mnemonic
      deployment_salt:
        description: The salt to use for this deployment. Defaults to random
        required: false
        default: ""
      run_terraform_destroy:
        description: Whether to run terraform destroy before deploying
        required: false
        type: string
        default: "false"
      sepolia_deployment:
        description: "Whether to deploy on Sepolia network (default: false)"
        required: false
        type: string
        default: "false"
      sepolia_accounts_mnemonic_secret_name:
        description: The name of the secret which holds the sepolia accounts mnemonic (if not provided, will use '{namespace}-accounts-mnemonic').
        required: false
        type: string

jobs:
  fund_sepolia_accounts:
    if: ${{ inputs.sepolia_deployment == 'true' }}
    uses: ./.github/workflows/fund-sepolia-accounts.yml
    with:
      values_file: ${{ inputs.values_file }}
      sepolia_accounts_mnemonic_secret_name: ${{ inputs.sepolia_accounts_mnemonic_secret_name || format('{0}-accounts-mnemonic', inputs.namespace) }}
      ref: ${{ inputs.ref || github.ref || 'master' }}
    secrets:
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      SEPOLIA_FUNDING_PRIVATE_KEY: ${{ secrets.SEPOLIA_FUNDING_PRIVATE_KEY }}
      GCP_SEPOLIA_URL: ${{ secrets.GCP_SEPOLIA_URL }}
      GCP_SEPOLIA_API_KEY: ${{ secrets.GCP_SEPOLIA_API_KEY }}

  network_deployment:
    needs: fund_sepolia_accounts
    # This job will run on Ubuntu
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }} # Only one job per branch
      cancel-in-progress: false # Allow previous deployment to complete to avoid corruption

    # Set up a variable based on the branch name
    env:
      AZTEC_DOCKER_IMAGE: ${{ inputs.aztec_docker_image }}
      NAMESPACE: ${{ inputs.namespace }}
      METRICS_NAMESPACE: "metrics"
      VALUES_FILE: ${{ inputs.values_file }}
      RESOURCES_FILE: gcloud.yaml
      DEPLOYMENT_MNEMONIC_SECRET_NAME: ${{ inputs.deployment_mnemonic_secret_name }}
      DEPLOYMENT_SALT: ${{ inputs.deployment_salt }}
      CHART_PATH: ./spartan/aztec-network
      CLUSTER_NAME: ${{ inputs.cluster }}
      REGION: us-west1-a
      TF_STATE_BUCKET: aztec-terraform
      GKE_CLUSTER_CONTEXT: "gke_testnet-440309_us-west1-a_${{ inputs.cluster }}"
      GCP_API_KEY_HEADER: "X-goog-api-key"
      EXTERNAL_ETHEREUM_HOSTS: "https://json-rpc.${{ secrets.GCP_SEPOLIA_URL }}?key=${{ secrets.GCP_SEPOLIA_API_KEY }},${{ secrets.INFURA_SEPOLIA_URL }}"
      EXTERNAL_ETHEREUM_CONSENSUS_HOST: "https://beacon.${{ secrets.GCP_SEPOLIA_URL }}"
      RESPECT_TF_LOCK: ${{ inputs.respect_tf_lock || 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Check values
        run: |
          echo "inputs.ref: ${{ inputs.ref }}"
          echo "github.ref: ${{ github.ref }}"
          ls -la .github/workflows/
          ls -la .github/workflows/fund-sepolia-accounts.yml

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Configure kubectl with GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region ${{ env.REGION }}

      - name: Ensure Terraform state bucket exists
        run: |
          if ! gsutil ls gs://${{ env.TF_STATE_BUCKET }} >/dev/null 2>&1; then
            echo "Creating GCS bucket for Terraform state..."
            gsutil mb -l us-east4 gs://${{ env.TF_STATE_BUCKET }}
            gsutil versioning set on gs://${{ env.TF_STATE_BUCKET }}
          else
            echo "Terraform state bucket already exists"
          fi

      - name: Grab the boot node deployment mnemonic
        id: get-mnemonic
        if: ${{ inputs.sepolia_deployment != 'true' }}
        run: |
          echo "::add-mask::$(gcloud secrets versions access latest --secret=${{ env.DEPLOYMENT_MNEMONIC_SECRET_NAME }})"
          echo "mnemonic=$(gcloud secrets versions access latest --secret=${{ env.DEPLOYMENT_MNEMONIC_SECRET_NAME }})" >> "$GITHUB_OUTPUT"

      - name: Generate eth devnet config
        id: generate-eth-devnet-config
        if: ${{ inputs.sepolia_deployment != 'true' }}
        run: |
          REPO=$(git rev-parse --show-toplevel)

          export MNEMONIC="${{ steps.get-mnemonic.outputs.mnemonic }}"

          $REPO/spartan/scripts/generate_devnet_config.sh ${{ env.VALUES_FILE }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0" # Specify your desired version

      - name: Terraform Init
        working-directory: ./spartan/terraform/deploy-release
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="prefix=network-deploy/${{ env.REGION }}/${{ env.CLUSTER_NAME }}/${{ env.NAMESPACE }}/terraform.tfstate"

      - name: Terraform Destroy
        working-directory: ./spartan/terraform/deploy-release
        if: ${{ inputs.run_terraform_destroy == 'true' }}
        # Destroy fails if the resources are already destroyed, so we continue on error
        continue-on-error: true
        run: |
          if ${{ inputs.sepolia_deployment == 'true' }}; then
            if [ -z "${{ inputs.sepolia_accounts_mnemonic_secret_name }}" ]; then
              SECRET_NAME="${{ env.NAMESPACE }}-accounts-mnemonic"
            else
              SECRET_NAME="${{ inputs.sepolia_accounts_mnemonic_secret_name }}"
            fi
            L1_DEPLOYMENT_MNEMONIC=$(gcloud secrets versions access latest --secret=${{ inputs.sepolia_accounts_mnemonic_secret_name }})
            terraform destroy -auto-approve \
              -var="RELEASE_NAME=${{ env.NAMESPACE }}" \
              -var="VALUES_FILE=${{ env.VALUES_FILE }}" \
              -var="RESOURCES_FILE=${{ env.RESOURCES_FILE }}" \
              -var="GKE_CLUSTER_CONTEXT=${{ env.GKE_CLUSTER_CONTEXT }}" \
              -var="AZTEC_DOCKER_IMAGE=${{ env.AZTEC_DOCKER_IMAGE }}" \
              -var="L1_DEPLOYMENT_PRIVATE_KEY=${{ secrets.SEPOLIA_L1_DEPLOYMENT_PRIVATE_KEY }}" \
              -var="L1_DEPLOYMENT_MNEMONIC=$L1_DEPLOYMENT_MNEMONIC" \
              -var="EXTERNAL_ETHEREUM_HOSTS=${{ env.EXTERNAL_ETHEREUM_HOSTS }}" \
              -var="EXTERNAL_ETHEREUM_CONSENSUS_HOST=${{ env.EXTERNAL_ETHEREUM_CONSENSUS_HOST }}" \
              -var="EXTERNAL_ETHEREUM_CONSENSUS_HOST_API_KEY=${{ secrets.GCP_SEPOLIA_API_KEY }}" \
              -var="EXTERNAL_ETHEREUM_CONSENSUS_HOST_API_KEY_HEADER=${{ env.GCP_API_KEY_HEADER }}" \
              -lock=${{ env.RESPECT_TF_LOCK }}
          else
            terraform destroy -auto-approve \
              -var="RELEASE_NAME=${{ env.NAMESPACE }}" \
              -var="VALUES_FILE=${{ env.VALUES_FILE }}" \
              -var="RESOURCES_FILE=${{ env.RESOURCES_FILE }}" \
              -var="GKE_CLUSTER_CONTEXT=${{ env.GKE_CLUSTER_CONTEXT }}" \
              -var="AZTEC_DOCKER_IMAGE=${{ env.AZTEC_DOCKER_IMAGE }}" \
              -var="L1_DEPLOYMENT_MNEMONIC=${{ steps.get-mnemonic.outputs.mnemonic }}" \
              -lock=${{ env.RESPECT_TF_LOCK }}
          fi

          kubectl delete ns ${{env.NAMESPACE}}

      - name: Terraform Plan
        working-directory: ./spartan/terraform/deploy-release
        run: |
          if ${{ inputs.sepolia_deployment == 'true' }}; then
            if [ -z "${{ inputs.sepolia_accounts_mnemonic_secret_name }}" ]; then
              SECRET_NAME="${{ env.NAMESPACE }}-accounts-mnemonic"
            else
              SECRET_NAME="${{ inputs.sepolia_accounts_mnemonic_secret_name }}"
            fi
            L1_DEPLOYMENT_MNEMONIC=$(gcloud secrets versions access latest --secret=$SECRET_NAME)
            terraform plan \
              -var="RELEASE_NAME=${{ env.NAMESPACE }}" \
              -var="VALUES_FILE=${{ env.VALUES_FILE }}" \
              -var="RESOURCES_FILE=${{ env.RESOURCES_FILE }}" \
              -var="GKE_CLUSTER_CONTEXT=${{ env.GKE_CLUSTER_CONTEXT }}" \
              -var="AZTEC_DOCKER_IMAGE=${{ env.AZTEC_DOCKER_IMAGE }}" \
              -var="L1_DEPLOYMENT_PRIVATE_KEY=${{ secrets.SEPOLIA_L1_DEPLOYMENT_PRIVATE_KEY }}" \
              -var="L1_DEPLOYMENT_MNEMONIC=$L1_DEPLOYMENT_MNEMONIC" \
              -var="L1_DEPLOYMENT_SALT=${DEPLOYMENT_SALT:-$RANDOM}" \
              -var="EXTERNAL_ETHEREUM_HOSTS=${{ env.EXTERNAL_ETHEREUM_HOSTS }}" \
              -var="EXTERNAL_ETHEREUM_CONSENSUS_HOST=${{ env.EXTERNAL_ETHEREUM_CONSENSUS_HOST }}" \
              -var="EXTERNAL_ETHEREUM_CONSENSUS_HOST_API_KEY=${{ secrets.GCP_SEPOLIA_API_KEY }}" \
              -var="EXTERNAL_ETHEREUM_CONSENSUS_HOST_API_KEY_HEADER=${{ env.GCP_API_KEY_HEADER }}" \
              -var="METRICS_NAMESPACE=${{ env.METRICS_NAMESPACE }}" \
              ${{ contains(env.VALUES_FILE, 'devnet') && '-var="EXPOSE_HTTPS_BOOTNODE=true"' || '' }} \
              -out=tfplan \
              -lock=${{ env.RESPECT_TF_LOCK }}
          else
            terraform plan \
              -var="RELEASE_NAME=${{ env.NAMESPACE }}" \
              -var="VALUES_FILE=${{ env.VALUES_FILE }}" \
              -var="RESOURCES_FILE=${{ env.RESOURCES_FILE }}" \
              -var="GKE_CLUSTER_CONTEXT=${{ env.GKE_CLUSTER_CONTEXT }}" \
              -var="AZTEC_DOCKER_IMAGE=${{ env.AZTEC_DOCKER_IMAGE }}" \
              -var="L1_DEPLOYMENT_MNEMONIC=${{ steps.get-mnemonic.outputs.mnemonic }}" \
              -var="L1_DEPLOYMENT_SALT=${DEPLOYMENT_SALT:-$RANDOM}" \
              -var="METRICS_NAMESPACE=${{ env.METRICS_NAMESPACE }}" \
              ${{ contains(env.VALUES_FILE, 'devnet') && '-var="EXPOSE_HTTPS_BOOTNODE=true"' || '' }} \
              -out=tfplan \
              -lock=${{ env.RESPECT_TF_LOCK }}
          fi

      - name: Terraform Apply
        working-directory: ./spartan/terraform/deploy-release
        run: terraform apply -lock=${{ env.RESPECT_TF_LOCK }} -auto-approve tfplan
