name: Merge Train Auto-Merge

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  auto-merge-inactive:
    name: Auto-merge inactive PRs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and auto-merge inactive PRs
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          github-token: ${{ secrets.AZTEC_BOT_GITHUB_TOKEN }}
          script: |
            // Get all open PRs
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // Filter for PRs from merge-train branches
            const mergeTrainPRs = pulls.filter(pr => 
              pr.head.ref.startsWith('merge-train/')
            );
            
            const fourHoursAgo = new Date(Date.now() - 4 * 60 * 60 * 1000);
            
            for (const pr of mergeTrainPRs) {
              // Get all commits in the PR
              const { data: allCommits } = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                per_page: 100
              });
              
              if (allCommits.length === 0) continue;
              
              // Filter out merge commits and empty commits
              const meaningfulCommits = allCommits.filter(commit => {
                const message = commit.commit.message;
                const isMerge = commit.parents && commit.parents.length > 1;
                const isEmpty = message.includes('[empty]') || message.includes('Start merge-train');
                return !isMerge && !isEmpty;
              });
              
              // Skip if PR has no meaningful commits
              if (meaningfulCommits.length === 0) {
                console.log(`PR #${pr.number} has no meaningful commits, skipping auto-merge`);
                continue;
              }
              
              // Use the most recent meaningful commit (not merge commit) for inactivity check
              const lastCommitDate = new Date(meaningfulCommits[0].commit.committer.date);
              
              // Check if the last commit is older than 4 hours
              if (lastCommitDate < fourHoursAgo) {
                console.log(`PR #${pr.number} has been inactive for more than 4 hours`);
                
                // Check if PR is already approved
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number
                });
                
                const hasApproval = reviews.some(review => 
                  review.state === 'APPROVED'
                );
                
                if (!hasApproval) {
                  // Approve the PR
                  await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    event: 'APPROVE',
                    body: 'ðŸ¤– Auto-approved after 4 hours of inactivity'
                  });
                }
                
                // Enable auto-merge
                try {
                  await github.graphql(`
                    mutation($pullRequestId: ID!) {
                      enablePullRequestAutoMerge(input: {
                        pullRequestId: $pullRequestId,
                        mergeMethod: MERGE
                      }) {
                        pullRequest {
                          autoMergeRequest {
                            enabledAt
                          }
                        }
                      }
                    }
                  `, {
                    pullRequestId: pr.node_id
                  });
                  
                  console.log(`Enabled auto-merge for PR #${pr.number}`);
                  
                  // Add a comment
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: 'ðŸ¤– Auto-merge enabled after 4 hours of inactivity. This PR will be merged automatically once all checks pass.'
                  });
                } catch (error) {
                  console.log(`Failed to enable auto-merge for PR #${pr.number}: ${error.message}`);
                }
              }
            }
