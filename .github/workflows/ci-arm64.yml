name: CI
on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      runner_action:
        description: "The action to take with the self-hosted runner (start, stop, restart)."
        required: false
      just_start_spot:
        description: "Should we just run spots?"
        type: boolean
        required: false
concurrency:
  # force parallelism in master
  group: ci-${{ github.ref_name == 'master' && github.run_id || github.ref_name }}
  cancel-in-progress: true
jobs:
  # Start cheap (~1/8th the cost of on demand, ~13th the cost of large GA runners) spot builders
  # just for the CI job. These are specced per user and run the entire CI.
  # TODO These have a persistent EBS volume that forms a fast-online docker image cache (used by Earthly), meaning
  # TODO build steps that ran in previous invocations are quickly ran from cache.
  start-builder:
    timeout-minutes: 5
    name: Start Build Runner (ARM)
    runs-on: ubuntu-latest
    permissions:
      actions: write
    strategy:
      matrix:
        config:
          - {ec2_instance_type: m6a.32xlarge, runner_concurrency: 50, ec2_ami_id: ami-04d8422a9ba4de80f, runner_label_suffix: x86}
          - {ec2_instance_type: r6g.16xlarge, runner_concurrency: 8, ec2_ami_id: ami-0d8a9b0419ddb331a, runner_label_suffix: arm}
    steps:
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: AztecProtocol/ec2-action-builder@v0.3
        with:
          github_token: ${{ secrets.GH_SELF_HOSTED_RUNNER_TOKEN }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: "us-east-2"
          ec2_subnet_id: subnet-4cfabd25
          subaction: ${{ github.event.inputs.runner_action || (contains(github.event.head_commit.message, '[ci restart-spot]') && 'restart' || 'start') }}
          # prevent reaping by mainframe spot reaper
          ec2_instance_tags: '[{"Key": "Keep-Alive", "Value": "true"}]'
          github_action_runner_version: v2.315.0
          ec2_security_group_id: sg-0ccd4e5df0dcca0c9
          ec2_spot_instance_strategy: BestEffort
          runner_label: ${{ github.actor }}-${{ matrix.config.runner_label_suffix }}
          runner_concurrency: ${{ matrix.config.runner_concurrency }}
          ec2_instance_type: ${{ matrix.config.ec2_instance_type }}
          ec2_ami_id: ${{ matrix.config.ec2_ami_id }}
          ec2_instance_ttl: 30 # 30 minutes to reap, refreshed by job starts

  build-arm:
    needs: start-builder
    timeout-minutes: 25
    if: ${{ github.event.inputs.just_start_spot != 'true' }}
    runs-on: ${{ github.actor }}-arm
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - {uses: actions/checkout@v4, with: { ref: "${{ github.event.pull_request.head.sha }}"}}
      - {uses: ./.github/ci-setup-action, with: { dockerhub_password: "${{ secrets.DOCKERHUB_PASSWORD }}"}}
      # Attach our 128gb cache disk
      - run: ./scripts/attach_ebs_cache.sh ${{ github.actor }}-arm 128
      # prepare images locally, tagged by commit hash
      - run: earthly ./yarn-project+export-end-to-end

  # all the end-to-end integration tests for aztec
  e2e-arm:
    needs: build-arm
    runs-on: ${{ github.actor }}-arm
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        test:
          - e2e-card-game
          - e2e-crowdfunding-and-claim
    steps:
      - {uses: actions/checkout@v4, with: { ref: "${{ github.event.pull_request.head.sha }}"}}
      - {uses: ./.github/ci-setup-action, with: { dockerhub_password: "${{ secrets.DOCKERHUB_PASSWORD }}"}}
      - name: Test
        working-directory: ./yarn-project/end-to-end/
        run: earthly -P --no-output +${{ matrix.test }} --e2e_mode=cache
