# buildDir: Directory path relative to repo root, from which the docker build context is created.
# projectDir: Directory path relative to repo root, to a project directory. This defaults to buildDir, but some paths
#             are computed relative to this directory (e.g. terraform directory, rebuild patterns file path).
# dockerfile: Path to a Dockerfile, relative to the buildDir. Defaults to Dockerfile. Useful if you have multiple.
# rebuildPatterns: Either a string to file relative to projectDir containing patterns, or an array of patterns.
#                  If any changed file path matches any pattern, the project will be rebuilt.
# multiarch: Not defined: no multiarch
#            host: Whichever host machine arch (determined in config.yml) determines target arch.
#            buildx: Use dockers buildx emulation to build for both x86_64 and arm.
# dependencies: An array of other projects that this project depends on.
# runDependencies: Additional projects that are needed to run a container/compose file. Ensures they're pulled first.

# Builds noir for x86_64 and arm64, creating a runnable container just with nargo + acvm.
noir:
  buildDir: noir
  dockerfile: Dockerfile.native
  rebuildPatterns: .rebuild_patterns_native
  multiarch: host

# Builds and runs noir native tests.
noir-tests:
  buildDir: noir
  dockerfile: Dockerfile.native-test
  rebuildPatterns: .rebuild_patterns_native

# Builds just the noir js packages needed by aztec.
noir-packages:
  buildDir: noir
  dockerfile: Dockerfile.packages
  rebuildPatterns: .rebuild_patterns_packages
  dependencies:
    - bb.js

# Builds and runs *all* noir package tests.
noir-packages-tests:
  buildDir: noir
  dockerfile: Dockerfile.packages-test
  rebuildPatterns: .rebuild_patterns_packages
  dependencies:
    - noir
    - bb.js
    - noir-packages

# Builds the brillig to avm transpiler.
avm-transpiler:
  buildDir: .
  dockerfile: avm-transpiler/Dockerfile
  rebuildPatterns:
    - ^avm-transpiler/
    - ^noir/
  dependencies:
    - noir
  multiarch: host

aztec-nargo:
  buildDir: .
  dockerfile: aztec-nargo/Dockerfile
  rebuildPatterns:
    - ^aztec-nargo/
    - ^avm-transpiler/
    - ^noir/
  dependencies:
    - avm-transpiler
    - noir
  multiarch: buildx

# Compiles all aztec noir projects using nargo and the avm-transpiler.
noir-projects:
  buildDir: noir-projects
  dependencies:
    - noir
    - avm-transpiler
    - barretenberg-x86_64-linux-clang

# Compiles all aztec noir projects using nargo and the avm-transpiler, then tests them using the TXE.
noir-projects-tests:
  buildDir: noir-projects
  dockerfile: Dockerfile.test
  dependencies:
    - noir
    - avm-transpiler
    - yarn-project

# Uses nargo to compile all the noir test programs, used to test bb and bb.js.
noir-compile-acir-tests:
  buildDir: noir/noir-repo/test_programs
  # Awkward. Maybe change dockerfile paths to be absolute.
  dockerfile: ../../../barretenberg/acir_tests/Dockerfile.noir_acir_tests
  rebuildPatterns:
    - ^noir/noir-repo/test_programs
    - ^barretenberg/acir_tests/Dockerfile.noir_acir_tests
  dependencies:
    - noir

# Builds x86_64 bb binary.
barretenberg-x86_64-linux-clang:
  buildDir: barretenberg/cpp
  dockerfile: dockerfiles/Dockerfile.x86_64-linux-clang
  rebuildPatterns: .rebuild_patterns

# Builds all of barretenberg with clang, including tests, with assertions enabled.
barretenberg-x86_64-linux-clang-assert:
  buildDir: barretenberg/cpp
  dockerfile: dockerfiles/Dockerfile.x86_64-linux-clang-assert
  rebuildPatterns: .rebuild_patterns

barretenberg-x86_64-linux-clang-fuzzing:
  buildDir: barretenberg/cpp
  dockerfile: dockerfiles/Dockerfile.x86_64-linux-clang-fuzzing
  rebuildPatterns: .rebuild_patterns

# Builds barretenberg.wasm (single and multithreaded builds).
barretenberg-wasm-linux-clang:
  buildDir: barretenberg/cpp
  dockerfile: dockerfiles/Dockerfile.wasm-linux-clang
  rebuildPatterns: .rebuild_patterns

barretenberg-x86_64-linux-clang-sol:
  buildDir: barretenberg
  dockerfile: sol/Dockerfile
  rebuildPatterns: sol/.rebuild_patterns

# Builds bb.js. Container is runnable for running the tests independently.
bb.js:
  buildDir: barretenberg/ts
  dependencies:
    - barretenberg-wasm-linux-clang

# Runs all the compiled acir tests through native bb.
barretenberg-acir-tests-bb:
  buildDir: barretenberg/acir_tests
  dockerfile: Dockerfile.bb
  dependencies:
    - barretenberg-x86_64-linux-clang-assert
    - noir-compile-acir-tests

# Uses bb to compute a l1 verifier contract for each acir test, and verifies a test proof on chain.
barretenberg-acir-tests-bb-sol:
  buildDir: barretenberg/acir_tests
  dockerfile: Dockerfile.bb.sol
  dependencies:
    - barretenberg-x86_64-linux-clang-assert
    - barretenberg-x86_64-linux-clang-sol
    - noir-compile-acir-tests

# Runs all the compiled acir tests through bb.js.
barretenberg-acir-tests-bb.js:
  buildDir: barretenberg/acir_tests
  dockerfile: Dockerfile.bb.js
  dependencies:
    - bb.js
    - noir-compile-acir-tests

barretenberg-bench:
  buildDir: barretenberg/cpp
  dockerfile: dockerfiles/Dockerfile.bench
  dependencies:
    - barretenberg-x86_64-linux-clang

barretenberg-docs:
  buildDir: barretenberg/cpp
  dockerfile: docs/Dockerfile

# Compiles all l1 solidity contracts. Output is JSON abis.
l1-contracts:
  buildDir: l1-contracts

# Runs all yarn-projects checks and tests.
yarn-project-test:
  buildDir: yarn-project
  dockerfile: Dockerfile.test
  rebuildPatterns:
    - ^yarn-project/.*\.(ts|tsx|js|cjs|mjs|json|html|md|sh|nr|toml|snap)$
    - ^yarn-project/Dockerfile$
  dependencies:
    - bb.js
    - noir-packages
    - l1-contracts
    - noir-projects
    - barretenberg-x86_64-linux-clang
    - noir

# Runs all prover-client checks and tests.
prover-client-test:
  buildDir: yarn-project
  projectDir: yarn-project/prover-client
  dockerfile: Dockerfile.test
  rebuildPatterns:
    - ^yarn-project/.*\.(ts|tsx|js|cjs|mjs|json|html|md|sh|nr|toml|snap)$
    - ^yarn-project/Dockerfile$
  dependencies:
    - bb.js
    - noir-packages
    - l1-contracts
    - noir-projects
    - barretenberg-x86_64-linux-clang
    - noir

# Builds all of yarn-project, with all developer dependencies.
# Creates a runnable container used to run tests and formatting checks.
yarn-project:
  buildDir: yarn-project
  rebuildPatterns:
    - ^yarn-project/.*\.(ts|tsx|js|cjs|mjs|json|html|md|sh|nr|toml|snap)$
    - ^yarn-project/Dockerfile$
  dependencies:
    - bb.js
    - noir-packages
    - l1-contracts
    - noir-projects
    - noir
    - barretenberg-x86_64-linux-clang
  multiarch: host

# A runnable container, sets entrypoint to be the aztec infrastructure entrypoint.
aztec:
  buildDir: yarn-project
  projectDir: yarn-project/aztec
  dependencies:
    - yarn-project
  multiarch: buildx

cli-wallet:
  buildDir: yarn-project
  projectDir: yarn-project/cli-wallet
  dependencies:
    - yarn-project
  multiarch: buildx

# Builds all the boxes. They are then independently tested in the container.
boxes:
  buildDir: boxes
  dependencies:
    - aztec
    - noir
    - noir-projects
  runDependencies:
    - aztec

# Builds a runnable container for running end-to-end tests (requires installing chromium etc).
# We add the runnable dependency 'aztec' to ensure the container is pulled before running the test compose file.
end-to-end:
  buildDir: yarn-project
  projectDir: yarn-project/end-to-end
  dependencies:
    - bb.js
    - noir-packages
    - l1-contracts
    - noir-projects
    - noir
    - yarn-project
  runDependencies:
    - aztec

docs:
  buildDir: .
  dockerfile: docs/Dockerfile
  rebuildPatterns:
    - ^docs/
    - ^.*\.cpp$
    - ^.*\.hpp$
    - ^.*\.ts$
    - ^.release-please-manifest\.json$
    - ^.*\.nr$
  dependencies:
    - bb.js
    - noir-packages
    - l1-contracts
    - noir-projects
