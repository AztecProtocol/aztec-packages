apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "aztec-network.fullname" . }}-boot-node
  labels:
    {{- include "aztec-network.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "aztec-network.fullname" . }}-boot-node
  replicas: {{ .Values.bootNode.replicas }}
  selector:
    matchLabels:
      {{- include "aztec-network.selectorLabels" . | nindent 6 }}
      app: boot-node
  template:
    metadata:
      labels:
        {{- include "aztec-network.selectorLabels" . | nindent 8 }}
        app: boot-node
    spec:
      {{- if .Values.network.public }}
      hostNetwork: true
      {{- include "aztec-network.publicAntiAffinity" . | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ include "aztec-network.fullname" . }}-node
      initContainers:
        {{- include "aztec-network.p2pSetupContainer" . | nindent 8 }}
        {{- include "aztec-network.serviceAddressSetupContainer" . | nindent 8 }}
        - name: wait-for-ethereum
          image: {{ .Values.images.aztec.image }}
          command:
            - /bin/bash
            - -c
            - |
              source /shared/config/service-addresses
              echo "Awaiting ethereum node at ${ETHEREUM_HOST}"
              until curl -s -X POST -H 'Content-Type: application/json' \
                -d '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":67}' \
                ${ETHEREUM_HOST} | grep -q reth; do
                echo "Waiting for Ethereum node..."
                sleep 5
              done
              echo "Ethereum node is ready!"
              {{- if .Values.telemetry.enabled }}
              until curl --head --silent {{ include "aztec-network.otelCollectorMetricsEndpoint" . }} > /dev/null; do
                echo "Waiting for OpenTelemetry collector..."
                sleep 5
              done
              echo "OpenTelemetry collector is ready!"
              {{- end }}
          volumeMounts:
            - name: config
              mountPath: /shared/config
      {{- if .Values.bootNode.deployContracts }}
        - name: deploy-l1-contracts
          image: {{ .Values.images.aztec.image }}
          command:
            [
              "/bin/bash",
              "-c",
              "cp /scripts/deploy-l1-contracts.sh /tmp/deploy-l1-contracts.sh && \
               chmod +x /tmp/deploy-l1-contracts.sh && \
               source /shared/config/service-addresses && \
               /tmp/deploy-l1-contracts.sh {{ .Values.ethereum.chainId }} \"{{ join "," .Values.validator.validatorAddresses }}\""
            ]
          volumeMounts:
            - name: scripts-output
              mountPath: /shared/contracts
            - name: config
              mountPath: /shared/config
            - name: scripts
              mountPath: /scripts
          env:
            - name: INIT_VALIDATORS
              value: "true"
            - name: ETHEREUM_SLOT_DURATION
              value: "{{ .Values.ethereum.blockTime }}"
            - name: AZTEC_SLOT_DURATION
              value: "{{ .Values.aztec.slotDuration }}"
            - name: AZTEC_EPOCH_DURATION
              value: "{{ .Values.aztec.epochDuration }}"
            - name: AZTEC_EPOCH_PROOF_CLAIM_WINDOW_IN_L2_SLOTS
              value: "{{ .Values.aztec.epochProofClaimWindow }}"
      {{- end }}
      containers:
        - name: boot-node
          image: {{ .Values.images.aztec.image }}
          command:
            - /bin/bash
            - -c
            - |
              sleep 30 && \
              source /shared/contracts/contracts.env && \
              source /shared/p2p/p2p-addresses && \
              source /shared/config/service-addresses && \
              env && \
              node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start --node --archiver --sequencer --pxe
          startupProbe:
            httpGet:
              path: /status
              port: {{ .Values.bootNode.service.nodePort }}
            periodSeconds: {{ .Values.bootNode.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.bootNode.startupProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              path: /status
              port: {{ .Values.bootNode.service.nodePort }}
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 3
          volumeMounts:
            - name: p2p-addresses
              mountPath: /shared/p2p
            - name: config
              mountPath: /shared/config
            {{- if .Values.bootNode.deployContracts }}
            - name: scripts-output
              mountPath: /shared/contracts
            {{- else }}
            - name: contracts-env
              mountPath: /shared/contracts/contracts.env
              subPath: contracts.env
            {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: AZTEC_PORT
              value: "{{ .Values.bootNode.service.nodePort }}"
            - name: LOG_LEVEL
              value: "{{ .Values.bootNode.logLevel }}"
            - name: LOG_JSON
              value: "1"
            - name: DEBUG
              value: "{{ .Values.bootNode.debug }}"
            - name: P2P_ENABLED
              value: "{{ .Values.bootNode.p2p.enabled }}"
            - name: COINBASE
              value: "{{ .Values.bootNode.coinbaseAddress }}"
            - name: VALIDATOR_DISABLED
              value: "{{ .Values.bootNode.validator.disabled }}"
            - name: L1_CHAIN_ID
              value: "{{ .Values.ethereum.chainId }}"
            - name: SEQ_MAX_SECONDS_BETWEEN_BLOCKS
              value: "{{ .Values.bootNode.sequencer.maxSecondsBetweenBlocks }}"
            - name: SEQ_MIN_TX_PER_BLOCK
              value: "{{ .Values.bootNode.sequencer.minTxsPerBlock }}"
            - name: VALIDATOR_PRIVATE_KEY
              value: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name={{ .Release.Name }},service.namespace={{ .Release.Namespace }},service.version={{ .Chart.AppVersion }},environment={{ .Values.environment | default "production" }}
            - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
              value: {{ include "aztec-network.otelCollectorMetricsEndpoint" . | quote }}
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: {{ include "aztec-network.otelCollectorTracesEndpoint" . | quote }}
            - name: OTEL_EXPORTER_OTLP_LOGS_ENDPOINT
              value: {{ include "aztec-network.otelCollectorLogsEndpoint" . | quote }}
            - name: PROVER_REAL_PROOFS
              value: "{{ .Values.aztec.realProofs }}"
            - name: PXE_PROVER_ENABLED
              value: "{{ .Values.aztec.realProofs }}"
            - name: ETHEREUM_SLOT_DURATION
              value: "{{ .Values.ethereum.blockTime }}"
            - name: AZTEC_SLOT_DURATION
              value: "{{ .Values.aztec.slotDuration }}"
            - name: AZTEC_EPOCH_DURATION
              value: "{{ .Values.aztec.epochDuration }}"
            - name: AZTEC_EPOCH_PROOF_CLAIM_WINDOW_IN_L2_SLOTS
              value: "{{ .Values.aztec.epochProofClaimWindow }}"
            - name: PEER_ID_PRIVATE_KEY
              value: "{{ .Values.bootNode.peerIdPrivateKey }}"
          ports:
            - containerPort: {{ .Values.bootNode.service.nodePort }}
            - containerPort: {{ .Values.bootNode.service.p2pTcpPort }}
            - containerPort: {{ .Values.bootNode.service.p2pUdpPort }}
              protocol: UDP
          resources:
            {{- toYaml .Values.bootNode.resources | nindent 12 }}
      volumes:
        - name: p2p-addresses
          emptyDir: {}
        - name: config
          emptyDir: {}
      {{- if .Values.bootNode.deployContracts }}
        - name: scripts
          configMap:
            name: {{ include "aztec-network.fullname" . }}-scripts
        - name: scripts-output
          emptyDir: {}
      {{- else }}
        - name: contracts-env
          configMap:
            name: {{ include "aztec-network.fullname" . }}-contracts-env
      {{- end }}
{{- if not .Values.bootNode.deployContracts }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "aztec-network.fullname" . }}-contracts-env
  labels:
    {{- include "aztec-network.labels" . | nindent 4 }}
data:
  contracts.env: |
    export ROLLUP_CONTRACT_ADDRESS={{ .Values.bootNode.contracts.rollupAddress }}
    export REGISTRY_CONTRACT_ADDRESS={{ .Values.bootNode.contracts.registryAddress }}
    export INBOX_CONTRACT_ADDRESS={{ .Values.bootNode.contracts.inboxAddress }}
    export OUTBOX_CONTRACT_ADDRESS={{ .Values.bootNode.contracts.outboxAddress }}
    export FEE_JUICE_CONTRACT_ADDRESS={{ .Values.bootNode.contracts.feeJuiceAddress }}
    export FEE_JUICE_PORTAL_CONTRACT_ADDRESS={{ .Values.bootNode.contracts.feeJuicePortalAddress }}
{{- end }}
{{if not .Values.network.public }}
---
# Headless service for StatefulSet DNS entries
apiVersion: v1
kind: Service
metadata:
  name: {{ include "aztec-network.fullname" . }}-boot-node
  labels:
    {{- include "aztec-network.labels" . | nindent 4 }}
spec:
  clusterIP: None
  selector:
    {{- include "aztec-network.selectorLabels" . | nindent 4 }}
    app: boot-node
  ports:
    - port: {{ .Values.bootNode.service.p2pTcpPort }}
      name: p2p-tpc
    - port: {{ .Values.bootNode.service.p2pUdpPort }}
      name: p2p-udp
      protocol: UDP
    - port: {{ .Values.bootNode.service.nodePort }}
      name: node
{{ end }}
