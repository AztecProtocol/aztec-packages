apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "aztec-network.fullname" . }}-setup-l2-contracts
  labels:
    {{- include "aztec-network.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      labels:
        {{- include "aztec-network.selectorLabels" . | nindent 8 }}
        app: setup-l2-contracts
    spec:
      restartPolicy: OnFailure
      containers:
        - name: setup-l2-contracts
          image: {{ .Values.images.aztec.image }}
          command:
            - /bin/bash
            - -c
            - |
              until curl -s -X POST -H 'content-type: application/json' \
                -d '{"jsonrpc":"2.0","method":"pxe_getNodeInfo","params":[],"id":67}' \
                {{ include "aztec-network.pxeUrl" . }} | grep -q '"enr:-'; do
                echo "Waiting for PXE service..."
                sleep 5
              done
              echo "PXE service is ready!"
              set -e
              node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js setup-protocol-contracts --skipProofWait
              echo "L2 contracts initialized"
          env:
            - name: PXE_URL
              value: {{ include "aztec-network.pxeUrl" . | quote }}
            - name: DEBUG
              value: "aztec:*"
            - name: LOG_LEVEL
              value: "debug"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "aztec-network.fullname" . }}-deploy-contracts-script
  labels:
    {{- include "aztec-network.labels" . | nindent 4 }}
data:
  deploy-contracts.sh: |
    #!/bin/sh
    set -ex

    # Run the deploy-l1-contracts command and capture the output
    output=$(node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js deploy-l1-contracts --validators {{ join "," .Values.validator.validatorAddresses | quote }})

    echo "$output"

    # Extract contract addresses using grep and regex
    rollup_address=$(echo "$output" | grep -oP 'Rollup Address: \K0x[a-fA-F0-9]{40}')
    registry_address=$(echo "$output" | grep -oP 'Registry Address: \K0x[a-fA-F0-9]{40}')
    inbox_address=$(echo "$output" | grep -oP 'L1 -> L2 Inbox Address: \K0x[a-fA-F0-9]{40}')
    outbox_address=$(echo "$output" | grep -oP 'L2 -> L1 Outbox Address: \K0x[a-fA-F0-9]{40}')
    fee_juice_address=$(echo "$output" | grep -oP 'Fee Juice Address: \K0x[a-fA-F0-9]{40}')
    fee_juice_portal_address=$(echo "$output" | grep -oP 'Fee Juice Portal Address: \K0x[a-fA-F0-9]{40}')

    # Write the addresses to a file in the shared volume
    cat <<EOF > /shared/contracts.env
    export ROLLUP_CONTRACT_ADDRESS=$rollup_address
    export REGISTRY_CONTRACT_ADDRESS=$registry_address
    export INBOX_CONTRACT_ADDRESS=$inbox_address
    export OUTBOX_CONTRACT_ADDRESS=$outbox_address
    export FEE_JUICE_CONTRACT_ADDRESS=$fee_juice_address
    export FEE_JUICE_PORTAL_CONTRACT_ADDRESS=$fee_juice_portal_address
    EOF

    cat /shared/contracts.env
