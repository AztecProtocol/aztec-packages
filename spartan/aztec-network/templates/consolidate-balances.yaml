# NOTE: If script logic below is updated, then scripts/consolidate-sepolia-balances.sh should be updated as well.
{{- if .Values.ethereum.execution.externalHosts }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-consolidate-balances
  labels:
    {{- include "aztec-network.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-5"
spec:
  template:
    metadata:
      labels:
        {{- include "aztec-network.selectorLabels" . | nindent 8 }}
        app: consolidate-balances
    spec:
      restartPolicy: OnFailure
      {{- if .Values.network.public }}
      serviceAccountName: {{ include "aztec-network.fullname" . }}-node
      {{- end }}
      volumes:
        - name: config
          emptyDir: {}
        - name: scripts
          # Use emptyDir instead of ConfigMap to avoid dependency on a resource that might be deleted
          emptyDir: {}
      initContainers:
        - name: create-scripts
          image: busybox
          command:
            - /bin/sh
            - -c
            - |
              cat > /scripts/consolidate-sepolia-balances.sh << 'EOF'
              #!/usr/bin/env bash
              set -eu

              mnemonic=$1
              funding_address=${2:-"0x33D525f5ac95c2BCf98b644738C7d5673480493A"}

              XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}

              ETHEREUM_RPC_URL=$(echo "$ETHEREUM_HOSTS" | cut -d',' -f1)

              # Install cast if needed
              if ! command -v cast &>/dev/null; then
                curl -L https://foundry.paradigm.xyz | bash
                $HOME/.foundry/bin/foundryup && export PATH="$PATH:$HOME/.foundry/bin" ||
                  $XDG_CONFIG_HOME/.foundry/bin/foundryup && export PATH="$PATH:$XDG_CONFIG_HOME/.foundry/bin"
              fi

              # Get the indices to check based on the configuration
              validator_key_index_start={{ .Values.aztec.validatorKeyIndexStart }}
              prover_key_index_start={{ .Values.aztec.proverKeyIndexStart }}
              bot_key_index_start={{ .Values.aztec.botKeyIndexStart }}

              num_validators={{ .Values.validator.replicas }}
              num_provers={{ .Values.proverNode.replicas }}

              # Check if bots are enabled
              bot_enabled={{ .Values.bot.enabled }}
              if [ "$bot_enabled" = "true" ]; then
                num_bots={{ .Values.bot.replicas }}
              else
                num_bots=0
              fi

              # Build an array of indices to check
              declare -a indices_to_check

              # Add validator indices
              for ((i = 0; i < num_validators; i++)); do
                indices_to_check+=($((validator_key_index_start + i)))
              done

              # Add prover indices
              for ((i = 0; i < num_provers; i++)); do
                indices_to_check+=($((prover_key_index_start + i)))
              done

              # Add bot indices if enabled
              if [ "$bot_enabled" = "true" ]; then
                for ((i = 0; i < num_bots; i++)); do
                  indices_to_check+=($((bot_key_index_start + i)))
                done
              fi

              echo "Checking balances for ${#indices_to_check[@]} accounts..."

              # For each index in our list
              for i in "${indices_to_check[@]}"; do
                # Get address and private key for this index
                address=$(cast wallet address --mnemonic "$mnemonic" --mnemonic-index $i)
                private_key=$(cast wallet private-key --mnemonic "$mnemonic" --mnemonic-index $i)

                # Get balance
                balance=$(cast balance $address --rpc-url "$ETHEREUM_RPC_URL")

                if [ "$balance" != "0" ]; then
                  gas_price=$(cast gas-price --rpc-url "$ETHEREUM_RPC_URL")
                  gas_price=$((gas_price * 120 / 100)) # Add 20% to gas price
                  gas_cost=$((21000 * gas_price))

                  # Calculate amount to send (balance - gas cost)
                  send_amount=$((balance - gas_cost))

                  if [ "$send_amount" -gt "0" ]; then
                    echo "Sending $send_amount wei from $address (index $i) to $funding_address"
                    cast send --private-key "$private_key" --rpc-url "$ETHEREUM_RPC_URL" "$funding_address" \
                      --value "$send_amount" --gas-price "$gas_price" --async
                  else
                    echo "Balance too low to cover gas costs for $address (index $i)"
                  fi
                else
                  echo "No balance in $address (index $i)"
                fi
              done
              EOF
              chmod +x /scripts/consolidate-sepolia-balances.sh
          volumeMounts:
            - name: scripts
              mountPath: /scripts

      containers:
        - name: consolidate-balances
          {{- include "aztec-network.image" . | nindent 10 }}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: config
              mountPath: /shared/config
          command:
            - /bin/bash
            - -c
            - |
              /scripts/consolidate-sepolia-balances.sh "{{ .Values.aztec.l1DeploymentMnemonic }}"
          env:
            - name: ETHEREUM_HOSTS
              value: "{{ .Values.ethereum.execution.externalHosts }}"
{{ end }}
