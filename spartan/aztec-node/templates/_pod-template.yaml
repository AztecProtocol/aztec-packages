{{- define "chart.podTemplate" }}
metadata:
  labels:
    {{- include "chart.selectorLabels" . | nindent 4 }}
    app: node
  annotations:
    {{- /* Recreate the pods on every upgrade in order to refresh configmaps and secrets */}}
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  {{- if .Values.serviceAccount.create }}
  serviceAccountName: {{ include "chart.serviceAccountName" . }}
  {{- end }}

  {{- if .Values.hostNetwork }}
  dnsPolicy: ClusterFirstWithHostNet
  hostNetwork: true
  {{- end }}

  {{- if .Values.affinity }}
  affinity:
    {{- toYaml .Values.affinity | nindent 4 }}
  {{- end }}

  {{- if .Values.nodeSelector }}
  nodeSelector:
    {{- toYaml .Values.nodeSelector | nindent 4 }}
  {{- end }}

  {{- if .Values.tolerations }}
  tolerations:
    {{- toYaml .Values.tolerations | nindent 4 }}
  {{- end }}

  initContainers:
  {{- if .Values.initContainers }}
    {{- tpl (toYaml .Values.initContainers | nindent 4) $ }}
  {{- end }}
  {{- if or .Values.service.p2p.nodePortEnabled .Values.hostNetwork }}
    - name: init-nodeport
      image: bitnami/kubectl
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      command:
        - sh
        - -c
        - |
          export POD_INDEX=$(echo ${POD_NAME} | awk -F'-' '{print $NF}');

          # If running host network, we don't need to get the node port from the service
          {{- if not .Values.hostNetwork }}
          export EXTERNAL_PORT=$(kubectl get services -l "pod-index in (${POD_INDEX}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
          echo "export EXTERNAL_PORT=$EXTERNAL_PORT" >  /shared/init-nodeport;
          echo "export P2P_PORT=$EXTERNAL_PORT"      >> /shared/init-nodeport;
          {{- end }}

          # Get the external IP of the node
          export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');

          echo "export EXTERNAL_IP=$EXTERNAL_IP" >> /shared/init-nodeport;
          echo "export P2P_IP=$EXTERNAL_IP"      >> /shared/init-nodeport;
          cat /shared/init-nodeport;
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      volumeMounts:
        - name: shared
          mountPath: /shared
  {{- end }}
  containers:
    - name: aztec
      image: "{{ .Values.global.aztecImage.repository }}:{{ .Values.global.aztecImage.tag | default .Chart.AppVersion }}"
      imagePullPolicy: {{ .Values.global.aztecImage.pullPolicy }}
      command:
        - /bin/bash
        - -c
        - |
          {{- if or .Values.service.p2p.nodePortEnabled .Values.hostNetwork }}
          source /shared/init-nodeport;
          {{- else }}
          export P2P_IP=$(hostname -i)
          {{- end }}

          start_cmd=("node" "/usr/src/yarn-project/aztec/dest/bin/index.js" "start" {{ join " " .Values.node.startCmd }})
          source /scripts/setup-otel-resource.sh

          {{- if .Values.node.preStartScript }}
          {{ .Values.node.preStartScript | nindent 10 }}
          {{- end }}

          "${start_cmd[@]}"
      startupProbe:
        httpGet:
          path: /status
          port: {{ .Values.service.httpPort }}
        periodSeconds: {{ .Values.node.startupProbe.periodSeconds }}
        failureThreshold: {{ .Values.node.startupProbe.failureThreshold }}
      livenessProbe:
        httpGet:
          path: /status
          port: {{ .Values.service.httpPort }}
        initialDelaySeconds: 30
        periodSeconds: 5
        timeoutSeconds: 30
        failureThreshold: 3
      volumeMounts:
        - name: shared
          mountPath: /shared
        - name: scripts
          mountPath: /scripts/
        {{- if .Values.node.configMap.extraScriptsEnabled }}
        - name: extra-scripts
          mountPath: /extra-scripts/
        {{- end }}
        {{- if .Values.node.secret.filesEnabled }}
        - name: secrets
          mountPath: /secrets/
        {{- end }}
        {{- if .Values.persistence.enabled }}
        - name: data
          mountPath: {{ .Values.node.storage.dataDirectory }}
        {{- end }}
      envFrom:
        {{- if .Values.node.configMap.envEnabled }}
        - configMapRef:
            name: {{ include "chart.fullname" . }}-env
        {{- end }}
        {{- if .Values.node.secret.envEnabled }}
        - secretRef:
            name: {{ include "chart.fullname" . }}-env
        {{- end }}
      env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: K8S_POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_NAMESPACE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- if .Values.global.aztecNetwork }}
        - name: NETWORK
          value: "{{ .Values.global.aztecNetwork }}"
        {{- else if .Values.global.customAztecNetwork.enabled }}
        - name: REGISTRY_CONTRACT_ADDRESS
          value: "{{ .Values.global.customAztecNetwork.registryContractAddress }}"
        - name: L1_CHAIN_ID
          value: "{{ .Values.global.customAztecNetwork.l1ChainId }}"
        - name: SLASH_FACTORY_CONTRACT_ADDRESS
          value: "{{ .Values.global.customAztecNetwork.slashFactoryAddress }}"
        - name: FEE_ASSET_HANDLER_CONTRACT_ADDRESS
          value: "{{ .Values.global.customAztecNetwork.feeAssetHandlerContractAddress }}"
        {{- end }}
        - name: NODE_OPTIONS
          value: {{ join " " .Values.node.nodeJsOptions | quote }}
        - name: AZTEC_PORT
          value: "{{ .Values.service.httpPort }}"
        - name: AZTEC_ADMIN_PORT
          value: "{{ .Values.service.admin.port }}"
        - name: LOG_LEVEL
          value: "{{ .Values.node.logLevel }}"
        - name: LOG_JSON
          value: "1"
        - name: P2P_ENABLED
          value: "{{ .Values.service.p2p.enabled }}"
        - name: P2P_PORT
          value: "{{ .Values.service.p2p.port }}"
        - name: P2P_QUERY_FOR_IP
          value: "true"
        {{- if gt (len .Values.global.l1ExecutionUrls) 0 }}
        - name: ETHEREUM_HOSTS
          value: {{ join "," .Values.global.l1ExecutionUrls | quote }}
        {{- end }}
        {{- if gt (len .Values.global.l1ConsensusUrls) 0 }}
        - name: L1_CONSENSUS_HOST_URLS
          value: {{ join "," .Values.global.l1ConsensusUrls | quote }}
        - name: L1_CONSENSUS_HOST_API_KEYS
          value: {{ join "," .Values.global.l1ConsensusHostApiKeys | quote }}
        - name: L1_CONSENSUS_HOST_API_KEY_HEADERS
          value: {{ join "," .Values.global.l1ConsensusHostApiKeyHeaders | quote }}
        {{- end }}
        - name: DATA_DIRECTORY
          value: {{ .Values.node.storage.dataDirectory | quote }}
        - name: DATA_STORE_MAP_SIZE_KB
          value: {{ .Values.node.storage.dataStoreMapSize | quote }}
        - name: WS_DB_MAP_SIZE_KB
          value: {{ .Values.node.storage.worldStateMapSize | quote }}
        - name: USE_GCLOUD_LOGGING
          value: {{ .Values.global.useGcloudLogging | quote }}
        {{- if .Values.global.otelCollectorEndpoint }}
        - name: OTEL_EXCLUDE_METRICS
          value: {{ .Values.node.otelExcludeMetrics | quote }}
        - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
          value: "{{ .Values.global.otelCollectorEndpoint }}/v1/metrics"
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: "{{ .Values.global.otelCollectorEndpoint }}/v1/traces"
        - name: OTEL_EXPORTER_OTLP_LOGS_ENDPOINT
          value: "{{ .Values.global.otelCollectorEndpoint }}/v1/logs"
        {{- end }}
        {{- if .Values.node.coinbase }}
        - name: COINBASE
          value: {{ .Values.node.coinbase | quote }}
        - name: PROVER_ID
          value: {{ .Values.node.coinbase | quote }}
        {{- end }}
        {{- range $key, $value := .Values.node.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
      ports:
        - containerPort: {{ .Values.service.httpPort }}
          name: http-rpc
        {{- if .Values.service.admin.enabled }}
        - containerPort: {{ .Values.service.admin.port }}
          name: admin
        {{- end }}
        {{- if .Values.service.p2p.enabled }}
        - containerPort: {{ .Values.service.p2p.port }}
          name: p2p-tcp
        - containerPort: {{ .Values.service.p2p.port }}
          protocol: UDP
          name: p2p-udp
        {{- end }}
      resources:
        {{- toYaml .Values.node.resources | nindent 8 }}
  volumes:
    - name: shared
      emptyDir: {}
    - name: scripts
      configMap:
        name: {{ include "chart.fullname" . }}-scripts
    {{- if .Values.node.configMap.extraScriptsEnabled }}
    - name: extra-scripts
      configMap:
        name: {{ include "chart.fullname" . }}-extra-scripts
    {{- end }}
    {{- if .Values.node.secret.filesEnabled }}
    - name: config
      secret:
        secretName: name: {{ include "chart.fullname" . }}-files
    {{- end }}
    {{- if .Values.persistence.enabled }}
    {{- if .Values.persistence.existingClaim }}
    - name: data
      persistentVolumeClaim:
        claimName: {{ .Values.persistence.existingClaim }}
    {{- else if not .Values.statefulSet.enabled }}
    - name: data
      emptyDir: {}
    {{/* else the statefulSet's volume claim templates is expected to set something up for the pod to use */}}
    {{- end }}
    {{- end }}
{{- end }}
