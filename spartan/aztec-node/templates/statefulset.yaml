apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "chart.fullname" . }}
  replicas: {{ .Values.node.replicas }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  updateStrategy:
    {{- toYaml .Values.node.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
      app: node
  template:
    metadata:
      labels:
        {{- include "chart.selectorLabels" . | nindent 8 }}
        app: node
    spec:
      serviceAccountName: {{ include "chart.serviceAccountName" . }}
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: {{ .Values.hostNetwork }}
      {{- if or .Values.service.p2p.nodePortEnabled .Values.hostNetwork }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - node
              topologyKey: kubernetes.io/hostname
              namespaceSelector: {}
      {{- end }}
      initContainers:
      {{- if .Values.initContainers }}
        {{- tpl (toYaml .Values.initContainers | nindent 8) $ }}
      {{- end }}
      {{- if or .Values.service.p2p.nodePortEnabled .Values.hostNetwork }}
        - name: init-nodeport
          image: bitnami/kubectl
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command:
            - sh
            - -c
            - >
              export POD_INDEX=$(echo ${POD_NAME} | awk -F'-' '{print $NF}');

              # If running host network, we don't need to get the node port from the service
              {{- if not .Values.hostNetwork }}
              export EXTERNAL_PORT=$(kubectl get services -l "pod-index in (${POD_INDEX}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              echo "export EXTERNAL_PORT=$EXTERNAL_PORT" >  /env/init-nodeport;
              echo "export P2P_PORT=$EXTERNAL_PORT"     >> /env/init-nodeport;
              {{- end }}

              # Get the external IP of the node
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');

              echo "export EXTERNAL_IP=$EXTERNAL_IP"     >> /env/init-nodeport;
              echo "export P2P_IP=$EXTERNAL_IP"         >> /env/init-nodeport;
              cat /env/init-nodeport;
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: init-nodeport
              mountPath: /env
      {{- end }}
      containers:
        - name: aztec
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              {{- if or .Values.service.p2p.nodePortEnabled .Values.hostNetwork }}
              source /env/init-nodeport;
              {{- else }}
              export P2P_IP=$(hostname -i)
              {{- end }}

              start_cmd=("node" "/usr/src/yarn-project/aztec/dest/bin/index.js" "start")
              pod_index=$(echo $K8S_POD_NAME | awk -F'-' '{print $NF}')

              start_cmd+=({{ join " " .Values.node.startCmd }})

              {{- if .Values.node.preStartScript }}
              {{ .Values.node.preStartScript | nindent 14 }}

              {{- end }}
              "${start_cmd[@]}"
          startupProbe:
            httpGet:
              path: /status
              port: {{ .Values.service.httpPort }}
            periodSeconds: {{ .Values.node.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.node.startupProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              path: /status
              port: {{ .Values.service.httpPort }}
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 3
          volumeMounts:
            - name: storage
              mountPath: {{ .Values.node.storage.dataDirectory }}
            {{- if or .Values.service.p2p.nodePortEnabled .Values.hostNetwork }}
            - name: init-nodeport
              mountPath: /env
            {{- end }}
          envFrom:
            {{- if .Values.node.configMapEnabled }}
            - configMapRef:
                name: {{ include "chart.fullname" . }}
            {{- end }}
            {{- if .Values.node.secretEnabled }}
            - secretRef:
                name: {{ include "chart.fullname" . }}
            {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: K8S_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_NAMESPACE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.global.aztecNetwork }}
            - name: NETWORK
              value: "{{ .Values.global.aztecNetwork }}"
            {{- else if .Values.global.customAztecNetwork.enabled }}
            - name: REGISTRY_CONTRACT_ADDRESS
              value: "{{ .Values.global.customAztecNetwork.registryContractAddress }}"
            - name: L1_CHAIN_ID
              value: "{{ .Values.global.customAztecNetwork.l1ChainId }}"
            - name: SLASH_FACTORY_ADDRESS
              value: "{{ .Values.global.customAztecNetwork.slashFactoryAddress }}"
            - name: FEE_ASSET_HANDLER_CONTRACT_ADDRESS
              value: "{{ .Values.global.customAztecNetwork.feeAssetHandlerContractAddress }}"
            {{- end }}
            - name: NODE_OPTIONS
              value: {{ join " " .Values.node.nodeJsOptions | quote }}
            - name: AZTEC_PORT
              value: "{{ .Values.service.httpPort }}"
            - name: AZTEC_ADMIN_PORT
              value: "{{ .Values.service.admin.port }}"
            - name: LOG_LEVEL
              value: "{{ .Values.node.logLevel }}"
            - name: LOG_JSON
              value: "1"
            - name: P2P_ENABLED
              value: "{{ .Values.service.p2p.enabled }}"
            - name: P2P_PORT
              value: "{{ .Values.service.p2p.port }}"
            - name: P2P_QUERY_FOR_IP
              value: "true"
            {{- if gt (len .Values.global.l1ExecutionUrls) 0 }}
            - name: ETHEREUM_HOSTS
              value: {{ join "," .Values.global.l1ExecutionUrls | quote }}
            {{- end }}
            {{- if gt (len .Values.global.l1ConsensusUrls) 0 }}
            - name: L1_CONSENSUS_HOST_URLS
              value: {{ join "," .Values.global.l1ConsensusUrls | quote }}
            - name: L1_CONSENSUS_HOST_API_KEYS
              value: {{ join "," .Values.global.l1ConsensusHostApiKeys | quote }}
            - name: L1_CONSENSUS_HOST_API_KEY_HEADERS
              value: {{ join "," .Values.global.l1ConsensusHostApiKeyHeaders | quote }}
            {{- end }}
            - name: DATA_DIRECTORY
              value: {{ .Values.node.storage.dataDirectory | quote }}
            - name: DATA_STORE_MAP_SIZE_KB
              value: {{ .Values.node.storage.dataStoreMapSize | quote }}
            - name: WS_DB_MAP_SIZE_KB
              value: {{ .Values.node.storage.worldStateMapSize | quote }}
            - name: USE_GCLOUD_LOGGING
              value: {{ .Values.node.metrics.useGcloudLogging | quote }}
            {{- if .Values.node.metrics.otelCollectorEndpoint }}
            - name: OTEL_EXCLUDE_METRICS
              value: {{ .Values.node.metrics.otelExcludeMetrics | quote }}
            - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
              value: "{{ .Values.node.metrics.otelCollectorEndpoint }}/v1/metrics"
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: "{{ .Values.node.metrics.otelCollectorEndpoint }}/v1/traces"
            - name: OTEL_EXPORTER_OTLP_LOGS_ENDPOINT
              value: "{{ .Values.node.metrics.otelCollectorEndpoint }}/v1/logs"
            {{- end }}
            {{- if .Values.node.coinbase }}
            - name: COINBASE
              value: {{ .Values.node.coinbase | quote }}
            - name: PROVER_ID
              value: {{ .Values.node.coinbase | quote }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.service.httpPort }}
              name: http-rpc
            {{- if .Values.service.admin.enabled }}
            - containerPort: {{ .Values.service.admin.port }}
              name: admin
            {{- end }}
            {{- if .Values.service.p2p.enabled }}
            - containerPort: {{ .Values.service.p2p.port }}
              name: p2p-tcp
            - containerPort: {{ .Values.service.p2p.port }}
              protocol: UDP
              name: p2p-udp
            {{- end }}
          resources:
            {{- toYaml .Values.node.resources | nindent 12 }}
      volumes:
        {{- if or .Values.service.p2p.nodePortEnabled .Values.hostNetwork }}
        - name: init-nodeport
          emptyDir: {}
        {{- end }}
  {{- if not .Values.persistence.enabled }}
        - name: storage
          emptyDir: {}
  {{- else if .Values.persistence.existingClaim }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
  {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: storage
      annotations:
        {{- toYaml .Values.persistence.annotations | nindent 10 }}
    spec:
      accessModes:
        {{- toYaml .Values.persistence.accessModes | nindent 12 }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote}}
      storageClassName: {{ .Values.persistence.storageClassName }}
      {{- if .Values.persistence.selector }}
      selector:
        {{- toYaml .Values.persistence.selector | nindent 12 }}
      {{- end }}
  {{- end }}
