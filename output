diff --git a/barretenberg/acir_tests/sol-test/yarn.lock b/barretenberg/acir_tests/sol-test/yarn.lock
index af80282ea9..9afd4540c9 100644
Binary files a/barretenberg/acir_tests/sol-test/yarn.lock and b/barretenberg/acir_tests/sol-test/yarn.lock differ
diff --git a/barretenberg/cpp/src/barretenberg/bb/main.cpp b/barretenberg/cpp/src/barretenberg/bb/main.cpp
index 8fe76c8e7a..9ca094bae7 100644
--- a/barretenberg/cpp/src/barretenberg/bb/main.cpp
+++ b/barretenberg/cpp/src/barretenberg/bb/main.cpp
@@ -196,7 +196,14 @@ bool proveAndVerifyHonkAcirFormat(acir_format::AcirFormat constraint_system, aci
     auto proof = prover.construct_proof();
 
     // Verify Honk proof
+    info("Printing VK from actual instance");
+
     auto verification_key = std::make_shared<VerificationKey>(prover.instance->proving_key);
+    typename Flavor::CommitmentLabels commitment_labels;
+    info("PRINTING THE VKEY IN PROVE AND VERIFY FLOW");
+    for (auto [label, key] : zip_view(commitment_labels.get_precomputed(), verification_key->get_all())) {
+        info("label: ", label, " value: ", key);
+    }
     Verifier verifier{ verification_key };
 
     return verifier.verify_proof(proof);
@@ -1093,6 +1100,11 @@ template <IsUltraFlavor Flavor> bool verify_honk(const std::string& proof_path,
     auto vk = std::make_shared<VerificationKey>(from_buffer<VerificationKey>(read_file(vk_path)));
     vk->pcs_verification_key = std::make_shared<VerifierCommitmentKey>();
     Verifier verifier{ vk };
+    typename Flavor::CommitmentLabels commitment_labels;
+    info("PRINTING THE VKEY IN  VERIFY ULTRA HONK FLOW");
+    for (auto [label, key] : zip_view(commitment_labels.get_precomputed(), vk->get_all())) {
+        info("label: ", label, " value: ", key);
+    }
 
     bool verified = verifier.verify_proof(proof);
 
diff --git a/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp b/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp
index 387c11e760..4bec617ffc 100644
--- a/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp
+++ b/barretenberg/cpp/src/barretenberg/dsl/acir_format/acir_integration.test.cpp
@@ -367,6 +367,7 @@ INSTANTIATE_TEST_SUITE_P(AcirTests,
                                          "unconstrained_empty",
                                          "unit_value",
                                          "unsafe_range_constraint",
+                                         "verify_honk_proof",
                                          "witness_compression",
                                          "xor"));
 
@@ -453,6 +454,29 @@ TEST_F(AcirIntegrationTest, DISABLED_Databus)
     EXPECT_TRUE(prove_and_verify_honk<Flavor>(builder));
 }
 
+/**
+ * @brief A basic test of a circuit generated in noir that makes use of the databus
+ *
+ */
+TEST_F(AcirIntegrationTest, DISABLED_Honk_Constraint)
+{
+    using Flavor = UltraFlavor;
+    using Builder = Flavor::CircuitBuilder;
+
+    std::string test_name = "verify_honk_proof";
+    info("Test: ", test_name);
+    acir_format::AcirProgram acir_program = get_program_data_from_test_file(test_name, true);
+
+    // Construct a bberg circuit from the acir representation
+    Builder builder = acir_format::create_circuit<Builder>(acir_program.constraints, 0, acir_program.witness);
+
+    // This prints a summary of the types of gates in the circuit
+    builder.blocks.summarize();
+
+    // Construct and verify Honk proof
+    EXPECT_TRUE(prove_and_verify_honk<Flavor>(builder));
+}
+
 /**
  * @brief Test a program that uses two databus calldata columns
  * @details In addition to checking that a proof of the resulting circuit verfies, check that the specific structure of
diff --git a/barretenberg/cpp/src/barretenberg/dsl/acir_format/honk_recursion_constraint.cpp b/barretenberg/cpp/src/barretenberg/dsl/acir_format/honk_recursion_constraint.cpp
index da877ebb2d..6ff16c6175 100644
--- a/barretenberg/cpp/src/barretenberg/dsl/acir_format/honk_recursion_constraint.cpp
+++ b/barretenberg/cpp/src/barretenberg/dsl/acir_format/honk_recursion_constraint.cpp
@@ -36,6 +36,12 @@ void create_dummy_vkey_and_proof(Builder& builder,
     // Set vkey->circuit_size correctly based on the proof size
     size_t num_frs_comm = bb::field_conversion::calc_num_bn254_frs<UltraFlavor::Commitment>();
     size_t num_frs_fr = bb::field_conversion::calc_num_bn254_frs<UltraFlavor::FF>();
+    info("is the first assert true: ",
+         (input.proof.size() - HonkRecursionConstraint::inner_public_input_offset -
+          UltraFlavor::NUM_WITNESS_ENTITIES * num_frs_comm - UltraFlavor::NUM_ALL_ENTITIES * num_frs_fr -
+          2 * num_frs_comm) %
+                 (num_frs_comm + num_frs_fr * UltraFlavor::BATCHED_RELATION_PARTIAL_LENGTH) ==
+             0);
     assert((input.proof.size() - HonkRecursionConstraint::inner_public_input_offset -
             UltraFlavor::NUM_WITNESS_ENTITIES * num_frs_comm - UltraFlavor::NUM_ALL_ENTITIES * num_frs_fr -
             2 * num_frs_comm) %
@@ -102,6 +108,7 @@ void create_dummy_vkey_and_proof(Builder& builder,
         offset += 4;
     }
 
+    info("here ", Flavor::BATCHED_RELATION_PARTIAL_LENGTH);
     // now the univariates, which can just be 0s (7*CONST_PROOF_SIZE_LOG_N Frs)
     for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N * Flavor::BATCHED_RELATION_PARTIAL_LENGTH; i++) {
         builder.assert_equal(builder.add_variable(fr::random_element()), proof_fields[offset].witness_index);
@@ -135,6 +142,7 @@ void create_dummy_vkey_and_proof(Builder& builder,
         builder.assert_equal(builder.add_variable(frs[3]), proof_fields[offset + 3].witness_index);
         offset += 4;
     }
+    info("is the last assert true: ", offset == input.proof.size() + input.public_inputs.size());
     ASSERT(offset == input.proof.size() + input.public_inputs.size());
 }
 
@@ -191,8 +199,10 @@ AggregationObjectIndices create_honk_recursion_constraints(Builder& builder,
     if (!has_valid_witness_assignments) {
         create_dummy_vkey_and_proof(builder, input, key_fields, proof_fields);
     }
+
     // Recursively verify the proof
     auto vkey = std::make_shared<RecursiveVerificationKey>(builder, key_fields);
+    Flavor::CommitmentLabels commitment_labels;
     RecursiveVerifier verifier(&builder, vkey);
     aggregation_state_ct input_agg_obj = bb::stdlib::recursion::convert_witness_indices_to_agg_obj<Builder, bn254>(
         builder, input_aggregation_object_indices);
diff --git a/barretenberg/cpp/src/barretenberg/polynomials/pow.hpp b/barretenberg/cpp/src/barretenberg/polynomials/pow.hpp
index 6851f79b1d..9719c95b8d 100644
--- a/barretenberg/cpp/src/barretenberg/polynomials/pow.hpp
+++ b/barretenberg/cpp/src/barretenberg/polynomials/pow.hpp
@@ -64,20 +64,20 @@ template <typename FF> struct PowPolynomial {
      */
     FF univariate_eval(FF challenge) const { return (FF(1) + (challenge * (betas[current_element_idx] - FF(1)))); };
 
-    /**
-     * @brief Evaluate  \f$ ((1−X_{i}) + X_{i}\cdot \beta_{i})\f$ at the challenge point \f$ X_{i}=u_{i} \f$.
-     */
-    template <typename Bool> FF univariate_eval(const FF& challenge, const Bool& dummy_round) const
-    {
-        FF beta_or_dummy;
-        if (!dummy_round.get_value()) {
-            beta_or_dummy = betas[current_element_idx];
-        } else {
-            beta_or_dummy = FF::from_witness(challenge.get_context(), 1);
-        }
-        FF beta_val = FF::conditional_assign(dummy_round, FF::from_witness(challenge.get_context(), 1), beta_or_dummy);
-        return (FF(1) + (challenge * (beta_val - FF(1))));
-    }
+    // /**
+    //  * @brief Evaluate  \f$ ((1−X_{i}) + X_{i}\cdot \beta_{i})\f$ at the challenge point \f$ X_{i}=u_{i} \f$.
+    //  */
+    // template <typename Bool> FF univariate_eval(const FF& challenge, const Bool& dummy_round) const
+    // {
+    //     FF beta_or_dummy;
+    //     if (!dummy_round.get_value()) {
+    //         beta_or_dummy = betas[current_element_idx];
+    //     } else {
+    //         beta_or_dummy = FF::from_witness(challenge.get_context(), 1);
+    //     }
+    //     FF beta_val = FF::conditional_assign(dummy_round, FF::from_witness(challenge.get_context(), 1),
+    //     beta_or_dummy); return (FF(1) + (challenge * (beta_val - FF(1))));
+    // }
 
     /**
      * @brief Partially evaluate the \f$pow_{\beta} \f$-polynomial at the new challenge and update \f$ c_i \f$
@@ -101,7 +101,7 @@ template <typename FF> struct PowPolynomial {
      */
     template <typename Builder> void partially_evaluate(const FF& challenge, const stdlib::bool_t<Builder>& dummy)
     {
-        FF current_univariate_eval = univariate_eval(challenge, dummy);
+        FF current_univariate_eval = univariate_eval(challenge);
         // If dummy round, make no update to the partial_evaluation_result
         partial_evaluation_result = FF::conditional_assign(
             dummy, partial_evaluation_result, partial_evaluation_result * current_univariate_eval);
@@ -114,9 +114,10 @@ template <typename FF> struct PowPolynomial {
      * \ell)\f$ for \f$ \ell =0,\ldots,2^{d}-1\f$.
      *
      */
-    BB_PROFILE void compute_values()
+    BB_PROFILE void compute_values(std::optional<size_t> subspan = std::nullopt)
     {
-        size_t pow_size = 1 << betas.size();
+
+        size_t pow_size = subspan.has_value() ? 1 << subspan.value() : 1 << betas.size();
         info("size of pow", pow_size);
         pow_betas = std::vector<FF>(pow_size);
 
diff --git a/barretenberg/cpp/src/barretenberg/stdlib/honk_recursion/verifier/verifier.test.cpp b/barretenberg/cpp/src/barretenberg/stdlib/honk_recursion/verifier/verifier.test.cpp
index e37cc16289..cd101e5ffe 100644
--- a/barretenberg/cpp/src/barretenberg/stdlib/honk_recursion/verifier/verifier.test.cpp
+++ b/barretenberg/cpp/src/barretenberg/stdlib/honk_recursion/verifier/verifier.test.cpp
@@ -126,7 +126,9 @@ template <typename RecursiveFlavor> class RecursiveVerifierTest : public testing
     static void test_independent_vk_hash()
     {
         // Retrieves the trace blocks (each consisting of a specific gate) from the recursive verifier circuit
-        auto get_blocks = [](size_t inner_size) { // Create an arbitrary inner circuit
+        auto get_blocks = [](size_t inner_size)
+            -> std::tuple<typename OuterBuilder::GateBlocks, std::shared_ptr<typename OuterFlavor::VerificationKey>> {
+            // Create an arbitrary inner circuit
             auto inner_circuit = create_inner_circuit(inner_size);
 
             // Generate a proof over the inner circuit
@@ -142,7 +144,12 @@ template <typename RecursiveFlavor> class RecursiveVerifierTest : public testing
             [[maybe_unused]] auto pairing_points = verifier.verify_proof(
                 inner_proof,
                 init_default_aggregation_state<OuterBuilder, typename RecursiveFlavor::Curve>(outer_circuit));
-            return outer_circuit.blocks;
+
+            auto outer_instance = std::make_shared<OuterProverInstance>(outer_circuit);
+            auto outer_verification_key =
+                std::make_shared<typename OuterFlavor::VerificationKey>(outer_instance->proving_key);
+
+            return { outer_circuit.blocks, outer_verification_key };
         };
 
         bool broke(false);
@@ -156,12 +163,15 @@ template <typename RecursiveFlavor> class RecursiveVerifierTest : public testing
             }
         };
 
-        auto blocks_10 = get_blocks(10);
-        auto blocks_11 = get_blocks(11);
+        auto [blocks_10, verification_key_10] = get_blocks(10);
+        auto [blocks_11, verification_key_11] = get_blocks(11);
+
         size_t block_idx = 0;
         for (auto [b_10, b_11] : zip_view(blocks_10.get(), blocks_11.get())) {
             info("block index: ", block_idx);
             size_t sel_idx = 0;
+            EXPECT_TRUE(b_10.selectors.size() == 13);
+            EXPECT_TRUE(b_11.selectors.size() == 13);
             for (auto [p_10, p_11] : zip_view(b_10.selectors, b_11.selectors)) {
 
                 info("sel index: ", sel_idx);
@@ -171,6 +181,18 @@ template <typename RecursiveFlavor> class RecursiveVerifierTest : public testing
             block_idx++;
         }
 
+        typename OuterFlavor::CommitmentLabels labels;
+        for (auto [vk_10, vk_11, label] :
+             zip_view(verification_key_10->get_all(), verification_key_11->get_all(), labels.get_precomputed())) {
+            if (vk_10 != vk_11) {
+                broke = true;
+                info("Mismatch verification key label: ", label, " left: ", vk_10, " right: ", vk_11);
+            }
+        }
+
+        EXPECT_TRUE(verification_key_10->circuit_size == verification_key_11->circuit_size);
+        EXPECT_TRUE(verification_key_10->num_public_inputs == verification_key_11->num_public_inputs);
+
         EXPECT_FALSE(broke);
     }
 
@@ -192,6 +214,10 @@ template <typename RecursiveFlavor> class RecursiveVerifierTest : public testing
         // Create a recursive verification circuit for the proof of the inner circuit
         OuterBuilder outer_circuit;
         RecursiveVerifier verifier{ &outer_circuit, verification_key };
+        typename RecursiveFlavor::CommitmentLabels commitment_labels;
+        for (auto [label, key] : zip_view(commitment_labels.get_precomputed(), verifier.key->get_all())) {
+            info("label: ", label, " value: ", key.get_value());
+        }
         aggregation_state<typename RecursiveFlavor::Curve> agg_obj =
             init_default_aggregation_state<OuterBuilder, typename RecursiveFlavor::Curve>(outer_circuit);
         auto pairing_points = verifier.verify_proof(inner_proof, agg_obj);
diff --git a/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_keccak.hpp b/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_keccak.hpp
index 48714d7993..19bc19d550 100644
--- a/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_keccak.hpp
+++ b/barretenberg/cpp/src/barretenberg/stdlib_circuit_builders/ultra_keccak.hpp
@@ -14,6 +14,8 @@
 #include "barretenberg/relations/elliptic_relation.hpp"
 #include "barretenberg/relations/logderiv_lookup_relation.hpp"
 #include "barretenberg/relations/permutation_relation.hpp"
+#include "barretenberg/relations/poseidon2_external_relation.hpp"
+#include "barretenberg/relations/poseidon2_internal_relation.hpp"
 #include "barretenberg/relations/relation_parameters.hpp"
 #include "barretenberg/relations/ultra_arithmetic_relation.hpp"
 #include "barretenberg/stdlib_circuit_builders/ultra_circuit_builder.hpp"
@@ -36,10 +38,10 @@ class UltraKeccakFlavor {
     static constexpr size_t NUM_WIRES = CircuitBuilder::NUM_WIRES;
     // The number of multivariate polynomials on which a sumcheck prover sumcheck operates (including shifts). We often
     // need containers of this size to hold related data, so we choose a name more agnostic than `NUM_POLYNOMIALS`.
-    static constexpr size_t NUM_ALL_ENTITIES = 42;
+    static constexpr size_t NUM_ALL_ENTITIES = 44;
     // The number of polynomials precomputed to describe a circuit and to aid a prover in constructing a satisfying
     // assignment of witnesses. We again choose a neutral name.
-    static constexpr size_t NUM_PRECOMPUTED_ENTITIES = 25;
+    static constexpr size_t NUM_PRECOMPUTED_ENTITIES = 27;
     // The total number of witness entities not including shifts.
     static constexpr size_t NUM_WITNESS_ENTITIES = 8;
     // Total number of folded polynomials, which is just all polynomials except the shifts
@@ -51,10 +53,12 @@ class UltraKeccakFlavor {
     template <typename FF>
     using Relations_ = std::tuple<bb::UltraArithmeticRelation<FF>,
                                   bb::UltraPermutationRelation<FF>,
-                                  bb::LogDerivLookupRelation<FF>,
                                   bb::DeltaRangeConstraintRelation<FF>,
                                   bb::EllipticRelation<FF>,
-                                  bb::AuxiliaryRelation<FF>>;
+                                  bb::AuxiliaryRelation<FF>,
+                                  bb::LogDerivLookupRelation<FF>,
+                                  bb::Poseidon2ExternalRelation<FF>,
+                                  bb::Poseidon2InternalRelation<FF>>;
     using Relations = Relations_<FF>;
 
     static constexpr size_t MAX_PARTIAL_RELATION_LENGTH = compute_max_partial_relation_length<Relations>();
@@ -98,37 +102,51 @@ class UltraKeccakFlavor {
       public:
         using DataType = DataType_;
         DEFINE_FLAVOR_MEMBERS(DataType,
-                              q_m,            // column 0
-                              q_c,            // column 1
-                              q_l,            // column 2
-                              q_r,            // column 3
-                              q_o,            // column 4
-                              q_4,            // column 5
-                              q_arith,        // column 6
-                              q_delta_range,  // column 7
-                              q_elliptic,     // column 8
-                              q_aux,          // column 9
-                              q_lookup,       // column 10
-                              sigma_1,        // column 11
-                              sigma_2,        // column 12
-                              sigma_3,        // column 13
-                              sigma_4,        // column 14
-                              id_1,           // column 15
-                              id_2,           // column 16
-                              id_3,           // column 17
-                              id_4,           // column 18
-                              table_1,        // column 19
-                              table_2,        // column 20
-                              table_3,        // column 21
-                              table_4,        // column 22
-                              lagrange_first, // column 23
-                              lagrange_last)  // column 24
+                              q_m,                  // column 0
+                              q_c,                  // column 1
+                              q_l,                  // column 2
+                              q_r,                  // column 3
+                              q_o,                  // column 4
+                              q_4,                  // column 5
+                              q_arith,              // column 6
+                              q_delta_range,        // column 7
+                              q_elliptic,           // column 8
+                              q_aux,                // column 9
+                              q_lookup,             // column 10
+                              q_poseidon2_external, // column 11
+                              q_poseidon2_internal, // column 12
+                              sigma_1,              // column 11
+                              sigma_2,              // column 12
+                              sigma_3,              // column 13
+                              sigma_4,              // column 14
+                              id_1,                 // column 15
+                              id_2,                 // column 16
+                              id_3,                 // column 17
+                              id_4,                 // column 18
+                              table_1,              // column 19
+                              table_2,              // column 20
+                              table_3,              // column 21
+                              table_4,              // column 22
+                              lagrange_first,       // column 23
+                              lagrange_last)        // column 24
 
         static constexpr CircuitType CIRCUIT_TYPE = CircuitBuilder::CIRCUIT_TYPE;
 
         auto get_selectors()
         {
-            return RefArray{ q_m, q_c, q_l, q_r, q_o, q_4, q_arith, q_delta_range, q_elliptic, q_aux, q_lookup };
+            return RefArray{ q_m,
+                             q_c,
+                             q_l,
+                             q_r,
+                             q_o,
+                             q_4,
+                             q_arith,
+                             q_delta_range,
+                             q_elliptic,
+                             q_aux,
+                             q_lookup,
+                             q_poseidon2_external,
+                             q_poseidon2_internal };
         };
         auto get_sigma_polynomials() { return RefArray{ sigma_1, sigma_2, sigma_3, sigma_4 }; };
         auto get_id_polynomials() { return RefArray{ id_1, id_2, id_3, id_4 }; };
@@ -392,6 +410,8 @@ class UltraKeccakFlavor {
                         const Commitment& q_elliptic,
                         const Commitment& q_aux,
                         const Commitment& q_lookup,
+                        const Commitment& q_poseidon2_external,
+                        const Commitment& q_poseidon2_internal,
                         const Commitment& sigma_1,
                         const Commitment& sigma_2,
                         const Commitment& sigma_3,
@@ -422,6 +442,8 @@ class UltraKeccakFlavor {
             this->q_elliptic = q_elliptic;
             this->q_aux = q_aux;
             this->q_lookup = q_lookup;
+            this->q_poseidon2_external = q_poseidon2_external;
+            this->q_poseidon2_internal = q_poseidon2_internal;
             this->sigma_1 = sigma_1;
             this->sigma_2 = sigma_2;
             this->sigma_3 = sigma_3;
@@ -539,6 +561,8 @@ class UltraKeccakFlavor {
             q_elliptic = "Q_ELLIPTIC";
             q_aux = "Q_AUX";
             q_lookup = "Q_LOOKUP";
+            q_poseidon2_external = "Q_POSEIDON2_EXTERNAL";
+            q_poseidon2_internal = "Q_POSEIDON2_INTERNAL";
             sigma_1 = "SIGMA_1";
             sigma_2 = "SIGMA_2";
             sigma_3 = "SIGMA_3";
@@ -578,6 +602,8 @@ class UltraKeccakFlavor {
             this->q_elliptic = verification_key->q_elliptic;
             this->q_aux = verification_key->q_aux;
             this->q_lookup = verification_key->q_lookup;
+            this->q_poseidon2_external = verification_key->q_poseidon2_external;
+            this->q_poseidon2_internal = verification_key->q_poseidon2_internal;
             this->sigma_1 = verification_key->sigma_1;
             this->sigma_2 = verification_key->sigma_2;
             this->sigma_3 = verification_key->sigma_3;
diff --git a/barretenberg/cpp/src/barretenberg/sumcheck/sumcheck.hpp b/barretenberg/cpp/src/barretenberg/sumcheck/sumcheck.hpp
index 5fb71170a4..31560aa24e 100644
--- a/barretenberg/cpp/src/barretenberg/sumcheck/sumcheck.hpp
+++ b/barretenberg/cpp/src/barretenberg/sumcheck/sumcheck.hpp
@@ -187,13 +187,8 @@ template <typename Flavor> class SumcheckProver {
         info(multivariate_n);
         info(gate_challenges.size());
 
-        std::vector<FF> gate_challenges_subspan;
-        for (size_t i = 0; i < multivariate_d; i++) {
-            gate_challenges_subspan.emplace_back(gate_challenges[i]);
-        }
-
-        bb::PowPolynomial<FF> pow_univariate(gate_challenges_subspan);
-        pow_univariate.compute_values();
+        bb::PowPolynomial<FF> pow_univariate(gate_challenges);
+        pow_univariate.compute_values(multivariate_d);
 
         std::vector<FF> multivariate_challenge;
         multivariate_challenge.reserve(multivariate_d);
@@ -392,11 +387,7 @@ template <typename Flavor> class SumcheckVerifier {
     {
         bool verified(true);
 
-        std::vector<FF> gate_challenges_subspan;
-        for (size_t i = 0; i < multivariate_d; i++) {
-            gate_challenges_subspan.emplace_back(gate_challenges[i]);
-        }
-        bb::PowPolynomial<FF> pow_univariate(gate_challenges_subspan);
+        bb::PowPolynomial<FF> pow_univariate(gate_challenges);
         // All but final round.
         // target_total_sum is initialized to zero then mutated in place.
 
diff --git a/barretenberg/cpp/src/barretenberg/ultra_honk/ultra_honk.test.cpp b/barretenberg/cpp/src/barretenberg/ultra_honk/ultra_honk.test.cpp
index de79a7dbd8..74af801bc6 100644
--- a/barretenberg/cpp/src/barretenberg/ultra_honk/ultra_honk.test.cpp
+++ b/barretenberg/cpp/src/barretenberg/ultra_honk/ultra_honk.test.cpp
@@ -8,6 +8,7 @@
 #include "barretenberg/stdlib_circuit_builders/plookup_tables/fixed_base/fixed_base.hpp"
 #include "barretenberg/stdlib_circuit_builders/plookup_tables/types.hpp"
 #include "barretenberg/stdlib_circuit_builders/ultra_circuit_builder.hpp"
+#include "barretenberg/stdlib_circuit_builders/ultra_keccak.hpp"
 #include "barretenberg/sumcheck/sumcheck_round.hpp"
 #include "barretenberg/ultra_honk/ultra_prover.hpp"
 #include "barretenberg/ultra_honk/ultra_verifier.hpp"
@@ -16,8 +17,8 @@
 
 using namespace bb;
 
-using ProverInstance = ProverInstance_<UltraFlavor>;
-using VerificationKey = UltraFlavor::VerificationKey;
+using ProverInstance = ProverInstance_<UltraKeccakFlavor>;
+using VerificationKey = UltraKeccakFlavor::VerificationKey;
 
 std::vector<uint32_t> add_variables(auto& circuit_builder, std::vector<bb::fr> variables)
 {
@@ -31,9 +32,9 @@ std::vector<uint32_t> add_variables(auto& circuit_builder, std::vector<bb::fr> v
 void prove_and_verify(auto& circuit_builder, bool expected_result)
 {
     auto instance = std::make_shared<ProverInstance>(circuit_builder);
-    UltraProver prover(instance);
+    UltraKeccakProver prover(instance);
     auto verification_key = std::make_shared<VerificationKey>(instance->proving_key);
-    UltraVerifier verifier(verification_key);
+    UltraKeccakVerifier verifier(verification_key);
     auto proof = prover.construct_proof();
     bool verified = verifier.verify_proof(proof);
     EXPECT_EQ(verified, expected_result);
@@ -65,7 +66,7 @@ TEST_F(UltraHonkTests, ANonZeroPolynomialIsAGoodPolynomial)
     auto circuit_builder = UltraCircuitBuilder();
 
     auto instance = std::make_shared<ProverInstance>(circuit_builder);
-    UltraProver prover(instance);
+    UltraKeccakProver prover(instance);
     auto proof = prover.construct_proof();
     auto& polynomials = instance->proving_key.polynomials;
 
@@ -97,9 +98,9 @@ TEST_F(UltraHonkTests, StructuredTrace)
     // Construct an instance with a structured execution trace
     TraceStructure trace_structure = TraceStructure::SMALL_TEST;
     auto instance = std::make_shared<ProverInstance>(builder, trace_structure);
-    UltraProver prover(instance);
+    UltraKeccakProver prover(instance);
     auto verification_key = std::make_shared<VerificationKey>(instance->proving_key);
-    UltraVerifier verifier(verification_key);
+    UltraKeccakVerifier verifier(verification_key);
     auto proof = prover.construct_proof();
     EXPECT_TRUE(verifier.verify_proof(proof));
 }
@@ -223,9 +224,9 @@ TEST_F(UltraHonkTests, LookupFailure)
     };
 
     auto prove_and_verify = [](auto& instance) {
-        UltraProver prover(instance);
+        UltraKeccakProver prover(instance);
         auto verification_key = std::make_shared<VerificationKey>(instance->proving_key);
-        UltraVerifier verifier(verification_key);
+        UltraKeccakVerifier verifier(verification_key);
         auto proof = prover.construct_proof();
         return verifier.verify_proof(proof);
     };
diff --git a/barretenberg/sol/src/ultra/keys/Add2UltraVerificationKey.sol b/barretenberg/sol/src/ultra/keys/Add2UltraVerificationKey.sol
index 27f1983ed5..7dd4f3538c 100644
--- a/barretenberg/sol/src/ultra/keys/Add2UltraVerificationKey.sol
+++ b/barretenberg/sol/src/ultra/keys/Add2UltraVerificationKey.sol
@@ -1,11 +1,11 @@
-// Verification Key Hash: f7bbd1b4758c8616f966f56728b3d7127a0d1ca6763cbaf70b4719914be476bd
+// Verification Key Hash: 588e04b60b4f877a26815bd230e7bc0f2b6e38aaa2c517c889a380e0203d228c
 // SPDX-License-Identifier: Apache-2.0
 // Copyright 2022 Aztec
 pragma solidity >=0.8.4;
 
 library Add2UltraVerificationKey {
     function verificationKeyHash() internal pure returns (bytes32) {
-        return 0xf7bbd1b4758c8616f966f56728b3d7127a0d1ca6763cbaf70b4719914be476bd;
+        return 0x588e04b60b4f877a26815bd230e7bc0f2b6e38aaa2c517c889a380e0203d228c;
     }
 
     function loadVerificationKey(uint256 _vk, uint256 _omegaInverseLoc) internal pure {
diff --git a/barretenberg/sol/src/ultra/keys/BlakeUltraVerificationKey.sol b/barretenberg/sol/src/ultra/keys/BlakeUltraVerificationKey.sol
index b8a1d2efd6..9308666355 100644
--- a/barretenberg/sol/src/ultra/keys/BlakeUltraVerificationKey.sol
+++ b/barretenberg/sol/src/ultra/keys/BlakeUltraVerificationKey.sol
@@ -1,11 +1,11 @@
-// Verification Key Hash: 7370a14d9a35deb926608bdc13693b06292d2f66052be3dd6d13d35441270318
+// Verification Key Hash: 5218464f67341f763fdbf1a989bbbb0f6533c7e2919c58921d52c378610838fc
 // SPDX-License-Identifier: Apache-2.0
 // Copyright 2022 Aztec
 pragma solidity >=0.8.4;
 
 library BlakeUltraVerificationKey {
     function verificationKeyHash() internal pure returns (bytes32) {
-        return 0x7370a14d9a35deb926608bdc13693b06292d2f66052be3dd6d13d35441270318;
+        return 0x5218464f67341f763fdbf1a989bbbb0f6533c7e2919c58921d52c378610838fc;
     }
 
     function loadVerificationKey(uint256 _vk, uint256 _omegaInverseLoc) internal pure {
diff --git a/barretenberg/sol/src/ultra/keys/EcdsaUltraVerificationKey.sol b/barretenberg/sol/src/ultra/keys/EcdsaUltraVerificationKey.sol
index 82e67a786f..6159865490 100644
--- a/barretenberg/sol/src/ultra/keys/EcdsaUltraVerificationKey.sol
+++ b/barretenberg/sol/src/ultra/keys/EcdsaUltraVerificationKey.sol
@@ -1,11 +1,11 @@
-// Verification Key Hash: 3b1c156f02c5934c94573e30a9d55a6398e8d1f616136797c008194d26892a55
+// Verification Key Hash: 83001df02de0e49c3cde502f6162d6bfccb87978b28be03b851cc00a7bfa38d9
 // SPDX-License-Identifier: Apache-2.0
 // Copyright 2022 Aztec
 pragma solidity >=0.8.4;
 
 library EcdsaUltraVerificationKey {
     function verificationKeyHash() internal pure returns (bytes32) {
-        return 0x3b1c156f02c5934c94573e30a9d55a6398e8d1f616136797c008194d26892a55;
+        return 0x83001df02de0e49c3cde502f6162d6bfccb87978b28be03b851cc00a7bfa38d9;
     }
 
     function loadVerificationKey(uint256 _vk, uint256 _omegaInverseLoc) internal pure {
diff --git a/l1-contracts/src/core/libraries/ConstantsGen.sol b/l1-contracts/src/core/libraries/ConstantsGen.sol
index a0863663b5..7d3ed2cf78 100644
--- a/l1-contracts/src/core/libraries/ConstantsGen.sol
+++ b/l1-contracts/src/core/libraries/ConstantsGen.sol
@@ -207,10 +207,10 @@ library Constants {
   uint256 internal constant LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP = 64;
   uint256 internal constant NUM_MSGS_PER_BASE_PARITY = 4;
   uint256 internal constant NUM_BASE_PARITY_PER_ROOT_PARITY = 4;
-  uint256 internal constant RECURSIVE_PROOF_LENGTH = 409;
-  uint256 internal constant NESTED_RECURSIVE_PROOF_LENGTH = 409;
-  uint256 internal constant TUBE_PROOF_LENGTH = 409;
-  uint256 internal constant VERIFICATION_KEY_LENGTH_IN_FIELDS = 120;
+  uint256 internal constant RECURSIVE_PROOF_LENGTH = 439;
+  uint256 internal constant NESTED_RECURSIVE_PROOF_LENGTH = 439;
+  uint256 internal constant TUBE_PROOF_LENGTH = 439;
+  uint256 internal constant VERIFICATION_KEY_LENGTH_IN_FIELDS = 128;
   uint256 internal constant SENDER_SELECTOR = 0;
   uint256 internal constant ADDRESS_SELECTOR = 1;
   uint256 internal constant STORAGE_ADDRESS_SELECTOR = 1;
diff --git a/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr b/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr
index e0c3aa6de2..e09cdd6ce4 100644
--- a/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr
+++ b/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr
@@ -270,11 +270,11 @@ global NUM_MSGS_PER_BASE_PARITY: u32 = 4;
 global NUM_BASE_PARITY_PER_ROOT_PARITY: u32 = 4;
 
 // Lengths of the different types of proofs in fields
-global RECURSIVE_PROOF_LENGTH = 409;
-global NESTED_RECURSIVE_PROOF_LENGTH = 409;
+global RECURSIVE_PROOF_LENGTH = 439;
+global NESTED_RECURSIVE_PROOF_LENGTH = 439;
 global TUBE_PROOF_LENGTH = RECURSIVE_PROOF_LENGTH; // in the future these can differ
 
-global VERIFICATION_KEY_LENGTH_IN_FIELDS = 120;
+global VERIFICATION_KEY_LENGTH_IN_FIELDS = 128;
 
 /**
  * Enumerate the hash_indices which are used for pedersen hashing.
diff --git a/noir/noir-repo/test_programs/execution_success/verify_honk_proof/Prover.toml b/noir/noir-repo/test_programs/execution_success/verify_honk_proof/Prover.toml
index f2e6bbed8e..8a10d971d9 100644
--- a/noir/noir-repo/test_programs/execution_success/verify_honk_proof/Prover.toml
+++ b/noir/noir-repo/test_programs/execution_success/verify_honk_proof/Prover.toml
@@ -1,537 +1,6 @@
 key_hash = "0x096129b1c6e108252fc5c829c4cc9b7e8f0d1fd9f29c2532b563d6396645e08f"
-proof = [
-  "0x0000000000000000000000000000000000000000000000000000000000000020",
-  "0x0000000000000000000000000000000000000000000000000000000000000011",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000042ab5d6d1986846cf",
-  "0x00000000000000000000000000000000000000000000000b75c020998797da78",
-  "0x0000000000000000000000000000000000000000000000005a107acb64952eca",
-  "0x000000000000000000000000000000000000000000000000000031e97a575e9d",
-  "0x00000000000000000000000000000000000000000000000b5666547acf8bd5a4",
-  "0x00000000000000000000000000000000000000000000000c410db10a01750aeb",
-  "0x00000000000000000000000000000000000000000000000d722669117f9758a4",
-  "0x000000000000000000000000000000000000000000000000000178cbf4206471",
-  "0x000000000000000000000000000000000000000000000000e91b8a11e7842c38",
-  "0x000000000000000000000000000000000000000000000007fd51009034b3357f",
-  "0x000000000000000000000000000000000000000000000009889939f81e9c7402",
-  "0x0000000000000000000000000000000000000000000000000000f94656a2ca48",
-  "0x000000000000000000000000000000000000000000000006fb128b46c1ddb67f",
-  "0x0000000000000000000000000000000000000000000000093fe27776f50224bd",
-  "0x000000000000000000000000000000000000000000000004a0c80c0da527a081",
-  "0x0000000000000000000000000000000000000000000000000001b52c2020d746",
-  "0x0000000000000000000000000000005a9bae947e1e91af9e4033d8d6aa6ed632",
-  "0x000000000000000000000000000000000025e485e013446d4ac7981c88ba6ecc",
-  "0x000000000000000000000000000000ff1e0496e30ab24a63b32b2d1120b76e62",
-  "0x00000000000000000000000000000000001afe0a8a685d7cd85d1010e55d9d7c",
-  "0x000000000000000000000000000000b0804efd6573805f991458295f510a2004",
-  "0x00000000000000000000000000000000000c81a178016e2fe18605022d5a8b0e",
-  "0x000000000000000000000000000000eba51e76eb1cfff60a53a0092a3c3dea47",
-  "0x000000000000000000000000000000000022e7466247b533282f5936ac4e6c15",
-  "0x00000000000000000000000000000071b1d76edf770edff98f00ff4deec264cd",
-  "0x00000000000000000000000000000000001e48128e68794d8861fcbb2986a383",
-  "0x000000000000000000000000000000d3a2af4915ae6d86b097adc377fafda2d4",
-  "0x000000000000000000000000000000000006359de9ca452dab3a4f1f8d9c9d98",
-  "0x0000000000000000000000000000000d9d719a8b9f020ad3642d60fe704e696f",
-  "0x00000000000000000000000000000000000ddfdbbdefc4ac1580ed38e12cfa49",
-  "0x0000000000000000000000000000008289fe9754ce48cd01b7be96a861b5e157",
-  "0x00000000000000000000000000000000000ff3e0896bdea021253b3d360fa678",
-  "0x0000000000000000000000000000000d9d719a8b9f020ad3642d60fe704e696f",
-  "0x00000000000000000000000000000000000ddfdbbdefc4ac1580ed38e12cfa49",
-  "0x0000000000000000000000000000008289fe9754ce48cd01b7be96a861b5e157",
-  "0x00000000000000000000000000000000000ff3e0896bdea021253b3d360fa678",
-  "0x000000000000000000000000000000f968b227a358a305607f3efc933823d288",
-  "0x00000000000000000000000000000000000eaf8adb390375a76d95e918b65e08",
-  "0x000000000000000000000000000000bb34b4b447aae56f5e24f81c3acd6d547f",
-  "0x00000000000000000000000000000000002175d012746260ebcfe339a91a81e1",
-  "0x0000000000000000000000000000005b739ed2075f2b046062b8fc6a2d1e9863",
-  "0x00000000000000000000000000000000001285cd1030d338c0e1603b4da2c838",
-  "0x00000000000000000000000000000027447d6c281eb38b2b937af4a516d60c04",
-  "0x000000000000000000000000000000000019bc3d980465fbb4a656a74296fc58",
-  "0x000000000000000000000000000000b484788ace8f7df86dd5e325d2e9b12599",
-  "0x00000000000000000000000000000000000a2ca0d10eb7b767114ae230b728d3",
-  "0x000000000000000000000000000000c6dfc7092f16f95795e437664498b88d53",
-  "0x0000000000000000000000000000000000131067b4e4d95a4f6f8cf5c9b5450a",
-  "0x0f413f22eec51f2a02800e0cafaeec1d92d744fbbaef213c687b9edabd6985f5",
-  "0x21230f4ff26c80ffb5d037a9d1d26c3f955ca34cbeca4f54db6656b932967a0c",
-  "0x0521f877fe35535767f99597cc50effbd283dcae6812ee0a7620d796ccbfd642",
-  "0x202b01350a9cc5c20ec0f3eaada338c0a3b793811bd539418ffa3cc4302615e2",
-  "0x2d1214d9b0d41058ad4a172d9c0aecc5bdabe95e687c3465050c6b5396509be4",
-  "0x1113b344a151b0af091cb28d728b752ebb4865da6cd7ee68471b961ca5cf69b9",
-  "0x2aa66d0954bb83e17bd5c9928d3aa7a7df75d741d409f7c15ba596804ba643fb",
-  "0x2e26bc7a530771ef7a95d5360d537e41cf94d8a0942764ff09881c107f91a106",
-  "0x0f14f32b921bb63ad1df00adab7c82af58ea8aa7f353f14b281208d8c5fab504",
-  "0x13429515c0c53b6502bbcdf545defb3cb69a986c9263e070fcbb397391aae1a3",
-  "0x1f21cac5e2f262afc1006a21454cc6bcb018c44e53ad8ab61cebbac99e539176",
-  "0x2a9886a6ddc8a61b097c668cd362fc8acdee8dde74f7b1af192c3e060bb2948f",
-  "0x2d718181e408ead2e9bcd30a84ad1fccbaf8d48ab6d1820bad4933d284b503c4",
-  "0x2634c1aafc902f14508f34d3d7e9d485f42d1a4c95b5a1ef73711ed0d3c68d77",
-  "0x092ede9777e6472ce5ffd8c963d466006189e960e2c591d338dc8d4af1a057fb",
-  "0x1cba45b17fd24f1cb1b4ab7b83eee741f6c77ba70a497dc4de259eceb7d5ea26",
-  "0x246e887c7bf2e17f919b2393b6e9b00b33e8822d862544a775aac05cb7bff710",
-  "0x04c3f539fe8689971948afcb437f1ecbd444a5bddaca1c8a450348dcd8480047",
-  "0x20c6a423ae4fd58e8951aa378d02d77baf90508ceb48856db2319d70938b186e",
-  "0x1bcf8786b554b3316d8ebdbc9d006a4e5d4865aad512ffd404b7f83550d3d030",
-  "0x09ab038260518f0970564afcd6bf22e2abf6b1fa5e12a327bbf195b6ca5edd78",
-  "0x1024e32554746f89c195286ba6ccfc9765e5d14bbe8064bc6fdf22d16ec6b495",
-  "0x17706656f8dbd7e47bb257a6428f0cb7278ea02fa9e6ce431d7bcc9133fba9c7",
-  "0x25a3e8a33c15ef2a4dd16313a6049bf1d468b4cdc141f238f2d51a1e8e1c22b3",
-  "0x1198863f08006edb27aee23164fb117a4ddec1bf1ed89807aa907e5cd24bf068",
-  "0x1862b4856b5b4d4a064f873e221703e4e2cd1ebfca1337dedca56485c38ed5a0",
-  "0x062214af1ea6dd6bf8895b92d394571c43970b6f967e1c794624d96071b25ad3",
-  "0x1e5be9428ddcf1f9b0cbafc28101e792ec5cf73852b0cd0b84fbff71b4490e09",
-  "0x2d4189bea5b1e30f63c64bd26df82f18bcaf885ec8887b54634b2557869ce87f",
-  "0x0f2e5d9a908850e9d44925e17d8b12d1adb1ed029799c9b5858598504242bbc0",
-  "0x3050dc85746a57931d99f3f35e77c2ba561fba0baa018b79ff1fd544026833ae",
-  "0x2a591a32437e5e0b875a137fd868bd1b6dbc003ff1b661f26e00627cc7c5cf47",
-  "0x27946841e1670ad9c65717016d0cedf524724217236e81b9fd0a264a36ebfb0e",
-  "0x0fc396e9d19d6e68e289602e292ee345542d0d28bf6de34fa62cc577cbdfb1df",
-  "0x08e7433a07a44c0c9c4dd4b273a2685bbd1a91fd5cf2b43409458fab42a23e1b",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x12bd9bfb029c3503a5c6deea87b0a0f11bb9f7ea584af2d48f3e48d7e09247ae",
-  "0x2ccc4810748c0a82dfc0f063d0b8c7999ffe9474653080e6ef92b3cb7a428784",
-  "0x08eb574d7fecadadb508c8bd35fdad06b99110609d679763c2e3645229b1b95a",
-  "0x0f1a65e747c8021ed7c454a4be1e89b1bce66ead9ed980fa98a7a050eafe98a1",
-  "0x1c8ff9e36684ec71614dee4c17859b06c742089f6029d3694a16e00dac9b57f1",
-  "0x0303101a8ba712aeca4da85b767ab8d3ecf489ec7d746f8ee20041717cc000e9",
-  "0x0aaf64c65e7088e5596108c9601467911fea809ca6540d79af77e6e66e36cd99",
-  "0x17caf164ce74ea7edfb1390e07763d2197797ec26661b92cde18a98d61d2fddc",
-  "0x18cb055c7ad6d01437725bb457681d81f3ecadc4f35d838a3c13daf25a44456a",
-  "0x2d78602b8bbcd32b36a99a6e2d248e7fe044ef1b50813133370412f9ef5299f0",
-  "0x2b139276ea86d426a115479e4154f72a6bd83a6253bf13e9670dc6b4664378f0",
-  "0x127c7837b384902c39a104036c09546728571c46c8166b1b9b13b3a615ebb781",
-  "0x05faa4816f83cf0189a482ad943c94b9ec6474002f2b327f8698763ad0ea0985",
-  "0x2f90359cc30ee693fb3aced96523cf7aebd152c22329eee56a398d9a4ac0628e",
-  "0x0a71beaf17a59c5a238f04c1f203848d87502c5057a78c13f0cfb0f9876e7714",
-  "0x2696c1e6d089556adaeb95c8a5e3065b00a393a38c2d69e9bd6ce8cdc49d87da",
-  "0x1f3d165a7dc6564a036e451eb9cb7f1e1cb1e6d29daa75e3f135ea3e58a79ccd",
-  "0x1473a660819bdd838d56122b72b32b267211e9f1103239480ec50fa85c9e1035",
-  "0x0a8ccaeb22451f391b3fc3467c8e6e900270a7afb7b510e8acf5a4f06f1c0888",
-  "0x03b3080afc0658cc87e307758cebc171921f43eca159b9dedf7f72aa8dd926bd",
-  "0x2dd7d6663fa0e1755dfafac352c361fcd64c7f4d53627e3646870ac169cc4a07",
-  "0x1ec54b883f5f35ccad0e75695af20790d9860104095bab34c9bf01628dd40cb9",
-  "0x193dff50f83c241f7a9e087a29ce72ecf3f6d8563593f786dcd04c32bcfd4ced",
-  "0x135122c0dae26cda8ca1c09de8225064ad86d10423ab0aaa53b481aa4626e1d6",
-  "0x08d5a56cbfab5aeed56d3cdd7fb6b30fc26b0c1a5b63fccd7fa44c53ba6fd35a",
-  "0x0d12f126dfa2daad3726d00ca339284cc22e36c6d81bb7a4b95c6f9598b60e7c",
-  "0x2e8b24bbdf2fd839d3c7cae1f0eeb96bfcfaeef30b27476f2fafcb17da78cd5e",
-  "0x2364acfe0cea39b7f749c5f303b99504977357925f810f684c60f35d16315211",
-  "0x06ca062eb70b8c51cfac35345e7b6b51f33a8ec9ebe204fb9b4911200bf508b7",
-  "0x266c0aa1ccb97186815bf69084f600d06ddd934e59a38dfe602ee5d6b9487f22",
-  "0x1d817537a49c6d0e3b4b65c6665334b91d7593142e60065048be9e55ceb5e7ab",
-  "0x05e9b7256a368df053c691952b59e9327a7c12ed322bbd6f72c669b9b9c26d49",
-  "0x05e9b7256a368df053c691952b59e9327a7c12ed322bbd6f72c669b9b9c26d49",
-  "0x25b77026673a1e613e50df0e88fb510973739d5f9064bd364079a9f884209632",
-  "0x25c9bc7a3f6aae3d43ff68b5614b34b5eaceff37157b37347995d231784ac1fd",
-  "0x085f69baef22680ae15f4801ef4361ebe9c7fc24a94b5bc2527dce8fb705439e",
-  "0x0d7c6b9ce31bfc32238a205455baf5ffe99cd30eb0f7bb5b504e1d4501e01382",
-  "0x1001a8cc4bc1221c814fba0eddcf3c40619b133373640c600de5bed0a0a05b10",
-  "0x20f5894be90e52977cb70f4f4cbd5101693db0360848939750db7e91109d54b6",
-  "0x22c09cb26db43f0599408b4daed0f4f496c66424e6affa41c14387d8e0af851b",
-  "0x24e5f41357798432426a9549d71e8cc681eaebacbe87f6e3bf38e85de5aa2f3d",
-  "0x06eb90100c736fbf2b87432d7821ecdc0b365024739bc36363d48b905973f5b9",
-  "0x000000000000000000000000000000ece6d09ed58e9f5661c01140b10558a8c2",
-  "0x000000000000000000000000000000000012b6e4f37adcb34b8e88ff8b6eebce",
-  "0x000000000000000000000000000000b226a2bb93593fa1fab19a44767828a3f5",
-  "0x00000000000000000000000000000000002b5b518342030543092e1428a7e33c",
-  "0x00000000000000000000000000000022ba33857034a0574c216eb3c1ddff3025",
-  "0x00000000000000000000000000000000001918e58df857985a7cf9eae7802165",
-  "0x00000000000000000000000000000045c2d840b96fb6106cc14dcad89dd5f675",
-  "0x00000000000000000000000000000000000afdfac1e3a1febdd0208867d44f98",
-  "0x00000000000000000000000000000042ebed6c5ec45d794f119aef24c192af0f",
-  "0x00000000000000000000000000000000002d05ef250900bbcc5751bbeb210d6a",
-  "0x00000000000000000000000000000060d604bdda48eecc90ed065bd9770e1323",
-  "0x00000000000000000000000000000000001fed91c63d0041660c1cbc84c2ffbb",
-  "0x00000000000000000000000000000054196b549cde36092e8184c7f4f7d878de",
-  "0x00000000000000000000000000000000000153f26a01294329922b492485cc31",
-  "0x00000000000000000000000000000056ebea579d10dbb440f0222931df2c0059",
-  "0x00000000000000000000000000000000000d2cbc61ce5b7cdd7fce398da4637b",
-  "0x000000000000000000000000000000e2b9512360b9797d96675d8a2fd2f7aa5d",
-  "0x000000000000000000000000000000000025742905f105ff895f74e7c3daa34a",
-  "0x000000000000000000000000000000a2dd7df55db59bd41b83518d4403fbc382",
-  "0x00000000000000000000000000000000002c1d9c3cbb9371d4cc4e9f900b9a46",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x000000000000000000000000000000bcf12ae40c9425c3e67654b84181f90502",
-  "0x00000000000000000000000000000000000b6d3faa8a71ff6ef1aa887b7307cf",
-  "0x0000000000000000000000000000001f6f719acc23b8f84808c0275d61cfb456",
-  "0x0000000000000000000000000000000000296030933ed0c134457ae71c393dfe",
-  "0x000000000000000000000000000000ebe1a57cdd7d3d763289b40ef5ed9a7ae0",
-  "0x000000000000000000000000000000000010f30483e7df51fca2316d3367603c",
-  "0x0000000000000000000000000000000149b7b283ab18060618c8e051864c03cd",
-  "0x00000000000000000000000000000000001ef7763235a3a25e241a5f06704dc3",
-]
+proof = ["0x0000000000000000000000000000000000000000000000000000000000000040","0x0000000000000000000000000000000000000000000000000000000000000011","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000042ab5d6d1986846cf","0x00000000000000000000000000000000000000000000000b75c020998797da78","0x0000000000000000000000000000000000000000000000005a107acb64952eca","0x000000000000000000000000000000000000000000000000000031e97a575e9d","0x00000000000000000000000000000000000000000000000b5666547acf8bd5a4","0x00000000000000000000000000000000000000000000000c410db10a01750aeb","0x00000000000000000000000000000000000000000000000d722669117f9758a4","0x000000000000000000000000000000000000000000000000000178cbf4206471","0x000000000000000000000000000000000000000000000000e91b8a11e7842c38","0x000000000000000000000000000000000000000000000007fd51009034b3357f","0x000000000000000000000000000000000000000000000009889939f81e9c7402","0x0000000000000000000000000000000000000000000000000000f94656a2ca48","0x000000000000000000000000000000000000000000000006fb128b46c1ddb67f","0x0000000000000000000000000000000000000000000000093fe27776f50224bd","0x000000000000000000000000000000000000000000000004a0c80c0da527a081","0x0000000000000000000000000000000000000000000000000001b52c2020d746","0x0000000000000000000000000000005a9bae947e1e91af9e4033d8d6aa6ed632","0x000000000000000000000000000000000025e485e013446d4ac7981c88ba6ecc","0x000000000000000000000000000000ff1e0496e30ab24a63b32b2d1120b76e62","0x00000000000000000000000000000000001afe0a8a685d7cd85d1010e55d9d7c","0x000000000000000000000000000000b0804efd6573805f991458295f510a2004","0x00000000000000000000000000000000000c81a178016e2fe18605022d5a8b0e","0x000000000000000000000000000000eba51e76eb1cfff60a53a0092a3c3dea47","0x000000000000000000000000000000000022e7466247b533282f5936ac4e6c15","0x00000000000000000000000000000071b1d76edf770edff98f00ff4deec264cd","0x00000000000000000000000000000000001e48128e68794d8861fcbb2986a383","0x000000000000000000000000000000d3a2af4915ae6d86b097adc377fafda2d4","0x000000000000000000000000000000000006359de9ca452dab3a4f1f8d9c9d98","0x0000000000000000000000000000006cf7dd96d7636fda5953191b1ad776d491","0x00000000000000000000000000000000001633d881a08d136e834cb13a28fcc6","0x00000000000000000000000000000001254956cff6908b069fca0e6cf1c47eb1","0x000000000000000000000000000000000006f4d4dd3890e997e75e75886bf8f7","0x0000000000000000000000000000006cf7dd96d7636fda5953191b1ad776d491","0x00000000000000000000000000000000001633d881a08d136e834cb13a28fcc6","0x00000000000000000000000000000001254956cff6908b069fca0e6cf1c47eb1","0x000000000000000000000000000000000006f4d4dd3890e997e75e75886bf8f7","0x000000000000000000000000000000f968b227a358a305607f3efc933823d288","0x00000000000000000000000000000000000eaf8adb390375a76d95e918b65e08","0x000000000000000000000000000000bb34b4b447aae56f5e24f81c3acd6d547f","0x00000000000000000000000000000000002175d012746260ebcfe339a91a81e1","0x000000000000000000000000000000286fcda0e28617c86e195005b9f2efc555","0x00000000000000000000000000000000000dc409eb684b23f6a97175bcb9b486","0x000000000000000000000000000000e8de6a193cd36414f598bc7c48d67c3b59","0x00000000000000000000000000000000002a8a791544cad8c712de871e3de50a","0x000000000000000000000000000000d6f1e64b562df0f17ecc6aa46392f8d5a3","0x00000000000000000000000000000000000aac977763f33fd6a360ccc50a827a","0x000000000000000000000000000000899fa957f5597c6419e3ead9843d21d917","0x000000000000000000000000000000000016c4611846952bd6833c35fb11c0da","0x013dbfbfbfb2ae7d524edb15343e551d9510b3116223baaa67312d17652f2fb1","0x2f268eb3217ef1ac66016aa14d43033f932335371795b5e6dcb0c87c8ad0d050","0x2d5dbd52e00ae837e9868289fbe9057f16ea5b76c7e362603e8883f0de4b3e94","0x0e357b6a266c20d5e546c2931475eb044d7e75e08ec31b5e8623aec30f964323","0x0a9ace4dea44d0a2e8d12d495a683f508714356656aea3882436b729ead24165","0x0c17102a98ccb76faf0f78d669ee9cfb694849896787c985225d92e1af3cab35","0x09cc7cb719deb139c84fd9fa273e862a1b5d1cec2501c6cd8ba3c37ca06ac07f","0x15a0369f3f95d53687dfe79483baf75597d8b281fe0595caf1f7c9ccf99d985e","0x17fb53a42b3d1fa5d26ab19dfcc0d74d1781cee0be98dcc492c22e8f3442c4db","0x291d6810fc6afc5c2254fd283843a74c85a77275eee3049ea8ed9c88e02a99b8","0x0ad40d1627c31247dfb894584a71f8599cfcb85afe84b20186fc07fccae1aa4a","0x251cd908fb4e9fe88660f2303f8d7e4d7886da32fddc0319a842b99543659c0b","0x1885bdea3dd82085ca67502ebec8ad87213493e18a06cfa27e2c69810481b4a7","0x239ab5ba86866bc6705091f82a6a29444dc76b0e7d94cede7eb745cce36ab2cf","0x088d29a03baa491845d152124189dfb8bf70ba9bf1fb00c379199dbb0195c663","0x18c9fbe3227988d2da599eba82d60f4de25b442b663585fdc611e37305fa77fc","0x010242ae641a8cc4d06b5d24e38d9fa6254f981e28f238ccf6aad580f780d3f5","0x00128d34b122e84d7e23276b1f13f5789a562e82c727e9ffcfd7bbaccbe69e04","0x0776defaf478bfea4db2698542314e27213f63c96e41f98d4d82a47ed6fab55d","0x273014a360eaaa493e398df82f18d9cae37f4b6c0ead20100cad3f5491805298","0x2b13528eb9ab6fa705f2b48c9ec6ce054ac984e3adf17d4d73431e8456bf4a3c","0x22dafe1d63e39cd2effb236da2e131ee1c8cf4049ce504431dcaf98f75c47ad8","0x1afb5bc7eb8d30d807101357bb290f9c3113523f4aacc1154a27b075e46a4fa4","0x0782dd7df679163e5f0c126abc901d00f3d7d0856b4c02a199ab691ecd7566e6","0x2e556c722c99a84a09ffdcc719178277f8e6c9e31a4769270e3b522b944b8ea2","0x1be933a48dca8ef26202d3f135998ac8bed6947020b7447ffb6033b0e37f2065","0x2d8ebae210848de2464f5435f1fd4b5467ee938910d7779002614943060bbb32","0x2da854bbee38a94a6a9c2c85dd05bb4c879173720b67f93f78b9de93cdb427b0","0x0fa2649472af2e79489c466b58002f8f284f953085ac0a98dfabee85b78f63cf","0x304a09437636026ef0746c4b8ac1ca0ff250c5630fb5bd03ddafddd7cbde850e","0x0c83bb3c6ee0faa1646ee4d8dd83f67ec98e5d63ac802f7bdebfcdf21dee62f1","0x229d7e4524b30c18a6b94f0054e6d2ea8eb2396f58f9c808d2c9f991e2be2399","0x1265bf5e1aaddeae09242b1435e2f8f9e7487bf76a0461752777f6ea1ff75ad6","0x2f32f53281b7a363d6bec84ca21c71c3206d906b036e8b36b0702780e3b1b870","0x017fb18c9aef4d6d2bc99f5d7f9a002c8921fcd7c7ba69bf05930b55c2829cb7","0x2ec761c02ef6f2eefb7c9b2d6df71795d0ce0820f86797e2e11415cb5b122f22","0x2b1722960f42a1b40ffae3e4b9419fc8ff5cb8139a2c7e89af332ba2e95c1b5f","0x2dafa15594da2318245475c77eae3712429226b3005852e70f567efff0a7d79a","0x2ed44d7e3d5f44ac8f7c144ee0ba9d369c82428827c19b010384708bbc52a3f9","0x2777eedda697c7f90aee44fa97cfe62596d16c43fa3545b48d622023ca7a446a","0x1a47a5c1b0f41905aa0bad6248be8c7887ddea3ad9dfc8462b23a95b073c8a49","0x093656d571e84ac676a265dd509c98513039552b7a24e001b003ca618cc4ea5c","0x15c901e8a7ff0f1ae1989b5cfb687975c16716a8014a4052d527d4db4ecbaeb4","0x08bfa20e83096b0be58e4c96232510c8ef9824c0a62b91ffcc4592b217753a72","0x021913efbdfbc73aa5f4a97c79f352ac61f71248947f5eb5713c1b107c632703","0x00df89625aef270fab2a8c33ba742e1375423f4cfb3f63514ae748e004bb8cf4","0x2455f76c8ee59e93cbe7fe192cf0f766e1399617cabfa230cf27ca2a18cd58d5","0x150c3e56ea4f6442ed6b11030c98682a8f5e3c9cd6fd18949254a7c79b3cb5b6","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x01e89c6fe644aea7f63301278dbdb4ea29cf4d33f8b0cdcd79cb106e0bf0a753","0x2d49d23421e253903b8a5d0911642b9ce218cef4e350cf8689704eb1f3ae38d4","0x072956ca447343d788791fee1ef222f280048ad4aefb6cb7bc96b538f482f525","0x168176bf15c8ca63457acf05efbe54af452ea41f935ab82c2a96fedde10ba52f","0x20a13690f13491f7f3b756a1dc3b69a3f96d78355c70289583032a593bfc87bc","0x273e0a32ab3ef0d3f179b62520b31015ccfc8b53c76a1bb323b41e40ff954596","0x28019d4b05546b44e35d5dc74375b75dabb6fae49a07381605c60423c6163d26","0x10beda0b8dd484c63f0937820e2c7e9be832a0031efe3557631608895255ca5f","0x095a8f04a901526e4d70b1560bfff29b5a3c30347725d1e420c1b30ee2bf8a1c","0x1fb742e863a5c76262ffec93b3351405b0840b326fa5fffd73f40abcd5f05f05","0x11fa63cfcb2e603fe4e4668d75f05a2cf22650b84a91d1753e83f0e7ae83b4ad","0x2872e3d3c431a8b7ee4cec1c2a999a42c40ae33382fbba80a6d4c1a39b2d57a3","0x17e8c2a5f809f9935d7c6d7cb2f8859a513864b53f53de3d2a14c74cd690bd1a","0x20a552298d691393ae401382b3015689231ad988d3eb0521d414dcd2e8781053","0x183eb6bca59a141b4e8136179a258272ec9c25ec80bdb0458b6880c711707a28","0x03cd147a2a4c8dc272f3e240b8b0090d45e994e5fd40e07a54f6765795cd5ef8","0x082b135b3a20da4c766242b4258e27dbc050e4b8958bb15431626f2eeed9bd2b","0x28c894a6a719a32fe8d78ded46bc685ba035e5579c88fbc5bcbc0f09d8c5268b","0x06418cceff50837f923e63a37c2c534d13d9f59793c3aa6274813baa64d1899e","0x2b4a27b672f85c4fc697605da213de8b950a629602c5b8c6403e6c1c1065388a","0x0e2b817c6a79d6d1027f0376fb26ec81a140a4402e2dcdff6152cf01f2f4dbf9","0x2ae0fbce87dc53f0ff5473117e1c49a8197a14f8eaaec00cb5b10f94e844111f","0x2368004a1dee06f505e75ada3e9f8cc4c801f6a2068620da51ba11f537453835","0x2009df8e6f49f67dcaecb93e4a9ef81aaff096136d26f0fe691e14cd580c47da","0x2e512617136e8da2817856e57f13087a75fcc512faefc6d4b2eedd73c58a9b35","0x2848fcd535bd7c8017ca331a14919aa492ed05b04e9d0745480d291205eac8dc","0x19bb0990cb37f3a8f6c3db78219b07d6accd08e889586660e92dd6000755f09a","0x15520c8158b2e36c40c5fa46d5281c45d3df2c7f5d974a1f9549bfca6cbceaea","0x0e285f4df658d99922c286c5a253d6f6f37aa6c52d7a0fc1a20f3e6da9df23e1","0x0f9cd4667f4c1e86f83eda9e752a05c0cc630b0827a93a68322fa258dffb0f24","0x12d8b0dbbea3dccfe5d2dd090daf8ab4d2fac74fada9c49875b0c9122663a8ad","0x2e8c814d93f027ecff08c4e58555aadfc0f9ec3889eff2150f2b5bb6c557add0","0x013516a1456c5831aba87e4057878f6f3f18471e0674fd1e89be3e18351ec394","0x14418aa79dc84fd791d5638bdc103786ef8181a714ee8e022d3a1e792cbc7959","0x14418aa79dc84fd791d5638bdc103786ef8181a714ee8e022d3a1e792cbc7959","0x25c5e6c96a39bb36e19106d4049b675f0279084cc757c4e2acf6e497c61056a2","0x231aaafcf2a4c6fd8da18ce5ae5b33790f2c306a2692c6383c9a0787c50ac269","0x0a5f7665f0997081f9b38ec64e9a18542ac3a9648060f8cc720fc04669224730","0x0f1c9d9d1ac6f62825c6038117ed30540be434e8fd2d88150dcd4fece39b335a","0x1308871c8fcb09f07e5257f5cc5678d98842a8d18b2af09b5132d9af3cb1893e","0x28801985290dac4eba72ed01ee06fe88f6fc533dc1a46bd86e2d35be8021b042","0x14407f38cfba3cc61fca173b41133ab05a1c176caf8bb597588b01817e9eeaa3","0x0ea1a9f6f95f6193e512a7bd3db0c147f66687662934aed53cb657935b1e4eb9","0x1bc4ab6eacd61b5fd9e414b0186ef5deaadaf59aa9e53cb8d8812255baa28109","0x00000000000000000000000000000093a4da68a2fac0ee94841efdfc57eb748c","0x00000000000000000000000000000000001c22f1f5f927bee6adb649cc132391","0x0000000000000000000000000000003d0c2acea76c551f58876b3c35f19f345a","0x00000000000000000000000000000000002e94fded0a0b7f4fd1c882fd2a4e52","0x00000000000000000000000000000022e23b6fa0f72844bf8f60ea140cca5663","0x000000000000000000000000000000000013380f284bf3cb98b9a7cbae7d702b","0x000000000000000000000000000000942a13cf93056815c3f7439c9eed0a103e","0x00000000000000000000000000000000002be14bec02c6dae4625d32866de4fc","0x000000000000000000000000000000e2a2c75dc664c12695b4f7795c61f92669","0x000000000000000000000000000000000000725da448f376bde6cf63bcf79463","0x000000000000000000000000000000f54eee585f8ab367dc66a587e1d4cdbd8c","0x0000000000000000000000000000000000071106624ae5623a070f0addc18433","0x000000000000000000000000000000d60352bea3b2adb311b1a3beb25acb8aed","0x00000000000000000000000000000000001965b7c781e33f94e90c743c7881ed","0x0000000000000000000000000000006458a2aa57539e2b192f9c3ed69f9fb674","0x00000000000000000000000000000000001fc9c667723a4e66d752c6b426d444","0x0000000000000000000000000000008d1ff1c5d59a463c5b46bcf52f41ad3c63","0x00000000000000000000000000000000001b3e73df070a35c49a03fab1c76e9b","0x0000000000000000000000000000001c17a62b6c0a7ab14de83391e06f780adb","0x000000000000000000000000000000000012c7fbe2591b9ae72dd526e4ed1d7f","0x000000000000000000000000000000a758fa0c72d6a93155cb18b3fcc7defd34","0x00000000000000000000000000000000000cea12961770ce7cb6f2a4aed009fe","0x000000000000000000000000000000ef6e9647803aac315fa6d287e0e66f4767","0x0000000000000000000000000000000000259a82b8d6c6015cc51d2681f26ad4","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000008152b373c87004bef7d2c55ec8c540b67f","0x00000000000000000000000000000000000a55be5fdcb0a0dce4976d7bb78b0c","0x000000000000000000000000000000f749ea03f04ac964706139b9d1db595ecb","0x000000000000000000000000000000000013218e14dae80c066b4e46e9309fb2","0x0000000000000000000000000000004bbd7f950c36ce69db39e2b234a9e3f9b0","0x00000000000000000000000000000000002a0c3994d892ca5ea26984abbb30fb","0x0000000000000000000000000000006c1b39306846620bd546ac2c897834f259","0x000000000000000000000000000000000020350b9f507d6e25961a11be3e494b"]
 public_inputs = [
   "0x0000000000000000000000000000000000000000000000000000000000000003",
 ]
-verification_key = [
-  "0x0000000000000000000000000000000000000000000000000000000000000020",
-  "0x0000000000000000000000000000000000000000000000000000000000000011",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000003",
-  "0x0000000000000000000000000000000000000000000000000000000000000004",
-  "0x0000000000000000000000000000000000000000000000000000000000000005",
-  "0x0000000000000000000000000000000000000000000000000000000000000006",
-  "0x0000000000000000000000000000000000000000000000000000000000000007",
-  "0x0000000000000000000000000000000000000000000000000000000000000008",
-  "0x0000000000000000000000000000000000000000000000000000000000000009",
-  "0x000000000000000000000000000000000000000000000000000000000000000a",
-  "0x000000000000000000000000000000000000000000000000000000000000000b",
-  "0x000000000000000000000000000000000000000000000000000000000000000c",
-  "0x000000000000000000000000000000000000000000000000000000000000000d",
-  "0x000000000000000000000000000000000000000000000000000000000000000e",
-  "0x000000000000000000000000000000000000000000000000000000000000000f",
-  "0x0000000000000000000000000000000000000000000000000000000000000010",
-  "0x00000000000000000000000000000060e430ad1c23bfcf3514323aae3f206e84",
-  "0x00000000000000000000000000000000001b5c3ff4c2458d8f481b1c068f27ae",
-  "0x000000000000000000000000000000bb510ab2112def34980e4fc6998ad9dd16",
-  "0x00000000000000000000000000000000000576e7c105b43e061e13cb877fefe1",
-  "0x000000000000000000000000000000ced074785d11857b065d8199e6669a601c",
-  "0x00000000000000000000000000000000000053b48a4098c1c0ae268f273952f7",
-  "0x000000000000000000000000000000d1d4b26e941db8168cee8f6de548ae0fd8",
-  "0x00000000000000000000000000000000001a9adf5a6dadc3d948bb61dfd63f4c",
-  "0x0000000000000000000000000000009ce1faac6f8de6ebb18f1db17372c82ad5",
-  "0x00000000000000000000000000000000002002681bb417184b2df070a16a3858",
-  "0x000000000000000000000000000000161baa651a8092e0e84725594de5aba511",
-  "0x00000000000000000000000000000000000be0064399c2a1efff9eb0cdcb2223",
-  "0x0000000000000000000000000000008673be6fd1bdbe980a29d8c1ded54381e7",
-  "0x000000000000000000000000000000000008a5158a7d9648cf1d234524c9fa0c",
-  "0x0000000000000000000000000000002b4fce6e4b1c72062b296d49bca2aa4130",
-  "0x00000000000000000000000000000000002e45a9eff4b6769e55fb710cded44f",
-  "0x00000000000000000000000000000072b85bf733758b76bcf97333efb85a23e3",
-  "0x000000000000000000000000000000000017da0ea508994fc82862715e4b5592",
-  "0x00000000000000000000000000000094fa74695cf058dba8ff35aec95456c6c3",
-  "0x0000000000000000000000000000000000211acddb851061c24b8f159e832bd1",
-  "0x000000000000000000000000000000303b5e5c531384b9a792e11702ad3bcab0",
-  "0x00000000000000000000000000000000000d336dff51a60b8833d5d7f6d4314c",
-  "0x0000000000000000000000000000009f825dde88092070747180d581c342444a",
-  "0x0000000000000000000000000000000000237fbd6511a03cca8cac01b555fe01",
-  "0x0000000000000000000000000000007c313205159495df6d8de292079a4844ff",
-  "0x000000000000000000000000000000000018facdfc468530dd45e8f7a1d38ce9",
-  "0x0000000000000000000000000000000d1ce33446fc3dc4ab40ca38d92dac74e1",
-  "0x00000000000000000000000000000000000852d8e3e0e8f4435af3e94222688b",
-  "0x0000000000000000000000000000006c04ee19ec1dfec87ed47d6d04aa158de2",
-  "0x000000000000000000000000000000000013240f97a584b45184c8ec31319b5f",
-  "0x000000000000000000000000000000cefb5d240b07ceb4be26ea429b6dc9d9e0",
-  "0x00000000000000000000000000000000002dad22022121d689f57fb38ca21349",
-  "0x000000000000000000000000000000c9f189f2a91aeb664ce376d8b157ba98f8",
-  "0x00000000000000000000000000000000002531a51ad54f124d58094b219818d2",
-  "0x000000000000000000000000000000ef1e6db71809307f677677e62b4163f556",
-  "0x0000000000000000000000000000000000272da4396fb2a7ee0638b9140e523d",
-  "0x0000000000000000000000000000002e54c0244a7732c87bc4712a76dd8c83fb",
-  "0x000000000000000000000000000000000007db77b3e04b7eba9643da57cbbe4d",
-  "0x000000000000000000000000000000e0dfe1ddd7f74ae0d636c910c3e85830d8",
-  "0x00000000000000000000000000000000000466fa9b57ec4664abd1505b490862",
-  "0x0000000000000000000000000000009ee55ae8a32fe5384c79907067cc27192e",
-  "0x00000000000000000000000000000000000799d0e465cec07ecb5238c854e830",
-  "0x0000000000000000000000000000001d5910ad361e76e1c241247a823733c39f",
-  "0x00000000000000000000000000000000002b03f2ccf7507564da2e6678bef8fe",
-  "0x000000000000000000000000000000231147211b3c75e1f47d150e4bbd2fb22e",
-  "0x00000000000000000000000000000000000d19ee104a10d3c701cfd87473cbbe",
-  "0x0000000000000000000000000000006705f3f382637d00f698e2c5c94ed05ae9",
-  "0x00000000000000000000000000000000000b9c792da28bb60601dd7ce4b74e68",
-  "0x000000000000000000000000000000ac5acc8cc21e4ddb225c510670f80c80b3",
-  "0x00000000000000000000000000000000002da9d3fa57343e6998aba19429b9fa",
-  "0x0000000000000000000000000000004bacbf54b7c17a560df0af18b6d0d527be",
-  "0x00000000000000000000000000000000000faea33aeca2025b22c288964b21eb",
-  "0x000000000000000000000000000000492e756298d68d6e95de096055cc0336c3",
-  "0x00000000000000000000000000000000001a12a12f004859e5a3675c7315121b",
-  "0x000000000000000000000000000000893d521d512f30e6d32afbbc0cecd8ee00",
-  "0x00000000000000000000000000000000001674b3c1ef12c6da690631e0d86c04",
-  "0x000000000000000000000000000000aa6cb02a52e7a613873d4ac9b411349945",
-  "0x00000000000000000000000000000000001ecb1fe9c493add46751f9940f73e1",
-  "0x00000000000000000000000000000045b3d362ca82cba69fb2b9c733a5b8c351",
-  "0x000000000000000000000000000000000019a683586af466e331945b732d2f8c",
-  "0x000000000000000000000000000000fc79b052dfdfe67c0ecfc06b4267ffd694",
-  "0x00000000000000000000000000000000001336a70c396393038d5e9913744ac2",
-  "0x0000000000000000000000000000005450d29af1e9438e91cd33ddeb2548226e",
-  "0x000000000000000000000000000000000000993a602891cfd0e6f6ecf7404933",
-  "0x000000000000000000000000000000498efddab90a32e9b2db729ed6e9b40192",
-  "0x00000000000000000000000000000000002425efebe9628c63ca6fc28bdb5901",
-  "0x000000000000000000000000000000d8488157f875a21ab5f93f1c2b641f3de9",
-  "0x0000000000000000000000000000000000290f95ada3936604dc4b14df7504e3",
-  "0x0000000000000000000000000000005d6902187f3ed60dcce06fca211b40329a",
-  "0x00000000000000000000000000000000002b5870a6ba0b20aaa0178e5adfbc36",
-  "0x000000000000000000000000000000e5c2519171fa0e548fc3c4966ffc1ce570",
-  "0x00000000000000000000000000000000001cb8d8f4793b7debbdc429389dbf2d",
-  "0x000000000000000000000000000000a3ee22dd60456277b86c32a18982dcb185",
-  "0x00000000000000000000000000000000002493c99a3d068b03f8f2b8d28b57ce",
-  "0x000000000000000000000000000000f6c3731486320082c20ec71bbdc92196c1",
-  "0x00000000000000000000000000000000001ded39c4c8366469843cd63f09ecac",
-  "0x000000000000000000000000000000494997477ab161763e46601d95844837ef",
-  "0x00000000000000000000000000000000002e0cddbc5712d79b59cb3b41ebbcdd",
-  "0x000000000000000000000000000000426db4c64531d350750df62dbbc41a1bd9",
-  "0x0000000000000000000000000000000000303126892f664d8d505964d14315ec",
-  "0x00000000000000000000000000000076a6b2c6040c0c62bd59acfe3e3e125672",
-  "0x000000000000000000000000000000000000874a5ad262eecc6b565e0b085074",
-  "0x000000000000000000000000000000ef082fb517183c9c6841c2b8ef2ca1df04",
-  "0x0000000000000000000000000000000000127b2a745a1b74968c3edc18982b9b",
-  "0x000000000000000000000000000000c9efd4f8c3d56e1eb23d789a8f710d5be6",
-  "0x000000000000000000000000000000000015a18748490ff4c2b1871081954e86",
-  "0x000000000000000000000000000000a0011ef987dc016ab110eacd554a1d8bbf",
-  "0x00000000000000000000000000000000002097c84955059442a95df075833071",
-  "0x000000000000000000000000000000d38e9426ad3085b68b00a93c17897c2877",
-  "0x00000000000000000000000000000000002aecd48089890ea0798eb952c66824",
-  "0x00000000000000000000000000000078d8a9ce405ce559f441f2e71477ff3ddb",
-  "0x00000000000000000000000000000000001216bdb2f0d961bb8a7a23331d2150",
-  "0x0000000000000000000000000000000000000000000000000000000000000001",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x0000000000000000000000000000000000000000000000000000000000000002",
-  "0x0000000000000000000000000000000000000000000000000000000000000000",
-  "0x000000000000000000000000000000ee40d90bea71fba7a412dd61fcf34e8ceb",
-  "0x0000000000000000000000000000000000140b0936c323fd2471155617b6af56",
-  "0x0000000000000000000000000000002b90071823185c5ff8e440fd3d73b6fefc",
-  "0x00000000000000000000000000000000002b6c10790a5f6631c87d652e059df4",
-]
+verification_key = ["0x0000000000000000000000000000000000000000000000000000000000000040","0x0000000000000000000000000000000000000000000000000000000000000011","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000003","0x0000000000000000000000000000000000000000000000000000000000000004","0x0000000000000000000000000000000000000000000000000000000000000005","0x0000000000000000000000000000000000000000000000000000000000000006","0x0000000000000000000000000000000000000000000000000000000000000007","0x0000000000000000000000000000000000000000000000000000000000000008","0x0000000000000000000000000000000000000000000000000000000000000009","0x000000000000000000000000000000000000000000000000000000000000000a","0x000000000000000000000000000000000000000000000000000000000000000b","0x000000000000000000000000000000000000000000000000000000000000000c","0x000000000000000000000000000000000000000000000000000000000000000d","0x000000000000000000000000000000000000000000000000000000000000000e","0x000000000000000000000000000000000000000000000000000000000000000f","0x0000000000000000000000000000000000000000000000000000000000000010","0x00000000000000000000000000000060e430ad1c23bfcf3514323aae3f206e84","0x00000000000000000000000000000000001b5c3ff4c2458d8f481b1c068f27ae","0x000000000000000000000000000000bb510ab2112def34980e4fc6998ad9dd16","0x00000000000000000000000000000000000576e7c105b43e061e13cb877fefe1","0x000000000000000000000000000000ced074785d11857b065d8199e6669a601c","0x00000000000000000000000000000000000053b48a4098c1c0ae268f273952f7","0x000000000000000000000000000000d1d4b26e941db8168cee8f6de548ae0fd8","0x00000000000000000000000000000000001a9adf5a6dadc3d948bb61dfd63f4c","0x0000000000000000000000000000009ce1faac6f8de6ebb18f1db17372c82ad5","0x00000000000000000000000000000000002002681bb417184b2df070a16a3858","0x000000000000000000000000000000161baa651a8092e0e84725594de5aba511","0x00000000000000000000000000000000000be0064399c2a1efff9eb0cdcb2223","0x0000000000000000000000000000008673be6fd1bdbe980a29d8c1ded54381e7","0x000000000000000000000000000000000008a5158a7d9648cf1d234524c9fa0c","0x0000000000000000000000000000002b4fce6e4b1c72062b296d49bca2aa4130","0x00000000000000000000000000000000002e45a9eff4b6769e55fb710cded44f","0x00000000000000000000000000000072b85bf733758b76bcf97333efb85a23e3","0x000000000000000000000000000000000017da0ea508994fc82862715e4b5592","0x00000000000000000000000000000094fa74695cf058dba8ff35aec95456c6c3","0x0000000000000000000000000000000000211acddb851061c24b8f159e832bd1","0x000000000000000000000000000000303b5e5c531384b9a792e11702ad3bcab0","0x00000000000000000000000000000000000d336dff51a60b8833d5d7f6d4314c","0x0000000000000000000000000000009f825dde88092070747180d581c342444a","0x0000000000000000000000000000000000237fbd6511a03cca8cac01b555fe01","0x0000000000000000000000000000007c313205159495df6d8de292079a4844ff","0x000000000000000000000000000000000018facdfc468530dd45e8f7a1d38ce9","0x0000000000000000000000000000000d1ce33446fc3dc4ab40ca38d92dac74e1","0x00000000000000000000000000000000000852d8e3e0e8f4435af3e94222688b","0x0000000000000000000000000000006c04ee19ec1dfec87ed47d6d04aa158de2","0x000000000000000000000000000000000013240f97a584b45184c8ec31319b5f","0x000000000000000000000000000000cefb5d240b07ceb4be26ea429b6dc9d9e0","0x00000000000000000000000000000000002dad22022121d689f57fb38ca21349","0x000000000000000000000000000000c9f189f2a91aeb664ce376d8b157ba98f8","0x00000000000000000000000000000000002531a51ad54f124d58094b219818d2","0x000000000000000000000000000000ef1e6db71809307f677677e62b4163f556","0x0000000000000000000000000000000000272da4396fb2a7ee0638b9140e523d","0x0000000000000000000000000000002e54c0244a7732c87bc4712a76dd8c83fb","0x000000000000000000000000000000000007db77b3e04b7eba9643da57cbbe4d","0x000000000000000000000000000000e0dfe1ddd7f74ae0d636c910c3e85830d8","0x00000000000000000000000000000000000466fa9b57ec4664abd1505b490862","0x0000000000000000000000000000009ee55ae8a32fe5384c79907067cc27192e","0x00000000000000000000000000000000000799d0e465cec07ecb5238c854e830","0x0000000000000000000000000000001d5910ad361e76e1c241247a823733c39f","0x00000000000000000000000000000000002b03f2ccf7507564da2e6678bef8fe","0x000000000000000000000000000000ee40d90bea71fba7a412dd61fcf34e8ceb","0x0000000000000000000000000000000000140b0936c323fd2471155617b6af56","0x0000000000000000000000000000002b90071823185c5ff8e440fd3d73b6fefc","0x00000000000000000000000000000000002b6c10790a5f6631c87d652e059df4","0x00000000000000000000000000000029a17181c7934fc3fdbd352eac5cb521b9","0x00000000000000000000000000000000001f497cbf5284ff29a2d336e5991999","0x000000000000000000000000000000072bd9c0c6beda1fdee6d4ff0432ba9e1b","0x000000000000000000000000000000000013ea38a0bd2aa751a490a724fac818","0x000000000000000000000000000000c599f63dcd3edd49f08ae5c3141c1e3493","0x00000000000000000000000000000000002bdb36be0bea09950dd32a8ccf6fbc","0x00000000000000000000000000000047f27f29724e7f19eba0340256a0bd4b7d","0x00000000000000000000000000000000001c1c5ccf87a962129ca785f8f35120","0x000000000000000000000000000000c5c71efdae00679bbe4a95096e012b1817","0x000000000000000000000000000000000017a365de041e317817d0135f2b48e0","0x0000000000000000000000000000008ae711ac402f7848d719c93a89ba8d39f1","0x00000000000000000000000000000000002b6fb40ed8a1935226f4f9786a0499","0x0000000000000000000000000000002f03a71501d83de1da5715a4e9462d6198","0x00000000000000000000000000000000001644064443b8546f48eae693af47b8","0x00000000000000000000000000000083763ab1b6e8fe269b2fe4c7b9c448c08d","0x000000000000000000000000000000000021d7cc18c59676a8eeb47c0111c251","0x000000000000000000000000000000b5f937153073e03ea7d51a996e0ebc2e6b","0x000000000000000000000000000000000011ddd0e26457373eb06e0493177672","0x000000000000000000000000000000c5f6eb9f6fc8fa99811a4a88c74a6d018b","0x000000000000000000000000000000000025bcd07a0732c123567834f5109558","0x000000000000000000000000000000aeb08a0b1a4442189448b4e97490568146","0x000000000000000000000000000000000002a1744e4771705536a88f07e0f90f","0x000000000000000000000000000000b938568293bd0724b0ea76c2ec34c4a829","0x0000000000000000000000000000000000053296e8f3b9ad3af877dfa9c7c2a7","0x000000000000000000000000000000f0ca1db6323996eba26bdc86dafef9d10b","0x00000000000000000000000000000000001441a46c58af03d5645d52721d956a","0x0000000000000000000000000000008bbf8f884013c66c28ba09c2fbd573b656","0x0000000000000000000000000000000000206c391ca06fac27d1908e94570243","0x0000000000000000000000000000002d4f5aaed88ba4f79612d53b804ca8f194","0x00000000000000000000000000000000001674011c96392df08970fa6b7b4cb8","0x0000000000000000000000000000009f88297c1729d76c4d9306853598c91325","0x0000000000000000000000000000000000256f51adfcacc3c1e340be4d32d3e9","0x0000000000000000000000000000000ab9955eec0d74eb799afed2a802b24d75","0x00000000000000000000000000000000001fcbe43ea105b30d36ed0b21b03411","0x000000000000000000000000000000d66b1d5433f1aa5305cd1edce7c22de466","0x00000000000000000000000000000000002331546a256b8a3b751956806680d4","0x000000000000000000000000000000e97954ad6cd6f45fb15c91434121db4304","0x00000000000000000000000000000000002e20a97e09d50f227ced47e7a98250","0x0000000000000000000000000000001ebbc27eb9ebededefba79522eb58ae89b","0x0000000000000000000000000000000000090efa4974e566e81d1177b85a30be","0x0000000000000000000000000000005eafa070b9c9632404052642e3bc14f9fd","0x00000000000000000000000000000000001489068864102daca6a6b8bc4d448b","0x0000000000000000000000000000009ebc91aaaac036a6477cadbe54e8556dfd","0x00000000000000000000000000000000000ef6d835e2ed3343b95c82c8c54037","0x00000000000000000000000000000033b28b529dff46e93af4e7422530478e4a","0x000000000000000000000000000000000020a86c2f8591bf190bcddcc03c42fb","0x000000000000000000000000000000a9679d0acc088f7dc27bf6d866bcd2dda2","0x00000000000000000000000000000000002fb9d0d2d4099402bed74f738f64cc","0x00000000000000000000000000000023b09f876a29a061582848a8b9a5870c12","0x00000000000000000000000000000000001d5bb906f03f0d49e9c4791bc43af9","0x00000000000000000000000000000017aac9854ea240d8ec97bf760c4d4ba870","0x00000000000000000000000000000000000b227a556c414ada0dc75bb303e30e","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000002","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000009b624fa65d1a24b7f14a8f25f3789622af","0x000000000000000000000000000000000013d47bff8c630e847b70e2732fd3f0","0x00000000000000000000000000000061d21663e93132f32921075f4c936a84df","0x00000000000000000000000000000000001a74ca4e118fb480b9b999902989a3"]
\ No newline at end of file
diff --git a/noir/noir-repo/test_programs/execution_success/verify_honk_proof/src/main.nr b/noir/noir-repo/test_programs/execution_success/verify_honk_proof/src/main.nr
index 17adc68c05..42e6b501d0 100644
--- a/noir/noir-repo/test_programs/execution_success/verify_honk_proof/src/main.nr
+++ b/noir/noir-repo/test_programs/execution_success/verify_honk_proof/src/main.nr
@@ -1,8 +1,8 @@
 
 // This circuit aggregates a single Honk proof from `assert_statement_recursive`.
-global SIZE_OF_PROOF_IF_LOGN_IS_28 : u32 = 409;
+global SIZE_OF_PROOF_IF_LOGN_IS_28 : u32 = 439;
 fn main(
-    verification_key: [Field; 120],
+    verification_key: [Field; 128],
     // This is the proof without public inputs attached.
     // 
     // This means: the size of this does not change with the number of public inputs.
diff --git a/noir/verify_honk_proof/src/main.nr b/noir/verify_honk_proof/src/main.nr
index 10ea457775..a8fb9ab53f 100644
--- a/noir/verify_honk_proof/src/main.nr
+++ b/noir/verify_honk_proof/src/main.nr
@@ -2,7 +2,7 @@
 // This circuit aggregates a single Honk proof from `assert_statement_recursive`.
 global SIZE_OF_PROOF_IF_LOGN_IS_28 : u32 = 409;
 fn main(
-    verification_key: [Field; 120],
+    verification_key: [Field; 128],
     // This is the proof without public inputs attached.
     // 
     // This means: the size of this does not change with the number of public inputs.
@@ -12,10 +12,5 @@ fn main(
     // I believe we want to eventually make it public too though.
     key_hash: Field
 ) {
-    std::verify_proof(
-        verification_key,
-        proof,
-        public_inputs,
-        key_hash
-    );
+    std::verify_proof(verification_key, proof, public_inputs, key_hash);
 }
diff --git a/yarn-project/circuits.js/src/constants.gen.ts b/yarn-project/circuits.js/src/constants.gen.ts
index 693fbb373b..870d74ccf6 100644
--- a/yarn-project/circuits.js/src/constants.gen.ts
+++ b/yarn-project/circuits.js/src/constants.gen.ts
@@ -191,10 +191,10 @@ export const L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP = 256;
 export const LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP = 64;
 export const NUM_MSGS_PER_BASE_PARITY = 4;
 export const NUM_BASE_PARITY_PER_ROOT_PARITY = 4;
-export const RECURSIVE_PROOF_LENGTH = 409;
-export const NESTED_RECURSIVE_PROOF_LENGTH = 409;
-export const TUBE_PROOF_LENGTH = 409;
-export const VERIFICATION_KEY_LENGTH_IN_FIELDS = 120;
+export const RECURSIVE_PROOF_LENGTH = 439;
+export const NESTED_RECURSIVE_PROOF_LENGTH = 439;
+export const TUBE_PROOF_LENGTH = 439;
+export const VERIFICATION_KEY_LENGTH_IN_FIELDS = 128;
 export const SENDER_SELECTOR = 0;
 export const ADDRESS_SELECTOR = 1;
 export const STORAGE_ADDRESS_SELECTOR = 1;
