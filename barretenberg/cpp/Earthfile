VERSION 0.8

build-base:
    ARG TARGETARCH
    FROM --platform=linux/$TARGETARCH ubuntu:lunar
    RUN apt-get update && apt-get install -y \
        build-essential \
        curl \
        git \
        cmake \
        lsb-release \
        wget \
        software-properties-common \
        gnupg \
        ninja-build \
        npm \
        libssl-dev \
        jq \
        bash \
        libstdc++6 \
        clang-format \
        clang-16

    IF [ $TARGETARCH = arm64 ]
        # publish arm after, assumes x86 already exists, becomes multiplatform image
        SAVE IMAGE --push aztecprotocol/bb-ubuntu-lunar
        FROM --platform=linux/amd64 aztecprotocol/bb-ubuntu-lunar:x86-latest
        SAVE IMAGE --push aztecprotocol/bb-ubuntu-lunar
    ELSE
        SAVE IMAGE --push aztecprotocol/bb-ubuntu-lunar:x86-latest
    END

build-wasi-sdk-image:
    WORKDIR /
    RUN git clone --recursive https://github.com/WebAssembly/wasi-sdk.git
    WORKDIR /wasi-sdk
    RUN git checkout 9389ea5eeec98afc61039683ae92c6147fee9c54
    ENV NINJA_FLAGS=-v
    ENV MAKEFLAGS="-j$(nproc)"
    RUN make build/llvm.BUILT
    RUN make build/wasi-libc.BUILT
    RUN make build/compiler-rt.BUILT
    RUN make build/libcxx.BUILT
    RUN make build/config.BUILT
    SAVE ARTIFACT build/install/opt/wasi-sdk

build-wasi-sdk:
    ARG TARGETARCH
    # Wrapper just exists share files.
    FROM scratch
    WORKDIR /usr/src
    COPY +get-wasi-sdk-image/wasi-sdk wasi-sdk
    SAVE ARTIFACT wasi-sdk
    SAVE IMAGE --push aztecprotocol/cache:wasi-sdk-threads-v21.0-$TARGETARCH

get-wasi-sdk-threads:
    ARG TARGETARCH
    # If this is failing, we need to run earthly --push +build-wasi-sdk
    FROM aztecprotocol/cache:wasi-sdk-threads-v21.0-$TARGETARCH
    SAVE ARTIFACT wasi-sdk

get-wasi-sdk:
    # NOTE: currently only works with x86
    # TODO Align with above
    FROM +source
    COPY ./scripts/install-wasi-sdk.sh ./scripts/
    RUN ./scripts/install-wasi-sdk.sh
    # TODO better output name to mirror wasi-sdk
    SAVE ARTIFACT src/wasi-sdk-20.0 wasi-sdk

wasmtime:
    FROM aztecprotocol/bb-ubuntu-lunar
    RUN curl https://wasmtime.dev/install.sh -sSf | bash
    SAVE ARTIFACT /root/.wasmtime/bin/wasmtime

source:
    FROM aztecprotocol/bb-ubuntu-lunar
    WORKDIR /usr/src/barretenberg
    # cpp source
    COPY --dir src/barretenberg src/CMakeLists.txt src
    # cmake source
    COPY --dir cmake CMakeLists.txt CMakePresets.json .
    # for debugging rebuilds
    RUN echo CONTENT HASH $(find . -type f -exec sha256sum {} ';' | sort | sha256sum | awk '{print $1}') | tee .content-hash

preset-release:
    FROM +source
    RUN cmake --preset clang16 -Bbuild && cmake --build build --target bb
    SAVE ARTIFACT build/bin

preset-release-assert:
    FROM +source
    RUN cmake --preset clang16 -Bbuild && cmake --build build --target bb
    SAVE ARTIFACT build/bin

preset-debug:
    FROM +source
    RUN cmake --preset clang16-dbg -Bbuild && cmake --build build --target bb
    SAVE ARTIFACT build/bin

preset-wasm:
    ARG TARGETARCH
    FROM +source
    IF [ $TARGETARCH = arm64 ]
        # Just use threads for now
        FROM +preset-wasm-threads
        SAVE ARTIFACT build/bin
    ELSE
        COPY +get-wasi-sdk/wasi-sdk src/wasi-sdk
        RUN cmake --preset wasm -Bbuild && cmake --build build --target barretenberg.wasm
        RUN src/wasi-sdk/bin/llvm-strip ./build/bin/barretenberg.wasm
        SAVE ARTIFACT build/bin
        SAVE IMAGE --cache-hint
    END

preset-wasm-threads:
    FROM +source
    COPY +get-wasi-sdk-threads/wasi-sdk src/wasi-sdk
    RUN cmake --preset wasm-threads -Bbuild && cmake --build build --target barretenberg.wasm
    RUN src/wasi-sdk/bin/llvm-strip ./build/bin/barretenberg.wasm
    SAVE ARTIFACT build/bin

preset-gcc:
    FROM +source
    RUN cmake --preset gcc -Bbuild && cmake --build build
    SAVE ARTIFACT build/bin

preset-fuzzing:
    FROM +source
    RUN cmake --preset fuzzing -Bbuild && cmake --build build
    SAVE ARTIFACT build/bin

preset-clang-assert:
    FROM +source
    RUN cmake --preset clang16-assert -Bbuild && cmake --build build --target bb
    SAVE ARTIFACT build/bin

# benchmarking images
# these are either fresh builds just for benching (op-count and op-count-time)
# or build the binaries we need for benchmarking
preset-op-count-bench:
    FROM +source
    RUN cmake --preset op-count -DCMAKE_BUILD_TYPE=RelWithAssert -Bbuild && cmake --build build --target ultra_honk_bench --target client_ivc_bench
    SAVE ARTIFACT build/bin

preset-op-count-time-bench:
    FROM +source
    RUN cmake --preset op-count-time -Bbuild && cmake --build build --target ultra_honk_bench --target client_ivc_bench
    SAVE ARTIFACT build/bin

preset-release-bench:
    FROM +preset-release
    RUN cmake --build build --target ultra_honk_bench --target client_ivc_bench
    SAVE ARTIFACT build/bin

preset-wasm-bench:
    FROM +preset-wasm-threads
    RUN cmake --build build --target ultra_honk_bench --target client_ivc_bench
    SAVE ARTIFACT build/bin

# test images
preset-release-assert-test:
    FROM +preset-release-assert
    # build all targets for tests
    RUN cmake --build build 
    SAVE ARTIFACT build/bin

# Sent to the bench runner using a earthly-cloud build x86 --push +bench-base --bench_mode=true
# then we can run earthly-cloud bench x86 +bench-ultra-honk etc
bench-base:
    ARG EARTHLY_GIT_HASH
    ARG TARGETARCH
    ARG bench_mode=build
    LOCALLY
    IF [ $bench_mode = cache ]
        FROM aztecprotocol/bb-bench-base:$TARGETARCH-$EARTHLY_GIT_HASH
    ELSE
        FROM +source
        COPY +preset-op-count-time-bench/bin/*_bench op-count-time/bin/
        COPY +preset-op-count-bench/bin/*_bench op-count/bin/
        COPY +preset-release-bench/bin/*_bench release/bin/
        COPY +preset-wasm-bench/bin/*_bench wasm/bin/
        SAVE IMAGE --push aztecprotocol/bb-bench-base:$TARGETARCH-$EARTHLY_GIT_HASH
    END

# Runs on the bench image, sent from the builder runner
bench-ultra-honk:
    FROM +bench-base
    # install SRS needed for proving
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd release && ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"
    RUN cd op-count && ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"
    RUN cd op-count-time && ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"
    COPY +wasmtime/wasmtime /usr/bin/wasmtime
    RUN cd wasm && wasmtime run --env HARDWARE_CONCURRENCY=16 -Wthreads=y -Sthreads=y --dir=".." ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"

bench-client-ivc:
    FROM +bench-base
    # install SRS needed for proving
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd release && ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"
    RUN cd op-count && ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"
    RUN cd op-count-time && ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"
    COPY +wasmtime/wasmtime /usr/bin/wasmtime
    RUN cd wasm && wasmtime run --env HARDWARE_CONCURRENCY=16 -Wthreads=y -Sthreads=y --dir=".." ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"

test-clang-format:
    FROM +source
    COPY .clang-format .
    COPY format.sh .
    RUN ./format.sh check

test:
    BUILD +test-clang-format
    FROM +preset-release-assert-test
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd build && GTEST_COLOR=1 ctest -j$(nproc) --output-on-failure
