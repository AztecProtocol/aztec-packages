VERSION 0.8

FROM ubuntu:lunar
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    cmake \
    lsb-release \
    wget \
    software-properties-common \
    gnupg \
    ninja-build \
    npm \
    libssl-dev \
    jq \
    bash \
    libstdc++6 \
    clang-format \
    clang-16

WORKDIR /build

SAVE IMAGE --push aztecprotocol/cache:bb-ubuntu-lunar
SAVE IMAGE --cache-hint

build-wasi-sdk-image:
    WORKDIR /
    RUN git clone --recursive https://github.com/WebAssembly/wasi-sdk.git
    WORKDIR /wasi-sdk
    RUN git checkout 9389ea5eeec98afc61039683ae92c6147fee9c54
    ENV NINJA_FLAGS=-v
    ENV MAKEFLAGS="-j$(nproc)"
    RUN make build/llvm.BUILT
    RUN make build/wasi-libc.BUILT
    RUN make build/compiler-rt.BUILT
    RUN make build/libcxx.BUILT
    RUN make build/config.BUILT
    SAVE ARTIFACT build/install/opt/wasi-sdk

build-wasi-sdk:
    ARG TARGETARCH
    # Wrapper just exists share files.
    FROM scratch
    WORKDIR /build
    COPY +get-wasi-sdk-image/wasi-sdk wasi-sdk
    SAVE ARTIFACT wasi-sdk
    SAVE IMAGE --push aztecprotocol/cache:wasi-sdk-threads-v21.0-$TARGETARCH

get-wasi-sdk:
    ARG TARGETARCH
    # If this is failing, we need to run earthly --push +build-wasi-sdk
    FROM aztecprotocol/cache:wasi-sdk-threads-v21.0-$TARGETARCH
    SAVE ARTIFACT wasi-sdk

wasmtime:
    RUN curl https://wasmtime.dev/install.sh -sSf | bash
    SAVE ARTIFACT /root/.wasmtime/bin/wasmtime

source:
    # cpp source
    COPY --dir src/barretenberg src/CMakeLists.txt src
    # cmake source
    COPY --dir cmake CMakeLists.txt CMakePresets.json .
    # for debugging rebuilds
    RUN echo CONTENT HASH $(find . -type f -exec sha256sum {} ';' | sort | sha256sum | awk '{print $1}') | tee .content-hash

preset-release-assert-all:
    FROM +source
    DO +RUN_CMAKE --configure="--preset clang16-assert" --build=""
    SAVE ARTIFACT bin

preset-release:
    FROM +source
    DO +RUN_CMAKE --configure="--preset clang16" --build="--target bb"
    SAVE ARTIFACT bin

preset-debug:
    FROM +source
    DO +RUN_CMAKE --configure="--preset clang16-dbg" --build="--target bb"
    SAVE ARTIFACT bin

preset-wasm:
    ARG BB_WASI_SDK=""
    FROM +source
    # wasi-sdk
    COPY +get-wasi-sdk/wasi-sdk src/wasi-sdk
    DO +RUN_CMAKE --configure="--preset wasm-threads" --build="--target barretenberg.wasm"
    RUN ../src/wasi-sdk/bin/llvm-strip ./bin/barretenberg.wasm
    SAVE ARTIFACT bin
    SAVE IMAGE --cache-hint

preset-gcc:
    FROM +source
    DO +RUN_CMAKE --configure="--preset gcc" --build=""
    SAVE ARTIFACT bin

preset-fuzzing:
    FROM +source
    DO +RUN_CMAKE --configure="--preset fuzzing" --build=""
    SAVE ARTIFACT bin

preset-clang-assert:
    FROM +source
    DO +RUN_CMAKE --configure="--preset clang16 -DCMAKE_BUILD_TYPE=RelWithAssert" --build="--target bb"
    SAVE ARTIFACT bin

preset-op-count:
    FROM +source
    DO +RUN_CMAKE --configure="--preset op-count -DCMAKE_BUILD_TYPE=RelWithAssert" --build="--target bb"
    SAVE ARTIFACT bin

preset-op-count-time:
    FROM +source
    DO +RUN_CMAKE --configure="--preset op-count-time -DCMAKE_BUILD_TYPE=RelWithAssert" --build="--target bb"
    SAVE ARTIFACT bin

test-clang-format:
    FROM +source
    COPY .clang-format .
    COPY format.sh .
    RUN ./format.sh check

bench-ultra-honk:
    DO +BENCH_RELEASE --target=ultra_honk_bench --args="--benchmark_filter=construct_proof_ultrahonk_power_of_2/20$"
    DO +BENCH_WASM --target=ultra_honk_bench --args="--benchmark_filter=construct_proof_ultrahonk_power_of_2/20$"

bench-client-ivc:
    DO +BENCH_RELEASE --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"
    DO +BENCH_RELEASE --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"
    DO +BENCH_WASM --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"

build: # default target
    BUILD +preset-release
    BUILD +preset-wasm

test:
    BUILD +test-clang-format
    FROM +preset-release-assert-all
    COPY --dir ./srs_db/+build/. ../srs_db
    RUN GTEST_COLOR=1 ctest -j$(nproc) --output-on-failure

# Functions
RUN_CMAKE:
    FUNCTION
    # Runs cmake build and leaves binary artifacts at 'bin'. Uses a mounted cache
    # for incremental rebuilds.
    ARG configure # cmake configure flags
    ARG build # cmake build flags
    WORKDIR /build
    # Use a mount for incremental builds locally.
    # TODO(AD): To be determined: does this get us in trouble in CI?
    RUN --mount type=cache,id="$configure-build",target=/build/build \
        (cmake $configure -Bbuild || (rm -f build/CMakeCache.txt && cmake $configure -Bbuild)) && \
        cmake --build build $build && \
        cp -r build build-tmp
    # move the temporary build folder back
    # this is because the cached build goes away 
    RUN rm -rf build && mv build-tmp build
    WORKDIR /build/build

BENCH_RELEASE:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-release
    DO +RUN_CMAKE --configure="--preset clang16" --build="--target $target"
    COPY --dir ./srs_db/+build/. ../srs_db
    RUN ./bin/$target $args

BENCH_OP_COUNT_TIME:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-op-count-time
    DO +RUN_CMAKE --configure="--preset op-count-time" --build="--target $target"
    COPY --dir ./srs_db:+build/. ../srs_db
    RUN ./bin/$target $args

BENCH_OP_COUNT:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-op-count
    DO +RUN_CMAKE --configure="--preset op-count" --build="--target $target"
    COPY --dir ./srs_db/+build/. ../srs_db
    RUN ./bin/$target $args

BENCH_WASM:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-wasm
    DO +RUN_CMAKE --configure="--preset wasm-threads" --build="--target $target"
    COPY --dir ./srs_db/+build/. ../srs_db
    # install
    COPY +wasmtime/wasmtime /usr/bin/wasmtime
    RUN wasmtime run --env HARDWARE_CONCURRENCY=8 -Wthreads=y -Sthreads=y --dir=.. ./bin/$target $args
