VERSION 0.8

FROM ubuntu:lunar
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    cmake \
    lsb-release \
    wget \
    software-properties-common \
    gnupg \
    ninja-build \
    npm \
    libssl-dev \
    jq \
    bash \
    libstdc++6 \
    clang-format \
    clang-16

WORKDIR /build

SAVE IMAGE --push aztecprotocol/cache:bb-ubuntu-lunar

build-wasi-sdk-image:
    WORKDIR /
    RUN git clone --recursive https://github.com/WebAssembly/wasi-sdk.git
    WORKDIR /wasi-sdk
    RUN git checkout 9389ea5eeec98afc61039683ae92c6147fee9c54
    ENV NINJA_FLAGS=-v
    ENV MAKEFLAGS="-j$(nproc)"
    RUN make build/llvm.BUILT
    RUN make build/wasi-libc.BUILT
    RUN make build/compiler-rt.BUILT
    RUN make build/libcxx.BUILT
    RUN make build/config.BUILT
    SAVE ARTIFACT build/install/opt/wasi-sdk

build-wasi-sdk:
    ARG TARGETARCH
    # Wrapper just exists share files.
    FROM scratch
    WORKDIR /build
    COPY +get-wasi-sdk-image/wasi-sdk wasi-sdk
    SAVE ARTIFACT wasi-sdk
    SAVE IMAGE --push aztecprotocol/cache:wasi-sdk-threads-v21.0-$TARGETARCH

get-wasi-sdk:
    ARG TARGETARCH
    # If this is failing, we need to run earthly --push +build-wasi-sdk
    FROM aztecprotocol/cache:wasi-sdk-threads-v21.0-$TARGETARCH
    SAVE ARTIFACT wasi-sdk

source:
    # cpp source
    COPY --keep-ts --dir src/barretenberg src/CMakeLists.txt src
    # cmake source
    COPY --keep-ts --dir cmake CMakeLists.txt CMakePresets.json .

preset-release:
    FROM +source
    DO +RUN_CMAKE --configure="--preset clang16" --build="--target bb"
    SAVE ARTIFACT bin

preset-debug:
    FROM +source
    DO +RUN_CMAKE --configure="--preset clang16-dbg" --build="--target bb"
    SAVE ARTIFACT bin

preset-wasm:
    ARG BB_WASI_SDK=""
    FROM +source
    # wasi-sdk
    COPY +get-wasi-sdk/wasi-sdk src/wasi-sdk
    DO +RUN_CMAKE --configure="--preset wasm-threads" --build="--target barretenberg.wasm"
    RUN ./src/wasi-sdk/bin/llvm-strip ./bin/barretenberg.wasm
    SAVE ARTIFACT bin

preset-gcc:
    FROM +source
    DO +RUN_CMAKE --configure="--preset gcc" --build=""
    SAVE ARTIFACT bin

preset-fuzzing:
    FROM +source
    DO +RUN_CMAKE --configure="--preset fuzzing" --build=""
    SAVE ARTIFACT bin

preset-clang-assert:
    FROM +source
    DO +RUN_CMAKE --configure="--preset clang16 -DCMAKE_BUILD_TYPE=RelWithAssert" --build="--target bb"
    SAVE ARTIFACT bin

preset-op-count:
    FROM +source
    DO +RUN_CMAKE --configure="--preset op-count -DCMAKE_BUILD_TYPE=RelWithAssert" --build="--target bb"
    SAVE ARTIFACT bin

preset-op-count-time:
    FROM +source
    DO +RUN_CMAKE --configure="--preset op-count-time -DCMAKE_BUILD_TYPE=RelWithAssert" --build="--target bb"
    SAVE ARTIFACT bin

test-clang-format:
    COPY .clang-format .
    COPY format.sh .
    RUN ./format.sh check

bench-ultra-honk:
    DO +BENCH_RELEASE --target=ultra_honk_bench --args="--benchmark_filter=construct_proof_ultrahonk_power_of_2/20$"
    DO +BENCH_WASM --target=ultra_honk_bench --args="--benchmark_filter=construct_proof_ultrahonk_power_of_2/20$"

bench-client-ivc:
    DO +BENCH_RELEASE --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"
    DO +BENCH_RELEASE --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"
    DO +BENCH_WASM --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"

build: # default target
    BUILD +preset-release

# Functions
RUN_CMAKE:
    # Runs cmake build and leaves binary artifacts at 'bin'
    FUNCTION
    ARG configure # cmake configure flags
    ARG build # cmake build flags
    ARG EARTHLY_CI
    IF $EARTHLY_CI
        # Don't cache CI builds.
        RUN cmake $configure -Bbuild && \
            cmake --build build $build
        RUN cp -r build/bin .
    ELSE
        # Use a mount for incremental builds locally.
        RUN --mount type=cache,id="$configure-build",target=/build/build \
            (cmake $configure -Bbuild || (rm -f build/CMakeCache.txt && cmake $configure -Bbuild)) && \
            cmake --build build $build && \
            cp -r build/bin .
    END

BENCH_RELEASE:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-release
    DO +BUILD --configure="--preset clang16" --build="--target $target"
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd build && ./bin/$target $args

BENCH_OP_COUNT_TIME:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-op-count-time
    DO +RUN_CMAKE --configure="--preset op-count-time" --build="--target $target"
    COPY --dir ./srs_db:+build/. srs_db
    RUN cd build && ./bin/$target $args

BENCH_OP_COUNT:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-op-count
    DO +RUN_CMAKE --configure="--preset op-count" --build="--target $target"
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd build && ./bin/$target $args

BENCH_WASM:
    FUNCTION
    ARG target
    ARG args
    FROM +preset-wasm
    DO +RUN_CMAKE --configure="--preset wasm-threads" --build="--target $target"
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd build && ~/.wasmtime/bin/wasmtime run --env HARDWARE_CONCURRENCY=8 -Wthreads=y -Sthreads=y --dir=.. ./bin/$target $args
