
include "avm_byte_lookup.pil";
include "avm_main.pil";

namespace avm_binary(256);

    pol commit bin_clk;

    // Selector for Binary Operation
    pol commit bin_sel;
    bin_sel * (1 - bin_sel) = 0;

    // The last element in this column is what part of equivalence check to main trace
    pol commit acc_ia;
    pol commit acc_ib;
    pol commit acc_ic;

    // This is the instruction tag {1,2,3,4,5} (restricted to not be a field)
    // Operations over FF are not supported, it is assumed this exclusion is handled
    // outside of this subtrace.
    // Constraints come from equiv to main_trace
    pol commit instr_tag;

    // Selectors for binary operations, correctness checked by permutation to the main trace.
    pol commit op_id;

    pol commit bin_ia_bytes;
    pol commit bin_ib_bytes;
    pol commit bin_ic_bytes;

    pol commit latch; //Identifies when we want to capture the output
    pol commit factor; // Identifies the byte position when accumulating

    // latch is restricted to be a boolean
    latch * (1 - latch) = 0;

    // To support dynamically sized memory operands we use a counter against a lookup
    // This counter goes from [0, MEM_TAG] where MEM_TAG is the number of bytes in the
    // corresponding integer. i.e. MEM_TAG is between 1 (U8) and 16(U128).
    // Consistency can be achieved with a lookup table between the instr_tag and bytes_length
    pol commit mem_tag_ctr;
    #[MEM_TAG_REL]
    mem_tag_ctr' = (mem_tag_ctr + 1) * (1 - latch) * bin_sel;

    #[LOOKUP_BYTE_LENGTHS]
    latch {instr_tag, mem_tag_ctr} 
    in 
    avm_byte_lookup.bin_sel {avm_byte_lookup.table_instr_tags, avm_byte_lookup.table_byte_lengths};

    #[LOOKUP_BYTE_OPERATIONS]
    bin_sel {op_id, bin_ia_bytes, bin_ib_bytes, bin_ic_bytes}
    in 
    avm_byte_lookup.bin_sel {avm_byte_lookup.table_op_id, avm_byte_lookup.table_input_a,avm_byte_lookup.table_input_b, avm_byte_lookup.table_output};

    #[ACC_REL_A]
    acc_ia' = (bin_ia_bytes + 256 * acc_ia) * (1 - latch);
    #[ACC_REL_B]
    acc_ib' = (bin_ib_bytes + 256 * acc_ib) * (1 - latch);
    #[ACC_REL_C]
    acc_ic' = (bin_ic_bytes + 256 * acc_ic) * (1 - latch);

