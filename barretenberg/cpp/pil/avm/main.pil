include "mem.pil";
include "alu.pil";
include "binary.pil";
include "constants_gen.pil";
include "constants_misc.pil";
include "gas.pil";
include "kernel.pil";
include "fixed/powers.pil";
include "gadgets/conversion.pil";
include "gadgets/sha256.pil";
include "gadgets/poseidon2.pil";
include "gadgets/keccakf1600.pil";
include "gadgets/pedersen.pil";
include "gadgets/mem_slice.pil";

namespace main(256);
    //===== CONSTANT POLYNOMIALS ==================================================
    pol constant clk(i) { i };
    pol constant sel_first = [1] + [0]*; // Used mostly to toggle off the first row consisting
                                         // only in first element of shifted polynomials.
    pol constant zeroes = [0]*; // Helper for if we need to use a constant zero column

    //===== HELPER POLYNOMIALS ==================================================
    // This column signals active rows in the main trace table, which should
    // be every row except the first, and the padding rows at the end.
    pol commit sel_execution_row;
    // This relation might not be needed when we can use OPCODE_SELECTORS in lookups.
    #[OPCODE_SELECTORS]
    sel_execution_row = OPCODE_SELECTORS;
    sel_execution_row * (1 - sel_execution_row) = 0;
    // TODO: constrain that the right rows are marked with sel_execution_row

    //===== PUBLIC COLUMNS=========================================================
    pol public calldata;
    pol commit sel_calldata; // Selector used for lookup in calldata. TODO: Might be removed or made constant.
    pol public returndata;
    pol commit sel_returndata; // Selector used for lookup in returndata. TODO: Might be removed or made constant.

    //===== KERNEL INPUTS =========================================================
    // Kernel lookup selector opcodes
    pol commit sel_q_kernel_lookup;

    // CONTEXT - ENVIRONMENT
    pol commit sel_op_address;
    pol commit sel_op_storage_address;
    pol commit sel_op_sender;
    pol commit sel_op_function_selector;
    pol commit sel_op_transaction_fee;

    // CONTEXT - ENVIRONMENT - GLOBALS
    pol commit sel_op_chain_id;
    pol commit sel_op_version;
    pol commit sel_op_block_number;
    pol commit sel_op_coinbase;
    pol commit sel_op_timestamp;
    // CONTEXT - ENVIRONMENT - GLOBALS - FEES
    pol commit sel_op_fee_per_l2_gas;
    pol commit sel_op_fee_per_da_gas;

    // CONTEXT - MACHINE STATE - GAS
    pol commit sel_op_l2gasleft;
    pol commit sel_op_dagasleft;

    //===== KERNEL OUTPUTS ========================================================
    pol commit sel_q_kernel_output_lookup;

    pol commit sel_op_note_hash_exists;
    pol commit sel_op_emit_note_hash;
    pol commit sel_op_nullifier_exists;
    pol commit sel_op_emit_nullifier;
    pol commit sel_op_l1_to_l2_msg_exists;
    pol commit sel_op_emit_unencrypted_log;
    pol commit sel_op_emit_l2_to_l1_msg;
    pol commit sel_op_get_contract_instance;

    pol commit sel_op_sload;
    pol commit sel_op_sstore;

    // TODO: Opcode value (byte) will be constrained by the bytecode validation circuit
    pol commit opcode_val;

    //===== Gadget Selectors ======================================================
    pol commit sel_op_radix_le;
    pol commit sel_op_sha256;
    pol commit sel_op_poseidon2;
    pol commit sel_op_keccak;
    pol commit sel_op_pedersen;
    pol commit sel_op_ecadd;
    pol commit sel_op_pedersen_commit;
    pol commit sel_op_msm;
    
    //===== Memory Slice Gadget Selectors =========================================
    pol commit sel_op_calldata_copy;
    pol commit sel_op_external_return;
    pol commit sel_op_external_revert;

    //===== Fix Range Checks Selectors=============================================
    // We re-use the clk column for the lookup values of 8-bit resp. 16-bit range check.
    pol commit sel_rng_8;  // Boolean selector for the  8-bit range check lookup
    pol commit sel_rng_16; // Boolean selector for the 16-bit range check lookup

    //===== CONTROL FLOW ==========================================================
    // Program counter
    pol commit pc; 
    // Return Pointer
    pol commit internal_return_ptr;
    // Call Pointer (nested call)
    pol commit call_ptr;
    
    pol commit sel_op_internal_call;
    pol commit sel_op_internal_return;
    pol commit sel_op_jump;
    pol commit sel_op_jumpi;
    pol commit sel_op_external_call;
    
    // Memory Space Identifier
    pol commit space_id;

    //===== MEMORY OPCODES ==========================================================
    pol commit sel_op_set;
    pol commit sel_op_mov;
    pol commit sel_op_cmov;
    
    //===== TABLE SUBOP-TR ========================================================
    // Boolean selectors for (sub-)operations. Only one operation is activated at
    // a time.

    pol commit sel_op_add;
    pol commit sel_op_sub;
    pol commit sel_op_mul;
    pol commit sel_op_div;
    pol commit sel_op_fdiv;
    pol commit sel_op_not;
    pol commit sel_op_eq;
    pol commit sel_op_and;
    pol commit sel_op_or;
    pol commit sel_op_xor;
    pol commit sel_op_cast;
    pol commit sel_op_lt;
    pol commit sel_op_lte;
    pol commit sel_op_shl;
    pol commit sel_op_shr;

    // Helper selector to characterize an ALU chiplet selector
    pol commit sel_alu;

    // Helper selector to characterize a Binary chiplet selector
    pol commit sel_bin;

    // Instruction memory tags read/write (1: u8, 2: u16, 3: u32, 4: u64, 5: u128, 6: field)
    pol commit r_in_tag;
    pol commit w_in_tag;
    pol commit alu_in_tag; // Copy of r_in_tag or w_in_tag depending of the operation. It is sent to ALU trace.

    // Errors
    pol commit op_err; // Boolean flag pertaining to an operation error
    pol commit tag_err; // Boolean flag (foreign key to mem.tag_err)

    // A helper witness being the inverse of some value
    // to show a non-zero equality
    pol commit inv;
    pol commit id_zero; // Boolean telling whether id is zero (cmov opcode)

    //===== MEMORY MODEL ========================================================
    // ind_addr_a -> (gets resolved to)
    // mem_addr_a -> (gets loaded to)
    // ia

    // Intermediate register values
    pol commit ia;
    pol commit ib;
    pol commit ic;
    pol commit id;
    
    // Memory operation selector per intermediate register
    // They signal that a memory operation is performed on the register.
    // This does NOT take into consideration indirections.
    pol commit sel_mem_op_a;
    pol commit sel_mem_op_b;
    pol commit sel_mem_op_c;
    pol commit sel_mem_op_d;

    // Read-write flag per intermediate register: Read = 0, Write = 1
    // This specifies whether the register is read or written to.
    pol commit rwa;
    pol commit rwb;
    pol commit rwc;
    pol commit rwd;
    
    // Indirect register values
    // Cell ind_addr_x holds the indirect address to be resolved into mem_addr_ix.
    pol commit ind_addr_a;
    pol commit ind_addr_b;
    pol commit ind_addr_c;
    pol commit ind_addr_d;

    // Memory address involved into a memory operation per pertaining intermediate register
    // We should range constrain it to 32 bits ultimately. For first version of the AVM,
    // we will assume that these columns are of the right type.
    pol commit mem_addr_a;
    pol commit mem_addr_b;
    pol commit mem_addr_c;
    pol commit mem_addr_d;

    // Indirect memory operation selector per indirect register
    // This selects whether ind_addr_x is resolved to mem_addr_ix.
    pol commit sel_resolve_ind_addr_a;
    pol commit sel_resolve_ind_addr_b;
    pol commit sel_resolve_ind_addr_c;
    pol commit sel_resolve_ind_addr_d;
  
    // Track the last line of the execution trace. It does NOT correspond to the last row of the whole table
    // of size N. As this depends on the supplied bytecode, this polynomial cannot be constant.
    pol commit sel_last;
    
    // Relations on type constraints
    // TODO: Very likely, we can remove these constraints as the selectors should be derived during
    // opcode decomposition.
    sel_op_address * (1 - sel_op_address) = 0;
    sel_op_storage_address * (1 - sel_op_storage_address) = 0;
    sel_op_sender * (1 - sel_op_sender) = 0;
    sel_op_function_selector * (1 - sel_op_function_selector) = 0;
    sel_op_transaction_fee * (1 - sel_op_transaction_fee) = 0;
    sel_op_chain_id * (1 - sel_op_chain_id) = 0;
    sel_op_version * (1 - sel_op_version) = 0;
    sel_op_block_number * (1 - sel_op_block_number) = 0;
    sel_op_coinbase * (1 - sel_op_coinbase) = 0;
    sel_op_timestamp * (1 - sel_op_timestamp) = 0;
    sel_op_fee_per_l2_gas * (1 - sel_op_fee_per_l2_gas) = 0;
    sel_op_fee_per_da_gas * (1 - sel_op_fee_per_da_gas) = 0;

    // MACHINE STATE - GAS
    sel_op_l2gasleft * (1 - sel_op_l2gasleft) = 0;
    sel_op_dagasleft * (1 - sel_op_dagasleft) = 0;

    sel_op_note_hash_exists * (1 - sel_op_note_hash_exists) = 0;
    sel_op_emit_note_hash * (1 - sel_op_emit_note_hash) = 0;
    sel_op_nullifier_exists * (1 - sel_op_nullifier_exists) = 0;
    sel_op_emit_nullifier * (1 - sel_op_emit_nullifier) = 0;
    sel_op_l1_to_l2_msg_exists * (1 - sel_op_l1_to_l2_msg_exists) = 0;
    sel_op_emit_unencrypted_log * (1 - sel_op_emit_unencrypted_log) = 0;
    sel_op_emit_l2_to_l1_msg * (1 - sel_op_emit_l2_to_l1_msg) = 0;
    sel_op_get_contract_instance * (1 - sel_op_get_contract_instance) = 0;

    sel_op_sload * (1 - sel_op_sload) = 0;
    sel_op_sstore * (1 - sel_op_sstore) = 0;

    sel_op_radix_le * (1 - sel_op_radix_le) = 0;
    sel_op_sha256 * (1 - sel_op_sha256) = 0;
    sel_op_poseidon2 * (1 - sel_op_poseidon2) = 0;
    sel_op_keccak * (1 - sel_op_keccak) = 0;
    sel_op_pedersen * (1 - sel_op_pedersen) = 0;
    sel_op_ecadd * (1 - sel_op_ecadd) = 0;
    sel_op_pedersen_commit * (1 - sel_op_pedersen_commit) = 0;
    sel_op_msm * (1 - sel_op_msm) = 0;

    sel_op_add * (1 - sel_op_add) = 0;
    sel_op_sub * (1 - sel_op_sub) = 0;
    sel_op_mul * (1 - sel_op_mul) = 0;
    sel_op_div * (1 - sel_op_div) = 0;
    sel_op_fdiv * (1 - sel_op_fdiv) = 0;
    sel_op_not * (1 - sel_op_not) = 0;
    sel_op_eq * (1 - sel_op_eq) = 0;
    sel_op_and * (1 - sel_op_and) = 0;
    sel_op_or * (1 - sel_op_or) = 0;
    sel_op_xor * (1 - sel_op_xor) = 0;
    sel_op_cast * (1 - sel_op_cast) = 0;
    sel_op_lt * (1 - sel_op_lt) = 0;
    sel_op_lte * (1 - sel_op_lte) = 0;
    sel_op_shl * (1 - sel_op_shl) = 0;
    sel_op_shr * (1 - sel_op_shr) = 0;

    sel_op_internal_call * (1 - sel_op_internal_call) = 0;
    sel_op_internal_return * (1 - sel_op_internal_return) = 0;
    sel_op_jump * (1 - sel_op_jump) = 0;
    sel_op_jumpi * (1 - sel_op_jumpi) = 0;
    sel_op_external_call * (1 - sel_op_external_call) = 0;

    sel_op_calldata_copy * (1 - sel_op_calldata_copy) = 0;
    sel_op_external_return * (1 - sel_op_external_return) = 0;
    sel_op_external_revert * (1 - sel_op_external_revert) = 0;

    // Might be removed if derived from opcode based on a lookup of constants
    sel_op_set * (1 - sel_op_set) = 0;
    sel_op_mov * (1 - sel_op_mov) = 0;
    sel_op_cmov * (1 - sel_op_cmov) = 0;

    op_err * (1 - op_err) = 0;
    tag_err * (1 - tag_err) = 0; // Potential optimization (boolean constraint derivation from equivalence check to mem)?
    id_zero * (1 - id_zero) = 0;

    // Might be removed if derived from opcode based on a lookup of constants
    sel_mem_op_a * (1 - sel_mem_op_a) = 0;
    sel_mem_op_b * (1 - sel_mem_op_b) = 0;
    sel_mem_op_c * (1 - sel_mem_op_c) = 0;
    sel_mem_op_d * (1 - sel_mem_op_d) = 0;

    rwa * (1 - rwa) = 0;
    rwb * (1 - rwb) = 0;
    rwc * (1 - rwc) = 0;
    rwd * (1 - rwd) = 0;

    // Might be removed if derived from opcode based on a lookup of constants
    sel_resolve_ind_addr_a * (1 - sel_resolve_ind_addr_a) = 0;
    sel_resolve_ind_addr_b * (1 - sel_resolve_ind_addr_b) = 0;
    sel_resolve_ind_addr_c * (1 - sel_resolve_ind_addr_c) = 0;
    sel_resolve_ind_addr_d * (1 - sel_resolve_ind_addr_d) = 0;

    // TODO - Potential constraints to be implemented:
    // - mem_addr_a, mem_addr_b, mem_addr_c, mem_addr_d to u32 type:
    //    - For direct memory accesses, this should be enforced by bytecode validation
    //      and instruction decomposition. Namely, in this case, only 32-bit immediate
    //      values should be written into these memory indices.
    //    - For indirect memory accesses, the memory trace constraints ensure that
    //      loaded values come from memory addresses with tag u32. This is enforced in the memory trace
    //      where each memory entry with flag sel_resolve_ind_addr_x (for x = a,b,c,d) constrains r_int_tag == 3 (u32).
    //
    // - ind_addr_a, ind_addr_b, ind_addr_c, ind_addr_d to u32 type: Should be guaranteed by bytecode validation and
    // instruction decomposition as only immediate 32-bit values should be written into the indirect registers.
    //
    // - 0 <= r_in_tag, w_in_tag <= 6 // This should be constrained by the operation decomposition.

    //====== COMPARATOR OPCODES CONSTRAINTS =====================================
    // Enforce that the tag for the ouput of EQ opcode is u8 (i.e. equal to 1).
    #[OUTPUT_U8]
    (sel_op_eq + sel_op_lte + sel_op_lt) * (w_in_tag - 1) = 0;

    //====== FDIV OPCODE CONSTRAINTS ============================================
    // Relation for division over the finite field
    // If tag_err == 1 in a division, then ib == 0 and op_err == 1.
    #[SUBOP_FDIV]
    sel_op_fdiv * (1 - op_err) * (ic * ib - ia) = 0;

    // When sel_op_fdiv == 1 or sel_op_div, we want ib == 0 <==> op_err == 1
    // This can be achieved with the 2 following relations.
    // inv is an extra witness to show that we can invert ib, i.e., inv = ib^(-1)
    // If ib == 0, we have to set inv = 1 to satisfy the second relation,
    // because op_err == 1 from the first relation.
    // TODO: Update the name of these relations once negative tests are updated
    #[SUBOP_FDIV_ZERO_ERR1]
    (sel_op_fdiv + sel_op_div) * (ib * inv - 1 + op_err) = 0;
    #[SUBOP_FDIV_ZERO_ERR2]
    (sel_op_fdiv + sel_op_div) * op_err * (1 - inv) = 0;

    // Enforcement that instruction tags are FF (tag constant 6).
    // TODO: These 2 conditions might be removed and enforced through
    //       the bytecode decomposition instead.
    #[SUBOP_FDIV_R_IN_TAG_FF]
    sel_op_fdiv * (r_in_tag - 6) = 0;
    #[SUBOP_FDIV_W_IN_TAG_FF]
    sel_op_fdiv * (w_in_tag - 6) = 0;

    // op_err cannot be maliciously activated for a non-relevant
    // operation selector, i.e., op_err == 1 ==> sel_op_fdiv || sel_op_XXX || ...
    // op_err * (sel_op_fdiv + sel_op_XXX + ... - 1) == 0
    // Note that the above is even a stronger constraint, as it shows
    // that exactly one sel_op_XXX must be true.
    // At this time, we have only division producing an error.
    #[SUBOP_ERROR_RELEVANT_OP]
    op_err * ((sel_op_fdiv + sel_op_div) - 1) = 0;

    // TODO: constraint that we stop execution at the first error (tag_err or op_err)
    // An error can only happen at the last sub-operation row.

    // OPEN/POTENTIAL OPTIMIZATION: Dedicated error per relevant operation?
    // For the finite field division, we could lower the degree from 4 to 3
    // (sel_op_fdiv - op_fdiv_err) * (ic * ib - ia) = 0;
    // Same for the relations related to the error activation:
    // (ib * inv - 1 + op_fdiv_err) = 0 && op_err * (1 - inv) = 0 
    // This works in combination with op_fdiv_err * (sel_op_fdiv - 1) = 0;
    // Drawback is the need to paralllelize the latter.
    
    //===== CONTROL FLOW =======================================================
    // pol commit sel_halted;
    // sel_halted * (1 - sel_halted) = 0;

    //===== JUMP ===============================================================
    #[PC_JUMP]
    sel_op_jump * (pc' - ia) = 0;

    #[PC_JUMPI]
    sel_op_jumpi * ((1 - id_zero) * (pc' - ia) + id_zero * (pc' - pc - 1)) = 0;

    // TODO: Consolidation with #[PC_JUMP] and sel_op_internal_call * (pc' - ia) = 0; sel_op_internal_return * (pc' - ia) = 0;

    //===== INTERNAL_CALL ======================================================
    // - The program counter in the next row should be equal to the value loaded from the ia register
    // - We then write the return location (pc + 1) into the call stack (in memory)
    
    #[RETURN_POINTER_INCREMENT]
    sel_op_internal_call * (internal_return_ptr' - (internal_return_ptr + 1)) = 0;
    sel_op_internal_call * (internal_return_ptr - mem_addr_b) = 0;
    sel_op_internal_call * (pc' - ia) = 0;
    sel_op_internal_call * ((pc + 1) - ib) = 0;

    // TODO(md): Below relations may be removed through sub-op table lookup
    sel_op_internal_call * (rwb - 1) = 0;
    sel_op_internal_call * (sel_mem_op_b  - 1) = 0;
    
    //===== INTERNAL_RETURN ===================================================
    // - We load the memory pointer to be the internal_return_ptr 
    // - Constrain then next program counter to be the loaded value
    // - decrement the internal_return_ptr

    #[RETURN_POINTER_DECREMENT]
    sel_op_internal_return * (internal_return_ptr' - (internal_return_ptr - 1)) = 0;
    sel_op_internal_return * ((internal_return_ptr - 1) - mem_addr_a) = 0;
    sel_op_internal_return * (pc' - ia) = 0;

    // TODO(md): Below relations may be removed through sub-op table lookup
    sel_op_internal_return * rwa = 0;
    sel_op_internal_return * (sel_mem_op_a - 1) = 0;

    //===== CONTROL_FLOW_CONSISTENCY ============================================
    pol SEL_ALL_CTRL_FLOW = sel_op_jump + sel_op_jumpi + sel_op_internal_call
                          + sel_op_internal_return + sel_op_external_call + sel_op_external_return;
    pol SEL_ALU_R_TAG = sel_op_add + sel_op_sub + sel_op_mul + sel_op_div + sel_op_not + sel_op_eq
                      + sel_op_lt + sel_op_lte + sel_op_shr + sel_op_shl;
    pol SEL_ALU_W_TAG = sel_op_cast;
    pol SEL_ALL_ALU = SEL_ALU_R_TAG + SEL_ALU_W_TAG;
    pol SEL_ALL_LEFTGAS = sel_op_dagasleft + sel_op_l2gasleft;
    pol SEL_ALL_BINARY = sel_op_and + sel_op_or + sel_op_xor;
    pol SEL_ALL_GADGET = sel_op_radix_le + sel_op_sha256 + sel_op_poseidon2 + sel_op_keccak + sel_op_pedersen
                       + sel_op_ecadd + sel_op_pedersen_commit + sel_op_msm;
    pol SEL_ALL_MEMORY = sel_op_cmov + sel_op_mov + sel_op_set;
    pol OPCODE_SELECTORS = sel_op_fdiv + sel_op_calldata_copy + sel_op_get_contract_instance
                         + SEL_ALL_ALU + SEL_ALL_BINARY + SEL_ALL_MEMORY + SEL_ALL_GADGET
                         + KERNEL_INPUT_SELECTORS + KERNEL_OUTPUT_SELECTORS + SEL_ALL_LEFTGAS
                         + SEL_ALL_CTRL_FLOW;

    pol CUR_AND_NEXT_ARE_MAIN = sel_execution_row * sel_execution_row';

    // When considering two adjacent main trace rows,
    // the program counter must increment if not jumping or returning.
    #[PC_INCREMENT]
    CUR_AND_NEXT_ARE_MAIN * (1 - SEL_ALL_CTRL_FLOW) * (pc' - (pc + 1)) = 0;

    // When considering two adjacent main trace rows,
    // the internal return ptr must stay the same if not jumping or returning.
    #[INTERNAL_RETURN_POINTER_CONSISTENCY]
    CUR_AND_NEXT_ARE_MAIN * (1 - SEL_ALL_CTRL_FLOW) * (internal_return_ptr' - internal_return_ptr) = 0;
    // TODO: for external_call and external_return the internal_return_ptr will
    // actually have to be reset (to zero for an external call) or resumed
    // (for an external return) and that the space_id/call_ptr will be incremented.

    // TODO: we want to set an initial number for the reserved memory of the jump pointer

    //====== SPACE ID CONSTRAINTS ===============================================
    #[SPACE_ID_INTERNAL]
    (sel_op_internal_call + sel_op_internal_return) * (space_id - constants_misc.INTERNAL_CALL_SPACE_ID) = 0;

    #[SPACE_ID_STANDARD_OPCODES]
    (1 - sel_op_internal_call - sel_op_internal_return) * (call_ptr - space_id) = 0;

    //====== MEMORY OPCODES CONSTRAINTS =========================================

    // TODO: consolidate with zero division error handling
    // TODO: Ensure that operation decompostion will ensure mutual exclusivity of sel_op_cmov and sel_op_jumpi

    // When sel_op_cmov or sel_op_jumpi == 1, we need id == 0 <==> id_zero == 0
    // This can be achieved with the 2 following relations.
    // inv is an extra witness to show that we can invert id, i.e., inv = id^(-1)
    // If id == 0, we have to set inv = 1 to satisfy the second relation,
    // because id_zero == 1 from the first relation.
    #[CMOV_CONDITION_RES_1]
    (sel_op_cmov + sel_op_jumpi) * (id * inv - 1 + id_zero) = 0;
    #[CMOV_CONDITION_RES_2]
    (sel_op_cmov + sel_op_jumpi) * id_zero * (1 - inv) = 0;

    // Boolean selectors telling whether we move ia to ic or ib to ic.
    // Boolean constraints and mutual exclusivity are derived from their
    // respective definitions based on sel_op_mov, sel_op_cmov, and id_zero.
    pol commit sel_mov_ia_to_ic;
    pol commit sel_mov_ib_to_ic;

    // For MOV, we copy ia to ic.
    // For CMOV, we copy ia to ic if id is NOT zero, otherwise we copy ib to ic.
    sel_mov_ia_to_ic = sel_op_mov + sel_op_cmov * (1 - id_zero);
    sel_mov_ib_to_ic = sel_op_cmov * id_zero;

    #[MOV_SAME_VALUE_A]
    sel_mov_ia_to_ic * (ia - ic) = 0; // Ensure that the correct value is moved/copied.
    #[MOV_SAME_VALUE_B]
    sel_mov_ib_to_ic * (ib - ic) = 0; // Ensure that the correct value is moved/copied.
    #[MOV_MAIN_SAME_TAG]
    (sel_op_mov + sel_op_cmov) * (r_in_tag - w_in_tag) = 0;

    // Predicate to activate the copy of intermediate registers to ALU table. If tag_err == 1,
    // the operation is not copied to the ALU table.
    sel_alu = SEL_ALL_ALU * (1 - tag_err) * (1 - op_err);

    // Dispatch the correct in_tag for alu
    SEL_ALU_R_TAG * (alu_in_tag - r_in_tag) = 0;
    SEL_ALU_W_TAG * (alu_in_tag - w_in_tag) = 0;

    //===== GASLEFT OPCODES =====================================================
    // XX_gas_remaining is the gas remaining BEFORE the current opcode.
    // The spec requires the GASLEFT opcodes to return the gas remaining AFTER the opcode.
    // Therefore we use XX_gas_remaining' in the constraints below.
    #[L2GASLEFT]
    sel_op_l2gasleft * (ia - l2_gas_remaining') = 0;
    #[DAGASLEFT]
    sel_op_dagasleft * (ia - da_gas_remaining') = 0;

    //===== Memory Slice Constraints ============================================
    pol commit sel_slice_gadget; // Selector to activate a slice gadget operation in the gadget (#[PERM_MAIN_SLICE]).

    // Activate only if tag_err is disabled or retsize (ib) is non-zero
    ib * (1 - tag_err) * (sel_op_calldata_copy + sel_op_external_return - sel_slice_gadget)= 0;

    //====== Inter-table Constraints ============================================

    #[INCL_MAIN_TAG_ERR]
    mem.tag_err {mem.clk} in tag_err {clk};

    #[INCL_MEM_TAG_ERR]
    tag_err {clk} in mem.tag_err {mem.clk};

    #[PERM_MAIN_ALU]
    sel_alu {clk, ia, ib, ic, sel_op_add, sel_op_sub,
             sel_op_mul, sel_op_div, sel_op_eq, sel_op_not, sel_op_cast,
             sel_op_lt, sel_op_lte, sel_op_shr, sel_op_shl, alu_in_tag}
    is
    alu.sel_alu {alu.clk, alu.ia, alu.ib, alu.ic, alu.op_add, alu.op_sub,
                     alu.op_mul, alu.op_div, alu.op_eq, alu.op_not, alu.op_cast,
                     alu.op_lt, alu.op_lte, alu.op_shr, alu.op_shl, alu.in_tag};

    // Based on the boolean selectors, we derive the binary op id to lookup in the table;
    // TODO: Check if having 4 columns (op_id + 3 boolean selectors) is more optimal that just using the op_id
    // but with a higher degree constraint: op_id * (op_id - 1) * (op_id - 2)
    pol commit bin_op_id;
    #[BIN_SEL_1]
    bin_op_id = sel_op_or + 2 * sel_op_xor; // sel_op_and excluded since op_id = 0 for op_and

    // Only 1 of the binary selectors should be set (i.e. Mutual Exclusivity)
    // sel_Bin is not explicitly constrained to be boolean, however this is enforced through
    // the operation decomposition step during bytecode unpacking.
    #[BIN_SEL_2]
    sel_bin = sel_op_and + sel_op_or + sel_op_xor;

    #[PERM_MAIN_BIN]
    sel_bin {clk, ia, ib, ic, bin_op_id, r_in_tag}
    is
    binary.start {binary.clk, binary.acc_ia, binary.acc_ib, binary.acc_ic, binary.op_id, binary.in_tag};

    #[PERM_MAIN_CONV]
    sel_op_radix_le {clk, ia, ic, id}
    is
    conversion.sel_to_radix_le {conversion.clk, conversion.input, conversion.radix, conversion.num_limbs};

    // This will be enabled when we migrate just to sha256Compression, as getting sha256 to work with it is tricky.
    // #[PERM_MAIN_SHA256]
    // sel_op_sha256 {clk, ia, ib, ic}
    // is
    // sha256.sel_sha256_compression {sha256.clk, sha256.state, sha256.input, sha256.output};

    // Mem_addr_a points to the start of the input array of length 4
    // Mem_addr_b points to the start of the output array of length 4
    #[PERM_MAIN_POS2_PERM]
    sel_op_poseidon2 {clk, mem_addr_a, mem_addr_b}
    is
    poseidon2.sel_poseidon_perm {poseidon2.clk, poseidon2.input_addr, poseidon2.output_addr};

    // This will be enabled when we migrate just to keccakf1600, as getting keccak to work with it is tricky.
    // #[PERM_MAIN_KECCAK]
    // sel_op_keccak {clk, ia, ic}
    // is
    // keccakf1600.sel_keccakf1600 {keccakf1600.clk, keccakf1600.input, keccakf1600.output};

    #[PERM_MAIN_PEDERSEN]
    sel_op_pedersen {clk, ia}
    is
    pedersen.sel_pedersen {pedersen.clk, pedersen.input};

    #[PERM_MAIN_SLICE]
    sel_slice_gadget {clk, space_id, ia, ib, mem_addr_c, sel_op_calldata_copy, sel_op_external_return}
    is
    slice.sel_start {slice.clk, slice.space_id, slice.col_offset, slice.cnt, slice.addr, slice.sel_cd_cpy, slice.sel_return};

    #[PERM_MAIN_MEM_A]
    sel_mem_op_a {clk, space_id, mem_addr_a, ia, rwa, r_in_tag, w_in_tag, sel_mov_ia_to_ic, sel_op_cmov}
    is
    mem.sel_op_a {mem.clk, mem.space_id, mem.addr, mem.val, mem.rw
                , mem.r_in_tag, mem.w_in_tag, mem.sel_mov_ia_to_ic, mem.sel_op_cmov};

    #[PERM_MAIN_MEM_B]
    sel_mem_op_b {clk, space_id, mem_addr_b, ib, rwb, r_in_tag, w_in_tag, sel_mov_ib_to_ic, sel_op_cmov}
    is
    mem.sel_op_b {mem.clk, mem.space_id, mem.addr, mem.val, mem.rw
                , mem.r_in_tag, mem.w_in_tag, mem.sel_mov_ib_to_ic, mem.sel_op_cmov};

    #[PERM_MAIN_MEM_C]
    sel_mem_op_c {clk, space_id, mem_addr_c, ic, rwc, r_in_tag, w_in_tag}
    is
    mem.sel_op_c {mem.clk, mem.space_id, mem.addr, mem.val, mem.rw, mem.r_in_tag, mem.w_in_tag};

    #[PERM_MAIN_MEM_D]
    sel_mem_op_d {clk, space_id, mem_addr_d, id, rwd, r_in_tag, w_in_tag, sel_op_cmov}
    is
    mem.sel_op_d {mem.clk, mem.space_id, mem.addr, mem.val, mem.rw
                , mem.r_in_tag, mem.w_in_tag, mem.sel_op_cmov};

    #[PERM_MAIN_MEM_IND_ADDR_A]
    sel_resolve_ind_addr_a {clk, space_id, ind_addr_a, mem_addr_a}
    is
    mem.sel_resolve_ind_addr_a {mem.clk, mem.space_id, mem.addr, mem.val};

    #[PERM_MAIN_MEM_IND_ADDR_B]
    sel_resolve_ind_addr_b {clk, space_id, ind_addr_b, mem_addr_b}
    is
    mem.sel_resolve_ind_addr_b {mem.clk, mem.space_id, mem.addr, mem.val};

    #[PERM_MAIN_MEM_IND_ADDR_C]
    sel_resolve_ind_addr_c {clk, space_id, ind_addr_c, mem_addr_c}
    is
    mem.sel_resolve_ind_addr_c {mem.clk, mem.space_id, mem.addr, mem.val};

    #[PERM_MAIN_MEM_IND_ADDR_D]
    sel_resolve_ind_addr_d {clk, space_id, ind_addr_d, mem_addr_d}
    is
    mem.sel_resolve_ind_addr_d {mem.clk, mem.space_id, mem.addr, mem.val};

    #[LOOKUP_MEM_RNG_CHK_LO]
    mem.sel_rng_chk {mem.diff_lo} in sel_rng_16 {clk};

    #[LOOKUP_MEM_RNG_CHK_MID] 
    mem.sel_rng_chk {mem.diff_mid} in sel_rng_16 {clk};

    #[LOOKUP_MEM_RNG_CHK_HI]
    mem.sel_rng_chk {mem.diff_hi} in sel_rng_8 {clk};
