include "avm_main.pil";

namespace avm_mem(256);
    // ========= Table MEM-TR =================
    pol commit clk;
    pol commit tsp; // Timestamp derived form clk and sub-operation types (SUB_CLK)
    pol commit addr;
    pol commit space_id;
    pol commit glob_addr;
    pol commit tag; // Memory tag (0: uninitialized, 1: u8, 2: u16, 3: u32, 4: u64, 5: u128, 6:field)
    pol commit val;
    pol commit rw; // Enum: 0 (read), 1 (write)
    pol commit lastAccess; // Boolean (1 when this row is the last of a given address)
    pol commit last; // Boolean indicating the last row of the memory trace (not execution trace)
    pol commit mem_sel; // Selector for every row pertaining to the memory trace
    pol commit rng_chk_sel; // Selector for row on which range-checks apply.

    pol commit r_in_tag; // Instruction memory tag ("foreign key" pointing to avm_main.r_in_tag)
    pol commit w_in_tag; // Instruction memory tag ("foreign key" pointing to avm_main.w_in_tag)
    pol commit skip_check_tag; // A boolean value which relaxes the consistency check in memory
                               // trace between tag and r_in_tag. Required for CMOV opcode.

    // Indicator of the intermediate register pertaining to the memory operation (foreign key to avm_main.mem_op_XXX)
    pol commit op_a;
    pol commit op_b;
    pol commit op_c;
    pol commit op_d;

    // Indicator of the indirect register pertaining to the memory operation (foreign key to avm_main.ind_op_XXX)
    pol commit ind_op_a;
    pol commit ind_op_b;
    pol commit ind_op_c;
    pol commit ind_op_d;

    // Selectors related to MOV/CMOV opcodes (copied from main trace for loading operation on intermediated register ia/ib)
    // Boolean constraint is performed in main trace.
    pol commit sel_mov_a;
    pol commit sel_mov_b;
    pol commit sel_cmov;

    // Error columns
    pol commit tag_err; // Boolean (1 if r_in_tag != tag is detected)

    // Helper columns
    pol commit one_min_inv; // Extra value to prove r_in_tag != tag with error handling
    // pol DIFF: 40-bit difference between two consecutive timestamps or two consecutive addresses
    pol commit diff_hi;  // Higher 8-bit limb of diff.
    pol commit diff_mid; // Middle 16-bit limb of diff.
    pol commit diff_lo;  // Lower 16-bit limb of diff.

    // Type constraints
    lastAccess * (1 - lastAccess) = 0;
    last * (1 - last) = 0;
    rw * (1 - rw) = 0;
    tag_err * (1 - tag_err) = 0;
    op_a * (1 - op_a) = 0;
    op_b * (1 - op_b) = 0;
    op_c * (1 - op_c) = 0;
    op_d * (1 - op_d) = 0;
    ind_op_a * (1 - ind_op_a) = 0;
    ind_op_b * (1 - ind_op_b) = 0;
    ind_op_c * (1 - ind_op_c) = 0;
    ind_op_d * (1 - ind_op_d) = 0;

    // TODO:  1) Ensure that addr is constrained to be 32 bits by the main trace and/or bytecode decomposition
    //        2) Ensure that tag, r_in_tag, w_in_tag are properly constrained by the main trace and/or bytecode decomposition

    // Definition of mem_sel
    mem_sel = op_a + op_b + op_c + op_d + ind_op_a + ind_op_b + ind_op_c + ind_op_d;
    // Maximum one memory operation enabled per row
    mem_sel * (mem_sel - 1) = 0; // TODO: might be infered by the main trace

    // Enforce the memory entries to be contiguous, i.e., as soon as
    // mem_sel is disabled all subsequent rows have mem_sel disabled.
    #[MEM_CONTIGUOUS]
    (1 - avm_main.first) * mem_sel' * (1 - mem_sel) = 0;

    // Memory trace rows cannot start at first row
    #[MEM_FIRST_EMPTY]
    avm_main.first * mem_sel = 0;

    // Definition of last, i.e., last row with mem_sel activated
    #[MEM_LAST]
    (1 - last) * mem_sel * (1 - mem_sel') = 0;

    // Definition of rng_chk_sel. It is a boolean as mem_sel and last are booleans.
    rng_chk_sel = mem_sel * (1 - last);

    // sub_clk derivation
    // Current sub_clk range is [0,12) which is subdivided as follows:
    // [0,4): indirect memory operations (read-only resolution of the direct address)
    // [4,8): direct read memory operations
    // [8, 12): direct write memory operations
    // Each sub-range of 4 values correspond to registers ordered as a, b, c, d.

    pol NUM_SUB_CLK = 12;
    pol IND_OP = ind_op_a + ind_op_b + ind_op_c + ind_op_d;
    pol SUB_CLK = mem_sel * (ind_op_b + op_b + 2 * (ind_op_c + op_c) + 3 * (ind_op_d + op_d) + 4 * (1 - IND_OP + rw));
    // We need the mem_sel factor as the right factor is not zero when all columns are zero.

    #[TIMESTAMP]
    tsp = NUM_SUB_CLK * clk + SUB_CLK;

    #[GLOBAL_ADDR]
    glob_addr = space_id * 2**32 + addr;

    #[LAST_ACCESS_FIRST_ROW]
    avm_main.first * (1 - lastAccess) = 0;
    // Remark: lastAccess == 1 on first row and therefore any relation with the
    //         multiplicative term (1 - lastAccess) implicitly includes (1 - avm_main.first)
    //         Similarly, this includes (1 - last) as well.

    // lastAccess == 0 ==> glob_addr' == glob_addr
    // Optimization: We removed the term (1 - avm_main.first)
    #[MEM_LAST_ACCESS_DELIMITER]
    (1 - lastAccess) * (glob_addr' - glob_addr) = 0;
    
    // We need: lastAccess == 1 ==> glob_addr' > glob_addr
    // The above implies: glob_addr' == glob_addr ==> lastAccess == 0
    // This condition does not apply on the last row.
 
    // In addition, we need glob_addr' == glob_addr ==> tsp' > tsp
    // For all rows pertaining to the memory trace (mem_sel == 1) except the last one,
    // i.e., when rng_chk_sel == 1, we compute the difference:
    // 1) glob_addr' - glob_addr if lastAccess == 1
    // 2) tsp' - tsp   if lastAccess == 0 (i.e., whenever glob_addr' == glob_addr)
    pol DIFF = lastAccess * (glob_addr' - glob_addr) + (1 - lastAccess) * (tsp' - tsp);

    // We perform a 40-bit range check of DIFF which proves that glob_addr' > glob_addr if lastAccess == 1
    // and tsp' > tsp whenever glob_addr' == glob_addr
    // Therefore, we ensure proper grouping of each global address and each memory access pertaining to a given
    // global address is sorted according the arrow of time.
    #[DIFF_RNG_CHK_DEC]
    rng_chk_sel * (DIFF - diff_hi * 2**32 - diff_mid * 2**16 - diff_lo) = 0;

    // lastAccess == 0 && rw' == 0 ==> val == val'
    // This condition does not apply on the last row.
    // Note: in barretenberg, a shifted polynomial will be 0 on the last row (shift is not cyclic)
    // Note2: in barretenberg, if a poynomial is shifted, its non-shifted equivalent must be 0 on the first row
    
    // Optimization: We removed the term (1 - avm_main.first) and (1 - last)
    #[MEM_READ_WRITE_VAL_CONSISTENCY]
    (1 - lastAccess) * (1 - rw') * (val' - val) = 0;
    
    // lastAccess == 0 && rw' == 0 ==> tag == tag'
    // Optimization: We removed the term (1 - avm_main.first) and (1 - last)
    #[MEM_READ_WRITE_TAG_CONSISTENCY]
    (1 - lastAccess) * (1 - rw') * (tag' - tag) = 0;

    // Constrain that the first load from a given address has value 0. (Consistency of memory initialization.)
    // We do not constrain that the tag == 0 as the 0 value is compatible with any memory type.
    // As we enforce lastAccess = 1 on the first row, the following condition applies also for the first memory entry:
    #[MEM_ZERO_INIT]
    lastAccess * (1 - rw') * val' = 0;

    // Skip check tag
    #[SKIP_CHECK_TAG]
    skip_check_tag = sel_cmov * (op_d + op_a * (1-sel_mov_a) + op_b * (1-sel_mov_b));

    // Memory tag consistency check for load operations, i.e., rw == 0.
    // We want to prove that r_in_tag == tag <==> tag_err == 0
    // We want to show that we can invert (r_in_tag - tag) when tag_err == 1,
    // i.e., tag_err == 1 ==> r_in_tag != tag
    // For this purpose, we need an extra column to store a witness
    // which can be used to show that (r_in_tag - tag) is invertible (non-zero).
    // We re-use the same zero (non)-equality technique as in SUBOP_DIVISION_ZERO_ERR1/2 applied
    // to (r_in_tag - tag) by replacing tag_err by 1 - tag_err because here
    // the equality to zero is not an error. Another modification
    // consists in storing 1 - (r_in_tag - tag)^(-1) in the extra witness column
    // instead of (r_in_tag - tag)^(-1) as this allows to store zero by default (i.e., when tag_err == 0).
    // The new column one_min_inv is set to 1 - (r_in_tag - tag)^(-1) when tag_err == 1
    // but must be set to 0 when tags are matching and tag_err = 0
    #[MEM_IN_TAG_CONSISTENCY_1]
    (1 - skip_check_tag) * (1 - rw) * ((r_in_tag - tag) * (1 - one_min_inv) - tag_err) = 0;
    #[MEM_IN_TAG_CONSISTENCY_2]
    (1 - tag_err) * one_min_inv = 0;

    #[NO_TAG_ERR_WRITE_OR_SKIP]
    (skip_check_tag + rw) * tag_err = 0;

    // Correctness of two above checks MEM_IN_TAG_CONSISTENCY_1/2 (assuming rw == 0):
    // r_in_tag == tag ==> tag_err == 0 (first relation)
    // tag_err == 0 ==> one_min_inv == 0 by second relation. First relation ==> r_in_tag - tag == 0

    // Enforce that a write instruction tag is equal to tag for a write operation
    rw * (w_in_tag - tag) = 0;

    // Enforce that a write instruction never leads to a tag error
    #[NO_TAG_ERR_WRITE]
    rw * tag_err = 0;

    //====== Indirect Memory Constraints =====================================
    // Enforce r_in_tag == 3, i.e., r_in_tag must be U32
    ind_op_a * (r_in_tag - 3) = 0;
    ind_op_b * (r_in_tag - 3) = 0;
    ind_op_c * (r_in_tag - 3) = 0;
    ind_op_d * (r_in_tag - 3) = 0;

    // Indirect operation is always a load
    ind_op_a * rw = 0;
    ind_op_b * rw = 0;
    ind_op_c * rw = 0;
    ind_op_d * rw = 0;

    //====== MOV/CMOV Opcode Tag Constraint =====================================
    // The following constraint ensures that the r_in_tag is set to tag for
    // the load operation pertaining to Ia resp. Ib.
    // The permutation check #[PERM_MAIN_MEM_A/B] guarantees that the r_in_tag
    // value load operation for Ia/Ib is copied back in the main trace.
    // Constraint #[MOV_MAIN_SAME_TAG] copies r_in_tag to w_in_tag in the main
    // trace. Then, #[PERM_MAIN_MEM_C] copies w_in_tag for store operation from Ic.
    #[MOV_SAME_TAG]
    (sel_mov_a + sel_mov_b) * tag_err = 0; // Equivalent to (sel_mov_a + sel_mov_b) * (r_in_tag - tag) = 0