
include "mem_trace.pil";

namespace avmMini(256);

    //===== CONSTANT POLYNOMIALS ==================================================
    pol constant clk(i) { i };
    pol constant first = [1] + [0]*; // Used mostly to toggle off the first row consisting
                                     // only in first element of shifted polynomials.
    
    //===== TABLE SUBOP-TR ========================================================
    // Boolean selectors for (sub-)operations. Only one operation is activated at
    // a time.

    // ADD
    pol commit sel_op_add;
    // SUB
    pol commit sel_op_sub;
    // MUL
    pol commit sel_op_mul;
    // DIV
    pol commit sel_op_div;

    // Intermediate register values
    pol commit ia;
    pol commit ib;
    pol commit ic;
    
    // Memory operation per intermediate register
    pol commit mem_op_a;
    pol commit mem_op_b;
    pol commit mem_op_c;
    
    // Read-write flag per intermediate register: Read = 0, Write = 1
    pol commit rwa;
    pol commit rwb;
    pol commit rwc;
    
    // Memory index involved into a memory operation per pertaining intermediate register
    // We should range constrain it to 32 bits ultimately. For first mini-AVM,
    // we will assume that these columns are of the right type.
    pol commit mem_idx_a;
    pol commit mem_idx_b;
    pol commit mem_idx_c;
    
    
    // Track the last line of the execution trace. It does NOT correspond to the last row of the whole table
    // of size N. As this depends on the supplied bytecode, this polynomial cannot be constant.
    pol commit last;
    
    // Relations on type constraints
    sel_op_add * (1 - sel_op_add) = 0;
    sel_op_sub * (1 - sel_op_sub) = 0;
    sel_op_mul * (1 - sel_op_mul) = 0;
    sel_op_div * (1 - sel_op_div) = 0;
    mem_op_a * (1 - mem_op_a) = 0;
    mem_op_b * (1 - mem_op_b) = 0;
    mem_op_c * (1 - mem_op_c) = 0;
    rwa * (1 - rwa) = 0;
    rwb * (1 - rwb) = 0;
    rwc * (1 - rwc) = 0;
    
    // Relation for addition over the finite field
    sel_op_add * (ia + ib - ic) = 0;
    
     // Relation for subtraction over the finite field
    sel_op_sub * (ia - ib - ic) = 0;

     // Relation for multiplication over the finite field
    sel_op_mul * (ia * ib - ic) = 0;

     // Relation for division over the finite field
    sel_op_div * (ic * ib - ia) = 0;