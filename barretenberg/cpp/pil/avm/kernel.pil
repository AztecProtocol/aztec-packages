include "main.pil";
include "constants_gen.pil";

namespace kernel(256);
    pol public kernel_inputs;

    pol public kernel_value_out;
    pol public kernel_side_effect_out;
    pol public kernel_metadata_out;

    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/6463): just use one col for both of these
    pol commit kernel_in_offset;
    pol commit kernel_out_offset;

    // Note: in the future, with some codegen adjustments, this column will not be needed
    // as we can just add every entry in the public kernel_inputs to the lookup table
    pol commit q_public_input_kernel_add_to_table;
    pol commit q_public_input_kernel_out_add_to_table;

    // Kernel Outputs
    // 
    // The current implementation of kernel outputs is described within https://hackmd.io/zP1oMXF6Rf-L-ZZLXWmfHg
    
    // Global side effect counter; incremented after each side effect is produced.
    pol commit side_effect_counter;

    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/6465): Must constrain write_offset counters to be less than side effect MAX
    // Current write offsets for each opcode
    pol commit note_hash_exist_write_offset;
    pol commit nullifier_exists_write_offset;
    pol commit nullifier_non_exists_write_offset;
    pol commit l1_to_l2_msg_exists_write_offset;

    pol commit sload_write_offset;
    pol commit sstore_write_offset;

    pol commit emit_note_hash_write_offset;
    pol commit emit_nullifier_write_offset;
    pol commit emit_unencrypted_log_write_offset;
    pol commit emit_l2_to_l1_msg_write_offset;


    pol NOT_LAST = (1 - main.sel_last);

    // Constraints to increase the offsets when the opcodes are found
    #[NOTE_HASH_EXISTS_INC_CONSISTENCY_CHECK]
    NOT_LAST * (note_hash_exist_write_offset' - (note_hash_exist_write_offset + main.sel_op_note_hash_exists)) = 0;
    #[EMIT_NOTE_HASH_INC_CONSISTENCY_CHECK]
    NOT_LAST * (emit_note_hash_write_offset' - (emit_note_hash_write_offset + main.sel_op_emit_note_hash)) = 0;
    // if main.ib is set on op_nullifier_exists, then the nullifier_exists_write_offset will be incremented by 1, otherwise non_exists will be incremented 
    #[NULLIFIER_EXISTS_INC_CONSISTENCY_CHECK]
    NOT_LAST * (nullifier_exists_write_offset' - (nullifier_exists_write_offset + (main.sel_op_nullifier_exists * main.ib))) = 0;
    #[NULLIFIER_NON_EXISTS_INC_CONSISTENCY_CHECK]
    NOT_LAST * (nullifier_non_exists_write_offset' - (nullifier_non_exists_write_offset + (main.sel_op_nullifier_exists * (1 - main.ib)))) = 0;
    #[EMIT_NULLIFIER_INC_CONSISTENCY_CHECK]
    NOT_LAST * (emit_nullifier_write_offset' - (emit_nullifier_write_offset + main.sel_op_emit_nullifier)) = 0;
    #[L1_TO_L2_MSG_EXISTS_INC_CONSISTENCY_CHECK]
    NOT_LAST * (l1_to_l2_msg_exists_write_offset' - (l1_to_l2_msg_exists_write_offset + main.sel_op_l1_to_l2_msg_exists)) = 0;
    #[EMIT_UNENCRYPTED_LOG_INC_CONSISTENCY_CHECK]
    NOT_LAST * (emit_unencrypted_log_write_offset' - (emit_unencrypted_log_write_offset + main.sel_op_emit_unencrypted_log)) = 0;
    #[EMIT_L2_TO_L1_MSG_INC_CONSISTENCY_CHECK]
    NOT_LAST * (emit_l2_to_l1_msg_write_offset' - (emit_l2_to_l1_msg_write_offset + main.sel_op_emit_l2_to_l1_msg)) = 0;


    #[SLOAD_INC_CONSISTENCY_CHECK]
    NOT_LAST * (sload_write_offset' - (sload_write_offset + main.sel_op_sload)) = 0;
    #[SSTORE_INC_CONSISTENCY_CHECK]
    NOT_LAST * (sstore_write_offset' - (sstore_write_offset + main.sel_op_sstore)) = 0;
