
include "avm_mem.pil";
include "avm_alu.pil";
include "avm_binary.pil";

namespace avm_main(256);

    //===== CONSTANT POLYNOMIALS ==================================================
    pol constant clk(i) { i };
    pol constant first = [1] + [0]*; // Used mostly to toggle off the first row consisting
                                     // only in first element of shifted polynomials.

    //===== Fix Range Checks Selectors=============================================
    // We re-use the clk column for the lookup values of 8-bit resp. 16-bit range check.
    pol commit sel_rng_8;  // Boolean selector for the  8-bit range check lookup
    pol commit sel_rng_16; // Boolean selector for the 16-bit range check lookup

    //===== CONTROL FLOW ==========================================================
    // Program counter
    pol commit pc; 
    // Return Pointer
    pol commit internal_return_ptr;
    
    pol commit sel_internal_call;
    pol commit sel_internal_return;
    pol commit sel_jump;
    
    // Halt program execution
    pol commit sel_halt;

    //===== MEMORY OPCODES ==========================================================
    pol commit sel_mov;
    
    //===== TABLE SUBOP-TR ========================================================
    // Boolean selectors for (sub-)operations. Only one operation is activated at
    // a time.

    // ADD
    pol commit sel_op_add;
    // SUB
    pol commit sel_op_sub;
    // MUL
    pol commit sel_op_mul;
    // DIV
    pol commit sel_op_div;
    // NOT
    pol commit sel_op_not;
    // EQ
    pol commit sel_op_eq;
    // AND
    pol commit sel_op_and;
    // OR
    pol commit sel_op_or;
    // XOR
    pol commit sel_op_xor;

    // Helper selector to characterize an ALU chiplet selector
    pol commit alu_sel;

    // Helper selector to characterize a Binary chiplet selector
    pol commit bin_sel;

    // Instruction memory tags read/write (1: u8, 2: u16, 3: u32, 4: u64, 5: u128, 6: field)
    pol commit r_in_tag;
    pol commit w_in_tag;

    // Errors
    pol commit op_err; // Boolean flag pertaining to an operation error
    pol commit tag_err; // Boolean flag (foreign key to avm_mem.tag_err)

    // A helper witness being the inverse of some value
    // to show a non-zero equality
    pol commit inv;

    // Intermediate register values
    pol commit ia;
    pol commit ib;
    pol commit ic;
    
    // Memory operation selector per intermediate register
    pol commit mem_op_a;
    pol commit mem_op_b;
    pol commit mem_op_c;

    // Read-write flag per intermediate register: Read = 0, Write = 1
    pol commit rwa;
    pol commit rwb;
    pol commit rwc;
    
    // Indirect register values
    pol commit ind_a;
    pol commit ind_b;
    pol commit ind_c;

    // Indirect memory operation selector per indirect register
    pol commit ind_op_a;
    pol commit ind_op_b;
    pol commit ind_op_c;


    // Memory index involved into a memory operation per pertaining intermediate register
    // We should range constrain it to 32 bits ultimately. For first version of the AVM,
    // we will assume that these columns are of the right type.
    pol commit mem_idx_a;
    pol commit mem_idx_b;
    pol commit mem_idx_c;

  
    // Track the last line of the execution trace. It does NOT correspond to the last row of the whole table
    // of size N. As this depends on the supplied bytecode, this polynomial cannot be constant.
    pol commit last;
    
    // Relations on type constraints

    sel_op_add * (1 - sel_op_add) = 0;
    sel_op_sub * (1 - sel_op_sub) = 0;
    sel_op_mul * (1 - sel_op_mul) = 0;
    sel_op_div * (1 - sel_op_div) = 0;
    sel_op_not * (1 - sel_op_not) = 0;
    sel_op_eq * (1 - sel_op_eq) = 0;
    sel_op_and * (1 - sel_op_and) = 0;
    sel_op_or * (1 - sel_op_or) = 0;
    sel_op_xor * (1 - sel_op_xor) = 0;

    sel_internal_call * (1 - sel_internal_call) = 0;
    sel_internal_return * (1 - sel_internal_return) = 0;
    sel_jump * (1 - sel_jump) = 0;
    sel_halt * (1 - sel_halt) = 0;

    // Might be removed if derived from opcode based on a lookup of constants
    sel_mov * ( 1 - sel_mov) = 0;

    op_err * (1 - op_err) = 0;
    tag_err * (1 - tag_err) = 0; // Potential optimization (boolean constraint derivation from equivalence check to avm_mem)?

    // Might be removed if derived from opcode based on a lookup of constants
    mem_op_a * (1 - mem_op_a) = 0;
    mem_op_b * (1 - mem_op_b) = 0;
    mem_op_c * (1 - mem_op_c) = 0;

    rwa * (1 - rwa) = 0;
    rwb * (1 - rwb) = 0;
    rwc * (1 - rwc) = 0;

    // Might be removed if derived from opcode based on a lookup of constants
    ind_op_a * (1 - ind_op_a) = 0;
    ind_op_b * (1 - ind_op_b) = 0;
    ind_op_c * (1 - ind_op_c) = 0;

    // TODO - Constraints:
    // - mem_idx_a, mem_idx_b, mem_idx_c to u32 type
    // - ind_a, ind_b, ind_c to u32 type
    // - 0 <= r_in_tag, w_in_tag <= 6 // Maybe not needed as probably derived by the operation decomposition.

    //====== COMPARATOR OPCODES CONSTRAINTS =====================================
    // Enforce that the tag for the ouput of EQ opcode is u8 (i.e. equal to 1).
    #[EQ_OUTPUT_U8]
    sel_op_eq * (w_in_tag - 1) = 0;

    // Relation for division over the finite field
    // If tag_err == 1 in a division, then ib == 0 and op_err == 1.
    #[SUBOP_DIVISION_FF]
    sel_op_div * (1 - op_err) * (ic * ib - ia) = 0;

    // When sel_op_div == 1, we want ib == 0 <==> op_err == 1
    // This can be achieved with the 2 following relations.
    // inv is an extra witness to show that we can invert ib, i.e., inv = ib^(-1)
    // If ib == 0, we have to set inv = 1 to satisfy the second relation,
    // because op_err == 1 from the first relation.
    #[SUBOP_DIVISION_ZERO_ERR1]
    sel_op_div * (ib * inv - 1 + op_err) = 0;
    #[SUBOP_DIVISION_ZERO_ERR2]
    sel_op_div * op_err * (1 - inv) = 0;

    // op_err cannot be maliciously activated for a non-relevant
    // operation selector, i.e., op_err == 1 ==> sel_op_div || sel_op_XXX || ...
    // op_err * (sel_op_div + sel_op_XXX + ... - 1) == 0
    // Note that the above is even a stronger constraint, as it shows
    // that exactly one sel_op_XXX must be true.
    // At this time, we have only division producing an error.
    #[SUBOP_ERROR_RELEVANT_OP]
    op_err * (sel_op_div - 1) = 0;

    // TODO: constraint that we stop execution at the first error (tag_err or op_err)
    // An error can only happen at the last sub-operation row.

    // OPEN/POTENTIAL OPTIMIZATION: Dedicated error per relevant operation?
    // For the division, we could lower the degree from 4 to 3
    // (sel_op_div - op_div_err) * (ic * ib - ia) = 0;
    // Same for the relations related to the error activation:
    // (ib * inv - 1 + op_div_err) = 0 && op_err * (1 - inv) = 0 
    // This works in combination with op_div_err * (sel_op_div - 1) = 0;
    // Drawback is the need to paralllelize the latter.

    //===== CONTROL FLOW =======================================================
    //===== JUMP ===============================================================
    sel_jump * (pc' - ia) = 0;

    //===== INTERNAL_CALL ======================================================
    // - The program counter in the next row should be equal to the value loaded from the ia register
    // - We then write the return location (pc + 1) into the call stack (in memory)
    
    #[RETURN_POINTER_INCREMENT]
    sel_internal_call * (internal_return_ptr' - (internal_return_ptr + 1)) = 0;
    sel_internal_call * (internal_return_ptr - mem_idx_b) = 0;
    sel_internal_call * (pc' - ia) = 0;
    sel_internal_call * ((pc + 1) - ib) = 0;

    // TODO(md): Below relations may be removed through sub-op table lookup
    sel_internal_call * (rwb - 1) = 0;
    sel_internal_call * (mem_op_b  - 1) = 0;
    
    //===== INTERNAL_RETURN ===================================================
    // - We load the memory pointer to be the internal_return_ptr 
    // - Constrain then next program counter to be the loaded value
    // - decrement the internal_return_ptr

    #[RETURN_POINTER_DECREMENT]
    sel_internal_return * (internal_return_ptr' - (internal_return_ptr - 1)) = 0;
    sel_internal_return * ((internal_return_ptr - 1) - mem_idx_a) = 0;
    sel_internal_return * (pc' - ia) = 0;

    // TODO(md): Below relations may be removed through sub-op table lookup
    sel_internal_return * rwa = 0;
    sel_internal_return * (mem_op_a - 1) = 0;

    //===== CONTROL_FLOW_CONSISTENCY ============================================
    pol INTERNAL_CALL_STACK_SELECTORS = (first + sel_internal_call + sel_internal_return + sel_halt);
    pol OPCODE_SELECTORS = (sel_op_add + sel_op_sub + sel_op_div + sel_op_mul + sel_op_not + sel_op_eq + sel_op_and + sel_op_or + sel_op_xor);

    // Program counter must increment if not jumping or returning
    #[PC_INCREMENT]
    (1 - first) * (1 - sel_halt) * OPCODE_SELECTORS * (pc' - (pc + 1)) = 0;

    // first == 0 && sel_internal_call == 0 && sel_internal_return == 0 && sel_halt == 0 ==> internal_return_ptr == internal_return_ptr'
    #[INTERNAL_RETURN_POINTER_CONSISTENCY]
    (1 - INTERNAL_CALL_STACK_SELECTORS) * (internal_return_ptr' - internal_return_ptr) = 0; 

    // TODO: we want to set an initial number for the reserved memory of the jump pointer

    //====== MEMORY OPCODES CONSTRAINTS =========================================
    #[MOV_SAME_VALUE]
    sel_mov * (ia - ic) = 0; // Ensure that the correct value is moved/copied.
    #[MOV_MAIN_SAME_TAG]
    sel_mov * (r_in_tag - w_in_tag) = 0;

    //====== Inter-table Constraints ============================================
    #[INCL_MAIN_TAG_ERR]
    avm_mem.tag_err {avm_mem.clk} in tag_err {clk};

    #[INCL_MEM_TAG_ERR]
    tag_err {clk} in avm_mem.tag_err {avm_mem.clk};

    // Predicate to activate the copy of intermediate registers to ALU table. If tag_err == 1,
    // the operation is not copied to the ALU table.
    // TODO: when division is moved to the alu, we will need to add the selector in the list below:
    alu_sel = (sel_op_add + sel_op_sub + sel_op_mul + sel_op_not + sel_op_eq) * (1 - tag_err);

    #[PERM_MAIN_ALU]
    alu_sel {clk, ia, ib, ic, sel_op_add, sel_op_sub,
             sel_op_mul, sel_op_eq, sel_op_not, r_in_tag}
    is
    avm_alu.alu_sel {avm_alu.clk, avm_alu.ia, avm_alu.ib, avm_alu.ic, avm_alu.op_add, avm_alu.op_sub,
                     avm_alu.op_mul, avm_alu.op_eq, avm_alu.op_not, avm_alu.in_tag};

    // Based on the boolean selectors, we derive the binary op id to lookup in the table;
    // TODO: Check if having 4 columns (op_id + 3 boolean selectors) is more optimal that just using the op_id
    // but with a higher degree constraint: op_id * (op_id - 1) * (op_id - 2)
    pol commit bin_op_id;
    #[BIN_SEL_1]
    bin_op_id = sel_op_or + 2 * sel_op_xor; // sel_op_and excluded since op_id = 0 for op_and

    // Only 1 of the binary selectors should be set (i.e. Mutual Exclusivity)
    // Bin_sel is not explicitly constrained to be boolean, however this is enforced through
    // the operation decomposition step during bytecode unpacking.
    #[BIN_SEL_2]
    bin_sel = sel_op_and + sel_op_or + sel_op_xor;
    
    #[PERM_MAIN_BIN]
    bin_sel {ia, ib, ic, bin_op_id, r_in_tag}
    is
    avm_binary.start {avm_binary.acc_ia, avm_binary.acc_ib, avm_binary.acc_ic, avm_binary.op_id, avm_binary.in_tag};

    #[PERM_MAIN_MEM_A]
    mem_op_a {clk, mem_idx_a, ia, rwa, r_in_tag, w_in_tag, sel_mov}
    is
    avm_mem.op_a {avm_mem.clk, avm_mem.addr, avm_mem.val, avm_mem.rw, avm_mem.r_in_tag, avm_mem.w_in_tag, avm_mem.sel_mov};

    #[PERM_MAIN_MEM_B]
    mem_op_b {clk, mem_idx_b, ib, rwb, r_in_tag, w_in_tag}
    is
    avm_mem.op_b {avm_mem.clk, avm_mem.addr, avm_mem.val, avm_mem.rw, avm_mem.r_in_tag, avm_mem.w_in_tag};

    #[PERM_MAIN_MEM_C]
    mem_op_c {clk, mem_idx_c, ic, rwc, r_in_tag, w_in_tag}
    is
    avm_mem.op_c {avm_mem.clk, avm_mem.addr, avm_mem.val, avm_mem.rw, avm_mem.r_in_tag, avm_mem.w_in_tag};

    #[PERM_MAIN_MEM_IND_A]
    ind_op_a {clk, ind_a, mem_idx_a} is avm_mem.ind_op_a {avm_mem.clk, avm_mem.addr, avm_mem.val};

    #[PERM_MAIN_MEM_IND_B]
    ind_op_b {clk, ind_b, mem_idx_b} is avm_mem.ind_op_b {avm_mem.clk, avm_mem.addr, avm_mem.val};

    #[PERM_MAIN_MEM_IND_C]
    ind_op_c {clk, ind_c, mem_idx_c} is avm_mem.ind_op_c {avm_mem.clk, avm_mem.addr, avm_mem.val};