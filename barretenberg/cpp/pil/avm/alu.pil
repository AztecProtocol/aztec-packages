include "constants_gen.pil";
include "gadgets/range_check.pil";
include "gadgets/cmp.pil";
namespace alu(256);

    // =============== Table ALU-TR =================================================
    // References to main trace table of sub-operations, clk, intermediate
    // registers, operation selectors.
    // TODO: Think on optimizations to decrease the number of such "copied" columns
    pol commit clk;
    pol commit ia; // Intermediate registers
    pol commit ib;
    pol commit ic;
    pol commit sel_alu; // Predicate to activate the copy of intermediate registers to ALU table.

    // Instruction tag (1: u1, 2: u8, 3: u16, 4: u32, 5: u64, 6: u128, 7: field) copied from Main table
    pol commit in_tag;

    // Flattened boolean instruction tags
    pol commit u1_tag;
    pol commit u8_tag;
    pol commit u16_tag;
    pol commit u32_tag;
    pol commit u64_tag;
    pol commit u128_tag;
    pol commit ff_tag;

    // Compute predicate telling whether there is a row entry in the ALU table.
    sel_alu = op_add + op_sub + op_mul + op_not + op_eq + op_cast + op_lt + op_lte + op_shr + op_shl + op_div;

    // =============== GENERAL TRACE LEVEL CONSTRAINTS ================================================= 
    // Remark: Operation selectors are constrained in the main trace.

    // Boolean flattened instructions tags
    u1_tag * (1 - u1_tag) = 0;
    u8_tag * (1 - u8_tag) = 0;
    u16_tag * (1 - u16_tag) = 0;
    u32_tag * (1 - u32_tag) = 0;
    u64_tag * (1 - u64_tag) = 0;
    u128_tag * (1 - u128_tag) = 0;
    ff_tag * (1 - ff_tag) = 0;

    // Mutual exclusion of the flattened instruction tag.
    sel_alu * (u1_tag + u8_tag + u16_tag + u32_tag + u64_tag + u128_tag + ff_tag - 1) = 0;

    // Correct flattening of the instruction tag.
    in_tag = u1_tag // * 1 (constants.MEM_TAG_U1)
           + (constants.MEM_TAG_U8 * u8_tag)
           + (constants.MEM_TAG_U16 * u16_tag)
           + (constants.MEM_TAG_U32 * u32_tag)
           + (constants.MEM_TAG_U64 * u64_tag)
           + (constants.MEM_TAG_U128 * u128_tag)
           + (constants.MEM_TAG_FF * ff_tag);

    // Operation selectors are copied from main table and do not need to be constrained here.
    // Mutual exclusion of op_add and op_sub are derived from their mutual exclusion in the
    // main trace which is ensured by the operation decomposition.

    // =============== INITIALIZE RANGE CHECK GADGET ================================================= 
    // We need these while we don't have pol in perms
    pol commit range_check_sel;
    pol commit range_check_input_value;
    pol commit range_check_num_bits;

    // No need to range check FF or trivial shifts
    range_check_sel = (1 - ff_tag) * (op_add + op_sub + op_mul + op_cast + op_div) + (op_shr + op_shl) * NON_TRIVIAL_SHIFT;
    // We usually range check the output ic register except in the shift ops
    range_check_input_value = (op_add + op_sub + op_mul + op_cast + op_div) * ic + (op_shr * a_hi * NON_TRIVIAL_SHIFT) + (op_shl * a_lo * NON_TRIVIAL_SHIFT);
    // The allowed bit range is defined by the instr tag, unless in shifts where it's different
    range_check_num_bits = 
        (op_add + op_sub + op_mul + op_cast + op_div) * (u1_tag * 1 + u8_tag * 8 + u16_tag * 16 + u32_tag * 32 + u64_tag * 64 + u128_tag * 128) + 
        (op_shl + op_shr) * (MAX_BITS - ib) * NON_TRIVIAL_SHIFT;

    // Permutation to the Range Check Gadget
    #[PERM_RNG_ALU]
    range_check.alu_rng_chk {range_check.clk, range_check.value, range_check.rng_chk_bits}
    is    
    range_check_sel {clk, range_check_input_value, range_check_num_bits};

    // =============== INITIALIZE CMP GADGET (GT / EQ) ================================================= 
    // We need these columns until we support pol in the lookups/permutations
    pol commit cmp_gadget_sel;
    pol commit cmp_gadget_input_a;
    pol commit cmp_gadget_input_b;
    pol commit cmp_gadget_result;
    pol commit cmp_gadget_gt;

    // We use the comparison gadget to test GT for the following operations
    cmp_gadget_gt = op_lt + op_lte + op_div + op_shr + op_shl;
    // The cmp gadget is on when we are either testing GT or EQ
    cmp_gadget_sel - (cmp_gadget_gt + op_eq) = 0;

    // Permutation to the Comparison Gadget
    #[PERM_CMP_ALU]
    cmp.sel_cmp {cmp.clk, cmp.input_a, cmp.input_b, cmp.result, cmp.op_eq, cmp.op_gt}
    is
    cmp_gadget_sel {clk, cmp_gadget_input_a, cmp_gadget_input_b, cmp_gadget_result, op_eq, cmp_gadget_gt };


    // =============== HELPER POLYNOMIAL RELATIONS ================================================= 
    // These are useful and commonly used relations / columns used through the file 

    // The maximum number of bits as defined by the instr tag
    pol MAX_BITS = u1_tag * 1 + u8_tag * 8 + u16_tag * 16 + u32_tag * 32 + u64_tag * 64 + u128_tag * 128;
    // 2^MAX_BITS
    pol MAX_BITS_POW = u1_tag * 2 + u8_tag * 2**8 + u16_tag * 2**16 + u32_tag * 2**32 + u64_tag * 2**64 + u128_tag * 2**128;
    pol UINT_MAX = MAX_BITS_POW - 1;

    // Value of p - 1
    pol MAX_FIELD_VALUE = 21888242871839275222246405745257275088548364400416034343698204186575808495616;

    // Used when we split inputs into lo and hi limbs each of (MAX_BITS / 2)
    // omitted: u1_tag * 0 (no need for limbs...)
    pol LIMB_BITS_POW = u8_tag * 2**4 + u16_tag * 2**8 + u32_tag * 2**16 + u64_tag * 2**32 + u128_tag * 2**64;
    // Lo and Hi Limbs for ia, ib and ic resp. Useful when performing operations over integers
    pol commit a_lo;
    pol commit a_hi;
    pol commit b_lo;
    pol commit b_hi;
    pol commit c_lo;
    pol commit c_hi;
    
    // =============== ARITHMETIC OPERATION - EXPLANATIONS  ================================================= 
    // Main trick for arithmetic operations modulo 2^k is to perform the operation
    // over the integers and expressing the result as low + high * 2^k with low
    // smaller than 2^k. low is used as the output. 
        
    // =============== USEFUL ARITHMETIC MULTIPLY RELATION ================================================= 
    // Multiplication over the k-bit integers
    // Given the k-bit integers, a and b, and their corresponding k/2-bit limbs a_lo, a_hi, b_lo, b_hi.

    // We perform the following partial products to work out a * b
    // (1) a_lo * b_lo --> Represents the bottom k bits of the result, i.e. values between [0, 2^k).
    // (2) a_lo * b_hi + b_lo * a_hi --> Represents the middle k bits of the result, i.e. values between [2^(k/2), 2^(k+k/2))
    // (3) a_hi * b_hi --> Represents the topmost k bits of the result, i.e. values between [2^k, 2^(2k)).

    // We simplify (2) by further decomposing that result into two limbs of k/2 bits and adding the upper k/2 bit to (3)
    // We store this step in these partial product columns
    pol commit partial_prod_lo;
    pol commit partial_prod_hi;
    // TODO: Investigate which range checks we need here.
    a_lo * b_hi + b_lo * a_hi = partial_prod_lo + LIMB_BITS_POW * partial_prod_hi;

    // This holds the product over the integers
    // (u1 multiplication only cares about a_lo and b_lo)
    pol PRODUCT = a_lo * b_lo + (1 - u1_tag) * (LIMB_BITS_POW * partial_prod_lo + MAX_BITS_POW * (partial_prod_hi + a_hi * b_hi));

    // =============== ADDITION/SUBTRACTION Operation Constraints ================================================= 
    pol commit op_add;
    pol commit op_sub;
    // Carry flag
    pol commit cf;
    // carry flag (cf) is boolean
    cf * (1 - cf) = 0;

    // Addition and subtraction relations are very similar and will be consolidated.
    pol RESULT = op_add * (ia + ib) + op_sub * (ia - ib);
    // Check consistency of result with ic which is range checked - eqns could be consolidated
    op_add * (RESULT - ic - cf * MAX_BITS_POW) = 0;
    op_sub * (RESULT - ic + cf * MAX_BITS_POW) = 0;

    // =============== MULTIPLICATION Operation Constraints ================================================= 
    pol commit op_mul;
    // ff multiplication
    #[ALU_MULTIPLICATION_FF]
    ff_tag * op_mul * (ia * ib - ic) = 0;
    
    // Each register is decomposed into lo and hi limbs of k/2 bits (where k is the instr tag)
    (1 - ff_tag) * op_mul * (ia - a_lo - LIMB_BITS_POW * a_hi) = 0;
    (1 - ff_tag) * op_mul * (ib - b_lo - LIMB_BITS_POW * b_hi) = 0;
    // The result is must be stored in c_lo
    (1 - ff_tag) * op_mul * (ic - c_lo) = 0;

    // c_hi effectively holds the overflow value when the multiplication is performed over the integers.
    #[ALU_PROD_MUL]
    (1 - ff_tag) * op_mul * (PRODUCT - (c_lo + MAX_BITS_POW * c_hi)) = 0;

    // =============== INTEGER DIVISION Operation Constraints ================================================= 
    pol commit op_div;
    // Check that ib (divisor) > remainder
    pol commit remainder;
    op_div * (cmp_gadget_input_a - ib) = 0;
    op_div * (cmp_gadget_input_b - remainder) = 0;
    // Result has to be 1
    op_div * (cmp_gadget_result - 1) = 0;

    // We have some calcs that already do ia * ib using a_lo, a_hi, b_lo and b_hi.
    // We shift some operands around so we can perform ib * ic
    (1 - ff_tag) * op_div * (ib - a_lo - LIMB_BITS_POW * a_hi) = 0;
    (1 - ff_tag) * op_div * (ic - b_lo - LIMB_BITS_POW * b_hi) = 0;
    (1 - ff_tag) * op_div * (ia - c_lo) = 0;

    #[DIVISION_RELATION]
    (1 - ff_tag) * op_div * (PRODUCT - (c_lo - remainder + MAX_BITS_POW * c_hi)) = 0;

    // =============== NOT Operation Constraints ================================================= 
    pol commit op_not;
    // BITWISE NOT relation is: a + ~a = 2^k - 1
    // Or (a + ~a - 2^k + 1) = 0;
    // value of "a" stored in ia and "~a" stored in ic
    #[ALU_OP_NOT]
    (1 - ff_tag) * op_not * (ia + ic - UINT_MAX) = 0;

    // =============== EQUALITY Operation Constraints ================================================= 
    pol commit op_eq;
    // Just a call to the cmp gadget for ia == ib
    op_eq * (ia - cmp_gadget_input_a) = 0;
    op_eq * (ib - cmp_gadget_input_b) = 0;
    // Cmp returns 1 if equal and 0 otherwise
    op_eq * (ic - cmp_gadget_result) = 0;

    // =============== LT/LTE Operation Constraints ================================================= 
    pol commit op_lt;
    pol commit op_lte;
    pol commit sel_cmp; // Predicate if LT or LTE is set
    sel_cmp = op_lt + op_lte;

    // If op_lt, swap ia and ib - this is because the cmp gadget handles a > b
    op_lt * (ib - cmp_gadget_input_a) + op_lte * (ia - cmp_gadget_input_a) = 0;
    op_lt * (ia - cmp_gadget_input_b) + op_lte * (ib - cmp_gadget_input_b) = 0;

    // If is op_lte, keep the inputs the same but invert the result - !(a > b) == a <= b
    op_lte * (1 - cmp_gadget_result - ic)  + op_lt * (cmp_gadget_result - ic) = 0;

    // =============== CAST Operation Constraints ================================================= 
    pol commit op_cast;
    // In CAST we split the value into two limbs, a_lo is a limb that fits into the casted value range and an overflow value (a_hi)
    // ic stores the result (the lo value) which is then range checked
    // TODO: Check that MAX_BITS_POW * a_hi doesnt overflow
    op_cast * (ia - a_lo - MAX_BITS_POW * a_hi) = 0;
    op_cast * (ic - a_lo) = 0;

    // =============== SHIFT LEFT/RIGHT OPERATIONS ================================================= 
    pol commit op_shl;
    pol commit op_shr;
    // TODO: Confirm the number of range checks we need for this operation - currently we perform 1
    // 1) Check if we are performing a trivial shift operation, i.e. ib > (MAX_BITS - 1)
    // 2) Split in the input into lo and hi limbs at the b'th bit
    //    a) In SHR the lo limb will be b bits long and the hi limb will be (MAX_BITS - b) bits long
    //    b) In SHL this will be reversed
    // 3) In SHR the result will be a_hi and in SHL it will be a_lo * 2^b

    // =============== HELPFUL PICTURE OF SHR ==== 
    //  <-- (MAX_BITS - b) bits --> |   <-- b bits -->
    // -----------------------------|-------------------
    // |       a_hi                 |       a_lo       | --> a
    // -----------------------------|-------------------

    // =============== HELPFUL PICTURE OF SHL ====
    //  <-- b bits --> |   <-- (MAX_BITS - b) bits -->
    // ----------------|------------------------------
    // |       a_hi    |             a_lo            | --> a
    // ----------------|------------------------------

    // =============== Trivial Shift Operation ================================================= 
    // We use the comparison gadget to test ib > (MAX_BITS - 1)
    // (always true for u1 - all u1 shifts are trivial)
    (op_shl + op_shr) * (cmp_gadget_input_a - ib) = 0;
    (op_shl + op_shr) * (cmp_gadget_input_b - (MAX_BITS - 1) ) = 0;

    // Shift is trivial if the result is true (i.e. 1)
    pol commit zero_shift;
    (op_shl + op_shr) * (zero_shift - cmp_gadget_result) = 0;

    // Turn this one if we need to actually calculate the shift instead of just returning zero
    pol NON_TRIVIAL_SHIFT = 1 - zero_shift;

    //=============== Lookup Tables to calculate 2^b easily ================================================= 
    // MAX_BITS - ib
    pol commit max_bits_sub_b_bits;
    // 2**(MAX_BITS - ib)
    pol commit max_bits_sub_b_pow;
    // 2 ** ib
    pol commit b_pow; 

    // Lookup for 2**(ib)
    pol commit sel_shift_which; // Predicate if SHR or SHR is set
    sel_shift_which = (op_shr + op_shl) * NON_TRIVIAL_SHIFT;

    #[LOOKUP_POW_2_0]
    sel_shift_which {ib, b_pow} in main.sel_rng_8 {main.clk, powers.power_of_2};

    // Lookup for 2**(MAX_BITS-ib)
    #[LOOKUP_POW_2_1]
    sel_shift_which {max_bits_sub_b_bits , max_bits_sub_b_pow} in main.sel_rng_8 {main.clk, powers.power_of_2};
    
    // =============== Core Shift Operation Logic ================================================= 
    // We shift based on the value of ib (the num of bits)
    op_shr * (ia - a_lo - b_pow * a_hi) = 0;
    // The result is a_hi
    op_shr * (ic - a_hi * NON_TRIVIAL_SHIFT) = 0;

    // When shifting left, the result is a_lo scaled by 2^(ib)
    op_shl * (ia - a_lo - max_bits_sub_b_pow * a_hi) = 0;
    // The result is a_lo * 2^(ib)
    op_shl * (ic - a_lo * b_pow * NON_TRIVIAL_SHIFT) = 0;

