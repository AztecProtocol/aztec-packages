include "fixed/byte_lookup.pil";

namespace binary(256);
    pol commit clk;

    // Selector for Binary Operation
    pol commit sel_bin;
    sel_bin * (1 - sel_bin) = 0;

    // Byte recomposition column, the value in these columns are part of the equivalence
    // check to main wherever Start is set to 1.
    pol commit acc_ia;
    pol commit acc_ib;
    pol commit acc_ic;

    // This is the instruction tag {1,2,3,4,5} (restricted to not be a field)
    // Operations over FF are not supported, it is assumed this exclusion is handled
    // outside of this subtrace.

    // Constraints come from equiv to main_trace
    pol commit in_tag;

    // Selectors for binary operations, correctness checked by permutation to the main trace.
    // Op Id is restricted to be the same during the same computation (i.e. between Starts)
    pol commit op_id;
    #[OP_ID_REL]
    (op_id' - op_id) * mem_tag_ctr = 0;

    // Little Endian bitwise decomposition of accumulators (which are processed top-down),
    // constrained to be U8 given by the lookup to the byte_lookup
    pol commit ia_bytes;
    pol commit ib_bytes;
    pol commit ic_bytes;

    pol commit start; // Identifies when we want to capture the output to the main trace.


    // To support dynamically sized memory operands we use a counter against a lookup
    // This decrementing counter goes from [MEM_TAG, 0] where MEM_TAG is the number of bytes in the
    // corresponding integer. i.e. MEM_TAG is between 1 (U8) and 16(U128).
    // Consistency can be achieved with a lookup table between the instr_tag and bytes_length
    pol commit mem_tag_ctr;
    #[MEM_TAG_REL]
    (mem_tag_ctr' - mem_tag_ctr + 1) * mem_tag_ctr = 0;

    // sel_bin is a boolean that is set to 1 if mem_tag_ctr != 0.
    // This is checked by two relation conditions and utilising mem_tag_ctr_inv
    pol commit mem_tag_ctr_inv;

    // sel_bin is set to 1 when mem_tag_ctr != 0, and 0 otherwise.
    // we constrain it such that sel_bin = mem_tag_ctr * mem_tag_ctr_inv unless mem_tag_ctr = 0 the sel_bin = 0
    // In here we use the consolidated equality relation because it doesnt require us to enforce
    // this additional relation: mem_tag_ctr_inv = 1 when mem_tag_ctr = 0. (allows default zero value in trace)
    #[SEL_BIN_CTR_REL]
    mem_tag_ctr * ((1 - sel_bin) * (1 - mem_tag_ctr_inv) + mem_tag_ctr_inv) - sel_bin = 0;

    // Forces accumulator to start at zero when mem_tag_ctr == 0
    (1 - sel_bin) * acc_ia = 0;
    (1 - sel_bin) * acc_ib = 0;
    (1 - sel_bin) * acc_ic = 0;

    #[LOOKUP_BYTE_LENGTHS]
    start {in_tag, mem_tag_ctr}
    in 
    byte_lookup.sel_bin {byte_lookup.table_in_tags, byte_lookup.table_byte_lengths};

    #[LOOKUP_BYTE_OPERATIONS]
    sel_bin {op_id, ia_bytes, ib_bytes, ic_bytes}
    in 
    byte_lookup.sel_bin {byte_lookup.table_op_id, byte_lookup.table_input_a, byte_lookup.table_input_b, byte_lookup.table_output};

    #[ACC_REL_A]
    (acc_ia - ia_bytes - 256 * acc_ia') * mem_tag_ctr = 0;
    #[ACC_REL_B]
    (acc_ib - ib_bytes - 256 * acc_ib') * mem_tag_ctr = 0;
     #[ACC_REL_C]
    (acc_ic - ic_bytes - 256 * acc_ic') * mem_tag_ctr = 0;

