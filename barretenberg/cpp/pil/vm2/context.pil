// This is a virtual gadget, which is part of the execution trace.
namespace execution;

    // This the same sel as in execution
    #[skippable_if]
    sel = 0;

    // Useful to define some opcodes within this pil file
    // Constrained to be boolean by execution instruction spec table
    pol commit sel_call;
    pol commit sel_static_call;
    pol CALL = sel_call + sel_static_call; // Guaranteed to be mutually exclusive
    // CALL & precomputed.first_row are NAND
    CALL * precomputed.first_row = 0;

    // Context columns
    pol commit context_id;
    pol commit parent_id;
    pol commit pc;
    pol commit next_pc;
    pol commit msg_sender;
    pol commit contract_address;
    // Constrained boolean by tx trace (for enqueued call) and #[NEXT_IS_STATIC] for nested
    pol commit is_static;

    pol commit parent_calldata_offset_addr;
    pol commit parent_calldata_size_addr;

    pol commit last_child_returndata_offset_addr;
    pol commit last_child_returndata_size_addr;
    pol commit last_child_success; // Careful with this for now...

    // ==== Helper columns ====
    // TODO: These context modifiers also need to factor in when a new enqueued call occurs
    // REPLACE prefixed precomputed.first_row in relations with actual phase / enqueued call change
    pol NOT_FIRST = (1 - precomputed.first_row); // Temp

    // next_context_id increments with each invocation of an external call or new enqueued call
    pol commit next_context_id; // Can be replaced by clk
    // The initial next_context_id = 2, in row = 1
    #[INCR_CONTEXT_ID]
    NOT_FIRST * sel' * (next_context_id' - (next_context_id + CALL)) = 0;

    // CALL = 1 <==> context_id' = next_context_id
    // CALL = 0 <==> context_id' = context_id
    #[NEXT_CONTEXT_ID]
    NOT_FIRST * sel' * ((next_context_id - context_id) * CALL + context_id + precomputed.first_row - context_id') = 0;

    // CALL = 1 <==> parent_id' = context_id
    // CALL = 0 <==> parent_id' = parent_id
    #[NEXT_PARENT_ID]
    NOT_FIRST * sel' * ((context_id - parent_id) * (CALL + precomputed.first_row) + parent_id - parent_id') = 0;

    // CALL = 1 <==> pc' = 0
    // CALL = 0 <==> pc' = next_pc
    #[NEXT_PC]
    NOT_FIRST * sel' * (pc' - ((1 - CALL) * next_pc)) = 0;

    // CALL = 1 <==> msg_sender' = contract_address
    // CALL = 0 <==> msg_sender' = msg_sender 
    #[NEXT_MSG_SENDER]
    NOT_FIRST * sel' * ((contract_address - msg_sender) * CALL + msg_sender - msg_sender') = 0;

    // CALL = 1 <==> contract_address' = reg3 (intermediate register 3 from execution trace)
    // CALL = 0 <==> contract_address' = contract_address
    #[NEXT_CONTRACT_ADDR]
    NOT_FIRST * sel' * ((reg3 - contract_address) * CALL + contract_address - contract_address') = 0;

    // CALL = 1 && static_call = 1 <==> is_static' = 1
    // CALL = 1 && static_call = 0 <==> is_static' = 0
    // CALL = 0 && static_call = 0 <==> is_static' = is_static
    #[NEXT_IS_STATIC]
    NOT_FIRST * sel' * (is_static' - (sel_static_call + (1 - CALL) * is_static)) = 0;

    // CALL = 1 <==> parent_calldata_offset_addr' = rop4 (resolved operand 4 from execution trace)
    // CALL = 0 <==> parent_calldata_offset_addr' = parent_calldata_offset_addr
    #[NEXT_CD_OFFSET]
    NOT_FIRST * sel' * ((rop4 - parent_calldata_offset_addr) * CALL + parent_calldata_offset_addr - parent_calldata_offset_addr') = 0;

    // CALL = 1 <==> parent_calldata_size_addr' = rop5 (resolved operand 5 from execution trace)
    // CALL = 0 <==> parent_calldata_size_addr' = parent_calldata_size_addr
    #[NEXT_CD_SIZE]
    NOT_FIRST * sel' * ((rop5 - parent_calldata_size_addr) * CALL + parent_calldata_size_addr - parent_calldata_size_addr') = 0;


