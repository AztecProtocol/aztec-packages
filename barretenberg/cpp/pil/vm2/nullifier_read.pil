include "merkle_check.pil";
include "ff_gt.pil";
include "poseidon2_hash.pil";
include "constants_gen.pil";
include "precomputed.pil";

// This gadget checks reads in the nullifier tree. The nullifier tree is an indexed tree where leaves
// contain nullifiers. When we read from the nullifier tree, we check whether a nullifier exists or not.
// For this we perform a low leaf membership proof and:
//  - if the low leaf nullifier is equal to the nullifier, that means that nullifier is present in the tree, and we assert that
//    exists is true.
//  - if the low leaf nullifier is not equal to the nullifier, we assert that the low leaf is indeed a valid low leaf for the
//    requested nullifier, proving non existence of the nullifier in the tree. In that case we check exists is false.
// In order to validate that a leaf is a low leaf of the nullifier, we need to check that the low_leaf.nullifier is < nullifier
// and that low_leaf.next_nullifier is > nullifier. However, we need to consider the case where next_nullifier is zero, which
// means "infinity". The highest nullifier inserted in the tree will point to infinity as the "next_nullifier".
//
// Usage:
// sel { exists, nullifier, nullifier_tree_root }
// in nullifier_read.sel { nullifier_read.exists, nullifier_read.nullifier, nullifier_read.root };
//
namespace nullifier_read;
    pol commit sel;
    sel * (1 - sel) = 0;

    #[skippable_if]
    sel = 0;

    // Inputs to the gadget
    pol commit exists;
    exists * (1 - exists) = 0;

    pol commit nullifier;
    pol commit root;

    // Hints
    pol commit low_leaf_nullifier;
    pol commit low_leaf_next_index;
    pol commit low_leaf_next_nullifier;

    pol commit low_leaf_index;

    // ========= LOW LEAF MEMBERSHIP =========
    pol commit low_leaf_hash;
    // TODO: We need this temporarily while we do not allow for aliases in the lookup tuple
    pol commit tree_height;
    sel * (tree_height - constants.NULLIFIER_TREE_HEIGHT) = 0;

    #[LOW_LEAF_POSEIDON2]
    sel { low_leaf_nullifier, low_leaf_next_nullifier, low_leaf_next_index, low_leaf_hash }
    in poseidon2_hash.end { poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.output };

    #[LOW_LEAF_MEMBERSHIP]
    sel { low_leaf_hash, low_leaf_index, tree_height, root }
    in merkle_check.start { merkle_check.read_node, merkle_check.index, merkle_check.path_len, merkle_check.read_root };

    // ========= LOW LEAF VALIDATION =========
    pol commit nullifier_low_leaf_nullifier_diff_inv;
    pol NULLIFIER_LOW_LEAF_NULLIFIER_DIFF = nullifier - low_leaf_nullifier;

    // NULLIFIER_LOW_LEAF_NULLIFIER_DIFF == 0 <==> exists == 1
    #[EXISTS_CHECK]
    sel * (NULLIFIER_LOW_LEAF_NULLIFIER_DIFF * (exists * (1 - nullifier_low_leaf_nullifier_diff_inv) + nullifier_low_leaf_nullifier_diff_inv) - 1 + exists) = 0;

    // If the leaf doesn't exist, we need to validate that the nullifier is greater than the low leaf nullifier

    // TODO: We need this temporarily while we do not allow for aliases in the lookup tuple
    pol commit one;
    sel * (1 - one) = 0;

    // We commit leaf not exists as well as exists since it'll be used as a selector for the following lookup
    pol commit leaf_not_exists;
    sel * (1 - exists - leaf_not_exists) = 0;

    #[LOW_LEAF_NULLIFIER_VALIDATION]
    leaf_not_exists { nullifier, low_leaf_nullifier, one }
    in ff_gt.sel_gt { ff_gt.a, ff_gt.b, ff_gt.result };

    // If next nullifier is not zero (which would be infinity), it has to be greater than the nullifier.
    // We commit next_nullifier_is_nonzero instead of next_nullifier_is_zero since it'll be used as a selector for a lookup
    pol commit next_nullifier_is_nonzero;
    next_nullifier_is_nonzero * (1 - next_nullifier_is_nonzero) = 0;
    pol NEXT_NULLIFIER_IS_ZERO = 1 - next_nullifier_is_nonzero;

    pol commit next_nullifier_inv;
    #[NEXT_NULLIFIER_IS_ZERO_CHECK]
    leaf_not_exists * (low_leaf_next_nullifier * (NEXT_NULLIFIER_IS_ZERO * (1 - next_nullifier_inv) + next_nullifier_inv) - 1 + NEXT_NULLIFIER_IS_ZERO) = 0;

    #[LOW_LEAF_NEXT_NULLIFIER_VALIDATION]
    next_nullifier_is_nonzero { low_leaf_next_nullifier, nullifier, one }
    in ff_gt.sel_gt { ff_gt.a, ff_gt.b, ff_gt.result };
