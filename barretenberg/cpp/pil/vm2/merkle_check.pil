include "./poseidon2_hash.pil";
include "./precomputed.pil";

/**
 * A gadget that checks a merkle read or a write.
 * One sibling node is processed per row, performing 1 hash if it's a merkle read
 * or 2 hashes if it's a merkle write.
 *
 * WARNING: This gadget will break if used with `tree_height >= 254`
 *
 * Read usage:
 *     caller_sel { read_leaf, leaf_index, tree_height, expected_root }
 *     in merkle_check.start { merkle_check.read_node, merkle_check.index, merkle_check.path_len, merkle_check.read_root }
 *
 * Write usage:
 *     caller_sel { one, prev_leaf_value, next_leaf_value,
 *         leaf_index, tree_height, prev_root, next_root }
 *     in merkle_check.start { merkle_check.write, merkle_check.read_node, merkle_check.write_node,
 *         merkle_check.index, merkle_check.path_len, merkle_check.read_root, merkle_check.write_root }
 *
 * Common inputs
 * @column read_node The value of the node being read. When `start == 1`, this is the leaf.
 * @column index The index of the node being operated on. When `start == 1`, this is the leaf index.
 * @column path_len The size of the path at this layer. When `start == 1`, this is the tree height.
 * @column read_root The merkle root the value is read from. This will be propagated down to be matched internally on `end`.
 *
 * Write specific inputs
 * @column write Whether this is a write operation.
 * @column write_node The value of the node being written. When `start == 1`, this is the new leaf.
 * @column write_root The merkle root that results of replacing the leaf with the new leaf at the index provided in the read_root. This will be propagated down to be matched internally on `end`.
 *
 * Internals/hints
 * @column sibling The value of the sibling node to be hashed with `read_node`.
 * @column index_is_even Whether the current index is even.
 *
 * Interactions
 * @lookup to `poseidon2_hash` to constrain that `hash(read_left_node, read_right_node) == read_output_hash` for the current layer
 * @lookup to `poseidon2_hash` to constrain that `hash(write_left_node, write_right_node) == write_output_hash` for the current layer. Only active when write is on.
 *                                                                                                                             <----------------------------------------write only-------------------------------------->
 * +-----------+-------+----------+---------+---------------+----------------+-----------------+------------------+-----------+-------+------------+-----------------+------------------+-------------------+------------+-------+-----+-----+
 * | read_node | index | path_len | sibling | index_is_even | read_left_node | read_right_node | read_output_hash | read_root | write | write_node | write_left_node | write_right_node | write_output_hash | write_root | start | end | sel |
 * +-----------+-------+----------+---------+---------------+----------------+-----------------+------------------+-----------+-------+------------+-----------------+------------------+-------------------+------------+-------+-----+-----+
 * | 0         |     0 |        0 | 0       |             0 | 0              | 0               | 0                | 0         |     0 | 0          | 0               | 0                | 0                 | 0          |     0 |   0 |   0 |
 * | 27        |    10 |        4 | s0      |             1 | 27             | s0              | h(27,s0)=n1      | n4        |     1 | 28         | 28              | s0               | h(28,s0)=n5       | n8         |     1 |   0 |   1 |
 * | n1        |     5 |        3 | s1      |             0 | s1             | n1              | h(s1,n1)=n2      | n4        |     1 | n5         | s1              | n5               | h(s1,n5)=n6       | n8         |     0 |   0 |   1 |
 * | n2        |     2 |        2 | s2      |             1 | n2             | s2              | h(n2,s2)=n3      | n4        |     1 | n6         | n6              | s2               | h(n6,s2)=n7       | n8         |     0 |   0 |   1 |
 * | n3        |     1 |        1 | s3      |             0 | s3             | n3              | h(s3,n3)=n4      | n4        |     1 | n7         | s3              | n7               | h(s3,n7)=n8       | n8         |     0 |   1 |   1 |
 * | 0         |     0 |        0 | 0       |             0 | 0              | 0               | 0                | 0         |     0 | 0          | 0               | 0                | 0                 | 0          |     0 |   0 |   0 |
 * +-----------+-------+----------+---------+---------------+----------------+-----------------+------------------+-----------+-------+------------+-----------------+------------------+-------------------+------------+-------+-----+-----+
 */
namespace merkle_check;
    pol commit sel;
    sel * (1 - sel) = 0;
    // No relations will be checked if this identity is satisfied.
    #[skippable_if]
    sel = 0;

    // If the current row is not active, then there are no more active rows after that.
    // (not enforced for the first row)
    // Gives guarantee that once the trace activates, it is contiguous (sel == 1) all the
    // way until the last ever active row. After that point, sel == 1 for all remaining rows.
    #[TRACE_CONTINUITY]
    (1 - precomputed.first_row) * (1 - sel) * sel' = 0;

    // Common inputs - These must be looked up both on read and write
    pol commit read_node;
    pol commit index;
    pol commit path_len;
    pol commit read_root;

    // Write specific inputs - These are only looked up when we want to update the root
    pol commit write;
    write * (1 - write) = 0; // bool
    pol commit write_node;
    pol commit write_root;

    // Hints
    pol commit sibling;

    // Boundaries
    pol commit start;
    pol commit end;
    pol NOT_END = sel * (1 - end);
    start * (1 - start) = 0; // bool
    end * (1 - end) = 0; // bool

    // only one of end or first_row can be 1
    // end can't be 1 for first row
    end * precomputed.first_row = 0;
    // LATCH_CONDITION is true if either end is 1 or first_row is 1
    pol LATCH_CONDITION = end + precomputed.first_row;

    #[START_AFTER_LATCH]
    sel' * (start' - LATCH_CONDITION) = 0;

    // Selector must be 1 in end row
    #[SELECTOR_ON_END]
    end * (1 - sel) = 0;

    #[PROPAGATE_READ_ROOT]
    NOT_END * (read_root' - read_root) = 0;
    #[PROPAGATE_WRITE]
    NOT_END * (write' - write) = 0;
    #[PROPAGATE_WRITE_ROOT]
    NOT_END * (write_root' - write_root) = 0;

    // If we are not done, the path_len decrements by 1
    #[PATH_LEN_DECREMENTS]
    NOT_END * (path_len' - path_len + 1) = 0;

    // End when remaining path reaches 1. In other words, (path_len == 1) <==> (end == 1)
    pol REMAINING_PATH_LEN = path_len - 1;

    pol commit remaining_path_len_inv;
    #[END_WHEN_PATH_EMPTY]
    sel * (REMAINING_PATH_LEN * (end * (1 - remaining_path_len_inv) + remaining_path_len_inv) - 1 + end) = 0;

    // index_is_even is constrained to be correct by the NEXT_INDEX_IS_HALVED and FINAL_INDEX_IS_0_OR_1 constraints
    pol commit index_is_even;
    index_is_even * (1 - index_is_even) = 0;
    pol INDEX_IS_ODD = (1 - index_is_even);
    // The index into the next layer is half the current index.
    // We don't need to worry about underflowing the field since (index - INDEX_IS_ODD)
    // will be even (over the integers) and as the field is not of characteristic 2, index' == index / 2 over the integers
    #[NEXT_INDEX_IS_HALVED]
    NOT_END * (index' * 2 + INDEX_IS_ODD - index) = 0;

    // Ensure that the final index is 0 or 1.
    // This ensures that the previous layer cannot overflow the field in the halving constraint
    // when doing `index' * 2`. This propagates backwards ensuring that no
    // layer can overflow on the halving constraint's multiplication by 2 as long as
    // tree_height < 254.
    #[FINAL_INDEX_IS_0_OR_1]
    end * (index * (1 - index)) = 0;
    // NOTE: index_is_even is essentially a vertical bit-decomposition of leaf_index.

    // left_node and right_node are sent to poseidon2
    // The constraints below arrange node and sibling for read and write into proper left/right order
    pol commit read_left_node;
    pol commit read_right_node;
    pol commit write_left_node;
    pol commit write_right_node;
    // This is accomplished by using index_is_even to toggle the (left_node - right_node) term.
    // If index is even, left_node (to send to poseidon2) is node and right_node is sibling.
    // And vice-versa.
    #[ASSIGN_NODE_LEFT_OR_RIGHT_READ]
    sel * (index_is_even * (read_left_node - read_right_node) + read_right_node - read_node) = 0;
    #[ASSIGN_SIBLING_LEFT_OR_RIGHT_READ]
    sel * (index_is_even * (read_right_node - read_left_node) + read_left_node - sibling) = 0;

    #[ASSIGN_NODE_LEFT_OR_RIGHT_WRITE]
    write * (index_is_even * (write_left_node - write_right_node) + write_right_node - write_node) = 0;
    #[ASSIGN_SIBLING_LEFT_OR_RIGHT_WRITE]
    write * (index_is_even * (write_right_node - write_left_node) + write_left_node - sibling) = 0;
    // NOTE: don't think these can be safely combined

    // output_hash = hash(left_node, right_node)
    //     if index_is_even: output_hash = hash(node, sibling)
    //     if !index_is_even: output_hash = hash(sibling, node)
    // On end, output_hash is the root
    pol commit read_output_hash;
    pol commit write_output_hash;

    pol commit constant_2;
    sel * (constant_2 - 2) = 0;

    // Lookup to the full poseidon2 gadget
    #[MERKLE_POSEIDON2_READ]
    sel { read_left_node, read_right_node, /*input_2=*/ precomputed.zero, /*input_len=*/ constant_2, read_output_hash }
    in poseidon2_hash.end { poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.input_len, poseidon2_hash.output };

    #[MERKLE_POSEIDON2_WRITE]
    write { write_left_node, write_right_node, /*input_2=*/ precomputed.zero, /*input_len=*/ constant_2, write_output_hash }
    in poseidon2_hash.end { poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.input_len, poseidon2_hash.output };

    // If we are not done, this row's output_hash is the next row's node
    #[OUTPUT_HASH_IS_NEXT_ROWS_READ_NODE]
    NOT_END * (read_node' - read_output_hash) = 0;
    #[OUTPUT_HASH_IS_NEXT_ROWS_WRITE_NODE]
    NOT_END * (write_node' - write_output_hash) = 0;

    // If we are done, the output hash is the root
    #[READ_OUTPUT_HASH_IS_READ_ROOT]
    end * (read_output_hash - read_root) = 0;
    #[WRITE_OUTPUT_HASH_IS_WRITE_ROOT]
    end * (write_output_hash - write_root) = 0;
