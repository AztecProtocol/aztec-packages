include "../constants_gen.pil";
include "../range_check.pil";
include "../trees/l1_to_l2_message_tree_check.pil";

// L1_TO_L2_MESSAGE_EXISTS opcode: Checks if a l1 to l2 message exists in the l1 to l2 message tree at a given leaf index
//
// Register usage:
// - register[0]: Contains the msg_hash to check for existence
// - register[1]: Contains the leaf_index where the msg_hash is going to be checked
// - register[2]: Boolean output of the opcode indicating whether the msg_hash exists at the given leaf index
//
// The opcode leverages the l1_to_l2_message_tree_check gadget to verify the existence check operation
// against the current l1 to l2 message tree root. The opcode will write false if the
// leaf index is greater than or equal to the total number of leaves in the l1 to l2 message tree.
//
namespace execution; // this is a virtual gadget that shares rows with the execution trace

    #[skippable_if]
    sel_execute_l1_to_l2_message_exists = 0; // from execution.pil.

    pol commit l1_to_l2_msg_leaf_in_range;
    l1_to_l2_msg_leaf_in_range * (1 - l1_to_l2_msg_leaf_in_range) = 0;

    // TODO: We need this temporarily while we do not allow for aliases in the lookup tuple
    pol commit l1_to_l2_msg_tree_leaf_count;
    sel_execute_l1_to_l2_message_exists * (l1_to_l2_msg_tree_leaf_count - constants.L1_TO_L2_MSG_TREE_LEAF_COUNT) = 0;

    #[L1_TO_L2_MSG_LEAF_INDEX_IN_RANGE]
    sel_execute_l1_to_l2_message_exists {
        l1_to_l2_msg_tree_leaf_count,
        register[1], // leaf_index input
        l1_to_l2_msg_leaf_in_range
    } in gt.sel {
        gt.input_a,
        gt.input_b,
        gt.res
    };

    // If the leaf index is out of range, set the output to false
    #[L1_TO_L2_MSG_EXISTS_OUT_OF_RANGE_FALSE]
    sel_execute_l1_to_l2_message_exists * (1 - l1_to_l2_msg_leaf_in_range) * register[2] = 0;

    // If the leaf index is in range, check if the msg_hash exists in the l1 to l2 message tree
    #[L1_TO_L2_MSG_READ]
    l1_to_l2_msg_leaf_in_range {
        register[0], // msg_hash input
        register[1], // leaf_index input
        prev_l1_l2_tree_root,
        register[2] // exists output
    } in l1_to_l2_message_tree_check.sel {
        l1_to_l2_message_tree_check.msg_hash,
        l1_to_l2_message_tree_check.leaf_index,
        l1_to_l2_message_tree_check.root,
        l1_to_l2_message_tree_check.exists
    };

    #[L1_TO_L2_MSG_EXISTS_U1_OUTPUT_TAG]
    sel_execute_l1_to_l2_message_exists * (constants.MEM_TAG_U1 - mem_tag_reg[2]) = 0;

    #[L1_TO_L2_MSG_EXISTS_SUCCESS]
    sel_execute_l1_to_l2_message_exists * sel_opcode_error = 0;

