include "../public_inputs.pil";

/**
 * This virtual gadget is used to retrieve environment variables from the current execution/context/gas row
 * or from public inputs.
 *
 * The opcode is gated by the `sel_should_get_env_var` selector, which is set to 1 if the GetEnvVar opcode
 * has reached dispatch (there are no earlier errors).
 *
 * This opcode uses:
 * - register[0] as the output register.
 * - mem_tag_reg[0] as the output register's memory tag
 * - rop[1] as the enum value.
 * - sel_opcode_error to indicate if the enum value is invalid.
 *  (which matches the instruction spec (PIL & Cpp))
 *
 * For some env vars, the value will be available for access in the current execution/context/gas row:
 * - ADDRESS
 * - SENDER
 * - TRANSACTIONFEE
 * - ISSTATICCALL
 * - L2GASLEFT
 * - DAGASLEFT
 *
 * Other env vars come from global variables and must be looked up via public inputs.
 * This virtual trace uses a selector to sel_envvar_pi_lookup to toggle the lookup from public inputs for:
 * - CHAINID
 * - VERSION
 * - BLOCKNUMBER
 * - TIMESTAMP
 * - BASEFEEPERL2GAS
 * - BASEFEEPERDAGAS
 *
 * Note that the lookup to public inputs pulls 2 values (col0 and col1)
 * because { baseFeePerDaGas, baseFeePerL2Gas } is in 1 row spanning 2 columns.
 * This means that while nearly all globalVariables will come from public inputs col0,
 * baseFeePerL2Gas will come from col1. But for now, they share one lookup.
 *
 * If memberEnum is out of range, or if some other error occurs in an earlier temporality group
 * (e.g. address resolution or out-of-gas errors), all of this virtual gadget's selectors should
 * be 0 except for the precomputed table lookup, and output register & intermediate values should be 0.
 *
 * The PI lookup selector, PI row-index, misc selectors indicating which env var is being accessed,
 * and a selector indicating whether the enum value is valid or out-of-range, are all looked up
 * from a precomputed table (precomputed.pil). The lookup populates the corresponding (identically named)
 * columns in this gadget:
 * +-------+-----------------+-------------------+---------------------+--------------------+-------------------+------------+-----------+------------------+---------------+-----------------+--------------+----------------+-----------+
 * |  Row  | Env Variable    | invalid_envvar_   | sel_envvar_pi_col0  | sel_envvar_pi_col1 | envvar_pi_row_idx | is_address | is_sender | is_transactionfee| is_feeperl2gas| is_isstaticcall | is_l2gasleft | is_dagasleft   | out_tag   |
 * | (clk) |                 | enum              | lookup              | lookup             |                   |            |           |                  |               |                 |              |                |           |
 * +-------+-----------------+-------------------+---------------------+--------------------+-------------------+------------+-----------+------------------+---------------+-----------------+--------------+----------------+-----------+
 * |   0   | address         |         0         |          0          |          0         |         0         |     1      |     0     |        0         |       0       |         0       |      0       |      0         |    FF     |
 * |   1   | sender          |         0         |          0          |          0         |         0         |     0      |     1     |        0         |       0       |         0       |      0       |      0         |    FF     |
 * |   2   | transactionFee  |         0         |          0          |          0         |         0         |     0      |     0     |        1         |       0       |         0       |      0       |      0         |    FF     |
 * |   3   | chainId         |         0         |          1          |          0         | CHAIN_ID_ROW_IDX  |     0      |     0     |        0         |       0       |         0       |      0       |      0         |    FF     |
 * |   4   | version         |         0         |          1          |          0         | VERSION_ROW_IDX   |     0      |     0     |        0         |       0       |         0       |      0       |      0         |    FF     |
 * |   5   | blockNumber     |         0         |          1          |          0         | BLOCK_NUM_ROW_IDX |     0      |     0     |        0         |       0       |         0       |      0       |      0         |    U32    |
 * |   6   | timestamp       |         0         |          1          |          0         | TIMESTAMP_ROW_IDX |     0      |     0     |        0         |       0       |         0       |      0       |      0         |    U64    |
 * |   7   | baseFeePerL2Gas |         0         |          0          |          1         | GAS_FEES_ROW_IDX  |     0      |     0     |        0         |       1       |         0       |      0       |      0         |    U128   |
 * |   8   | baseFeePerDaGas |         0         |          1          |          0         | GAS_FEES_ROW_IDX  |     0      |     0     |        0         |       0       |         0       |      0       |      0         |    u128   |
 * |   9   | isStaticCall    |         0         |          0          |          0         |         0         |     0      |     0     |        0         |       0       |         1       |      0       |      0         |    U1     |
 * |  10   | l2GasLeft       |         0         |          0          |          0         |         0         |     0      |     0     |        0         |       0       |         0       |      1       |      0         |    U32    |
 * |  11   | daGasLeft       |         0         |          0          |          0         |         0         |     0      |     0     |        0         |       0       |         0       |      0       |      1         |    U32    |
 * |  12+  | (invalid)       |         1         |          0          |          0         |         0         |     0      |     0     |        0         |       0       |         0       |      0       |      0         |    0      |
 * +-------+-----------------+-------------------+---------------------+--------------------+-------------------+------------+-----------+------------------+---------------+-----------------+--------------+----------------+-----------+
 */

namespace execution; // this is a virtual gadget that shares rows with the execution trace

    // No relations will be checked if this identity is satisfied.
    #[skippable_if]
    sel_execute_get_env_var = 0; // from execution.pil.

    ////////////////////////////////////////////////////////////////////////////
    // from precomputed.pil's GETENVVAR opcode precomputed columns
    pol commit sel_envvar_pi_lookup_col0; // Sel to enable lookup to public inputs col0 for certain env vars
    pol commit sel_envvar_pi_lookup_col1; // Sel to enable lookup to public inputs col1 for certain env vars
    pol commit envvar_pi_row_idx; // Row index to lookup in public inputs
    pol commit is_address;
    pol commit is_sender;
    pol commit is_transactionfee;
    pol commit is_isstaticcall;
    pol commit is_l2gasleft;
    pol commit is_dagasleft;
    // This lookup must be valid for all clks up to max u8 (255)
    // to allow error handling for any invalid enum that fits in a u8 immediate.
    // So, use the `precomputed.sel_range_8` as selector into the precomputed table.
    #[PRECOMPUTED_INFO]
    sel_execute_get_env_var {
        /*enum_value=*/ rop[1], // from opcode input operand
        sel_opcode_error, // invalid envvar enum - trigger an "opcode error"
        sel_envvar_pi_lookup_col0, sel_envvar_pi_lookup_col1, envvar_pi_row_idx,
        is_address, is_sender, is_transactionfee,
        is_isstaticcall,
        is_l2gasleft, is_dagasleft,
        mem_tag_reg[0] // out/dest tag
    } in precomputed.sel_range_8 {
        precomputed.clk,
        precomputed.invalid_envvar_enum,
        precomputed.sel_envvar_pi_lookup_col0, precomputed.sel_envvar_pi_lookup_col1, precomputed.envvar_pi_row_idx,
        precomputed.is_address, precomputed.is_sender, precomputed.is_transactionfee,
        precomputed.is_isstaticcall,
        precomputed.is_l2gasleft, precomputed.is_dagasleft,
        precomputed.out_tag
    };
    // end columns from precomputed.pil's GETENVVAR opcode precomputed columns
    ////////////////////////////////////////////////////////////////////////////

    pol commit value_from_pi;
    // Public input lookup for global variables. Usually just read from PI col0.
    #[READ_FROM_PUBLIC_INPUTS_COL0]
    sel_envvar_pi_lookup_col0 {
        envvar_pi_row_idx, value_from_pi
    } in public_inputs.sel {
        precomputed.clk, public_inputs.cols[0]
    };
    // Read from PI col1 instead for baseFeePerL2Gas
    #[READ_FROM_PUBLIC_INPUTS_COL1]
    sel_envvar_pi_lookup_col1 {
        envvar_pi_row_idx, value_from_pi
    } in public_inputs.sel {
        precomputed.clk, public_inputs.cols[1]
    };

    // NOTE: we do not need to gate on `1 - sel_opcode_error` for these register-setting relations below
    // because if `sel_execute_get_env_var` is 1 and `sel_opcode_error` is 0, then there is an invalid enum
    // the precomputed table will provide 0 for the selectors like `sel_envvar_pi_lookup_col0/1`,
    // `is_address`, `is_sender`,.. so the relations will be disabled anyway.
    // In other words, `(sel_execute_get_env_var == 1 && is_address == 1)` implies `sel_opcode_error == 0`,
    // and likewise for those other selectors.

    // Set output register to the value from public inputs
    #[FROM_PUBLIC_INPUTS]
    // if sel_envvar_pi_lookup_col0 == 1 or sel_envvar_pi_lookup_col1 == 1, then value_from_pi must match the value from public inputs
    sel_execute_get_env_var * (sel_envvar_pi_lookup_col0 + sel_envvar_pi_lookup_col1) * (register[0] - value_from_pi) = 0;

    // Context variables are read from columns within the execution row
    // from the `context.pil` virtual trace.
    #[ADDRESS_FROM_CONTEXT]
    sel_execute_get_env_var * is_address * (register[0] - contract_address) = 0;
    #[SENDER_FROM_CONTEXT]
    sel_execute_get_env_var * is_sender * (register[0] - msg_sender) = 0;
    #[TRANSACTION_FEE_FROM_CONTEXT]
    sel_execute_get_env_var * is_transactionfee * (register[0] - transaction_fee) = 0;
    #[ISSTATICCALL_FROM_CONTEXT]
    sel_execute_get_env_var * is_isstaticcall * (register[0] - is_static) = 0;

    // GasLeft are also read from the columns within the execution row,
    // but from the `gas.pil` virtual trace.
    // These require a computation: left = limit - used
    #[L2GASLEFT_FROM_GAS]
    sel_execute_get_env_var * is_l2gasleft * (register[0] - (l2_gas_limit - l2_gas_used)) = 0;
    #[DAGASLEFT_FROM_GAS]
    sel_execute_get_env_var * is_dagasleft * (register[0] - (da_gas_limit - da_gas_used)) = 0;
