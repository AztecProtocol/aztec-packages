include "../constants_gen.pil";

/**
 * This virtual gadget implements the EmitNullifier opcode, which attempts to write a new nullifier
 * to the nullifier tree for the current contract address. It also increments the nullifier tree size
 * and the number of nullifiers emitted.
 *
 * The opcode is gated by the `sel_execute_emit_nullifier` selector, which is set to 1 if the
 * EmitNullifier opcode has reached dispatch (there are no earlier errors).
 *
 * This opcode uses:
 * - register[0] as the nullifier input register (FF)
 *
 * Interactions:
 * - The gadget performs a lookup into the nullifier_check gadget to attempt to write the nullifier.
 *     - This lookup is only performed if no limit error occurs.
 *
 * Errors:
 * - If the max nullifier writes limit has been reached, the operation raises an opcode error.
 * - If the nullifier already exists (collision), the operation raises an opcode error.
 *
 * If there are errors in earlier temporality groups (i.e. the opcode is not dispatched),
 * all selectors should be 0 and intermediate values should be 0.
 */
namespace execution; // this is a virtual gadget that shares rows with the execution trace

    // No relations will be checked if this identity is satisfied.
    #[skippable_if]
    sel_execute_emit_nullifier = 0; // from execution.pil.

    // =========== VALIDATION ===========

    pol REMAINING_NULLIFIER_WRITES = constants.MAX_NULLIFIERS_PER_TX -
        prev_num_nullifiers_emitted;

    pol commit sel_reached_max_nullifiers;
    sel_reached_max_nullifiers * (1 - sel_reached_max_nullifiers) = 0;

    pol commit remaining_nullifiers_inv;
    // Limit error if REMAINING_NULLIFIER_WRITES is 0
    #[MAX_NULLIFIER_WRITES_REACHED]
    sel_execute_emit_nullifier * (REMAINING_NULLIFIER_WRITES * (sel_reached_max_nullifiers * (1 - remaining_nullifiers_inv) + remaining_nullifiers_inv) - 1 + sel_reached_max_nullifiers) = 0;

    pol commit sel_write_nullifier;
    // Validation errors if we've reached the max nullifiers or if we're in a static context
    #[VALIDATION_ERROR_DISABLE_WRITE]
    sel_execute_emit_nullifier * ((1 - sel_reached_max_nullifiers) * (1 - is_static) - sel_write_nullifier) = 0;

    // A validation error must cause an "opcode error".
    //     if sel_write_nullifier == 0, sel_opcode_error must be 1
    //     but otherwise, we don't force a value for sel_opcode_error and instead let the lookup below set it.
    #[OPCODE_ERROR_IF_VALIDATION_ERROR]
    sel_execute_emit_nullifier * (1 - sel_write_nullifier) * (1 - sel_opcode_error) = 0;

    // =========== OPCODE EXECUTION ===========

    // Lookup into nullifier tree check to attempt write
    #[WRITE_NULLIFIER]
    sel_write_nullifier {
        /*nullifier=*/ register[0],                       // input: nullifier to write
        prev_nullifier_tree_root,                         // input: pre-write tree root (from context.pil)
        /*exists=*/ sel_opcode_error,                     // output: 1 if nullifier already exists (error)
        nullifier_tree_root,                              // output: new tree root (updates context.pil column!)
        prev_nullifier_tree_size,                         // input: pre-write tree size (from context.pil)
        discard,                                          // input: (from execution_discard) will this write eventually be reverted (so it shouldn't be written to public inputs)?
        /*nullifier_index=*/ prev_num_nullifiers_emitted, // input: the nullifier index to write to in public inputs
        /*should_silo=1*/ sel_write_nullifier,            // input: should_silo = 1 (always silo for contract nullifiers)
        contract_address                                  // input: contract address for siloing (from context)
    } in nullifier_check.write {
        nullifier_check.nullifier,
        nullifier_check.root,
        nullifier_check.exists,               // nullifier collision
        nullifier_check.write_root,           // post-write tree root
        nullifier_check.tree_size_before_write,
        nullifier_check.discard,
        nullifier_check.nullifier_index,      // index to write to in public inputs
        nullifier_check.should_silo,
        nullifier_check.address               // contract address for siloing
    };

    pol SUCCESSFUL_WRITE = sel_write_nullifier * (1 - sel_opcode_error);

    #[EMIT_NULLIFIER_TREE_ROOT_NOT_CHANGED]
    sel_execute_emit_nullifier * sel_opcode_error * (prev_nullifier_tree_root - nullifier_tree_root) = 0;

    #[EMIT_NULLIFIER_TREE_SIZE_INCREASE]
    sel_execute_emit_nullifier * (prev_nullifier_tree_size + SUCCESSFUL_WRITE - nullifier_tree_size) = 0;

    #[EMIT_NULLIFIER_NUM_NULLIFIERS_EMITTED_INCREASE]
    sel_execute_emit_nullifier * (prev_num_nullifiers_emitted + SUCCESSFUL_WRITE - num_nullifiers_emitted) = 0;
