include "merkle_check.pil";

include "../ff_gt.pil";
include "../poseidon2_hash.pil";
include "../constants_gen.pil";
include "../precomputed.pil";

// This gadget is used to track the unique class ids that have been retrieved in the TX.
// It's a transient indexed tree that starts empty (with a prefill) on every transaction,
// and it's discarded at the end of the transaction execution.
// The leaves only contain the class id and the indexed tree pointers.
//
// Read usage:
// sel {
//     class_id,
//     leaf_not_exists,
//     retrieved_bytecodes_tree_root
// } in retrieved_bytecodes_tree_check.sel {
//     retrieved_bytecodes_tree_check.class_id,
//     retrieved_bytecodes_tree_check.leaf_not_exists,
//     retrieved_bytecodes_tree_check.root
// };
//
// Write usage:
// sel {
//     class_id,
//     sel, // 1
//     prev_retrieved_bytecodes_tree_root,
//     prev_retrieved_bytecodes_tree_size,
//     next_retrieved_bytecodes_tree_root,
//     next_retrieved_bytecodes_tree_size
// } in retrieved_bytecodes_tree_check.sel {
//     retrieved_bytecodes_tree_check.class_id,
//     retrieved_bytecodes_tree_check.write,
//     retrieved_bytecodes_tree_check.root,
//     retrieved_bytecodes_tree_check.tree_size_before_write,
//     retrieved_bytecodes_tree_check.write_root,
//     retrieved_bytecodes_tree_check.tree_size_after_write
// };

namespace retrieved_bytecodes_tree_check;
    pol commit sel;
    sel * (1 - sel) = 0;

    #[skippable_if]
    sel = 0;

    // Inputs to the gadget
    pol commit write;
    write * (1 - write) = 0;
    pol READ = 1 - write;

    pol commit class_id;
    pol commit root;
    pol commit leaf_not_exists;
    leaf_not_exists * (1 - leaf_not_exists) = 0;
    pol EXISTS = 1 - leaf_not_exists;

    // Write specific inputs
    pol commit write_root;
    pol commit tree_size_before_write;
    pol commit tree_size_after_write;

    // Hints
    pol commit low_leaf_class_id;
    pol commit low_leaf_next_index;
    pol commit low_leaf_next_class_id;

    pol commit updated_low_leaf_next_index;
    pol commit updated_low_leaf_next_class_id;

    pol commit low_leaf_index;

    // ========= HANDLE REDUNDANT WRITES  =========
    pol commit should_insert;
    should_insert = write * leaf_not_exists;
    // On a failing write, the root must not change
    write * EXISTS * (root - write_root) = 0;

    tree_size_after_write = tree_size_before_write + should_insert;

    // ========= COMPUTE LOW LEAF UPDATE =========
    should_insert * (tree_size_before_write - updated_low_leaf_next_index) = 0;
    should_insert * (class_id - updated_low_leaf_next_class_id) = 0;

    // ========= LOW LEAF MERKLE CHECK =========
    pol commit low_leaf_hash;
    // The intermediate root is the root of the tree after the low leaf update but before the new leaf is inserted.
    pol commit intermediate_root;
    // TODO: We need this temporarily while we do not allow for aliases in the lookup tuple
    pol commit tree_height;
    sel * (constants.AVM_RETRIEVED_BYTECODES_TREE_HEIGHT - tree_height) = 0;

    #[LOW_LEAF_POSEIDON2]
    sel { sel, low_leaf_class_id, low_leaf_next_class_id, low_leaf_next_index, low_leaf_hash }
    in poseidon2_hash.end { poseidon2_hash.start, poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.output };

    pol commit updated_low_leaf_hash;

    #[UPDATED_LOW_LEAF_POSEIDON2]
    should_insert { sel, low_leaf_class_id, updated_low_leaf_next_class_id, updated_low_leaf_next_index, updated_low_leaf_hash }
    in poseidon2_hash.end { poseidon2_hash.start, poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.output };

    #[LOW_LEAF_MERKLE_CHECK]
    sel { should_insert, low_leaf_hash, updated_low_leaf_hash,
        low_leaf_index, tree_height, root, intermediate_root }
    in merkle_check.start { merkle_check.write, merkle_check.read_node, merkle_check.write_node,
        merkle_check.index, merkle_check.path_len, merkle_check.read_root, merkle_check.write_root };

    // ========= LOW LEAF VALIDATION =========
    pol commit class_id_low_leaf_class_id_diff_inv;
    pol CLASS_ID_LOW_LEAF_CLASS_ID_DIFF = class_id - low_leaf_class_id;

    // CLASS_ID_LOW_LEAF_CLASS_ID_DIFF == 0 <==> EXISTS == 1
    #[EXISTS_CHECK]
    sel * (CLASS_ID_LOW_LEAF_CLASS_ID_DIFF * (EXISTS * (1 - class_id_low_leaf_class_id_diff_inv) + class_id_low_leaf_class_id_diff_inv) - 1 + EXISTS) = 0;

    // If the leaf doesn't exist, we need to validate that the class id is greater than the low leaf class id

    #[LOW_LEAF_CLASS_ID_VALIDATION]
    leaf_not_exists { class_id, low_leaf_class_id, sel }
    in ff_gt.sel_gt { ff_gt.a, ff_gt.b, ff_gt.result };

    // If next class id is not zero (which would be infinity), it has to be greater than the class id.
    // We commit next_class_id_is_nonzero instead of next_class_id_is_zero since it'll be used as a selector for a lookup
    pol commit next_class_id_is_nonzero;
    next_class_id_is_nonzero * (1 - next_class_id_is_nonzero) = 0;
    pol NEXT_CLASS_ID_IS_ZERO = 1 - next_class_id_is_nonzero;

    pol commit next_class_id_inv;
    #[NEXT_CLASS_ID_IS_ZERO_CHECK]
    leaf_not_exists * (low_leaf_next_class_id * (NEXT_CLASS_ID_IS_ZERO * (1 - next_class_id_inv) + next_class_id_inv) - 1 + NEXT_CLASS_ID_IS_ZERO) = 0;

    #[LOW_LEAF_NEXT_CLASS_ID_VALIDATION]
    next_class_id_is_nonzero { low_leaf_next_class_id, class_id, sel }
    in ff_gt.sel_gt { ff_gt.a, ff_gt.b, ff_gt.result };

    // ========= NEW LEAF INSERTION =========
    pol commit new_leaf_hash;

    #[NEW_LEAF_POSEIDON2]
    should_insert { sel, class_id, low_leaf_next_class_id, low_leaf_next_index, new_leaf_hash }
    in poseidon2_hash.end { poseidon2_hash.start, poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.output };

    #[NEW_LEAF_MERKLE_CHECK]
    should_insert { sel, precomputed.zero, new_leaf_hash,
        tree_size_before_write, tree_height, intermediate_root, write_root }
    in merkle_check.start { merkle_check.write, merkle_check.read_node, merkle_check.write_node,
        merkle_check.index, merkle_check.path_len, merkle_check.read_root, merkle_check.write_root };

