// Discarding on error in execution

// This is a virtual gadget, which is part of the execution trace.
// This subtrace is focused on managing the changes to the discard and dying_context_id columns.
namespace execution;

    // No relations will be checked if this identity is satisfied.
    #[skippable_if]
    sel = 0; // from execution.pil.

    // sel_failure == sel_error || sel_execute_revert
    pol commit sel_failure;
    // sel_failure is boolean by definition and because sel_error and sel_execute_revert are
    // guaranteed to be boolean as constrained in execution.pil
    #[SEL_FAILURE]
    sel_failure = 1 - (1 - sel_error) * (1 - sel_execute_revert);

    // Discard columns for error handling
    pol commit discard; // This context or one of its ancestors fails. All side effects should be discarded.
    // 1. discard is boolean
    discard * (1 - discard) = 0;

    pol commit dying_context_id; // The context_id of this context's oldest ancestor that fails. This is nonzero if and only if discard is 1.
    pol commit dying_context_id_inv; // inverse of dying_context_id
    // 2. Discard being 1 implies non-zero dying context and vice versa
    // discard == 1 â‡” dying_context_id != 0
    #[DISCARD_IFF_DYING_CONTEXT]
    dying_context_id * ((1 - discard) * (1 - dying_context_id_inv) + dying_context_id_inv) - discard = 0;

    // 3. An instruction/row that fails must discard. In other words, if sel_failure == 1, then discard == 1 must hold true.
    #[DISCARD_IF_FAILURE]
    sel_failure * (1 - discard) = 0;

    // Helper columns for checking if context_id == dying_context_id
    pol commit is_dying_context; // 1 if context_id == dying_context_id
    is_dying_context * (1 - is_dying_context) = 0; // Boolean constraint
    pol DYING_CONTEXT_DIFF = context_id - dying_context_id;
    pol commit dying_context_diff_inv; // Inverse of (context_id - dying_context_id) when they're different

    // Constraint to check if context_id == dying_context_id
    // DYING_CONTEXT_DIFF == 0 <==> is_dying_context == 1
    // Note: context_id will never be 0 for an active row and therefore
    // `is_dying_context == 0` whenever `discard == 0` (because `discard == 0` implies `dying_context_id == 0`).
    // In other words, `is_dying_context == 1` implies `discard == 1`.
    #[IS_DYING_CONTEXT_CHECK]
    sel * (DYING_CONTEXT_DIFF * (is_dying_context * (1 - dying_context_diff_inv) + dying_context_diff_inv) - 1 + is_dying_context) = 0;

    // 4. By default, the values of discard and dying_context_id are propagated to the next row.
    // 5. The propagation constraint is lifted for discard and dying_context_id on the next row if any one of the following conditions are met:
    //    a. The next row is the first instruction of an enqueued call.
    //    b. This instruction/row is a failure in the dying context (discard == 1 && sel_failure == 1 && context_id == dying_context_id)
    //    c. This instruction/row is a call and the nested context will eventually fail (sel_enter_call == 1 && discard == 0)

    // Note: we could, instead, _not_ lift propagation at enqueued call boundaries,
    // but then we need to special case the transition from setup to app logic,
    // since setup must have discard=0, and app logic can have discard=1.
    // App logic to teardown wouldn't need special-casing because if teardown discards,
    // all of app logic must discard too.
    pol commit resolves_dying_context;
    #[RESOLVES_DYING_CONTEXT]
    (resolves_dying_context - sel_failure * is_dying_context) = 0;
    // Note: sel_failure implies discard ^
    pol commit nested_call_from_undiscarded_context; // sel_enter_call * (1 - discard) // 5c.
    #[NESTED_CALL_FROM_UNDISCARDED_CONTEXT]
    (nested_call_from_undiscarded_context - sel_enter_call * (1 - discard)) = 0;
    // Note: if any of these ^ conditions are met, we lift the propagation constraint.
    // Otherwise, propagation is enforced.
    pol commit propagate_discard; // Implicitly boolean as its components are boolean.
    #[SHOULD_PROPAGATE_DISCARD]
    sel * (propagate_discard - (1 - enqueued_call_end) * (1 - resolves_dying_context) * (1 - nested_call_from_undiscarded_context)) = 0;
    // Note: on nested call, can't know yet whether or not the nested context will eventually revert.
    // But, we can lift the propagation constraint, and enforce that a dying context _must_ be resolved.
    // In this way, we allow `discard` to be raised to 1 on a nested call. And once 1, `discard` _must_
    // be resolved in a later row by an error encountered in the dying context.

    // Discard propagation
    #[DISCARD_PROPAGATION]
    sel * (1 - last) * propagate_discard * (discard' - discard) = 0;
    #[DYING_CONTEXT_PROPAGATION]
    sel * (1 - last) * propagate_discard * (dying_context_id' - dying_context_id) = 0;

    // 6. An instruction/row cannot exit the "dying context" without a failure.
    // If is_dying_context_id == 1 && exit == 1, then sel_failure == 1 must hold true.
    // Note: recall that dying_context_id == 1 implies discard == 1
    #[DYING_CONTEXT_MUST_FAIL]
    is_dying_context * sel_exit_call * (1 - sel_failure) = 0;

    // 7. On enter_call, if discard is being raised (0->1), the new context must be the dying context.
    // This prevents attacks where discard is raised with a wrong dying_context_id.
    // If sel_enter_call == 1 && discard == 0 && discard' == 1, enforce that context_id' == dying_context_id'
    #[ENTER_CALL_DISCARD_MUST_BE_DYING_CONTEXT]
    sel_enter_call * (1 - discard) * discard' * (context_id' - dying_context_id') = 0;

    // 8. When a dying context with a parent resolves, discard must be cleared (1->0) on the next row.
    // This prevents attacks where the dying context is changed instead of clearing discard.
    // If sel_failure == 1 && is_dying_context == 1 && has_parent_ctx == 1, enforce that discard' == 0
    #[DYING_CONTEXT_WITH_PARENT_MUST_CLEAR_DISCARD]
    sel_failure * is_dying_context * has_parent_ctx * discard' = 0;
