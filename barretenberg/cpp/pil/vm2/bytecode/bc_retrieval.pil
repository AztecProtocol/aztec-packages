include "contract_instance_retrieval.pil";
include "bc_hashing.pil";

include "../constants_gen.pil";

// Bytecode retrieval.
//
// This subtrace constrains everything related to "retrieving" a bytecode given an address.
// In practice this means:
// - Silo the address.
// - Check if the nullifier exists.
// - Derive the class id.
// - Derive the address.
// - Check updatability.
//
// The lookups into this subtrace are expected to be on the columns
// { class_id, address, error }
// This trace uses the class_id from the contract instance.
//
// Note that this trace will prove both success or failure of retrieval.

namespace bc_retrieval;

pol commit sel;
sel * (1 - sel) = 0;

// No relations will be checked if this identity is satisfied.
#[skippable_if]
sel = 0;

// If sel = 0, and it's not the first row, then all following rows should have sel = 0.
#[TRACE_CONTINUITY]
(1 - sel) * (1 - precomputed.first_row) * sel' = 0;

// Use class_id from the contract instance instead of bytecode_id
pol commit class_id;
pol commit error;  // some error occurred.
pol commit address;  // contract address.

// contract instance members.
//
// Note that bytecode retrieval doesn't care about the other instance members
// (salt, deployer_addr, init_hash). It is sufficient that after validating
// contract address nullifier membership, contract instance retrieval and its
// call to address derivation will enforce that the correct instance members
// are used. If a prover tries to use the wrong instance members, address derivation
// will have unsatisfiable constraints. So, here we only need the current_class_id
// to then validate with class id derivation.
//
// See full contract instance struct at barretenberg/cpp/src/barretenberg/vm2/common/aztec_types.hpp
pol commit current_class_id;

// contract class members.
// See barretenberg/cpp/src/barretenberg/vm2/common/aztec_types.hpp
pol commit artifact_hash;
pol commit private_function_root;
pol commit public_bytecode_commitment;

// current state
// These should be looked up and constrained by the caller.
pol commit public_data_tree_root;
pol commit nullifier_tree_root;

pol commit instance_exists;
// The only error that can happen is if the nullifier does not exist.
error = sel * (1 - instance_exists);

// When the instance exists, class_id should match current_class_id
sel * instance_exists * (class_id - current_class_id) = 0;

#[CONTRACT_INSTANCE_RETRIEVAL]
sel {
    address,
    current_class_id,
    instance_exists,
    public_data_tree_root,
    nullifier_tree_root
} in contract_instance_retrieval.sel {
    contract_instance_retrieval.address,
    contract_instance_retrieval.current_class_id,
    contract_instance_retrieval.exists,
    contract_instance_retrieval.public_data_tree_root,
    contract_instance_retrieval.nullifier_tree_root
};

// Observe the following also connects the current_class_id of the instance to the class members.
// Note: only need to derive the class id if the instance exists.
// TODO: Probably some latch is also needed.
#[CLASS_ID_DERIVATION]
instance_exists {
  current_class_id,
  artifact_hash,
  private_function_root,
  public_bytecode_commitment
} in class_id_derivation.sel {
  class_id_derivation.class_id,
  class_id_derivation.artifact_hash,
  class_id_derivation.private_function_root,
  class_id_derivation.public_bytecode_commitment
};

// TODO(dbanks12): re-enable once C++ and PIL use standard poseidon2 hashing for bytecode commitments.
// Note: only need to hash the bytecode if the instance exists. Otherwise there is nothing to hash!
//#[BYTECODE_HASH_IS_CORRECT]
//instance_exists { class_id, public_bytecode_commitment } in bc_hashing.latch { bc_hashing.class_id, bc_hashing.output_hash };

// Note: we don't need to silo and check the class id because the deployer contract guarrantees
// that if a contract instance exists, the class has been registered.

// TODO: To ensure class_id unicity inside of bc_decomposition.pil, we will have to introduce
// a permutation of the form: sel_XXX {class_id} is bc_decomposition.last_of_contract {bc_decomposition.id}
// sel_XXX will have to be picked so that it selects a class_id iff it has an entry in bc_decomposition
