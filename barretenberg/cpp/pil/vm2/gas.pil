include "precomputed.pil";
include "range_check.pil";

// This is a virtual gadget, which is part of the execution trace.
// https://excalidraw.com/#json=-fkwtFjYVOq2Z69Q351AE,O3SbjwK5eHX7-Oz2OH8RqQ
namespace execution;

    // ==== BASE GAS ====

    // Looked up in execution.pil
    pol commit opcode_gas;
    pol commit addressing_gas;

    pol BASE_L2_GAS = opcode_gas + addressing_gas;

    // Looked up in execution.pil
    pol commit base_da_gas;

    pol commit out_of_gas_base_l2;
    out_of_gas_base_l2 * (1 - out_of_gas_base_l2) = 0;

    pol commit out_of_gas_base_da;
    out_of_gas_base_da * (1 - out_of_gas_base_da) = 0;

    // out_of_gas_base = out_of_gas_base_l2 OR out_of_gas_base_da
    pol commit out_of_gas_base;
    out_of_gas_base = 1 - (1 - out_of_gas_base_l2) * (1 - out_of_gas_base_da);

    #[ADDRESSING_GAS_READ]
    sel { indirect, addressing_gas }
    in
    precomputed.sel_addressing_gas
        { precomputed.clk, precomputed.addressing_gas };

    // nested_exit_call = 1 <==> prev_gas_used' = parent_gas_used + gas_used
    // sel_enter_call   = 1 <==> prev_gas_used' = 0
    // otherwise        = 0 <==> prev_gas_used' = gas_used
    pol commit prev_l2_gas_used;
    pol commit prev_da_gas_used;

    #[L2_GAS_USED_CONTINUITY]
    NOT_LAST_EXEC * DEFAULT_CTX_ROW * (l2_gas_used - prev_l2_gas_used') = 0;
    #[L2_GAS_USED_ZERO_AFTER_CALL]
    NOT_LAST_EXEC * sel_enter_call * prev_l2_gas_used' = 0;
    #[L2_GAS_USED_INGEST_AFTER_EXIT]
    NOT_LAST_EXEC * nested_exit_call * (parent_l2_gas_used + l2_gas_used - prev_l2_gas_used') = 0;
    #[DA_GAS_USED_CONTINUITY]
    NOT_LAST_EXEC * DEFAULT_CTX_ROW * (da_gas_used - prev_da_gas_used') = 0;
    #[DA_GAS_USED_ZERO_AFTER_CALL]
    NOT_LAST_EXEC * sel_enter_call * prev_da_gas_used' = 0;
    #[DA_GAS_USED_INGEST_AFTER_EXIT]
    NOT_LAST_EXEC * nested_exit_call * (parent_da_gas_used + da_gas_used - prev_da_gas_used') = 0;

    // ==== DYNAMIC GAS ====

    // This variable will be used to disable the dynamic gas check if there is a "previous" error
    // This is constrained here to be 0 if out of gas happens in the base phase, but the execution trace
    // should constrain it further to be zero if another error occurs "before" the dynamic phase
    pol commit should_run_dyn_gas_check;
    // We constrain that if out of gas in the base phase, the dynamic phase will not run
    // We can release this constraint in the future when execution.pil constrains should_run_dyn_gas_check
    out_of_gas_base * should_run_dyn_gas_check = 0;

    pol commit dynamic_l2_gas_factor;
    (1 - should_run_dyn_gas_check) * dynamic_l2_gas_factor = 0;
    pol commit dynamic_da_gas_factor;
    (1 - should_run_dyn_gas_check) * dynamic_da_gas_factor = 0;
    // Looked up in execution.pil
    pol commit dynamic_l2_gas;
    // Looked up in execution.pil
    pol commit dynamic_da_gas;

    // Dynamic gas is computed by multiplying the gas spec by the dynamic factor.
    pol DYNAMIC_L2_GAS_USED = dynamic_l2_gas * dynamic_l2_gas_factor;
    pol DYNAMIC_DA_GAS_USED = dynamic_da_gas * dynamic_da_gas_factor;

    pol commit out_of_gas_dynamic_l2;
    out_of_gas_dynamic_l2 * (1 - out_of_gas_dynamic_l2) = 0;

    pol commit out_of_gas_dynamic_da;
    out_of_gas_dynamic_da * (1 - out_of_gas_dynamic_da) = 0;

    // out_of_gas_dynamic = out_of_gas_dynamic_l2 OR out_of_gas_dynamic_da
    pol commit out_of_gas_dynamic;
    out_of_gas_dynamic = 1 - (1 - out_of_gas_dynamic_l2) * (1 - out_of_gas_dynamic_da);

    // out_of_gas_dynamic and out_of_gas_base are mutually exclusive
    // If out of gas in the base phase, should_run_dyn_gas_check is off,
    // the dynamic phase is "not run" and its factors are constrained to be zero
    out_of_gas_dynamic * out_of_gas_base = 0;

    // ==== COMPARISON AGAINST THE LIMITS ====

    // We perform just one comparison for both base and dynamic gas. If the out of gas is in base,
    // prover is expected to set the out_of_gas_base flag to 1. If he chooses not to then we'll be out of gas after
    // applying dynamic gas and he'll have performed free work. But that's the prover's problem.

    // We are going to do 64 bit comparisons. If we assume:
    // prev_l2_gas_used to be u32::MAX_VALUE
    // BASE_L2_GAS to be u32::MAX_VALUE
    // dynamic_l2_gas_factor to be u32::MAX_VALUE
    // dynamic_da_gas to be u32::MAX_VALUE
    // Then prev_l2_gas_used + BASE_L2_GAS + dynamic_l2_gas_factor*dynamic_da_gas is exactly u64::MAX_VALUE.

    pol commit constant_64;
    sel * (64 - constant_64) = 0;

    pol OUT_OF_GAS_L2 = out_of_gas_base_l2 + out_of_gas_dynamic_l2;
    pol OUT_OF_GAS_DA = out_of_gas_base_da + out_of_gas_dynamic_da;

    pol PREV_GAS_PLUS_USAGE_L2 = prev_l2_gas_used + BASE_L2_GAS + DYNAMIC_L2_GAS_USED;
    // Assumes l2_gas_limit is 32 bit and PREV_GAS_PLUS_USAGE_L2 is 64 bit
    // So we perform a 64 bit comparison
    pol LIMIT_GTE_USED_L2 = l2_gas_limit - PREV_GAS_PLUS_USAGE_L2;
    pol LIMIT_LT_USED_L2 =  PREV_GAS_PLUS_USAGE_L2 - l2_gas_limit - 1;
    pol commit limit_used_l2_cmp_diff;
    sel * ((LIMIT_LT_USED_L2 - LIMIT_GTE_USED_L2) * OUT_OF_GAS_L2 + LIMIT_GTE_USED_L2 - limit_used_l2_cmp_diff) = 0;

    #[LIMIT_USED_L2_RANGE]
    sel { limit_used_l2_cmp_diff, constant_64 }
    in
    range_check.sel
        { range_check.value, range_check.rng_chk_bits };

    pol PREV_GAS_PLUS_USAGE_DA = prev_da_gas_used + base_da_gas + DYNAMIC_DA_GAS_USED;
    // Assumes da_gas_limit is 32 bit and PREV_GAS_PLUS_USAGE_DA is 64 bit
    // So we perform a 64 bit comparison
    pol LIMIT_GTE_USED_DA = da_gas_limit - PREV_GAS_PLUS_USAGE_DA;
    pol LIMIT_LT_USED_DA =  PREV_GAS_PLUS_USAGE_DA - da_gas_limit - 1;
    pol commit limit_used_da_cmp_diff;
    sel * ((LIMIT_LT_USED_DA - LIMIT_GTE_USED_DA) * OUT_OF_GAS_DA + LIMIT_GTE_USED_DA - limit_used_da_cmp_diff) = 0;

    #[LIMIT_USED_DA_RANGE]
    sel { limit_used_da_cmp_diff, constant_64 }
    in
    range_check.sel
        { range_check.value, range_check.rng_chk_bits };

    // ==== GAS USED CONSTRAINING ====

    // Safe since they are mutually exclusive
    pol OUT_OF_GAS = out_of_gas_base + out_of_gas_dynamic;

    // If out of gas, gas_used is set to limit. Otherwise, gas_used is updated based on the gas usage of the previous row.
    (l2_gas_limit - PREV_GAS_PLUS_USAGE_L2) * OUT_OF_GAS + PREV_GAS_PLUS_USAGE_L2 - l2_gas_used = 0;
    (da_gas_limit - PREV_GAS_PLUS_USAGE_DA) * OUT_OF_GAS + PREV_GAS_PLUS_USAGE_DA - da_gas_used = 0;
