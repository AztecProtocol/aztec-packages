include "precomputed.pil";

// This is a virtual gadget, which is part of the execution trace.
// TODO: Overflow checks: might be needed? especially for dynamic gas
namespace execution;

    // ==== BASE GAS ====

    // Looked up in execution.pil
    pol commit opcode_gas;
    pol commit addressing_gas;

    pol commit l2_base_gas;
    opcode_gas + addressing_gas - l2_base_gas = 0;

    // Looked up in execution.pil
    pol commit da_base_gas;

    pol commit out_of_gas_l2_base;
    out_of_gas_l2_base * (1 - out_of_gas_l2_base) = 0;

    pol commit out_of_gas_da_base;
    out_of_gas_da_base * (1 - out_of_gas_da_base) = 0;

    // out_of_gas_base = out_of_gas_l2_base OR out_of_gas_da_base
    pol commit out_of_gas_base;
    (1 - out_of_gas_l2_base) * (1 - out_of_gas_da_base) - (1 - out_of_gas_base) = 0;

    #[ADDRESSING_GAS_READ]
    sel { indirect, addressing_gas }
    in
    precomputed.sel_addressing_gas
        { precomputed.clk, precomputed.addressing_gas };

    // nested_exit_call = 1 <==> prev_gas_used' = parent_gas_used + gas_used
    // sel_enter_call   = 1 <==> prev_gas_used' = 0
    // otherwise        = 0 <==> prev_gas_used' = prev_gas_used
    pol commit prev_l2_gas_used;
    pol commit prev_da_gas_used;

    #[L2_GAS_USED_CONTINUITY]
    NOT_LAST_EXEC * DEFAULT_CTX_ROW * (l2_gas_used - prev_l2_gas_used') = 0;
    #[L2_GAS_USED_ZERO_AFTER_CALL]
    NOT_LAST_EXEC * sel_enter_call * prev_l2_gas_used' = 0;
    #[L2_GAS_USED_INGEST_AFTER_EXIT]
    NOT_LAST_EXEC * nested_exit_call * (parent_l2_gas_used + l2_gas_used - prev_l2_gas_used') = 0;
    #[DA_GAS_USED_CONTINUITY]
    NOT_LAST_EXEC * DEFAULT_CTX_ROW * (prev_da_gas_used' - da_gas_used) = 0;
    #[DA_GAS_USED_ZERO_AFTER_CALL]
    NOT_LAST_EXEC * sel_enter_call * prev_da_gas_used' = 0;
    #[DA_GAS_USED_INGEST_AFTER_EXIT]
    NOT_LAST_EXEC * nested_exit_call * (parent_da_gas_used + da_gas_used - prev_da_gas_used') = 0;

    // Check l2 base gas

    pol L2_GAS_USED_AFTER_BASE = prev_l2_gas_used + l2_base_gas;
    // Assumes both l2_gas_limit and L2_GAS_USED_AFTER_BASE are 32 bit
    pol LIMIT_GTE_USED_L2_BASE = l2_gas_limit - L2_GAS_USED_AFTER_BASE;
    pol LIMIT_LT_USED_L2_BASE =  L2_GAS_USED_AFTER_BASE - l2_gas_limit - 1;
    pol commit limit_used_l2_base_cmp_diff;
    (LIMIT_LT_USED_L2_BASE - LIMIT_GTE_USED_L2_BASE) * out_of_gas_l2_base + LIMIT_GTE_USED_L2_BASE - limit_used_l2_base_cmp_diff = 0;

    // Optimization: decompose inline limit_used_l2_base_cmp_diff and range check it by limbs
    pol TWO_POW_16 = 65536;
    pol commit limit_used_l2_base_cmp_diff_lo;
    pol commit limit_used_l2_base_cmp_diff_hi;

    limit_used_l2_base_cmp_diff_lo + limit_used_l2_base_cmp_diff_hi * TWO_POW_16 - limit_used_l2_base_cmp_diff = 0;

    #[LIMIT_USED_L2_BASE_RANGE_LO]
    sel { limit_used_l2_base_cmp_diff_lo }
    in
    precomputed.sel_range_16
        { precomputed.clk };

    #[LIMIT_USED_L2_BASE_RANGE_HI]
    sel { limit_used_l2_base_cmp_diff_hi }
    in
    precomputed.sel_range_16
        { precomputed.clk };

    // Check da base gas

    pol DA_GAS_USED_AFTER_BASE = prev_da_gas_used + da_base_gas;
    // Assumes both da_gas_limit and DA_GAS_USED_AFTER_BASE are 32 bit
    pol LIMIT_GTE_USED_DA_BASE = da_gas_limit - DA_GAS_USED_AFTER_BASE;
    pol LIMIT_LT_USED_DA_BASE =  DA_GAS_USED_AFTER_BASE - da_gas_limit - 1;
    pol commit limit_used_da_base_cmp_diff;
    (LIMIT_LT_USED_DA_BASE - LIMIT_GTE_USED_DA_BASE) * out_of_gas_da_base + LIMIT_GTE_USED_DA_BASE - limit_used_da_base_cmp_diff = 0;

    pol commit limit_used_da_base_cmp_diff_lo;
    pol commit limit_used_da_base_cmp_diff_hi;

    limit_used_da_base_cmp_diff_lo + limit_used_da_base_cmp_diff_hi * TWO_POW_16 - limit_used_da_base_cmp_diff = 0;

    #[LIMIT_USED_DA_BASE_RANGE_LO]
    sel { limit_used_da_base_cmp_diff_lo }
    in
    precomputed.sel_range_16
        { precomputed.clk };

    #[LIMIT_USED_DA_BASE_RANGE_HI]
    sel { limit_used_da_base_cmp_diff_hi }
    in
    precomputed.sel_range_16
        { precomputed.clk };

    // ==== DYNAMIC GAS ====

    // TODO ideally we should have a selector in the execution spec for this.
    pol commit should_run_dyn_gas_check;
    sel * (1 - out_of_gas_base) - should_run_dyn_gas_check = 0;

    pol commit l2_dynamic_gas_factor;
    (1 - should_run_dyn_gas_check) * l2_dynamic_gas_factor = 0;
    pol commit da_dynamic_gas_factor;
    (1 - should_run_dyn_gas_check) * da_dynamic_gas_factor = 0;
    // Looked up in execution.pil
    pol commit l2_dynamic_gas;
    // Looked up in execution.pil
    pol commit da_dynamic_gas;

    pol commit out_of_gas_l2_dynamic;
    out_of_gas_l2_dynamic * (1 - out_of_gas_l2_dynamic) = 0;

    pol commit out_of_gas_da_dynamic;
    out_of_gas_da_dynamic * (1 - out_of_gas_da_dynamic) = 0;

    // out_of_gas_dynamic = out_of_gas_l2_dynamic OR out_of_gas_da_dynamic
    pol commit out_of_gas_dynamic;
    (1 - out_of_gas_l2_dynamic) * (1 - out_of_gas_da_dynamic) - (1 - out_of_gas_dynamic) = 0;

    // out_of_gas_dynamic and out_of_gas_base are mutually exclusive
    out_of_gas_dynamic * out_of_gas_base = 0;

    // Check l2 dynamic gas

    pol L2_GAS_USED_AFTER_DYNAMIC = prev_l2_gas_used + l2_base_gas + l2_dynamic_gas;
    // Assumes both l2_gas_limit and L2_GAS_USED_AFTER_DYNAMIC are 32 bit
    pol LIMIT_GTE_USED_L2_DYNAMIC = l2_gas_limit - L2_GAS_USED_AFTER_DYNAMIC;
    pol LIMIT_LT_USED_L2_DYNAMIC =  L2_GAS_USED_AFTER_DYNAMIC - l2_gas_limit - 1;
    pol commit limit_used_l2_dynamic_cmp_diff;
    should_run_dyn_gas_check * ((LIMIT_LT_USED_L2_DYNAMIC - LIMIT_GTE_USED_L2_DYNAMIC) * out_of_gas_l2_dynamic + LIMIT_GTE_USED_L2_DYNAMIC - limit_used_l2_dynamic_cmp_diff) = 0;

    pol commit limit_used_l2_dynamic_cmp_diff_lo;
    pol commit limit_used_l2_dynamic_cmp_diff_hi;

    limit_used_l2_dynamic_cmp_diff_lo + limit_used_l2_dynamic_cmp_diff_hi * TWO_POW_16 - limit_used_l2_dynamic_cmp_diff = 0;

    #[LIMIT_USED_L2_DYNAMIC_RANGE_LO]
    should_run_dyn_gas_check { limit_used_l2_dynamic_cmp_diff_lo }
    in
    precomputed.sel_range_16
        { precomputed.clk };

    #[LIMIT_USED_L2_DYNAMIC_RANGE_HI]
    should_run_dyn_gas_check { limit_used_l2_dynamic_cmp_diff_hi }
    in
    precomputed.sel_range_16
        { precomputed.clk };

    // Check da dynamic gas

    pol DA_GAS_USED_AFTER_DYNAMIC = prev_da_gas_used + da_base_gas + da_dynamic_gas;
    // Assumes both da_gas_limit and DA_GAS_USED_AFTER_DYNAMIC are 32 bit
    pol LIMIT_GTE_USED_DA_DYNAMIC = da_gas_limit - DA_GAS_USED_AFTER_DYNAMIC;
    pol LIMIT_LT_USED_DA_DYNAMIC =  DA_GAS_USED_AFTER_DYNAMIC - da_gas_limit - 1;
    pol commit limit_used_da_dynamic_cmp_diff;
    should_run_dyn_gas_check * ((LIMIT_LT_USED_DA_DYNAMIC - LIMIT_GTE_USED_DA_DYNAMIC) * out_of_gas_da_dynamic + LIMIT_GTE_USED_DA_DYNAMIC - limit_used_da_dynamic_cmp_diff) = 0;

    pol commit limit_used_da_dynamic_cmp_diff_lo;
    pol commit limit_used_da_dynamic_cmp_diff_hi;

    limit_used_da_dynamic_cmp_diff_lo + limit_used_da_dynamic_cmp_diff_hi * TWO_POW_16 - limit_used_da_dynamic_cmp_diff = 0;

    #[LIMIT_USED_DA_DYNAMIC_RANGE_LO]
    should_run_dyn_gas_check { limit_used_da_dynamic_cmp_diff_lo }
    in
    precomputed.sel_range_16
        { precomputed.clk };

    #[LIMIT_USED_DA_DYNAMIC_RANGE_HI]
    should_run_dyn_gas_check { limit_used_da_dynamic_cmp_diff_hi }
    in
    precomputed.sel_range_16
        { precomputed.clk };


    // ==== GAS USED CONSTRAINING ====
    // Safe since they are mutually exclusive
    pol OUT_OF_GAS = out_of_gas_base + out_of_gas_dynamic;
    pol PREV_GAS_PLUS_USAGE_L2 = prev_l2_gas_used + l2_base_gas + l2_dynamic_gas;
    pol PREV_GAS_PLUS_USAGE_DA = prev_da_gas_used + da_base_gas + da_dynamic_gas;

    (l2_gas_limit - PREV_GAS_PLUS_USAGE_L2) * OUT_OF_GAS + PREV_GAS_PLUS_USAGE_L2 - l2_gas_used = 0;
    (da_gas_limit - PREV_GAS_PLUS_USAGE_DA) * OUT_OF_GAS + PREV_GAS_PLUS_USAGE_DA - da_gas_used = 0;
