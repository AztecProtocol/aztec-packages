include "alu.pil";
include "range_check.pil";
include "bitwise.pil";
include "memory.pil";
include "keccakf1600.pil";
include "precomputed.pil";
include "sha256.pil";
include "ecc_mem.pil";
include "poseidon2_mem.pil";
include "scalar_mul.pil";
include "to_radix.pil";
include "ff_gt.pil";
include "gt.pil";
include "context.pil";
include "context_stack.pil";
include "public_inputs.pil";

include "data_copy.pil";
include "internal_call_stack.pil";

include "execution/discard.pil";
include "execution/addressing.pil";
include "execution/registers.pil";
include "execution/gas.pil";

include "trees/merkle_check.pil";
include "trees/nullifier_check.pil";
include "trees/public_data_check.pil";
include "trees/written_public_data_slots_tree_check.pil";
include "trees/l1_to_l2_message_tree_check.pil";

include "bytecode/address_derivation.pil";
include "bytecode/bc_decomposition.pil";
include "bytecode/bc_hashing.pil";
include "bytecode/bc_retrieval.pil";
include "bytecode/instr_fetching.pil";
include "bytecode/class_id_derivation.pil";
include "bytecode/update_check.pil";

include "opcodes/get_env_var.pil";
include "opcodes/get_contract_instance.pil";
include "opcodes/internal_call.pil";
include "opcodes/external_call.pil";
include "opcodes/sload.pil";
include "opcodes/sstore.pil";
include "opcodes/notehash_exists.pil";
include "opcodes/emit_notehash.pil";
include "opcodes/l1_to_l2_message_exists.pil";
include "opcodes/nullifier_exists.pil";

namespace execution;

// If `sel` is 0, then the Execution relation should pass.
#[skippable_if]
sel = 0;

pol commit sel; // subtrace selector
pol commit last; // last row selector
sel * (1 - sel) = 0;
last * (1 - last) = 0;

// Selector indicating enqueued call boundaries.
// Used by TX trace for lookups to dispatch and retrieve results/reverted.
pol commit enqueued_call_start;
pol commit enqueued_call_end;

// (enqueued_call_start == 1) <==> (is first active execution row)
//                               or (is first active row after an enqueued call ends)
// In other words, if this is the very first (inactive) row, or an enqueued call end,
// and the next row is active, that next row is an enqueued call start.
#[ENQUEUED_CALL_START]
enqueued_call_start' = (precomputed.first_row + enqueued_call_end) * sel';

// (enqueued_call_end == 1) <==> (is exit from top-level context)
#[ENQUEUED_CALL_END]
enqueued_call_end = sel_exit_call * (1 - has_parent_ctx);

// First row after *CALL, or first row of enqueued call
// This is the only row where bytecode retrieval is active.
pol commit sel_first_row_in_context;
sel_first_row_in_context' = sel_enter_call + enqueued_call_start';

/**************************************************************************************************
 *  Setup (some general constraints)
 **************************************************************************************************/

// If sel = 0, and it's not the first row, then all following rows should have sel = 0.
#[TRACE_CONTINUITY]
(1 - sel) * (1 - precomputed.first_row) * sel' = 0;
#[LAST_IS_LAST]
last = sel * (1 - sel');

/**************************************************************************************************
 *  Temporality group 1: Bytecode retrieval (unconditional)
 **************************************************************************************************/

pol commit bytecode_id;
pol commit sel_bytecode_retrieval_failure;

// TODO(dbanks12): since this lookup is no longer active for all rows,
// we likely need to constrain that bytecode_id does not change during a context,
// or we need to otherwise consider the implications of this.
#[BYTECODE_RETRIEVAL_RESULT]
sel_first_row_in_context {
    bytecode_id,
    contract_address,
    prev_nullifier_tree_root, // from context.pil
    prev_public_data_tree_root, // from context.pil
    sel_bytecode_retrieval_failure
} in bc_retrieval.sel {
    bc_retrieval.bytecode_id,
    bc_retrieval.address,
    bc_retrieval.nullifier_tree_root,
    bc_retrieval.public_data_tree_root,
    bc_retrieval.error
};

pol commit sel_bytecode_retrieval_success;
// If sel = 0, we want sel_bytecode_retrieval_success = 0. We shouldn't be using it.
sel_bytecode_retrieval_success = sel * (1 - sel_bytecode_retrieval_failure);

/**************************************************************************************************
 *  Temporality group 2: Instruction fetching
 **************************************************************************************************/

pol commit instr_length; // Need this for shift col on next_pc
pol commit sel_instruction_fetching_failure;

pol commit ex_opcode;
pol commit indirect;
pol commit op[7];  // operands

// We now proceed to fetch the instruction.
// The handling is slightly subtle: suppose fetching fails, then in simulation/tracegen
// we will NOT have the partial information of the instruction, and to be honest we
// ideally want to leave it unconstrained. This is why we do 2 lookups instead of 1.
// TODO: We can consider optimizing this later, but it is probably the cleanest right now.

#[INSTRUCTION_FETCHING_RESULT]
sel_bytecode_retrieval_success {
    pc, bytecode_id, sel_instruction_fetching_failure
} in instr_fetching.sel {
    instr_fetching.pc, instr_fetching.bytecode_id, instr_fetching.sel_parsing_err
};

pol commit sel_instruction_fetching_success;
// If sel = 0, we want sel_instruction_fetching_success = 0. We shouldn't be using it.
sel_instruction_fetching_success = sel * (1 - sel_instruction_fetching_failure);

#[INSTRUCTION_FETCHING_BODY]
sel_instruction_fetching_success {
    pc, bytecode_id, ex_opcode, instr_length,
    indirect, op[0], op[1], op[2], op[3], op[4], op[5], op[6]
} in instr_fetching.sel {
    instr_fetching.pc,
    instr_fetching.bytecode_id,
    instr_fetching.exec_opcode,
    instr_fetching.instr_size,
    instr_fetching.indirect,
    instr_fetching.op1,
    instr_fetching.op2,
    instr_fetching.op3,
    instr_fetching.op4,
    instr_fetching.op5,
    instr_fetching.op6,
    instr_fetching.op7
};

/**************************************************************************************************
 *  Temporality group 2
 *  - Mapping from wire instruction to execution instruction
 *  - Addressing
 **************************************************************************************************/

// TODO(fcarreiro): Ideally we would use this one as selector for readability, but it's not supported yet.
// pol SEL_SHOULD_READ_EXEC_SPEC = sel_instruction_fetching_success;
#[EXEC_SPEC_READ]
sel_instruction_fetching_success {
    ex_opcode,
    // in gas.pil.
    opcode_gas,
    base_da_gas,
    dynamic_l2_gas,
    dynamic_da_gas,
    // addressing
    sel_op_is_address[0], sel_op_is_address[1], sel_op_is_address[2],  sel_op_is_address[3],
    sel_op_is_address[4], sel_op_is_address[5], sel_op_is_address[6],
    // subtraces, mem ops, etc (defined later in this file)
    subtrace_id, subtrace_operation_id, dyn_gas_id,
    // register information
    sel_mem_op_reg[0], sel_mem_op_reg[1], sel_mem_op_reg[2], sel_mem_op_reg[3], sel_mem_op_reg[4], sel_mem_op_reg[5], sel_mem_op_reg[6],
    rw_reg[0], rw_reg[1], rw_reg[2], rw_reg[3], rw_reg[4], rw_reg[5], rw_reg[6],
    sel_tag_check_reg[0], sel_tag_check_reg[1], sel_tag_check_reg[2], sel_tag_check_reg[3], sel_tag_check_reg[4], sel_tag_check_reg[5], sel_tag_check_reg[6],
    expected_tag_reg[0], expected_tag_reg[1], expected_tag_reg[2], expected_tag_reg[3], expected_tag_reg[4], expected_tag_reg[5], expected_tag_reg[6]
} in
precomputed.sel_exec_spec {
    // execution opcode
    precomputed.clk,
    // gas
    precomputed.exec_opcode_opcode_gas,
    precomputed.exec_opcode_base_da_gas,
    precomputed.exec_opcode_dynamic_l2_gas,
    precomputed.exec_opcode_dynamic_da_gas,
    // addressing
    precomputed.sel_op_is_address[0],
    precomputed.sel_op_is_address[1],
    precomputed.sel_op_is_address[2],
    precomputed.sel_op_is_address[3],
    precomputed.sel_op_is_address[4],
    precomputed.sel_op_is_address[5],
    precomputed.sel_op_is_address[6],
    // decomposed selectors
    precomputed.subtrace_id,
    precomputed.subtrace_operation_id,
    precomputed.dyn_gas_id,
    // whether we should perform a memory operation on the register
    precomputed.sel_mem_op_reg[0],
    precomputed.sel_mem_op_reg[1],
    precomputed.sel_mem_op_reg[2],
    precomputed.sel_mem_op_reg[3],
    precomputed.sel_mem_op_reg[4],
    precomputed.sel_mem_op_reg[5],
    precomputed.sel_mem_op_reg[6],
    // read / write per register
    precomputed.rw_reg[0],
    precomputed.rw_reg[1],
    precomputed.rw_reg[2],
    precomputed.rw_reg[3],
    precomputed.rw_reg[4],
    precomputed.rw_reg[5],
    precomputed.rw_reg[6],
    // whether we should perform a tag check on the register
    precomputed.sel_tag_check_reg[0],
    precomputed.sel_tag_check_reg[1],
    precomputed.sel_tag_check_reg[2],
    precomputed.sel_tag_check_reg[3],
    precomputed.sel_tag_check_reg[4],
    precomputed.sel_tag_check_reg[5],
    precomputed.sel_tag_check_reg[6],
    // expected register tag to perform the check against
    precomputed.expected_tag_reg[0],
    precomputed.expected_tag_reg[1],
    precomputed.expected_tag_reg[2],
    precomputed.expected_tag_reg[3],
    precomputed.expected_tag_reg[4],
    precomputed.expected_tag_reg[5],
    precomputed.expected_tag_reg[6]
};

//////// ADDRESSING ////////

// This is an "input" to addressing.pil.
pol SEL_SHOULD_RESOLVE_ADDRESS = /*should do instruction fetching*/sel_bytecode_retrieval_success * sel_instruction_fetching_success;

// resolved operands
pol commit rop[7];

// NOTE: Constraints on the resolved operands are in addressing.pil.
// The "output we want is" sel_addressing_error from addressing.pil.

/**************************************************************************************************
 *  Temporality group 3: Register read.
 **************************************************************************************************/

pol commit sel_should_read_registers;
sel_should_read_registers = SEL_SHOULD_RESOLVE_ADDRESS * (1 - sel_addressing_error);

// Registers
pol commit register[7];
// Memory Acccesses
pol commit sel_mem_op_reg[7];
// Read / Write selectors
pol commit rw_reg[7];
// Memory Tag
pol commit mem_tag_reg[7];
// Whether we should perform a tag check on the register
pol commit sel_tag_check_reg[7];
// Expected tag
pol commit expected_tag_reg[7];

// NOTE: Constraints on the registers are in execution_registers.pil.
// The "output we want is" sel_register_read_error from execution_registers.pil.

/**************************************************************************************************
 *  Temporality group 4: Gas.
 **************************************************************************************************/

pol commit sel_should_check_gas;
sel_should_check_gas = sel_should_read_registers * (1 - sel_register_read_error);

// NOTE: Gas is constrained in gas.pil.
// The "output we want is" sel_out_of_gas from gas.pil.

// For bitwise, the tag determines the dynamic_l2_gas_factor
#[DYN_L2_FACTOR_BITWISE]
sel_gas_bitwise { mem_tag_reg[0], dynamic_l2_gas_factor }
in
precomputed.sel_tag_parameters { precomputed.clk, precomputed.tag_byte_length };

// We can probably unconditionally write to the written_public_data_slots_tree here
// to avoid writing later in opcode execution, since the root would be reverted if it errors before
// the opcode execution. However, this feels like an early optimization
// since the simulator would need to write at the gas step which is a bit weird.
#[CHECK_WRITTEN_STORAGE_SLOT]
sel_gas_sstore {
    contract_address,
    register[1], // slot
    dynamic_da_gas_factor,
    prev_written_public_data_slots_tree_root
} in written_public_data_slots_tree_check.sel {
    written_public_data_slots_tree_check.address,
    written_public_data_slots_tree_check.slot,
    written_public_data_slots_tree_check.leaf_not_exists,
    written_public_data_slots_tree_check.root
};

#[SSTORE_DYN_L2_GAS_IS_ZERO]
sel_execute_sstore * dynamic_l2_gas_factor = 0;

/**************************************************************************************************
 *  Temporality group 5: Opcode execution
 **************************************************************************************************/

pol commit sel_should_execute_opcode;
sel_should_execute_opcode = sel_should_check_gas * (1 - sel_out_of_gas);

pol commit sel_opcode_error;
sel_opcode_error * (1 - sel_opcode_error) = 0;

// Decomposed selectors (from precomputed)
pol commit subtrace_id;
pol commit subtrace_operation_id;
pol commit dyn_gas_id;

// Subtrace Dispatch selectors.
// Each of these selectors takes into account both which opcode we are considering executing
// and whether there was any error before the actual execution step. Therefore, the
// selector can be used to gate the execution of the opcode/dispatching logic (which comes after gas, etc).
pol commit sel_execute_alu;
pol commit sel_execute_bitwise;
pol commit sel_execute_cast;
pol commit sel_execute_set;
pol commit sel_execute_to_radix;
pol commit sel_execute_poseidon2_perm;
pol commit sel_execute_ecc_add;
pol commit sel_execute_execution;
pol commit sel_execute_data_copy;
pol commit sel_execute_keccakf1600;
pol commit sel_execute_get_contract_instance;
sel_execute_alu * (1 - sel_execute_alu) = 0;
sel_execute_bitwise * (1 - sel_execute_bitwise) = 0;
sel_execute_cast * (1 - sel_execute_cast) = 0;
sel_execute_set * (1 - sel_execute_set) = 0;
sel_execute_to_radix * (1 - sel_execute_to_radix) = 0;
sel_execute_poseidon2_perm * (1 - sel_execute_poseidon2_perm) = 0;
sel_execute_ecc_add * (1 - sel_execute_ecc_add) = 0;
sel_execute_execution * (1 - sel_execute_execution) = 0;
sel_execute_data_copy * (1 - sel_execute_data_copy) = 0;
sel_execute_keccakf1600 * (1 - sel_execute_keccakf1600) = 0;
sel_execute_get_contract_instance * (1 - sel_execute_get_contract_instance) = 0;

#[SUBTRACE_ID_DECOMPOSITION]
sel_execute_execution * constants.AVM_SUBTRACE_ID_EXECUTION +
sel_execute_alu * constants.AVM_SUBTRACE_ID_ALU +
sel_execute_cast * constants.AVM_SUBTRACE_ID_CAST +
sel_execute_set * constants.AVM_SUBTRACE_ID_SET +
sel_execute_bitwise * constants.AVM_SUBTRACE_ID_BITWISE +
sel_execute_poseidon2_perm * constants.AVM_SUBTRACE_ID_POSEIDON_PERM +
sel_execute_to_radix * constants.AVM_SUBTRACE_ID_TO_RADIX +
sel_execute_ecc_add * constants.AVM_SUBTRACE_ID_ECC +
sel_execute_keccakf1600 * constants.AVM_SUBTRACE_ID_KECCAKF1600 +
sel_execute_data_copy * constants.AVM_SUBTRACE_ID_DATA_COPY +
sel_execute_get_contract_instance * constants.AVM_SUBTRACE_ID_GETCONTRACTINSTANCE
// We force the selectors to be 0 if we are not executing an opcode.
= sel_should_execute_opcode * subtrace_id;

// Embedded execution opcode selectors.
// Each of these selectors takes into account both which opcode we are considering executing
// and whether there was any error before the actual execution step. Therefore, the
// selector can be used to gate the execution of the opcode logic (which comes after gas, etc).
pol commit sel_execute_get_env_var;
pol commit sel_execute_mov;
pol commit sel_execute_jump;
pol commit sel_execute_jumpi;
pol commit sel_execute_call;
pol commit sel_execute_static_call;
pol commit sel_execute_internal_call;
pol commit sel_execute_internal_return;
pol commit sel_execute_return;
pol commit sel_execute_revert;
pol commit sel_execute_success_copy;
pol commit sel_execute_returndata_size;
pol commit sel_execute_debug_log; // unused but we are forced to have it
pol commit sel_execute_sload;
pol commit sel_execute_sstore;
pol commit sel_execute_notehash_exists;
pol commit sel_execute_emit_notehash;
pol commit sel_execute_l1_to_l2_message_exists;
pol commit sel_execute_nullifier_exists;
sel_execute_get_env_var * (1 - sel_execute_get_env_var) = 0;
sel_execute_mov * (1 - sel_execute_mov) = 0;
sel_execute_jump * (1 - sel_execute_jump) = 0;
sel_execute_jumpi * (1 - sel_execute_jumpi) = 0;
sel_execute_call * (1 - sel_execute_call) = 0;
sel_execute_static_call * (1 - sel_execute_static_call) = 0;
sel_execute_internal_call * (1 - sel_execute_internal_call) = 0;
sel_execute_internal_return * (1 - sel_execute_internal_return) = 0;
sel_execute_return * (1 - sel_execute_return) = 0;
sel_execute_revert * (1 - sel_execute_revert) = 0;
sel_execute_success_copy * (1 - sel_execute_success_copy) = 0;
sel_execute_returndata_size * (1 - sel_execute_returndata_size) = 0;
sel_execute_debug_log * (1 - sel_execute_debug_log) = 0;
sel_execute_sload * (1 - sel_execute_sload) = 0;
sel_execute_sstore * (1 - sel_execute_sstore) = 0;
sel_execute_notehash_exists * (1 - sel_execute_notehash_exists) = 0;
sel_execute_emit_notehash * (1 - sel_execute_emit_notehash) = 0;
sel_execute_l1_to_l2_message_exists * (1 - sel_execute_l1_to_l2_message_exists) = 0;
sel_execute_nullifier_exists * (1 - sel_execute_nullifier_exists) = 0;

#[EXEC_OP_ID_DECOMPOSITION]
sel_execute_get_env_var * constants.AVM_EXEC_OP_ID_GETENVVAR +
sel_execute_mov * constants.AVM_EXEC_OP_ID_MOV +
sel_execute_jump * constants.AVM_EXEC_OP_ID_JUMP +
sel_execute_jumpi * constants.AVM_EXEC_OP_ID_JUMPI +
sel_execute_call * constants.AVM_EXEC_OP_ID_CALL +
sel_execute_static_call * constants.AVM_EXEC_OP_ID_STATICCALL +
sel_execute_internal_call * constants.AVM_EXEC_OP_ID_INTERNALCALL +
sel_execute_internal_return * constants.AVM_EXEC_OP_ID_INTERNALRETURN +
sel_execute_return * constants.AVM_EXEC_OP_ID_RETURN +
sel_execute_revert * constants.AVM_EXEC_OP_ID_REVERT +
sel_execute_success_copy * constants.AVM_EXEC_OP_ID_SUCCESSCOPY +
sel_execute_returndata_size * constants.AVM_EXEC_OP_ID_RETURNDATASIZE +
sel_execute_debug_log * constants.AVM_EXEC_OP_ID_DEBUGLOG +
sel_execute_sload * constants.AVM_EXEC_OP_ID_SLOAD +
sel_execute_sstore * constants.AVM_EXEC_OP_ID_SSTORE +
sel_execute_notehash_exists * constants.AVM_EXEC_OP_ID_NOTEHASH_EXISTS +
sel_execute_emit_notehash * constants.AVM_EXEC_OP_ID_EMIT_NOTEHASH +
sel_execute_l1_to_l2_message_exists * constants.AVM_EXEC_OP_ID_L1_TO_L2_MESSAGE_EXISTS +
sel_execute_nullifier_exists * constants.AVM_EXEC_OP_ID_NULLIFIEREXISTS
// We force the selectors to be 0 if we are not executing an opcode
// or when we are not in the execution subtrace.
= sel_should_execute_opcode * sel_execute_execution * subtrace_operation_id;

// Dynamic gas opcode selectors.
// Each of these selectors takes into account both which opcode we are considering executing
// and whether there was any error before the actual gas step. Therefore, the
// selector can be used to gate the execution of the (dynamic) gas logic.
pol commit sel_gas_calldata_copy;
pol commit sel_gas_returndata_copy;
pol commit sel_gas_to_radix;
pol commit sel_gas_bitwise;
pol commit sel_gas_emit_unencrypted_log;
pol commit sel_gas_sstore;
sel_gas_calldata_copy * (1 - sel_gas_calldata_copy) = 0;
sel_gas_returndata_copy * (1 - sel_gas_returndata_copy) = 0;
sel_gas_to_radix * (1 - sel_gas_to_radix) = 0;
sel_gas_bitwise * (1 - sel_gas_bitwise) = 0;
sel_gas_emit_unencrypted_log * (1 - sel_gas_emit_unencrypted_log) = 0;
sel_gas_sstore * (1 - sel_gas_sstore) = 0;

#[DYN_GAS_ID_DECOMPOSITION]
sel_gas_calldata_copy * constants.AVM_DYN_GAS_ID_CALLDATACOPY +
sel_gas_returndata_copy * constants.AVM_DYN_GAS_ID_RETURNDATACOPY +
sel_gas_to_radix * constants.AVM_DYN_GAS_ID_TORADIX +
sel_gas_bitwise * constants.AVM_DYN_GAS_ID_BITWISE +
sel_gas_emit_unencrypted_log * constants.AVM_DYN_GAS_ID_EMITUNENCRYPTEDLOG +
sel_gas_sstore * constants.AVM_DYN_GAS_ID_SSTORE
// We force the selectors to be 0 if we failed before gas checks
// or when we are not in the execution subtrace.
= sel_should_check_gas * sel * dyn_gas_id;

// Whether the opcode logic failed.
pol commit sel_opcode_failure;
sel_opcode_failure * (1 - sel_opcode_failure) = 0;

/**************************************************************************************************
 *  Dispatch permutations to the gadget subtraces
 **************************************************************************************************/

#[DISPATCH_KECCAKF1600]
sel_execute_keccakf1600 { precomputed.clk, rop[0], rop[1], context_id, sel_opcode_error }
is
keccakf1600.start { keccakf1600.clk, keccakf1600.dst_addr, keccakf1600.src_addr, keccakf1600.space_id, keccakf1600.error };

// Note: GetContractInstance performs its memory writes internally, so it doesn't have any "outputs" back
// to execution except its "error".
#[DISPATCH_GET_CONTRACT_INSTANCE]
sel_execute_get_contract_instance {
    // inputs
    precomputed.clk,
    /*contract_address=*/ register[0],
    /*dst_offset=*/ rop[1],
    /*member_enum=*/ rop[2],
    /*space_id=*/ context_id,
    /*nullifier_tree_root=*/ nullifier_tree_root,
    /*public_data_tree_root=*/ public_data_tree_root,
    // outputs/errors
    sel_opcode_error
} is get_contract_instance.sel {
    // inputs
    get_contract_instance.clk,
    get_contract_instance.contract_address,
    get_contract_instance.dst_offset,
    get_contract_instance.member_enum,
    get_contract_instance.space_id,
    get_contract_instance.nullifier_tree_root,
    get_contract_instance.public_data_tree_root,
    // outputs/errors
    get_contract_instance.sel_error
};

/**************************************************************************************************
 *  Opcode specific constraints
 **************************************************************************************************/
 // todo(ilyas): constraints for call/ret/revert are currently in context.pil. Consider moving some
 // of them here for greater clarity of execution trace opcodes.

#[PC_NEXT_ROW_INT_CALL_JUMP]
NOT_LAST_EXEC * (sel_execute_internal_call + sel_execute_jump) * (pc' - rop[0]) = 0;

// For JUMPI opcode, the conditional value is U1 and stored in register[0].
#[PC_NEXT_ROW_JUMPI]
NOT_LAST_EXEC * sel_execute_jumpi * (register[0] * (rop[1] - next_pc) + next_pc - pc') = 0;

#[MOV_SAME_VALUE]
sel_execute_mov * (register[0] - register[1]) = 0;
#[MOV_SAME_TAG]
sel_execute_mov * (mem_tag_reg[0] - mem_tag_reg[1]) = 0;

#[SUCCESS_COPY_WRITE_REG]
sel_execute_success_copy * (register[0] - last_child_success) = 0; // Copy success flag to register[0]
#[SUCCESS_COPY_U1_TAG]
sel_execute_success_copy * (mem_tag_reg[0] - constants.MEM_TAG_U1) = 0; // Write Tag must be U1

#[RETURNDATA_SIZE_WRITE_REG]
sel_execute_returndata_size * (register[0] - last_child_returndata_size) = 0; // Last return data size to register[0]
#[RETURNDATA_SIZE_U32_TAG]
sel_execute_returndata_size * (mem_tag_reg[0] - constants.MEM_TAG_U32) = 0; // Write Tag must be U32

/**************************************************************************************************
 *  Temporality group 6: Register write.
 **************************************************************************************************/

pol commit sel_should_write_registers;
sel_should_write_registers = sel_should_execute_opcode * (1 - sel_opcode_error);

// NOTE: Constraints on the registers are in execution_registers.pil.
// There is no output because this group cannot fail.

/**************************************************************************************************
 *  Error collection
 **************************************************************************************************/

// sel_error is 1 iff any kind of error happens at the execution level.
pol commit sel_error;
// Observe that the errors are mutually exclusive.
sel_error = sel_bytecode_retrieval_failure + sel_instruction_fetching_failure + sel_addressing_error + sel_register_read_error + sel_out_of_gas + sel_opcode_error;
