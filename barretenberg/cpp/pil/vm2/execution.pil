include "alu.pil";
include "addressing.pil";
include "range_check.pil";
include "bitwise.pil";
include "memory.pil";
include "keccakf1600.pil";
include "precomputed.pil";
include "sha256.pil";
include "ecc.pil";
include "poseidon2_hash.pil";
include "poseidon2_perm.pil";
include "scalar_mul.pil";
include "to_radix.pil";
include "ff_gt.pil";
include "context.pil";
include "context_stack.pil";
include "execution_discard.pil";
include "public_inputs.pil";
include "gas.pil";
include "data_copy.pil";
include "internal_call_stack.pil";

include "trees/merkle_check.pil";
include "trees/nullifier_check.pil";
include "trees/public_data_check.pil";

include "bytecode/address_derivation.pil";
include "bytecode/bc_decomposition.pil";
include "bytecode/bc_hashing.pil";
include "bytecode/bc_retrieval.pil";
include "bytecode/instr_fetching.pil";
include "bytecode/class_id_derivation.pil";
include "bytecode/update_check.pil";

include "opcodes/get_env_var.pil";
include "opcodes/internal_call.pil";
include "opcodes/external_call.pil";

namespace execution;

// If `sel` is 0, then the Execution relation should pass.
#[skippable_if]
sel = 0;

pol commit sel; // subtrace selector
pol commit last; // last row selector
sel * (1 - sel) = 0;
last * (1 - last) = 0;

// Selector indicating enqueued call boundaries.
// Used by TX trace for lookups to dispatch and retrieve results/reverted.
pol commit enqueued_call_start;
pol commit enqueued_call_end;

// (enqueued_call_start == 1) <==> (is first active execution row)
//                               or (is first active row after an enqueued call ends)
// In other words, if this is the very first (inactive) row, or an enqueued call end,
// and the next row is active, that next row is an enqueued call start.
#[ENQUEUED_CALL_START]
enqueued_call_start' = (precomputed.first_row + enqueued_call_end) * sel';

// (enqueued_call_end == 1) <==> (is exit from top-level context)
#[ENQUEUED_CALL_END]
enqueued_call_end = sel_exit_call * (1 - has_parent_ctx);


/**************************************************************************************************
 *  Setup (some general constraints)
 **************************************************************************************************/

// If sel = 0, and it's not the first row, then all following rows should have sel = 0.
#[TRACE_CONTINUITY]
(1 - sel) * (1 - precomputed.first_row) * sel' = 0;
#[LAST_IS_LAST]
last = sel * (1 - sel');

/**************************************************************************************************
 *  Temporality group 1: Bytecode retrieval (unconditional)
 **************************************************************************************************/

pol commit bytecode_id;
pol commit sel_bytecode_retrieval_failure;

#[BYTECODE_RETRIEVAL_RESULT]
sel {
    bytecode_id, contract_address, sel_bytecode_retrieval_failure
} in bc_retrieval.sel {
    bc_retrieval.bytecode_id, bc_retrieval.address, bc_retrieval.error
};

pol commit sel_bytecode_retrieval_success;
sel * (sel_bytecode_retrieval_success - (1 - sel_bytecode_retrieval_failure)) = 0;

/**************************************************************************************************
 *  Temporality group 2: Instruction fetching
 **************************************************************************************************/

pol commit instr_length; // Need this for shift col on next_pc
pol commit sel_instruction_fetching_failure;

pol commit ex_opcode;
pol commit indirect;
pol commit op[7];  // operands

// We now proceed to fetch the instruction.
// The handling is slightly subtle: suppose fetching fails, then in simulation/tracegen
// we will NOT have the partial information of the instruction, and to be honest we
// ideally want to leave it unconstrained. This is why we do 2 lookups instead of 1.
// TODO: We can consider optimizing this later, but it is probably the cleanest right now.

#[INSTRUCTION_FETCHING_RESULT]
sel_bytecode_retrieval_success {
    pc, bytecode_id, sel_instruction_fetching_failure
} in instr_fetching.sel {
    instr_fetching.pc, instr_fetching.bytecode_id, instr_fetching.sel_parsing_err
};

pol commit sel_instruction_fetching_success;
sel * (sel_instruction_fetching_success - (1 - sel_instruction_fetching_failure)) = 0;

#[INSTRUCTION_FETCHING_BODY]
sel_instruction_fetching_success {
    pc, bytecode_id, ex_opcode, instr_length,
    indirect, op[0], op[1], op[2], op[3], op[4], op[5], op[6]
} in instr_fetching.sel {
    instr_fetching.pc,
    instr_fetching.bytecode_id,
    instr_fetching.exec_opcode,
    instr_fetching.instr_size,
    instr_fetching.indirect,
    instr_fetching.op1,
    instr_fetching.op2,
    instr_fetching.op3,
    instr_fetching.op4,
    instr_fetching.op5,
    instr_fetching.op6,
    instr_fetching.op7
};

/**************************************************************************************************
 *  Temporality group 2
 *  - Mapping from wire instruction to execution instruction
 *  - Gas
 **************************************************************************************************/

// TODO(fcarreiro): Ideally we would use this one as selector for readability, but it's not supported yet.
// pol SEL_SHOULD_READ_EXEC_SPEC = sel_instruction_fetching_success;
#[EXEC_SPEC_READ]
sel_instruction_fetching_success {
    ex_opcode,
    // in gas.pil.
    opcode_gas,
    base_da_gas,
    dynamic_l2_gas,
    dynamic_da_gas,
    // addressing
    sel_op_is_address[0], sel_op_is_address[1], sel_op_is_address[2],  sel_op_is_address[3],
    sel_op_is_address[4], sel_op_is_address[5], sel_op_is_address[6],
    // subtraces, mem ops, etc (defined later in this file)
    subtrace_operation_id, sel_execution, sel_alu, sel_bitwise, sel_poseidon2_perm,
    sel_to_radix, sel_ecc_add, sel_keccakf1600,
    mem_op[0], mem_op[1], mem_op[2], mem_op[3], mem_op[4], mem_op[5], mem_op[6],
    rw[0], rw[1], rw[2], rw[3], rw[4], rw[5], rw[6]
} in
precomputed.sel_exec_spec {
    // execution opcode
    precomputed.clk,
    // gas
    precomputed.exec_opcode_opcode_gas,
    precomputed.exec_opcode_base_da_gas,
    precomputed.exec_opcode_dynamic_l2_gas,
    precomputed.exec_opcode_dynamic_da_gas,
    // addressing
    precomputed.sel_op_is_address[0],
    precomputed.sel_op_is_address[1],
    precomputed.sel_op_is_address[2],
    precomputed.sel_op_is_address[3],
    precomputed.sel_op_is_address[4],
    precomputed.sel_op_is_address[5],
    precomputed.sel_op_is_address[6],
    // subtraces
    precomputed.subtrace_operation_id,
    precomputed.sel_dispatch_execution,
    precomputed.sel_dispatch_alu,
    precomputed.sel_dispatch_bitwise,
    precomputed.sel_dispatch_poseidon_perm,
    precomputed.sel_dispatch_to_radix,
    precomputed.sel_dispatch_ecc,
    precomputed.sel_dispatch_keccakf1600,
    // memory operations per register
    precomputed.mem_op_reg[0],
    precomputed.mem_op_reg[1],
    precomputed.mem_op_reg[2],
    precomputed.mem_op_reg[3],
    precomputed.mem_op_reg[4],
    precomputed.mem_op_reg[5],
    precomputed.mem_op_reg[6],
    // read / write per register
    precomputed.rw[0],
    precomputed.rw[1],
    precomputed.rw[2],
    precomputed.rw[3],
    precomputed.rw[4],
    precomputed.rw[5],
    precomputed.rw[6]
};

//////// BASE GAS ////////

// Ideally this could be an alias, but I'm adding a column for readability.
pol commit sel_should_check_gas;
sel * (sel_should_check_gas - sel_instruction_fetching_success) = 0;

// NOTE: Gas is constrained in gas.pil.
// The "output we want is" out_of_gas_base from gas.pil.

/**************************************************************************************************
 *  Temporality group 3: Address resolution
 **************************************************************************************************/

pol commit sel_should_resolve_address;
// This assumes mutual exclusivity of the failure selectors.
sel * (sel_should_resolve_address - (1 - out_of_gas_base - sel_instruction_fetching_failure)) = 0;

// resolved operands
pol commit rop[7];

// NOTE: Constraints on the resolved operands are in addressing.pil.
// The "output we want is" sel_addressing_error from addressing.pil.

/**************************************************************************************************
 *  Temporality group N: Registers + Dispatch opcode
 **************************************************************************************************/

// TODO: gate this group.

// Registers
pol commit register[7];
// Memory Acccesses
pol commit mem_op[7];
// Memory Tag
pol commit mem_tag[7];
// Read / Write selectors
pol commit rw[7];

/**************************************************************************************************
 *  Temporality group N: Dispatch opcode
 **************************************************************************************************/

// TODO: gate this group with some error flag from the previous group.

pol commit opcode_error;
opcode_error * (1 - opcode_error) = 0;

// Subtrace operation id
pol commit subtrace_operation_id;

// Subtrace Dispatch selectors
// These boolean selectors are constrained via the precomputed Execution Instruction Spec Table
pol commit sel_alu;
pol commit sel_bitwise;
pol commit sel_to_radix;
pol commit sel_poseidon2_perm;
pol commit sel_ecc_add;
pol commit sel_data_copy;
pol commit sel_execution;

// Embedded execution opcode selectors
pol commit sel_get_env_var;
pol commit sel_set;
pol commit sel_mov;
pol commit sel_jump;
pol commit sel_jumpi;
pol commit sel_call;
pol commit sel_static_call;
pol commit sel_internal_call;
pol commit sel_internal_return;
pol commit sel_return;
pol commit sel_revert;
pol commit sel_success_copy;

#[EXEC_OP_ID_DECOMPOSITION]
sel_execution * (
   sel_get_env_var * constants.AVM_EXEC_OP_ID_GETENVVAR +
   sel_set * constants.AVM_EXEC_OP_ID_SET +
   sel_mov * constants.AVM_EXEC_OP_ID_MOV +
   sel_jump * constants.AVM_EXEC_OP_ID_JUMP +
   sel_jumpi * constants.AVM_EXEC_OP_ID_JUMPI +
   sel_call * constants.AVM_EXEC_OP_ID_CALL +
   sel_static_call * constants.AVM_EXEC_OP_ID_STATICCALL +
   sel_internal_call * constants.AVM_EXEC_OP_ID_INTERNALCALL +
   sel_internal_return * constants.AVM_EXEC_OP_ID_INTERNALRETURN +
   sel_return * constants.AVM_EXEC_OP_ID_RETURN +
   sel_revert * constants.AVM_EXEC_OP_ID_REVERT +
   sel_success_copy * constants.AVM_EXEC_OP_ID_SUCCESSCOPY
   - subtrace_operation_id
) = 0;

// Boolean relations for the embedded execution opcode selectors.
sel_get_env_var * (1 - sel_get_env_var) = 0;
sel_set * (1 - sel_set) = 0;
sel_mov * (1 - sel_mov) = 0;
sel_jump * (1 - sel_jump) = 0;
sel_jumpi * (1 - sel_jumpi) = 0;
sel_call * (1 - sel_call) = 0;
sel_static_call * (1 - sel_static_call) = 0;
sel_internal_call * (1 - sel_internal_call) = 0;
sel_internal_return * (1 - sel_internal_return) = 0;
sel_return * (1 - sel_return) = 0;
sel_revert * (1 - sel_revert) = 0;
sel_success_copy * (1 - sel_success_copy) = 0;

// This is used in context.pil
pol PC_JUMP = sel_internal_call + sel_internal_return + sel_jump + sel_jumpi;
pol commit sel_keccakf1600;

/**************************************************************************************************
* Dispatch permutations to the gadget subtraces
 **************************************************************************************************/

#[DISPATCH_KECCAKF1600]
sel_keccakf1600 { precomputed.clk, rop[0], rop[1], context_id, opcode_error }
is
keccakf1600.start { keccakf1600.clk, keccakf1600.dst_addr, keccakf1600.src_addr, keccakf1600.space_id, keccakf1600.error };

/**************************************************************************************************
 *  Opcode specific constraints
 **************************************************************************************************/
#[PC_NEXT_ROW_INT_CALL_JUMP]
NOT_LAST_EXEC * (sel_internal_call + sel_jump) * (pc' - rop[0]) = 0;

// For JUMPI opcode, the conditional value is U1 and stored in register[0].
#[PC_NEXT_ROW_JUMPI]
NOT_LAST_EXEC * sel_jumpi * (register[0] * (rop[1] - next_pc) + next_pc - pc') = 0;

#[MOV_SAME_VALUE]
sel_mov * (register[0] - register[1]) = 0;
#[MOV_SAME_TAG]
sel_mov * (mem_tag[0] - mem_tag[1]) = 0;

/**************************************************************************************************
 *  Temporality group N: Dynamic gas
 **************************************************************************************************/

// TODO: gate this group. This is actually interleaved with the previous group.

/**************************************************************************************************
 *  Error collection
 **************************************************************************************************/

// sel_error is 1 iff any kind of error happens at the execution level.
pol commit sel_error;
sel_error * (1 - sel_error) = 0;

// TODO: complete.
// This implies mutual exclusivity of the failure selectors.
// sel_error = sel_gas_failure + sel_instruction_fetching_failure;

