include "alu.pil";
include "addressing.pil";
include "address_derivation.pil";
include "bc_decomposition.pil";
include "bc_hashing.pil";
include "bc_retrieval.pil";
include "instr_fetching.pil";
include "class_id_derivation.pil";
include "range_check.pil";
include "bitwise.pil";
include "merkle_check.pil";
include "precomputed.pil";
include "sha256.pil";
include "ecc.pil";
include "poseidon2_hash.pil";
include "poseidon2_perm.pil";
include "scalar_mul.pil";
include "to_radix.pil";
include "ff_gt.pil";
include "context.pil;"
include "context_stack.pil";

namespace execution;

pol commit sel; // subtrace selector

pol commit ex_opcode;
pol commit indirect;
// operands
pol commit op1, op2, op3, op4;
// resolved operands
pol commit rop1, rop2, rop3, rop4;

pol commit bytecode_id;
pol commit clk;
pol commit last;

// Selector constraints
sel * (1 - sel) = 0;
last * (1 - last) = 0;

// If the current row is an execution row, then either
// the next row is an execution row, or the current row is marked as the last row.
// sel => (sel' v last) = 1              iff
// ¬sel v (sel' v last) = 1              iff
// ¬(¬sel v (sel' v last)) = 0           iff
// sel ^ (¬sel' ^ ¬last) = 0             iff
// sel * (1 - sel') * (1 - last) = 0
#[TRACE_CONTINUITY_1]
sel * (1 - sel') * (1 - last) = 0;
// If the current row is not an execution row, then there are no more execution rows after that.
// (not enforced for the first row)
#[TRACE_CONTINUITY_2]
(1 - precomputed.first_row) * (1 - sel) * sel' = 0;
// If the current row is the last row, then the next row is not an execution row.
#[LAST_IS_LAST]
last * sel' = 0;

// These are needed to have a non-empty set of columns for each type.
pol public input;
