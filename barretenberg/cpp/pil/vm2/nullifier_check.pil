include "merkle_check.pil";
include "ff_gt.pil";
include "poseidon2_hash.pil";
include "constants_gen.pil";
include "precomputed.pil";

/**
 * This gadget reads and writes in the nullifier tree. The nullifier tree is an indexed tree where leaves
 * contain nullifiers. When we read from the nullifier tree, we check whether a nullifier exists or not.
 * For this we perform a low leaf membership proof and:
 *  - if the low leaf nullifier is equal to the nullifier, that means that nullifier is present in the tree, and we assert that
 *    exists is true.
 *  - if the low leaf nullifier is not equal to the nullifier, we assert that the low leaf is indeed a valid low leaf for the
 *    requested nullifier, proving non existence of the nullifier in the tree. In that case we check exists is false.
 * In order to validate that a leaf is a low leaf of the nullifier, we need to check that the low_leaf.nullifier is < nullifier
 * and that low_leaf.next_nullifier is > nullifier. However, we need to consider the case where next_nullifier is zero, which
 * means "infinity". The highest nullifier inserted in the tree will point to infinity as the "next_nullifier".
 * In order to write, we perform the above, and also:
 *  - We update the low leaf. The low leaf must now point to the leaf we are going to insert.
 *  - We construct the new leaf and insert it into the tree at 'tree_size_before_write'
 * Note: Indexed trees start prefilled with at least two items, so we can assume that no low leaf will be all zeroes
 * and that there will always be a low leaf for any given value.
 *
 * Read usage:
 * sel { exists, nullifier, nullifier_tree_root }
 * in nullifier_check.sel { nullifier_check.exists, nullifier_check.nullifier, nullifier_check.root };
 *
 * Fallible write usage:
 * pol commit exists_hint;
 * // Commited since it's used in lookup
 * // We only write if exists_hint is false.
 * pol commit write;
 * sel * (1 - exists_hint - write) = 0;
 *
 * sel { write, // Success flag
 *       exists_hint, // Error flag
 *       nullifier,
 *       prev_nullifier_tree_root,
 *       next_nullifier_tree_root, // Only use this if write is true.
 *       prev_nullifier_tree_size
 * } in nullifier_check.sel {
 *     nullifier_check.write, // if exists is true, write will be false, so we constrain a membership proof
 *     nullifier_check.exists, // constrain exists_hint
 *     nullifier_check.nullifier,
 *     nullifier_check.root,
 *     nullifier_check.write_root,
 *     nullifier_check.tree_size_before_write
 * };
 *
 * Infallible write usage:
 * // Commited since it's used in lookup
 * pol commit one;
 * sel * (1 - one) = 0;
 *
 * sel { one, // Always try to write, fail proving if the leaf already exists.
 *       nullifier,
 *       prev_nullifier_tree_root,
 *       next_nullifier_tree_root,
 *       prev_nullifier_tree_size
 * } in nullifier_check.sel {
 *     nullifier_check.write,
 *     nullifier_check.nullifier,
 *     nullifier_check.root,
 *     nullifier_check.write_root,
 *     nullifier_check.tree_size_before_write
 * };
**/
namespace nullifier_check;
    pol commit sel;
    sel * (1 - sel) = 0;

    #[skippable_if]
    sel = 0;

    // Inputs to the gadget
    pol commit nullifier;
    pol commit root;

    // Can be omitted if writing: constrained to be zero.
    pol commit exists;
    exists * (1 - exists) = 0;

    // Write specific inputs
    pol commit write_root;
    pol commit tree_size_before_write;
    pol commit write;
    write * (1 - write) = 0;
    // On write, the leaf must not exist
    #[WRITE_EXISTS_NAND]
    write * exists = 0;

    // Hints
    pol commit low_leaf_nullifier;
    pol commit low_leaf_next_index;
    pol commit low_leaf_next_nullifier;

    pol commit write_low_leaf_next_index;
    pol commit write_low_leaf_next_nullifier;

    pol commit low_leaf_index;

    // ========= COMPUTE LOW LEAF UPDATE =========
    write * (tree_size_before_write - write_low_leaf_next_index) = 0;
    write * (nullifier - write_low_leaf_next_nullifier) = 0;

    // ========= LOW LEAF MERKLE CHECK =========
    pol commit low_leaf_hash;
    // The intermediate root is the root of the tree after the low leaf update but before the new leaf is inserted.
    pol commit intermediate_root;
    // TODO: We need this temporarily while we do not allow for aliases in the lookup tuple
    pol commit tree_height;
    sel * (tree_height - constants.NULLIFIER_TREE_HEIGHT) = 0;

    #[LOW_LEAF_POSEIDON2]
    sel { low_leaf_nullifier, low_leaf_next_nullifier, low_leaf_next_index, low_leaf_hash }
    in poseidon2_hash.end { poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.output };

    pol commit updated_low_leaf_hash;

    #[UPDATED_LOW_LEAF_POSEIDON2]
    write { low_leaf_nullifier, write_low_leaf_next_nullifier, write_low_leaf_next_index, updated_low_leaf_hash }
    in poseidon2_hash.end { poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.output };

    #[LOW_LEAF_MERKLE_CHECK]
    sel { write, low_leaf_hash, updated_low_leaf_hash,
        low_leaf_index, tree_height, root, intermediate_root }
    in merkle_check.start { merkle_check.write, merkle_check.read_node, merkle_check.write_node,
        merkle_check.index, merkle_check.path_len, merkle_check.read_root, merkle_check.write_root };

    // ========= LOW LEAF VALIDATION =========
    pol commit nullifier_low_leaf_nullifier_diff_inv;
    pol NULLIFIER_LOW_LEAF_NULLIFIER_DIFF = nullifier - low_leaf_nullifier;

    // NULLIFIER_LOW_LEAF_NULLIFIER_DIFF == 0 <==> exists == 1
    #[EXISTS_CHECK]
    sel * (NULLIFIER_LOW_LEAF_NULLIFIER_DIFF * (exists * (1 - nullifier_low_leaf_nullifier_diff_inv) + nullifier_low_leaf_nullifier_diff_inv) - 1 + exists) = 0;

    // If the leaf doesn't exist, we need to validate that the nullifier is greater than the low leaf nullifier

    // TODO: We need this temporarily while we do not allow for aliases in the lookup tuple
    pol commit one;
    sel * (1 - one) = 0;

    // We commit leaf not exists as well as exists since it'll be used as a selector for the following lookup
    pol commit leaf_not_exists;
    sel * (1 - exists - leaf_not_exists) = 0;

    #[LOW_LEAF_NULLIFIER_VALIDATION]
    leaf_not_exists { nullifier, low_leaf_nullifier, one }
    in ff_gt.sel_gt { ff_gt.a, ff_gt.b, ff_gt.result };

    // If next nullifier is not zero (which would be infinity), it has to be greater than the nullifier.
    // We commit next_nullifier_is_nonzero instead of next_nullifier_is_zero since it'll be used as a selector for a lookup
    pol commit next_nullifier_is_nonzero;
    next_nullifier_is_nonzero * (1 - next_nullifier_is_nonzero) = 0;
    pol NEXT_NULLIFIER_IS_ZERO = 1 - next_nullifier_is_nonzero;

    pol commit next_nullifier_inv;
    #[NEXT_NULLIFIER_IS_ZERO_CHECK]
    leaf_not_exists * (low_leaf_next_nullifier * (NEXT_NULLIFIER_IS_ZERO * (1 - next_nullifier_inv) + next_nullifier_inv) - 1 + NEXT_NULLIFIER_IS_ZERO) = 0;

    #[LOW_LEAF_NEXT_NULLIFIER_VALIDATION]
    next_nullifier_is_nonzero { low_leaf_next_nullifier, nullifier, one }
    in ff_gt.sel_gt { ff_gt.a, ff_gt.b, ff_gt.result };

    // ========= NEW LEAF INSERTION =========
    pol commit new_leaf_hash;

    #[NEW_LEAF_POSEIDON2]
    write { nullifier, low_leaf_next_nullifier, low_leaf_next_index, new_leaf_hash }
    in poseidon2_hash.end { poseidon2_hash.input_0, poseidon2_hash.input_1, poseidon2_hash.input_2, poseidon2_hash.output };

    #[NEW_LEAF_MERKLE_CHECK]
    write { one, precomputed.zero, new_leaf_hash,
        tree_size_before_write, tree_height, intermediate_root, write_root }
    in merkle_check.start { merkle_check.write, merkle_check.read_node, merkle_check.write_node,
        merkle_check.index, merkle_check.path_len, merkle_check.read_root, merkle_check.write_root };
