#include "transcript.hpp"
#include "barretenberg/ecc/curves/bn254/g1.hpp"
#include "barretenberg/honk/composer/ultra_composer.hpp"
#include "barretenberg/numeric/bitop/get_msb.hpp"
#include "barretenberg/polynomials/univariate.hpp"
#include "barretenberg/proof_system/flavor/flavor.hpp"
#include <gtest/gtest.h>

using namespace proof_system::honk;

class UltraTranscriptTests : public ::testing::Test {
  public:
    static void SetUpTestSuite() { barretenberg::srs::init_crs_factory("../srs_db/ignition"); }
};

/**
 * @brief Ensure consistency between the manifest generated by the ultra honk prover over the course of proof
 * construction and the one generated by the verifier over the course of proof verification.
 *
 */
TEST_F(UltraTranscriptTests, UltraVerifierManifestConsistency)
{

    // Construct a simple circuit of size n = 8 (i.e. the minimum circuit size)
    auto builder = proof_system::UltraCircuitBuilder();

    auto a = 2;
    builder.add_variable(a);
    builder.add_public_variable(a);

    // Automatically generate a transcript manifest in the prover by constructing a proof
    auto composer = UltraComposer();
    auto instance = composer.create_instance(builder);
    auto prover = composer.create_prover(instance);
    auto proof = prover.construct_proof();

    // Automatically generate a transcript manifest in the verifier by verifying a proof
    auto verifier = composer.create_verifier(instance);
    verifier.verify_proof(proof);

    prover.transcript.print();
    verifier.transcript.print();

    // Check consistency between the manifests generated by the prover and verifier
    auto prover_manifest = prover.transcript.get_manifest();
    auto verifier_manifest = verifier.transcript.get_manifest();

    // Note: a manifest can be printed using manifest.print()
    for (size_t round = 0; round < prover_manifest.size(); ++round) {
        ASSERT_EQ(prover_manifest[round], verifier_manifest[round])
            << "Prover/Verifier manifest discrepency in round " << round;
    }
}

TEST_F(UltraTranscriptTests, FoldingManifestTest)
{
    auto builder_one = proof_system::UltraCircuitBuilder();
    auto a = 2;
    auto b = 3;
    builder_one.add_variable(a);
    builder_one.add_public_variable(a);
    builder_one.add_public_variable(b);

    auto builder_two = proof_system::UltraCircuitBuilder();
    a = 3;
    b = 4;
    builder_two.add_variable(a);
    builder_two.add_variable(b);
    builder_two.add_public_variable(a);
    builder_two.add_public_variable(b);

    auto composer = UltraComposer();
    auto instance_one = composer.create_instance(builder_one);
    auto instance_two = composer.create_instance(builder_two);

    std::vector<std::shared_ptr<ProverInstance>> insts;
    insts.emplace_back(instance_one);
    insts.emplace_back(instance_two);
    auto prover = composer.create_folding_prover(insts);
    auto verifier = composer.create_folding_verifier(insts);

    auto prover_res = prover.fold_instances();
    verifier.fold_public_parameters(prover_res.folding_data);

    prover.transcript.print();
    verifier.transcript.print();

    // Check consistency between the manifests generated by the prover and verifier
    auto prover_manifest = prover.transcript.get_manifest();
    auto verifier_manifest = verifier.transcript.get_manifest();
    for (size_t round = 0; round < prover_manifest.size(); ++round) {
        ASSERT_EQ(prover_manifest[round], verifier_manifest[round])
            << "Prover/Verifier manifest discrepency in round " << round;
    }
}
