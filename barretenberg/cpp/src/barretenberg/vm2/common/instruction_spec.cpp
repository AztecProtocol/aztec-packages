#include "barretenberg/vm2/common/instruction_spec.hpp"

#include "barretenberg/vm2/common/aztec_constants.hpp"
#include "barretenberg/vm2/common/opcodes.hpp"

#include <array>

namespace bb::avm2 {

namespace {

// This structure is code-generated (but manually set) by the test:
// DecompositionSelectors.CodeGen (op_decomposition.test.cpp)
const std::unordered_map<WireOpCode, std::array<uint8_t, NUM_OP_DC_SELECTORS>> WireOpCode_DC_SELECTORS = {
    { WireOpCode::ADD_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::ADD_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SUB_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::SUB_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::MUL_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::MUL_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::DIV_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::DIV_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::FDIV_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::FDIV_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::EQ_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::EQ_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::LT_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::LT_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::LTE_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::LTE_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::AND_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::AND_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::OR_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::OR_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::XOR_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::XOR_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::NOT_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::NOT_16, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SHL_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::SHL_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SHR_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::SHR_16, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::CAST_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::CAST_16, { 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::GETENVVAR_16, { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::CALLDATACOPY, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SUCCESSCOPY, { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::RETURNDATASIZE, { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::RETURNDATACOPY, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::JUMP_32, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
    { WireOpCode::JUMPI_32, { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 } },
    { WireOpCode::INTERNALCALL, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
    { WireOpCode::INTERNALRETURN, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SET_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
    { WireOpCode::SET_16, { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0 } },
    { WireOpCode::SET_32, { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0 } },
    { WireOpCode::SET_64, { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0 } },
    { WireOpCode::SET_128, { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SET_FF, { 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::MOV_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::MOV_16, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SLOAD, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SSTORE, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::NOTEHASHEXISTS, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::EMITNOTEHASH, { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::NULLIFIEREXISTS, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::EMITNULLIFIER, { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::L1TOL2MSGEXISTS, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::GETCONTRACTINSTANCE, { 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::EMITUNENCRYPTEDLOG, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SENDL2TOL1MSG, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::CALL, { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::STATICCALL, { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::RETURN, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::REVERT_8, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::REVERT_16, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::DEBUGLOG, { 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::POSEIDON2PERM, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::SHA256COMPRESSION, { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::KECCAKF1600, { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::ECADD, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
    { WireOpCode::TORADIXBE, { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
};

} // namespace

const std::unordered_map<WireOpCode, WireInstructionSpec> WIRE_INSTRUCTION_SPEC = {
    { WireOpCode::ADD_8,
      { .exec_opcode = ExecutionOpCode::ADD,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::ADD_8) } },
    { WireOpCode::ADD_16,
      { .exec_opcode = ExecutionOpCode::ADD,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::ADD_16) } },
    { WireOpCode::SUB_8,
      { .exec_opcode = ExecutionOpCode::SUB,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SUB_8) } },
    { WireOpCode::SUB_16,
      { .exec_opcode = ExecutionOpCode::SUB,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SUB_16) } },
    { WireOpCode::MUL_8,
      { .exec_opcode = ExecutionOpCode::MUL,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::MUL_8) } },
    { WireOpCode::MUL_16,
      { .exec_opcode = ExecutionOpCode::MUL,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::MUL_16) } },
    { WireOpCode::DIV_8,
      { .exec_opcode = ExecutionOpCode::DIV,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::DIV_8) } },
    { WireOpCode::DIV_16,
      { .exec_opcode = ExecutionOpCode::DIV,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::DIV_16) } },
    { WireOpCode::FDIV_8,
      { .exec_opcode = ExecutionOpCode::FDIV,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::FDIV_8) } },
    { WireOpCode::FDIV_16,
      { .exec_opcode = ExecutionOpCode::FDIV,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::FDIV_16) } },
    { WireOpCode::EQ_8,
      { .exec_opcode = ExecutionOpCode::EQ,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::EQ_8) } },
    { WireOpCode::EQ_16,
      { .exec_opcode = ExecutionOpCode::EQ,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::EQ_16) } },
    { WireOpCode::LT_8,
      { .exec_opcode = ExecutionOpCode::LT,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::LT_8) } },
    { WireOpCode::LT_16,
      { .exec_opcode = ExecutionOpCode::LT,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::LT_16) } },
    { WireOpCode::LTE_8,
      { .exec_opcode = ExecutionOpCode::LTE,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::LTE_8) } },
    { WireOpCode::LTE_16,
      { .exec_opcode = ExecutionOpCode::LTE,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::LTE_16) } },
    { WireOpCode::AND_8,
      { .exec_opcode = ExecutionOpCode::AND,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::AND_8) } },
    { WireOpCode::AND_16,
      { .exec_opcode = ExecutionOpCode::AND,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::AND_16) } },
    { WireOpCode::OR_8,
      { .exec_opcode = ExecutionOpCode::OR,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::OR_8) } },
    { WireOpCode::OR_16,
      { .exec_opcode = ExecutionOpCode::OR,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::OR_16) } },
    { WireOpCode::XOR_8,
      { .exec_opcode = ExecutionOpCode::XOR,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::XOR_8) } },
    { WireOpCode::XOR_16,
      { .exec_opcode = ExecutionOpCode::XOR,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::XOR_16) } },
    { WireOpCode::NOT_8,
      { .exec_opcode = ExecutionOpCode::NOT,
        .size_in_bytes = 4,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::NOT_8) } },
    { WireOpCode::NOT_16,
      { .exec_opcode = ExecutionOpCode::NOT,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::NOT_16) } },
    { WireOpCode::SHL_8,
      { .exec_opcode = ExecutionOpCode::SHL,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SHL_8) } },
    { WireOpCode::SHL_16,
      { .exec_opcode = ExecutionOpCode::SHL,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SHL_16) } },
    { WireOpCode::SHR_8,
      { .exec_opcode = ExecutionOpCode::SHR,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SHR_8) } },
    { WireOpCode::SHR_16,
      { .exec_opcode = ExecutionOpCode::SHR,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SHR_16) } },
    { WireOpCode::CAST_8,
      {
          .exec_opcode = ExecutionOpCode::CAST,
          .size_in_bytes = 5,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::CAST_8),
          .tag_operand_idx = 3, // op3
      } },
    { WireOpCode::CAST_16,
      {
          .exec_opcode = ExecutionOpCode::CAST,
          .size_in_bytes = 7,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::CAST_16),
          .tag_operand_idx = 3, // op3
      } },
    { WireOpCode::GETENVVAR_16,
      { .exec_opcode = ExecutionOpCode::GETENVVAR,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::GETENVVAR_16) } },
    { WireOpCode::CALLDATACOPY,
      { .exec_opcode = ExecutionOpCode::CALLDATACOPY,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::CALLDATACOPY) } },
    { WireOpCode::SUCCESSCOPY,
      { .exec_opcode = ExecutionOpCode::SUCCESSCOPY,
        .size_in_bytes = 4,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SUCCESSCOPY) } },
    { WireOpCode::RETURNDATASIZE,
      { .exec_opcode = ExecutionOpCode::RETURNDATASIZE,
        .size_in_bytes = 4,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::RETURNDATASIZE) } },
    { WireOpCode::RETURNDATACOPY,
      { .exec_opcode = ExecutionOpCode::RETURNDATACOPY,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::RETURNDATACOPY) } },
    { WireOpCode::JUMP_32,
      { .exec_opcode = ExecutionOpCode::JUMP,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::JUMP_32) } },
    { WireOpCode::JUMPI_32,
      { .exec_opcode = ExecutionOpCode::JUMPI,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::JUMPI_32) } },
    { WireOpCode::INTERNALCALL,
      { .exec_opcode = ExecutionOpCode::INTERNALCALL,
        .size_in_bytes = 5,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::INTERNALCALL) } },
    { WireOpCode::INTERNALRETURN,
      { .exec_opcode = ExecutionOpCode::INTERNALRETURN,
        .size_in_bytes = 1,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::INTERNALRETURN) } },
    { WireOpCode::SET_8,
      {
          .exec_opcode = ExecutionOpCode::SET,
          .size_in_bytes = 5,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SET_8),
          .tag_operand_idx = 2, // op2
      } },
    { WireOpCode::SET_16,
      {
          .exec_opcode = ExecutionOpCode::SET,
          .size_in_bytes = 7,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SET_16),
          .tag_operand_idx = 2, // op2
      } },
    { WireOpCode::SET_32,
      {
          .exec_opcode = ExecutionOpCode::SET,
          .size_in_bytes = 9,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SET_32),
          .tag_operand_idx = 2, // op2
      } },
    { WireOpCode::SET_64,
      {
          .exec_opcode = ExecutionOpCode::SET,
          .size_in_bytes = 13,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SET_64),
          .tag_operand_idx = 2, // op2
      } },
    { WireOpCode::SET_128,
      {
          .exec_opcode = ExecutionOpCode::SET,
          .size_in_bytes = 21,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SET_128),
          .tag_operand_idx = 2, // op2
      } },
    { WireOpCode::SET_FF,
      {
          .exec_opcode = ExecutionOpCode::SET,
          .size_in_bytes = 37,
          .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SET_FF),
          .tag_operand_idx = 2, // op2
      } },
    { WireOpCode::MOV_8,
      { .exec_opcode = ExecutionOpCode::MOV,
        .size_in_bytes = 4,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::MOV_8) } },
    { WireOpCode::MOV_16,
      { .exec_opcode = ExecutionOpCode::MOV,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::MOV_16) } },
    { WireOpCode::SLOAD,
      { .exec_opcode = ExecutionOpCode::SLOAD,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SLOAD) } },
    { WireOpCode::SSTORE,
      { .exec_opcode = ExecutionOpCode::SSTORE,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SSTORE) } },
    { WireOpCode::NOTEHASHEXISTS,
      { .exec_opcode = ExecutionOpCode::NOTEHASHEXISTS,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::NOTEHASHEXISTS) } },
    { WireOpCode::EMITNOTEHASH,
      { .exec_opcode = ExecutionOpCode::EMITNOTEHASH,
        .size_in_bytes = 4,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::EMITNOTEHASH) } },
    { WireOpCode::NULLIFIEREXISTS,
      { .exec_opcode = ExecutionOpCode::NULLIFIEREXISTS,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::NULLIFIEREXISTS) } },
    { WireOpCode::EMITNULLIFIER,
      { .exec_opcode = ExecutionOpCode::EMITNULLIFIER,
        .size_in_bytes = 4,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::EMITNULLIFIER) } },
    { WireOpCode::L1TOL2MSGEXISTS,
      { .exec_opcode = ExecutionOpCode::L1TOL2MSGEXISTS,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::L1TOL2MSGEXISTS) } },
    { WireOpCode::GETCONTRACTINSTANCE,
      { .exec_opcode = ExecutionOpCode::GETCONTRACTINSTANCE,
        .size_in_bytes = 7,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::GETCONTRACTINSTANCE) } },
    { WireOpCode::EMITUNENCRYPTEDLOG,
      { .exec_opcode = ExecutionOpCode::EMITUNENCRYPTEDLOG,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::EMITUNENCRYPTEDLOG) } },
    { WireOpCode::SENDL2TOL1MSG,
      { .exec_opcode = ExecutionOpCode::SENDL2TOL1MSG,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SENDL2TOL1MSG) } },
    { WireOpCode::CALL,
      { .exec_opcode = ExecutionOpCode::CALL,
        .size_in_bytes = 13,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::CALL) } },
    { WireOpCode::STATICCALL,
      { .exec_opcode = ExecutionOpCode::STATICCALL,
        .size_in_bytes = 13,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::STATICCALL) } },
    { WireOpCode::RETURN,
      { .exec_opcode = ExecutionOpCode::RETURN,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::RETURN) } },
    { WireOpCode::REVERT_8,
      { .exec_opcode = ExecutionOpCode::REVERT,
        .size_in_bytes = 4,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::REVERT_8) } },
    { WireOpCode::REVERT_16,
      { .exec_opcode = ExecutionOpCode::REVERT,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::REVERT_16) } },
    { WireOpCode::DEBUGLOG,
      { .exec_opcode = ExecutionOpCode::DEBUGLOG,
        .size_in_bytes = 10,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::DEBUGLOG) } },
    { WireOpCode::POSEIDON2PERM,
      { .exec_opcode = ExecutionOpCode::POSEIDON2PERM,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::POSEIDON2PERM) } },
    { WireOpCode::SHA256COMPRESSION,
      { .exec_opcode = ExecutionOpCode::SHA256COMPRESSION,
        .size_in_bytes = 8,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::SHA256COMPRESSION) } },
    { WireOpCode::KECCAKF1600,
      { .exec_opcode = ExecutionOpCode::KECCAKF1600,
        .size_in_bytes = 6,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::KECCAKF1600) } },
    { WireOpCode::ECADD,
      { .exec_opcode = ExecutionOpCode::ECADD,
        .size_in_bytes = 17,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::ECADD) } },
    { WireOpCode::TORADIXBE,
      { .exec_opcode = ExecutionOpCode::TORADIXBE,
        .size_in_bytes = 13,
        .op_dc_selectors = WireOpCode_DC_SELECTORS.at(WireOpCode::TORADIXBE) } },
};

using RegisterInfo = ExecInstructionSpec::RegisterInfo;

RegisterInfo& RegisterInfo::add_input(std::optional<ValueTag> tag)
{
    inputs.push_back(tag);
    return *this;
}

RegisterInfo& RegisterInfo::add_inputs(const std::vector<std::optional<ValueTag>>& tags)
{
    inputs.insert(inputs.end(), tags.begin(), tags.end());
    return *this;
}

RegisterInfo& RegisterInfo::add_output()
{
    has_output = true;
    return *this;
}

bool RegisterInfo::is_active(size_t index) const
{
    return index < total_registers();
}

bool RegisterInfo::is_write(size_t index) const
{
    return index >= inputs.size() && index < total_registers();
}

bool RegisterInfo::need_tag_check(size_t index) const
{
    return index < inputs.size() && inputs.at(index).has_value();
}

std::optional<ValueTag> RegisterInfo::expected_tag(size_t index) const
{
    return index < inputs.size() ? inputs.at(index) : std::nullopt;
}

const std::unordered_map<ExecutionOpCode, ExecInstructionSpec> EXEC_INSTRUCTION_SPEC = {
    { ExecutionOpCode::ADD,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_ADD_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo()
                             .add_inputs({ /*a*/ RegisterInfo::ANY_TAG,
                                           /*b*/ RegisterInfo::ANY_TAG })
                             .add_output(/*c*/) } },
    { ExecutionOpCode::EQ,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_EQ_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo()
                             .add_inputs({ /*a*/ RegisterInfo::ANY_TAG,
                                           /*b*/ RegisterInfo::ANY_TAG })
                             .add_output(/*c*/) } },
    { ExecutionOpCode::LT,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_LT_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo()
                             .add_inputs({ /*a*/ RegisterInfo::ANY_TAG,
                                           /*b*/ RegisterInfo::ANY_TAG })
                             .add_output(/*c*/) } },
    { ExecutionOpCode::LTE,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_LTE_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo()
                             .add_inputs({ /*a*/ RegisterInfo::ANY_TAG,
                                           /*b*/ RegisterInfo::ANY_TAG })
                             .add_output(/*c*/) } },
    { ExecutionOpCode::NOT,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_NOT_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_inputs({ /*a*/ RegisterInfo::ANY_TAG }).add_output(/*b*/) } },
    { ExecutionOpCode::CAST,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_CAST_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*a*/ RegisterInfo::ANY_TAG).add_output(/*c*/) } },
    { ExecutionOpCode::GETENVVAR,
      { .num_addresses = 1,
        .gas_cost = { .opcode_gas = AVM_GETENVVAR_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_output(/*dst*/) } },
    { ExecutionOpCode::SET,
      { .num_addresses = 1,
        .gas_cost = { .opcode_gas = AVM_SET_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_output(/*dst*/) } },
    { ExecutionOpCode::MOV,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_MOV_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*src*/).add_output(/*dst*/) } },
    { ExecutionOpCode::CALL,
      { .num_addresses = 5,
        .gas_cost = { .opcode_gas = AVM_CALL_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_inputs({ /*l2_gas*/ ValueTag::U32,
                                                     /*da_gas*/ ValueTag::U32,
                                                     /*contract_address*/ ValueTag::FF,
                                                     /*cd_size*/ ValueTag::U32 }) } },
    { ExecutionOpCode::RETURN,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_RETURN_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*rd_size*/ ValueTag::U32) } },
    { ExecutionOpCode::JUMP,
      { .num_addresses = 0,
        .gas_cost = { .opcode_gas = AVM_JUMP_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 } } },
    { ExecutionOpCode::JUMPI,
      { .num_addresses = 1,
        .gas_cost = { .opcode_gas = AVM_JUMPI_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*cond*/ ValueTag::U1) } },
    { ExecutionOpCode::CALLDATACOPY,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_CALLDATACOPY_BASE_L2_GAS,
                      .base_da = 0,
                      .dyn_l2 = AVM_CALLDATACOPY_DYN_L2_GAS,
                      .dyn_da = 0 },
        .dyn_gas_id = AVM_DYN_GAS_ID_CALLDATACOPY,
        .register_info =
            RegisterInfo().add_inputs({ /*cd_copy_size*/ ValueTag::U32, /*cd_offset_read*/ ValueTag::U32 }) } },
    { ExecutionOpCode::SUCCESSCOPY,
      { .num_addresses = 1,
        .gas_cost = { .opcode_gas = AVM_SUCCESSCOPY_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_output(/*dst*/) } },
    { ExecutionOpCode::RETURNDATACOPY,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_RETURNDATACOPY_BASE_L2_GAS,
                      .base_da = 0,
                      .dyn_l2 = AVM_RETURNDATACOPY_DYN_L2_GAS,
                      .dyn_da = 0 },
        .dyn_gas_id = AVM_DYN_GAS_ID_RETURNDATACOPY,
        .register_info =
            RegisterInfo().add_inputs({ /*rd_copy_size*/ ValueTag::U32, /*rd_offset_read*/ ValueTag::U32 }) } },
    { ExecutionOpCode::INTERNALCALL,
      {
          .num_addresses = 0,
          .gas_cost = { .opcode_gas = AVM_INTERNALCALL_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
      } },
    { ExecutionOpCode::INTERNALRETURN,
      { .num_addresses = 0,
        .gas_cost = { .opcode_gas = AVM_INTERNALRETURN_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 } } },
    { ExecutionOpCode::STATICCALL,
      { .num_addresses = 5,
        .gas_cost = { .opcode_gas = AVM_STATICCALL_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 } } },
    { ExecutionOpCode::REVERT,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_REVERT_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*rev_size*/ ValueTag::U32) } },
    { ExecutionOpCode::KECCAKF1600,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_KECCAKF1600_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 } } },
    { ExecutionOpCode::RETURNDATASIZE,
      { .num_addresses = 1,
        .gas_cost = { .opcode_gas = AVM_RETURNDATASIZE_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_output(/*dst*/) } },
    { ExecutionOpCode::DEBUGLOG,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_DEBUGLOG_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        // We don't set the right inputs for debuglog because we make it a noop.
        .register_info = RegisterInfo() } },
    // Bitwise
    { ExecutionOpCode::AND,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_AND_BASE_L2_GAS, .base_da = 0, .dyn_l2 = AVM_BITWISE_DYN_L2_GAS, .dyn_da = 0 },
        .dyn_gas_id = AVM_DYN_GAS_ID_BITWISE,
        .register_info = RegisterInfo()
                             .add_inputs({ /*a*/ RegisterInfo::ANY_TAG, /*b*/ RegisterInfo::ANY_TAG })
                             .add_output(/*c*/) } },
    { ExecutionOpCode::OR,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_OR_BASE_L2_GAS, .base_da = 0, .dyn_l2 = AVM_BITWISE_DYN_L2_GAS, .dyn_da = 0 },
        .dyn_gas_id = AVM_DYN_GAS_ID_BITWISE,
        .register_info = RegisterInfo()
                             .add_inputs({ /*a*/ RegisterInfo::ANY_TAG, /*b*/ RegisterInfo::ANY_TAG })
                             .add_output(/*c*/) } },
    { ExecutionOpCode::XOR,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_XOR_BASE_L2_GAS, .base_da = 0, .dyn_l2 = AVM_BITWISE_DYN_L2_GAS, .dyn_da = 0 },
        .dyn_gas_id = AVM_DYN_GAS_ID_BITWISE,
        .register_info = RegisterInfo()
                             .add_inputs({ /*a*/ RegisterInfo::ANY_TAG, /*b*/ RegisterInfo::ANY_TAG })
                             .add_output(/*c*/) } },
    { ExecutionOpCode::SLOAD,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_SLOAD_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*slot*/ ValueTag::FF).add_output(/*dst*/) } },
    { ExecutionOpCode::SSTORE,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_SSTORE_BASE_L2_GAS,
                      .base_da = 0,
                      .dyn_l2 = 0,
                      .dyn_da = AVM_SSTORE_DYN_DA_GAS },
        .dyn_gas_id = AVM_DYN_GAS_ID_SSTORE,
        .register_info = RegisterInfo().add_inputs({ /*src*/ ValueTag::FF, /*slot*/ ValueTag::FF }) } },
    { ExecutionOpCode::NOTEHASHEXISTS,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_NOTEHASHEXISTS_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo()
                             .add_inputs({ /*unique_note_hash*/ ValueTag::FF, /*leaf_index*/ ValueTag::U64 })
                             .add_output(/*exists*/) } },
    { ExecutionOpCode::NULLIFIEREXISTS,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_NULLIFIEREXISTS_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo()
                             .add_inputs({ /*nullifier*/ ValueTag::FF,
                                           /*address*/ ValueTag::FF })
                             .add_output(/*exists*/) } },
    { ExecutionOpCode::GETCONTRACTINSTANCE,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_GETCONTRACTINSTANCE_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*contract_address*/ ValueTag::FF) } },
    { ExecutionOpCode::EMITNOTEHASH,
      { .num_addresses = 1,
        .gas_cost = { .opcode_gas = AVM_EMITNOTEHASH_BASE_L2_GAS,
                      .base_da = AVM_EMITNOTEHASH_BASE_DA_GAS,
                      .dyn_l2 = 0,
                      .dyn_da = 0 },
        .register_info = RegisterInfo().add_input(/*note_hash*/ ValueTag::FF) } },
    { ExecutionOpCode::L1TOL2MSGEXISTS,
      { .num_addresses = 3,
        .gas_cost = { .opcode_gas = AVM_L1TOL2MSGEXISTS_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo()
                             .add_inputs({ /*msg_hash*/ ValueTag::FF, /*leaf_index*/ ValueTag::U64 })
                             .add_output(/*exists*/) } },
    { ExecutionOpCode::POSEIDON2PERM,
      { .num_addresses = 2,
        .gas_cost = { .opcode_gas = AVM_POSEIDON2_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 } } },
    { ExecutionOpCode::ECADD,
      { .num_addresses = 7,
        .gas_cost = { .opcode_gas = AVM_ECADD_BASE_L2_GAS, .base_da = 0, .dyn_l2 = 0, .dyn_da = 0 },
        .register_info = RegisterInfo().add_inputs({ /*p_x=*/ValueTag::FF,
                                                     /*p_y=*/ValueTag::FF,
                                                     /*p_inf*/ ValueTag::U1,
                                                     /*q_x*/ ValueTag::FF,
                                                     /*q_y*/ ValueTag::FF,
                                                     /*q_inf*/ ValueTag::U1 }) } },

};

} // namespace bb::avm2
