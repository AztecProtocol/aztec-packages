#pragma once

#include <array>
#include <optional>

#include "barretenberg/common/std_string.hpp"

namespace bb::avm2 {

// The entities that will be used in the flavor.
// clang-format off
#define AVM2_PRECOMPUTED_ENTITIES precomputed_bitwise_input_a, precomputed_bitwise_input_b, precomputed_bitwise_op_id, precomputed_bitwise_output, precomputed_clk, precomputed_first_row, precomputed_sel_bitwise
#define AVM2_WIRE_ENTITIES execution_input, alu_dst_addr, alu_ia, alu_ia_addr, alu_ib, alu_ib_addr, alu_ic, alu_op, alu_sel_op_add, bc_decomposition_bd0, bc_decomposition_bd1, bc_decomposition_bd10, bc_decomposition_bd11, bc_decomposition_bd12, bc_decomposition_bd13, bc_decomposition_bd14, bc_decomposition_bd15, bc_decomposition_bd16, bc_decomposition_bd17, bc_decomposition_bd18, bc_decomposition_bd19, bc_decomposition_bd2, bc_decomposition_bd20, bc_decomposition_bd21, bc_decomposition_bd22, bc_decomposition_bd23, bc_decomposition_bd24, bc_decomposition_bd25, bc_decomposition_bd26, bc_decomposition_bd27, bc_decomposition_bd28, bc_decomposition_bd29, bc_decomposition_bd3, bc_decomposition_bd30, bc_decomposition_bd31, bc_decomposition_bd32, bc_decomposition_bd33, bc_decomposition_bd34, bc_decomposition_bd35, bc_decomposition_bd4, bc_decomposition_bd5, bc_decomposition_bd6, bc_decomposition_bd7, bc_decomposition_bd8, bc_decomposition_bd9, bc_decomposition_bytecode_id, bc_decomposition_ex_opcode, bc_decomposition_fmt_3_op_u8, bc_decomposition_indirect, bc_decomposition_op1, bc_decomposition_op2, bc_decomposition_op3, bc_decomposition_op4, bc_decomposition_pc, bc_decomposition_sel, bc_retrieval_address, bc_retrieval_artifact_hash, bc_retrieval_bytecode_id, bc_retrieval_class_id, bc_retrieval_deployer_addr, bc_retrieval_err, bc_retrieval_incoming_viewing_key_x, bc_retrieval_incoming_viewing_key_y, bc_retrieval_init_hash, bc_retrieval_nullifier_key_x, bc_retrieval_nullifier_key_y, bc_retrieval_outgoing_viewing_key_x, bc_retrieval_outgoing_viewing_key_y, bc_retrieval_private_function_root, bc_retrieval_public_bytecode_commitment, bc_retrieval_salt, bc_retrieval_sel, bc_retrieval_tagging_key_x, bc_retrieval_tagging_key_y, bytecode_bytes, bytecode_bytes_pc_plus_1, bytecode_bytes_pc_plus_10, bytecode_bytes_pc_plus_11, bytecode_bytes_pc_plus_12, bytecode_bytes_pc_plus_13, bytecode_bytes_pc_plus_14, bytecode_bytes_pc_plus_15, bytecode_bytes_pc_plus_16, bytecode_bytes_pc_plus_17, bytecode_bytes_pc_plus_18, bytecode_bytes_pc_plus_19, bytecode_bytes_pc_plus_2, bytecode_bytes_pc_plus_20, bytecode_bytes_pc_plus_21, bytecode_bytes_pc_plus_22, bytecode_bytes_pc_plus_23, bytecode_bytes_pc_plus_24, bytecode_bytes_pc_plus_25, bytecode_bytes_pc_plus_26, bytecode_bytes_pc_plus_27, bytecode_bytes_pc_plus_28, bytecode_bytes_pc_plus_29, bytecode_bytes_pc_plus_3, bytecode_bytes_pc_plus_30, bytecode_bytes_pc_plus_31, bytecode_bytes_pc_plus_32, bytecode_bytes_pc_plus_33, bytecode_bytes_pc_plus_34, bytecode_bytes_pc_plus_35, bytecode_bytes_pc_plus_4, bytecode_bytes_pc_plus_5, bytecode_bytes_pc_plus_6, bytecode_bytes_pc_plus_7, bytecode_bytes_pc_plus_8, bytecode_bytes_pc_plus_9, bytecode_id, bytecode_pc, bytecode_sel, execution_addressing_error_idx, execution_addressing_error_kind, execution_base_address_tag, execution_base_address_val, execution_bytecode_id, execution_clk, execution_ex_opcode, execution_indirect, execution_last, execution_op1, execution_op1_after_relative, execution_op2, execution_op2_after_relative, execution_op3, execution_op3_after_relative, execution_op4, execution_op4_after_relative, execution_pc, execution_rop1, execution_rop2, execution_rop3, execution_rop4, execution_sel, execution_sel_addressing_error, execution_sel_op1_is_address, execution_sel_op2_is_address, execution_sel_op3_is_address, execution_sel_op4_is_address, lookup_dummy_precomputed_counts, lookup_dummy_dynamic_counts
#define AVM2_DERIVED_WITNESS_ENTITIES perm_dummy_dynamic_inv, lookup_dummy_precomputed_inv, lookup_dummy_dynamic_inv
#define AVM2_SHIFTED_ENTITIES bytecode_bytes_shift, bytecode_bytes_pc_plus_1_shift, bytecode_bytes_pc_plus_10_shift, bytecode_bytes_pc_plus_11_shift, bytecode_bytes_pc_plus_12_shift, bytecode_bytes_pc_plus_13_shift, bytecode_bytes_pc_plus_14_shift, bytecode_bytes_pc_plus_15_shift, bytecode_bytes_pc_plus_16_shift, bytecode_bytes_pc_plus_17_shift, bytecode_bytes_pc_plus_18_shift, bytecode_bytes_pc_plus_19_shift, bytecode_bytes_pc_plus_2_shift, bytecode_bytes_pc_plus_20_shift, bytecode_bytes_pc_plus_21_shift, bytecode_bytes_pc_plus_22_shift, bytecode_bytes_pc_plus_23_shift, bytecode_bytes_pc_plus_24_shift, bytecode_bytes_pc_plus_25_shift, bytecode_bytes_pc_plus_26_shift, bytecode_bytes_pc_plus_27_shift, bytecode_bytes_pc_plus_28_shift, bytecode_bytes_pc_plus_29_shift, bytecode_bytes_pc_plus_3_shift, bytecode_bytes_pc_plus_30_shift, bytecode_bytes_pc_plus_31_shift, bytecode_bytes_pc_plus_32_shift, bytecode_bytes_pc_plus_33_shift, bytecode_bytes_pc_plus_34_shift, bytecode_bytes_pc_plus_4_shift, bytecode_bytes_pc_plus_5_shift, bytecode_bytes_pc_plus_6_shift, bytecode_bytes_pc_plus_7_shift, bytecode_bytes_pc_plus_8_shift, bytecode_bytes_pc_plus_9_shift, execution_sel_shift
#define AVM2_TO_BE_SHIFTED(e) e.bytecode_bytes, e.bytecode_bytes_pc_plus_1, e.bytecode_bytes_pc_plus_10, e.bytecode_bytes_pc_plus_11, e.bytecode_bytes_pc_plus_12, e.bytecode_bytes_pc_plus_13, e.bytecode_bytes_pc_plus_14, e.bytecode_bytes_pc_plus_15, e.bytecode_bytes_pc_plus_16, e.bytecode_bytes_pc_plus_17, e.bytecode_bytes_pc_plus_18, e.bytecode_bytes_pc_plus_19, e.bytecode_bytes_pc_plus_2, e.bytecode_bytes_pc_plus_20, e.bytecode_bytes_pc_plus_21, e.bytecode_bytes_pc_plus_22, e.bytecode_bytes_pc_plus_23, e.bytecode_bytes_pc_plus_24, e.bytecode_bytes_pc_plus_25, e.bytecode_bytes_pc_plus_26, e.bytecode_bytes_pc_plus_27, e.bytecode_bytes_pc_plus_28, e.bytecode_bytes_pc_plus_29, e.bytecode_bytes_pc_plus_3, e.bytecode_bytes_pc_plus_30, e.bytecode_bytes_pc_plus_31, e.bytecode_bytes_pc_plus_32, e.bytecode_bytes_pc_plus_33, e.bytecode_bytes_pc_plus_34, e.bytecode_bytes_pc_plus_4, e.bytecode_bytes_pc_plus_5, e.bytecode_bytes_pc_plus_6, e.bytecode_bytes_pc_plus_7, e.bytecode_bytes_pc_plus_8, e.bytecode_bytes_pc_plus_9, e.execution_sel
#define AVM2_ALL_ENTITIES AVM2_PRECOMPUTED_ENTITIES, AVM2_WIRE_ENTITIES, AVM2_DERIVED_WITNESS_ENTITIES, AVM2_SHIFTED_ENTITIES
#define AVM2_UNSHIFTED_ENTITIES AVM2_PRECOMPUTED_ENTITIES, AVM2_WIRE_ENTITIES, AVM2_DERIVED_WITNESS_ENTITIES

#define AVM2_TO_BE_SHIFTED_COLUMNS Column::bytecode_bytes, Column::bytecode_bytes_pc_plus_1, Column::bytecode_bytes_pc_plus_10, Column::bytecode_bytes_pc_plus_11, Column::bytecode_bytes_pc_plus_12, Column::bytecode_bytes_pc_plus_13, Column::bytecode_bytes_pc_plus_14, Column::bytecode_bytes_pc_plus_15, Column::bytecode_bytes_pc_plus_16, Column::bytecode_bytes_pc_plus_17, Column::bytecode_bytes_pc_plus_18, Column::bytecode_bytes_pc_plus_19, Column::bytecode_bytes_pc_plus_2, Column::bytecode_bytes_pc_plus_20, Column::bytecode_bytes_pc_plus_21, Column::bytecode_bytes_pc_plus_22, Column::bytecode_bytes_pc_plus_23, Column::bytecode_bytes_pc_plus_24, Column::bytecode_bytes_pc_plus_25, Column::bytecode_bytes_pc_plus_26, Column::bytecode_bytes_pc_plus_27, Column::bytecode_bytes_pc_plus_28, Column::bytecode_bytes_pc_plus_29, Column::bytecode_bytes_pc_plus_3, Column::bytecode_bytes_pc_plus_30, Column::bytecode_bytes_pc_plus_31, Column::bytecode_bytes_pc_plus_32, Column::bytecode_bytes_pc_plus_33, Column::bytecode_bytes_pc_plus_34, Column::bytecode_bytes_pc_plus_4, Column::bytecode_bytes_pc_plus_5, Column::bytecode_bytes_pc_plus_6, Column::bytecode_bytes_pc_plus_7, Column::bytecode_bytes_pc_plus_8, Column::bytecode_bytes_pc_plus_9, Column::execution_sel
#define AVM2_SHIFTED_COLUMNS ColumnAndShifts::bytecode_bytes_shift, ColumnAndShifts::bytecode_bytes_pc_plus_1_shift, ColumnAndShifts::bytecode_bytes_pc_plus_10_shift, ColumnAndShifts::bytecode_bytes_pc_plus_11_shift, ColumnAndShifts::bytecode_bytes_pc_plus_12_shift, ColumnAndShifts::bytecode_bytes_pc_plus_13_shift, ColumnAndShifts::bytecode_bytes_pc_plus_14_shift, ColumnAndShifts::bytecode_bytes_pc_plus_15_shift, ColumnAndShifts::bytecode_bytes_pc_plus_16_shift, ColumnAndShifts::bytecode_bytes_pc_plus_17_shift, ColumnAndShifts::bytecode_bytes_pc_plus_18_shift, ColumnAndShifts::bytecode_bytes_pc_plus_19_shift, ColumnAndShifts::bytecode_bytes_pc_plus_2_shift, ColumnAndShifts::bytecode_bytes_pc_plus_20_shift, ColumnAndShifts::bytecode_bytes_pc_plus_21_shift, ColumnAndShifts::bytecode_bytes_pc_plus_22_shift, ColumnAndShifts::bytecode_bytes_pc_plus_23_shift, ColumnAndShifts::bytecode_bytes_pc_plus_24_shift, ColumnAndShifts::bytecode_bytes_pc_plus_25_shift, ColumnAndShifts::bytecode_bytes_pc_plus_26_shift, ColumnAndShifts::bytecode_bytes_pc_plus_27_shift, ColumnAndShifts::bytecode_bytes_pc_plus_28_shift, ColumnAndShifts::bytecode_bytes_pc_plus_29_shift, ColumnAndShifts::bytecode_bytes_pc_plus_3_shift, ColumnAndShifts::bytecode_bytes_pc_plus_30_shift, ColumnAndShifts::bytecode_bytes_pc_plus_31_shift, ColumnAndShifts::bytecode_bytes_pc_plus_32_shift, ColumnAndShifts::bytecode_bytes_pc_plus_33_shift, ColumnAndShifts::bytecode_bytes_pc_plus_34_shift, ColumnAndShifts::bytecode_bytes_pc_plus_4_shift, ColumnAndShifts::bytecode_bytes_pc_plus_5_shift, ColumnAndShifts::bytecode_bytes_pc_plus_6_shift, ColumnAndShifts::bytecode_bytes_pc_plus_7_shift, ColumnAndShifts::bytecode_bytes_pc_plus_8_shift, ColumnAndShifts::bytecode_bytes_pc_plus_9_shift, ColumnAndShifts::execution_sel_shift
// clang-format on

// All columns minus shifts.
enum class Column { AVM2_UNSHIFTED_ENTITIES };

// C++ doesn't allow enum extension, so we'll have to cast.
enum class ColumnAndShifts {
    AVM2_ALL_ENTITIES,
    SENTINEL_DO_NOT_USE,
};

constexpr auto NUM_COLUMNS_WITH_SHIFTS = 189;
constexpr auto NUM_COLUMNS_WITHOUT_SHIFTS = 153;
constexpr auto TO_BE_SHIFTED_COLUMNS_ARRAY = []() { return std::array{ AVM2_TO_BE_SHIFTED_COLUMNS }; }();
constexpr auto SHIFTED_COLUMNS_ARRAY = []() { return std::array{ AVM2_SHIFTED_COLUMNS }; }();
static_assert(TO_BE_SHIFTED_COLUMNS_ARRAY.size() == SHIFTED_COLUMNS_ARRAY.size());

// Two layers are needed to properly expand the macro. Don't ask why.
#define VARARGS_TO_STRING(...) #__VA_ARGS__
#define UNPACK_TO_STRING(...) VARARGS_TO_STRING(__VA_ARGS__)
inline const std::vector<std::string>& COLUMN_NAMES = []() {
    static auto vec = detail::split_and_trim(UNPACK_TO_STRING(AVM2_ALL_ENTITIES), ',');
    return vec;
}();

} // namespace bb::avm2