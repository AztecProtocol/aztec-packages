// AUTOGENERATED FILE
#pragma once

#include "barretenberg/plonk/proof_system/types/proof.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/sumcheck/sumcheck_output.hpp"
#include "barretenberg/transcript/transcript.hpp"
#include "flavor.hpp"

namespace bb::avm2 {

class AvmProver {
  public:
    using Flavor = AvmFlavor;
    using FF = Flavor::FF;
    using PCS = Flavor::PCS;
    using Curve = Flavor::Curve;
    using PCSCommitmentKey = Flavor::CommitmentKey;
    using ProvingKey = Flavor::ProvingKey;
    using Polynomial = Flavor::Polynomial;
    using ProverPolynomials = Flavor::ProverPolynomials;
    using CommitmentLabels = Flavor::CommitmentLabels;
    using Transcript = Flavor::Transcript;
    using Proof = HonkProof;

    explicit AvmProver(std::shared_ptr<ProvingKey> input_key, std::shared_ptr<PCSCommitmentKey> commitment_key);
    AvmProver(AvmProver&& prover) = default;
    virtual ~AvmProver() = default;

    // Note: all the following methods are virtual to allow Avm2 to tweak the behaviour.
    // We can remove this once the transition is done.
    virtual void execute_preamble_round();
    virtual void execute_wire_commitments_round();
    virtual void execute_log_derivative_inverse_round();
    virtual void execute_log_derivative_inverse_commitments_round();
    virtual void execute_relation_check_rounds();
    virtual void execute_pcs_rounds();

    virtual HonkProof export_proof();
    virtual HonkProof construct_proof();

    std::shared_ptr<Transcript> transcript = std::make_shared<Transcript>();

    std::vector<FF> public_inputs;

    bb::RelationParameters<FF> relation_parameters;

    std::shared_ptr<ProvingKey> key;

    // Container for spans of all polynomials required by the prover (i.e. all multivariates evaluated by Sumcheck).
    ProverPolynomials prover_polynomials;

    CommitmentLabels commitment_labels;
    typename Flavor::WitnessCommitments witness_commitments;

    Polynomial quotient_W;

    SumcheckOutput<Flavor> sumcheck_output;

    std::shared_ptr<PCSCommitmentKey> commitment_key;

  protected:
    HonkProof proof;
};

} // namespace bb::avm2