// AUTOGENERATED FILE
#include "flavor.hpp"

namespace bb::avm2 {

AvmFlavor::AllConstRefValues::AllConstRefValues(
    const RefArray<AvmFlavor::AllConstRefValues::BaseDataType, AvmFlavor::NUM_ALL_ENTITIES>& il)
    : precomputed_bitwise_input_a(il[0])
    , precomputed_bitwise_input_b(il[1])
    , precomputed_bitwise_op_id(il[2])
    , precomputed_bitwise_output(il[3])
    , precomputed_clk(il[4])
    , precomputed_first_row(il[5])
    , precomputed_sel_bitwise(il[6])
    , execution_input(il[7])
    , alu_dst_addr(il[8])
    , alu_ia(il[9])
    , alu_ia_addr(il[10])
    , alu_ib(il[11])
    , alu_ib_addr(il[12])
    , alu_ic(il[13])
    , alu_op(il[14])
    , alu_sel_op_add(il[15])
    , bc_decomposition_bd0(il[16])
    , bc_decomposition_bd1(il[17])
    , bc_decomposition_bd10(il[18])
    , bc_decomposition_bd11(il[19])
    , bc_decomposition_bd12(il[20])
    , bc_decomposition_bd13(il[21])
    , bc_decomposition_bd14(il[22])
    , bc_decomposition_bd15(il[23])
    , bc_decomposition_bd16(il[24])
    , bc_decomposition_bd17(il[25])
    , bc_decomposition_bd18(il[26])
    , bc_decomposition_bd19(il[27])
    , bc_decomposition_bd2(il[28])
    , bc_decomposition_bd20(il[29])
    , bc_decomposition_bd21(il[30])
    , bc_decomposition_bd22(il[31])
    , bc_decomposition_bd23(il[32])
    , bc_decomposition_bd24(il[33])
    , bc_decomposition_bd25(il[34])
    , bc_decomposition_bd26(il[35])
    , bc_decomposition_bd27(il[36])
    , bc_decomposition_bd28(il[37])
    , bc_decomposition_bd29(il[38])
    , bc_decomposition_bd3(il[39])
    , bc_decomposition_bd30(il[40])
    , bc_decomposition_bd31(il[41])
    , bc_decomposition_bd32(il[42])
    , bc_decomposition_bd33(il[43])
    , bc_decomposition_bd34(il[44])
    , bc_decomposition_bd35(il[45])
    , bc_decomposition_bd4(il[46])
    , bc_decomposition_bd5(il[47])
    , bc_decomposition_bd6(il[48])
    , bc_decomposition_bd7(il[49])
    , bc_decomposition_bd8(il[50])
    , bc_decomposition_bd9(il[51])
    , bc_decomposition_bytecode_id(il[52])
    , bc_decomposition_ex_opcode(il[53])
    , bc_decomposition_fmt_3_op_u8(il[54])
    , bc_decomposition_indirect(il[55])
    , bc_decomposition_op1(il[56])
    , bc_decomposition_op2(il[57])
    , bc_decomposition_op3(il[58])
    , bc_decomposition_op4(il[59])
    , bc_decomposition_pc(il[60])
    , bc_decomposition_sel(il[61])
    , bc_retrieval_address(il[62])
    , bc_retrieval_artifact_hash(il[63])
    , bc_retrieval_bytecode_id(il[64])
    , bc_retrieval_class_id(il[65])
    , bc_retrieval_deployer_addr(il[66])
    , bc_retrieval_err(il[67])
    , bc_retrieval_incoming_viewing_key_x(il[68])
    , bc_retrieval_incoming_viewing_key_y(il[69])
    , bc_retrieval_init_hash(il[70])
    , bc_retrieval_nullifier_key_x(il[71])
    , bc_retrieval_nullifier_key_y(il[72])
    , bc_retrieval_outgoing_viewing_key_x(il[73])
    , bc_retrieval_outgoing_viewing_key_y(il[74])
    , bc_retrieval_private_function_root(il[75])
    , bc_retrieval_public_bytecode_commitment(il[76])
    , bc_retrieval_salt(il[77])
    , bc_retrieval_sel(il[78])
    , bc_retrieval_tagging_key_x(il[79])
    , bc_retrieval_tagging_key_y(il[80])
    , bytecode_bytes(il[81])
    , bytecode_bytes_pc_plus_1(il[82])
    , bytecode_bytes_pc_plus_10(il[83])
    , bytecode_bytes_pc_plus_11(il[84])
    , bytecode_bytes_pc_plus_12(il[85])
    , bytecode_bytes_pc_plus_13(il[86])
    , bytecode_bytes_pc_plus_14(il[87])
    , bytecode_bytes_pc_plus_15(il[88])
    , bytecode_bytes_pc_plus_16(il[89])
    , bytecode_bytes_pc_plus_17(il[90])
    , bytecode_bytes_pc_plus_18(il[91])
    , bytecode_bytes_pc_plus_19(il[92])
    , bytecode_bytes_pc_plus_2(il[93])
    , bytecode_bytes_pc_plus_20(il[94])
    , bytecode_bytes_pc_plus_21(il[95])
    , bytecode_bytes_pc_plus_22(il[96])
    , bytecode_bytes_pc_plus_23(il[97])
    , bytecode_bytes_pc_plus_24(il[98])
    , bytecode_bytes_pc_plus_25(il[99])
    , bytecode_bytes_pc_plus_26(il[100])
    , bytecode_bytes_pc_plus_27(il[101])
    , bytecode_bytes_pc_plus_28(il[102])
    , bytecode_bytes_pc_plus_29(il[103])
    , bytecode_bytes_pc_plus_3(il[104])
    , bytecode_bytes_pc_plus_30(il[105])
    , bytecode_bytes_pc_plus_31(il[106])
    , bytecode_bytes_pc_plus_32(il[107])
    , bytecode_bytes_pc_plus_33(il[108])
    , bytecode_bytes_pc_plus_34(il[109])
    , bytecode_bytes_pc_plus_35(il[110])
    , bytecode_bytes_pc_plus_4(il[111])
    , bytecode_bytes_pc_plus_5(il[112])
    , bytecode_bytes_pc_plus_6(il[113])
    , bytecode_bytes_pc_plus_7(il[114])
    , bytecode_bytes_pc_plus_8(il[115])
    , bytecode_bytes_pc_plus_9(il[116])
    , bytecode_bytes_remaining(il[117])
    , bytecode_bytes_to_read(il[118])
    , bytecode_bytes_to_read_unary(il[119])
    , bytecode_id(il[120])
    , bytecode_last_of_contract(il[121])
    , bytecode_pc(il[122])
    , bytecode_sel(il[123])
    , bytecode_sel_overflow_correction_needed(il[124])
    , bytecode_sel_pc_plus_0(il[125])
    , bytecode_sel_pc_plus_1(il[126])
    , bytecode_sel_pc_plus_10(il[127])
    , bytecode_sel_pc_plus_11(il[128])
    , bytecode_sel_pc_plus_12(il[129])
    , bytecode_sel_pc_plus_13(il[130])
    , bytecode_sel_pc_plus_14(il[131])
    , bytecode_sel_pc_plus_15(il[132])
    , bytecode_sel_pc_plus_16(il[133])
    , bytecode_sel_pc_plus_17(il[134])
    , bytecode_sel_pc_plus_18(il[135])
    , bytecode_sel_pc_plus_19(il[136])
    , bytecode_sel_pc_plus_2(il[137])
    , bytecode_sel_pc_plus_20(il[138])
    , bytecode_sel_pc_plus_21(il[139])
    , bytecode_sel_pc_plus_22(il[140])
    , bytecode_sel_pc_plus_23(il[141])
    , bytecode_sel_pc_plus_24(il[142])
    , bytecode_sel_pc_plus_25(il[143])
    , bytecode_sel_pc_plus_26(il[144])
    , bytecode_sel_pc_plus_27(il[145])
    , bytecode_sel_pc_plus_28(il[146])
    , bytecode_sel_pc_plus_29(il[147])
    , bytecode_sel_pc_plus_3(il[148])
    , bytecode_sel_pc_plus_30(il[149])
    , bytecode_sel_pc_plus_31(il[150])
    , bytecode_sel_pc_plus_32(il[151])
    , bytecode_sel_pc_plus_33(il[152])
    , bytecode_sel_pc_plus_34(il[153])
    , bytecode_sel_pc_plus_35(il[154])
    , bytecode_sel_pc_plus_4(il[155])
    , bytecode_sel_pc_plus_5(il[156])
    , bytecode_sel_pc_plus_6(il[157])
    , bytecode_sel_pc_plus_7(il[158])
    , bytecode_sel_pc_plus_8(il[159])
    , bytecode_sel_pc_plus_9(il[160])
    , execution_addressing_error_idx(il[161])
    , execution_addressing_error_kind(il[162])
    , execution_base_address_tag(il[163])
    , execution_base_address_val(il[164])
    , execution_bytecode_id(il[165])
    , execution_clk(il[166])
    , execution_ex_opcode(il[167])
    , execution_indirect(il[168])
    , execution_last(il[169])
    , execution_op1(il[170])
    , execution_op1_after_relative(il[171])
    , execution_op2(il[172])
    , execution_op2_after_relative(il[173])
    , execution_op3(il[174])
    , execution_op3_after_relative(il[175])
    , execution_op4(il[176])
    , execution_op4_after_relative(il[177])
    , execution_pc(il[178])
    , execution_rop1(il[179])
    , execution_rop2(il[180])
    , execution_rop3(il[181])
    , execution_rop4(il[182])
    , execution_sel(il[183])
    , execution_sel_addressing_error(il[184])
    , execution_sel_op1_is_address(il[185])
    , execution_sel_op2_is_address(il[186])
    , execution_sel_op3_is_address(il[187])
    , execution_sel_op4_is_address(il[188])
    , lookup_dummy_precomputed_counts(il[189])
    , lookup_dummy_dynamic_counts(il[190])
    , perm_dummy_dynamic_inv(il[191])
    , lookup_dummy_precomputed_inv(il[192])
    , lookup_dummy_dynamic_inv(il[193])
    , bytecode_bytes_shift(il[194])
    , bytecode_bytes_pc_plus_1_shift(il[195])
    , bytecode_bytes_pc_plus_10_shift(il[196])
    , bytecode_bytes_pc_plus_11_shift(il[197])
    , bytecode_bytes_pc_plus_12_shift(il[198])
    , bytecode_bytes_pc_plus_13_shift(il[199])
    , bytecode_bytes_pc_plus_14_shift(il[200])
    , bytecode_bytes_pc_plus_15_shift(il[201])
    , bytecode_bytes_pc_plus_16_shift(il[202])
    , bytecode_bytes_pc_plus_17_shift(il[203])
    , bytecode_bytes_pc_plus_18_shift(il[204])
    , bytecode_bytes_pc_plus_19_shift(il[205])
    , bytecode_bytes_pc_plus_2_shift(il[206])
    , bytecode_bytes_pc_plus_20_shift(il[207])
    , bytecode_bytes_pc_plus_21_shift(il[208])
    , bytecode_bytes_pc_plus_22_shift(il[209])
    , bytecode_bytes_pc_plus_23_shift(il[210])
    , bytecode_bytes_pc_plus_24_shift(il[211])
    , bytecode_bytes_pc_plus_25_shift(il[212])
    , bytecode_bytes_pc_plus_26_shift(il[213])
    , bytecode_bytes_pc_plus_27_shift(il[214])
    , bytecode_bytes_pc_plus_28_shift(il[215])
    , bytecode_bytes_pc_plus_29_shift(il[216])
    , bytecode_bytes_pc_plus_3_shift(il[217])
    , bytecode_bytes_pc_plus_30_shift(il[218])
    , bytecode_bytes_pc_plus_31_shift(il[219])
    , bytecode_bytes_pc_plus_32_shift(il[220])
    , bytecode_bytes_pc_plus_33_shift(il[221])
    , bytecode_bytes_pc_plus_34_shift(il[222])
    , bytecode_bytes_pc_plus_4_shift(il[223])
    , bytecode_bytes_pc_plus_5_shift(il[224])
    , bytecode_bytes_pc_plus_6_shift(il[225])
    , bytecode_bytes_pc_plus_7_shift(il[226])
    , bytecode_bytes_pc_plus_8_shift(il[227])
    , bytecode_bytes_pc_plus_9_shift(il[228])
    , execution_sel_shift(il[229])
{}

AvmFlavor::ProverPolynomials::ProverPolynomials(ProvingKey& proving_key)
{
    for (auto [prover_poly, key_poly] : zip_view(this->get_unshifted(), proving_key.get_all())) {
        ASSERT(flavor_get_label(*this, prover_poly) == flavor_get_label(proving_key, key_poly));
        prover_poly = key_poly.share();
    }
    for (auto [prover_poly, key_poly] : zip_view(this->get_shifted(), proving_key.get_to_be_shifted())) {
        ASSERT(flavor_get_label(*this, prover_poly) == (flavor_get_label(proving_key, key_poly) + "_shift"));
        prover_poly = key_poly.shifted();
    }
}

AvmFlavor::AllConstRefValues AvmFlavor::ProverPolynomials::get_row(size_t row_idx) const
{
    return RefArray{ precomputed_bitwise_input_a[row_idx],
                     precomputed_bitwise_input_b[row_idx],
                     precomputed_bitwise_op_id[row_idx],
                     precomputed_bitwise_output[row_idx],
                     precomputed_clk[row_idx],
                     precomputed_first_row[row_idx],
                     precomputed_sel_bitwise[row_idx],
                     execution_input[row_idx],
                     alu_dst_addr[row_idx],
                     alu_ia[row_idx],
                     alu_ia_addr[row_idx],
                     alu_ib[row_idx],
                     alu_ib_addr[row_idx],
                     alu_ic[row_idx],
                     alu_op[row_idx],
                     alu_sel_op_add[row_idx],
                     bc_decomposition_bd0[row_idx],
                     bc_decomposition_bd1[row_idx],
                     bc_decomposition_bd10[row_idx],
                     bc_decomposition_bd11[row_idx],
                     bc_decomposition_bd12[row_idx],
                     bc_decomposition_bd13[row_idx],
                     bc_decomposition_bd14[row_idx],
                     bc_decomposition_bd15[row_idx],
                     bc_decomposition_bd16[row_idx],
                     bc_decomposition_bd17[row_idx],
                     bc_decomposition_bd18[row_idx],
                     bc_decomposition_bd19[row_idx],
                     bc_decomposition_bd2[row_idx],
                     bc_decomposition_bd20[row_idx],
                     bc_decomposition_bd21[row_idx],
                     bc_decomposition_bd22[row_idx],
                     bc_decomposition_bd23[row_idx],
                     bc_decomposition_bd24[row_idx],
                     bc_decomposition_bd25[row_idx],
                     bc_decomposition_bd26[row_idx],
                     bc_decomposition_bd27[row_idx],
                     bc_decomposition_bd28[row_idx],
                     bc_decomposition_bd29[row_idx],
                     bc_decomposition_bd3[row_idx],
                     bc_decomposition_bd30[row_idx],
                     bc_decomposition_bd31[row_idx],
                     bc_decomposition_bd32[row_idx],
                     bc_decomposition_bd33[row_idx],
                     bc_decomposition_bd34[row_idx],
                     bc_decomposition_bd35[row_idx],
                     bc_decomposition_bd4[row_idx],
                     bc_decomposition_bd5[row_idx],
                     bc_decomposition_bd6[row_idx],
                     bc_decomposition_bd7[row_idx],
                     bc_decomposition_bd8[row_idx],
                     bc_decomposition_bd9[row_idx],
                     bc_decomposition_bytecode_id[row_idx],
                     bc_decomposition_ex_opcode[row_idx],
                     bc_decomposition_fmt_3_op_u8[row_idx],
                     bc_decomposition_indirect[row_idx],
                     bc_decomposition_op1[row_idx],
                     bc_decomposition_op2[row_idx],
                     bc_decomposition_op3[row_idx],
                     bc_decomposition_op4[row_idx],
                     bc_decomposition_pc[row_idx],
                     bc_decomposition_sel[row_idx],
                     bc_retrieval_address[row_idx],
                     bc_retrieval_artifact_hash[row_idx],
                     bc_retrieval_bytecode_id[row_idx],
                     bc_retrieval_class_id[row_idx],
                     bc_retrieval_deployer_addr[row_idx],
                     bc_retrieval_err[row_idx],
                     bc_retrieval_incoming_viewing_key_x[row_idx],
                     bc_retrieval_incoming_viewing_key_y[row_idx],
                     bc_retrieval_init_hash[row_idx],
                     bc_retrieval_nullifier_key_x[row_idx],
                     bc_retrieval_nullifier_key_y[row_idx],
                     bc_retrieval_outgoing_viewing_key_x[row_idx],
                     bc_retrieval_outgoing_viewing_key_y[row_idx],
                     bc_retrieval_private_function_root[row_idx],
                     bc_retrieval_public_bytecode_commitment[row_idx],
                     bc_retrieval_salt[row_idx],
                     bc_retrieval_sel[row_idx],
                     bc_retrieval_tagging_key_x[row_idx],
                     bc_retrieval_tagging_key_y[row_idx],
                     bytecode_bytes[row_idx],
                     bytecode_bytes_pc_plus_1[row_idx],
                     bytecode_bytes_pc_plus_10[row_idx],
                     bytecode_bytes_pc_plus_11[row_idx],
                     bytecode_bytes_pc_plus_12[row_idx],
                     bytecode_bytes_pc_plus_13[row_idx],
                     bytecode_bytes_pc_plus_14[row_idx],
                     bytecode_bytes_pc_plus_15[row_idx],
                     bytecode_bytes_pc_plus_16[row_idx],
                     bytecode_bytes_pc_plus_17[row_idx],
                     bytecode_bytes_pc_plus_18[row_idx],
                     bytecode_bytes_pc_plus_19[row_idx],
                     bytecode_bytes_pc_plus_2[row_idx],
                     bytecode_bytes_pc_plus_20[row_idx],
                     bytecode_bytes_pc_plus_21[row_idx],
                     bytecode_bytes_pc_plus_22[row_idx],
                     bytecode_bytes_pc_plus_23[row_idx],
                     bytecode_bytes_pc_plus_24[row_idx],
                     bytecode_bytes_pc_plus_25[row_idx],
                     bytecode_bytes_pc_plus_26[row_idx],
                     bytecode_bytes_pc_plus_27[row_idx],
                     bytecode_bytes_pc_plus_28[row_idx],
                     bytecode_bytes_pc_plus_29[row_idx],
                     bytecode_bytes_pc_plus_3[row_idx],
                     bytecode_bytes_pc_plus_30[row_idx],
                     bytecode_bytes_pc_plus_31[row_idx],
                     bytecode_bytes_pc_plus_32[row_idx],
                     bytecode_bytes_pc_plus_33[row_idx],
                     bytecode_bytes_pc_plus_34[row_idx],
                     bytecode_bytes_pc_plus_35[row_idx],
                     bytecode_bytes_pc_plus_4[row_idx],
                     bytecode_bytes_pc_plus_5[row_idx],
                     bytecode_bytes_pc_plus_6[row_idx],
                     bytecode_bytes_pc_plus_7[row_idx],
                     bytecode_bytes_pc_plus_8[row_idx],
                     bytecode_bytes_pc_plus_9[row_idx],
                     bytecode_bytes_remaining[row_idx],
                     bytecode_bytes_to_read[row_idx],
                     bytecode_bytes_to_read_unary[row_idx],
                     bytecode_id[row_idx],
                     bytecode_last_of_contract[row_idx],
                     bytecode_pc[row_idx],
                     bytecode_sel[row_idx],
                     bytecode_sel_overflow_correction_needed[row_idx],
                     bytecode_sel_pc_plus_0[row_idx],
                     bytecode_sel_pc_plus_1[row_idx],
                     bytecode_sel_pc_plus_10[row_idx],
                     bytecode_sel_pc_plus_11[row_idx],
                     bytecode_sel_pc_plus_12[row_idx],
                     bytecode_sel_pc_plus_13[row_idx],
                     bytecode_sel_pc_plus_14[row_idx],
                     bytecode_sel_pc_plus_15[row_idx],
                     bytecode_sel_pc_plus_16[row_idx],
                     bytecode_sel_pc_plus_17[row_idx],
                     bytecode_sel_pc_plus_18[row_idx],
                     bytecode_sel_pc_plus_19[row_idx],
                     bytecode_sel_pc_plus_2[row_idx],
                     bytecode_sel_pc_plus_20[row_idx],
                     bytecode_sel_pc_plus_21[row_idx],
                     bytecode_sel_pc_plus_22[row_idx],
                     bytecode_sel_pc_plus_23[row_idx],
                     bytecode_sel_pc_plus_24[row_idx],
                     bytecode_sel_pc_plus_25[row_idx],
                     bytecode_sel_pc_plus_26[row_idx],
                     bytecode_sel_pc_plus_27[row_idx],
                     bytecode_sel_pc_plus_28[row_idx],
                     bytecode_sel_pc_plus_29[row_idx],
                     bytecode_sel_pc_plus_3[row_idx],
                     bytecode_sel_pc_plus_30[row_idx],
                     bytecode_sel_pc_plus_31[row_idx],
                     bytecode_sel_pc_plus_32[row_idx],
                     bytecode_sel_pc_plus_33[row_idx],
                     bytecode_sel_pc_plus_34[row_idx],
                     bytecode_sel_pc_plus_35[row_idx],
                     bytecode_sel_pc_plus_4[row_idx],
                     bytecode_sel_pc_plus_5[row_idx],
                     bytecode_sel_pc_plus_6[row_idx],
                     bytecode_sel_pc_plus_7[row_idx],
                     bytecode_sel_pc_plus_8[row_idx],
                     bytecode_sel_pc_plus_9[row_idx],
                     execution_addressing_error_idx[row_idx],
                     execution_addressing_error_kind[row_idx],
                     execution_base_address_tag[row_idx],
                     execution_base_address_val[row_idx],
                     execution_bytecode_id[row_idx],
                     execution_clk[row_idx],
                     execution_ex_opcode[row_idx],
                     execution_indirect[row_idx],
                     execution_last[row_idx],
                     execution_op1[row_idx],
                     execution_op1_after_relative[row_idx],
                     execution_op2[row_idx],
                     execution_op2_after_relative[row_idx],
                     execution_op3[row_idx],
                     execution_op3_after_relative[row_idx],
                     execution_op4[row_idx],
                     execution_op4_after_relative[row_idx],
                     execution_pc[row_idx],
                     execution_rop1[row_idx],
                     execution_rop2[row_idx],
                     execution_rop3[row_idx],
                     execution_rop4[row_idx],
                     execution_sel[row_idx],
                     execution_sel_addressing_error[row_idx],
                     execution_sel_op1_is_address[row_idx],
                     execution_sel_op2_is_address[row_idx],
                     execution_sel_op3_is_address[row_idx],
                     execution_sel_op4_is_address[row_idx],
                     lookup_dummy_precomputed_counts[row_idx],
                     lookup_dummy_dynamic_counts[row_idx],
                     perm_dummy_dynamic_inv[row_idx],
                     lookup_dummy_precomputed_inv[row_idx],
                     lookup_dummy_dynamic_inv[row_idx],
                     bytecode_bytes_shift[row_idx],
                     bytecode_bytes_pc_plus_1_shift[row_idx],
                     bytecode_bytes_pc_plus_10_shift[row_idx],
                     bytecode_bytes_pc_plus_11_shift[row_idx],
                     bytecode_bytes_pc_plus_12_shift[row_idx],
                     bytecode_bytes_pc_plus_13_shift[row_idx],
                     bytecode_bytes_pc_plus_14_shift[row_idx],
                     bytecode_bytes_pc_plus_15_shift[row_idx],
                     bytecode_bytes_pc_plus_16_shift[row_idx],
                     bytecode_bytes_pc_plus_17_shift[row_idx],
                     bytecode_bytes_pc_plus_18_shift[row_idx],
                     bytecode_bytes_pc_plus_19_shift[row_idx],
                     bytecode_bytes_pc_plus_2_shift[row_idx],
                     bytecode_bytes_pc_plus_20_shift[row_idx],
                     bytecode_bytes_pc_plus_21_shift[row_idx],
                     bytecode_bytes_pc_plus_22_shift[row_idx],
                     bytecode_bytes_pc_plus_23_shift[row_idx],
                     bytecode_bytes_pc_plus_24_shift[row_idx],
                     bytecode_bytes_pc_plus_25_shift[row_idx],
                     bytecode_bytes_pc_plus_26_shift[row_idx],
                     bytecode_bytes_pc_plus_27_shift[row_idx],
                     bytecode_bytes_pc_plus_28_shift[row_idx],
                     bytecode_bytes_pc_plus_29_shift[row_idx],
                     bytecode_bytes_pc_plus_3_shift[row_idx],
                     bytecode_bytes_pc_plus_30_shift[row_idx],
                     bytecode_bytes_pc_plus_31_shift[row_idx],
                     bytecode_bytes_pc_plus_32_shift[row_idx],
                     bytecode_bytes_pc_plus_33_shift[row_idx],
                     bytecode_bytes_pc_plus_34_shift[row_idx],
                     bytecode_bytes_pc_plus_4_shift[row_idx],
                     bytecode_bytes_pc_plus_5_shift[row_idx],
                     bytecode_bytes_pc_plus_6_shift[row_idx],
                     bytecode_bytes_pc_plus_7_shift[row_idx],
                     bytecode_bytes_pc_plus_8_shift[row_idx],
                     bytecode_bytes_pc_plus_9_shift[row_idx],
                     execution_sel_shift[row_idx] };
}

AvmFlavor::CommitmentLabels::CommitmentLabels()
{
    Base::precomputed_bitwise_input_a = "PRECOMPUTED_BITWISE_INPUT_A";
    Base::precomputed_bitwise_input_b = "PRECOMPUTED_BITWISE_INPUT_B";
    Base::precomputed_bitwise_op_id = "PRECOMPUTED_BITWISE_OP_ID";
    Base::precomputed_bitwise_output = "PRECOMPUTED_BITWISE_OUTPUT";
    Base::precomputed_clk = "PRECOMPUTED_CLK";
    Base::precomputed_first_row = "PRECOMPUTED_FIRST_ROW";
    Base::precomputed_sel_bitwise = "PRECOMPUTED_SEL_BITWISE";
    Base::execution_input = "EXECUTION_INPUT";
    Base::alu_dst_addr = "ALU_DST_ADDR";
    Base::alu_ia = "ALU_IA";
    Base::alu_ia_addr = "ALU_IA_ADDR";
    Base::alu_ib = "ALU_IB";
    Base::alu_ib_addr = "ALU_IB_ADDR";
    Base::alu_ic = "ALU_IC";
    Base::alu_op = "ALU_OP";
    Base::alu_sel_op_add = "ALU_SEL_OP_ADD";
    Base::bc_decomposition_bd0 = "BC_DECOMPOSITION_BD0";
    Base::bc_decomposition_bd1 = "BC_DECOMPOSITION_BD1";
    Base::bc_decomposition_bd10 = "BC_DECOMPOSITION_BD10";
    Base::bc_decomposition_bd11 = "BC_DECOMPOSITION_BD11";
    Base::bc_decomposition_bd12 = "BC_DECOMPOSITION_BD12";
    Base::bc_decomposition_bd13 = "BC_DECOMPOSITION_BD13";
    Base::bc_decomposition_bd14 = "BC_DECOMPOSITION_BD14";
    Base::bc_decomposition_bd15 = "BC_DECOMPOSITION_BD15";
    Base::bc_decomposition_bd16 = "BC_DECOMPOSITION_BD16";
    Base::bc_decomposition_bd17 = "BC_DECOMPOSITION_BD17";
    Base::bc_decomposition_bd18 = "BC_DECOMPOSITION_BD18";
    Base::bc_decomposition_bd19 = "BC_DECOMPOSITION_BD19";
    Base::bc_decomposition_bd2 = "BC_DECOMPOSITION_BD2";
    Base::bc_decomposition_bd20 = "BC_DECOMPOSITION_BD20";
    Base::bc_decomposition_bd21 = "BC_DECOMPOSITION_BD21";
    Base::bc_decomposition_bd22 = "BC_DECOMPOSITION_BD22";
    Base::bc_decomposition_bd23 = "BC_DECOMPOSITION_BD23";
    Base::bc_decomposition_bd24 = "BC_DECOMPOSITION_BD24";
    Base::bc_decomposition_bd25 = "BC_DECOMPOSITION_BD25";
    Base::bc_decomposition_bd26 = "BC_DECOMPOSITION_BD26";
    Base::bc_decomposition_bd27 = "BC_DECOMPOSITION_BD27";
    Base::bc_decomposition_bd28 = "BC_DECOMPOSITION_BD28";
    Base::bc_decomposition_bd29 = "BC_DECOMPOSITION_BD29";
    Base::bc_decomposition_bd3 = "BC_DECOMPOSITION_BD3";
    Base::bc_decomposition_bd30 = "BC_DECOMPOSITION_BD30";
    Base::bc_decomposition_bd31 = "BC_DECOMPOSITION_BD31";
    Base::bc_decomposition_bd32 = "BC_DECOMPOSITION_BD32";
    Base::bc_decomposition_bd33 = "BC_DECOMPOSITION_BD33";
    Base::bc_decomposition_bd34 = "BC_DECOMPOSITION_BD34";
    Base::bc_decomposition_bd35 = "BC_DECOMPOSITION_BD35";
    Base::bc_decomposition_bd4 = "BC_DECOMPOSITION_BD4";
    Base::bc_decomposition_bd5 = "BC_DECOMPOSITION_BD5";
    Base::bc_decomposition_bd6 = "BC_DECOMPOSITION_BD6";
    Base::bc_decomposition_bd7 = "BC_DECOMPOSITION_BD7";
    Base::bc_decomposition_bd8 = "BC_DECOMPOSITION_BD8";
    Base::bc_decomposition_bd9 = "BC_DECOMPOSITION_BD9";
    Base::bc_decomposition_bytecode_id = "BC_DECOMPOSITION_BYTECODE_ID";
    Base::bc_decomposition_ex_opcode = "BC_DECOMPOSITION_EX_OPCODE";
    Base::bc_decomposition_fmt_3_op_u8 = "BC_DECOMPOSITION_FMT_3_OP_U8";
    Base::bc_decomposition_indirect = "BC_DECOMPOSITION_INDIRECT";
    Base::bc_decomposition_op1 = "BC_DECOMPOSITION_OP1";
    Base::bc_decomposition_op2 = "BC_DECOMPOSITION_OP2";
    Base::bc_decomposition_op3 = "BC_DECOMPOSITION_OP3";
    Base::bc_decomposition_op4 = "BC_DECOMPOSITION_OP4";
    Base::bc_decomposition_pc = "BC_DECOMPOSITION_PC";
    Base::bc_decomposition_sel = "BC_DECOMPOSITION_SEL";
    Base::bc_retrieval_address = "BC_RETRIEVAL_ADDRESS";
    Base::bc_retrieval_artifact_hash = "BC_RETRIEVAL_ARTIFACT_HASH";
    Base::bc_retrieval_bytecode_id = "BC_RETRIEVAL_BYTECODE_ID";
    Base::bc_retrieval_class_id = "BC_RETRIEVAL_CLASS_ID";
    Base::bc_retrieval_deployer_addr = "BC_RETRIEVAL_DEPLOYER_ADDR";
    Base::bc_retrieval_err = "BC_RETRIEVAL_ERR";
    Base::bc_retrieval_incoming_viewing_key_x = "BC_RETRIEVAL_INCOMING_VIEWING_KEY_X";
    Base::bc_retrieval_incoming_viewing_key_y = "BC_RETRIEVAL_INCOMING_VIEWING_KEY_Y";
    Base::bc_retrieval_init_hash = "BC_RETRIEVAL_INIT_HASH";
    Base::bc_retrieval_nullifier_key_x = "BC_RETRIEVAL_NULLIFIER_KEY_X";
    Base::bc_retrieval_nullifier_key_y = "BC_RETRIEVAL_NULLIFIER_KEY_Y";
    Base::bc_retrieval_outgoing_viewing_key_x = "BC_RETRIEVAL_OUTGOING_VIEWING_KEY_X";
    Base::bc_retrieval_outgoing_viewing_key_y = "BC_RETRIEVAL_OUTGOING_VIEWING_KEY_Y";
    Base::bc_retrieval_private_function_root = "BC_RETRIEVAL_PRIVATE_FUNCTION_ROOT";
    Base::bc_retrieval_public_bytecode_commitment = "BC_RETRIEVAL_PUBLIC_BYTECODE_COMMITMENT";
    Base::bc_retrieval_salt = "BC_RETRIEVAL_SALT";
    Base::bc_retrieval_sel = "BC_RETRIEVAL_SEL";
    Base::bc_retrieval_tagging_key_x = "BC_RETRIEVAL_TAGGING_KEY_X";
    Base::bc_retrieval_tagging_key_y = "BC_RETRIEVAL_TAGGING_KEY_Y";
    Base::bytecode_bytes = "BYTECODE_BYTES";
    Base::bytecode_bytes_pc_plus_1 = "BYTECODE_BYTES_PC_PLUS_1";
    Base::bytecode_bytes_pc_plus_10 = "BYTECODE_BYTES_PC_PLUS_10";
    Base::bytecode_bytes_pc_plus_11 = "BYTECODE_BYTES_PC_PLUS_11";
    Base::bytecode_bytes_pc_plus_12 = "BYTECODE_BYTES_PC_PLUS_12";
    Base::bytecode_bytes_pc_plus_13 = "BYTECODE_BYTES_PC_PLUS_13";
    Base::bytecode_bytes_pc_plus_14 = "BYTECODE_BYTES_PC_PLUS_14";
    Base::bytecode_bytes_pc_plus_15 = "BYTECODE_BYTES_PC_PLUS_15";
    Base::bytecode_bytes_pc_plus_16 = "BYTECODE_BYTES_PC_PLUS_16";
    Base::bytecode_bytes_pc_plus_17 = "BYTECODE_BYTES_PC_PLUS_17";
    Base::bytecode_bytes_pc_plus_18 = "BYTECODE_BYTES_PC_PLUS_18";
    Base::bytecode_bytes_pc_plus_19 = "BYTECODE_BYTES_PC_PLUS_19";
    Base::bytecode_bytes_pc_plus_2 = "BYTECODE_BYTES_PC_PLUS_2";
    Base::bytecode_bytes_pc_plus_20 = "BYTECODE_BYTES_PC_PLUS_20";
    Base::bytecode_bytes_pc_plus_21 = "BYTECODE_BYTES_PC_PLUS_21";
    Base::bytecode_bytes_pc_plus_22 = "BYTECODE_BYTES_PC_PLUS_22";
    Base::bytecode_bytes_pc_plus_23 = "BYTECODE_BYTES_PC_PLUS_23";
    Base::bytecode_bytes_pc_plus_24 = "BYTECODE_BYTES_PC_PLUS_24";
    Base::bytecode_bytes_pc_plus_25 = "BYTECODE_BYTES_PC_PLUS_25";
    Base::bytecode_bytes_pc_plus_26 = "BYTECODE_BYTES_PC_PLUS_26";
    Base::bytecode_bytes_pc_plus_27 = "BYTECODE_BYTES_PC_PLUS_27";
    Base::bytecode_bytes_pc_plus_28 = "BYTECODE_BYTES_PC_PLUS_28";
    Base::bytecode_bytes_pc_plus_29 = "BYTECODE_BYTES_PC_PLUS_29";
    Base::bytecode_bytes_pc_plus_3 = "BYTECODE_BYTES_PC_PLUS_3";
    Base::bytecode_bytes_pc_plus_30 = "BYTECODE_BYTES_PC_PLUS_30";
    Base::bytecode_bytes_pc_plus_31 = "BYTECODE_BYTES_PC_PLUS_31";
    Base::bytecode_bytes_pc_plus_32 = "BYTECODE_BYTES_PC_PLUS_32";
    Base::bytecode_bytes_pc_plus_33 = "BYTECODE_BYTES_PC_PLUS_33";
    Base::bytecode_bytes_pc_plus_34 = "BYTECODE_BYTES_PC_PLUS_34";
    Base::bytecode_bytes_pc_plus_35 = "BYTECODE_BYTES_PC_PLUS_35";
    Base::bytecode_bytes_pc_plus_4 = "BYTECODE_BYTES_PC_PLUS_4";
    Base::bytecode_bytes_pc_plus_5 = "BYTECODE_BYTES_PC_PLUS_5";
    Base::bytecode_bytes_pc_plus_6 = "BYTECODE_BYTES_PC_PLUS_6";
    Base::bytecode_bytes_pc_plus_7 = "BYTECODE_BYTES_PC_PLUS_7";
    Base::bytecode_bytes_pc_plus_8 = "BYTECODE_BYTES_PC_PLUS_8";
    Base::bytecode_bytes_pc_plus_9 = "BYTECODE_BYTES_PC_PLUS_9";
    Base::bytecode_bytes_remaining = "BYTECODE_BYTES_REMAINING";
    Base::bytecode_bytes_to_read = "BYTECODE_BYTES_TO_READ";
    Base::bytecode_bytes_to_read_unary = "BYTECODE_BYTES_TO_READ_UNARY";
    Base::bytecode_id = "BYTECODE_ID";
    Base::bytecode_last_of_contract = "BYTECODE_LAST_OF_CONTRACT";
    Base::bytecode_pc = "BYTECODE_PC";
    Base::bytecode_sel = "BYTECODE_SEL";
    Base::bytecode_sel_overflow_correction_needed = "BYTECODE_SEL_OVERFLOW_CORRECTION_NEEDED";
    Base::bytecode_sel_pc_plus_0 = "BYTECODE_SEL_PC_PLUS_0";
    Base::bytecode_sel_pc_plus_1 = "BYTECODE_SEL_PC_PLUS_1";
    Base::bytecode_sel_pc_plus_10 = "BYTECODE_SEL_PC_PLUS_10";
    Base::bytecode_sel_pc_plus_11 = "BYTECODE_SEL_PC_PLUS_11";
    Base::bytecode_sel_pc_plus_12 = "BYTECODE_SEL_PC_PLUS_12";
    Base::bytecode_sel_pc_plus_13 = "BYTECODE_SEL_PC_PLUS_13";
    Base::bytecode_sel_pc_plus_14 = "BYTECODE_SEL_PC_PLUS_14";
    Base::bytecode_sel_pc_plus_15 = "BYTECODE_SEL_PC_PLUS_15";
    Base::bytecode_sel_pc_plus_16 = "BYTECODE_SEL_PC_PLUS_16";
    Base::bytecode_sel_pc_plus_17 = "BYTECODE_SEL_PC_PLUS_17";
    Base::bytecode_sel_pc_plus_18 = "BYTECODE_SEL_PC_PLUS_18";
    Base::bytecode_sel_pc_plus_19 = "BYTECODE_SEL_PC_PLUS_19";
    Base::bytecode_sel_pc_plus_2 = "BYTECODE_SEL_PC_PLUS_2";
    Base::bytecode_sel_pc_plus_20 = "BYTECODE_SEL_PC_PLUS_20";
    Base::bytecode_sel_pc_plus_21 = "BYTECODE_SEL_PC_PLUS_21";
    Base::bytecode_sel_pc_plus_22 = "BYTECODE_SEL_PC_PLUS_22";
    Base::bytecode_sel_pc_plus_23 = "BYTECODE_SEL_PC_PLUS_23";
    Base::bytecode_sel_pc_plus_24 = "BYTECODE_SEL_PC_PLUS_24";
    Base::bytecode_sel_pc_plus_25 = "BYTECODE_SEL_PC_PLUS_25";
    Base::bytecode_sel_pc_plus_26 = "BYTECODE_SEL_PC_PLUS_26";
    Base::bytecode_sel_pc_plus_27 = "BYTECODE_SEL_PC_PLUS_27";
    Base::bytecode_sel_pc_plus_28 = "BYTECODE_SEL_PC_PLUS_28";
    Base::bytecode_sel_pc_plus_29 = "BYTECODE_SEL_PC_PLUS_29";
    Base::bytecode_sel_pc_plus_3 = "BYTECODE_SEL_PC_PLUS_3";
    Base::bytecode_sel_pc_plus_30 = "BYTECODE_SEL_PC_PLUS_30";
    Base::bytecode_sel_pc_plus_31 = "BYTECODE_SEL_PC_PLUS_31";
    Base::bytecode_sel_pc_plus_32 = "BYTECODE_SEL_PC_PLUS_32";
    Base::bytecode_sel_pc_plus_33 = "BYTECODE_SEL_PC_PLUS_33";
    Base::bytecode_sel_pc_plus_34 = "BYTECODE_SEL_PC_PLUS_34";
    Base::bytecode_sel_pc_plus_35 = "BYTECODE_SEL_PC_PLUS_35";
    Base::bytecode_sel_pc_plus_4 = "BYTECODE_SEL_PC_PLUS_4";
    Base::bytecode_sel_pc_plus_5 = "BYTECODE_SEL_PC_PLUS_5";
    Base::bytecode_sel_pc_plus_6 = "BYTECODE_SEL_PC_PLUS_6";
    Base::bytecode_sel_pc_plus_7 = "BYTECODE_SEL_PC_PLUS_7";
    Base::bytecode_sel_pc_plus_8 = "BYTECODE_SEL_PC_PLUS_8";
    Base::bytecode_sel_pc_plus_9 = "BYTECODE_SEL_PC_PLUS_9";
    Base::execution_addressing_error_idx = "EXECUTION_ADDRESSING_ERROR_IDX";
    Base::execution_addressing_error_kind = "EXECUTION_ADDRESSING_ERROR_KIND";
    Base::execution_base_address_tag = "EXECUTION_BASE_ADDRESS_TAG";
    Base::execution_base_address_val = "EXECUTION_BASE_ADDRESS_VAL";
    Base::execution_bytecode_id = "EXECUTION_BYTECODE_ID";
    Base::execution_clk = "EXECUTION_CLK";
    Base::execution_ex_opcode = "EXECUTION_EX_OPCODE";
    Base::execution_indirect = "EXECUTION_INDIRECT";
    Base::execution_last = "EXECUTION_LAST";
    Base::execution_op1 = "EXECUTION_OP1";
    Base::execution_op1_after_relative = "EXECUTION_OP1_AFTER_RELATIVE";
    Base::execution_op2 = "EXECUTION_OP2";
    Base::execution_op2_after_relative = "EXECUTION_OP2_AFTER_RELATIVE";
    Base::execution_op3 = "EXECUTION_OP3";
    Base::execution_op3_after_relative = "EXECUTION_OP3_AFTER_RELATIVE";
    Base::execution_op4 = "EXECUTION_OP4";
    Base::execution_op4_after_relative = "EXECUTION_OP4_AFTER_RELATIVE";
    Base::execution_pc = "EXECUTION_PC";
    Base::execution_rop1 = "EXECUTION_ROP1";
    Base::execution_rop2 = "EXECUTION_ROP2";
    Base::execution_rop3 = "EXECUTION_ROP3";
    Base::execution_rop4 = "EXECUTION_ROP4";
    Base::execution_sel = "EXECUTION_SEL";
    Base::execution_sel_addressing_error = "EXECUTION_SEL_ADDRESSING_ERROR";
    Base::execution_sel_op1_is_address = "EXECUTION_SEL_OP1_IS_ADDRESS";
    Base::execution_sel_op2_is_address = "EXECUTION_SEL_OP2_IS_ADDRESS";
    Base::execution_sel_op3_is_address = "EXECUTION_SEL_OP3_IS_ADDRESS";
    Base::execution_sel_op4_is_address = "EXECUTION_SEL_OP4_IS_ADDRESS";
    Base::perm_dummy_dynamic_inv = "PERM_DUMMY_DYNAMIC_INV";
    Base::lookup_dummy_precomputed_inv = "LOOKUP_DUMMY_PRECOMPUTED_INV";
    Base::lookup_dummy_dynamic_inv = "LOOKUP_DUMMY_DYNAMIC_INV";
    Base::lookup_dummy_precomputed_counts = "LOOKUP_DUMMY_PRECOMPUTED_COUNTS";
    Base::lookup_dummy_dynamic_counts = "LOOKUP_DUMMY_DYNAMIC_COUNTS";
};

void AvmFlavor::Transcript::deserialize_full_transcript()
{
    size_t num_frs_read = 0;
    circuit_size = deserialize_from_buffer<uint32_t>(proof_data, num_frs_read);

    for (auto& commitment : commitments) {
        commitment = deserialize_from_buffer<Commitment>(proof_data, num_frs_read);
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        sumcheck_univariates.emplace_back(deserialize_from_buffer<bb::Univariate<FF, BATCHED_RELATION_PARTIAL_LENGTH>>(
            Transcript::proof_data, num_frs_read));
    }

    sumcheck_evaluations =
        deserialize_from_buffer<std::array<FF, NUM_ALL_ENTITIES>>(Transcript::proof_data, num_frs_read);

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {
        gemini_fold_comms.push_back(deserialize_from_buffer<Commitment>(proof_data, num_frs_read));
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        gemini_fold_evals.push_back(deserialize_from_buffer<FF>(proof_data, num_frs_read));
    }

    shplonk_q_comm = deserialize_from_buffer<Commitment>(proof_data, num_frs_read);

    kzg_w_comm = deserialize_from_buffer<Commitment>(proof_data, num_frs_read);
}

void AvmFlavor::Transcript::serialize_full_transcript()
{
    size_t old_proof_length = proof_data.size();
    Transcript::proof_data.clear();

    serialize_to_buffer(circuit_size, Transcript::proof_data);

    for (const auto& commitment : commitments) {
        serialize_to_buffer(commitment, Transcript::proof_data);
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        serialize_to_buffer(sumcheck_univariates[i], Transcript::proof_data);
    }

    serialize_to_buffer(sumcheck_evaluations, Transcript::proof_data);

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {
        serialize_to_buffer(gemini_fold_comms[i], proof_data);
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        serialize_to_buffer(gemini_fold_evals[i], proof_data);
    }

    serialize_to_buffer(shplonk_q_comm, proof_data);
    serialize_to_buffer(kzg_w_comm, proof_data);

    // sanity check to make sure we generate the same length of proof as before.
    ASSERT(proof_data.size() == old_proof_length);
}

AvmFlavor::PartiallyEvaluatedMultivariates::PartiallyEvaluatedMultivariates(const size_t circuit_size)
{
    // Storage is only needed after the first partial evaluation, hence polynomials of size (n / 2)
    for (auto& poly : get_all()) {
        poly = Polynomial(circuit_size / 2);
    }
}

AvmFlavor::ProvingKey::ProvingKey(const size_t circuit_size, const size_t num_public_inputs)
    : circuit_size(circuit_size)
    , evaluation_domain(bb::EvaluationDomain<FF>(circuit_size, circuit_size))
    , commitment_key(std::make_shared<CommitmentKey>(circuit_size + 1))
{
    // TODO: These come from PrecomputedEntitiesBase, ideal we'd just call that class's constructor.
    this->log_circuit_size = numeric::get_msb(circuit_size);
    this->num_public_inputs = num_public_inputs;

    // The proving key's polynomials are not allocated here because they are later overwritten
    // AvmComposer::compute_witness(). We should probably refactor this flow.
};

/**
 * @brief Serialize verification key to field elements
 *
 * @return std::vector<FF>
 */
std::vector<AvmFlavor::VerificationKey::FF> AvmFlavor::VerificationKey::to_field_elements() const
{
    std::vector<FF> elements = { FF(circuit_size), FF(num_public_inputs) };

    for (auto const& comm : get_all()) {
        std::vector<FF> comm_as_fields = field_conversion::convert_to_bn254_frs(comm);
        elements.insert(elements.end(), comm_as_fields.begin(), comm_as_fields.end());
    }
    return elements;
}

} // namespace bb::avm2