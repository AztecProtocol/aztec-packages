// AUTOGENERATED FILE
#include "full_row.hpp"
#include "flavor_settings.hpp"

namespace bb::avm2 {
namespace {

template <typename FF> std::string field_to_string(const FF& ff)
{
    std::ostringstream os;
    os << ff;
    std::string raw = os.str();
    auto first_not_zero = raw.find_first_not_of('0', 2);
    std::string result = "0x" + (first_not_zero != std::string::npos ? raw.substr(first_not_zero) : "0");
    return result;
}

} // namespace

template <typename FF> std::vector<std::string> AvmFullRow<FF>::names()
{
    return { "precomputed_bitwise_input_a",
             "precomputed_bitwise_input_b",
             "precomputed_bitwise_op_id",
             "precomputed_bitwise_output",
             "precomputed_clk",
             "precomputed_first_row",
             "precomputed_sel_bitwise",
             "execution_input",
             "alu_dst_addr",
             "alu_ia",
             "alu_ia_addr",
             "alu_ib",
             "alu_ib_addr",
             "alu_ic",
             "alu_op",
             "alu_sel_op_add",
             "execution_addressing_error_idx",
             "execution_addressing_error_kind",
             "execution_base_address_tag",
             "execution_base_address_val",
             "execution_bytecode_id",
             "execution_clk",
             "execution_ex_opcode",
             "execution_indirect",
             "execution_last",
             "execution_op1",
             "execution_op1_after_relative",
             "execution_op2",
             "execution_op2_after_relative",
             "execution_op3",
             "execution_op3_after_relative",
             "execution_op4",
             "execution_op4_after_relative",
             "execution_pc",
             "execution_rop1",
             "execution_rop2",
             "execution_rop3",
             "execution_rop4",
             "execution_sel",
             "execution_sel_addressing_error",
             "execution_sel_op1_is_address",
             "execution_sel_op2_is_address",
             "execution_sel_op3_is_address",
             "execution_sel_op4_is_address",
             "perm_dummy_dynamic_inv",
             "lookup_dummy_precomputed_inv",
             "lookup_dummy_dynamic_inv",
             "lookup_dummy_precomputed_counts",
             "lookup_dummy_dynamic_counts" };
}

template <typename FF> RefVector<const FF> AvmFullRow<FF>::as_vector() const
{
    return RefVector<const FF>{
        precomputed_bitwise_input_a,
        precomputed_bitwise_input_b,
        precomputed_bitwise_op_id,
        precomputed_bitwise_output,
        precomputed_clk,
        precomputed_first_row,
        precomputed_sel_bitwise,
        execution_input,
        alu_dst_addr,
        alu_ia,
        alu_ia_addr,
        alu_ib,
        alu_ib_addr,
        alu_ic,
        alu_op,
        alu_sel_op_add,
        execution_addressing_error_idx,
        execution_addressing_error_kind,
        execution_base_address_tag,
        execution_base_address_val,
        execution_bytecode_id,
        execution_clk,
        execution_ex_opcode,
        execution_indirect,
        execution_last,
        execution_op1,
        execution_op1_after_relative,
        execution_op2,
        execution_op2_after_relative,
        execution_op3,
        execution_op3_after_relative,
        execution_op4,
        execution_op4_after_relative,
        execution_pc,
        execution_rop1,
        execution_rop2,
        execution_rop3,
        execution_rop4,
        execution_sel,
        execution_sel_addressing_error,
        execution_sel_op1_is_address,
        execution_sel_op2_is_address,
        execution_sel_op3_is_address,
        execution_sel_op4_is_address,
        perm_dummy_dynamic_inv,
        lookup_dummy_precomputed_inv,
        lookup_dummy_dynamic_inv,
        lookup_dummy_precomputed_counts,
        lookup_dummy_dynamic_counts,
    };
}

template <typename FF> std::ostream& operator<<(std::ostream& os, AvmFullRow<FF> const& row)
{
    for (const auto& ff : row.as_vector()) {
        os << field_to_string(ff) << ", ";
    }
    return os;
}

// Explicit template instantiation.
template std::ostream& operator<<(std::ostream& os, AvmFullRow<AvmFlavorSettings::FF> const& row);
template std::vector<std::string> AvmFullRow<AvmFlavorSettings::FF>::names();
template RefVector<const AvmFlavorSettings::FF> AvmFullRow<AvmFlavorSettings::FF>::as_vector() const;

} // namespace bb::avm2
