// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_sha256_mem_check_state_addr_in_range ///////////////////

struct lookup_sha256_mem_check_state_addr_in_range_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_CHECK_STATE_ADDR_IN_RANGE";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel;
    static constexpr Column DST_SELECTOR = Column::gt_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_check_state_addr_in_range_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_check_state_addr_in_range_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_max_state_addr,
        ColumnAndShifts::sha256_max_mem_addr,
        ColumnAndShifts::sha256_sel_state_out_of_range_err
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { ColumnAndShifts::gt_input_a,
                                                                                    ColumnAndShifts::gt_input_b,
                                                                                    ColumnAndShifts::gt_res };
};

using lookup_sha256_mem_check_state_addr_in_range_settings =
    lookup_settings<lookup_sha256_mem_check_state_addr_in_range_settings_>;
template <typename FF_>
using lookup_sha256_mem_check_state_addr_in_range_relation =
    lookup_relation_base<FF_, lookup_sha256_mem_check_state_addr_in_range_settings>;

/////////////////// lookup_sha256_mem_check_input_addr_in_range ///////////////////

struct lookup_sha256_mem_check_input_addr_in_range_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_CHECK_INPUT_ADDR_IN_RANGE";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel;
    static constexpr Column DST_SELECTOR = Column::gt_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_check_input_addr_in_range_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_check_input_addr_in_range_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_max_input_addr,
        ColumnAndShifts::sha256_max_mem_addr,
        ColumnAndShifts::sha256_sel_input_out_of_range_err
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { ColumnAndShifts::gt_input_a,
                                                                                    ColumnAndShifts::gt_input_b,
                                                                                    ColumnAndShifts::gt_res };
};

using lookup_sha256_mem_check_input_addr_in_range_settings =
    lookup_settings<lookup_sha256_mem_check_input_addr_in_range_settings_>;
template <typename FF_>
using lookup_sha256_mem_check_input_addr_in_range_relation =
    lookup_relation_base<FF_, lookup_sha256_mem_check_input_addr_in_range_settings>;

/////////////////// lookup_sha256_mem_check_dst_addr_in_range ///////////////////

struct lookup_sha256_mem_check_dst_addr_in_range_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_CHECK_DST_ADDR_IN_RANGE";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel;
    static constexpr Column DST_SELECTOR = Column::gt_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_check_dst_addr_in_range_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_check_dst_addr_in_range_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_max_dst_addr,
        ColumnAndShifts::sha256_max_mem_addr,
        ColumnAndShifts::sha256_sel_dst_out_of_range_err
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { ColumnAndShifts::gt_input_a,
                                                                                    ColumnAndShifts::gt_input_b,
                                                                                    ColumnAndShifts::gt_res };
};

using lookup_sha256_mem_check_dst_addr_in_range_settings =
    lookup_settings<lookup_sha256_mem_check_dst_addr_in_range_settings_>;
template <typename FF_>
using lookup_sha256_mem_check_dst_addr_in_range_relation =
    lookup_relation_base<FF_, lookup_sha256_mem_check_dst_addr_in_range_settings>;

/////////////////// lookup_sha256_mem_mem_op_0 ///////////////////

struct lookup_sha256_mem_mem_op_0_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_0";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_0_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_0_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_0_,
        ColumnAndShifts::sha256_memory_register_0_, ColumnAndShifts::sha256_memory_tag_0_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_0_settings = lookup_settings<lookup_sha256_mem_mem_op_0_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_0_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_0_settings>;

/////////////////// lookup_sha256_mem_mem_op_1 ///////////////////

struct lookup_sha256_mem_mem_op_1_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_1";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_1_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_1_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_1_,
        ColumnAndShifts::sha256_memory_register_1_, ColumnAndShifts::sha256_memory_tag_1_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_1_settings = lookup_settings<lookup_sha256_mem_mem_op_1_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_1_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_1_settings>;

/////////////////// lookup_sha256_mem_mem_op_2 ///////////////////

struct lookup_sha256_mem_mem_op_2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_2";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_2_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_2_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_2_,
        ColumnAndShifts::sha256_memory_register_2_, ColumnAndShifts::sha256_memory_tag_2_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_2_settings = lookup_settings<lookup_sha256_mem_mem_op_2_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_2_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_2_settings>;

/////////////////// lookup_sha256_mem_mem_op_3 ///////////////////

struct lookup_sha256_mem_mem_op_3_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_3";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_3_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_3_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_3_,
        ColumnAndShifts::sha256_memory_register_3_, ColumnAndShifts::sha256_memory_tag_3_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_3_settings = lookup_settings<lookup_sha256_mem_mem_op_3_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_3_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_3_settings>;

/////////////////// lookup_sha256_mem_mem_op_4 ///////////////////

struct lookup_sha256_mem_mem_op_4_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_4";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_4_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_4_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_4_,
        ColumnAndShifts::sha256_memory_register_4_, ColumnAndShifts::sha256_memory_tag_4_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_4_settings = lookup_settings<lookup_sha256_mem_mem_op_4_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_4_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_4_settings>;

/////////////////// lookup_sha256_mem_mem_op_5 ///////////////////

struct lookup_sha256_mem_mem_op_5_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_5";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_5_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_5_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_5_,
        ColumnAndShifts::sha256_memory_register_5_, ColumnAndShifts::sha256_memory_tag_5_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_5_settings = lookup_settings<lookup_sha256_mem_mem_op_5_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_5_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_5_settings>;

/////////////////// lookup_sha256_mem_mem_op_6 ///////////////////

struct lookup_sha256_mem_mem_op_6_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_6";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_6_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_6_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_6_,
        ColumnAndShifts::sha256_memory_register_6_, ColumnAndShifts::sha256_memory_tag_6_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_6_settings = lookup_settings<lookup_sha256_mem_mem_op_6_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_6_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_6_settings>;

/////////////////// lookup_sha256_mem_mem_op_7 ///////////////////

struct lookup_sha256_mem_mem_op_7_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_OP_7";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_start_and_last;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_op_7_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_op_7_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,      ColumnAndShifts::sha256_memory_address_7_,
        ColumnAndShifts::sha256_memory_register_7_, ColumnAndShifts::sha256_memory_tag_7_,
        ColumnAndShifts::sha256_space_id,           ColumnAndShifts::sha256_latch
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_op_7_settings = lookup_settings<lookup_sha256_mem_mem_op_7_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_op_7_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_op_7_settings>;

/////////////////// lookup_sha256_mem_mem_input_read ///////////////////

struct lookup_sha256_mem_mem_input_read_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SHA256_MEM_MEM_INPUT_READ";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_read_input_from_memory;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_sha256_mem_mem_input_read_counts;
    static constexpr Column INVERSES = Column::lookup_sha256_mem_mem_input_read_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk, ColumnAndShifts::sha256_input_addr, ColumnAndShifts::sha256_input,
        ColumnAndShifts::sha256_input_tag,     ColumnAndShifts::sha256_space_id,   ColumnAndShifts::precomputed_zero
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address,  ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_rw
    };
};

using lookup_sha256_mem_mem_input_read_settings = lookup_settings<lookup_sha256_mem_mem_input_read_settings_>;
template <typename FF_>
using lookup_sha256_mem_mem_input_read_relation = lookup_relation_base<FF_, lookup_sha256_mem_mem_input_read_settings>;

} // namespace bb::avm2
