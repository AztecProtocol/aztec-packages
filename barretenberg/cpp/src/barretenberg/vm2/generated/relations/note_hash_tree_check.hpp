// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class note_hash_tree_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 19> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 4, 3, 3,
                                                                            4, 3, 3, 3, 5, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::note_hash_tree_check_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_NOTE_HASH_TREE_HEIGHT = FF(40);
        const auto constants_AVM_PUBLIC_INPUTS_PREVIOUS_NON_REVERTIBLE_ACCUMULATED_DATA_NULLIFIERS_ROW_IDX = FF(157);
        const auto constants_AVM_PUBLIC_INPUTS_AVM_ACCUMULATED_DATA_NOTE_HASHES_ROW_IDX = FF(375);
        const auto constants_GENERATOR_INDEX__NOTE_HASH_NONCE = FF(2);
        const auto constants_GENERATOR_INDEX__UNIQUE_NOTE_HASH = FF(3);
        const auto constants_GENERATOR_INDEX__SILOED_NOTE_HASH = FF(4);
        const auto note_hash_tree_check_READ = (FF(1) - in.get(C::note_hash_tree_check_write));
        const auto note_hash_tree_check_PREV_LEAF_VALUE_UNIQUE_NOTE_HASH_DIFF =
            (in.get(C::note_hash_tree_check_prev_leaf_value) - in.get(C::note_hash_tree_check_unique_note_hash));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_sel) * (FF(1) - in.get(C::note_hash_tree_check_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_write) * (FF(1) - in.get(C::note_hash_tree_check_write));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::note_hash_tree_check_should_silo) * (FF(1) - in.get(C::note_hash_tree_check_should_silo));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::note_hash_tree_check_should_unique) * (FF(1) - in.get(C::note_hash_tree_check_should_unique));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_write) * (FF(1) - in.get(C::note_hash_tree_check_sel));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // DISABLE_SILOING_ON_READ
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = note_hash_tree_check_READ * in.get(C::note_hash_tree_check_should_silo);
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::note_hash_tree_check_should_silo) * (FF(1) - in.get(C::note_hash_tree_check_should_unique));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // PASSTHROUGH_SILOING
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_sel) * (FF(1) - in.get(C::note_hash_tree_check_should_silo)) *
                       (in.get(C::note_hash_tree_check_note_hash) - in.get(C::note_hash_tree_check_siloed_note_hash));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_sel) * (constants_GENERATOR_INDEX__SILOED_NOTE_HASH -
                                                              in.get(C::note_hash_tree_check_siloing_separator));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // DISABLE_UNIQUENESS_ON_READ
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = note_hash_tree_check_READ * in.get(C::note_hash_tree_check_should_unique);
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // PASSTHROUGH_UNIQUENESS
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::note_hash_tree_check_sel) * (FF(1) - in.get(C::note_hash_tree_check_should_unique)) *
                (in.get(C::note_hash_tree_check_siloed_note_hash) - in.get(C::note_hash_tree_check_unique_note_hash));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_sel) *
                       (constants_AVM_PUBLIC_INPUTS_PREVIOUS_NON_REVERTIBLE_ACCUMULATED_DATA_NULLIFIERS_ROW_IDX -
                        in.get(C::note_hash_tree_check_first_nullifier_pi_index));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_sel) *
                       (constants_GENERATOR_INDEX__NOTE_HASH_NONCE - in.get(C::note_hash_tree_check_nonce_separator));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::note_hash_tree_check_sel) * (constants_GENERATOR_INDEX__UNIQUE_NOTE_HASH -
                                                       in.get(C::note_hash_tree_check_unique_note_hash_separator));
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_sel) *
                       ((note_hash_tree_check_PREV_LEAF_VALUE_UNIQUE_NOTE_HASH_DIFF *
                             (in.get(C::note_hash_tree_check_exists) *
                                  (FF(1) - in.get(C::note_hash_tree_check_prev_leaf_value_unique_note_hash_diff_inv)) +
                              in.get(C::note_hash_tree_check_prev_leaf_value_unique_note_hash_diff_inv)) -
                         FF(1)) +
                        in.get(C::note_hash_tree_check_exists));
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_write) * (in.get(C::note_hash_tree_check_unique_note_hash) -
                                                                in.get(C::note_hash_tree_check_next_leaf_value));
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_sel) *
                       (constants_NOTE_HASH_TREE_HEIGHT - in.get(C::note_hash_tree_check_note_hash_tree_height));
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp = (in.get(C::note_hash_tree_check_write) * (FF(1) - in.get(C::note_hash_tree_check_discard)) -
                        in.get(C::note_hash_tree_check_should_write_to_public_inputs));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
            auto tmp = in.get(C::note_hash_tree_check_should_write_to_public_inputs) *
                       ((constants_AVM_PUBLIC_INPUTS_AVM_ACCUMULATED_DATA_NOTE_HASHES_ROW_IDX +
                         in.get(C::note_hash_tree_check_note_hash_index)) -
                        in.get(C::note_hash_tree_check_public_inputs_index));
            tmp *= scaling_factor;
            std::get<18>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class note_hash_tree_check : public Relation<note_hash_tree_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "note_hash_tree_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 5:
            return "DISABLE_SILOING_ON_READ";
        case 7:
            return "PASSTHROUGH_SILOING";
        case 9:
            return "DISABLE_UNIQUENESS_ON_READ";
        case 10:
            return "PASSTHROUGH_UNIQUENESS";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_DISABLE_SILOING_ON_READ = 5;
    static constexpr size_t SR_PASSTHROUGH_SILOING = 7;
    static constexpr size_t SR_DISABLE_UNIQUENESS_ON_READ = 9;
    static constexpr size_t SR_PASSTHROUGH_UNIQUENESS = 10;
};

} // namespace bb::avm2
