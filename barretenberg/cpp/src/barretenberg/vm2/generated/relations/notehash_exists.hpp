// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class notehash_existsImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 3> SUBRELATION_PARTIAL_LENGTHS = { 4, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_notehash_exists)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_NOTE_HASH_TREE_LEAF_COUNT = FF(1099511627776UL);
        const auto constants_MEM_TAG_U1 = FF(1);
        const auto execution_LEAF_INDEX_GTE_NOTE_HASH_LEAF_COUNT =
            (in.get(C::execution_register_1_) - constants_NOTE_HASH_TREE_LEAF_COUNT);
        const auto execution_LEAF_INDEX_LT_NOTE_HASH_LEAF_COUNT =
            ((constants_NOTE_HASH_TREE_LEAF_COUNT - in.get(C::execution_register_1_)) - FF(1));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_notehash_exists) *
                (((execution_LEAF_INDEX_LT_NOTE_HASH_LEAF_COUNT - execution_LEAF_INDEX_GTE_NOTE_HASH_LEAF_COUNT) *
                      in.get(C::execution_note_hash_leaf_in_range) +
                  execution_LEAF_INDEX_GTE_NOTE_HASH_LEAF_COUNT) -
                 in.get(C::execution_note_hash_leaf_index_leaf_count_cmp_diff));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // NOTE_HASH_EXISTS_SUCCESS
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_notehash_exists) *
                       ((FF(1) - in.get(C::execution_note_hash_leaf_in_range)) - in.get(C::execution_sel_opcode_error));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // NOTEHASH_EXISTS_U1_OUTPUT_TAG
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_notehash_exists) * (constants_MEM_TAG_U1 - in.get(C::execution_mem_tag_reg_2_));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class notehash_exists : public Relation<notehash_existsImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "notehash_exists";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "NOTE_HASH_EXISTS_SUCCESS";
        case 2:
            return "NOTEHASH_EXISTS_U1_OUTPUT_TAG";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_NOTE_HASH_EXISTS_SUCCESS = 1;
    static constexpr size_t SR_NOTEHASH_EXISTS_U1_OUTPUT_TAG = 2;
};

} // namespace bb::avm2
