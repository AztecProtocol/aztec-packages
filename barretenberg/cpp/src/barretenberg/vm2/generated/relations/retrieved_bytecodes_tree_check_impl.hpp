// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/retrieved_bytecodes_tree_check.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void retrieved_bytecodes_tree_checkImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                                         const AllEntities& in,
                                                         [[maybe_unused]] const RelationParameters<FF_>&,
                                                         [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    PROFILE_THIS_NAME("accumulate/retrieved_bytecodes_tree_check");

    const auto constants_AVM_RETRIEVED_BYTECODES_TREE_HEIGHT = FF(5);
    const auto retrieved_bytecodes_tree_check_EXISTS =
        (FF(1) - in.get(C::retrieved_bytecodes_tree_check_leaf_not_exists));
    const auto retrieved_bytecodes_tree_check_CLASS_ID_LOW_LEAF_CLASS_ID_DIFF =
        (in.get(C::retrieved_bytecodes_tree_check_class_id) -
         in.get(C::retrieved_bytecodes_tree_check_low_leaf_class_id));
    const auto retrieved_bytecodes_tree_check_NEXT_CLASS_ID_IS_ZERO =
        (FF(1) - in.get(C::retrieved_bytecodes_tree_check_next_class_id_is_nonzero));

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::retrieved_bytecodes_tree_check_sel) * (FF(1) - in.get(C::retrieved_bytecodes_tree_check_sel));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::retrieved_bytecodes_tree_check_write) * (FF(1) - in.get(C::retrieved_bytecodes_tree_check_write));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp = in.get(C::retrieved_bytecodes_tree_check_leaf_not_exists) *
                   (FF(1) - in.get(C::retrieved_bytecodes_tree_check_leaf_not_exists));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = (in.get(C::retrieved_bytecodes_tree_check_should_insert) -
                    in.get(C::retrieved_bytecodes_tree_check_write) *
                        in.get(C::retrieved_bytecodes_tree_check_leaf_not_exists));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::retrieved_bytecodes_tree_check_write) * retrieved_bytecodes_tree_check_EXISTS *
            (in.get(C::retrieved_bytecodes_tree_check_root) - in.get(C::retrieved_bytecodes_tree_check_write_root));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = (in.get(C::retrieved_bytecodes_tree_check_tree_size_after_write) -
                    (in.get(C::retrieved_bytecodes_tree_check_tree_size_before_write) +
                     in.get(C::retrieved_bytecodes_tree_check_should_insert)));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = in.get(C::retrieved_bytecodes_tree_check_should_insert) *
                   (in.get(C::retrieved_bytecodes_tree_check_tree_size_before_write) -
                    in.get(C::retrieved_bytecodes_tree_check_updated_low_leaf_next_index));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = in.get(C::retrieved_bytecodes_tree_check_should_insert) *
                   (in.get(C::retrieved_bytecodes_tree_check_class_id) -
                    in.get(C::retrieved_bytecodes_tree_check_updated_low_leaf_next_class_id));
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::retrieved_bytecodes_tree_check_sel) *
            (constants_AVM_RETRIEVED_BYTECODES_TREE_HEIGHT - in.get(C::retrieved_bytecodes_tree_check_tree_height));
        tmp *= scaling_factor;
        std::get<8>(evals) += typename Accumulator::View(tmp);
    }
    { // EXISTS_CHECK
        using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
        auto tmp = in.get(C::retrieved_bytecodes_tree_check_sel) *
                   ((retrieved_bytecodes_tree_check_CLASS_ID_LOW_LEAF_CLASS_ID_DIFF *
                         (retrieved_bytecodes_tree_check_EXISTS *
                              (FF(1) - in.get(C::retrieved_bytecodes_tree_check_class_id_low_leaf_class_id_diff_inv)) +
                          in.get(C::retrieved_bytecodes_tree_check_class_id_low_leaf_class_id_diff_inv)) -
                     FF(1)) +
                    retrieved_bytecodes_tree_check_EXISTS);
        tmp *= scaling_factor;
        std::get<9>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
        auto tmp = in.get(C::retrieved_bytecodes_tree_check_next_class_id_is_nonzero) *
                   (FF(1) - in.get(C::retrieved_bytecodes_tree_check_next_class_id_is_nonzero));
        tmp *= scaling_factor;
        std::get<10>(evals) += typename Accumulator::View(tmp);
    }
    { // NEXT_CLASS_ID_IS_ZERO_CHECK
        using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
        auto tmp = in.get(C::retrieved_bytecodes_tree_check_leaf_not_exists) *
                   ((in.get(C::retrieved_bytecodes_tree_check_low_leaf_next_class_id) *
                         (retrieved_bytecodes_tree_check_NEXT_CLASS_ID_IS_ZERO *
                              (FF(1) - in.get(C::retrieved_bytecodes_tree_check_next_class_id_inv)) +
                          in.get(C::retrieved_bytecodes_tree_check_next_class_id_inv)) -
                     FF(1)) +
                    retrieved_bytecodes_tree_check_NEXT_CLASS_ID_IS_ZERO);
        tmp *= scaling_factor;
        std::get<11>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
