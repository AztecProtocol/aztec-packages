// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class get_env_varImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 7> SUBRELATION_PARTIAL_LENGTHS = { 4, 4, 4, 4, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_execute_get_env_var)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class get_env_var : public Relation<get_env_varImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "get_env_var";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "FROM_PUBLIC_INPUTS";
        case 1:
            return "ADDRESS_FROM_CONTEXT";
        case 2:
            return "SENDER_FROM_CONTEXT";
        case 3:
            return "TRANSACTION_FEE_FROM_CONTEXT";
        case 4:
            return "ISSTATICCALL_FROM_CONTEXT";
        case 5:
            return "L2GASLEFT_FROM_GAS";
        case 6:
            return "DAGASLEFT_FROM_GAS";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_FROM_PUBLIC_INPUTS = 0;
    static constexpr size_t SR_ADDRESS_FROM_CONTEXT = 1;
    static constexpr size_t SR_SENDER_FROM_CONTEXT = 2;
    static constexpr size_t SR_TRANSACTION_FEE_FROM_CONTEXT = 3;
    static constexpr size_t SR_ISSTATICCALL_FROM_CONTEXT = 4;
    static constexpr size_t SR_L2GASLEFT_FROM_GAS = 5;
    static constexpr size_t SR_DAGASLEFT_FROM_GAS = 6;
};

} // namespace bb::avm2
