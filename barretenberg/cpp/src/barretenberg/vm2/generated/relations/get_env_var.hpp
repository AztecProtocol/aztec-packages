// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class get_env_varImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 12> SUBRELATION_PARTIAL_LENGTHS = { 3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto execution_TRY_GET_ENV_VAR =
            in.get(C::execution_sel_should_resolve_address) * (FF(1) - in.get(C::execution_sel_addressing_error));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_should_get_env_var) * (FF(1) - in.get(C::execution_sel_should_get_env_var));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // SHOULD_TRY_TO_GET_ENV_IF_NO_ERRORS
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_get_env_var) * execution_TRY_GET_ENV_VAR *
                       (FF(1) - in.get(C::execution_opcode_error)) *
                       (FF(1) - in.get(C::execution_sel_should_get_env_var));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // SHOULD_NOT_TRY_TO_GET_ENV_ON_ERROR
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = ((FF(1) - execution_TRY_GET_ENV_VAR) + in.get(C::execution_opcode_error)) *
                       in.get(C::execution_sel_should_get_env_var);
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // SET_OUTPUT_REGISTER_TO_0_ON_ERROR
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_get_env_var) * (FF(1) - in.get(C::execution_sel_should_get_env_var)) *
                       in.get(C::execution_register_0_);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // FROM_PI_COL0
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_envvar_pi_lookup) * (FF(1) - in.get(C::execution_is_feeperl2gas)) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_value_from_pi_col0));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // FROM_PI_COL1
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_envvar_pi_lookup) * in.get(C::execution_is_feeperl2gas) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_value_from_pi_col1));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // ADDRESS_FROM_CONTEXT
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_get_env_var) * in.get(C::execution_is_address) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_contract_address));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // SENDER_FROM_CONTEXT
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_get_env_var) * in.get(C::execution_is_sender) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_msg_sender));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // TRANSACTION_FEE_FROM_CONTEXT
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_get_env_var) * in.get(C::execution_is_transactionfee) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_transaction_fee));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // ISSTATICCALL_FROM_CONTEXT
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_get_env_var) * in.get(C::execution_is_isstaticcall) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_is_static));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // L2GASLEFT_FROM_GAS
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_get_env_var) * in.get(C::execution_is_l2gasleft) *
                       (in.get(C::execution_register_0_) -
                        (in.get(C::execution_l2_gas_limit) - in.get(C::execution_l2_gas_used)));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        { // DAGASLEFT_FROM_GAS
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_get_env_var) * in.get(C::execution_is_dagasleft) *
                       (in.get(C::execution_register_0_) -
                        (in.get(C::execution_da_gas_limit) - in.get(C::execution_da_gas_used)));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class get_env_var : public Relation<get_env_varImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "get_env_var";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "SHOULD_TRY_TO_GET_ENV_IF_NO_ERRORS";
        case 2:
            return "SHOULD_NOT_TRY_TO_GET_ENV_ON_ERROR";
        case 3:
            return "SET_OUTPUT_REGISTER_TO_0_ON_ERROR";
        case 4:
            return "FROM_PI_COL0";
        case 5:
            return "FROM_PI_COL1";
        case 6:
            return "ADDRESS_FROM_CONTEXT";
        case 7:
            return "SENDER_FROM_CONTEXT";
        case 8:
            return "TRANSACTION_FEE_FROM_CONTEXT";
        case 9:
            return "ISSTATICCALL_FROM_CONTEXT";
        case 10:
            return "L2GASLEFT_FROM_GAS";
        case 11:
            return "DAGASLEFT_FROM_GAS";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SHOULD_TRY_TO_GET_ENV_IF_NO_ERRORS = 1;
    static constexpr size_t SR_SHOULD_NOT_TRY_TO_GET_ENV_ON_ERROR = 2;
    static constexpr size_t SR_SET_OUTPUT_REGISTER_TO_0_ON_ERROR = 3;
    static constexpr size_t SR_FROM_PI_COL0 = 4;
    static constexpr size_t SR_FROM_PI_COL1 = 5;
    static constexpr size_t SR_ADDRESS_FROM_CONTEXT = 6;
    static constexpr size_t SR_SENDER_FROM_CONTEXT = 7;
    static constexpr size_t SR_TRANSACTION_FEE_FROM_CONTEXT = 8;
    static constexpr size_t SR_ISSTATICCALL_FROM_CONTEXT = 9;
    static constexpr size_t SR_L2GASLEFT_FROM_GAS = 10;
    static constexpr size_t SR_DAGASLEFT_FROM_GAS = 11;
};

} // namespace bb::avm2
