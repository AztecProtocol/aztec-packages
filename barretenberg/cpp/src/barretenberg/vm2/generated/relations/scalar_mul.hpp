// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class scalar_mulImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 32> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                                                            2, 2, 2, 4, 4, 4, 3, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::scalar_mul_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class scalar_mul : public Relation<scalar_mulImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "scalar_mul";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 5:
            return "START_AFTER_LATCH";
        case 6:
            return "SELECTOR_ON_START";
        case 7:
            return "SELECTOR_CONSISTENCY";
        case 11:
            return "INPUT_CONSISTENCY_X";
        case 12:
            return "INPUT_CONSISTENCY_Y";
        case 13:
            return "INPUT_CONSISTENCY_INF";
        case 14:
            return "INPUT_CONSISTENCY_SCALAR";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_START_AFTER_LATCH = 5;
    static constexpr size_t SR_SELECTOR_ON_START = 6;
    static constexpr size_t SR_SELECTOR_CONSISTENCY = 7;
    static constexpr size_t SR_INPUT_CONSISTENCY_X = 11;
    static constexpr size_t SR_INPUT_CONSISTENCY_Y = 12;
    static constexpr size_t SR_INPUT_CONSISTENCY_INF = 13;
    static constexpr size_t SR_INPUT_CONSISTENCY_SCALAR = 14;
};

} // namespace bb::avm2
