// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"

namespace bb::avm2 {

template <typename FF_> class scalar_mulImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 32> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                                                            2, 2, 2, 4, 4, 4, 3, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        const auto& new_term = in;
        return (new_term.scalar_mul_sel).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& new_term,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        const auto scalar_mul_LATCH_CONDITION = new_term.scalar_mul_end + new_term.precomputed_first_row;
        const auto scalar_mul_should_pass = new_term.scalar_mul_not_end * (FF(1) - new_term.scalar_mul_bit);

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_sel * (FF(1) - new_term.scalar_mul_sel);
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_point_inf * (FF(1) - new_term.scalar_mul_point_inf);
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_start * (FF(1) - new_term.scalar_mul_start);
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end * (FF(1) - new_term.scalar_mul_end);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end * new_term.precomputed_first_row;
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_sel_shift * (new_term.scalar_mul_start_shift - scalar_mul_LATCH_CONDITION);
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_start * (FF(1) - new_term.scalar_mul_sel);
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = (new_term.scalar_mul_sel_shift - new_term.scalar_mul_sel) * (FF(1) - scalar_mul_LATCH_CONDITION);
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end * (FF(1) - new_term.scalar_mul_sel);
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = (new_term.scalar_mul_not_end - new_term.scalar_mul_sel * (FF(1) - new_term.scalar_mul_end));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = ((new_term.scalar_mul_end + new_term.scalar_mul_not_end) - new_term.scalar_mul_sel);
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_not_end * (new_term.scalar_mul_point_x - new_term.scalar_mul_point_x_shift);
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_not_end * (new_term.scalar_mul_point_y - new_term.scalar_mul_point_y_shift);
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp =
                new_term.scalar_mul_not_end * (new_term.scalar_mul_point_inf - new_term.scalar_mul_point_inf_shift);
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_not_end * (new_term.scalar_mul_scalar - new_term.scalar_mul_scalar_shift);
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_start * (new_term.scalar_mul_bit_idx - FF(253));
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end * new_term.scalar_mul_bit_idx;
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_not_end *
                       (new_term.scalar_mul_bit_idx - (new_term.scalar_mul_bit_idx_shift + FF(1)));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_sel * (new_term.scalar_mul_bit_radix - FF(2));
            tmp *= scaling_factor;
            std::get<18>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<19, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end * (new_term.scalar_mul_temp_x - new_term.scalar_mul_point_x);
            tmp *= scaling_factor;
            std::get<19>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<20, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end * (new_term.scalar_mul_temp_y - new_term.scalar_mul_point_y);
            tmp *= scaling_factor;
            std::get<20>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<21, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end * (new_term.scalar_mul_temp_inf - new_term.scalar_mul_point_inf);
            tmp *= scaling_factor;
            std::get<21>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<22, ContainerOverSubrelations>;
            auto tmp = (new_term.scalar_mul_temp_x_shift - new_term.scalar_mul_temp_x_shift);
            tmp *= scaling_factor;
            std::get<22>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<23, ContainerOverSubrelations>;
            auto tmp = (new_term.scalar_mul_temp_y_shift - new_term.scalar_mul_temp_y_shift);
            tmp *= scaling_factor;
            std::get<23>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<24, ContainerOverSubrelations>;
            auto tmp = (new_term.scalar_mul_temp_inf_shift - new_term.scalar_mul_temp_inf_shift);
            tmp *= scaling_factor;
            std::get<24>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<25, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end *
                       (new_term.scalar_mul_point_x * new_term.scalar_mul_bit - new_term.scalar_mul_res_x);
            tmp *= scaling_factor;
            std::get<25>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<26, ContainerOverSubrelations>;
            auto tmp = new_term.scalar_mul_end *
                       (new_term.scalar_mul_point_y * new_term.scalar_mul_bit - new_term.scalar_mul_res_y);
            tmp *= scaling_factor;
            std::get<26>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<27, ContainerOverSubrelations>;
            auto tmp =
                new_term.scalar_mul_end * (((new_term.scalar_mul_point_inf - FF(1)) * new_term.scalar_mul_bit + FF(1)) -
                                           new_term.scalar_mul_res_inf);
            tmp *= scaling_factor;
            std::get<27>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<28, ContainerOverSubrelations>;
            auto tmp = (new_term.scalar_mul_should_add - new_term.scalar_mul_not_end * new_term.scalar_mul_bit);
            tmp *= scaling_factor;
            std::get<28>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<29, ContainerOverSubrelations>;
            auto tmp = scalar_mul_should_pass * (new_term.scalar_mul_res_x - new_term.scalar_mul_res_x_shift);
            tmp *= scaling_factor;
            std::get<29>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<30, ContainerOverSubrelations>;
            auto tmp = scalar_mul_should_pass * (new_term.scalar_mul_res_y - new_term.scalar_mul_res_y_shift);
            tmp *= scaling_factor;
            std::get<30>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<31, ContainerOverSubrelations>;
            auto tmp = scalar_mul_should_pass * (new_term.scalar_mul_res_inf - new_term.scalar_mul_res_inf_shift);
            tmp *= scaling_factor;
            std::get<31>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class scalar_mul : public Relation<scalar_mulImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "scalar_mul";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 5:
            return "START_AFTER_LATCH";
        case 6:
            return "SELECTOR_ON_START";
        case 7:
            return "SELECTOR_CONSISTENCY";
        case 11:
            return "INPUT_CONSISTENCY_X";
        case 12:
            return "INPUT_CONSISTENCY_Y";
        case 13:
            return "INPUT_CONSISTENCY_INF";
        case 14:
            return "INPUT_CONSISTENCY_SCALAR";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_START_AFTER_LATCH = 5;
    static constexpr size_t SR_SELECTOR_ON_START = 6;
    static constexpr size_t SR_SELECTOR_CONSISTENCY = 7;
    static constexpr size_t SR_INPUT_CONSISTENCY_X = 11;
    static constexpr size_t SR_INPUT_CONSISTENCY_Y = 12;
    static constexpr size_t SR_INPUT_CONSISTENCY_INF = 13;
    static constexpr size_t SR_INPUT_CONSISTENCY_SCALAR = 14;
};

} // namespace bb::avm2