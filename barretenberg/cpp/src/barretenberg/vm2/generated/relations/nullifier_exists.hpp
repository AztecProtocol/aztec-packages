// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class nullifier_existsImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 2> SUBRELATION_PARTIAL_LENGTHS = { 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_execute_nullifier_exists)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class nullifier_exists : public Relation<nullifier_existsImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "nullifier_exists";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "NULLIFIER_EXISTS_U1_OUTPUT_TAG";
        case 1:
            return "NULLIFIER_EXISTS_SUCCESS";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_NULLIFIER_EXISTS_U1_OUTPUT_TAG = 0;
    static constexpr size_t SR_NULLIFIER_EXISTS_SUCCESS = 1;
};

} // namespace bb::avm2
