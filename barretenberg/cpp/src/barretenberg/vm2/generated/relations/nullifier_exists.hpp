// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class nullifier_existsImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 3> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_nullifier_exists)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_U1 = FF(1);

        { // SHOULD_DO_NULLIFIER_EXISTS
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_should_do_nullifier_exists) -
                        in.get(C::execution_sel_nullifier_exists) * in.get(C::execution_should_execute_opcode));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // NULLIFIER_EXISTS_U1_TAG
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_do_nullifier_exists) *
                       (constants_MEM_TAG_U1 - in.get(C::execution_mem_tag_reg_2_));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // NULLIFIER_EXISTS_HAS_NO_OPCODE_ERROR
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_opcode_error) * in.get(C::execution_sel_should_do_nullifier_exists);
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class nullifier_exists : public Relation<nullifier_existsImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "nullifier_exists";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "SHOULD_DO_NULLIFIER_EXISTS";
        case 1:
            return "NULLIFIER_EXISTS_U1_TAG";
        case 2:
            return "NULLIFIER_EXISTS_HAS_NO_OPCODE_ERROR";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SHOULD_DO_NULLIFIER_EXISTS = 0;
    static constexpr size_t SR_NULLIFIER_EXISTS_U1_TAG = 1;
    static constexpr size_t SR_NULLIFIER_EXISTS_HAS_NO_OPCODE_ERROR = 2;
};

} // namespace bb::avm2
