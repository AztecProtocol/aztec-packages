// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class merkle_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 25> SUBRELATION_PARTIAL_LENGTHS = { 3, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
                                                                            3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::merkle_check_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class merkle_check : public Relation<merkle_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "merkle_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "TRACE_CONTINUITY";
        case 6:
            return "START_AFTER_LATCH";
        case 7:
            return "SELECTOR_ON_END";
        case 8:
            return "PROPAGATE_READ_ROOT";
        case 9:
            return "PROPAGATE_WRITE";
        case 10:
            return "PROPAGATE_WRITE_ROOT";
        case 11:
            return "PATH_LEN_DECREMENTS";
        case 12:
            return "END_WHEN_PATH_EMPTY";
        case 14:
            return "NEXT_INDEX_IS_HALVED";
        case 15:
            return "FINAL_INDEX_IS_0_OR_1";
        case 16:
            return "ASSIGN_NODE_LEFT_OR_RIGHT_READ";
        case 17:
            return "ASSIGN_SIBLING_LEFT_OR_RIGHT_READ";
        case 18:
            return "ASSIGN_NODE_LEFT_OR_RIGHT_WRITE";
        case 19:
            return "ASSIGN_SIBLING_LEFT_OR_RIGHT_WRITE";
        case 21:
            return "OUTPUT_HASH_IS_NEXT_ROWS_READ_NODE";
        case 22:
            return "OUTPUT_HASH_IS_NEXT_ROWS_WRITE_NODE";
        case 23:
            return "READ_OUTPUT_HASH_IS_READ_ROOT";
        case 24:
            return "WRITE_OUTPUT_HASH_IS_WRITE_ROOT";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_TRACE_CONTINUITY = 1;
    static constexpr size_t SR_START_AFTER_LATCH = 6;
    static constexpr size_t SR_SELECTOR_ON_END = 7;
    static constexpr size_t SR_PROPAGATE_READ_ROOT = 8;
    static constexpr size_t SR_PROPAGATE_WRITE = 9;
    static constexpr size_t SR_PROPAGATE_WRITE_ROOT = 10;
    static constexpr size_t SR_PATH_LEN_DECREMENTS = 11;
    static constexpr size_t SR_END_WHEN_PATH_EMPTY = 12;
    static constexpr size_t SR_NEXT_INDEX_IS_HALVED = 14;
    static constexpr size_t SR_FINAL_INDEX_IS_0_OR_1 = 15;
    static constexpr size_t SR_ASSIGN_NODE_LEFT_OR_RIGHT_READ = 16;
    static constexpr size_t SR_ASSIGN_SIBLING_LEFT_OR_RIGHT_READ = 17;
    static constexpr size_t SR_ASSIGN_NODE_LEFT_OR_RIGHT_WRITE = 18;
    static constexpr size_t SR_ASSIGN_SIBLING_LEFT_OR_RIGHT_WRITE = 19;
    static constexpr size_t SR_OUTPUT_HASH_IS_NEXT_ROWS_READ_NODE = 21;
    static constexpr size_t SR_OUTPUT_HASH_IS_NEXT_ROWS_WRITE_NODE = 22;
    static constexpr size_t SR_READ_OUTPUT_HASH_IS_READ_ROOT = 23;
    static constexpr size_t SR_WRITE_OUTPUT_HASH_IS_WRITE_ROOT = 24;
};

} // namespace bb::avm2
