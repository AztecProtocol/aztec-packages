// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class contextImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 76> SUBRELATION_PARTIAL_LENGTHS = {
        2, 3, 3, 3, 4, 3, 3, 4, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 3, 5, 6, 6, 5, 5,
        5, 5, 6, 5, 3, 5, 6, 5, 3, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5
    };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class context : public Relation<contextImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "context";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 6:
            return "ENQUEUED_CALL_START_NEXT_CTX_ID";
        case 7:
            return "INCR_NEXT_CONTEXT_ID";
        case 8:
            return "CONTEXT_ID_NEXT_ROW";
        case 9:
            return "CONTEXT_ID_EXT_CALL";
        case 10:
            return "CONTEXT_ID_NESTED_EXIT";
        case 11:
            return "PARENT_ID_NEXT_ROW";
        case 13:
            return "PC_NEXT_ROW_DEFAULT";
        case 14:
            return "PC_NEXT_ROW_EXT_CALL";
        case 15:
            return "MSG_SENDER_NEXT_ROW";
        case 17:
            return "CONTRACT_ADDR_NEXT_ROW";
        case 19:
            return "BYTECODE_ID_NEXT_ROW";
        case 20:
            return "TRANSACTION_FEE_NEXT_ROW";
        case 21:
            return "IS_STATIC_NEXT_ROW";
        case 22:
            return "IS_STATIC_IF_STATIC_CALL";
        case 23:
            return "IS_STATIC_IF_CALL_FROM_STATIC_CONTEXT";
        case 24:
            return "CD_OFFSET_NEXT_ROW";
        case 26:
            return "CD_SIZE_NEXT_ROW";
        case 28:
            return "RET_REV_RD_ADDR";
        case 29:
            return "NEXT_RD_ADDR_IS_ZERO";
        case 30:
            return "RD_ADDR_IS_ZERO";
        case 31:
            return "PROPAGATE_RD_ADDR";
        case 32:
            return "RET_REV_RD_SIZE";
        case 33:
            return "NEXT_RD_SIZE_IS_ZERO";
        case 34:
            return "RD_SIZE_IS_ZERO";
        case 35:
            return "PROPAGATE_RD_SIZE";
        case 36:
            return "EXIT_CALL_LAST_CHILD_ID";
        case 37:
            return "ENTER_CALL_LAST_CHILD_ID";
        case 38:
            return "LAST_CHILD_ID_IS_ZERO";
        case 39:
            return "PROPAGATE_LAST_CHILD_ID";
        case 40:
            return "L2_GAS_LIMIT_NEXT_ROW";
        case 41:
            return "L2_GAS_LIMIT_RESTORE_ON_EXIT";
        case 42:
            return "DA_GAS_LIMIT_NEXT_ROW";
        case 43:
            return "DA_GAS_LIMIT_RESTORE_ON_EXIT";
        case 44:
            return "PARENT_L2_GAS_LIMIT_NEXT_ROW";
        case 45:
            return "PARENT_L2_GAS_LIMIT_STORE_ON_ENTER";
        case 46:
            return "PARENT_DA_GAS_LIMIT_NEXT_ROW";
        case 47:
            return "PARENT_DA_GAS_LIMIT_STORE_ON_ENTER";
        case 48:
            return "PARENT_L2_GAS_USED_NEXT_ROW";
        case 49:
            return "PARENT_L2_GAS_USED_STORE_ON_ENTER";
        case 50:
            return "PARENT_DA_GAS_USED_NEXT_ROW";
        case 51:
            return "PARENT_DA_GAS_USED_STORE_ON_ENTER";
        case 57:
            return "L2_GAS_USED_CONTINUITY";
        case 58:
            return "L2_GAS_USED_ZERO_AFTER_CALL";
        case 59:
            return "L2_GAS_USED_INGEST_AFTER_EXIT";
        case 60:
            return "DA_GAS_USED_CONTINUITY";
        case 61:
            return "DA_GAS_USED_ZERO_AFTER_CALL";
        case 62:
            return "DA_GAS_USED_INGEST_AFTER_EXIT";
        case 63:
            return "NOTE_HASH_TREE_ROOT_CONTINUITY";
        case 64:
            return "NOTE_HASH_TREE_SIZE_CONTINUITY";
        case 65:
            return "NUM_NOTE_HASHES_EMITTED_CONTINUITY";
        case 66:
            return "NULLIFIER_TREE_ROOT_CONTINUITY";
        case 67:
            return "NULLIFIER_TREE_SIZE_CONTINUITY";
        case 68:
            return "NUM_NULLIFIERS_EMITTED_CONTINUITY";
        case 69:
            return "PUBLIC_DATA_TREE_ROOT_CONTINUITY";
        case 70:
            return "PUBLIC_DATA_TREE_SIZE_CONTINUITY";
        case 71:
            return "WRITTEN_PUBLIC_DATA_SLOTS_TREE_ROOT_CONTINUITY";
        case 72:
            return "WRITTEN_PUBLIC_DATA_SLOTS_TREE_SIZE_CONTINUITY";
        case 73:
            return "L1_L2_TREE_ROOT_CONTINUITY";
        case 74:
            return "NUM_UNENCRYPTED_LOGS_CONTINUITY";
        case 75:
            return "NUM_L2_TO_L1_MESSAGES_CONTINUITY";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_ENQUEUED_CALL_START_NEXT_CTX_ID = 6;
    static constexpr size_t SR_INCR_NEXT_CONTEXT_ID = 7;
    static constexpr size_t SR_CONTEXT_ID_NEXT_ROW = 8;
    static constexpr size_t SR_CONTEXT_ID_EXT_CALL = 9;
    static constexpr size_t SR_CONTEXT_ID_NESTED_EXIT = 10;
    static constexpr size_t SR_PARENT_ID_NEXT_ROW = 11;
    static constexpr size_t SR_PC_NEXT_ROW_DEFAULT = 13;
    static constexpr size_t SR_PC_NEXT_ROW_EXT_CALL = 14;
    static constexpr size_t SR_MSG_SENDER_NEXT_ROW = 15;
    static constexpr size_t SR_CONTRACT_ADDR_NEXT_ROW = 17;
    static constexpr size_t SR_BYTECODE_ID_NEXT_ROW = 19;
    static constexpr size_t SR_TRANSACTION_FEE_NEXT_ROW = 20;
    static constexpr size_t SR_IS_STATIC_NEXT_ROW = 21;
    static constexpr size_t SR_IS_STATIC_IF_STATIC_CALL = 22;
    static constexpr size_t SR_IS_STATIC_IF_CALL_FROM_STATIC_CONTEXT = 23;
    static constexpr size_t SR_CD_OFFSET_NEXT_ROW = 24;
    static constexpr size_t SR_CD_SIZE_NEXT_ROW = 26;
    static constexpr size_t SR_RET_REV_RD_ADDR = 28;
    static constexpr size_t SR_NEXT_RD_ADDR_IS_ZERO = 29;
    static constexpr size_t SR_RD_ADDR_IS_ZERO = 30;
    static constexpr size_t SR_PROPAGATE_RD_ADDR = 31;
    static constexpr size_t SR_RET_REV_RD_SIZE = 32;
    static constexpr size_t SR_NEXT_RD_SIZE_IS_ZERO = 33;
    static constexpr size_t SR_RD_SIZE_IS_ZERO = 34;
    static constexpr size_t SR_PROPAGATE_RD_SIZE = 35;
    static constexpr size_t SR_EXIT_CALL_LAST_CHILD_ID = 36;
    static constexpr size_t SR_ENTER_CALL_LAST_CHILD_ID = 37;
    static constexpr size_t SR_LAST_CHILD_ID_IS_ZERO = 38;
    static constexpr size_t SR_PROPAGATE_LAST_CHILD_ID = 39;
    static constexpr size_t SR_L2_GAS_LIMIT_NEXT_ROW = 40;
    static constexpr size_t SR_L2_GAS_LIMIT_RESTORE_ON_EXIT = 41;
    static constexpr size_t SR_DA_GAS_LIMIT_NEXT_ROW = 42;
    static constexpr size_t SR_DA_GAS_LIMIT_RESTORE_ON_EXIT = 43;
    static constexpr size_t SR_PARENT_L2_GAS_LIMIT_NEXT_ROW = 44;
    static constexpr size_t SR_PARENT_L2_GAS_LIMIT_STORE_ON_ENTER = 45;
    static constexpr size_t SR_PARENT_DA_GAS_LIMIT_NEXT_ROW = 46;
    static constexpr size_t SR_PARENT_DA_GAS_LIMIT_STORE_ON_ENTER = 47;
    static constexpr size_t SR_PARENT_L2_GAS_USED_NEXT_ROW = 48;
    static constexpr size_t SR_PARENT_L2_GAS_USED_STORE_ON_ENTER = 49;
    static constexpr size_t SR_PARENT_DA_GAS_USED_NEXT_ROW = 50;
    static constexpr size_t SR_PARENT_DA_GAS_USED_STORE_ON_ENTER = 51;
    static constexpr size_t SR_L2_GAS_USED_CONTINUITY = 57;
    static constexpr size_t SR_L2_GAS_USED_ZERO_AFTER_CALL = 58;
    static constexpr size_t SR_L2_GAS_USED_INGEST_AFTER_EXIT = 59;
    static constexpr size_t SR_DA_GAS_USED_CONTINUITY = 60;
    static constexpr size_t SR_DA_GAS_USED_ZERO_AFTER_CALL = 61;
    static constexpr size_t SR_DA_GAS_USED_INGEST_AFTER_EXIT = 62;
    static constexpr size_t SR_NOTE_HASH_TREE_ROOT_CONTINUITY = 63;
    static constexpr size_t SR_NOTE_HASH_TREE_SIZE_CONTINUITY = 64;
    static constexpr size_t SR_NUM_NOTE_HASHES_EMITTED_CONTINUITY = 65;
    static constexpr size_t SR_NULLIFIER_TREE_ROOT_CONTINUITY = 66;
    static constexpr size_t SR_NULLIFIER_TREE_SIZE_CONTINUITY = 67;
    static constexpr size_t SR_NUM_NULLIFIERS_EMITTED_CONTINUITY = 68;
    static constexpr size_t SR_PUBLIC_DATA_TREE_ROOT_CONTINUITY = 69;
    static constexpr size_t SR_PUBLIC_DATA_TREE_SIZE_CONTINUITY = 70;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_TREE_ROOT_CONTINUITY = 71;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_TREE_SIZE_CONTINUITY = 72;
    static constexpr size_t SR_L1_L2_TREE_ROOT_CONTINUITY = 73;
    static constexpr size_t SR_NUM_UNENCRYPTED_LOGS_CONTINUITY = 74;
    static constexpr size_t SR_NUM_L2_TO_L1_MESSAGES_CONTINUITY = 75;
};

} // namespace bb::avm2
