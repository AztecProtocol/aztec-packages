// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/common/expression.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_scalar_mul_to_radix ///////////////////

struct lookup_scalar_mul_to_radix_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SCALAR_MUL_TO_RADIX";
    static constexpr std::string_view RELATION_NAME = "scalar_mul";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::scalar_mul_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::to_radix_sel);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::scalar_mul_scalar),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_bit),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_bit_idx),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_bit_radix));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::to_radix_value),
                                                      ColumnExpression(ColumnAndShifts::to_radix_limb),
                                                      ColumnExpression(ColumnAndShifts::to_radix_limb_index),
                                                      ColumnExpression(ColumnAndShifts::to_radix_radix));
    static constexpr Column COUNTS = Column::lookup_scalar_mul_to_radix_counts;
    static constexpr Column INVERSES = Column::lookup_scalar_mul_to_radix_inv;
};

using lookup_scalar_mul_to_radix_settings = lookup_settings<lookup_scalar_mul_to_radix_settings_>;
template <typename FF_>
using lookup_scalar_mul_to_radix_relation = lookup_relation_base<FF_, lookup_scalar_mul_to_radix_settings>;

/////////////////// lookup_scalar_mul_double ///////////////////

struct lookup_scalar_mul_double_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SCALAR_MUL_DOUBLE";
    static constexpr std::string_view RELATION_NAME = "scalar_mul";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 9;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::scalar_mul_not_end);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::ecc_sel);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::scalar_mul_temp_x),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_y),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_inf),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_x_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_y_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_inf_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_x_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_y_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_inf_shift));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::ecc_r_x),
                                                      ColumnExpression(ColumnAndShifts::ecc_r_y),
                                                      ColumnExpression(ColumnAndShifts::ecc_r_is_inf),
                                                      ColumnExpression(ColumnAndShifts::ecc_p_x),
                                                      ColumnExpression(ColumnAndShifts::ecc_p_y),
                                                      ColumnExpression(ColumnAndShifts::ecc_p_is_inf),
                                                      ColumnExpression(ColumnAndShifts::ecc_q_x),
                                                      ColumnExpression(ColumnAndShifts::ecc_q_y),
                                                      ColumnExpression(ColumnAndShifts::ecc_q_is_inf));
    static constexpr Column COUNTS = Column::lookup_scalar_mul_double_counts;
    static constexpr Column INVERSES = Column::lookup_scalar_mul_double_inv;
};

using lookup_scalar_mul_double_settings = lookup_settings<lookup_scalar_mul_double_settings_>;
template <typename FF_>
using lookup_scalar_mul_double_relation = lookup_relation_base<FF_, lookup_scalar_mul_double_settings>;

/////////////////// lookup_scalar_mul_add ///////////////////

struct lookup_scalar_mul_add_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SCALAR_MUL_ADD";
    static constexpr std::string_view RELATION_NAME = "scalar_mul";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 9;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::scalar_mul_should_add);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::ecc_sel);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::scalar_mul_res_x),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_res_y),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_res_inf),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_res_x_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_res_y_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_res_inf_shift),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_x),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_y),
                                                      ColumnExpression(ColumnAndShifts::scalar_mul_temp_inf));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::ecc_r_x),
                                                      ColumnExpression(ColumnAndShifts::ecc_r_y),
                                                      ColumnExpression(ColumnAndShifts::ecc_r_is_inf),
                                                      ColumnExpression(ColumnAndShifts::ecc_p_x),
                                                      ColumnExpression(ColumnAndShifts::ecc_p_y),
                                                      ColumnExpression(ColumnAndShifts::ecc_p_is_inf),
                                                      ColumnExpression(ColumnAndShifts::ecc_q_x),
                                                      ColumnExpression(ColumnAndShifts::ecc_q_y),
                                                      ColumnExpression(ColumnAndShifts::ecc_q_is_inf));
    static constexpr Column COUNTS = Column::lookup_scalar_mul_add_counts;
    static constexpr Column INVERSES = Column::lookup_scalar_mul_add_inv;
};

using lookup_scalar_mul_add_settings = lookup_settings<lookup_scalar_mul_add_settings_>;
template <typename FF_>
using lookup_scalar_mul_add_relation = lookup_relation_base<FF_, lookup_scalar_mul_add_settings>;

} // namespace bb::avm2
