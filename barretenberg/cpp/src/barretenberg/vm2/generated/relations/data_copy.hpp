// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class data_copyImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 34> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 2, 3, 3, 3, 3, 5, 3, 4, 4, 3,
                                                                            3, 3, 6, 6, 6, 5, 4, 4, 6, 3, 3, 4,
                                                                            5, 6, 5, 5, 6, 5, 5, 6, 4, 5 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        const auto data_copy_SEL = in.get(C::data_copy_sel_rd_copy) + in.get(C::data_copy_sel_cd_copy);

        return (data_copy_SEL).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_U32 = FF(4);
        const auto data_copy_SEL = in.get(C::data_copy_sel_rd_copy) + in.get(C::data_copy_sel_cd_copy);
        const auto data_copy_SEL_NO_ERR =
            (in.get(C::data_copy_sel_rd_copy) + in.get(C::data_copy_sel_cd_copy)) * (FF(1) - in.get(C::data_copy_err));
        const auto data_copy_OFFSET_PLUS_SIZE = in.get(C::data_copy_data_offset) + in.get(C::data_copy_data_copy_size);
        const auto data_copy_DATA_SIZE_LT = ((data_copy_OFFSET_PLUS_SIZE - in.get(C::data_copy_data_size)) - FF(1));
        const auto data_copy_DATA_SIZE_GTE = (in.get(C::data_copy_data_size) - data_copy_OFFSET_PLUS_SIZE);
        const auto data_copy_READ_COUNT_DIFF = in.get(C::data_copy_data_size_is_lt) * data_copy_DATA_SIZE_LT +
                                               (FF(1) - in.get(C::data_copy_data_size_is_lt)) * data_copy_DATA_SIZE_GTE;
        const auto data_copy_READ_COUNT = in.get(C::data_copy_data_size_is_lt) * in.get(C::data_copy_data_size) +
                                          (FF(1) - in.get(C::data_copy_data_size_is_lt)) *
                                              (in.get(C::data_copy_data_offset) + in.get(C::data_copy_data_copy_size));
        const auto data_copy_MAX_MEM = FF(4294967295UL);
        const auto data_copy_MAX_READ_ADDR =
            (in.get(C::data_copy_read_addr) + in.get(C::data_copy_read_count) + in.get(C::data_copy_data_offset)) *
            (FF(1) - in.get(C::data_copy_is_top_level));
        const auto data_copy_MAX_WRITE_ADDR = in.get(C::data_copy_write_addr) + in.get(C::data_copy_data_copy_size);
        const auto data_copy_WRITE_CNT_MINUS_ONE = (in.get(C::data_copy_data_copy_size) - FF(1));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_sel_cd_copy) * (FF(1) - in.get(C::data_copy_sel_cd_copy));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_sel_rd_copy) * (FF(1) - in.get(C::data_copy_sel_rd_copy));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = (in.get(C::data_copy_operation_id) -
                        (in.get(C::data_copy_sel_cd_copy) + FF(2) * in.get(C::data_copy_sel_rd_copy)));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * (in.get(C::data_copy_thirty_two) - FF(32));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_sel_start) * (FF(1) - in.get(C::data_copy_sel_start));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_sel_end) * (FF(1) - in.get(C::data_copy_sel_end));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_is_top_level) * (FF(1) - in.get(C::data_copy_is_top_level));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // TOP_LEVEL_COND
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL *
                       ((in.get(C::data_copy_src_context_id) *
                             (in.get(C::data_copy_is_top_level) * (FF(1) - in.get(C::data_copy_parent_id_inv)) +
                              in.get(C::data_copy_parent_id_inv)) -
                         FF(1)) +
                        in.get(C::data_copy_is_top_level));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_tag_check_err) * (FF(1) - in.get(C::data_copy_tag_check_err));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * (FF(1) - in.get(C::data_copy_tag_check_err)) *
                       (in.get(C::data_copy_data_copy_size_mem_tag) - constants_MEM_TAG_U32);
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * (FF(1) - in.get(C::data_copy_tag_check_err)) *
                       (in.get(C::data_copy_data_offset_mem_tag) - constants_MEM_TAG_U32);
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_src_out_of_range_err) * (FF(1) - in.get(C::data_copy_src_out_of_range_err));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_dst_out_of_range_err) * (FF(1) - in.get(C::data_copy_dst_out_of_range_err));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_data_size_is_lt) * (FF(1) - in.get(C::data_copy_data_size_is_lt));
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * in.get(C::data_copy_sel_start) * (FF(1) - in.get(C::data_copy_tag_check_err)) *
                       (in.get(C::data_copy_abs_read_count_diff) - data_copy_READ_COUNT_DIFF);
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        { // INIT_READ_COUNT
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * in.get(C::data_copy_sel_start) * (FF(1) - in.get(C::data_copy_tag_check_err)) *
                       (in.get(C::data_copy_read_count) - data_copy_READ_COUNT);
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        { // SRC_OUT_OF_RANGE
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp =
                data_copy_SEL * in.get(C::data_copy_sel_start) *
                ((in.get(C::data_copy_src_out_of_range_err) * ((data_copy_MAX_READ_ADDR - data_copy_MAX_MEM) - FF(1)) +
                  (FF(1) - in.get(C::data_copy_src_out_of_range_err)) * (data_copy_MAX_MEM - data_copy_MAX_READ_ADDR)) -
                 in.get(C::data_copy_abs_read_diff));
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        { // DST_OUT_OF_RANGE
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp =
                data_copy_SEL * in.get(C::data_copy_sel_start) *
                ((in.get(C::data_copy_dst_out_of_range_err) * ((data_copy_MAX_WRITE_ADDR - data_copy_MAX_MEM) - FF(1)) +
                  (FF(1) - in.get(C::data_copy_dst_out_of_range_err)) *
                      (data_copy_MAX_MEM - data_copy_MAX_WRITE_ADDR)) -
                 in.get(C::data_copy_abs_write_diff));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
            auto tmp = (in.get(C::data_copy_err) - (FF(1) - (FF(1) - in.get(C::data_copy_tag_check_err)) *
                                                                (FF(1) - in.get(C::data_copy_dst_out_of_range_err)) *
                                                                (FF(1) - in.get(C::data_copy_src_out_of_range_err))));
            tmp *= scaling_factor;
            std::get<18>(evals) += typename Accumulator::View(tmp);
        }
        { // END_AFTER_START
            using Accumulator = typename std::tuple_element_t<19, ContainerOverSubrelations>;
            auto tmp = (in.get(C::data_copy_sel_cd_copy_shift) + in.get(C::data_copy_sel_rd_copy_shift)) *
                       in.get(C::data_copy_sel_end) * (in.get(C::data_copy_sel_start_shift) - FF(1));
            tmp *= scaling_factor;
            std::get<19>(evals) += typename Accumulator::View(tmp);
        }
        { // END_WRITE_CONDITION
            using Accumulator = typename std::tuple_element_t<20, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL_NO_ERR *
                       ((data_copy_WRITE_CNT_MINUS_ONE *
                             (in.get(C::data_copy_sel_end) * (FF(1) - in.get(C::data_copy_next_write_count_inv)) +
                              in.get(C::data_copy_next_write_count_inv)) -
                         FF(1)) +
                        in.get(C::data_copy_sel_end));
            tmp *= scaling_factor;
            std::get<20>(evals) += typename Accumulator::View(tmp);
        }
        { // END_ON_ERR
            using Accumulator = typename std::tuple_element_t<21, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_err) * (in.get(C::data_copy_sel_end) - FF(1));
            tmp *= scaling_factor;
            std::get<21>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<22, ContainerOverSubrelations>;
            auto tmp = (in.get(C::data_copy_sel_mem_write) - data_copy_SEL_NO_ERR);
            tmp *= scaling_factor;
            std::get<22>(evals) += typename Accumulator::View(tmp);
        }
        { // DECR_COPY_SIZE
            using Accumulator = typename std::tuple_element_t<23, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * (FF(1) - in.get(C::data_copy_sel_end)) *
                       ((in.get(C::data_copy_data_copy_size_shift) - in.get(C::data_copy_data_copy_size)) + FF(1));
            tmp *= scaling_factor;
            std::get<23>(evals) += typename Accumulator::View(tmp);
        }
        { // INCR_WRITE_ADDR
            using Accumulator = typename std::tuple_element_t<24, ContainerOverSubrelations>;
            auto tmp = (FF(1) - in.get(C::precomputed_first_row)) * data_copy_SEL *
                       (FF(1) - in.get(C::data_copy_sel_end)) *
                       ((in.get(C::data_copy_write_addr_shift) - in.get(C::data_copy_write_addr)) - FF(1));
            tmp *= scaling_factor;
            std::get<24>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<25, ContainerOverSubrelations>;
            auto tmp =
                data_copy_SEL_NO_ERR * in.get(C::data_copy_sel_start) * (FF(1) - in.get(C::data_copy_is_top_level)) *
                ((in.get(C::data_copy_read_addr) - in.get(C::data_copy_data_addr)) - in.get(C::data_copy_data_offset));
            tmp *= scaling_factor;
            std::get<25>(evals) += typename Accumulator::View(tmp);
        }
        { // INCR_READ_ADDR
            using Accumulator = typename std::tuple_element_t<26, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * (FF(1) - in.get(C::data_copy_padding)) * (FF(1) - in.get(C::data_copy_sel_end)) *
                       ((in.get(C::data_copy_read_addr_shift) - in.get(C::data_copy_read_addr)) - FF(1));
            tmp *= scaling_factor;
            std::get<26>(evals) += typename Accumulator::View(tmp);
        }
        { // DECR_READ_COUNT
            using Accumulator = typename std::tuple_element_t<27, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL_NO_ERR * (FF(1) - in.get(C::data_copy_padding)) *
                       ((in.get(C::data_copy_read_count_shift) - in.get(C::data_copy_read_count)) + FF(1));
            tmp *= scaling_factor;
            std::get<27>(evals) += typename Accumulator::View(tmp);
        }
        { // PADDING_CONDITION
            using Accumulator = typename std::tuple_element_t<28, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL_NO_ERR *
                       ((in.get(C::data_copy_read_count) *
                             (in.get(C::data_copy_padding) * (FF(1) - in.get(C::data_copy_read_count_inv)) +
                              in.get(C::data_copy_read_count_inv)) -
                         FF(1)) +
                        in.get(C::data_copy_padding));
            tmp *= scaling_factor;
            std::get<28>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<29, ContainerOverSubrelations>;
            auto tmp = (in.get(C::data_copy_sel_mem_read) - data_copy_SEL_NO_ERR *
                                                                (FF(1) - in.get(C::data_copy_is_top_level)) *
                                                                (FF(1) - in.get(C::data_copy_padding)));
            tmp *= scaling_factor;
            std::get<29>(evals) += typename Accumulator::View(tmp);
        }
        { // PAD_VALUE
            using Accumulator = typename std::tuple_element_t<30, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL_NO_ERR * in.get(C::data_copy_padding) * in.get(C::data_copy_value);
            tmp *= scaling_factor;
            std::get<30>(evals) += typename Accumulator::View(tmp);
        }
        { // CD_COPY_COLUMN
            using Accumulator = typename std::tuple_element_t<31, ContainerOverSubrelations>;
            auto tmp = (in.get(C::data_copy_cd_copy_col_read) -
                        data_copy_SEL_NO_ERR * (FF(1) - in.get(C::data_copy_padding)) *
                            in.get(C::data_copy_is_top_level) * in.get(C::data_copy_sel_cd_copy));
            tmp *= scaling_factor;
            std::get<31>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<32, ContainerOverSubrelations>;
            auto tmp = in.get(C::data_copy_sel_start) * in.get(C::data_copy_cd_copy_col_read) *
                       (in.get(C::data_copy_cd_index) - FF(1));
            tmp *= scaling_factor;
            std::get<32>(evals) += typename Accumulator::View(tmp);
        }
        { // INCR_CD_INDEX
            using Accumulator = typename std::tuple_element_t<33, ContainerOverSubrelations>;
            auto tmp = data_copy_SEL * (FF(1) - in.get(C::data_copy_sel_end)) * in.get(C::data_copy_cd_copy_col_read) *
                       ((in.get(C::data_copy_cd_index_shift) - in.get(C::data_copy_cd_index)) - FF(1));
            tmp *= scaling_factor;
            std::get<33>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class data_copy : public Relation<data_copyImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "data_copy";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 7:
            return "TOP_LEVEL_COND";
        case 15:
            return "INIT_READ_COUNT";
        case 16:
            return "SRC_OUT_OF_RANGE";
        case 17:
            return "DST_OUT_OF_RANGE";
        case 19:
            return "END_AFTER_START";
        case 20:
            return "END_WRITE_CONDITION";
        case 21:
            return "END_ON_ERR";
        case 23:
            return "DECR_COPY_SIZE";
        case 24:
            return "INCR_WRITE_ADDR";
        case 26:
            return "INCR_READ_ADDR";
        case 27:
            return "DECR_READ_COUNT";
        case 28:
            return "PADDING_CONDITION";
        case 30:
            return "PAD_VALUE";
        case 31:
            return "CD_COPY_COLUMN";
        case 33:
            return "INCR_CD_INDEX";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_TOP_LEVEL_COND = 7;
    static constexpr size_t SR_INIT_READ_COUNT = 15;
    static constexpr size_t SR_SRC_OUT_OF_RANGE = 16;
    static constexpr size_t SR_DST_OUT_OF_RANGE = 17;
    static constexpr size_t SR_END_AFTER_START = 19;
    static constexpr size_t SR_END_WRITE_CONDITION = 20;
    static constexpr size_t SR_END_ON_ERR = 21;
    static constexpr size_t SR_DECR_COPY_SIZE = 23;
    static constexpr size_t SR_INCR_WRITE_ADDR = 24;
    static constexpr size_t SR_INCR_READ_ADDR = 26;
    static constexpr size_t SR_DECR_READ_COUNT = 27;
    static constexpr size_t SR_PADDING_CONDITION = 28;
    static constexpr size_t SR_PAD_VALUE = 30;
    static constexpr size_t SR_CD_COPY_COLUMN = 31;
    static constexpr size_t SR_INCR_CD_INDEX = 33;
};

} // namespace bb::avm2
