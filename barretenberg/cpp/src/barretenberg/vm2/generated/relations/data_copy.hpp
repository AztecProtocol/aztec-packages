// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class data_copyImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 35> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 5, 3, 4, 3, 3, 3,
                                                                            3, 3, 3, 3, 3, 4, 5, 4, 7, 3, 5, 4,
                                                                            4, 5, 4, 5, 5, 7, 6, 6, 7, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        const auto data_copy_SEL = in.get(C::data_copy_sel_rd_copy) + in.get(C::data_copy_sel_cd_copy);

        return (data_copy_SEL).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class data_copy : public Relation<data_copyImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "data_copy";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 6:
            return "TOP_LEVEL_COND";
        case 17:
            return "START_AFTER_END";
        case 18:
            return "ZERO_SIZED_WRITE";
        case 19:
            return "END_IF_WRITE_IS_ZERO";
        case 20:
            return "END_WRITE_CONDITION";
        case 21:
            return "END_ON_ERR";
        case 22:
            return "INIT_READS_LEFT";
        case 24:
            return "DECR_COPY_SIZE";
        case 25:
            return "INCR_WRITE_ADDR";
        case 26:
            return "INIT_READ_ADDR";
        case 27:
            return "INCR_READ_ADDR";
        case 28:
            return "DECR_READ_COUNT";
        case 29:
            return "PADDING_CONDITION";
        case 31:
            return "PAD_VALUE";
        case 32:
            return "CD_COPY_COLUMN";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_TOP_LEVEL_COND = 6;
    static constexpr size_t SR_START_AFTER_END = 17;
    static constexpr size_t SR_ZERO_SIZED_WRITE = 18;
    static constexpr size_t SR_END_IF_WRITE_IS_ZERO = 19;
    static constexpr size_t SR_END_WRITE_CONDITION = 20;
    static constexpr size_t SR_END_ON_ERR = 21;
    static constexpr size_t SR_INIT_READS_LEFT = 22;
    static constexpr size_t SR_DECR_COPY_SIZE = 24;
    static constexpr size_t SR_INCR_WRITE_ADDR = 25;
    static constexpr size_t SR_INIT_READ_ADDR = 26;
    static constexpr size_t SR_INCR_READ_ADDR = 27;
    static constexpr size_t SR_DECR_READ_COUNT = 28;
    static constexpr size_t SR_PADDING_CONDITION = 29;
    static constexpr size_t SR_PAD_VALUE = 31;
    static constexpr size_t SR_CD_COPY_COLUMN = 32;
};

} // namespace bb::avm2
