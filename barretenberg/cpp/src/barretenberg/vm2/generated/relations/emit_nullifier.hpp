// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class emit_nullifierImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 6> SUBRELATION_PARTIAL_LENGTHS = { 3, 5, 3, 3, 3, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_emit_nullifier)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MAX_NULLIFIERS_PER_TX = FF(64);

        { // SHOULD_DO_EMIT_NULLIFIER
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_should_do_emit_nullifier) -
                        in.get(C::execution_sel_emit_nullifier) * in.get(C::execution_should_execute_opcode));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_should_do_emit_nullifier) *
                ((in.get(C::execution_prev_num_nullifiers_emitted) *
                      (in.get(C::execution_sel_limit_error) * in.get(C::execution_prev_num_nullifiers_emitted_inv) +
                       in.get(C::execution_prev_num_nullifiers_emitted_inv)) -
                  constants_MAX_NULLIFIERS_PER_TX) +
                 in.get(C::execution_sel_limit_error));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::execution_sel_should_write_nullifier) -
                 in.get(C::execution_sel_should_do_emit_nullifier) * (FF(1) - in.get(C::execution_sel_limit_error)));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // INCREMENT_NUM_NULLIFIERS_EMITTED
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_write_nullifier) *
                       ((in.get(C::execution_prev_num_nullifiers_emitted) + FF(1)) -
                        in.get(C::execution_num_nullifiers_emitted));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // INCREMENT_NULLIFIER_TREE_SIZE
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_should_write_nullifier) *
                ((in.get(C::execution_prev_nullifier_tree_size) + FF(1)) - in.get(C::execution_nullifier_tree_size));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // OPCODE_ERROR_IF_LIMIT_ERROR
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_should_do_emit_nullifier) * in.get(C::execution_sel_limit_error) *
                       (FF(1) - in.get(C::execution_sel_opcode_error));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class emit_nullifier : public Relation<emit_nullifierImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "emit_nullifier";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "SHOULD_DO_EMIT_NULLIFIER";
        case 3:
            return "INCREMENT_NUM_NULLIFIERS_EMITTED";
        case 4:
            return "INCREMENT_NULLIFIER_TREE_SIZE";
        case 5:
            return "OPCODE_ERROR_IF_LIMIT_ERROR";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SHOULD_DO_EMIT_NULLIFIER = 0;
    static constexpr size_t SR_INCREMENT_NUM_NULLIFIERS_EMITTED = 3;
    static constexpr size_t SR_INCREMENT_NULLIFIER_TREE_SIZE = 4;
    static constexpr size_t SR_OPCODE_ERROR_IF_LIMIT_ERROR = 5;
};

} // namespace bb::avm2
