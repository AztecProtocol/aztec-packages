// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/common/expression.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_to_radix_limb_range ///////////////////

struct lookup_to_radix_limb_range_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_TO_RADIX_LIMB_RANGE";
    static constexpr std::string_view RELATION_NAME = "to_radix";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::to_radix_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::precomputed_sel_range_8);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::to_radix_limb));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::precomputed_clk));
    static constexpr Column COUNTS = Column::lookup_to_radix_limb_range_counts;
    static constexpr Column INVERSES = Column::lookup_to_radix_limb_range_inv;
};

using lookup_to_radix_limb_range_settings = lookup_settings<lookup_to_radix_limb_range_settings_>;
template <typename FF_>
using lookup_to_radix_limb_range_relation = lookup_relation_base<FF_, lookup_to_radix_limb_range_settings>;

/////////////////// lookup_to_radix_limb_less_than_radix_range ///////////////////

struct lookup_to_radix_limb_less_than_radix_range_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_TO_RADIX_LIMB_LESS_THAN_RADIX_RANGE";
    static constexpr std::string_view RELATION_NAME = "to_radix";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::to_radix_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::precomputed_sel_range_8);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::to_radix_limb_radix_diff));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::precomputed_clk));
    static constexpr Column COUNTS = Column::lookup_to_radix_limb_less_than_radix_range_counts;
    static constexpr Column INVERSES = Column::lookup_to_radix_limb_less_than_radix_range_inv;
};

using lookup_to_radix_limb_less_than_radix_range_settings =
    lookup_settings<lookup_to_radix_limb_less_than_radix_range_settings_>;
template <typename FF_>
using lookup_to_radix_limb_less_than_radix_range_relation =
    lookup_relation_base<FF_, lookup_to_radix_limb_less_than_radix_range_settings>;

/////////////////// lookup_to_radix_fetch_safe_limbs ///////////////////

struct lookup_to_radix_fetch_safe_limbs_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_TO_RADIX_FETCH_SAFE_LIMBS";
    static constexpr std::string_view RELATION_NAME = "to_radix";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::to_radix_start);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::precomputed_sel_to_radix_p_limb_counts);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::to_radix_radix),
                                                      ColumnExpression(ColumnAndShifts::to_radix_safe_limbs));
    static constexpr auto DST_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::precomputed_clk),
                        ColumnExpression(ColumnAndShifts::precomputed_to_radix_safe_limbs));
    static constexpr Column COUNTS = Column::lookup_to_radix_fetch_safe_limbs_counts;
    static constexpr Column INVERSES = Column::lookup_to_radix_fetch_safe_limbs_inv;
};

using lookup_to_radix_fetch_safe_limbs_settings = lookup_settings<lookup_to_radix_fetch_safe_limbs_settings_>;
template <typename FF_>
using lookup_to_radix_fetch_safe_limbs_relation = lookup_relation_base<FF_, lookup_to_radix_fetch_safe_limbs_settings>;

/////////////////// lookup_to_radix_fetch_p_limb ///////////////////

struct lookup_to_radix_fetch_p_limb_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_TO_RADIX_FETCH_P_LIMB";
    static constexpr std::string_view RELATION_NAME = "to_radix";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::to_radix_not_padding_limb);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::precomputed_sel_p_decomposition);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::to_radix_radix),
                                                      ColumnExpression(ColumnAndShifts::to_radix_limb_index),
                                                      ColumnExpression(ColumnAndShifts::to_radix_p_limb));
    static constexpr auto DST_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::precomputed_p_decomposition_radix),
                        ColumnExpression(ColumnAndShifts::precomputed_p_decomposition_limb_index),
                        ColumnExpression(ColumnAndShifts::precomputed_p_decomposition_limb));
    static constexpr Column COUNTS = Column::lookup_to_radix_fetch_p_limb_counts;
    static constexpr Column INVERSES = Column::lookup_to_radix_fetch_p_limb_inv;
};

using lookup_to_radix_fetch_p_limb_settings = lookup_settings<lookup_to_radix_fetch_p_limb_settings_>;
template <typename FF_>
using lookup_to_radix_fetch_p_limb_relation = lookup_relation_base<FF_, lookup_to_radix_fetch_p_limb_settings>;

/////////////////// lookup_to_radix_limb_p_diff_range ///////////////////

struct lookup_to_radix_limb_p_diff_range_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_TO_RADIX_LIMB_P_DIFF_RANGE";
    static constexpr std::string_view RELATION_NAME = "to_radix";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::to_radix_not_padding_limb);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::precomputed_sel_range_8);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::to_radix_limb_p_diff));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::precomputed_clk));
    static constexpr Column COUNTS = Column::lookup_to_radix_limb_p_diff_range_counts;
    static constexpr Column INVERSES = Column::lookup_to_radix_limb_p_diff_range_inv;
};

using lookup_to_radix_limb_p_diff_range_settings = lookup_settings<lookup_to_radix_limb_p_diff_range_settings_>;
template <typename FF_>
using lookup_to_radix_limb_p_diff_range_relation =
    lookup_relation_base<FF_, lookup_to_radix_limb_p_diff_range_settings>;

} // namespace bb::avm2
