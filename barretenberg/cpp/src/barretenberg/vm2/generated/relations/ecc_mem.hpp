// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class ecc_memImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 5> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::ecc_add_mem_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_AVM_HIGHEST_MEM_ADDRESS = FF(4294967295UL);

        { // WRITE_INCR_DST_ADDR
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_dst_addr_1_) -
                        in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_dst_addr_0_) + FF(1)));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_dst_addr_2_) -
                        in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_dst_addr_0_) + FF(2)));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::ecc_add_mem_sel_dst_out_of_range_err) *
                       (FF(1) - in.get(C::ecc_add_mem_sel_dst_out_of_range_err));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_max_mem_addr) - constants_AVM_HIGHEST_MEM_ADDRESS);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_sel_should_exec) -
                        in.get(C::ecc_add_mem_sel) * (FF(1) - in.get(C::ecc_add_mem_sel_dst_out_of_range_err)));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class ecc_mem : public Relation<ecc_memImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "ecc_mem";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "WRITE_INCR_DST_ADDR";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_WRITE_INCR_DST_ADDR = 0;
};

} // namespace bb::avm2
