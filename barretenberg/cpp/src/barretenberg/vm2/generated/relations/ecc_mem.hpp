// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class ecc_memImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 12> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 6, 5, 6, 5, 4, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::ecc_add_mem_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_AVM_HIGHEST_MEM_ADDRESS = FF(4294967295UL);
        const auto ecc_add_mem_P_X3 =
            in.get(C::ecc_add_mem_p_x) * in.get(C::ecc_add_mem_p_x) * in.get(C::ecc_add_mem_p_x);
        const auto ecc_add_mem_P_Y2 = in.get(C::ecc_add_mem_p_y) * in.get(C::ecc_add_mem_p_y);
        const auto ecc_add_mem_Q_X3 =
            in.get(C::ecc_add_mem_q_x) * in.get(C::ecc_add_mem_q_x) * in.get(C::ecc_add_mem_q_x);
        const auto ecc_add_mem_Q_Y2 = in.get(C::ecc_add_mem_q_y) * in.get(C::ecc_add_mem_q_y);

        { // WRITE_INCR_DST_ADDR
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_dst_addr_1_) -
                        in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_dst_addr_0_) + FF(1)));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_dst_addr_2_) -
                        in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_dst_addr_0_) + FF(2)));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::ecc_add_mem_sel_dst_out_of_range_err) *
                       (FF(1) - in.get(C::ecc_add_mem_sel_dst_out_of_range_err));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_max_mem_addr) - constants_AVM_HIGHEST_MEM_ADDRESS);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::ecc_add_mem_sel_p_not_on_curve_err) * (FF(1) - in.get(C::ecc_add_mem_sel_p_not_on_curve_err));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::ecc_add_mem_sel_q_not_on_curve_err) * (FF(1) - in.get(C::ecc_add_mem_sel_q_not_on_curve_err));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // P_CURVE_EQN
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_p_is_on_curve_eqn) -
                        in.get(C::ecc_add_mem_sel) * (ecc_add_mem_P_Y2 - (ecc_add_mem_P_X3 - FF(17))) *
                            (FF(1) - in.get(C::ecc_add_mem_p_is_inf)));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // P_ON_CURVE_CHECK
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_p_is_on_curve_eqn) *
                                                         ((FF(1) - in.get(C::ecc_add_mem_sel_p_not_on_curve_err)) *
                                                              (FF(1) - in.get(C::ecc_add_mem_p_is_on_curve_eqn_inv)) +
                                                          in.get(C::ecc_add_mem_p_is_on_curve_eqn_inv)) -
                                                     in.get(C::ecc_add_mem_sel_p_not_on_curve_err));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // Q_CURVE_EQN
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_q_is_on_curve_eqn) -
                        in.get(C::ecc_add_mem_sel) * (ecc_add_mem_Q_Y2 - (ecc_add_mem_Q_X3 - FF(17))) *
                            (FF(1) - in.get(C::ecc_add_mem_q_is_inf)));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // Q_ON_CURVE_CHECK
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_q_is_on_curve_eqn) *
                                                         ((FF(1) - in.get(C::ecc_add_mem_sel_q_not_on_curve_err)) *
                                                              (FF(1) - in.get(C::ecc_add_mem_q_is_on_curve_eqn_inv)) +
                                                          in.get(C::ecc_add_mem_q_is_on_curve_eqn_inv)) -
                                                     in.get(C::ecc_add_mem_sel_q_not_on_curve_err));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::ecc_add_mem_err) - (FF(1) - (FF(1) - in.get(C::ecc_add_mem_sel_dst_out_of_range_err)) *
                                                           (FF(1) - in.get(C::ecc_add_mem_sel_p_not_on_curve_err)) *
                                                           (FF(1) - in.get(C::ecc_add_mem_sel_q_not_on_curve_err))));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = (in.get(C::ecc_add_mem_sel_should_exec) -
                        in.get(C::ecc_add_mem_sel) * (FF(1) - in.get(C::ecc_add_mem_err)));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class ecc_mem : public Relation<ecc_memImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "ecc_mem";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "WRITE_INCR_DST_ADDR";
        case 6:
            return "P_CURVE_EQN";
        case 7:
            return "P_ON_CURVE_CHECK";
        case 8:
            return "Q_CURVE_EQN";
        case 9:
            return "Q_ON_CURVE_CHECK";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_WRITE_INCR_DST_ADDR = 0;
    static constexpr size_t SR_P_CURVE_EQN = 6;
    static constexpr size_t SR_P_ON_CURVE_CHECK = 7;
    static constexpr size_t SR_Q_CURVE_EQN = 8;
    static constexpr size_t SR_Q_ON_CURVE_CHECK = 9;
};

} // namespace bb::avm2
