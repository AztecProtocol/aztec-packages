// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class update_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 20> SUBRELATION_PARTIAL_LENGTHS = { 3, 2, 3, 3, 3, 3, 3, 4, 3, 3,
                                                                            3, 2, 3, 3, 3, 5, 3, 5, 5, 5 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::update_check_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class update_check : public Relation<update_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "update_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 7:
            return "HASH_IS_ZERO_CHECK";
        case 8:
            return "NEVER_UPDATED_CHECK";
        case 11:
            return "UPDATE_METADATA_DECOMPOSITION";
        case 15:
            return "UPDATE_PRE_CLASS_IS_ZERO";
        case 17:
            return "UPDATE_POST_CLASS_IS_ZERO";
        case 18:
            return "FUTURE_UPDATE_CLASS_ID_ASSIGNMENT";
        case 19:
            return "PAST_UPDATE_CLASS_ID_ASSIGNMENT";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_HASH_IS_ZERO_CHECK = 7;
    static constexpr size_t SR_NEVER_UPDATED_CHECK = 8;
    static constexpr size_t SR_UPDATE_METADATA_DECOMPOSITION = 11;
    static constexpr size_t SR_UPDATE_PRE_CLASS_IS_ZERO = 15;
    static constexpr size_t SR_UPDATE_POST_CLASS_IS_ZERO = 17;
    static constexpr size_t SR_FUTURE_UPDATE_CLASS_ID_ASSIGNMENT = 18;
    static constexpr size_t SR_PAST_UPDATE_CLASS_ID_ASSIGNMENT = 19;
};

} // namespace bb::avm2
