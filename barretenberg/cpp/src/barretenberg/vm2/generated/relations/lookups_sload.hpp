// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/common/expression.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_sload_storage_read ///////////////////

struct lookup_sload_storage_read_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_SLOAD_STORAGE_READ";
    static constexpr std::string_view RELATION_NAME = "sload";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::execution_sel_execute_sload);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::public_data_check_sel);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::execution_contract_address),
                        ColumnExpression(ColumnAndShifts::execution_register_0_),
                        ColumnExpression(ColumnAndShifts::execution_register_1_),
                        ColumnExpression(ColumnAndShifts::execution_prev_public_data_tree_root));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::public_data_check_address),
                                                      ColumnExpression(ColumnAndShifts::public_data_check_slot),
                                                      ColumnExpression(ColumnAndShifts::public_data_check_value),
                                                      ColumnExpression(ColumnAndShifts::public_data_check_root));
    static constexpr Column COUNTS = Column::lookup_sload_storage_read_counts;
    static constexpr Column INVERSES = Column::lookup_sload_storage_read_inv;
};

using lookup_sload_storage_read_settings = lookup_settings<lookup_sload_storage_read_settings_>;
template <typename FF_>
using lookup_sload_storage_read_relation = lookup_relation_base<FF_, lookup_sload_storage_read_settings>;

} // namespace bb::avm2
