// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class sha256_memImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 51> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                                                            4, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                                            5, 5, 5, 5, 5, 5, 3, 3, 6, 4, 3, 3, 5,
                                                                            4, 3, 4, 5, 3, 3, 3, 5, 6, 3, 3, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::sha256_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class sha256_mem : public Relation<sha256_memImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "sha256_mem";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 3:
            return "LATCH_HAS_SEL_ON";
        case 4:
            return "START_AFTER_LAST";
        case 5:
            return "CONTINUITY_SEL";
        case 6:
            return "CONTINUITY_EXEC_CLK";
        case 7:
            return "CONTINUITY_SPACE_ID";
        case 8:
            return "CONTINUITY_OUTPUT_ADDR";
        case 15:
            return "START_OR_LAST_MEM";
        case 34:
            return "BATCH_ZERO_CHECK_READ";
        case 35:
            return "BATCH_ENFORCE_ZERO_WRITE";
        case 37:
            return "SEL_IS_INPUT_ROUND_START_COND";
        case 38:
            return "SEL_IS_INPUT_END";
        case 39:
            return "SEL_IS_INPUT_PROPAGATE";
        case 40:
            return "INPUT_ROUND_CTR_START_COND";
        case 41:
            return "INPUT_ROUND_CTR_DECR_COND";
        case 46:
            return "INPUT_TAG_DIFF_CHECK";
        case 48:
            return "TAG_ERROR_INIT";
        case 49:
            return "TAG_ERROR_PROPAGATION";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_LATCH_HAS_SEL_ON = 3;
    static constexpr size_t SR_START_AFTER_LAST = 4;
    static constexpr size_t SR_CONTINUITY_SEL = 5;
    static constexpr size_t SR_CONTINUITY_EXEC_CLK = 6;
    static constexpr size_t SR_CONTINUITY_SPACE_ID = 7;
    static constexpr size_t SR_CONTINUITY_OUTPUT_ADDR = 8;
    static constexpr size_t SR_START_OR_LAST_MEM = 15;
    static constexpr size_t SR_BATCH_ZERO_CHECK_READ = 34;
    static constexpr size_t SR_BATCH_ENFORCE_ZERO_WRITE = 35;
    static constexpr size_t SR_SEL_IS_INPUT_ROUND_START_COND = 37;
    static constexpr size_t SR_SEL_IS_INPUT_END = 38;
    static constexpr size_t SR_SEL_IS_INPUT_PROPAGATE = 39;
    static constexpr size_t SR_INPUT_ROUND_CTR_START_COND = 40;
    static constexpr size_t SR_INPUT_ROUND_CTR_DECR_COND = 41;
    static constexpr size_t SR_INPUT_TAG_DIFF_CHECK = 46;
    static constexpr size_t SR_TAG_ERROR_INIT = 48;
    static constexpr size_t SR_TAG_ERROR_PROPAGATION = 49;
};

} // namespace bb::avm2
