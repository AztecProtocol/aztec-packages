// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class to_radix_memImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 33> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 5, 3, 5, 3,
                                                                            5, 3, 6, 4, 4, 7, 4, 5, 4, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::to_radix_mem_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class to_radix_mem : public Relation<to_radix_memImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "to_radix_mem";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 2:
            return "LAST_HAS_SEL_ON";
        case 3:
            return "START_AFTER_LAST";
        case 4:
            return "SEL_CONTINUITY";
        case 5:
            return "EXEC_CLK_CONTINUITY";
        case 6:
            return "SPACE_ID_CONTINUITY";
        case 7:
            return "VALUE_CONTNUITY";
        case 8:
            return "RADIX_CONTINUITY";
        case 9:
            return "IS_OUTPUT_BITS_CONTINUITY";
        case 18:
            return "IS_OUTPUT_BITS_IMPLY_RADIX_2";
        case 20:
            return "ZERO_CHECK_NUM_LIMBS";
        case 22:
            return "ZERO_CHECK_VALUE";
        case 25:
            return "DECR_NUM_LIMBS";
        case 26:
            return "INCR_DST_ADDRESS";
        case 27:
            return "LAST_ROW_VALID_COMPUTATION";
        case 28:
            return "LAST_ROW_NUM_LIMBS_ZERO";
        case 29:
            return "LAST_ROW_ERR_COMPUTATION";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_LAST_HAS_SEL_ON = 2;
    static constexpr size_t SR_START_AFTER_LAST = 3;
    static constexpr size_t SR_SEL_CONTINUITY = 4;
    static constexpr size_t SR_EXEC_CLK_CONTINUITY = 5;
    static constexpr size_t SR_SPACE_ID_CONTINUITY = 6;
    static constexpr size_t SR_VALUE_CONTNUITY = 7;
    static constexpr size_t SR_RADIX_CONTINUITY = 8;
    static constexpr size_t SR_IS_OUTPUT_BITS_CONTINUITY = 9;
    static constexpr size_t SR_IS_OUTPUT_BITS_IMPLY_RADIX_2 = 18;
    static constexpr size_t SR_ZERO_CHECK_NUM_LIMBS = 20;
    static constexpr size_t SR_ZERO_CHECK_VALUE = 22;
    static constexpr size_t SR_DECR_NUM_LIMBS = 25;
    static constexpr size_t SR_INCR_DST_ADDRESS = 26;
    static constexpr size_t SR_LAST_ROW_VALID_COMPUTATION = 27;
    static constexpr size_t SR_LAST_ROW_NUM_LIMBS_ZERO = 28;
    static constexpr size_t SR_LAST_ROW_ERR_COMPUTATION = 29;
};

} // namespace bb::avm2
