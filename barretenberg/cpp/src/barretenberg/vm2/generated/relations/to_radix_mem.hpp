// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class to_radix_memImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 33> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 5, 3, 5, 3,
                                                                            5, 3, 6, 4, 4, 7, 4, 5, 4, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::to_radix_mem_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_U1 = FF(1);
        const auto constants_MEM_TAG_U8 = FF(2);
        const auto constants_AVM_HIGHEST_MEM_ADDRESS = FF(4294967295UL);
        const auto to_radix_mem_LATCH_CONDITION = in.get(C::to_radix_mem_last) + in.get(C::precomputed_first_row);
        const auto to_radix_mem_NOT_LAST = in.get(C::to_radix_mem_sel) * (FF(1) - to_radix_mem_LATCH_CONDITION);
        const auto to_radix_mem_SEL_NO_ERR = in.get(C::to_radix_mem_sel) * (FF(1) - in.get(C::to_radix_mem_err));
        const auto to_radix_mem_NUM_LIMBS_MINUS_ONE = (in.get(C::to_radix_mem_num_limbs) - FF(1));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) * (FF(1) - in.get(C::to_radix_mem_start));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_last) * (FF(1) - in.get(C::to_radix_mem_last));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // LAST_HAS_SEL_ON
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_last) * (FF(1) - in.get(C::to_radix_mem_sel));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // START_AFTER_LAST
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_sel_shift) *
                       (in.get(C::to_radix_mem_start_shift) - to_radix_mem_LATCH_CONDITION);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // SEL_CONTINUITY
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (FF(1) - in.get(C::precomputed_first_row)) * (FF(1) - in.get(C::to_radix_mem_sel)) *
                       in.get(C::to_radix_mem_sel_shift);
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // EXEC_CLK_CONTINUITY
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = to_radix_mem_NOT_LAST *
                       (in.get(C::to_radix_mem_execution_clk_shift) - in.get(C::to_radix_mem_execution_clk));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // SPACE_ID_CONTINUITY
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp =
                to_radix_mem_NOT_LAST * (in.get(C::to_radix_mem_space_id_shift) - in.get(C::to_radix_mem_space_id));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // VALUE_CONTNUITY
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = to_radix_mem_NOT_LAST *
                       (in.get(C::to_radix_mem_value_to_decompose_shift) - in.get(C::to_radix_mem_value_to_decompose));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // RADIX_CONTINUITY
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = to_radix_mem_NOT_LAST * (in.get(C::to_radix_mem_radix_shift) - in.get(C::to_radix_mem_radix));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // IS_OUTPUT_BITS_CONTINUITY
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = to_radix_mem_NOT_LAST *
                       (in.get(C::to_radix_mem_is_output_bits_shift) - in.get(C::to_radix_mem_is_output_bits));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_sel_dst_out_of_range_err) *
                       (FF(1) - in.get(C::to_radix_mem_sel_dst_out_of_range_err));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) *
                       (in.get(C::to_radix_mem_max_mem_addr) - constants_AVM_HIGHEST_MEM_ADDRESS);
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) *
                       (in.get(C::to_radix_mem_max_write_addr) -
                        ((in.get(C::to_radix_mem_dst_addr) + in.get(C::to_radix_mem_num_limbs)) - FF(1)));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::to_radix_mem_sel_radix_lt_2_err) * (FF(1) - in.get(C::to_radix_mem_sel_radix_lt_2_err));
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::to_radix_mem_sel_radix_gt_256_err) * (FF(1) - in.get(C::to_radix_mem_sel_radix_gt_256_err));
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_sel_invalid_bitwise_radix) *
                       (FF(1) - in.get(C::to_radix_mem_sel_invalid_bitwise_radix));
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) * (in.get(C::to_radix_mem_two) - FF(2));
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) * (in.get(C::to_radix_mem_two_five_six) - FF(256));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
        { // IS_OUTPUT_BITS_IMPLY_RADIX_2
            using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) * in.get(C::to_radix_mem_is_output_bits) *
                       (FF(1) - in.get(C::to_radix_mem_sel_invalid_bitwise_radix)) *
                       (in.get(C::to_radix_mem_radix) - FF(2));
            tmp *= scaling_factor;
            std::get<18>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<19, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::to_radix_mem_sel_num_limbs_is_zero) * (FF(1) - in.get(C::to_radix_mem_sel_num_limbs_is_zero));
            tmp *= scaling_factor;
            std::get<19>(evals) += typename Accumulator::View(tmp);
        }
        { // ZERO_CHECK_NUM_LIMBS
            using Accumulator = typename std::tuple_element_t<20, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) *
                       ((in.get(C::to_radix_mem_num_limbs) * (in.get(C::to_radix_mem_sel_num_limbs_is_zero) *
                                                                  (FF(1) - in.get(C::to_radix_mem_num_limbs_inv)) +
                                                              in.get(C::to_radix_mem_num_limbs_inv)) -
                         FF(1)) +
                        in.get(C::to_radix_mem_sel_num_limbs_is_zero));
            tmp *= scaling_factor;
            std::get<20>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<21, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_sel_value_is_zero) * (FF(1) - in.get(C::to_radix_mem_sel_value_is_zero));
            tmp *= scaling_factor;
            std::get<21>(evals) += typename Accumulator::View(tmp);
        }
        { // ZERO_CHECK_VALUE
            using Accumulator = typename std::tuple_element_t<22, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_start) *
                       ((in.get(C::to_radix_mem_value_to_decompose) *
                             (in.get(C::to_radix_mem_sel_value_is_zero) * (FF(1) - in.get(C::to_radix_mem_value_inv)) +
                              in.get(C::to_radix_mem_value_inv)) -
                         FF(1)) +
                        in.get(C::to_radix_mem_sel_value_is_zero));
            tmp *= scaling_factor;
            std::get<22>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<23, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::to_radix_mem_sel_invalid_num_limbs_err) -
                 in.get(C::to_radix_mem_sel_num_limbs_is_zero) * (FF(1) - in.get(C::to_radix_mem_sel_value_is_zero)));
            tmp *= scaling_factor;
            std::get<23>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<24, ContainerOverSubrelations>;
            auto tmp = (in.get(C::to_radix_mem_err) -
                        (FF(1) - (FF(1) - in.get(C::to_radix_mem_sel_dst_out_of_range_err)) *
                                     (FF(1) - in.get(C::to_radix_mem_sel_radix_lt_2_err)) *
                                     (FF(1) - in.get(C::to_radix_mem_sel_radix_gt_256_err)) *
                                     (FF(1) - in.get(C::to_radix_mem_sel_invalid_bitwise_radix)) *
                                     (FF(1) - in.get(C::to_radix_mem_sel_invalid_num_limbs_err))));
            tmp *= scaling_factor;
            std::get<24>(evals) += typename Accumulator::View(tmp);
        }
        { // DECR_NUM_LIMBS
            using Accumulator = typename std::tuple_element_t<25, ContainerOverSubrelations>;
            auto tmp = to_radix_mem_NOT_LAST *
                       (in.get(C::to_radix_mem_num_limbs_shift) - (in.get(C::to_radix_mem_num_limbs) - FF(1)));
            tmp *= scaling_factor;
            std::get<25>(evals) += typename Accumulator::View(tmp);
        }
        { // INCR_DST_ADDRESS
            using Accumulator = typename std::tuple_element_t<26, ContainerOverSubrelations>;
            auto tmp = to_radix_mem_NOT_LAST *
                       (in.get(C::to_radix_mem_dst_addr_shift) - (in.get(C::to_radix_mem_dst_addr) + FF(1)));
            tmp *= scaling_factor;
            std::get<26>(evals) += typename Accumulator::View(tmp);
        }
        { // LAST_ROW_VALID_COMPUTATION
            using Accumulator = typename std::tuple_element_t<27, ContainerOverSubrelations>;
            auto tmp = to_radix_mem_SEL_NO_ERR * (FF(1) - in.get(C::to_radix_mem_sel_num_limbs_is_zero)) *
                       ((to_radix_mem_NUM_LIMBS_MINUS_ONE *
                             (in.get(C::to_radix_mem_last) * (FF(1) - in.get(C::to_radix_mem_num_limbs_minus_one_inv)) +
                              in.get(C::to_radix_mem_num_limbs_minus_one_inv)) -
                         FF(1)) +
                        in.get(C::to_radix_mem_last));
            tmp *= scaling_factor;
            std::get<27>(evals) += typename Accumulator::View(tmp);
        }
        { // LAST_ROW_NUM_LIMBS_ZERO
            using Accumulator = typename std::tuple_element_t<28, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_sel) * in.get(C::to_radix_mem_sel_num_limbs_is_zero) *
                       (in.get(C::to_radix_mem_last) - FF(1));
            tmp *= scaling_factor;
            std::get<28>(evals) += typename Accumulator::View(tmp);
        }
        { // LAST_ROW_ERR_COMPUTATION
            using Accumulator = typename std::tuple_element_t<29, ContainerOverSubrelations>;
            auto tmp = in.get(C::to_radix_mem_sel) * in.get(C::to_radix_mem_err) *
                       (FF(1) - in.get(C::to_radix_mem_sel_num_limbs_is_zero)) * (in.get(C::to_radix_mem_last) - FF(1));
            tmp *= scaling_factor;
            std::get<29>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<30, ContainerOverSubrelations>;
            auto tmp = (in.get(C::to_radix_mem_sel_should_exec) -
                        in.get(C::to_radix_mem_sel) * (FF(1) - in.get(C::to_radix_mem_err)) *
                            (FF(1) - in.get(C::to_radix_mem_sel_num_limbs_is_zero)));
            tmp *= scaling_factor;
            std::get<30>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<31, ContainerOverSubrelations>;
            auto tmp = (in.get(C::to_radix_mem_limb_index_to_lookup) -
                        in.get(C::to_radix_mem_sel_should_exec) * (in.get(C::to_radix_mem_num_limbs) - FF(1)));
            tmp *= scaling_factor;
            std::get<31>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<32, ContainerOverSubrelations>;
            auto tmp = (in.get(C::to_radix_mem_output_tag) -
                        in.get(C::to_radix_mem_sel_should_exec) *
                            ((constants_MEM_TAG_U1 - constants_MEM_TAG_U8) * in.get(C::to_radix_mem_is_output_bits) +
                             constants_MEM_TAG_U8));
            tmp *= scaling_factor;
            std::get<32>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class to_radix_mem : public Relation<to_radix_memImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "to_radix_mem";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 2:
            return "LAST_HAS_SEL_ON";
        case 3:
            return "START_AFTER_LAST";
        case 4:
            return "SEL_CONTINUITY";
        case 5:
            return "EXEC_CLK_CONTINUITY";
        case 6:
            return "SPACE_ID_CONTINUITY";
        case 7:
            return "VALUE_CONTNUITY";
        case 8:
            return "RADIX_CONTINUITY";
        case 9:
            return "IS_OUTPUT_BITS_CONTINUITY";
        case 18:
            return "IS_OUTPUT_BITS_IMPLY_RADIX_2";
        case 20:
            return "ZERO_CHECK_NUM_LIMBS";
        case 22:
            return "ZERO_CHECK_VALUE";
        case 25:
            return "DECR_NUM_LIMBS";
        case 26:
            return "INCR_DST_ADDRESS";
        case 27:
            return "LAST_ROW_VALID_COMPUTATION";
        case 28:
            return "LAST_ROW_NUM_LIMBS_ZERO";
        case 29:
            return "LAST_ROW_ERR_COMPUTATION";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_LAST_HAS_SEL_ON = 2;
    static constexpr size_t SR_START_AFTER_LAST = 3;
    static constexpr size_t SR_SEL_CONTINUITY = 4;
    static constexpr size_t SR_EXEC_CLK_CONTINUITY = 5;
    static constexpr size_t SR_SPACE_ID_CONTINUITY = 6;
    static constexpr size_t SR_VALUE_CONTNUITY = 7;
    static constexpr size_t SR_RADIX_CONTINUITY = 8;
    static constexpr size_t SR_IS_OUTPUT_BITS_CONTINUITY = 9;
    static constexpr size_t SR_IS_OUTPUT_BITS_IMPLY_RADIX_2 = 18;
    static constexpr size_t SR_ZERO_CHECK_NUM_LIMBS = 20;
    static constexpr size_t SR_ZERO_CHECK_VALUE = 22;
    static constexpr size_t SR_DECR_NUM_LIMBS = 25;
    static constexpr size_t SR_INCR_DST_ADDRESS = 26;
    static constexpr size_t SR_LAST_ROW_VALID_COMPUTATION = 27;
    static constexpr size_t SR_LAST_ROW_NUM_LIMBS_ZERO = 28;
    static constexpr size_t SR_LAST_ROW_ERR_COMPUTATION = 29;
};

} // namespace bb::avm2
