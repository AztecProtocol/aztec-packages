// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/nullifier_check.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void nullifier_checkImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                          const AllEntities& in,
                                          [[maybe_unused]] const RelationParameters<FF_>&,
                                          [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    BB_BENCH_NESTED_NAME("accumulate/nullifier_check");

    const auto constants_NULLIFIER_TREE_HEIGHT = FF(40);
    const auto constants_AVM_PUBLIC_INPUTS_AVM_ACCUMULATED_DATA_NULLIFIERS_ROW_IDX = FF(439);
    const auto constants_GENERATOR_INDEX__OUTER_NULLIFIER = FF(7);
    const auto nullifier_check_NULLIFIER_LOW_LEAF_NULLIFIER_DIFF =
        (in.get(C::nullifier_check_siloed_nullifier) - in.get(C::nullifier_check_low_leaf_nullifier));
    const auto nullifier_check_NEXT_NULLIFIER_IS_ZERO = (FF(1) - in.get(C::nullifier_check_next_nullifier_is_nonzero));

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_sel) * (FF(1) - in.get(C::nullifier_check_sel));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_write) * (FF(1) - in.get(C::nullifier_check_write));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_write) * (FF(1) - in.get(C::nullifier_check_sel));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_exists) * (FF(1) - in.get(C::nullifier_check_exists));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_should_silo) * (FF(1) - in.get(C::nullifier_check_should_silo));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    { // PASSTHROUGH_SILOING
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = (FF(1) - in.get(C::nullifier_check_should_silo)) *
                   (in.get(C::nullifier_check_nullifier) - in.get(C::nullifier_check_siloed_nullifier));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_sel) *
                   (constants_GENERATOR_INDEX__OUTER_NULLIFIER - in.get(C::nullifier_check_siloing_separator));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = (in.get(C::nullifier_check_should_insert) -
                    in.get(C::nullifier_check_write) * (FF(1) - in.get(C::nullifier_check_exists)));
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_write) * in.get(C::nullifier_check_exists) *
                   (in.get(C::nullifier_check_root) - in.get(C::nullifier_check_write_root));
        tmp *= scaling_factor;
        std::get<8>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_should_insert) * (in.get(C::nullifier_check_tree_size_before_write) -
                                                               in.get(C::nullifier_check_updated_low_leaf_next_index));
        tmp *= scaling_factor;
        std::get<9>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::nullifier_check_should_insert) *
            (in.get(C::nullifier_check_siloed_nullifier) - in.get(C::nullifier_check_updated_low_leaf_next_nullifier));
        tmp *= scaling_factor;
        std::get<10>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::nullifier_check_sel) * (in.get(C::nullifier_check_tree_height) - constants_NULLIFIER_TREE_HEIGHT);
        tmp *= scaling_factor;
        std::get<11>(evals) += typename Accumulator::View(tmp);
    }
    { // EXISTS_CHECK
        using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_sel) *
                   ((nullifier_check_NULLIFIER_LOW_LEAF_NULLIFIER_DIFF *
                         (in.get(C::nullifier_check_exists) *
                              (FF(1) - in.get(C::nullifier_check_nullifier_low_leaf_nullifier_diff_inv)) +
                          in.get(C::nullifier_check_nullifier_low_leaf_nullifier_diff_inv)) -
                     FF(1)) +
                    in.get(C::nullifier_check_exists));
        tmp *= scaling_factor;
        std::get<12>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_sel) *
                   ((FF(1) - in.get(C::nullifier_check_exists)) - in.get(C::nullifier_check_leaf_not_exists));
        tmp *= scaling_factor;
        std::get<13>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_next_nullifier_is_nonzero) *
                   (FF(1) - in.get(C::nullifier_check_next_nullifier_is_nonzero));
        tmp *= scaling_factor;
        std::get<14>(evals) += typename Accumulator::View(tmp);
    }
    { // NEXT_NULLIFIER_IS_ZERO_CHECK
        using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::nullifier_check_leaf_not_exists) *
            ((in.get(C::nullifier_check_low_leaf_next_nullifier) *
                  (nullifier_check_NEXT_NULLIFIER_IS_ZERO * (FF(1) - in.get(C::nullifier_check_next_nullifier_inv)) +
                   in.get(C::nullifier_check_next_nullifier_inv)) -
              FF(1)) +
             nullifier_check_NEXT_NULLIFIER_IS_ZERO);
        tmp *= scaling_factor;
        std::get<15>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
        auto tmp = (in.get(C::nullifier_check_should_insert) * (FF(1) - in.get(C::nullifier_check_discard)) -
                    in.get(C::nullifier_check_should_write_to_public_inputs));
        tmp *= scaling_factor;
        std::get<16>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
        auto tmp = in.get(C::nullifier_check_should_write_to_public_inputs) *
                   ((constants_AVM_PUBLIC_INPUTS_AVM_ACCUMULATED_DATA_NULLIFIERS_ROW_IDX +
                     in.get(C::nullifier_check_nullifier_index)) -
                    in.get(C::nullifier_check_public_inputs_index));
        tmp *= scaling_factor;
        std::get<17>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
