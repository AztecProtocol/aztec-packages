// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class keccak_memoryImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 46> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 4, 3, 5, 3, 4, 3,
                                                                            3, 3, 3, 4, 3, 3, 3, 5, 3, 3, 3, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return ((in.get(C::keccak_memory_sel) + in.get(C::keccak_memory_last))).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class keccak_memory : public Relation<keccak_memoryImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "keccak_memory";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 3:
            return "CTR_INIT";
        case 4:
            return "RW_READ_INIT";
        case 5:
            return "RW_WRITE_INIT";
        case 6:
            return "SEL_CTR_NON_ZERO";
        case 8:
            return "CTR_END";
        case 9:
            return "LAST";
        case 10:
            return "CTR_INCREMENT";
        case 12:
            return "NO_TAG_ERROR_ON_WRITE";
        case 13:
            return "TAG_ERROR_INIT";
        case 14:
            return "TAG_ERROR_PROPAGATION";
        case 15:
            return "MEM_ADDR_INCREMENT";
        case 16:
            return "SPACEID_PROPAGATION";
        case 17:
            return "CLK_PROPAGATION";
        case 18:
            return "RW_PROPAGATION";
        case 19:
            return "SINGLE_TAG_ERROR";
        case 20:
            return "SINGLE_TAG_ERROR_BOOLEAN";
        case 21:
            return "VAL01";
        case 22:
            return "VAL02";
        case 23:
            return "VAL03";
        case 24:
            return "VAL04";
        case 25:
            return "VAL10";
        case 26:
            return "VAL11";
        case 27:
            return "VAL12";
        case 28:
            return "VAL13";
        case 29:
            return "VAL14";
        case 30:
            return "VAL20";
        case 31:
            return "VAL21";
        case 32:
            return "VAL22";
        case 33:
            return "VAL23";
        case 34:
            return "VAL24";
        case 35:
            return "VAL30";
        case 36:
            return "VAL31";
        case 37:
            return "VAL32";
        case 38:
            return "VAL33";
        case 39:
            return "VAL34";
        case 40:
            return "VAL40";
        case 41:
            return "VAL41";
        case 42:
            return "VAL42";
        case 43:
            return "VAL43";
        case 44:
            return "VAL44";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_CTR_INIT = 3;
    static constexpr size_t SR_RW_READ_INIT = 4;
    static constexpr size_t SR_RW_WRITE_INIT = 5;
    static constexpr size_t SR_SEL_CTR_NON_ZERO = 6;
    static constexpr size_t SR_CTR_END = 8;
    static constexpr size_t SR_LAST = 9;
    static constexpr size_t SR_CTR_INCREMENT = 10;
    static constexpr size_t SR_NO_TAG_ERROR_ON_WRITE = 12;
    static constexpr size_t SR_TAG_ERROR_INIT = 13;
    static constexpr size_t SR_TAG_ERROR_PROPAGATION = 14;
    static constexpr size_t SR_MEM_ADDR_INCREMENT = 15;
    static constexpr size_t SR_SPACEID_PROPAGATION = 16;
    static constexpr size_t SR_CLK_PROPAGATION = 17;
    static constexpr size_t SR_RW_PROPAGATION = 18;
    static constexpr size_t SR_SINGLE_TAG_ERROR = 19;
    static constexpr size_t SR_SINGLE_TAG_ERROR_BOOLEAN = 20;
    static constexpr size_t SR_VAL01 = 21;
    static constexpr size_t SR_VAL02 = 22;
    static constexpr size_t SR_VAL03 = 23;
    static constexpr size_t SR_VAL04 = 24;
    static constexpr size_t SR_VAL10 = 25;
    static constexpr size_t SR_VAL11 = 26;
    static constexpr size_t SR_VAL12 = 27;
    static constexpr size_t SR_VAL13 = 28;
    static constexpr size_t SR_VAL14 = 29;
    static constexpr size_t SR_VAL20 = 30;
    static constexpr size_t SR_VAL21 = 31;
    static constexpr size_t SR_VAL22 = 32;
    static constexpr size_t SR_VAL23 = 33;
    static constexpr size_t SR_VAL24 = 34;
    static constexpr size_t SR_VAL30 = 35;
    static constexpr size_t SR_VAL31 = 36;
    static constexpr size_t SR_VAL32 = 37;
    static constexpr size_t SR_VAL33 = 38;
    static constexpr size_t SR_VAL34 = 39;
    static constexpr size_t SR_VAL40 = 40;
    static constexpr size_t SR_VAL41 = 41;
    static constexpr size_t SR_VAL42 = 42;
    static constexpr size_t SR_VAL43 = 43;
    static constexpr size_t SR_VAL44 = 44;
};

} // namespace bb::avm2
