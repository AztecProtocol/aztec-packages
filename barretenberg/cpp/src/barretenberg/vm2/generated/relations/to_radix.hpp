// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class to_radixImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 40> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 4,
                                                                            3, 3, 3, 3, 3, 3, 4, 5, 4, 3, 3, 3, 3, 5,
                                                                            3, 3, 3, 3, 3, 5, 3, 4, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::to_radix_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class to_radix : public Relation<to_radixImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "to_radix";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 4:
            return "START_AFTER_LATCH";
        case 5:
            return "SELECTOR_ON_START";
        case 6:
            return "SELECTOR_CONSISTENCY";
        case 36:
            return "OVERFLOW_CHECK";
        case 37:
            return "CONSTANT_CONSISTENCY_RADIX";
        case 38:
            return "CONSTANT_CONSISTENCY_VALUE";
        case 39:
            return "CONSTANT_CONSISTENCY_SAFE_LIMBS";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_START_AFTER_LATCH = 4;
    static constexpr size_t SR_SELECTOR_ON_START = 5;
    static constexpr size_t SR_SELECTOR_CONSISTENCY = 6;
    static constexpr size_t SR_OVERFLOW_CHECK = 36;
    static constexpr size_t SR_CONSTANT_CONSISTENCY_RADIX = 37;
    static constexpr size_t SR_CONSTANT_CONSISTENCY_VALUE = 38;
    static constexpr size_t SR_CONSTANT_CONSISTENCY_SAFE_LIMBS = 39;
};

} // namespace bb::avm2
