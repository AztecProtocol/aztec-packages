// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_emit_notehash_notehash_tree_write ///////////////////

struct lookup_emit_notehash_notehash_tree_write_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_EMIT_NOTEHASH_NOTEHASH_TREE_WRITE";
    static constexpr std::string_view RELATION_NAME = "emit_notehash";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 9;
    static constexpr Column SRC_SELECTOR = Column::execution_sel_write_note_hash;
    static constexpr Column DST_SELECTOR = Column::note_hash_tree_check_write;
    static constexpr Column COUNTS = Column::lookup_emit_notehash_notehash_tree_write_counts;
    static constexpr Column INVERSES = Column::lookup_emit_notehash_notehash_tree_write_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::execution_register_0_,
        ColumnAndShifts::execution_prev_note_hash_tree_size,
        ColumnAndShifts::execution_prev_note_hash_tree_root,
        ColumnAndShifts::execution_sel_write_note_hash,
        ColumnAndShifts::execution_contract_address,
        ColumnAndShifts::execution_sel_write_note_hash,
        ColumnAndShifts::execution_prev_num_note_hashes_emitted,
        ColumnAndShifts::execution_discard,
        ColumnAndShifts::execution_note_hash_tree_root
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::note_hash_tree_check_note_hash,       ColumnAndShifts::note_hash_tree_check_leaf_index,
        ColumnAndShifts::note_hash_tree_check_prev_root,       ColumnAndShifts::note_hash_tree_check_should_silo,
        ColumnAndShifts::note_hash_tree_check_address,         ColumnAndShifts::note_hash_tree_check_should_unique,
        ColumnAndShifts::note_hash_tree_check_note_hash_index, ColumnAndShifts::note_hash_tree_check_discard,
        ColumnAndShifts::note_hash_tree_check_next_root
    };
};

using lookup_emit_notehash_notehash_tree_write_settings =
    lookup_settings<lookup_emit_notehash_notehash_tree_write_settings_>;
template <typename FF_>
using lookup_emit_notehash_notehash_tree_write_relation =
    lookup_relation_base<FF_, lookup_emit_notehash_notehash_tree_write_settings>;

} // namespace bb::avm2
