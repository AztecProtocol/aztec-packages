// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/common/expression.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_emit_notehash_notehash_tree_write ///////////////////

struct lookup_emit_notehash_notehash_tree_write_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_EMIT_NOTEHASH_NOTEHASH_TREE_WRITE";
    static constexpr std::string_view RELATION_NAME = "emit_notehash";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 9;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::execution_sel_write_note_hash);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::note_hash_tree_check_write);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::execution_register_0_),
                        ColumnExpression(ColumnAndShifts::execution_prev_note_hash_tree_size),
                        ColumnExpression(ColumnAndShifts::execution_prev_note_hash_tree_root),
                        ColumnExpression(ColumnAndShifts::execution_sel_write_note_hash),
                        ColumnExpression(ColumnAndShifts::execution_contract_address),
                        ColumnExpression(ColumnAndShifts::execution_sel_write_note_hash),
                        ColumnExpression(ColumnAndShifts::execution_prev_num_note_hashes_emitted),
                        ColumnExpression(ColumnAndShifts::execution_discard),
                        ColumnExpression(ColumnAndShifts::execution_note_hash_tree_root));
    static constexpr auto DST_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::note_hash_tree_check_note_hash),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_leaf_index),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_prev_root),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_should_silo),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_address),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_should_unique),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_note_hash_index),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_discard),
                        ColumnExpression(ColumnAndShifts::note_hash_tree_check_next_root));
    static constexpr Column COUNTS = Column::lookup_emit_notehash_notehash_tree_write_counts;
    static constexpr Column INVERSES = Column::lookup_emit_notehash_notehash_tree_write_inv;
};

using lookup_emit_notehash_notehash_tree_write_settings =
    lookup_settings<lookup_emit_notehash_notehash_tree_write_settings_>;
template <typename FF_>
using lookup_emit_notehash_notehash_tree_write_relation =
    lookup_relation_base<FF_, lookup_emit_notehash_notehash_tree_write_settings>;

} // namespace bb::avm2
