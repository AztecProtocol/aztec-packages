// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// perm_execution_dispatch_keccakf1600 ///////////////////

class perm_execution_dispatch_keccakf1600_settings {
  public:
    static constexpr std::string_view NAME = "PERM_EXECUTION_DISPATCH_KECCAKF1600";
    static constexpr std::string_view RELATION_NAME = "execution";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 5;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::execution_sel_keccakf1600;
    static constexpr Column DST_SELECTOR = Column::keccakf1600_start;
    static constexpr Column INVERSES = Column::perm_execution_dispatch_keccakf1600_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::execution_sel_keccakf1600) == 1 ||
                in.get(ColumnAndShifts::keccakf1600_start) == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_execution_dispatch_keccakf1600_inv),
                                     in.get(ColumnAndShifts::execution_sel_keccakf1600),
                                     in.get(ColumnAndShifts::execution_sel_keccakf1600),
                                     in.get(ColumnAndShifts::keccakf1600_start),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::execution_rop_0_),
                                     in.get(ColumnAndShifts::execution_rop_1_),
                                     in.get(ColumnAndShifts::execution_context_id),
                                     in.get(ColumnAndShifts::execution_sel_gadget_error),
                                     in.get(ColumnAndShifts::keccakf1600_clk),
                                     in.get(ColumnAndShifts::keccakf1600_dst_addr),
                                     in.get(ColumnAndShifts::keccakf1600_src_addr),
                                     in.get(ColumnAndShifts::keccakf1600_space_id),
                                     in.get(ColumnAndShifts::keccakf1600_error));
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_execution_dispatch_keccakf1600_inv),
                                     in.get(ColumnAndShifts::execution_sel_keccakf1600),
                                     in.get(ColumnAndShifts::execution_sel_keccakf1600),
                                     in.get(ColumnAndShifts::keccakf1600_start),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::execution_rop_0_),
                                     in.get(ColumnAndShifts::execution_rop_1_),
                                     in.get(ColumnAndShifts::execution_context_id),
                                     in.get(ColumnAndShifts::execution_sel_gadget_error),
                                     in.get(ColumnAndShifts::keccakf1600_clk),
                                     in.get(ColumnAndShifts::keccakf1600_dst_addr),
                                     in.get(ColumnAndShifts::keccakf1600_src_addr),
                                     in.get(ColumnAndShifts::keccakf1600_space_id),
                                     in.get(ColumnAndShifts::keccakf1600_error));
    }
};

template <typename FF_>
class perm_execution_dispatch_keccakf1600_relation
    : public GenericPermutationRelation<perm_execution_dispatch_keccakf1600_settings, FF_> {
  public:
    using Settings = perm_execution_dispatch_keccakf1600_settings;
    static constexpr std::string_view NAME = perm_execution_dispatch_keccakf1600_settings::NAME;
    static constexpr std::string_view RELATION_NAME = perm_execution_dispatch_keccakf1600_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.perm_execution_dispatch_keccakf1600_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

} // namespace bb::avm2
