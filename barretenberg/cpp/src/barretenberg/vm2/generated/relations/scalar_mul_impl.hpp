// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/scalar_mul.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void scalar_mulImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                     const AllEntities& in,
                                     [[maybe_unused]] const RelationParameters<FF_>&,
                                     [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    BB_BENCH_TRACY_NAME("accumulate/scalar_mul");

    const auto scalar_mul_LATCH_CONDITION = in.get(C::scalar_mul_end) + in.get(C::precomputed_first_row);
    const auto scalar_mul_should_pass = in.get(C::scalar_mul_not_end) * (FF(1) - in.get(C::scalar_mul_bit));

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_sel) * (FF(1) - in.get(C::scalar_mul_sel));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_point_inf) * (FF(1) - in.get(C::scalar_mul_point_inf));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_start) * (FF(1) - in.get(C::scalar_mul_start));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) * (FF(1) - in.get(C::scalar_mul_end));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) * in.get(C::precomputed_first_row);
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    { // START_AFTER_LATCH
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_sel_shift) * (in.get(C::scalar_mul_start_shift) - scalar_mul_LATCH_CONDITION);
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    { // SELECTOR_ON_START
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_start) * (FF(1) - in.get(C::scalar_mul_sel));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    { // SELECTOR_CONSISTENCY
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = (in.get(C::scalar_mul_sel_shift) - in.get(C::scalar_mul_sel)) * (FF(1) - scalar_mul_LATCH_CONDITION);
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) * (FF(1) - in.get(C::scalar_mul_sel));
        tmp *= scaling_factor;
        std::get<8>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
        auto tmp = (in.get(C::scalar_mul_not_end) - in.get(C::scalar_mul_sel) * (FF(1) - in.get(C::scalar_mul_end)));
        tmp *= scaling_factor;
        std::get<9>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
        auto tmp = ((in.get(C::scalar_mul_end) + in.get(C::scalar_mul_not_end)) - in.get(C::scalar_mul_sel));
        tmp *= scaling_factor;
        std::get<10>(evals) += typename Accumulator::View(tmp);
    }
    { // INPUT_CONSISTENCY_X
        using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::scalar_mul_not_end) * (in.get(C::scalar_mul_point_x) - in.get(C::scalar_mul_point_x_shift));
        tmp *= scaling_factor;
        std::get<11>(evals) += typename Accumulator::View(tmp);
    }
    { // INPUT_CONSISTENCY_Y
        using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::scalar_mul_not_end) * (in.get(C::scalar_mul_point_y) - in.get(C::scalar_mul_point_y_shift));
        tmp *= scaling_factor;
        std::get<12>(evals) += typename Accumulator::View(tmp);
    }
    { // INPUT_CONSISTENCY_INF
        using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::scalar_mul_not_end) * (in.get(C::scalar_mul_point_inf) - in.get(C::scalar_mul_point_inf_shift));
        tmp *= scaling_factor;
        std::get<13>(evals) += typename Accumulator::View(tmp);
    }
    { // INPUT_CONSISTENCY_SCALAR
        using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_not_end) * (in.get(C::scalar_mul_scalar) - in.get(C::scalar_mul_scalar_shift));
        tmp *= scaling_factor;
        std::get<14>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_start) * (in.get(C::scalar_mul_bit_idx) - FF(253));
        tmp *= scaling_factor;
        std::get<15>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) * in.get(C::scalar_mul_bit_idx);
        tmp *= scaling_factor;
        std::get<16>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_not_end) *
                   (in.get(C::scalar_mul_bit_idx) - (in.get(C::scalar_mul_bit_idx_shift) + FF(1)));
        tmp *= scaling_factor;
        std::get<17>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_sel) * (in.get(C::scalar_mul_bit_radix) - FF(2));
        tmp *= scaling_factor;
        std::get<18>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<19, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) * (in.get(C::scalar_mul_temp_x) - in.get(C::scalar_mul_point_x));
        tmp *= scaling_factor;
        std::get<19>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<20, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) * (in.get(C::scalar_mul_temp_y) - in.get(C::scalar_mul_point_y));
        tmp *= scaling_factor;
        std::get<20>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<21, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) * (in.get(C::scalar_mul_temp_inf) - in.get(C::scalar_mul_point_inf));
        tmp *= scaling_factor;
        std::get<21>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<22, ContainerOverSubrelations>;
        auto tmp = (in.get(C::scalar_mul_temp_x_shift) - in.get(C::scalar_mul_temp_x_shift));
        tmp *= scaling_factor;
        std::get<22>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<23, ContainerOverSubrelations>;
        auto tmp = (in.get(C::scalar_mul_temp_y_shift) - in.get(C::scalar_mul_temp_y_shift));
        tmp *= scaling_factor;
        std::get<23>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<24, ContainerOverSubrelations>;
        auto tmp = (in.get(C::scalar_mul_temp_inf_shift) - in.get(C::scalar_mul_temp_inf_shift));
        tmp *= scaling_factor;
        std::get<24>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<25, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) *
                   (in.get(C::scalar_mul_point_x) * in.get(C::scalar_mul_bit) - in.get(C::scalar_mul_res_x));
        tmp *= scaling_factor;
        std::get<25>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<26, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) *
                   (in.get(C::scalar_mul_point_y) * in.get(C::scalar_mul_bit) - in.get(C::scalar_mul_res_y));
        tmp *= scaling_factor;
        std::get<26>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<27, ContainerOverSubrelations>;
        auto tmp = in.get(C::scalar_mul_end) *
                   (((in.get(C::scalar_mul_point_inf) - FF(1)) * in.get(C::scalar_mul_bit) + FF(1)) -
                    in.get(C::scalar_mul_res_inf));
        tmp *= scaling_factor;
        std::get<27>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<28, ContainerOverSubrelations>;
        auto tmp = (in.get(C::scalar_mul_should_add) - in.get(C::scalar_mul_not_end) * in.get(C::scalar_mul_bit));
        tmp *= scaling_factor;
        std::get<28>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<29, ContainerOverSubrelations>;
        auto tmp = scalar_mul_should_pass * (in.get(C::scalar_mul_res_x) - in.get(C::scalar_mul_res_x_shift));
        tmp *= scaling_factor;
        std::get<29>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<30, ContainerOverSubrelations>;
        auto tmp = scalar_mul_should_pass * (in.get(C::scalar_mul_res_y) - in.get(C::scalar_mul_res_y_shift));
        tmp *= scaling_factor;
        std::get<30>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<31, ContainerOverSubrelations>;
        auto tmp = scalar_mul_should_pass * (in.get(C::scalar_mul_res_inf) - in.get(C::scalar_mul_res_inf_shift));
        tmp *= scaling_factor;
        std::get<31>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
