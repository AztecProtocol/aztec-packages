// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class gasImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 6> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3 };

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_out_of_gas_l2_base) * (FF(1) - in.get(C::execution_out_of_gas_l2_base));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_out_of_gas_da_base) * (FF(1) - in.get(C::execution_out_of_gas_da_base));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                ((FF(1) - in.get(C::execution_out_of_gas_l2_base)) * (FF(1) - in.get(C::execution_out_of_gas_da_base)) -
                 (FF(1) - in.get(C::execution_out_of_gas_base)));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_out_of_gas_l2_dynamic) * (FF(1) - in.get(C::execution_out_of_gas_l2_dynamic));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_out_of_gas_da_dynamic) * (FF(1) - in.get(C::execution_out_of_gas_da_dynamic));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = ((FF(1) - in.get(C::execution_out_of_gas_l2_dynamic)) *
                            (FF(1) - in.get(C::execution_out_of_gas_da_dynamic)) -
                        (FF(1) - in.get(C::execution_out_of_gas_dynamic)));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class gas : public Relation<gasImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "gas";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {}
        return std::to_string(index);
    }
};

} // namespace bb::avm2
