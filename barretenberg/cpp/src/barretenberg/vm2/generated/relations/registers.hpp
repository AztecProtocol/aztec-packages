// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class registersImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 8> SUBRELATION_PARTIAL_LENGTHS = { 4, 4, 4, 4, 4, 4, 4, 6 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return ((FF(1) - in.get(C::execution_sel_should_read_registers)) *
                (FF(1) - in.get(C::execution_sel_should_write_registers)))
            .is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto execution_BATCHED_TAGS_DIFF_REG =
            in.get(C::execution_sel_tag_check_reg_0_) * FF(1) *
                (in.get(C::execution_mem_tag_reg_0_) - in.get(C::execution_expected_tag_reg_0_)) +
            in.get(C::execution_sel_tag_check_reg_1_) * FF(8) *
                (in.get(C::execution_mem_tag_reg_1_) - in.get(C::execution_expected_tag_reg_1_)) +
            in.get(C::execution_sel_tag_check_reg_2_) * FF(64) *
                (in.get(C::execution_mem_tag_reg_2_) - in.get(C::execution_expected_tag_reg_2_)) +
            in.get(C::execution_sel_tag_check_reg_3_) * FF(512) *
                (in.get(C::execution_mem_tag_reg_3_) - in.get(C::execution_expected_tag_reg_3_)) +
            in.get(C::execution_sel_tag_check_reg_4_) * FF(4096) *
                (in.get(C::execution_mem_tag_reg_4_) - in.get(C::execution_expected_tag_reg_4_)) +
            in.get(C::execution_sel_tag_check_reg_5_) * FF(32768) *
                (in.get(C::execution_mem_tag_reg_5_) - in.get(C::execution_expected_tag_reg_5_)) +
            in.get(C::execution_sel_tag_check_reg_6_) * FF(262144) *
                (in.get(C::execution_mem_tag_reg_6_) - in.get(C::execution_expected_tag_reg_6_));
        const auto execution_BATCHED_TAGS_DIFF_X_REG =
            (FF(1) - in.get(C::execution_sel_should_read_registers)) * execution_BATCHED_TAGS_DIFF_REG;
        const auto execution_BATCHED_TAGS_DIFF_Y_REG = in.get(C::execution_batched_tags_diff_inv_reg);
        const auto execution_BATCHED_TAGS_DIFF_E_REG = (FF(1) - in.get(C::execution_sel_register_read_error));
        const auto execution_BATCHED_TAGS_DIFF_EQ_REG =
            (execution_BATCHED_TAGS_DIFF_X_REG *
                 (execution_BATCHED_TAGS_DIFF_E_REG * (FF(1) - execution_BATCHED_TAGS_DIFF_Y_REG) +
                  execution_BATCHED_TAGS_DIFF_Y_REG) -
             FF(1)) +
            execution_BATCHED_TAGS_DIFF_E_REG;

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_op_reg_effective_0_) -
                        in.get(C::execution_sel_mem_op_reg_0_) *
                            (in.get(C::execution_sel_should_read_registers) * (FF(1) - in.get(C::execution_rw_reg_0_)) +
                             in.get(C::execution_sel_should_write_registers) * in.get(C::execution_rw_reg_0_)));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_op_reg_effective_1_) -
                        in.get(C::execution_sel_mem_op_reg_1_) *
                            (in.get(C::execution_sel_should_read_registers) * (FF(1) - in.get(C::execution_rw_reg_1_)) +
                             in.get(C::execution_sel_should_write_registers) * in.get(C::execution_rw_reg_1_)));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_op_reg_effective_2_) -
                        in.get(C::execution_sel_mem_op_reg_2_) *
                            (in.get(C::execution_sel_should_read_registers) * (FF(1) - in.get(C::execution_rw_reg_2_)) +
                             in.get(C::execution_sel_should_write_registers) * in.get(C::execution_rw_reg_2_)));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_op_reg_effective_3_) -
                        in.get(C::execution_sel_mem_op_reg_3_) *
                            (in.get(C::execution_sel_should_read_registers) * (FF(1) - in.get(C::execution_rw_reg_3_)) +
                             in.get(C::execution_sel_should_write_registers) * in.get(C::execution_rw_reg_3_)));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_op_reg_effective_4_) -
                        in.get(C::execution_sel_mem_op_reg_4_) *
                            (in.get(C::execution_sel_should_read_registers) * (FF(1) - in.get(C::execution_rw_reg_4_)) +
                             in.get(C::execution_sel_should_write_registers) * in.get(C::execution_rw_reg_4_)));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_op_reg_effective_5_) -
                        in.get(C::execution_sel_mem_op_reg_5_) *
                            (in.get(C::execution_sel_should_read_registers) * (FF(1) - in.get(C::execution_rw_reg_5_)) +
                             in.get(C::execution_sel_should_write_registers) * in.get(C::execution_rw_reg_5_)));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_op_reg_effective_6_) -
                        in.get(C::execution_sel_mem_op_reg_6_) *
                            (in.get(C::execution_sel_should_read_registers) * (FF(1) - in.get(C::execution_rw_reg_6_)) +
                             in.get(C::execution_sel_should_write_registers) * in.get(C::execution_rw_reg_6_)));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // REGISTER_READ_TAG_CHECK
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = execution_BATCHED_TAGS_DIFF_EQ_REG;
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class registers : public Relation<registersImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "registers";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 7:
            return "REGISTER_READ_TAG_CHECK";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_REGISTER_READ_TAG_CHECK = 7;
};

} // namespace bb::avm2
