// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class registersImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 8> SUBRELATION_PARTIAL_LENGTHS = { 4, 4, 4, 4, 4, 4, 4, 6 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return ((in.get(C::execution_sel_should_read_registers) + in.get(C::execution_sel_should_write_registers)))
            .is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class registers : public Relation<registersImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "registers";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "SEL_OP_REG_EFFECTIVE_0";
        case 1:
            return "SEL_OP_REG_EFFECTIVE_1";
        case 2:
            return "SEL_OP_REG_EFFECTIVE_2";
        case 3:
            return "SEL_OP_REG_EFFECTIVE_3";
        case 4:
            return "SEL_OP_REG_EFFECTIVE_4";
        case 5:
            return "SEL_OP_REG_EFFECTIVE_5";
        case 6:
            return "SEL_OP_REG_EFFECTIVE_6";
        case 7:
            return "REGISTER_READ_TAG_CHECK";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SEL_OP_REG_EFFECTIVE_0 = 0;
    static constexpr size_t SR_SEL_OP_REG_EFFECTIVE_1 = 1;
    static constexpr size_t SR_SEL_OP_REG_EFFECTIVE_2 = 2;
    static constexpr size_t SR_SEL_OP_REG_EFFECTIVE_3 = 3;
    static constexpr size_t SR_SEL_OP_REG_EFFECTIVE_4 = 4;
    static constexpr size_t SR_SEL_OP_REG_EFFECTIVE_5 = 5;
    static constexpr size_t SR_SEL_OP_REG_EFFECTIVE_6 = 6;
    static constexpr size_t SR_REGISTER_READ_TAG_CHECK = 7;
};

} // namespace bb::avm2
