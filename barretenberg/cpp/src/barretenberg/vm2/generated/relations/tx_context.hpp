// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class tx_contextImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 74> SUBRELATION_PARTIAL_LENGTHS = {
        3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 2, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5,
        3, 4, 4, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 5
    };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::tx_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class tx_context : public Relation<tx_contextImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "tx_context";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 24:
            return "NOTE_HASH_ROOT_CONTINUITY";
        case 25:
            return "NOTE_HASH_TREE_SIZE_CONTINUITY";
        case 26:
            return "NUM_NOTE_HASHES_EMITTED_CONTINUITY";
        case 27:
            return "NULLIFIER_TREE_ROOT_CONTINUITY";
        case 28:
            return "NULLIFIER_TREE_SIZE_CONTINUITY";
        case 29:
            return "NUM_NULLIFIERS_EMITTED_CONTINUITY";
        case 30:
            return "PUBLIC_DATA_TREE_ROOT_CONTINUITY";
        case 31:
            return "PUBLIC_DATA_TREE_SIZE_CONTINUITY";
        case 32:
            return "WRITTEN_PUBLIC_DATA_SLOTS_TREE_ROOT_CONTINUITY";
        case 33:
            return "WRITTEN_PUBLIC_DATA_SLOTS_TREE_SIZE_CONTINUITY";
        case 34:
            return "L1_L2_TREE_ROOT_CONTINUITY";
        case 35:
            return "NUM_UNENCRYPTED_LOGS_CONTINUITY";
        case 36:
            return "NUM_L2_TO_L1_MESSAGES_CONTINUITY";
        case 38:
            return "PROPAGATE_L2_GAS_USED";
        case 39:
            return "PROPAGATE_DA_GAS_USED";
        case 40:
            return "PROPAGATE_L2_GAS_LIMIT";
        case 41:
            return "PROPAGATE_DA_GAS_LIMIT";
        case 42:
            return "NOTE_HASH_ROOT_IMMUTABILITY";
        case 43:
            return "NOTE_HASH_SIZE_IMMUTABILITY";
        case 44:
            return "NOTE_HASH_COUNT_IMMUTABILITY";
        case 45:
            return "NULLIFIER_ROOT_IMMUTABILITY";
        case 46:
            return "NULLIFIER_SIZE_IMMUTABILITY";
        case 47:
            return "NULLIFIER_COUNT_IMMUTABILITY";
        case 48:
            return "PUBLIC_DATA_ROOT_IMMUTABILITY";
        case 49:
            return "PUBLIC_DATA_SIZE_IMMUTABILITY";
        case 50:
            return "WRITTEN_PUBLIC_DATA_SLOTS_ROOT_IMMUTABILITY";
        case 51:
            return "WRITTEN_PUBLIC_DATA_SLOTS_SIZE_IMMUTABILITY";
        case 52:
            return "UNENCRYPTED_LOG_COUNT_IMMUTABILITY";
        case 53:
            return "L2_TO_L1_MESSAGE_COUNT_IMMUTABILITY";
        case 54:
            return "NOTE_HASH_ROOT_PADDED_IMMUTABILITY";
        case 55:
            return "NOTE_HASH_SIZE_PADDED_IMMUTABILITY";
        case 56:
            return "NOTE_HASH_COUNT_PADDED_IMMUTABILITY";
        case 57:
            return "NULLIFIER_ROOT_PADDED_IMMUTABILITY";
        case 58:
            return "NULLIFIER_SIZE_PADDED_IMMUTABILITY";
        case 59:
            return "NULLIFIER_COUNT_PADDED_IMMUTABILITY";
        case 60:
            return "PUBLIC_DATA_ROOT_PADDED_IMMUTABILITY";
        case 61:
            return "PUBLIC_DATA_SIZE_PADDED_IMMUTABILITY";
        case 62:
            return "WRITTEN_PUBLIC_DATA_SLOTS_ROOT_PADDED_IMMUTABILITY";
        case 63:
            return "WRITTEN_PUBLIC_DATA_SLOTS_SIZE_PADDED_IMMUTABILITY";
        case 64:
            return "UNENCRYPTED_LOG_COUNT_PADDED_IMMUTABILITY";
        case 65:
            return "L2_TO_L1_MESSAGE_COUNT_PADDED_IMMUTABILITY";
        case 66:
            return "L2_GAS_USED_IMMUTABILITY";
        case 67:
            return "DA_GAS_USED_IMMUTABILITY";
        case 72:
            return "NEXT_CONTEXT_ID_INITIAL_VALUE";
        case 73:
            return "NEXT_CONTEXT_ID_CONTINUITY";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_NOTE_HASH_ROOT_CONTINUITY = 24;
    static constexpr size_t SR_NOTE_HASH_TREE_SIZE_CONTINUITY = 25;
    static constexpr size_t SR_NUM_NOTE_HASHES_EMITTED_CONTINUITY = 26;
    static constexpr size_t SR_NULLIFIER_TREE_ROOT_CONTINUITY = 27;
    static constexpr size_t SR_NULLIFIER_TREE_SIZE_CONTINUITY = 28;
    static constexpr size_t SR_NUM_NULLIFIERS_EMITTED_CONTINUITY = 29;
    static constexpr size_t SR_PUBLIC_DATA_TREE_ROOT_CONTINUITY = 30;
    static constexpr size_t SR_PUBLIC_DATA_TREE_SIZE_CONTINUITY = 31;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_TREE_ROOT_CONTINUITY = 32;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_TREE_SIZE_CONTINUITY = 33;
    static constexpr size_t SR_L1_L2_TREE_ROOT_CONTINUITY = 34;
    static constexpr size_t SR_NUM_UNENCRYPTED_LOGS_CONTINUITY = 35;
    static constexpr size_t SR_NUM_L2_TO_L1_MESSAGES_CONTINUITY = 36;
    static constexpr size_t SR_PROPAGATE_L2_GAS_USED = 38;
    static constexpr size_t SR_PROPAGATE_DA_GAS_USED = 39;
    static constexpr size_t SR_PROPAGATE_L2_GAS_LIMIT = 40;
    static constexpr size_t SR_PROPAGATE_DA_GAS_LIMIT = 41;
    static constexpr size_t SR_NOTE_HASH_ROOT_IMMUTABILITY = 42;
    static constexpr size_t SR_NOTE_HASH_SIZE_IMMUTABILITY = 43;
    static constexpr size_t SR_NOTE_HASH_COUNT_IMMUTABILITY = 44;
    static constexpr size_t SR_NULLIFIER_ROOT_IMMUTABILITY = 45;
    static constexpr size_t SR_NULLIFIER_SIZE_IMMUTABILITY = 46;
    static constexpr size_t SR_NULLIFIER_COUNT_IMMUTABILITY = 47;
    static constexpr size_t SR_PUBLIC_DATA_ROOT_IMMUTABILITY = 48;
    static constexpr size_t SR_PUBLIC_DATA_SIZE_IMMUTABILITY = 49;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_ROOT_IMMUTABILITY = 50;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_SIZE_IMMUTABILITY = 51;
    static constexpr size_t SR_UNENCRYPTED_LOG_COUNT_IMMUTABILITY = 52;
    static constexpr size_t SR_L2_TO_L1_MESSAGE_COUNT_IMMUTABILITY = 53;
    static constexpr size_t SR_NOTE_HASH_ROOT_PADDED_IMMUTABILITY = 54;
    static constexpr size_t SR_NOTE_HASH_SIZE_PADDED_IMMUTABILITY = 55;
    static constexpr size_t SR_NOTE_HASH_COUNT_PADDED_IMMUTABILITY = 56;
    static constexpr size_t SR_NULLIFIER_ROOT_PADDED_IMMUTABILITY = 57;
    static constexpr size_t SR_NULLIFIER_SIZE_PADDED_IMMUTABILITY = 58;
    static constexpr size_t SR_NULLIFIER_COUNT_PADDED_IMMUTABILITY = 59;
    static constexpr size_t SR_PUBLIC_DATA_ROOT_PADDED_IMMUTABILITY = 60;
    static constexpr size_t SR_PUBLIC_DATA_SIZE_PADDED_IMMUTABILITY = 61;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_ROOT_PADDED_IMMUTABILITY = 62;
    static constexpr size_t SR_WRITTEN_PUBLIC_DATA_SLOTS_SIZE_PADDED_IMMUTABILITY = 63;
    static constexpr size_t SR_UNENCRYPTED_LOG_COUNT_PADDED_IMMUTABILITY = 64;
    static constexpr size_t SR_L2_TO_L1_MESSAGE_COUNT_PADDED_IMMUTABILITY = 65;
    static constexpr size_t SR_L2_GAS_USED_IMMUTABILITY = 66;
    static constexpr size_t SR_DA_GAS_USED_IMMUTABILITY = 67;
    static constexpr size_t SR_NEXT_CONTEXT_ID_INITIAL_VALUE = 72;
    static constexpr size_t SR_NEXT_CONTEXT_ID_CONTINUITY = 73;
};

} // namespace bb::avm2
