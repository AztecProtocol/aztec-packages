// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class poseidon2_memImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 13> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::poseidon2_perm_mem_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class poseidon2_mem : public Relation<poseidon2_memImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "poseidon2_mem";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "READ_ADDR_INCR";
        case 3:
            return "WRITE_ADDR_INCR";
        case 10:
            return "BATCH_ZERO_CHECK";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_READ_ADDR_INCR = 0;
    static constexpr size_t SR_WRITE_ADDR_INCR = 3;
    static constexpr size_t SR_BATCH_ZERO_CHECK = 10;
};

} // namespace bb::avm2
