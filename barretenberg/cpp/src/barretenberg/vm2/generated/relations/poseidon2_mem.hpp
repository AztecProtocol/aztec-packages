// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class poseidon2_memImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 13> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::poseidon2_perm_mem_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_FF = FF(0);
        const auto constants_AVM_HIGHEST_MEM_ADDRESS = FF(4294967295UL);
        const auto poseidon2_perm_mem_INPUT_TAG_DIFF_0 =
            (in.get(C::poseidon2_perm_mem_input_tag_0_) - constants_MEM_TAG_FF);
        const auto poseidon2_perm_mem_INPUT_TAG_DIFF_1 =
            (in.get(C::poseidon2_perm_mem_input_tag_1_) - constants_MEM_TAG_FF);
        const auto poseidon2_perm_mem_INPUT_TAG_DIFF_2 =
            (in.get(C::poseidon2_perm_mem_input_tag_2_) - constants_MEM_TAG_FF);
        const auto poseidon2_perm_mem_INPUT_TAG_DIFF_3 =
            (in.get(C::poseidon2_perm_mem_input_tag_3_) - constants_MEM_TAG_FF);
        const auto poseidon2_perm_mem_BATCHED_TAG_CHECK =
            FF(1) * poseidon2_perm_mem_INPUT_TAG_DIFF_0 + FF(8) * poseidon2_perm_mem_INPUT_TAG_DIFF_1 +
            FF(64) * poseidon2_perm_mem_INPUT_TAG_DIFF_2 + FF(512) * poseidon2_perm_mem_INPUT_TAG_DIFF_3;

        { // READ_ADDR_INCR
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_read_address_1_) -
                        in.get(C::poseidon2_perm_mem_sel) * (in.get(C::poseidon2_perm_mem_read_address_0_) + FF(1)));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_read_address_2_) -
                        in.get(C::poseidon2_perm_mem_sel) * (in.get(C::poseidon2_perm_mem_read_address_0_) + FF(2)));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_read_address_3_) -
                        in.get(C::poseidon2_perm_mem_sel) * (in.get(C::poseidon2_perm_mem_read_address_0_) + FF(3)));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // WRITE_ADDR_INCR
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_write_address_1_) -
                        in.get(C::poseidon2_perm_mem_sel) * (in.get(C::poseidon2_perm_mem_write_address_0_) + FF(1)));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_write_address_2_) -
                        in.get(C::poseidon2_perm_mem_sel) * (in.get(C::poseidon2_perm_mem_write_address_0_) + FF(2)));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_write_address_3_) -
                        in.get(C::poseidon2_perm_mem_sel) * (in.get(C::poseidon2_perm_mem_write_address_0_) + FF(3)));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::poseidon2_perm_mem_sel_src_out_of_range_err) *
                       (FF(1) - in.get(C::poseidon2_perm_mem_sel_src_out_of_range_err));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::poseidon2_perm_mem_sel_dst_out_of_range_err) *
                       (FF(1) - in.get(C::poseidon2_perm_mem_sel_dst_out_of_range_err));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::poseidon2_perm_mem_sel) *
                       (in.get(C::poseidon2_perm_mem_max_mem_addr) - constants_AVM_HIGHEST_MEM_ADDRESS);
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::poseidon2_perm_mem_sel_should_read_mem) -
                 in.get(C::poseidon2_perm_mem_sel) * (FF(1) - in.get(C::poseidon2_perm_mem_sel_src_out_of_range_err)) *
                     (FF(1) - in.get(C::poseidon2_perm_mem_sel_dst_out_of_range_err)));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // BATCH_ZERO_CHECK
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp =
                (poseidon2_perm_mem_BATCHED_TAG_CHECK * ((FF(1) - in.get(C::poseidon2_perm_mem_sel_invalid_tag_err)) *
                                                             (FF(1) - in.get(C::poseidon2_perm_mem_batch_tag_inv)) +
                                                         in.get(C::poseidon2_perm_mem_batch_tag_inv)) -
                 in.get(C::poseidon2_perm_mem_sel_invalid_tag_err));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_err) -
                        (FF(1) - (FF(1) - in.get(C::poseidon2_perm_mem_sel_src_out_of_range_err)) *
                                     (FF(1) - in.get(C::poseidon2_perm_mem_sel_dst_out_of_range_err)) *
                                     (FF(1) - in.get(C::poseidon2_perm_mem_sel_invalid_tag_err))));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = (in.get(C::poseidon2_perm_mem_sel_should_exec) -
                        in.get(C::poseidon2_perm_mem_sel) * (FF(1) - in.get(C::poseidon2_perm_mem_err)));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class poseidon2_mem : public Relation<poseidon2_memImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "poseidon2_mem";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "READ_ADDR_INCR";
        case 3:
            return "WRITE_ADDR_INCR";
        case 10:
            return "BATCH_ZERO_CHECK";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_READ_ADDR_INCR = 0;
    static constexpr size_t SR_WRITE_ADDR_INCR = 3;
    static constexpr size_t SR_BATCH_ZERO_CHECK = 10;
};

} // namespace bb::avm2
