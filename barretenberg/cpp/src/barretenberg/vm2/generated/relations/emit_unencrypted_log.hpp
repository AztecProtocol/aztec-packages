// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class emit_unencrypted_logImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 46> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 3,
                                                                            3, 3, 3, 3, 4, 3, 5, 3, 4, 3, 3, 5,
                                                                            3, 5, 5, 4, 4, 3, 3, 3, 5, 5, 4, 4,
                                                                            4, 4, 4, 4, 3, 5, 3, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::emit_unencrypted_log_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class emit_unencrypted_log : public Relation<emit_unencrypted_logImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "emit_unencrypted_log";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 4:
            return "START_AFTER_LATCH";
        case 5:
            return "SELECTOR_ON_START";
        case 6:
            return "SELECTOR_CONSISTENCY";
        case 7:
            return "SELECTOR_ON_END";
        case 9:
            return "REMAINING_ROWS_DECREMENT";
        case 16:
            return "ERROR_OUT_OF_BOUNDS_CONSISTENCY";
        case 20:
            return "ERROR_TAG_MISMATCH_CONSISTENCY";
        case 23:
            return "WRONG_TAG_CHECK";
        case 28:
            return "SEL_SHOULD_WRITE_TO_PUBLIC_INPUTS_CONSISTENCY";
        case 32:
            return "REMAINING_LOG_SIZE_DECREMENT";
        case 35:
            return "LOG_ADDRESS_INCREMENT";
        case 36:
            return "EXEC_CLK_CONSISTENCY";
        case 37:
            return "SPACE_ID_CONSISTENCY";
        case 44:
            return "CONTRACT_ADDRESS_CONSISTENCY";
        case 45:
            return "LOG_SIZE_CONSISTENCY";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_START_AFTER_LATCH = 4;
    static constexpr size_t SR_SELECTOR_ON_START = 5;
    static constexpr size_t SR_SELECTOR_CONSISTENCY = 6;
    static constexpr size_t SR_SELECTOR_ON_END = 7;
    static constexpr size_t SR_REMAINING_ROWS_DECREMENT = 9;
    static constexpr size_t SR_ERROR_OUT_OF_BOUNDS_CONSISTENCY = 16;
    static constexpr size_t SR_ERROR_TAG_MISMATCH_CONSISTENCY = 20;
    static constexpr size_t SR_WRONG_TAG_CHECK = 23;
    static constexpr size_t SR_SEL_SHOULD_WRITE_TO_PUBLIC_INPUTS_CONSISTENCY = 28;
    static constexpr size_t SR_REMAINING_LOG_SIZE_DECREMENT = 32;
    static constexpr size_t SR_LOG_ADDRESS_INCREMENT = 35;
    static constexpr size_t SR_EXEC_CLK_CONSISTENCY = 36;
    static constexpr size_t SR_SPACE_ID_CONSISTENCY = 37;
    static constexpr size_t SR_CONTRACT_ADDRESS_CONSISTENCY = 44;
    static constexpr size_t SR_LOG_SIZE_CONSISTENCY = 45;
};

} // namespace bb::avm2
