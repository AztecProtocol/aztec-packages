// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class emit_unencrypted_logImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 46> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 3,
                                                                            3, 3, 3, 3, 4, 3, 5, 3, 4, 3, 3, 5,
                                                                            3, 5, 5, 4, 4, 3, 3, 3, 5, 5, 4, 4,
                                                                            4, 4, 4, 4, 3, 5, 3, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::emit_unencrypted_log_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MAX_PUBLIC_LOGS_PER_TX = FF(8);
        const auto constants_PUBLIC_LOG_SIZE_IN_FIELDS = FF(13);
        const auto constants_MEM_TAG_FF = FF(0);
        const auto constants_AVM_HIGHEST_MEM_ADDRESS = FF(4294967295UL);
        const auto constants_AVM_PUBLIC_INPUTS_AVM_ACCUMULATED_DATA_PUBLIC_LOGS_ROW_IDX = FF(511);
        const auto emit_unencrypted_log_NOT_END =
            in.get(C::emit_unencrypted_log_sel) * (FF(1) - in.get(C::emit_unencrypted_log_end));
        const auto emit_unencrypted_log_LATCH_CONDITION =
            in.get(C::emit_unencrypted_log_end) + in.get(C::precomputed_first_row);
        const auto emit_unencrypted_log_MAX_LOGS_MINUS_EMITTED =
            (constants_MAX_PUBLIC_LOGS_PER_TX - in.get(C::emit_unencrypted_log_prev_num_unencrypted_logs));
        const auto emit_unencrypted_log_WRONG_TAG = (FF(1) - in.get(C::emit_unencrypted_log_correct_tag));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_error) * (FF(1) - in.get(C::emit_unencrypted_log_error));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) * (FF(1) - in.get(C::emit_unencrypted_log_start));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_end) * (FF(1) - in.get(C::emit_unencrypted_log_end));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_end) * in.get(C::precomputed_first_row);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // START_AFTER_LATCH
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_sel_shift) *
                       (in.get(C::emit_unencrypted_log_start_shift) - emit_unencrypted_log_LATCH_CONDITION);
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // SELECTOR_ON_START
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) * (FF(1) - in.get(C::emit_unencrypted_log_sel));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // SELECTOR_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (in.get(C::emit_unencrypted_log_sel_shift) - in.get(C::emit_unencrypted_log_sel)) *
                       (FF(1) - emit_unencrypted_log_LATCH_CONDITION);
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // SELECTOR_ON_END
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_end) * (FF(1) - in.get(C::emit_unencrypted_log_sel));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       ((constants_PUBLIC_LOG_SIZE_IN_FIELDS - FF(1)) - in.get(C::emit_unencrypted_log_remaining_rows));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // REMAINING_ROWS_DECREMENT
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * ((in.get(C::emit_unencrypted_log_remaining_rows) - FF(1)) -
                                                       in.get(C::emit_unencrypted_log_remaining_rows_shift));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_sel) *
                       ((in.get(C::emit_unencrypted_log_remaining_rows) *
                             (in.get(C::emit_unencrypted_log_end) *
                                  (FF(1) - in.get(C::emit_unencrypted_log_remaining_rows_inv)) +
                              in.get(C::emit_unencrypted_log_remaining_rows_inv)) -
                         FF(1)) +
                        in.get(C::emit_unencrypted_log_end));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_error_too_large) *
                       (FF(1) - in.get(C::emit_unencrypted_log_error_too_large));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       (in.get(C::emit_unencrypted_log_max_log_size) - constants_PUBLIC_LOG_SIZE_IN_FIELDS);
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_error_out_of_bounds) *
                       (FF(1) - in.get(C::emit_unencrypted_log_error_out_of_bounds));
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       (in.get(C::emit_unencrypted_log_max_mem_addr) - constants_AVM_HIGHEST_MEM_ADDRESS);
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::emit_unencrypted_log_start) *
                (((in.get(C::emit_unencrypted_log_log_address) + in.get(C::emit_unencrypted_log_log_size)) - FF(1)) -
                 in.get(C::emit_unencrypted_log_end_log_address));
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        { // ERROR_OUT_OF_BOUNDS_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * (in.get(C::emit_unencrypted_log_error_out_of_bounds_shift) -
                                                       in.get(C::emit_unencrypted_log_error_out_of_bounds));
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_error_too_many_logs) *
                       (FF(1) - in.get(C::emit_unencrypted_log_error_too_many_logs));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       ((emit_unencrypted_log_MAX_LOGS_MINUS_EMITTED *
                             (in.get(C::emit_unencrypted_log_error_too_many_logs) *
                                  (FF(1) - in.get(C::emit_unencrypted_log_max_logs_minus_emitted_inv)) +
                              in.get(C::emit_unencrypted_log_max_logs_minus_emitted_inv)) -
                         FF(1)) +
                        in.get(C::emit_unencrypted_log_error_too_many_logs));
            tmp *= scaling_factor;
            std::get<18>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<19, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_error_tag_mismatch) *
                       (FF(1) - in.get(C::emit_unencrypted_log_error_tag_mismatch));
            tmp *= scaling_factor;
            std::get<19>(evals) += typename Accumulator::View(tmp);
        }
        { // ERROR_TAG_MISMATCH_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<20, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * (in.get(C::emit_unencrypted_log_error_tag_mismatch_shift) -
                                                       in.get(C::emit_unencrypted_log_error_tag_mismatch));
            tmp *= scaling_factor;
            std::get<20>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<21, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_seen_wrong_tag) *
                       (FF(1) - in.get(C::emit_unencrypted_log_seen_wrong_tag));
            tmp *= scaling_factor;
            std::get<21>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<22, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       (emit_unencrypted_log_WRONG_TAG - in.get(C::emit_unencrypted_log_seen_wrong_tag));
            tmp *= scaling_factor;
            std::get<22>(evals) += typename Accumulator::View(tmp);
        }
        { // WRONG_TAG_CHECK
            using Accumulator = typename std::tuple_element_t<23, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END *
                       (((FF(1) - in.get(C::emit_unencrypted_log_seen_wrong_tag)) * emit_unencrypted_log_WRONG_TAG +
                         in.get(C::emit_unencrypted_log_seen_wrong_tag)) -
                        in.get(C::emit_unencrypted_log_seen_wrong_tag_shift));
            tmp *= scaling_factor;
            std::get<23>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<24, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_end) * (in.get(C::emit_unencrypted_log_error_tag_mismatch) -
                                                              in.get(C::emit_unencrypted_log_seen_wrong_tag));
            tmp *= scaling_factor;
            std::get<24>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<25, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       ((FF(1) - in.get(C::emit_unencrypted_log_error_too_many_logs)) *
                            (FF(1) - in.get(C::emit_unencrypted_log_error_tag_mismatch)) *
                            (FF(1) - in.get(C::emit_unencrypted_log_is_static)) -
                        (FF(1) - in.get(C::emit_unencrypted_log_error_too_many_logs_wrong_tag_is_static)));
            tmp *= scaling_factor;
            std::get<25>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<26, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       ((FF(1) - in.get(C::emit_unencrypted_log_error_too_large)) *
                            (FF(1) - in.get(C::emit_unencrypted_log_error_out_of_bounds)) *
                            (FF(1) - in.get(C::emit_unencrypted_log_error_too_many_logs_wrong_tag_is_static)) -
                        (FF(1) - in.get(C::emit_unencrypted_log_error)));
            tmp *= scaling_factor;
            std::get<26>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<27, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::emit_unencrypted_log_start) *
                ((FF(1) - in.get(C::emit_unencrypted_log_error)) * (FF(1) - in.get(C::emit_unencrypted_log_discard)) -
                 in.get(C::emit_unencrypted_log_sel_should_write_to_public_inputs));
            tmp *= scaling_factor;
            std::get<27>(evals) += typename Accumulator::View(tmp);
        }
        { // SEL_SHOULD_WRITE_TO_PUBLIC_INPUTS_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<28, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END *
                       (in.get(C::emit_unencrypted_log_sel_should_write_to_public_inputs_shift) -
                        in.get(C::emit_unencrypted_log_sel_should_write_to_public_inputs));
            tmp *= scaling_factor;
            std::get<28>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<29, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::emit_unencrypted_log_sel) * ((in.get(C::emit_unencrypted_log_prev_num_unencrypted_logs) +
                                                        (FF(1) - in.get(C::emit_unencrypted_log_error))) -
                                                       in.get(C::emit_unencrypted_log_next_num_unencrypted_logs));
            tmp *= scaling_factor;
            std::get<29>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<30, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_is_padding_row) *
                       (FF(1) - in.get(C::emit_unencrypted_log_is_padding_row));
            tmp *= scaling_factor;
            std::get<30>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<31, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_start) *
                       (in.get(C::emit_unencrypted_log_log_size) - in.get(C::emit_unencrypted_log_remaining_log_size));
            tmp *= scaling_factor;
            std::get<31>(evals) += typename Accumulator::View(tmp);
        }
        { // REMAINING_LOG_SIZE_DECREMENT
            using Accumulator = typename std::tuple_element_t<32, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * (FF(1) - in.get(C::emit_unencrypted_log_is_padding_row)) *
                       ((in.get(C::emit_unencrypted_log_remaining_log_size) - FF(1)) -
                        in.get(C::emit_unencrypted_log_remaining_log_size_shift));
            tmp *= scaling_factor;
            std::get<32>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<33, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_sel) *
                       ((in.get(C::emit_unencrypted_log_remaining_log_size) *
                             (in.get(C::emit_unencrypted_log_is_padding_row) *
                                  (FF(1) - in.get(C::emit_unencrypted_log_remaining_log_size_inv)) +
                              in.get(C::emit_unencrypted_log_remaining_log_size_inv)) -
                         FF(1)) +
                        in.get(C::emit_unencrypted_log_is_padding_row));
            tmp *= scaling_factor;
            std::get<33>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<34, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::emit_unencrypted_log_sel) * ((FF(1) - in.get(C::emit_unencrypted_log_error_out_of_bounds)) *
                                                           (FF(1) - in.get(C::emit_unencrypted_log_is_padding_row)) -
                                                       in.get(C::emit_unencrypted_log_sel_should_read_memory));
            tmp *= scaling_factor;
            std::get<34>(evals) += typename Accumulator::View(tmp);
        }
        { // LOG_ADDRESS_INCREMENT
            using Accumulator = typename std::tuple_element_t<35, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * ((in.get(C::emit_unencrypted_log_log_address) + FF(1)) -
                                                       in.get(C::emit_unencrypted_log_log_address_shift));
            tmp *= scaling_factor;
            std::get<35>(evals) += typename Accumulator::View(tmp);
        }
        { // EXEC_CLK_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<36, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * (in.get(C::emit_unencrypted_log_execution_clk) -
                                                       in.get(C::emit_unencrypted_log_execution_clk_shift));
            tmp *= scaling_factor;
            std::get<36>(evals) += typename Accumulator::View(tmp);
        }
        { // SPACE_ID_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<37, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END *
                       (in.get(C::emit_unencrypted_log_space_id) - in.get(C::emit_unencrypted_log_space_id_shift));
            tmp *= scaling_factor;
            std::get<37>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<38, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_sel) *
                       (FF(1) - in.get(C::emit_unencrypted_log_sel_should_read_memory)) *
                       (FF(0) - in.get(C::emit_unencrypted_log_value));
            tmp *= scaling_factor;
            std::get<38>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<39, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_sel) *
                       (FF(1) - in.get(C::emit_unencrypted_log_sel_should_read_memory)) *
                       (constants_MEM_TAG_FF - in.get(C::emit_unencrypted_log_tag));
            tmp *= scaling_factor;
            std::get<39>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<40, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::emit_unencrypted_log_correct_tag) * (FF(1) - in.get(C::emit_unencrypted_log_correct_tag));
            tmp *= scaling_factor;
            std::get<40>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<41, ContainerOverSubrelations>;
            auto tmp = in.get(C::emit_unencrypted_log_sel) *
                       ((in.get(C::emit_unencrypted_log_tag) * (in.get(C::emit_unencrypted_log_correct_tag) *
                                                                    (FF(1) - in.get(C::emit_unencrypted_log_tag_inv)) +
                                                                in.get(C::emit_unencrypted_log_tag_inv)) -
                         FF(1)) +
                        in.get(C::emit_unencrypted_log_correct_tag));
            tmp *= scaling_factor;
            std::get<41>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<42, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::emit_unencrypted_log_start) *
                ((constants_AVM_PUBLIC_INPUTS_AVM_ACCUMULATED_DATA_PUBLIC_LOGS_ROW_IDX +
                  in.get(C::emit_unencrypted_log_prev_num_unencrypted_logs) * constants_PUBLIC_LOG_SIZE_IN_FIELDS) -
                 in.get(C::emit_unencrypted_log_public_inputs_index));
            tmp *= scaling_factor;
            std::get<42>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<43, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * ((in.get(C::emit_unencrypted_log_public_inputs_index) + FF(1)) -
                                                       in.get(C::emit_unencrypted_log_public_inputs_index_shift));
            tmp *= scaling_factor;
            std::get<43>(evals) += typename Accumulator::View(tmp);
        }
        { // CONTRACT_ADDRESS_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<44, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END * (in.get(C::emit_unencrypted_log_contract_address) -
                                                       in.get(C::emit_unencrypted_log_contract_address_shift));
            tmp *= scaling_factor;
            std::get<44>(evals) += typename Accumulator::View(tmp);
        }
        { // LOG_SIZE_CONSISTENCY
            using Accumulator = typename std::tuple_element_t<45, ContainerOverSubrelations>;
            auto tmp = emit_unencrypted_log_NOT_END *
                       (in.get(C::emit_unencrypted_log_log_size) - in.get(C::emit_unencrypted_log_log_size_shift));
            tmp *= scaling_factor;
            std::get<45>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class emit_unencrypted_log : public Relation<emit_unencrypted_logImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "emit_unencrypted_log";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 4:
            return "START_AFTER_LATCH";
        case 5:
            return "SELECTOR_ON_START";
        case 6:
            return "SELECTOR_CONSISTENCY";
        case 7:
            return "SELECTOR_ON_END";
        case 9:
            return "REMAINING_ROWS_DECREMENT";
        case 16:
            return "ERROR_OUT_OF_BOUNDS_CONSISTENCY";
        case 20:
            return "ERROR_TAG_MISMATCH_CONSISTENCY";
        case 23:
            return "WRONG_TAG_CHECK";
        case 28:
            return "SEL_SHOULD_WRITE_TO_PUBLIC_INPUTS_CONSISTENCY";
        case 32:
            return "REMAINING_LOG_SIZE_DECREMENT";
        case 35:
            return "LOG_ADDRESS_INCREMENT";
        case 36:
            return "EXEC_CLK_CONSISTENCY";
        case 37:
            return "SPACE_ID_CONSISTENCY";
        case 44:
            return "CONTRACT_ADDRESS_CONSISTENCY";
        case 45:
            return "LOG_SIZE_CONSISTENCY";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_START_AFTER_LATCH = 4;
    static constexpr size_t SR_SELECTOR_ON_START = 5;
    static constexpr size_t SR_SELECTOR_CONSISTENCY = 6;
    static constexpr size_t SR_SELECTOR_ON_END = 7;
    static constexpr size_t SR_REMAINING_ROWS_DECREMENT = 9;
    static constexpr size_t SR_ERROR_OUT_OF_BOUNDS_CONSISTENCY = 16;
    static constexpr size_t SR_ERROR_TAG_MISMATCH_CONSISTENCY = 20;
    static constexpr size_t SR_WRONG_TAG_CHECK = 23;
    static constexpr size_t SR_SEL_SHOULD_WRITE_TO_PUBLIC_INPUTS_CONSISTENCY = 28;
    static constexpr size_t SR_REMAINING_LOG_SIZE_DECREMENT = 32;
    static constexpr size_t SR_LOG_ADDRESS_INCREMENT = 35;
    static constexpr size_t SR_EXEC_CLK_CONSISTENCY = 36;
    static constexpr size_t SR_SPACE_ID_CONSISTENCY = 37;
    static constexpr size_t SR_CONTRACT_ADDRESS_CONSISTENCY = 44;
    static constexpr size_t SR_LOG_SIZE_CONSISTENCY = 45;
};

} // namespace bb::avm2
