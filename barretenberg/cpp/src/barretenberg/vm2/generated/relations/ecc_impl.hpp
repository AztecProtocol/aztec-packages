// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/ecc.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void eccImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                              const AllEntities& in,
                              [[maybe_unused]] const RelationParameters<FF_>&,
                              [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    BB_BENCH_NESTED_NAME("accumulate/ecc");

    const auto ecc_INFINITY_X = FF(0);
    const auto ecc_INFINITY_Y = FF(0);
    const auto ecc_X_DIFF = (in.get(C::ecc_q_x) - in.get(C::ecc_p_x));
    const auto ecc_Y_DIFF = (in.get(C::ecc_q_y) - in.get(C::ecc_p_y));
    const auto ecc_INFINITY_PRED = in.get(C::ecc_x_match) * (FF(1) - in.get(C::ecc_y_match));
    const auto ecc_BOTH_INF = in.get(C::ecc_p_is_inf) * in.get(C::ecc_q_is_inf);
    const auto ecc_BOTH_NON_INF = (FF(1) - in.get(C::ecc_p_is_inf)) * (FF(1) - in.get(C::ecc_q_is_inf));
    const auto ecc_COMPUTED_R_X =
        ((in.get(C::ecc_lambda) * in.get(C::ecc_lambda) - in.get(C::ecc_p_x)) - in.get(C::ecc_q_x));
    const auto ecc_COMPUTED_R_Y =
        (in.get(C::ecc_lambda) * (in.get(C::ecc_p_x) - in.get(C::ecc_r_x)) - in.get(C::ecc_p_y));
    const auto ecc_EITHER_INF = ((in.get(C::ecc_p_is_inf) + in.get(C::ecc_q_is_inf)) - FF(2) * ecc_BOTH_INF);

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_sel) * (FF(1) - in.get(C::ecc_sel));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_double_op) * (FF(1) - in.get(C::ecc_double_op));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_add_op) * (FF(1) - in.get(C::ecc_add_op));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_sel) - (in.get(C::ecc_double_op) + in.get(C::ecc_add_op) + ecc_INFINITY_PRED));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_p_is_inf) * (FF(1) - in.get(C::ecc_p_is_inf));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_q_is_inf) * (FF(1) - in.get(C::ecc_q_is_inf));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_r_is_inf) * (FF(1) - in.get(C::ecc_r_is_inf));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_x_match) * (FF(1) - in.get(C::ecc_x_match));
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::ecc_sel) *
            ((ecc_X_DIFF * (in.get(C::ecc_x_match) * (FF(1) - in.get(C::ecc_inv_x_diff)) + in.get(C::ecc_inv_x_diff)) -
              FF(1)) +
             in.get(C::ecc_x_match));
        tmp *= scaling_factor;
        std::get<8>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_y_match) * (FF(1) - in.get(C::ecc_y_match));
        tmp *= scaling_factor;
        std::get<9>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::ecc_sel) *
            ((ecc_Y_DIFF * (in.get(C::ecc_y_match) * (FF(1) - in.get(C::ecc_inv_y_diff)) + in.get(C::ecc_inv_y_diff)) -
              FF(1)) +
             in.get(C::ecc_y_match));
        tmp *= scaling_factor;
        std::get<10>(evals) += typename Accumulator::View(tmp);
    }
    { // DOUBLE_PRED
        using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_double_op) - in.get(C::ecc_x_match) * in.get(C::ecc_y_match));
        tmp *= scaling_factor;
        std::get<11>(evals) += typename Accumulator::View(tmp);
    }
    { // INFINITY_RESULT
        using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_sel) *
                   (in.get(C::ecc_result_infinity) - (ecc_INFINITY_PRED * ecc_BOTH_NON_INF + ecc_BOTH_INF));
        tmp *= scaling_factor;
        std::get<12>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
        auto tmp = (FF(1) - in.get(C::ecc_result_infinity)) * in.get(C::ecc_double_op) *
                   (FF(2) * in.get(C::ecc_p_y) * in.get(C::ecc_inv_2_p_y) - FF(1));
        tmp *= scaling_factor;
        std::get<13>(evals) += typename Accumulator::View(tmp);
    }
    { // COMPUTED_LAMBDA
        using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_sel) *
                   (in.get(C::ecc_lambda) - (in.get(C::ecc_double_op) * FF(3) * in.get(C::ecc_p_x) *
                                                 in.get(C::ecc_p_x) * in.get(C::ecc_inv_2_p_y) +
                                             in.get(C::ecc_add_op) * ecc_Y_DIFF * in.get(C::ecc_inv_x_diff)));
        tmp *= scaling_factor;
        std::get<14>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
        auto tmp =
            (in.get(C::ecc_use_computed_result) - in.get(C::ecc_sel) * (FF(1) - in.get(C::ecc_p_is_inf)) *
                                                      (FF(1) - in.get(C::ecc_q_is_inf)) * (FF(1) - ecc_INFINITY_PRED));
        tmp *= scaling_factor;
        std::get<15>(evals) += typename Accumulator::View(tmp);
    }
    { // OUTPUT_X_COORD
        using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_sel) *
                   (((in.get(C::ecc_r_x) - ecc_EITHER_INF * (in.get(C::ecc_p_is_inf) * in.get(C::ecc_q_x) +
                                                             in.get(C::ecc_q_is_inf) * in.get(C::ecc_p_x))) -
                     in.get(C::ecc_result_infinity) * ecc_INFINITY_X) -
                    in.get(C::ecc_use_computed_result) * ecc_COMPUTED_R_X);
        tmp *= scaling_factor;
        std::get<16>(evals) += typename Accumulator::View(tmp);
    }
    { // OUTPUT_Y_COORD
        using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_sel) *
                   (((in.get(C::ecc_r_y) - ecc_EITHER_INF * (in.get(C::ecc_p_is_inf) * in.get(C::ecc_q_y) +
                                                             in.get(C::ecc_q_is_inf) * in.get(C::ecc_p_y))) -
                     in.get(C::ecc_result_infinity) * ecc_INFINITY_Y) -
                    in.get(C::ecc_use_computed_result) * ecc_COMPUTED_R_Y);
        tmp *= scaling_factor;
        std::get<17>(evals) += typename Accumulator::View(tmp);
    }
    { // OUTPUT_INF_FLAG
        using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_sel) * (in.get(C::ecc_r_is_inf) - in.get(C::ecc_result_infinity));
        tmp *= scaling_factor;
        std::get<18>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
