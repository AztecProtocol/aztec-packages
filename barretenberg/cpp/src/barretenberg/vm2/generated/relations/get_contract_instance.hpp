// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class get_contract_instanceImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 8> SUBRELATION_PARTIAL_LENGTHS = { 3, 5, 3, 4, 3, 3, 2, 2 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::get_contract_instance_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class get_contract_instance : public Relation<get_contract_instanceImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "get_contract_instance";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "WRITE_OUT_OF_BOUNDS_CHECK";
        case 2:
            return "IS_VALID_MEMBER_ENUM_ONLY_SET_BY_PRECOMPUTED_LOOKUP";
        case 3:
            return "ERROR_AGGREGATION";
        case 4:
            return "SELECTED_MEMBER";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_WRITE_OUT_OF_BOUNDS_CHECK = 1;
    static constexpr size_t SR_IS_VALID_MEMBER_ENUM_ONLY_SET_BY_PRECOMPUTED_LOOKUP = 2;
    static constexpr size_t SR_ERROR_AGGREGATION = 3;
    static constexpr size_t SR_SELECTED_MEMBER = 4;
};

} // namespace bb::avm2
