// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class get_contract_instanceImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 8> SUBRELATION_PARTIAL_LENGTHS = { 3, 5, 3, 4, 3, 3, 2, 2 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::get_contract_instance_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_FF = FF(0);
        const auto constants_MEM_TAG_U1 = FF(1);
        const auto constants_AVM_HIGHEST_MEM_ADDRESS = FF(4294967295UL);
        const auto get_contract_instance_WRITES_OUT_OF_BOUNDS =
            (FF(1) - in.get(C::get_contract_instance_is_valid_writes_in_bounds));
        const auto get_contract_instance_DST_OFFSET_DIFF_MAX =
            (constants_AVM_HIGHEST_MEM_ADDRESS - in.get(C::get_contract_instance_dst_offset));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::get_contract_instance_sel) * (FF(1) - in.get(C::get_contract_instance_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // WRITE_OUT_OF_BOUNDS_CHECK
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::get_contract_instance_sel) *
                       ((get_contract_instance_DST_OFFSET_DIFF_MAX *
                             (get_contract_instance_WRITES_OUT_OF_BOUNDS *
                                  (FF(1) - in.get(C::get_contract_instance_dst_offset_diff_max_inv)) +
                              in.get(C::get_contract_instance_dst_offset_diff_max_inv)) -
                         FF(1)) +
                        get_contract_instance_WRITES_OUT_OF_BOUNDS);
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // IS_VALID_MEMBER_ENUM_ONLY_SET_BY_PRECOMPUTED_LOOKUP
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                get_contract_instance_WRITES_OUT_OF_BOUNDS * in.get(C::get_contract_instance_is_valid_member_enum);
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // ERROR_AGGREGATION
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::get_contract_instance_sel_error) -
                        in.get(C::get_contract_instance_sel) *
                            (FF(1) - in.get(C::get_contract_instance_is_valid_writes_in_bounds) *
                                         in.get(C::get_contract_instance_is_valid_member_enum)));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // SELECTED_MEMBER
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::get_contract_instance_selected_member) -
                 (in.get(C::get_contract_instance_is_deployer) *
                      in.get(C::get_contract_instance_retrieved_deployer_addr) +
                  in.get(C::get_contract_instance_is_class_id) * in.get(C::get_contract_instance_retrieved_class_id) +
                  in.get(C::get_contract_instance_is_init_hash) *
                      in.get(C::get_contract_instance_retrieved_init_hash)));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = (in.get(C::get_contract_instance_member_write_offset) -
                        in.get(C::get_contract_instance_is_valid_writes_in_bounds) *
                            (in.get(C::get_contract_instance_dst_offset) + FF(1)));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (in.get(C::get_contract_instance_exists_tag) -
                        in.get(C::get_contract_instance_is_valid_writes_in_bounds) * constants_MEM_TAG_U1);
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = (in.get(C::get_contract_instance_member_tag) -
                        in.get(C::get_contract_instance_is_valid_writes_in_bounds) * constants_MEM_TAG_FF);
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class get_contract_instance : public Relation<get_contract_instanceImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "get_contract_instance";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "WRITE_OUT_OF_BOUNDS_CHECK";
        case 2:
            return "IS_VALID_MEMBER_ENUM_ONLY_SET_BY_PRECOMPUTED_LOOKUP";
        case 3:
            return "ERROR_AGGREGATION";
        case 4:
            return "SELECTED_MEMBER";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_WRITE_OUT_OF_BOUNDS_CHECK = 1;
    static constexpr size_t SR_IS_VALID_MEMBER_ENUM_ONLY_SET_BY_PRECOMPUTED_LOOKUP = 2;
    static constexpr size_t SR_ERROR_AGGREGATION = 3;
    static constexpr size_t SR_SELECTED_MEMBER = 4;
};

} // namespace bb::avm2
