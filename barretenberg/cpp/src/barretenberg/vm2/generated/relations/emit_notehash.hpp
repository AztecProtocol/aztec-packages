// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class emit_notehashImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 7> SUBRELATION_PARTIAL_LENGTHS = { 3, 5, 4, 3, 4, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_execute_emit_notehash)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        PROFILE_THIS_NAME("accumulate/emit_notehash");

        const auto constants_MAX_NOTE_HASHES_PER_TX = FF(64);
        const auto execution_REMAINING_NOTE_HASH_WRITES =
            (constants_MAX_NOTE_HASHES_PER_TX - in.get(C::execution_prev_num_note_hashes_emitted));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_reached_max_note_hashes) *
                       (FF(1) - in.get(C::execution_sel_reached_max_note_hashes));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // MAX_NOTE_HASHES_REACHED
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_emit_notehash) *
                ((execution_REMAINING_NOTE_HASH_WRITES * (in.get(C::execution_sel_reached_max_note_hashes) *
                                                              (FF(1) - in.get(C::execution_remaining_note_hashes_inv)) +
                                                          in.get(C::execution_remaining_note_hashes_inv)) -
                  FF(1)) +
                 in.get(C::execution_sel_reached_max_note_hashes));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // OPCODE_ERROR_IF_MAX_NOTE_HASHES_REACHED_OR_STATIC
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_emit_notehash) *
                ((FF(1) - in.get(C::execution_sel_reached_max_note_hashes)) * (FF(1) - in.get(C::execution_is_static)) -
                 (FF(1) - in.get(C::execution_sel_opcode_error)));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_emit_notehash) *
                       ((FF(1) - in.get(C::execution_sel_opcode_error)) - in.get(C::execution_sel_write_note_hash));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // EMIT_NOTEHASH_TREE_ROOT_NOT_CHANGED
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_emit_notehash) * in.get(C::execution_sel_opcode_error) *
                       (in.get(C::execution_prev_note_hash_tree_root) - in.get(C::execution_note_hash_tree_root));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // EMIT_NOTEHASH_TREE_SIZE_INCREASE
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_emit_notehash) *
                       ((in.get(C::execution_prev_note_hash_tree_size) + in.get(C::execution_sel_write_note_hash)) -
                        in.get(C::execution_note_hash_tree_size));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // EMIT_NOTEHASH_NUM_NOTE_HASHES_EMITTED_INCREASE
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_emit_notehash) *
                       ((in.get(C::execution_prev_num_note_hashes_emitted) + in.get(C::execution_sel_write_note_hash)) -
                        in.get(C::execution_num_note_hashes_emitted));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class emit_notehash : public Relation<emit_notehashImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "emit_notehash";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "MAX_NOTE_HASHES_REACHED";
        case 2:
            return "OPCODE_ERROR_IF_MAX_NOTE_HASHES_REACHED_OR_STATIC";
        case 4:
            return "EMIT_NOTEHASH_TREE_ROOT_NOT_CHANGED";
        case 5:
            return "EMIT_NOTEHASH_TREE_SIZE_INCREASE";
        case 6:
            return "EMIT_NOTEHASH_NUM_NOTE_HASHES_EMITTED_INCREASE";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_MAX_NOTE_HASHES_REACHED = 1;
    static constexpr size_t SR_OPCODE_ERROR_IF_MAX_NOTE_HASHES_REACHED_OR_STATIC = 2;
    static constexpr size_t SR_EMIT_NOTEHASH_TREE_ROOT_NOT_CHANGED = 4;
    static constexpr size_t SR_EMIT_NOTEHASH_TREE_SIZE_INCREASE = 5;
    static constexpr size_t SR_EMIT_NOTEHASH_NUM_NOTE_HASHES_EMITTED_INCREASE = 6;
};

} // namespace bb::avm2
