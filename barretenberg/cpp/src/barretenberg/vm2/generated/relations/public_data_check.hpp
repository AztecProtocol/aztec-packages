// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class public_data_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 28> SUBRELATION_PARTIAL_LENGTHS = { 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 5,
                                                                            4, 4, 4, 3, 4, 3, 4, 2, 4, 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::public_data_check_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class public_data_check : public Relation<public_data_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "public_data_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "START_CONDITION";
        case 11:
            return "EXISTS_FLAG_CHECK";
        case 13:
            return "NEXT_SLOT_IS_ZERO_CHECK";
        case 14:
            return "LOW_LEAF_VALUE_UPDATE";
        case 15:
            return "LOW_LEAF_NEXT_INDEX_UPDATE";
        case 16:
            return "LOW_LEAF_NEXT_SLOT_UPDATE";
        case 18:
            return "VALUE_IS_CORRECT";
        case 20:
            return "UPDATE_ROOT_VALIDATION";
        case 22:
            return "WRITE_IDX_INITIAL_VALUE";
        case 25:
            return "WRITE_IDX_INCREMENT";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_START_CONDITION = 1;
    static constexpr size_t SR_EXISTS_FLAG_CHECK = 11;
    static constexpr size_t SR_NEXT_SLOT_IS_ZERO_CHECK = 13;
    static constexpr size_t SR_LOW_LEAF_VALUE_UPDATE = 14;
    static constexpr size_t SR_LOW_LEAF_NEXT_INDEX_UPDATE = 15;
    static constexpr size_t SR_LOW_LEAF_NEXT_SLOT_UPDATE = 16;
    static constexpr size_t SR_VALUE_IS_CORRECT = 18;
    static constexpr size_t SR_UPDATE_ROOT_VALIDATION = 20;
    static constexpr size_t SR_WRITE_IDX_INITIAL_VALUE = 22;
    static constexpr size_t SR_WRITE_IDX_INCREMENT = 25;
};

} // namespace bb::avm2
