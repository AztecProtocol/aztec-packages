// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_context_ctx_stack_call ///////////////////

struct lookup_context_ctx_stack_call_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_CONTEXT_CTX_STACK_CALL";
    static constexpr std::string_view RELATION_NAME = "context";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 8;
    static constexpr Column SRC_SELECTOR = Column::execution_sel_enter_call;
    static constexpr Column DST_SELECTOR = Column::context_stack_sel;
    static constexpr Column COUNTS = Column::lookup_context_ctx_stack_call_counts;
    static constexpr Column INVERSES = Column::lookup_context_ctx_stack_call_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::execution_context_id,
        ColumnAndShifts::execution_parent_id,
        ColumnAndShifts::execution_next_pc,
        ColumnAndShifts::execution_msg_sender,
        ColumnAndShifts::execution_contract_address,
        ColumnAndShifts::execution_is_static,
        ColumnAndShifts::execution_parent_calldata_offset_addr,
        ColumnAndShifts::execution_parent_calldata_size_addr
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::context_stack_context_id,
        ColumnAndShifts::context_stack_parent_id,
        ColumnAndShifts::context_stack_next_pc,
        ColumnAndShifts::context_stack_msg_sender,
        ColumnAndShifts::context_stack_contract_address,
        ColumnAndShifts::context_stack_is_static,
        ColumnAndShifts::context_stack_parent_calldata_offset_addr,
        ColumnAndShifts::context_stack_parent_calldata_size_addr
    };
};

using lookup_context_ctx_stack_call_settings = lookup_settings<lookup_context_ctx_stack_call_settings_>;
template <typename FF_>
using lookup_context_ctx_stack_call_relation = lookup_relation_base<FF_, lookup_context_ctx_stack_call_settings>;

/////////////////// lookup_context_ctx_stack_rollback ///////////////////

struct lookup_context_ctx_stack_rollback_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_CONTEXT_CTX_STACK_ROLLBACK";
    static constexpr std::string_view RELATION_NAME = "context";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 8;
    static constexpr Column SRC_SELECTOR = Column::execution_rollback_context;
    static constexpr Column DST_SELECTOR = Column::context_stack_sel;
    static constexpr Column COUNTS = Column::lookup_context_ctx_stack_rollback_counts;
    static constexpr Column INVERSES = Column::lookup_context_ctx_stack_rollback_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::execution_context_id_shift,
        ColumnAndShifts::execution_parent_id_shift,
        ColumnAndShifts::execution_pc_shift,
        ColumnAndShifts::execution_msg_sender_shift,
        ColumnAndShifts::execution_contract_address_shift,
        ColumnAndShifts::execution_is_static_shift,
        ColumnAndShifts::execution_parent_calldata_offset_addr_shift,
        ColumnAndShifts::execution_parent_calldata_size_addr_shift
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::context_stack_context_id,
        ColumnAndShifts::context_stack_parent_id,
        ColumnAndShifts::context_stack_next_pc,
        ColumnAndShifts::context_stack_msg_sender,
        ColumnAndShifts::context_stack_contract_address,
        ColumnAndShifts::context_stack_is_static,
        ColumnAndShifts::context_stack_parent_calldata_offset_addr,
        ColumnAndShifts::context_stack_parent_calldata_size_addr
    };
};

using lookup_context_ctx_stack_rollback_settings = lookup_settings<lookup_context_ctx_stack_rollback_settings_>;
template <typename FF_>
using lookup_context_ctx_stack_rollback_relation =
    lookup_relation_base<FF_, lookup_context_ctx_stack_rollback_settings>;

/////////////////// lookup_context_ctx_stack_return ///////////////////

struct lookup_context_ctx_stack_return_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_CONTEXT_CTX_STACK_RETURN";
    static constexpr std::string_view RELATION_NAME = "context";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 8;
    static constexpr Column SRC_SELECTOR = Column::execution_nested_return;
    static constexpr Column DST_SELECTOR = Column::context_stack_sel;
    static constexpr Column COUNTS = Column::lookup_context_ctx_stack_return_counts;
    static constexpr Column INVERSES = Column::lookup_context_ctx_stack_return_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::execution_context_id_shift,
        ColumnAndShifts::execution_parent_id_shift,
        ColumnAndShifts::execution_pc_shift,
        ColumnAndShifts::execution_msg_sender_shift,
        ColumnAndShifts::execution_contract_address_shift,
        ColumnAndShifts::execution_is_static_shift,
        ColumnAndShifts::execution_parent_calldata_offset_addr_shift,
        ColumnAndShifts::execution_parent_calldata_size_addr_shift
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::context_stack_context_id,
        ColumnAndShifts::context_stack_parent_id,
        ColumnAndShifts::context_stack_next_pc,
        ColumnAndShifts::context_stack_msg_sender,
        ColumnAndShifts::context_stack_contract_address,
        ColumnAndShifts::context_stack_is_static,
        ColumnAndShifts::context_stack_parent_calldata_offset_addr,
        ColumnAndShifts::context_stack_parent_calldata_size_addr
    };
};

using lookup_context_ctx_stack_return_settings = lookup_settings<lookup_context_ctx_stack_return_settings_>;
template <typename FF_>
using lookup_context_ctx_stack_return_relation = lookup_relation_base<FF_, lookup_context_ctx_stack_return_settings>;

} // namespace bb::avm2
