// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/sstore.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void sstoreImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                 const AllEntities& in,
                                 [[maybe_unused]] const RelationParameters<FF_>&,
                                 [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    PROFILE_THIS_NAME("accumulate/sstore");

    const auto constants_MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX = FF(63);
    const auto constants_AVM_WRITTEN_PUBLIC_DATA_SLOTS_TREE_INITIAL_SIZE = FF(1);
    const auto execution_REMAINING_DATA_WRITES = ((constants_MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX +
                                                   constants_AVM_WRITTEN_PUBLIC_DATA_SLOTS_TREE_INITIAL_SIZE) -
                                                  in.get(C::execution_prev_written_public_data_slots_tree_size));

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_max_data_writes_reached) * (FF(1) - in.get(C::execution_max_data_writes_reached));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    { // SSTORE_MAX_DATA_WRITES_REACHED
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_sstore) *
                   ((execution_REMAINING_DATA_WRITES * (in.get(C::execution_max_data_writes_reached) *
                                                            (FF(1) - in.get(C::execution_remaining_data_writes_inv)) +
                                                        in.get(C::execution_remaining_data_writes_inv)) -
                     FF(1)) +
                    in.get(C::execution_max_data_writes_reached));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    { // OPCODE_ERROR_IF_OVERFLOW_OR_STATIC
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_sel_execute_sstore) *
            ((FF(1) - in.get(C::execution_max_data_writes_reached) * in.get(C::execution_dynamic_da_gas_factor)) *
                 (FF(1) - in.get(C::execution_is_static)) -
             (FF(1) - in.get(C::execution_sel_opcode_error)));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_sstore) *
                   ((FF(1) - in.get(C::execution_sel_opcode_error)) - in.get(C::execution_sel_write_public_data));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    { // SSTORE_WRITTEN_SLOTS_ROOT_NOT_CHANGED
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_sstore) * in.get(C::execution_sel_opcode_error) *
                   (in.get(C::execution_prev_written_public_data_slots_tree_root) -
                    in.get(C::execution_written_public_data_slots_tree_root));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    { // SSTORE_WRITTEN_SLOTS_SIZE_NOT_CHANGED
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_sstore) * in.get(C::execution_sel_opcode_error) *
                   (in.get(C::execution_prev_written_public_data_slots_tree_size) -
                    in.get(C::execution_written_public_data_slots_tree_size));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    { // SSTORE_PUBLIC_DATA_TREE_ROOT_NOT_CHANGED
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_sstore) * in.get(C::execution_sel_opcode_error) *
                   (in.get(C::execution_prev_public_data_tree_root) - in.get(C::execution_public_data_tree_root));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    { // SSTORE_PUBLIC_DATA_TREE_SIZE_NOT_CHANGED
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_sstore) * in.get(C::execution_sel_opcode_error) *
                   (in.get(C::execution_prev_public_data_tree_size) - in.get(C::execution_public_data_tree_size));
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
