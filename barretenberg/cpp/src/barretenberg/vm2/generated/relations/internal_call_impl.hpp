// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/internal_call.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void internal_callImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                        const AllEntities& in,
                                        [[maybe_unused]] const RelationParameters<FF_>&,
                                        [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    PROFILE_THIS_NAME("accumulate/internal_call");

    const auto execution_NOT_LAST_EXEC = in.get(C::execution_sel) * in.get(C::execution_sel_shift);
    const auto execution_RESET_NEXT_CALL_ID =
        in.get(C::execution_sel_enter_call) + in.get(C::execution_enqueued_call_start_shift);
    const auto execution_NEW_NEXT_CALL_ID =
        (in.get(C::execution_sel_execute_internal_call) + in.get(C::execution_sel_execute_internal_return)) *
            (FF(1) - in.get(C::execution_sel_error)) +
        in.get(C::execution_sel_exit_call) * (FF(1) - in.get(C::execution_enqueued_call_start_shift));
    const auto execution_PROPAGATE_CALL_ID = ((FF(1) - execution_RESET_NEXT_CALL_ID) - execution_NEW_NEXT_CALL_ID);

    { // CALL_ID_STARTS_ONE
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = execution_RESET_NEXT_CALL_ID * (in.get(C::execution_internal_call_id_shift) - FF(1));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    { // NEW_CALL_ID_ON_CALL
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_internal_call) *
                   (in.get(C::execution_internal_call_id_shift) - in.get(C::execution_next_internal_call_id));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    { // RESTORE_INTERNAL_ID_ON_RETURN
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_internal_return) *
                   (in.get(C::execution_internal_call_id_shift) - in.get(C::execution_internal_call_return_id));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    { // DEFAULT_PROPAGATE_CALL_ID
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = execution_NOT_LAST_EXEC * execution_PROPAGATE_CALL_ID *
                   (in.get(C::execution_internal_call_id_shift) - in.get(C::execution_internal_call_id));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    { // RET_ID_STARTS_ZERO
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = execution_RESET_NEXT_CALL_ID * in.get(C::execution_internal_call_return_id_shift);
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    { // NEW_RETURN_ID_ON_CALL
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_internal_call) *
                   (in.get(C::execution_internal_call_return_id_shift) - in.get(C::execution_internal_call_id));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    { // DEFAULT_PROPAGATE_RET_ID
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = execution_NOT_LAST_EXEC * execution_PROPAGATE_CALL_ID *
                   (in.get(C::execution_internal_call_return_id_shift) - in.get(C::execution_internal_call_return_id));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    { // NEXT_CALL_ID_STARTS_TWO
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = execution_RESET_NEXT_CALL_ID * (in.get(C::execution_next_internal_call_id_shift) - FF(2));
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
    { // INTERNAL_RET_ERROR
        using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_sel_execute_internal_return) *
            ((in.get(C::execution_internal_call_return_id) *
                  (in.get(C::execution_sel_opcode_error) * (FF(1) - in.get(C::execution_internal_call_return_id_inv)) +
                   in.get(C::execution_internal_call_return_id_inv)) -
              FF(1)) +
             in.get(C::execution_sel_opcode_error));
        tmp *= scaling_factor;
        std::get<8>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
