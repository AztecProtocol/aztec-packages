// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class bc_decompositionImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 54> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 4, 4, 5, 3, 4, 4, 3, 3, 3, 5, 3, 3,
                                                                            4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::bc_decomposition_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class bc_decomposition : public Relation<bc_decompositionImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "bc_decomposition";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 2:
            return "BC_DEC_SEL_BYTES_REM_NON_ZERO";
        case 3:
            return "TRACE_CONTINUITY";
        case 4:
            return "BC_DEC_LAST_CONTRACT_BYTES_REM_ONE";
        case 5:
            return "BC_DEC_PC_ZERO_INITIALIZATION";
        case 6:
            return "BC_DEC_PC_INCREMENT";
        case 7:
            return "BC_DEC_BYTES_REMAINING_DECREMENT";
        case 8:
            return "BC_DEC_ID_CONSTANT";
        case 11:
            return "IS_WINDOWS_EQ_REMAINING";
        case 12:
            return "SEL_WINDOWS_GT_REMAINING_INIT";
        case 13:
            return "SEL_WINDOWS_GT_REMAINING_PROPAGATION";
        case 14:
            return "SET_BYTES_TO_READ";
        case 52:
            return "SEL_TOGGLED_AT_PACKED";
        case 53:
            return "BC_DECOMPOSITION_REPACKING";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_BC_DEC_SEL_BYTES_REM_NON_ZERO = 2;
    static constexpr size_t SR_TRACE_CONTINUITY = 3;
    static constexpr size_t SR_BC_DEC_LAST_CONTRACT_BYTES_REM_ONE = 4;
    static constexpr size_t SR_BC_DEC_PC_ZERO_INITIALIZATION = 5;
    static constexpr size_t SR_BC_DEC_PC_INCREMENT = 6;
    static constexpr size_t SR_BC_DEC_BYTES_REMAINING_DECREMENT = 7;
    static constexpr size_t SR_BC_DEC_ID_CONSTANT = 8;
    static constexpr size_t SR_IS_WINDOWS_EQ_REMAINING = 11;
    static constexpr size_t SR_SEL_WINDOWS_GT_REMAINING_INIT = 12;
    static constexpr size_t SR_SEL_WINDOWS_GT_REMAINING_PROPAGATION = 13;
    static constexpr size_t SR_SET_BYTES_TO_READ = 14;
    static constexpr size_t SR_SEL_TOGGLED_AT_PACKED = 52;
    static constexpr size_t SR_BC_DECOMPOSITION_REPACKING = 53;
};

} // namespace bb::avm2
