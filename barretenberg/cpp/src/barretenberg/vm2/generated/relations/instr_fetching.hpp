// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class instr_fetchingImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 18> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 2, 3, 4, 3, 3, 3,
                                                                            3, 4, 4, 4, 4, 4, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;
        return (in.get(C::instr_fetching_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_AVM_PC_SIZE_IN_BITS = FF(32);
        const auto instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR = in.get(C::instr_fetching_pc_out_of_range) +
                                                                   in.get(C::instr_fetching_opcode_out_of_range) +
                                                                   in.get(C::instr_fetching_instr_out_of_range);
        const auto instr_fetching_SEL_OP_DC_18 =
            in.get(C::instr_fetching_sel_op_dc_2) + in.get(C::instr_fetching_sel_op_dc_6);

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::instr_fetching_sel) * (FF(1) - in.get(C::instr_fetching_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::instr_fetching_pc_out_of_range) * (FF(1) - in.get(C::instr_fetching_pc_out_of_range));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::instr_fetching_instr_out_of_range) * (FF(1) - in.get(C::instr_fetching_instr_out_of_range));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::instr_fetching_parsing_err) -
                        (instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR + in.get(C::instr_fetching_tag_out_of_range)));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::instr_fetching_parsing_err) * (FF(1) - in.get(C::instr_fetching_parsing_err));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // PC_OUT_OF_RANGE_TOGGLE
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = (in.get(C::instr_fetching_pc_abs_diff) -
                        in.get(C::instr_fetching_sel) *
                            (((FF(2) * in.get(C::instr_fetching_pc_out_of_range) - FF(1)) *
                                  (in.get(C::instr_fetching_pc) - in.get(C::instr_fetching_bytecode_size)) -
                              FF(1)) +
                             in.get(C::instr_fetching_pc_out_of_range)));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::instr_fetching_sel) *
                       (in.get(C::instr_fetching_pc_size_in_bits) - constants_AVM_PC_SIZE_IN_BITS);
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // INSTR_OUT_OF_RANGE_TOGGLE
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = (in.get(C::instr_fetching_instr_abs_diff) -
                        ((FF(2) * in.get(C::instr_fetching_instr_out_of_range) - FF(1)) *
                             (in.get(C::instr_fetching_instr_size) - in.get(C::instr_fetching_bytes_to_read)) -
                         in.get(C::instr_fetching_instr_out_of_range)));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // TAG_VALUE
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = (in.get(C::instr_fetching_tag_value) -
                        ((in.get(C::instr_fetching_sel_has_tag) - in.get(C::instr_fetching_sel_tag_is_op2)) *
                             in.get(C::instr_fetching_op3) +
                         in.get(C::instr_fetching_sel_tag_is_op2) * in.get(C::instr_fetching_op2)));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = (in.get(C::instr_fetching_sel_pc_in_range) -
                        in.get(C::instr_fetching_sel) * (FF(1) - in.get(C::instr_fetching_pc_out_of_range)));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // INDIRECT_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = (in.get(C::instr_fetching_indirect) -
                        (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) *
                            (in.get(C::instr_fetching_sel_op_dc_0) *
                                 (in.get(C::instr_fetching_bd1) * FF(256) + in.get(C::instr_fetching_bd2) * FF(1)) +
                             instr_fetching_SEL_OP_DC_18 * in.get(C::instr_fetching_bd1) * FF(1)));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        { // OP1_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::instr_fetching_op1) -
                 (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) *
                     (in.get(C::instr_fetching_sel_op_dc_0) *
                          (in.get(C::instr_fetching_bd3) * FF(256) + in.get(C::instr_fetching_bd4) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_2) *
                          (in.get(C::instr_fetching_bd2) * FF(256) + in.get(C::instr_fetching_bd3) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_6) * in.get(C::instr_fetching_bd2) * FF(1) +
                      in.get(C::instr_fetching_sel_op_dc_15) *
                          (in.get(C::instr_fetching_bd1) * FF(16777216) + in.get(C::instr_fetching_bd2) * FF(65536) +
                           in.get(C::instr_fetching_bd3) * FF(256) + in.get(C::instr_fetching_bd4) * FF(1))));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        { // OP2_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::instr_fetching_op2) -
                 (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) *
                     (in.get(C::instr_fetching_sel_op_dc_0) *
                          (in.get(C::instr_fetching_bd5) * FF(256) + in.get(C::instr_fetching_bd6) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_3) *
                          (in.get(C::instr_fetching_bd4) * FF(256) + in.get(C::instr_fetching_bd5) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_6) * in.get(C::instr_fetching_bd3) * FF(1) +
                      in.get(C::instr_fetching_sel_op_dc_8) * in.get(C::instr_fetching_bd4) * FF(1) +
                      in.get(C::instr_fetching_sel_op_dc_16) *
                          (in.get(C::instr_fetching_bd4) * FF(16777216) + in.get(C::instr_fetching_bd5) * FF(65536) +
                           in.get(C::instr_fetching_bd6) * FF(256) + in.get(C::instr_fetching_bd7) * FF(1))));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        { // OP3_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::instr_fetching_op3) -
                 (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) *
                     (in.get(C::instr_fetching_sel_op_dc_0) *
                          (in.get(C::instr_fetching_bd7) * FF(256) + in.get(C::instr_fetching_bd8) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_4) *
                          (in.get(C::instr_fetching_bd6) * FF(256) + in.get(C::instr_fetching_bd7) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_9) *
                          (in.get(C::instr_fetching_bd5) * FF(uint256_t{ 0UL, 0UL, 0UL, 72057594037927936UL }) +
                           in.get(C::instr_fetching_bd6) * FF(uint256_t{ 0UL, 0UL, 0UL, 281474976710656UL }) +
                           in.get(C::instr_fetching_bd7) * FF(uint256_t{ 0UL, 0UL, 0UL, 1099511627776UL }) +
                           in.get(C::instr_fetching_bd8) * FF(uint256_t{ 0UL, 0UL, 0UL, 4294967296UL }) +
                           in.get(C::instr_fetching_bd9) * FF(uint256_t{ 0UL, 0UL, 0UL, 16777216UL }) +
                           in.get(C::instr_fetching_bd10) * FF(uint256_t{ 0UL, 0UL, 0UL, 65536UL }) +
                           in.get(C::instr_fetching_bd11) * FF(uint256_t{ 0UL, 0UL, 0UL, 256UL }) +
                           in.get(C::instr_fetching_bd12) * FF(uint256_t{ 0UL, 0UL, 0UL, 1UL }) +
                           in.get(C::instr_fetching_bd13) * FF(uint256_t{ 0UL, 0UL, 72057594037927936UL, 0UL }) +
                           in.get(C::instr_fetching_bd14) * FF(uint256_t{ 0UL, 0UL, 281474976710656UL, 0UL }) +
                           in.get(C::instr_fetching_bd15) * FF(uint256_t{ 0UL, 0UL, 1099511627776UL, 0UL }) +
                           in.get(C::instr_fetching_bd16) * FF(uint256_t{ 0UL, 0UL, 4294967296UL, 0UL }) +
                           in.get(C::instr_fetching_bd17) * FF(uint256_t{ 0UL, 0UL, 16777216UL, 0UL }) +
                           in.get(C::instr_fetching_bd18) * FF(uint256_t{ 0UL, 0UL, 65536UL, 0UL }) +
                           in.get(C::instr_fetching_bd19) * FF(uint256_t{ 0UL, 0UL, 256UL, 0UL }) +
                           in.get(C::instr_fetching_bd20) * FF(uint256_t{ 0UL, 0UL, 1UL, 0UL }) +
                           in.get(C::instr_fetching_bd21) * FF(uint256_t{ 0UL, 72057594037927936UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd22) * FF(uint256_t{ 0UL, 281474976710656UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd23) * FF(uint256_t{ 0UL, 1099511627776UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd24) * FF(uint256_t{ 0UL, 4294967296UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd25) * FF(uint256_t{ 0UL, 16777216UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd26) * FF(uint256_t{ 0UL, 65536UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd27) * FF(uint256_t{ 0UL, 256UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd28) * FF(uint256_t{ 0UL, 1UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd29) * FF(72057594037927936UL) +
                           in.get(C::instr_fetching_bd30) * FF(281474976710656UL) +
                           in.get(C::instr_fetching_bd31) * FF(1099511627776UL) +
                           in.get(C::instr_fetching_bd32) * FF(4294967296UL) +
                           in.get(C::instr_fetching_bd33) * FF(16777216) + in.get(C::instr_fetching_bd34) * FF(65536) +
                           in.get(C::instr_fetching_bd35) * FF(256) + in.get(C::instr_fetching_bd36) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_10) *
                          (in.get(C::instr_fetching_bd5) * FF(uint256_t{ 0UL, 72057594037927936UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd6) * FF(uint256_t{ 0UL, 281474976710656UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd7) * FF(uint256_t{ 0UL, 1099511627776UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd8) * FF(uint256_t{ 0UL, 4294967296UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd9) * FF(uint256_t{ 0UL, 16777216UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd10) * FF(uint256_t{ 0UL, 65536UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd11) * FF(uint256_t{ 0UL, 256UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd12) * FF(uint256_t{ 0UL, 1UL, 0UL, 0UL }) +
                           in.get(C::instr_fetching_bd13) * FF(72057594037927936UL) +
                           in.get(C::instr_fetching_bd14) * FF(281474976710656UL) +
                           in.get(C::instr_fetching_bd15) * FF(1099511627776UL) +
                           in.get(C::instr_fetching_bd16) * FF(4294967296UL) +
                           in.get(C::instr_fetching_bd17) * FF(16777216) + in.get(C::instr_fetching_bd18) * FF(65536) +
                           in.get(C::instr_fetching_bd19) * FF(256) + in.get(C::instr_fetching_bd20) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_11) *
                          (in.get(C::instr_fetching_bd5) * FF(72057594037927936UL) +
                           in.get(C::instr_fetching_bd6) * FF(281474976710656UL) +
                           in.get(C::instr_fetching_bd7) * FF(1099511627776UL) +
                           in.get(C::instr_fetching_bd8) * FF(4294967296UL) +
                           in.get(C::instr_fetching_bd9) * FF(16777216) + in.get(C::instr_fetching_bd10) * FF(65536) +
                           in.get(C::instr_fetching_bd11) * FF(256) + in.get(C::instr_fetching_bd12) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_12) *
                          (in.get(C::instr_fetching_bd5) * FF(16777216) + in.get(C::instr_fetching_bd6) * FF(65536) +
                           in.get(C::instr_fetching_bd7) * FF(256) + in.get(C::instr_fetching_bd8) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_13) *
                          (in.get(C::instr_fetching_bd5) * FF(256) + in.get(C::instr_fetching_bd6) * FF(1)) +
                      in.get(C::instr_fetching_sel_op_dc_14) * in.get(C::instr_fetching_bd4) * FF(1) +
                      in.get(C::instr_fetching_sel_op_dc_17) * in.get(C::instr_fetching_bd6) * FF(1)));
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        { // OP4_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp = (in.get(C::instr_fetching_op4) -
                        (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) *
                            (in.get(C::instr_fetching_sel_op_dc_0) *
                                 (in.get(C::instr_fetching_bd9) * FF(256) + in.get(C::instr_fetching_bd10) * FF(1)) +
                             in.get(C::instr_fetching_sel_op_dc_5) *
                                 (in.get(C::instr_fetching_bd8) * FF(256) + in.get(C::instr_fetching_bd9) * FF(1)) +
                             in.get(C::instr_fetching_sel_op_dc_7) * in.get(C::instr_fetching_bd8) * FF(1)));
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        { // OP5_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::instr_fetching_op5) -
                 (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) * in.get(C::instr_fetching_sel_op_dc_0) *
                     (in.get(C::instr_fetching_bd11) * FF(256) + in.get(C::instr_fetching_bd12) * FF(1)));
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        { // OP6_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::instr_fetching_op6) -
                 (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) * in.get(C::instr_fetching_sel_op_dc_1) *
                     (in.get(C::instr_fetching_bd13) * FF(256) + in.get(C::instr_fetching_bd14) * FF(1)));
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        { // OP7_BYTES_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::instr_fetching_op7) -
                 (FF(1) - instr_fetching_PARSING_ERROR_EXCEPT_TAG_ERROR) * in.get(C::instr_fetching_sel_op_dc_1) *
                     (in.get(C::instr_fetching_bd15) * FF(256) + in.get(C::instr_fetching_bd16) * FF(1)));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class instr_fetching : public Relation<instr_fetchingImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "instr_fetching";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 5:
            return "PC_OUT_OF_RANGE_TOGGLE";
        case 7:
            return "INSTR_OUT_OF_RANGE_TOGGLE";
        case 8:
            return "TAG_VALUE";
        case 10:
            return "INDIRECT_BYTES_DECOMPOSITION";
        case 11:
            return "OP1_BYTES_DECOMPOSITION";
        case 12:
            return "OP2_BYTES_DECOMPOSITION";
        case 13:
            return "OP3_BYTES_DECOMPOSITION";
        case 14:
            return "OP4_BYTES_DECOMPOSITION";
        case 15:
            return "OP5_BYTES_DECOMPOSITION";
        case 16:
            return "OP6_BYTES_DECOMPOSITION";
        case 17:
            return "OP7_BYTES_DECOMPOSITION";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_PC_OUT_OF_RANGE_TOGGLE = 5;
    static constexpr size_t SR_INSTR_OUT_OF_RANGE_TOGGLE = 7;
    static constexpr size_t SR_TAG_VALUE = 8;
    static constexpr size_t SR_INDIRECT_BYTES_DECOMPOSITION = 10;
    static constexpr size_t SR_OP1_BYTES_DECOMPOSITION = 11;
    static constexpr size_t SR_OP2_BYTES_DECOMPOSITION = 12;
    static constexpr size_t SR_OP3_BYTES_DECOMPOSITION = 13;
    static constexpr size_t SR_OP4_BYTES_DECOMPOSITION = 14;
    static constexpr size_t SR_OP5_BYTES_DECOMPOSITION = 15;
    static constexpr size_t SR_OP6_BYTES_DECOMPOSITION = 16;
    static constexpr size_t SR_OP7_BYTES_DECOMPOSITION = 17;
};

} // namespace bb::avm2
