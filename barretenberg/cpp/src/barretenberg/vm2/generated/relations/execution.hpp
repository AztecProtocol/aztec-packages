// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class executionImpl {
  public:
    using FF = FF_;

<<<<<<< HEAD
    static constexpr std::array<size_t, 9> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 4, 4, 3, 3, 3, 3, 3 };
=======
    static constexpr std::array<size_t, 9> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 4, 4, 3, 4, 3, 3, 3 };
>>>>>>> 470be80ed7 (wip)

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;
        return (in.get(C::execution_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto execution_NOT_LAST_EXEC = in.get(C::execution_sel) * in.get(C::execution_sel_shift);

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel) * (FF(1) - in.get(C::execution_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_last) * (FF(1) - in.get(C::execution_last));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // TRACE_CONTINUITY_1
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel) * (FF(1) - in.get(C::execution_sel_shift)) *
                       (FF(1) - in.get(C::execution_last));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // TRACE_CONTINUITY_2
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (FF(1) - in.get(C::precomputed_first_row)) * (FF(1) - in.get(C::execution_sel)) *
                       in.get(C::execution_sel_shift);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // LAST_IS_LAST
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_last) * in.get(C::execution_sel_shift);
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
<<<<<<< HEAD
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel) * (in.get(C::execution_sel_instruction_fetching_success) -
                                                   (FF(1) - in.get(C::execution_sel_instruction_fetching_failure)));
=======
        { // INCR_NEXT_INT_CALL_ID
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = execution_NOT_LAST_EXEC *
                       (in.get(C::execution_next_internal_call_id_shift) -
                        (in.get(C::execution_next_internal_call_id) + in.get(C::execution_sel_internal_call)));
>>>>>>> 470be80ed7 (wip)
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = in.get(C::execution_sel) * (in.get(C::execution_sel_should_check_gas) -
                                                   in.get(C::execution_sel_instruction_fetching_success));
=======
            auto tmp = in.get(C::execution_sel_internal_call) *
                       (in.get(C::execution_internal_call_id_shift) - in.get(C::execution_next_internal_call_id));
>>>>>>> 470be80ed7 (wip)
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = in.get(C::execution_sel) * (in.get(C::execution_sel_should_resolve_address) -
                                                   ((FF(1) - in.get(C::execution_out_of_gas_base)) -
                                                    in.get(C::execution_sel_instruction_fetching_failure)));
=======
            auto tmp = in.get(C::execution_sel_internal_call) *
                       (in.get(C::execution_internal_call_return_id_shift) - in.get(C::execution_internal_call_id));
>>>>>>> 470be80ed7 (wip)
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = in.get(C::execution_sel_error) * (FF(1) - in.get(C::execution_sel_error));
=======
            auto tmp = in.get(C::execution_sel_internal_return) *
                       (in.get(C::execution_internal_call_id_shift) - in.get(C::execution_internal_call_return_id));
>>>>>>> 470be80ed7 (wip)
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class execution : public Relation<executionImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "execution";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 2:
            return "TRACE_CONTINUITY_1";
        case 3:
            return "TRACE_CONTINUITY_2";
        case 4:
            return "LAST_IS_LAST";
        case 5:
            return "INCR_NEXT_INT_CALL_ID";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_TRACE_CONTINUITY_1 = 2;
    static constexpr size_t SR_TRACE_CONTINUITY_2 = 3;
    static constexpr size_t SR_LAST_IS_LAST = 4;
    static constexpr size_t SR_INCR_NEXT_INT_CALL_ID = 5;
};

} // namespace bb::avm2
