// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class executionImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 58> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                                                            3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3,
                                                                            3, 4, 3, 5, 6, 3, 3, 3, 3, 3, 3, 3, 2 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_U1 = FF(1);
        const auto constants_MEM_TAG_U32 = FF(4);
        const auto constants_AVM_SUBTRACE_ID_EXECUTION = FF(1);
        const auto constants_AVM_SUBTRACE_ID_ALU = FF(2);
        const auto constants_AVM_SUBTRACE_ID_BITWISE = FF(4);
        const auto constants_AVM_SUBTRACE_ID_POSEIDON_PERM = FF(8);
        const auto constants_AVM_SUBTRACE_ID_TO_RADIX = FF(16);
        const auto constants_AVM_SUBTRACE_ID_ECC = FF(32);
        const auto constants_AVM_SUBTRACE_ID_KECCAKF1600 = FF(64);
        const auto constants_AVM_SUBTRACE_ID_DATA_COPY = FF(128);
        const auto constants_AVM_SUBTRACE_ID_GETCONTRACTINSTANCE = FF(256);
        const auto constants_AVM_DYN_GAS_ID_CALLDATACOPY = FF(1);
        const auto constants_AVM_DYN_GAS_ID_RETURNDATACOPY = FF(2);
        const auto constants_AVM_DYN_GAS_ID_TORADIX = FF(4);
        const auto constants_AVM_DYN_GAS_ID_BITWISE = FF(8);
        const auto constants_AVM_DYN_GAS_ID_EMITUNENCRYPTEDLOG = FF(16);
        const auto constants_AVM_DYN_GAS_ID_SSTORE = FF(32);
        const auto constants_AVM_EXEC_OP_ID_GETENVVAR = FF(1);
        const auto constants_AVM_EXEC_OP_ID_SET = FF(2);
        const auto constants_AVM_EXEC_OP_ID_MOV = FF(4);
        const auto constants_AVM_EXEC_OP_ID_JUMP = FF(8);
        const auto constants_AVM_EXEC_OP_ID_JUMPI = FF(16);
        const auto constants_AVM_EXEC_OP_ID_CALL = FF(32);
        const auto constants_AVM_EXEC_OP_ID_STATICCALL = FF(64);
        const auto constants_AVM_EXEC_OP_ID_INTERNALCALL = FF(128);
        const auto constants_AVM_EXEC_OP_ID_INTERNALRETURN = FF(256);
        const auto constants_AVM_EXEC_OP_ID_RETURN = FF(512);
        const auto constants_AVM_EXEC_OP_ID_REVERT = FF(1024);
        const auto constants_AVM_EXEC_OP_ID_SUCCESSCOPY = FF(2048);
        const auto constants_AVM_EXEC_OP_ID_RETURNDATASIZE = FF(4096);
        const auto constants_AVM_EXEC_OP_ID_DEBUGLOG = FF(8192);
        const auto constants_AVM_EXEC_OP_ID_SLOAD = FF(16384);
        const auto constants_AVM_EXEC_OP_ID_SSTORE = FF(32768);
        const auto execution_NOT_LAST_EXEC = in.get(C::execution_sel) * in.get(C::execution_sel_shift);
        const auto execution_SEL_SHOULD_RESOLVE_ADDRESS =
            in.get(C::execution_sel_bytecode_retrieval_success) * in.get(C::execution_sel_instruction_fetching_success);

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel) * (FF(1) - in.get(C::execution_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_last) * (FF(1) - in.get(C::execution_last));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // ENQUEUED_CALL_START
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_enqueued_call_start_shift) -
                        (in.get(C::precomputed_first_row) + in.get(C::execution_enqueued_call_end)) *
                            in.get(C::execution_sel_shift));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // ENQUEUED_CALL_END
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_enqueued_call_end) -
                        in.get(C::execution_sel_exit_call) * (FF(1) - in.get(C::execution_has_parent_ctx)));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // TRACE_CONTINUITY
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (FF(1) - in.get(C::execution_sel)) * (FF(1) - in.get(C::precomputed_first_row)) *
                       in.get(C::execution_sel_shift);
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // LAST_IS_LAST
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::execution_last) - in.get(C::execution_sel) * (FF(1) - in.get(C::execution_sel_shift)));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_bytecode_retrieval_success) -
                        in.get(C::execution_sel) * (FF(1) - in.get(C::execution_sel_bytecode_retrieval_failure)));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_instruction_fetching_success) -
                        in.get(C::execution_sel) * (FF(1) - in.get(C::execution_sel_instruction_fetching_failure)));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_should_read_registers) -
                        execution_SEL_SHOULD_RESOLVE_ADDRESS * (FF(1) - in.get(C::execution_sel_addressing_error)));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_should_check_gas) -
                        in.get(C::execution_sel_should_read_registers) *
                            (FF(1) - in.get(C::execution_sel_register_read_error)));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // SSTORE_DYN_L2_GAS_IS_ZERO
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_sstore) * in.get(C::execution_dynamic_l2_gas_factor);
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_should_execute_opcode) -
                        in.get(C::execution_sel_should_check_gas) * (FF(1) - in.get(C::execution_sel_out_of_gas)));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_opcode_error) * (FF(1) - in.get(C::execution_sel_opcode_error));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_alu) * (FF(1) - in.get(C::execution_sel_execute_alu));
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_bitwise) * (FF(1) - in.get(C::execution_sel_execute_bitwise));
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_to_radix) * (FF(1) - in.get(C::execution_sel_execute_to_radix));
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_poseidon2_perm) *
                       (FF(1) - in.get(C::execution_sel_execute_poseidon2_perm));
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_ecc_add) * (FF(1) - in.get(C::execution_sel_execute_ecc_add));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_execution) * (FF(1) - in.get(C::execution_sel_execute_execution));
            tmp *= scaling_factor;
            std::get<18>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<19, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_data_copy) * (FF(1) - in.get(C::execution_sel_execute_data_copy));
            tmp *= scaling_factor;
            std::get<19>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<20, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_keccakf1600) * (FF(1) - in.get(C::execution_sel_execute_keccakf1600));
            tmp *= scaling_factor;
            std::get<20>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<21, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_get_contract_instance) *
                       (FF(1) - in.get(C::execution_sel_execute_get_contract_instance));
            tmp *= scaling_factor;
            std::get<21>(evals) += typename Accumulator::View(tmp);
        }
        { // SUBTRACE_ID_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<22, ContainerOverSubrelations>;
            auto tmp = ((in.get(C::execution_sel_execute_execution) * constants_AVM_SUBTRACE_ID_EXECUTION +
                         in.get(C::execution_sel_execute_alu) * constants_AVM_SUBTRACE_ID_ALU +
                         in.get(C::execution_sel_execute_bitwise) * constants_AVM_SUBTRACE_ID_BITWISE +
                         in.get(C::execution_sel_execute_poseidon2_perm) * constants_AVM_SUBTRACE_ID_POSEIDON_PERM +
                         in.get(C::execution_sel_execute_to_radix) * constants_AVM_SUBTRACE_ID_TO_RADIX +
                         in.get(C::execution_sel_execute_ecc_add) * constants_AVM_SUBTRACE_ID_ECC +
                         in.get(C::execution_sel_execute_keccakf1600) * constants_AVM_SUBTRACE_ID_KECCAKF1600 +
                         in.get(C::execution_sel_execute_data_copy) * constants_AVM_SUBTRACE_ID_DATA_COPY +
                         in.get(C::execution_sel_execute_get_contract_instance) *
                             constants_AVM_SUBTRACE_ID_GETCONTRACTINSTANCE) -
                        in.get(C::execution_sel_should_execute_opcode) * in.get(C::execution_subtrace_id));
            tmp *= scaling_factor;
            std::get<22>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<23, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_get_env_var) * (FF(1) - in.get(C::execution_sel_execute_get_env_var));
            tmp *= scaling_factor;
            std::get<23>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<24, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_set) * (FF(1) - in.get(C::execution_sel_execute_set));
            tmp *= scaling_factor;
            std::get<24>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<25, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_mov) * (FF(1) - in.get(C::execution_sel_execute_mov));
            tmp *= scaling_factor;
            std::get<25>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<26, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_jump) * (FF(1) - in.get(C::execution_sel_execute_jump));
            tmp *= scaling_factor;
            std::get<26>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<27, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_jumpi) * (FF(1) - in.get(C::execution_sel_execute_jumpi));
            tmp *= scaling_factor;
            std::get<27>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<28, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_call) * (FF(1) - in.get(C::execution_sel_execute_call));
            tmp *= scaling_factor;
            std::get<28>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<29, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_static_call) * (FF(1) - in.get(C::execution_sel_execute_static_call));
            tmp *= scaling_factor;
            std::get<29>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<30, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_internal_call) *
                       (FF(1) - in.get(C::execution_sel_execute_internal_call));
            tmp *= scaling_factor;
            std::get<30>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<31, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_internal_return) *
                       (FF(1) - in.get(C::execution_sel_execute_internal_return));
            tmp *= scaling_factor;
            std::get<31>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<32, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_return) * (FF(1) - in.get(C::execution_sel_execute_return));
            tmp *= scaling_factor;
            std::get<32>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<33, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_revert) * (FF(1) - in.get(C::execution_sel_execute_revert));
            tmp *= scaling_factor;
            std::get<33>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<34, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_success_copy) * (FF(1) - in.get(C::execution_sel_execute_success_copy));
            tmp *= scaling_factor;
            std::get<34>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<35, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_returndata_size) *
                       (FF(1) - in.get(C::execution_sel_execute_returndata_size));
            tmp *= scaling_factor;
            std::get<35>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<36, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_debug_log) * (FF(1) - in.get(C::execution_sel_execute_debug_log));
            tmp *= scaling_factor;
            std::get<36>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<37, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_sload) * (FF(1) - in.get(C::execution_sel_execute_sload));
            tmp *= scaling_factor;
            std::get<37>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<38, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_sstore) * (FF(1) - in.get(C::execution_sel_execute_sstore));
            tmp *= scaling_factor;
            std::get<38>(evals) += typename Accumulator::View(tmp);
        }
        { // EXEC_OP_ID_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<39, ContainerOverSubrelations>;
            auto tmp = ((in.get(C::execution_sel_execute_get_env_var) * constants_AVM_EXEC_OP_ID_GETENVVAR +
                         in.get(C::execution_sel_execute_set) * constants_AVM_EXEC_OP_ID_SET +
                         in.get(C::execution_sel_execute_mov) * constants_AVM_EXEC_OP_ID_MOV +
                         in.get(C::execution_sel_execute_jump) * constants_AVM_EXEC_OP_ID_JUMP +
                         in.get(C::execution_sel_execute_jumpi) * constants_AVM_EXEC_OP_ID_JUMPI +
                         in.get(C::execution_sel_execute_call) * constants_AVM_EXEC_OP_ID_CALL +
                         in.get(C::execution_sel_execute_static_call) * constants_AVM_EXEC_OP_ID_STATICCALL +
                         in.get(C::execution_sel_execute_internal_call) * constants_AVM_EXEC_OP_ID_INTERNALCALL +
                         in.get(C::execution_sel_execute_internal_return) * constants_AVM_EXEC_OP_ID_INTERNALRETURN +
                         in.get(C::execution_sel_execute_return) * constants_AVM_EXEC_OP_ID_RETURN +
                         in.get(C::execution_sel_execute_revert) * constants_AVM_EXEC_OP_ID_REVERT +
                         in.get(C::execution_sel_execute_success_copy) * constants_AVM_EXEC_OP_ID_SUCCESSCOPY +
                         in.get(C::execution_sel_execute_returndata_size) * constants_AVM_EXEC_OP_ID_RETURNDATASIZE +
                         in.get(C::execution_sel_execute_debug_log) * constants_AVM_EXEC_OP_ID_DEBUGLOG +
                         in.get(C::execution_sel_execute_sload) * constants_AVM_EXEC_OP_ID_SLOAD +
                         in.get(C::execution_sel_execute_sstore) * constants_AVM_EXEC_OP_ID_SSTORE) -
                        in.get(C::execution_sel_should_execute_opcode) * in.get(C::execution_sel_execute_execution) *
                            in.get(C::execution_subtrace_operation_id));
            tmp *= scaling_factor;
            std::get<39>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<40, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_gas_calldata_copy) * (FF(1) - in.get(C::execution_sel_gas_calldata_copy));
            tmp *= scaling_factor;
            std::get<40>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<41, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_gas_returndata_copy) * (FF(1) - in.get(C::execution_sel_gas_returndata_copy));
            tmp *= scaling_factor;
            std::get<41>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<42, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_gas_to_radix) * (FF(1) - in.get(C::execution_sel_gas_to_radix));
            tmp *= scaling_factor;
            std::get<42>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<43, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_gas_bitwise) * (FF(1) - in.get(C::execution_sel_gas_bitwise));
            tmp *= scaling_factor;
            std::get<43>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<44, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_gas_emit_unencrypted_log) *
                       (FF(1) - in.get(C::execution_sel_gas_emit_unencrypted_log));
            tmp *= scaling_factor;
            std::get<44>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<45, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_gas_sstore) * (FF(1) - in.get(C::execution_sel_gas_sstore));
            tmp *= scaling_factor;
            std::get<45>(evals) += typename Accumulator::View(tmp);
        }
        { // DYN_GAS_ID_DECOMPOSITION
            using Accumulator = typename std::tuple_element_t<46, ContainerOverSubrelations>;
            auto tmp =
                ((in.get(C::execution_sel_gas_calldata_copy) * constants_AVM_DYN_GAS_ID_CALLDATACOPY +
                  in.get(C::execution_sel_gas_returndata_copy) * constants_AVM_DYN_GAS_ID_RETURNDATACOPY +
                  in.get(C::execution_sel_gas_to_radix) * constants_AVM_DYN_GAS_ID_TORADIX +
                  in.get(C::execution_sel_gas_bitwise) * constants_AVM_DYN_GAS_ID_BITWISE +
                  in.get(C::execution_sel_gas_emit_unencrypted_log) * constants_AVM_DYN_GAS_ID_EMITUNENCRYPTEDLOG +
                  in.get(C::execution_sel_gas_sstore) * constants_AVM_DYN_GAS_ID_SSTORE) -
                 in.get(C::execution_sel_should_check_gas) * in.get(C::execution_sel) *
                     in.get(C::execution_dyn_gas_id));
            tmp *= scaling_factor;
            std::get<46>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<47, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_opcode_failure) * (FF(1) - in.get(C::execution_sel_opcode_failure));
            tmp *= scaling_factor;
            std::get<47>(evals) += typename Accumulator::View(tmp);
        }
        { // PC_NEXT_ROW_INT_CALL_JUMP
            using Accumulator = typename std::tuple_element_t<48, ContainerOverSubrelations>;
            auto tmp = execution_NOT_LAST_EXEC *
                       (in.get(C::execution_sel_execute_internal_call) + in.get(C::execution_sel_execute_jump)) *
                       (in.get(C::execution_pc_shift) - in.get(C::execution_rop_0_));
            tmp *= scaling_factor;
            std::get<48>(evals) += typename Accumulator::View(tmp);
        }
        { // PC_NEXT_ROW_JUMPI
            using Accumulator = typename std::tuple_element_t<49, ContainerOverSubrelations>;
            auto tmp =
                execution_NOT_LAST_EXEC * in.get(C::execution_sel_execute_jumpi) *
                ((in.get(C::execution_register_0_) * (in.get(C::execution_rop_1_) - in.get(C::execution_next_pc)) +
                  in.get(C::execution_next_pc)) -
                 in.get(C::execution_pc_shift));
            tmp *= scaling_factor;
            std::get<49>(evals) += typename Accumulator::View(tmp);
        }
        { // MOV_SAME_VALUE
            using Accumulator = typename std::tuple_element_t<50, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_mov) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_register_1_));
            tmp *= scaling_factor;
            std::get<50>(evals) += typename Accumulator::View(tmp);
        }
        { // MOV_SAME_TAG
            using Accumulator = typename std::tuple_element_t<51, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_mov) *
                       (in.get(C::execution_mem_tag_reg_0_) - in.get(C::execution_mem_tag_reg_1_));
            tmp *= scaling_factor;
            std::get<51>(evals) += typename Accumulator::View(tmp);
        }
        { // SUCCESS_COPY_WRITE_REG
            using Accumulator = typename std::tuple_element_t<52, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_success_copy) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_last_child_success));
            tmp *= scaling_factor;
            std::get<52>(evals) += typename Accumulator::View(tmp);
        }
        { // SUCCESS_COPY_U1_TAG
            using Accumulator = typename std::tuple_element_t<53, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_success_copy) *
                       (in.get(C::execution_mem_tag_reg_0_) - constants_MEM_TAG_U1);
            tmp *= scaling_factor;
            std::get<53>(evals) += typename Accumulator::View(tmp);
        }
        { // RETURNDATA_SIZE_WRITE_REG
            using Accumulator = typename std::tuple_element_t<54, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_returndata_size) *
                       (in.get(C::execution_register_0_) - in.get(C::execution_last_child_returndata_size));
            tmp *= scaling_factor;
            std::get<54>(evals) += typename Accumulator::View(tmp);
        }
        { // RETURNDATA_SIZE_U32_TAG
            using Accumulator = typename std::tuple_element_t<55, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_returndata_size) *
                       (in.get(C::execution_mem_tag_reg_0_) - constants_MEM_TAG_U32);
            tmp *= scaling_factor;
            std::get<55>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<56, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::execution_sel_should_write_registers) -
                 in.get(C::execution_sel_should_execute_opcode) * (FF(1) - in.get(C::execution_sel_opcode_error)));
            tmp *= scaling_factor;
            std::get<56>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<57, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_sel_error) -
                        (in.get(C::execution_sel_bytecode_retrieval_failure) +
                         in.get(C::execution_sel_instruction_fetching_failure) +
                         in.get(C::execution_sel_addressing_error) + in.get(C::execution_sel_register_read_error) +
                         in.get(C::execution_sel_out_of_gas) + in.get(C::execution_sel_opcode_error)));
            tmp *= scaling_factor;
            std::get<57>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class execution : public Relation<executionImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "execution";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 2:
            return "ENQUEUED_CALL_START";
        case 3:
            return "ENQUEUED_CALL_END";
        case 4:
            return "TRACE_CONTINUITY";
        case 5:
            return "LAST_IS_LAST";
        case 10:
            return "SSTORE_DYN_L2_GAS_IS_ZERO";
        case 22:
            return "SUBTRACE_ID_DECOMPOSITION";
        case 39:
            return "EXEC_OP_ID_DECOMPOSITION";
        case 46:
            return "DYN_GAS_ID_DECOMPOSITION";
        case 48:
            return "PC_NEXT_ROW_INT_CALL_JUMP";
        case 49:
            return "PC_NEXT_ROW_JUMPI";
        case 50:
            return "MOV_SAME_VALUE";
        case 51:
            return "MOV_SAME_TAG";
        case 52:
            return "SUCCESS_COPY_WRITE_REG";
        case 53:
            return "SUCCESS_COPY_U1_TAG";
        case 54:
            return "RETURNDATA_SIZE_WRITE_REG";
        case 55:
            return "RETURNDATA_SIZE_U32_TAG";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_ENQUEUED_CALL_START = 2;
    static constexpr size_t SR_ENQUEUED_CALL_END = 3;
    static constexpr size_t SR_TRACE_CONTINUITY = 4;
    static constexpr size_t SR_LAST_IS_LAST = 5;
    static constexpr size_t SR_SSTORE_DYN_L2_GAS_IS_ZERO = 10;
    static constexpr size_t SR_SUBTRACE_ID_DECOMPOSITION = 22;
    static constexpr size_t SR_EXEC_OP_ID_DECOMPOSITION = 39;
    static constexpr size_t SR_DYN_GAS_ID_DECOMPOSITION = 46;
    static constexpr size_t SR_PC_NEXT_ROW_INT_CALL_JUMP = 48;
    static constexpr size_t SR_PC_NEXT_ROW_JUMPI = 49;
    static constexpr size_t SR_MOV_SAME_VALUE = 50;
    static constexpr size_t SR_MOV_SAME_TAG = 51;
    static constexpr size_t SR_SUCCESS_COPY_WRITE_REG = 52;
    static constexpr size_t SR_SUCCESS_COPY_U1_TAG = 53;
    static constexpr size_t SR_RETURNDATA_SIZE_WRITE_REG = 54;
    static constexpr size_t SR_RETURNDATA_SIZE_U32_TAG = 55;
};

} // namespace bb::avm2
