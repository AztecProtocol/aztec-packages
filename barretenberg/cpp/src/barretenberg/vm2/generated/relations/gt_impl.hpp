// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/gt.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void gtImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                             const AllEntities& in,
                             [[maybe_unused]] const RelationParameters<FF_>&,
                             [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    BB_BENCH_TRACY_NAME("accumulate/gt");

    const auto gt_A_LTE_B = (in.get(C::gt_input_b) - in.get(C::gt_input_a));
    const auto gt_A_GT_B = ((in.get(C::gt_input_a) - in.get(C::gt_input_b)) - FF(1));

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::gt_sel) * (FF(1) - in.get(C::gt_sel));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = in.get(C::gt_res) * (FF(1) - in.get(C::gt_res));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    { // GT_RESULT
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::gt_sel) * (((gt_A_GT_B - gt_A_LTE_B) * in.get(C::gt_res) + gt_A_LTE_B) - in.get(C::gt_abs_diff));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
