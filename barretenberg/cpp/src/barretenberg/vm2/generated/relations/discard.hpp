// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class discardImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 14> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 4, 3, 3, 5, 3, 3, 5, 5, 5, 4, 5, 5 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class discard : public Relation<discardImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "discard";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "SEL_FAILURE";
        case 2:
            return "DISCARD_IFF_DYING_CONTEXT";
        case 3:
            return "DISCARD_IF_FAILURE";
        case 5:
            return "IS_DYING_CONTEXT_CHECK";
        case 6:
            return "RESOLVES_DYING_CONTEXT";
        case 7:
            return "NESTED_CALL_FROM_UNDISCARDED_CONTEXT";
        case 8:
            return "SHOULD_PROPAGATE_DISCARD";
        case 9:
            return "DISCARD_PROPAGATION";
        case 10:
            return "DYING_CONTEXT_PROPAGATION";
        case 11:
            return "DYING_CONTEXT_MUST_FAIL";
        case 12:
            return "ENTER_CALL_DISCARD_MUST_BE_DYING_CONTEXT";
        case 13:
            return "DYING_CONTEXT_WITH_PARENT_MUST_CLEAR_DISCARD";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SEL_FAILURE = 0;
    static constexpr size_t SR_DISCARD_IFF_DYING_CONTEXT = 2;
    static constexpr size_t SR_DISCARD_IF_FAILURE = 3;
    static constexpr size_t SR_IS_DYING_CONTEXT_CHECK = 5;
    static constexpr size_t SR_RESOLVES_DYING_CONTEXT = 6;
    static constexpr size_t SR_NESTED_CALL_FROM_UNDISCARDED_CONTEXT = 7;
    static constexpr size_t SR_SHOULD_PROPAGATE_DISCARD = 8;
    static constexpr size_t SR_DISCARD_PROPAGATION = 9;
    static constexpr size_t SR_DYING_CONTEXT_PROPAGATION = 10;
    static constexpr size_t SR_DYING_CONTEXT_MUST_FAIL = 11;
    static constexpr size_t SR_ENTER_CALL_DISCARD_MUST_BE_DYING_CONTEXT = 12;
    static constexpr size_t SR_DYING_CONTEXT_WITH_PARENT_MUST_CLEAR_DISCARD = 13;
};

} // namespace bb::avm2
