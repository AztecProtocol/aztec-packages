// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class discardImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 14> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 4, 3, 3, 5, 3, 3, 5, 5, 5, 4, 5, 5 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto execution_DYING_CONTEXT_DIFF =
            (in.get(C::execution_context_id) - in.get(C::execution_dying_context_id));

        { // SEL_FAILURE
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::execution_sel_failure) - (FF(1) - (FF(1) - in.get(C::execution_sel_error)) *
                                                                 (FF(1) - in.get(C::execution_sel_execute_revert))));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_discard) * (FF(1) - in.get(C::execution_discard));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // DISCARD_IFF_DYING_CONTEXT
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::execution_dying_context_id) *
                     ((FF(1) - in.get(C::execution_discard)) * (FF(1) - in.get(C::execution_dying_context_id_inv)) +
                      in.get(C::execution_dying_context_id_inv)) -
                 in.get(C::execution_discard));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // DISCARD_IF_FAILURE
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_failure) * (FF(1) - in.get(C::execution_discard));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_is_dying_context) * (FF(1) - in.get(C::execution_is_dying_context));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // IS_DYING_CONTEXT_CHECK
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel) *
                       ((execution_DYING_CONTEXT_DIFF * (in.get(C::execution_is_dying_context) *
                                                             (FF(1) - in.get(C::execution_dying_context_diff_inv)) +
                                                         in.get(C::execution_dying_context_diff_inv)) -
                         FF(1)) +
                        in.get(C::execution_is_dying_context));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // RESOLVES_DYING_CONTEXT
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_resolves_dying_context) -
                        in.get(C::execution_sel_failure) * in.get(C::execution_is_dying_context));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // NESTED_CALL_FROM_UNDISCARDED_CONTEXT
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = (in.get(C::execution_nested_call_from_undiscarded_context) -
                        in.get(C::execution_sel_enter_call) * (FF(1) - in.get(C::execution_discard)));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // SHOULD_PROPAGATE_DISCARD
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel) * (in.get(C::execution_propagate_discard) -
                                            (FF(1) - in.get(C::execution_enqueued_call_end)) *
                                                (FF(1) - in.get(C::execution_resolves_dying_context)) *
                                                (FF(1) - in.get(C::execution_nested_call_from_undiscarded_context)));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // DISCARD_PROPAGATION
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel) * (FF(1) - in.get(C::execution_last)) *
                       in.get(C::execution_propagate_discard) *
                       (in.get(C::execution_discard_shift) - in.get(C::execution_discard));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // DYING_CONTEXT_PROPAGATION
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel) * (FF(1) - in.get(C::execution_last)) *
                       in.get(C::execution_propagate_discard) *
                       (in.get(C::execution_dying_context_id_shift) - in.get(C::execution_dying_context_id));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        { // DYING_CONTEXT_MUST_FAIL
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_is_dying_context) * in.get(C::execution_sel_exit_call) *
                       (FF(1) - in.get(C::execution_sel_failure));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        { // ENTER_CALL_DISCARD_MUST_BE_DYING_CONTEXT
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_enter_call) * (FF(1) - in.get(C::execution_discard)) *
                       in.get(C::execution_discard_shift) *
                       (in.get(C::execution_context_id_shift) - in.get(C::execution_dying_context_id_shift));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        { // DYING_CONTEXT_WITH_PARENT_MUST_CLEAR_DISCARD
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_failure) * in.get(C::execution_is_dying_context) *
                       in.get(C::execution_has_parent_ctx) * in.get(C::execution_discard_shift);
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class discard : public Relation<discardImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "discard";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "SEL_FAILURE";
        case 2:
            return "DISCARD_IFF_DYING_CONTEXT";
        case 3:
            return "DISCARD_IF_FAILURE";
        case 5:
            return "IS_DYING_CONTEXT_CHECK";
        case 6:
            return "RESOLVES_DYING_CONTEXT";
        case 7:
            return "NESTED_CALL_FROM_UNDISCARDED_CONTEXT";
        case 8:
            return "SHOULD_PROPAGATE_DISCARD";
        case 9:
            return "DISCARD_PROPAGATION";
        case 10:
            return "DYING_CONTEXT_PROPAGATION";
        case 11:
            return "DYING_CONTEXT_MUST_FAIL";
        case 12:
            return "ENTER_CALL_DISCARD_MUST_BE_DYING_CONTEXT";
        case 13:
            return "DYING_CONTEXT_WITH_PARENT_MUST_CLEAR_DISCARD";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SEL_FAILURE = 0;
    static constexpr size_t SR_DISCARD_IFF_DYING_CONTEXT = 2;
    static constexpr size_t SR_DISCARD_IF_FAILURE = 3;
    static constexpr size_t SR_IS_DYING_CONTEXT_CHECK = 5;
    static constexpr size_t SR_RESOLVES_DYING_CONTEXT = 6;
    static constexpr size_t SR_NESTED_CALL_FROM_UNDISCARDED_CONTEXT = 7;
    static constexpr size_t SR_SHOULD_PROPAGATE_DISCARD = 8;
    static constexpr size_t SR_DISCARD_PROPAGATION = 9;
    static constexpr size_t SR_DYING_CONTEXT_PROPAGATION = 10;
    static constexpr size_t SR_DYING_CONTEXT_MUST_FAIL = 11;
    static constexpr size_t SR_ENTER_CALL_DISCARD_MUST_BE_DYING_CONTEXT = 12;
    static constexpr size_t SR_DYING_CONTEXT_WITH_PARENT_MUST_CLEAR_DISCARD = 13;
};

} // namespace bb::avm2
