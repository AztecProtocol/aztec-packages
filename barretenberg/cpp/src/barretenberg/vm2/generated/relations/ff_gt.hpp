// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class ff_gtImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 29> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5,
                                                                            3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::ff_gt_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class ff_gt : public Relation<ff_gtImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "ff_gt";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 5:
            return "A_DECOMPOSITION";
        case 7:
            return "P_SUB_A_LO";
        case 8:
            return "P_SUB_A_HI";
        case 9:
            return "B_DECOMPOSITION";
        case 11:
            return "P_SUB_B_LO";
        case 12:
            return "P_SUB_B_HI";
        case 13:
            return "RES_LO";
        case 14:
            return "RES_HI";
        case 15:
            return "RNG_CTR_GT_INIT";
        case 16:
            return "RNG_CTR_DEC_INIT";
        case 17:
            return "RNG_CTR_DECREMENT";
        case 19:
            return "RNG_CTR_NON_ZERO";
        case 20:
            return "SHIFT_0";
        case 22:
            return "SHIFT_1";
        case 24:
            return "SHIFT_2";
        case 26:
            return "SHIFT_3";
        case 28:
            return "SEL_CONSISTENCY";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_A_DECOMPOSITION = 5;
    static constexpr size_t SR_P_SUB_A_LO = 7;
    static constexpr size_t SR_P_SUB_A_HI = 8;
    static constexpr size_t SR_B_DECOMPOSITION = 9;
    static constexpr size_t SR_P_SUB_B_LO = 11;
    static constexpr size_t SR_P_SUB_B_HI = 12;
    static constexpr size_t SR_RES_LO = 13;
    static constexpr size_t SR_RES_HI = 14;
    static constexpr size_t SR_RNG_CTR_GT_INIT = 15;
    static constexpr size_t SR_RNG_CTR_DEC_INIT = 16;
    static constexpr size_t SR_RNG_CTR_DECREMENT = 17;
    static constexpr size_t SR_RNG_CTR_NON_ZERO = 19;
    static constexpr size_t SR_SHIFT_0 = 20;
    static constexpr size_t SR_SHIFT_1 = 22;
    static constexpr size_t SR_SHIFT_2 = 24;
    static constexpr size_t SR_SHIFT_3 = 26;
    static constexpr size_t SR_SEL_CONSISTENCY = 28;
};

} // namespace bb::avm2
