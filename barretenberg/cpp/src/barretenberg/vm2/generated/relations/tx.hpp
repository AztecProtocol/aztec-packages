// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class txImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 56> SUBRELATION_PARTIAL_LENGTHS = { 3, 4, 3, 4, 3, 3, 3, 3, 3, 4, 7, 6, 3, 5,
                                                                            6, 4, 3, 6, 6, 3, 3, 4, 4, 4, 4, 2, 4, 5,
                                                                            3, 3, 3, 4, 5, 4, 4, 4, 4, 6, 4, 3, 4, 2,
                                                                            4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::tx_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class tx : public Relation<txImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "tx";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "NO_EXTRANEOUS_ROWS";
        case 2:
            return "SEL_ON_FIRST_ROW";
        case 3:
            return "NO_EARLY_END";
        case 4:
            return "START_WITH_SEL";
        case 9:
            return "START_FOLLOWS_END";
        case 10:
            return "PHASE_VALUE_CONTINUITY";
        case 11:
            return "INCR_PHASE_VALUE_ON_END";
        case 13:
            return "REM_COUNT_IS_ZERO";
        case 14:
            return "REM_COUNT_IS_ONE";
        case 15:
            return "READ_PI_LENGTH_SEL";
        case 16:
            return "ONE_SHOT_REMAINING_PHASE_COUNTER_ONE";
        case 17:
            return "DECR_REM_PHASE_EVENTS";
        case 18:
            return "INCR_READ_PI_OFFSET";
        case 27:
            return "MAX_NOTE_HASH_WRITES_REACHED";
        case 32:
            return "MAX_NULLIFIER_WRITES_REACHED";
        case 37:
            return "MAX_L2_L1_MSG_WRITES_REACHED";
        case 40:
            return "UPDATE_NUM_L2_TO_L1_MSGS";
        case 42:
            return "COMPUTE_FEE";
        case 43:
            return "TEARDOWN_GETS_FEE";
        case 44:
            return "FEE_ZERO_UNLESS_COLLECT_FEE_OR_TEARDOWN";
        case 50:
            return "NOTE_HASH_TREE_ROOT_IMMUTABLE_IN_PADDING";
        case 51:
            return "PAD_NOTE_HASH_TREE";
        case 52:
            return "NOTE_HASHES_EMITTED_IMMUTABLE_IN_PADDING";
        case 53:
            return "NULLIFIER_TREE_ROOT_IMMUTABLE_IN_PADDING";
        case 54:
            return "PAD_NULLIFIER_TREE";
        case 55:
            return "NULLIFIERS_EMITTED_IMMUTABLE_IN_PADDING";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_NO_EXTRANEOUS_ROWS = 1;
    static constexpr size_t SR_SEL_ON_FIRST_ROW = 2;
    static constexpr size_t SR_NO_EARLY_END = 3;
    static constexpr size_t SR_START_WITH_SEL = 4;
    static constexpr size_t SR_START_FOLLOWS_END = 9;
    static constexpr size_t SR_PHASE_VALUE_CONTINUITY = 10;
    static constexpr size_t SR_INCR_PHASE_VALUE_ON_END = 11;
    static constexpr size_t SR_REM_COUNT_IS_ZERO = 13;
    static constexpr size_t SR_REM_COUNT_IS_ONE = 14;
    static constexpr size_t SR_READ_PI_LENGTH_SEL = 15;
    static constexpr size_t SR_ONE_SHOT_REMAINING_PHASE_COUNTER_ONE = 16;
    static constexpr size_t SR_DECR_REM_PHASE_EVENTS = 17;
    static constexpr size_t SR_INCR_READ_PI_OFFSET = 18;
    static constexpr size_t SR_MAX_NOTE_HASH_WRITES_REACHED = 27;
    static constexpr size_t SR_MAX_NULLIFIER_WRITES_REACHED = 32;
    static constexpr size_t SR_MAX_L2_L1_MSG_WRITES_REACHED = 37;
    static constexpr size_t SR_UPDATE_NUM_L2_TO_L1_MSGS = 40;
    static constexpr size_t SR_COMPUTE_FEE = 42;
    static constexpr size_t SR_TEARDOWN_GETS_FEE = 43;
    static constexpr size_t SR_FEE_ZERO_UNLESS_COLLECT_FEE_OR_TEARDOWN = 44;
    static constexpr size_t SR_NOTE_HASH_TREE_ROOT_IMMUTABLE_IN_PADDING = 50;
    static constexpr size_t SR_PAD_NOTE_HASH_TREE = 51;
    static constexpr size_t SR_NOTE_HASHES_EMITTED_IMMUTABLE_IN_PADDING = 52;
    static constexpr size_t SR_NULLIFIER_TREE_ROOT_IMMUTABLE_IN_PADDING = 53;
    static constexpr size_t SR_PAD_NULLIFIER_TREE = 54;
    static constexpr size_t SR_NULLIFIERS_EMITTED_IMMUTABLE_IN_PADDING = 55;
};

} // namespace bb::avm2
