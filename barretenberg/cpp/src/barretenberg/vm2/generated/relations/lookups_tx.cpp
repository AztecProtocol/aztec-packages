// AUTOGENERATED FILE
#include "barretenberg/flavor/relation_definitions.hpp"
#include "barretenberg/vm2/constraining/flavor.hpp"
#include "barretenberg/vm2/constraining/full_row.hpp"
#include "barretenberg/vm2/constraining/recursion/recursive_flavor.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base_impl.hpp"

#define AvmCheckCircuitEdge(Flavor) Flavor::PolynomialEntitiesAtFixedRow<Flavor::ProverPolynomials>
#define AvmCheckRelationEdge(Flavor) ::bb::avm2::AvmFullRowProxy

#define ACCUMULATE_FOR_LOOKUP(...) _ACCUMULATE_FOR_LOOKUP(__VA_ARGS__)
#define _ACCUMULATE_FOR_LOOKUP(RelationName, Flavor, AccumulatorType, EdgeType)                                        \
    template void RelationName<Flavor::FF>::accumulate<RelationName<Flavor::FF>::AccumulatorType, EdgeType(Flavor)>(   \
        RelationName<Flavor::FF>::AccumulatorType&,                                                                    \
        EdgeType(Flavor) const&,                                                                                       \
        RelationParameters<Flavor::FF> const&,                                                                         \
        Flavor::FF const&);

#define INSTANTIATE_LOOKUP(RelationName)                                                                               \
    ACCUMULATE_FOR_LOOKUP(RelationName, AvmFlavor, SumcheckTupleOfUnivariatesOverSubrelations, ExtendedEdge);          \
    ACCUMULATE_FOR_LOOKUP(RelationName, AvmFlavor, SumcheckArrayOfValuesOverSubrelations, EvaluationEdge);             \
    ACCUMULATE_FOR_LOOKUP(RelationName, AvmFlavor, SumcheckArrayOfValuesOverSubrelations, AvmCheckCircuitEdge);        \
    ACCUMULATE_FOR_LOOKUP(RelationName, AvmFlavor, SumcheckArrayOfValuesOverSubrelations, AvmCheckRelationEdge);       \
    ACCUMULATE_FOR_LOOKUP(RelationName, AvmRecursiveFlavor, SumcheckArrayOfValuesOverSubrelations, EvaluationEdge);

namespace bb::avm2 {

INSTANTIATE_LOOKUP(lookup_tx_read_phase_table_relation);
INSTANTIATE_LOOKUP(lookup_tx_phase_jump_on_revert_relation);
INSTANTIATE_LOOKUP(lookup_tx_read_phase_length_relation);
INSTANTIATE_LOOKUP(lookup_tx_read_public_call_request_phase_relation);
INSTANTIATE_LOOKUP(lookup_tx_dispatch_exec_start_relation);
INSTANTIATE_LOOKUP(lookup_tx_dispatch_exec_end_relation);
INSTANTIATE_LOOKUP(lookup_tx_read_tree_insert_value_relation);
INSTANTIATE_LOOKUP(lookup_tx_note_hash_append_relation);
INSTANTIATE_LOOKUP(lookup_tx_nullifier_append_relation);
INSTANTIATE_LOOKUP(lookup_tx_read_l2_l1_msg_relation);
INSTANTIATE_LOOKUP(lookup_tx_write_l2_l1_msg_relation);
INSTANTIATE_LOOKUP(lookup_tx_read_effective_fee_public_inputs_relation);
INSTANTIATE_LOOKUP(lookup_tx_read_fee_payer_public_inputs_relation);
INSTANTIATE_LOOKUP(lookup_tx_balance_slot_poseidon2_relation);
INSTANTIATE_LOOKUP(lookup_tx_balance_read_relation);
INSTANTIATE_LOOKUP(lookup_tx_balance_validation_relation);
INSTANTIATE_LOOKUP(lookup_tx_balance_update_relation);
INSTANTIATE_LOOKUP(lookup_tx_write_fee_public_inputs_relation);

} // namespace bb::avm2
