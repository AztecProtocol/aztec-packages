// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_get_contract_instance_precomputed_info ///////////////////

struct lookup_get_contract_instance_precomputed_info_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_GET_CONTRACT_INSTANCE_PRECOMPUTED_INFO";
    static constexpr std::string_view RELATION_NAME = "get_contract_instance";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 5;
    static constexpr Column SRC_SELECTOR = Column::get_contract_instance_is_valid_writes_in_bounds;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_8;
    static constexpr Column COUNTS = Column::lookup_get_contract_instance_precomputed_info_counts;
    static constexpr Column INVERSES = Column::lookup_get_contract_instance_precomputed_info_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::get_contract_instance_member_enum,
        ColumnAndShifts::get_contract_instance_is_valid_member_enum,
        ColumnAndShifts::get_contract_instance_is_deployer,
        ColumnAndShifts::get_contract_instance_is_class_id,
        ColumnAndShifts::get_contract_instance_is_init_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::precomputed_clk,
        ColumnAndShifts::precomputed_is_valid_member_enum,
        ColumnAndShifts::precomputed_is_deployer,
        ColumnAndShifts::precomputed_is_class_id,
        ColumnAndShifts::precomputed_is_init_hash
    };
};

using lookup_get_contract_instance_precomputed_info_settings =
    lookup_settings<lookup_get_contract_instance_precomputed_info_settings_>;
template <typename FF_>
using lookup_get_contract_instance_precomputed_info_relation =
    lookup_relation_base<FF_, lookup_get_contract_instance_precomputed_info_settings>;

/////////////////// lookup_get_contract_instance_contract_instance_retrieval ///////////////////

struct lookup_get_contract_instance_contract_instance_retrieval_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_GET_CONTRACT_INSTANCE_CONTRACT_INSTANCE_RETRIEVAL";
    static constexpr std::string_view RELATION_NAME = "get_contract_instance";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 7;
    static constexpr Column SRC_SELECTOR = Column::get_contract_instance_is_valid_member_enum;
    static constexpr Column DST_SELECTOR = Column::contract_instance_retrieval_sel;
    static constexpr Column COUNTS = Column::lookup_get_contract_instance_contract_instance_retrieval_counts;
    static constexpr Column INVERSES = Column::lookup_get_contract_instance_contract_instance_retrieval_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::get_contract_instance_contract_address,
        ColumnAndShifts::get_contract_instance_nullifier_tree_root,
        ColumnAndShifts::get_contract_instance_public_data_tree_root,
        ColumnAndShifts::get_contract_instance_instance_exists,
        ColumnAndShifts::get_contract_instance_retrieved_deployer_addr,
        ColumnAndShifts::get_contract_instance_retrieved_class_id,
        ColumnAndShifts::get_contract_instance_retrieved_init_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::contract_instance_retrieval_address,
        ColumnAndShifts::contract_instance_retrieval_nullifier_tree_root,
        ColumnAndShifts::contract_instance_retrieval_public_data_tree_root,
        ColumnAndShifts::contract_instance_retrieval_exists,
        ColumnAndShifts::contract_instance_retrieval_deployer_addr,
        ColumnAndShifts::contract_instance_retrieval_current_class_id,
        ColumnAndShifts::contract_instance_retrieval_init_hash
    };
};

using lookup_get_contract_instance_contract_instance_retrieval_settings =
    lookup_settings<lookup_get_contract_instance_contract_instance_retrieval_settings_>;
template <typename FF_>
using lookup_get_contract_instance_contract_instance_retrieval_relation =
    lookup_relation_base<FF_, lookup_get_contract_instance_contract_instance_retrieval_settings>;

/////////////////// lookup_get_contract_instance_mem_write_contract_instance_exists ///////////////////

struct lookup_get_contract_instance_mem_write_contract_instance_exists_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_GET_CONTRACT_INSTANCE_MEM_WRITE_CONTRACT_INSTANCE_EXISTS";
    static constexpr std::string_view RELATION_NAME = "get_contract_instance";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::get_contract_instance_is_valid_member_enum;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_get_contract_instance_mem_write_contract_instance_exists_counts;
    static constexpr Column INVERSES = Column::lookup_get_contract_instance_mem_write_contract_instance_exists_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::get_contract_instance_clk,
        ColumnAndShifts::get_contract_instance_dst_offset,
        ColumnAndShifts::get_contract_instance_instance_exists,
        ColumnAndShifts::get_contract_instance_exists_tag,
        ColumnAndShifts::get_contract_instance_is_valid_member_enum,
        ColumnAndShifts::get_contract_instance_space_id
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address, ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_rw,      ColumnAndShifts::memory_space_id
    };
};

using lookup_get_contract_instance_mem_write_contract_instance_exists_settings =
    lookup_settings<lookup_get_contract_instance_mem_write_contract_instance_exists_settings_>;
template <typename FF_>
using lookup_get_contract_instance_mem_write_contract_instance_exists_relation =
    lookup_relation_base<FF_, lookup_get_contract_instance_mem_write_contract_instance_exists_settings>;

/////////////////// lookup_get_contract_instance_mem_write_contract_instance_member ///////////////////

struct lookup_get_contract_instance_mem_write_contract_instance_member_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_GET_CONTRACT_INSTANCE_MEM_WRITE_CONTRACT_INSTANCE_MEMBER";
    static constexpr std::string_view RELATION_NAME = "get_contract_instance";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 6;
    static constexpr Column SRC_SELECTOR = Column::get_contract_instance_is_valid_member_enum;
    static constexpr Column DST_SELECTOR = Column::memory_sel;
    static constexpr Column COUNTS = Column::lookup_get_contract_instance_mem_write_contract_instance_member_counts;
    static constexpr Column INVERSES = Column::lookup_get_contract_instance_mem_write_contract_instance_member_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::get_contract_instance_clk,
        ColumnAndShifts::get_contract_instance_member_write_offset,
        ColumnAndShifts::get_contract_instance_selected_member,
        ColumnAndShifts::get_contract_instance_member_tag,
        ColumnAndShifts::get_contract_instance_is_valid_member_enum,
        ColumnAndShifts::get_contract_instance_space_id
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::memory_clk, ColumnAndShifts::memory_address, ColumnAndShifts::memory_value,
        ColumnAndShifts::memory_tag, ColumnAndShifts::memory_rw,      ColumnAndShifts::memory_space_id
    };
};

using lookup_get_contract_instance_mem_write_contract_instance_member_settings =
    lookup_settings<lookup_get_contract_instance_mem_write_contract_instance_member_settings_>;
template <typename FF_>
using lookup_get_contract_instance_mem_write_contract_instance_member_relation =
    lookup_relation_base<FF_, lookup_get_contract_instance_mem_write_contract_instance_member_settings>;

} // namespace bb::avm2
