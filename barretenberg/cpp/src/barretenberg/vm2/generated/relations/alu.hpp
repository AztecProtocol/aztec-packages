// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class aluImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 6> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 5, 2, 3, 4 };

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto alu_CHECK_C_TAG_EQUAL = in.get(C::alu_sel_op_add);
        const auto alu_BATCHED_TAGS_DIFF =
            FF(1) * (in.get(C::alu_ia_tag) - in.get(C::alu_ib_tag)) +
            alu_CHECK_C_TAG_EQUAL * FF(8) * (in.get(C::alu_ia_tag) - in.get(C::alu_ic_tag));
        const auto alu_BATCHED_TAGS_DIFF_IS_ZERO = (FF(1) - in.get(C::alu_tag_err));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel) * (FF(1) - in.get(C::alu_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_cf) * (FF(1) - in.get(C::alu_cf));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // BATCHED_TAGS_DIFF_CHECK
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = ((alu_BATCHED_TAGS_DIFF *
                             (alu_BATCHED_TAGS_DIFF_IS_ZERO * (FF(1) - in.get(C::alu_batched_tags_diff_inv)) +
                              in.get(C::alu_batched_tags_diff_inv)) -
                         FF(1)) +
                        alu_BATCHED_TAGS_DIFF_IS_ZERO);
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // OP_ID_CHECK
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::alu_sel_op_add) - in.get(C::alu_op_id));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_add) * (FF(1) - in.get(C::alu_sel_op_add));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // ALU_ADD
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_add) * (((in.get(C::alu_ia) + in.get(C::alu_ib)) - in.get(C::alu_ic)) -
                                                    in.get(C::alu_cf) * (in.get(C::alu_max_value) + FF(1)));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class alu : public Relation<aluImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "alu";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 2:
            return "BATCHED_TAGS_DIFF_CHECK";
        case 3:
            return "OP_ID_CHECK";
        case 5:
            return "ALU_ADD";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_BATCHED_TAGS_DIFF_CHECK = 2;
    static constexpr size_t SR_OP_ID_CHECK = 3;
    static constexpr size_t SR_ALU_ADD = 5;
};

} // namespace bb::avm2
