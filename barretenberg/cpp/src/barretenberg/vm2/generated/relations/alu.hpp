// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class aluImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 54> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 2, 5, 5, 4, 3, 3, 4, 6, 3,
                                                                            3, 6, 3, 6, 3, 6, 3, 5, 3, 3, 3, 3, 6, 6,
                                                                            3, 3, 5, 6, 3, 6, 3, 3, 3, 3, 3, 3, 3, 4,
                                                                            3, 4, 3, 3, 3, 3, 2, 2, 3, 3, 4, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::alu_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class alu : public Relation<aluImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "alu";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 4:
            return "ERR_CHECK";
        case 5:
            return "OP_ID_CHECK";
        case 6:
            return "TAG_IS_FF";
        case 7:
            return "TAG_IS_U128";
        case 8:
            return "C_TAG_CHECK";
        case 11:
            return "TAG_ERR_CHECK";
        case 12:
            return "AB_TAGS_CHECK";
        case 15:
            return "ALU_ADD_SUB";
        case 17:
            return "ALU_MUL_NON_U128";
        case 19:
            return "A_DECOMPOSITION";
        case 20:
            return "B_DECOMPOSITION";
        case 21:
            return "ALU_MUL_U128";
        case 26:
            return "ALU_DIV_U128_CHECK";
        case 27:
            return "ALU_DIV_U128";
        case 30:
            return "DIV_0_ERR";
        case 31:
            return "ALU_FDIV_DIV_NON_U128";
        case 33:
            return "EQ_OP_MAIN";
        case 39:
            return "LT_SWAP_INPUTS_A";
        case 40:
            return "LT_SWAP_INPUTS_B";
        case 41:
            return "LTE_NEGATE_RESULT_C";
        case 43:
            return "NOT_OP_MAIN";
        case 48:
            return "SEL_TRUNC_NON_TRIVIAL";
        case 49:
            return "SEL_TRUNCATE";
        case 50:
            return "TRUNC_TRIVIAL_CASE";
        case 51:
            return "SMALL_TRUNC_VAL_IS_LO";
        case 52:
            return "TRUNC_LO_128_DECOMPOSITION";
        case 53:
            return "TRUNC_MID_BITS";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_ERR_CHECK = 4;
    static constexpr size_t SR_OP_ID_CHECK = 5;
    static constexpr size_t SR_TAG_IS_FF = 6;
    static constexpr size_t SR_TAG_IS_U128 = 7;
    static constexpr size_t SR_C_TAG_CHECK = 8;
    static constexpr size_t SR_TAG_ERR_CHECK = 11;
    static constexpr size_t SR_AB_TAGS_CHECK = 12;
    static constexpr size_t SR_ALU_ADD_SUB = 15;
    static constexpr size_t SR_ALU_MUL_NON_U128 = 17;
    static constexpr size_t SR_A_DECOMPOSITION = 19;
    static constexpr size_t SR_B_DECOMPOSITION = 20;
    static constexpr size_t SR_ALU_MUL_U128 = 21;
    static constexpr size_t SR_ALU_DIV_U128_CHECK = 26;
    static constexpr size_t SR_ALU_DIV_U128 = 27;
    static constexpr size_t SR_DIV_0_ERR = 30;
    static constexpr size_t SR_ALU_FDIV_DIV_NON_U128 = 31;
    static constexpr size_t SR_EQ_OP_MAIN = 33;
    static constexpr size_t SR_LT_SWAP_INPUTS_A = 39;
    static constexpr size_t SR_LT_SWAP_INPUTS_B = 40;
    static constexpr size_t SR_LTE_NEGATE_RESULT_C = 41;
    static constexpr size_t SR_NOT_OP_MAIN = 43;
    static constexpr size_t SR_SEL_TRUNC_NON_TRIVIAL = 48;
    static constexpr size_t SR_SEL_TRUNCATE = 49;
    static constexpr size_t SR_TRUNC_TRIVIAL_CASE = 50;
    static constexpr size_t SR_SMALL_TRUNC_VAL_IS_LO = 51;
    static constexpr size_t SR_TRUNC_LO_128_DECOMPOSITION = 52;
    static constexpr size_t SR_TRUNC_MID_BITS = 53;
};

} // namespace bb::avm2
