// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class aluImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 10> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 2, 2, 4, 5, 2, 3, 4 };

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto alu_TAG_M_1 = (in.get(C::alu_ia_tag) - FF(1));
        const auto alu_INVERSE_CHECK =
            in.get(C::alu_sel) * ((alu_TAG_M_1 * in.get(C::alu_tag_m1_inv) - FF(1)) + in.get(C::alu_is_u1));
        const auto alu_POS_MAX_BITS = in.get(C::alu_sel) * (in.get(C::alu_ia_tag) - FF(1)) * FF(8);

        { // SEL_BINARY
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel) * (FF(1) - in.get(C::alu_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // CF_BINARY
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_cf) * (FF(1) - in.get(C::alu_cf));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // IS_U1_BINARY
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_is_u1) * (in.get(C::alu_is_u1) - FF(1));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // AB_TAG_EQUAL
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::alu_ia_tag) - in.get(C::alu_ib_tag));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // AC_TAG_EQUAL
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (in.get(C::alu_ia_tag) - in.get(C::alu_ic_tag));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // TAG_IS_U1_CHECK
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = (alu_TAG_M_1 * in.get(C::alu_is_u1) * (FF(1) - in.get(C::alu_tag_m1_inv)) + alu_INVERSE_CHECK);
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // TAG_BITS_CHECK
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel) * (((FF(1) - alu_POS_MAX_BITS) * in.get(C::alu_is_u1) + alu_POS_MAX_BITS) -
                                             in.get(C::alu_max_bits));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // OP_ID_CHECK
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = (in.get(C::alu_sel_op_add) - in.get(C::alu_op_id));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // SEL_ADD_BINARY
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_add) * (FF(1) - in.get(C::alu_sel_op_add));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // ALU_ADD
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_add) * (((in.get(C::alu_ia) + in.get(C::alu_ib)) - in.get(C::alu_ic)) -
                                                    in.get(C::alu_cf) * in.get(C::alu_max_value));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class alu : public Relation<aluImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "alu";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "SEL_BINARY";
        case 1:
            return "CF_BINARY";
        case 2:
            return "IS_U1_BINARY";
        case 3:
            return "AB_TAG_EQUAL";
        case 4:
            return "AC_TAG_EQUAL";
        case 5:
            return "TAG_IS_U1_CHECK";
        case 6:
            return "TAG_BITS_CHECK";
        case 7:
            return "OP_ID_CHECK";
        case 8:
            return "SEL_ADD_BINARY";
        case 9:
            return "ALU_ADD";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SEL_BINARY = 0;
    static constexpr size_t SR_CF_BINARY = 1;
    static constexpr size_t SR_IS_U1_BINARY = 2;
    static constexpr size_t SR_AB_TAG_EQUAL = 3;
    static constexpr size_t SR_AC_TAG_EQUAL = 4;
    static constexpr size_t SR_TAG_IS_U1_CHECK = 5;
    static constexpr size_t SR_TAG_BITS_CHECK = 6;
    static constexpr size_t SR_OP_ID_CHECK = 7;
    static constexpr size_t SR_SEL_ADD_BINARY = 8;
    static constexpr size_t SR_ALU_ADD = 9;
};

} // namespace bb::avm2
