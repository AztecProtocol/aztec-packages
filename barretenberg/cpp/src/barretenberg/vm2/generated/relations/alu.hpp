// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class aluImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 13> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 2, 5, 4, 4, 3, 5, 3, 4, 6, 6 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::alu_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_FF = FF(0);
        const auto constants_MEM_TAG_U1 = FF(1);
        const auto constants_AVM_EXEC_OP_ID_ALU_ADD = FF(1);
        const auto constants_AVM_EXEC_OP_ID_ALU_EQ = FF(32);
        const auto constants_AVM_EXEC_OP_ID_ALU_LT = FF(64);
        const auto alu_IS_NOT_FF = (FF(1) - in.get(C::alu_sel_is_ff));
        const auto alu_CHECK_TAG_FF = in.get(C::alu_sel_op_lt);
        const auto alu_TAG_FF_DIFF = (in.get(C::alu_ia_tag) - constants_MEM_TAG_FF);
        const auto alu_EXPECTED_C_TAG = in.get(C::alu_sel_op_add) * in.get(C::alu_ia_tag) +
                                        (in.get(C::alu_sel_op_lt) + in.get(C::alu_sel_op_eq)) * constants_MEM_TAG_U1;
        const auto alu_AB_TAGS_EQ = (FF(1) - in.get(C::alu_sel_tag_err));
        const auto alu_A_GTE_B = (in.get(C::alu_ia) - in.get(C::alu_ib));
        const auto alu_A_LT_B = ((in.get(C::alu_ib) - in.get(C::alu_ia)) - FF(1));
        const auto alu_DIFF = (in.get(C::alu_ia) - in.get(C::alu_ib));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel) * (FF(1) - in.get(C::alu_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_cf) * (FF(1) - in.get(C::alu_cf));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_is_ff) * (FF(1) - in.get(C::alu_sel_is_ff));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // OP_ID_CHECK
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::alu_op_id) - (in.get(C::alu_sel_op_add) * constants_AVM_EXEC_OP_ID_ALU_ADD +
                                                in.get(C::alu_sel_op_lt) * constants_AVM_EXEC_OP_ID_ALU_LT +
                                                in.get(C::alu_sel_op_eq) * constants_AVM_EXEC_OP_ID_ALU_EQ));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // TAG_IS_FF
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = alu_CHECK_TAG_FF *
                       ((alu_TAG_FF_DIFF * (in.get(C::alu_sel_is_ff) * (FF(1) - in.get(C::alu_tag_ff_diff_inv)) +
                                            in.get(C::alu_tag_ff_diff_inv)) +
                         in.get(C::alu_sel_is_ff)) -
                        FF(1));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // C_TAG_CHECK
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = (FF(1) - in.get(C::alu_sel_tag_err)) * (alu_EXPECTED_C_TAG - in.get(C::alu_ic_tag));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // AB_TAGS_CHECK
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp =
                (((in.get(C::alu_ia_tag) - in.get(C::alu_ib_tag)) *
                      (alu_AB_TAGS_EQ * (FF(1) - in.get(C::alu_ab_tags_diff_inv)) + in.get(C::alu_ab_tags_diff_inv)) -
                  FF(1)) +
                 alu_AB_TAGS_EQ);
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_add) * (FF(1) - in.get(C::alu_sel_op_add));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // ALU_ADD
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_add) * (FF(1) - in.get(C::alu_sel_tag_err)) *
                       (((in.get(C::alu_ia) + in.get(C::alu_ib)) - in.get(C::alu_ic)) -
                        in.get(C::alu_cf) * (in.get(C::alu_max_value) + FF(1)));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_lt) * (FF(1) - in.get(C::alu_sel_op_lt));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = (in.get(C::alu_sel_ff_lt) -
                        (FF(1) - in.get(C::alu_sel_tag_err)) * in.get(C::alu_sel_is_ff) * in.get(C::alu_sel_op_lt));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        { // ALU_LT_RESULT
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::alu_sel_op_lt) * (FF(1) - in.get(C::alu_sel_tag_err)) *
                       (alu_IS_NOT_FF * ((alu_A_LT_B - alu_A_GTE_B) * in.get(C::alu_ic) + alu_A_GTE_B) -
                        in.get(C::alu_lt_abs_diff));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        { // EQ_OP_MAIN
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::alu_sel_op_eq) * (FF(1) - in.get(C::alu_sel_tag_err)) *
                ((alu_DIFF * (in.get(C::alu_ic) * (FF(1) - in.get(C::alu_helper1)) + in.get(C::alu_helper1)) - FF(1)) +
                 in.get(C::alu_ic));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class alu : public Relation<aluImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "alu";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 3:
            return "OP_ID_CHECK";
        case 4:
            return "TAG_IS_FF";
        case 5:
            return "C_TAG_CHECK";
        case 6:
            return "AB_TAGS_CHECK";
        case 8:
            return "ALU_ADD";
        case 11:
            return "ALU_LT_RESULT";
        case 12:
            return "EQ_OP_MAIN";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_OP_ID_CHECK = 3;
    static constexpr size_t SR_TAG_IS_FF = 4;
    static constexpr size_t SR_C_TAG_CHECK = 5;
    static constexpr size_t SR_AB_TAGS_CHECK = 6;
    static constexpr size_t SR_ALU_ADD = 8;
    static constexpr size_t SR_ALU_LT_RESULT = 11;
    static constexpr size_t SR_EQ_OP_MAIN = 12;
};

} // namespace bb::avm2
