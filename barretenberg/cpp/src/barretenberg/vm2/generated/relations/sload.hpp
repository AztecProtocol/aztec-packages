// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class sloadImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 2> SUBRELATION_PARTIAL_LENGTHS = { 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_execute_sload)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MEM_TAG_FF = FF(0);

        { // SLOAD_SUCCESS
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_sload) * in.get(C::execution_sel_opcode_error);
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // SLOAD_FF_OUTPUT_TAG
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_sload) * (constants_MEM_TAG_FF - in.get(C::execution_mem_tag_reg_1_));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class sload : public Relation<sloadImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "sload";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "SLOAD_SUCCESS";
        case 1:
            return "SLOAD_FF_OUTPUT_TAG";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SLOAD_SUCCESS = 0;
    static constexpr size_t SR_SLOAD_FF_OUTPUT_TAG = 1;
};

} // namespace bb::avm2
