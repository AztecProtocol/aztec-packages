// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_public_data_read_low_leaf_poseidon2_0 ///////////////////

class lookup_public_data_read_low_leaf_poseidon2_0_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_PUBLIC_DATA_READ_LOW_LEAF_POSEIDON2_0";
    static constexpr std::string_view RELATION_NAME = "public_data_read";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::public_data_read_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_start;
    static constexpr Column COUNTS = Column::lookup_public_data_read_low_leaf_poseidon2_0_counts;
    static constexpr Column INVERSES = Column::lookup_public_data_read_low_leaf_poseidon2_0_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::public_data_read_low_leaf_slot,
        ColumnAndShifts::public_data_read_low_leaf_value,
        ColumnAndShifts::public_data_read_low_leaf_next_index,
        ColumnAndShifts::public_data_read_low_leaf_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::public_data_read_sel) == 1 ||
                in.get(ColumnAndShifts::poseidon2_hash_start) == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.get(ColumnAndShifts::public_data_read_sel));
        const auto is_table_entry = View(in.get(ColumnAndShifts::poseidon2_hash_start));
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_poseidon2_0_inv),
                                     in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_poseidon2_0_counts),
                                     in.get(ColumnAndShifts::public_data_read_sel),
                                     in.get(ColumnAndShifts::poseidon2_hash_start),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_slot),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_value),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_next_index),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_hash),
                                     in.get(ColumnAndShifts::poseidon2_hash_input_0),
                                     in.get(ColumnAndShifts::poseidon2_hash_input_1),
                                     in.get(ColumnAndShifts::poseidon2_hash_input_2),
                                     in.get(ColumnAndShifts::poseidon2_hash_output));
    }
};

template <typename FF_>
class lookup_public_data_read_low_leaf_poseidon2_0_relation
    : public GenericLookupRelation<lookup_public_data_read_low_leaf_poseidon2_0_settings, FF_> {
  public:
    using Settings = lookup_public_data_read_low_leaf_poseidon2_0_settings;
    static constexpr std::string_view NAME = lookup_public_data_read_low_leaf_poseidon2_0_settings::NAME;
    static constexpr std::string_view RELATION_NAME =
        lookup_public_data_read_low_leaf_poseidon2_0_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_public_data_read_low_leaf_poseidon2_0_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// lookup_public_data_read_low_leaf_poseidon2_1 ///////////////////

class lookup_public_data_read_low_leaf_poseidon2_1_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_PUBLIC_DATA_READ_LOW_LEAF_POSEIDON2_1";
    static constexpr std::string_view RELATION_NAME = "public_data_read";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::public_data_read_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_public_data_read_low_leaf_poseidon2_1_counts;
    static constexpr Column INVERSES = Column::lookup_public_data_read_low_leaf_poseidon2_1_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::public_data_read_low_leaf_next_slot,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::public_data_read_low_leaf_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::public_data_read_sel) == 1 || in.get(ColumnAndShifts::poseidon2_hash_end) == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.get(ColumnAndShifts::public_data_read_sel));
        const auto is_table_entry = View(in.get(ColumnAndShifts::poseidon2_hash_end));
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_poseidon2_1_inv),
                                     in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_poseidon2_1_counts),
                                     in.get(ColumnAndShifts::public_data_read_sel),
                                     in.get(ColumnAndShifts::poseidon2_hash_end),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_next_slot),
                                     in.get(ColumnAndShifts::precomputed_zero),
                                     in.get(ColumnAndShifts::precomputed_zero),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_hash),
                                     in.get(ColumnAndShifts::poseidon2_hash_input_0),
                                     in.get(ColumnAndShifts::poseidon2_hash_input_1),
                                     in.get(ColumnAndShifts::poseidon2_hash_input_2),
                                     in.get(ColumnAndShifts::poseidon2_hash_output));
    }
};

template <typename FF_>
class lookup_public_data_read_low_leaf_poseidon2_1_relation
    : public GenericLookupRelation<lookup_public_data_read_low_leaf_poseidon2_1_settings, FF_> {
  public:
    using Settings = lookup_public_data_read_low_leaf_poseidon2_1_settings;
    static constexpr std::string_view NAME = lookup_public_data_read_low_leaf_poseidon2_1_settings::NAME;
    static constexpr std::string_view RELATION_NAME =
        lookup_public_data_read_low_leaf_poseidon2_1_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_public_data_read_low_leaf_poseidon2_1_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// lookup_public_data_read_low_leaf_membership ///////////////////

class lookup_public_data_read_low_leaf_membership_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_PUBLIC_DATA_READ_LOW_LEAF_MEMBERSHIP";
    static constexpr std::string_view RELATION_NAME = "public_data_read";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::public_data_read_sel;
    static constexpr Column DST_SELECTOR = Column::merkle_check_start;
    static constexpr Column COUNTS = Column::lookup_public_data_read_low_leaf_membership_counts;
    static constexpr Column INVERSES = Column::lookup_public_data_read_low_leaf_membership_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::public_data_read_low_leaf_hash,
        ColumnAndShifts::public_data_read_low_leaf_index,
        ColumnAndShifts::public_data_read_tree_height,
        ColumnAndShifts::public_data_read_root
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::merkle_check_read_node,
        ColumnAndShifts::merkle_check_index,
        ColumnAndShifts::merkle_check_path_len,
        ColumnAndShifts::merkle_check_read_root
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::public_data_read_sel) == 1 || in.get(ColumnAndShifts::merkle_check_start) == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.get(ColumnAndShifts::public_data_read_sel));
        const auto is_table_entry = View(in.get(ColumnAndShifts::merkle_check_start));
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_membership_inv),
                                     in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_membership_counts),
                                     in.get(ColumnAndShifts::public_data_read_sel),
                                     in.get(ColumnAndShifts::merkle_check_start),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_hash),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_index),
                                     in.get(ColumnAndShifts::public_data_read_tree_height),
                                     in.get(ColumnAndShifts::public_data_read_root),
                                     in.get(ColumnAndShifts::merkle_check_read_node),
                                     in.get(ColumnAndShifts::merkle_check_index),
                                     in.get(ColumnAndShifts::merkle_check_path_len),
                                     in.get(ColumnAndShifts::merkle_check_read_root));
    }
};

template <typename FF_>
class lookup_public_data_read_low_leaf_membership_relation
    : public GenericLookupRelation<lookup_public_data_read_low_leaf_membership_settings, FF_> {
  public:
    using Settings = lookup_public_data_read_low_leaf_membership_settings;
    static constexpr std::string_view NAME = lookup_public_data_read_low_leaf_membership_settings::NAME;
    static constexpr std::string_view RELATION_NAME =
        lookup_public_data_read_low_leaf_membership_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_public_data_read_low_leaf_membership_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// lookup_public_data_read_low_leaf_slot_validation ///////////////////

class lookup_public_data_read_low_leaf_slot_validation_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_PUBLIC_DATA_READ_LOW_LEAF_SLOT_VALIDATION";
    static constexpr std::string_view RELATION_NAME = "public_data_read";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::public_data_read_leaf_not_exists;
    static constexpr Column DST_SELECTOR = Column::ff_gt_sel_gt;
    static constexpr Column COUNTS = Column::lookup_public_data_read_low_leaf_slot_validation_counts;
    static constexpr Column INVERSES = Column::lookup_public_data_read_low_leaf_slot_validation_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::public_data_read_slot,
        ColumnAndShifts::public_data_read_low_leaf_slot,
        ColumnAndShifts::public_data_read_one
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { ColumnAndShifts::ff_gt_a,
                                                                                    ColumnAndShifts::ff_gt_b,
                                                                                    ColumnAndShifts::ff_gt_result };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::public_data_read_leaf_not_exists) == 1 ||
                in.get(ColumnAndShifts::ff_gt_sel_gt) == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.get(ColumnAndShifts::public_data_read_leaf_not_exists));
        const auto is_table_entry = View(in.get(ColumnAndShifts::ff_gt_sel_gt));
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_slot_validation_inv),
                                     in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_slot_validation_counts),
                                     in.get(ColumnAndShifts::public_data_read_leaf_not_exists),
                                     in.get(ColumnAndShifts::ff_gt_sel_gt),
                                     in.get(ColumnAndShifts::public_data_read_slot),
                                     in.get(ColumnAndShifts::public_data_read_low_leaf_slot),
                                     in.get(ColumnAndShifts::public_data_read_one),
                                     in.get(ColumnAndShifts::ff_gt_a),
                                     in.get(ColumnAndShifts::ff_gt_b),
                                     in.get(ColumnAndShifts::ff_gt_result));
    }
};

template <typename FF_>
class lookup_public_data_read_low_leaf_slot_validation_relation
    : public GenericLookupRelation<lookup_public_data_read_low_leaf_slot_validation_settings, FF_> {
  public:
    using Settings = lookup_public_data_read_low_leaf_slot_validation_settings;
    static constexpr std::string_view NAME = lookup_public_data_read_low_leaf_slot_validation_settings::NAME;
    static constexpr std::string_view RELATION_NAME =
        lookup_public_data_read_low_leaf_slot_validation_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_public_data_read_low_leaf_slot_validation_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// lookup_public_data_read_low_leaf_next_slot_validation ///////////////////

class lookup_public_data_read_low_leaf_next_slot_validation_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_PUBLIC_DATA_READ_LOW_LEAF_NEXT_SLOT_VALIDATION";
    static constexpr std::string_view RELATION_NAME = "public_data_read";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::public_data_read_next_slot_is_nonzero;
    static constexpr Column DST_SELECTOR = Column::ff_gt_sel_gt;
    static constexpr Column COUNTS = Column::lookup_public_data_read_low_leaf_next_slot_validation_counts;
    static constexpr Column INVERSES = Column::lookup_public_data_read_low_leaf_next_slot_validation_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::public_data_read_low_leaf_next_slot,
        ColumnAndShifts::public_data_read_slot,
        ColumnAndShifts::public_data_read_one
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { ColumnAndShifts::ff_gt_a,
                                                                                    ColumnAndShifts::ff_gt_b,
                                                                                    ColumnAndShifts::ff_gt_result };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::public_data_read_next_slot_is_nonzero) == 1 ||
                in.get(ColumnAndShifts::ff_gt_sel_gt) == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.get(ColumnAndShifts::public_data_read_next_slot_is_nonzero));
        const auto is_table_entry = View(in.get(ColumnAndShifts::ff_gt_sel_gt));
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(
            in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_next_slot_validation_inv),
            in.get(ColumnAndShifts::lookup_public_data_read_low_leaf_next_slot_validation_counts),
            in.get(ColumnAndShifts::public_data_read_next_slot_is_nonzero),
            in.get(ColumnAndShifts::ff_gt_sel_gt),
            in.get(ColumnAndShifts::public_data_read_low_leaf_next_slot),
            in.get(ColumnAndShifts::public_data_read_slot),
            in.get(ColumnAndShifts::public_data_read_one),
            in.get(ColumnAndShifts::ff_gt_a),
            in.get(ColumnAndShifts::ff_gt_b),
            in.get(ColumnAndShifts::ff_gt_result));
    }
};

template <typename FF_>
class lookup_public_data_read_low_leaf_next_slot_validation_relation
    : public GenericLookupRelation<lookup_public_data_read_low_leaf_next_slot_validation_settings, FF_> {
  public:
    using Settings = lookup_public_data_read_low_leaf_next_slot_validation_settings;
    static constexpr std::string_view NAME = lookup_public_data_read_low_leaf_next_slot_validation_settings::NAME;
    static constexpr std::string_view RELATION_NAME =
        lookup_public_data_read_low_leaf_next_slot_validation_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_public_data_read_low_leaf_next_slot_validation_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

} // namespace bb::avm2
