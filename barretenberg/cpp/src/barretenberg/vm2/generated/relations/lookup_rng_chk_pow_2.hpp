// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <tuple>

namespace bb::avm2 {

class lookup_rng_chk_pow_2_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_8;
    static constexpr Column COUNTS = Column::lookup_rng_chk_pow_2_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_pow_2_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_dyn_rng_chk_bits,
                                                                           Column::range_check_dyn_rng_chk_pow_2 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk,
                                                                           Column::precomputed_power_of_2 };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.range_check_sel == 1 || in.precomputed_sel_range_8 == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.range_check_sel);
        const auto is_table_entry = View(in.precomputed_sel_range_8);
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in.lookup_rng_chk_pow_2_inv,
                                     in.lookup_rng_chk_pow_2_counts,
                                     in.range_check_sel,
                                     in.precomputed_sel_range_8,
                                     in.range_check_dyn_rng_chk_bits,
                                     in.range_check_dyn_rng_chk_pow_2,
                                     in.precomputed_clk,
                                     in.precomputed_power_of_2);
    }
};

template <typename FF_>
class lookup_rng_chk_pow_2_relation : public GenericLookupRelation<lookup_rng_chk_pow_2_lookup_settings, FF_> {
  public:
    static constexpr const char* NAME = "LOOKUP_RNG_CHK_POW_2";
};
template <typename FF_> using lookup_rng_chk_pow_2 = GenericLookup<lookup_rng_chk_pow_2_lookup_settings, FF_>;

} // namespace bb::avm2