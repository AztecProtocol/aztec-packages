// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/emit_notehash.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void emit_notehashImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                        const AllEntities& in,
                                        [[maybe_unused]] const RelationParameters<FF_>&,
                                        [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    BB_BENCH_NESTED_NAME("accumulate/emit_notehash");

    const auto constants_MAX_NOTE_HASHES_PER_TX = FF(64);
    const auto execution_REMAINING_NOTE_HASH_WRITES =
        (constants_MAX_NOTE_HASHES_PER_TX - in.get(C::execution_prev_num_note_hashes_emitted));

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_reached_max_note_hashes) *
                   (FF(1) - in.get(C::execution_sel_reached_max_note_hashes));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    { // MAX_NOTE_HASHES_REACHED
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_sel_execute_emit_notehash) *
            ((execution_REMAINING_NOTE_HASH_WRITES * (in.get(C::execution_sel_reached_max_note_hashes) *
                                                          (FF(1) - in.get(C::execution_remaining_note_hashes_inv)) +
                                                      in.get(C::execution_remaining_note_hashes_inv)) -
              FF(1)) +
             in.get(C::execution_sel_reached_max_note_hashes));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    { // OPCODE_ERROR_IF_MAX_NOTE_HASHES_REACHED_OR_STATIC
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_sel_execute_emit_notehash) *
            ((FF(1) - in.get(C::execution_sel_reached_max_note_hashes)) * (FF(1) - in.get(C::execution_is_static)) -
             (FF(1) - in.get(C::execution_sel_opcode_error)));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_notehash) *
                   ((FF(1) - in.get(C::execution_sel_opcode_error)) - in.get(C::execution_sel_write_note_hash));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    { // EMIT_NOTEHASH_TREE_ROOT_NOT_CHANGED
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_notehash) * in.get(C::execution_sel_opcode_error) *
                   (in.get(C::execution_prev_note_hash_tree_root) - in.get(C::execution_note_hash_tree_root));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    { // EMIT_NOTEHASH_TREE_SIZE_INCREASE
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_notehash) *
                   ((in.get(C::execution_prev_note_hash_tree_size) + in.get(C::execution_sel_write_note_hash)) -
                    in.get(C::execution_note_hash_tree_size));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    { // EMIT_NOTEHASH_NUM_NOTE_HASHES_EMITTED_INCREASE
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_notehash) *
                   ((in.get(C::execution_prev_num_note_hashes_emitted) + in.get(C::execution_sel_write_note_hash)) -
                    in.get(C::execution_num_note_hashes_emitted));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
