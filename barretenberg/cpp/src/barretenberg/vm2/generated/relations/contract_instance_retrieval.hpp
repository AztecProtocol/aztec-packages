// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class contract_instance_retrievalImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 7> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 4, 4, 4, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::contract_instance_retrieval_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_CONTRACT_INSTANCE_REGISTRY_CONTRACT_ADDRESS = FF(2);

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::contract_instance_retrieval_sel) * (FF(1) - in.get(C::contract_instance_retrieval_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::contract_instance_retrieval_sel) *
                       (constants_CONTRACT_INSTANCE_REGISTRY_CONTRACT_ADDRESS -
                        in.get(C::contract_instance_retrieval_deployer_protocol_contract_address));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // INSTANCE_MEMBER_SALT_IS_ZERO_IF_DNE
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::contract_instance_retrieval_sel) *
                       (FF(1) - in.get(C::contract_instance_retrieval_exists)) *
                       in.get(C::contract_instance_retrieval_salt);
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // INSTANCE_MEMBER_DEPLOYER_IS_ZERO_IF_DNE
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::contract_instance_retrieval_sel) *
                       (FF(1) - in.get(C::contract_instance_retrieval_exists)) *
                       in.get(C::contract_instance_retrieval_deployer_addr);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // INSTANCE_MEMBER_CLASS_ID_IS_ZERO_IF_DNE
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::contract_instance_retrieval_sel) *
                       (FF(1) - in.get(C::contract_instance_retrieval_exists)) *
                       in.get(C::contract_instance_retrieval_current_class_id);
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // INSTANCE_MEMBER_ORIGINAL_CLASS_ID_IS_ZERO_IF_DNE
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::contract_instance_retrieval_sel) *
                       (FF(1) - in.get(C::contract_instance_retrieval_exists)) *
                       in.get(C::contract_instance_retrieval_original_class_id);
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // INSTANCE_MEMBER_INIT_HASH_IS_ZERO_IF_DNE
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::contract_instance_retrieval_sel) *
                       (FF(1) - in.get(C::contract_instance_retrieval_exists)) *
                       in.get(C::contract_instance_retrieval_init_hash);
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class contract_instance_retrieval : public Relation<contract_instance_retrievalImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "contract_instance_retrieval";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 2:
            return "INSTANCE_MEMBER_SALT_IS_ZERO_IF_DNE";
        case 3:
            return "INSTANCE_MEMBER_DEPLOYER_IS_ZERO_IF_DNE";
        case 4:
            return "INSTANCE_MEMBER_CLASS_ID_IS_ZERO_IF_DNE";
        case 5:
            return "INSTANCE_MEMBER_ORIGINAL_CLASS_ID_IS_ZERO_IF_DNE";
        case 6:
            return "INSTANCE_MEMBER_INIT_HASH_IS_ZERO_IF_DNE";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_INSTANCE_MEMBER_SALT_IS_ZERO_IF_DNE = 2;
    static constexpr size_t SR_INSTANCE_MEMBER_DEPLOYER_IS_ZERO_IF_DNE = 3;
    static constexpr size_t SR_INSTANCE_MEMBER_CLASS_ID_IS_ZERO_IF_DNE = 4;
    static constexpr size_t SR_INSTANCE_MEMBER_ORIGINAL_CLASS_ID_IS_ZERO_IF_DNE = 5;
    static constexpr size_t SR_INSTANCE_MEMBER_INIT_HASH_IS_ZERO_IF_DNE = 6;
};

} // namespace bb::avm2
