// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/common/expression.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_contract_instance_retrieval_deployment_nullifier_read ///////////////////

struct lookup_contract_instance_retrieval_deployment_nullifier_read_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_CONTRACT_INSTANCE_RETRIEVAL_DEPLOYMENT_NULLIFIER_READ";
    static constexpr std::string_view RELATION_NAME = "contract_instance_retrieval";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 5;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::contract_instance_retrieval_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::nullifier_check_sel);
    static constexpr auto SRC_EXPRS = std::make_tuple(
        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_exists),
        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_address),
        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_nullifier_tree_root),
        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_deployer_protocol_contract_address),
        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_sel));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::nullifier_check_exists),
                                                      ColumnExpression(ColumnAndShifts::nullifier_check_nullifier),
                                                      ColumnExpression(ColumnAndShifts::nullifier_check_root),
                                                      ColumnExpression(ColumnAndShifts::nullifier_check_address),
                                                      ColumnExpression(ColumnAndShifts::nullifier_check_should_silo));
    static constexpr Column COUNTS = Column::lookup_contract_instance_retrieval_deployment_nullifier_read_counts;
    static constexpr Column INVERSES = Column::lookup_contract_instance_retrieval_deployment_nullifier_read_inv;
};

using lookup_contract_instance_retrieval_deployment_nullifier_read_settings =
    lookup_settings<lookup_contract_instance_retrieval_deployment_nullifier_read_settings_>;
template <typename FF_>
using lookup_contract_instance_retrieval_deployment_nullifier_read_relation =
    lookup_relation_base<FF_, lookup_contract_instance_retrieval_deployment_nullifier_read_settings>;

/////////////////// lookup_contract_instance_retrieval_address_derivation ///////////////////

struct lookup_contract_instance_retrieval_address_derivation_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_CONTRACT_INSTANCE_RETRIEVAL_ADDRESS_DERIVATION";
    static constexpr std::string_view RELATION_NAME = "contract_instance_retrieval";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 13;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::contract_instance_retrieval_exists);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::address_derivation_sel);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::contract_instance_retrieval_address),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_salt),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_deployer_addr),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_original_class_id),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_init_hash),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_nullifier_key_x),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_nullifier_key_y),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_incoming_viewing_key_x),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_incoming_viewing_key_y),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_outgoing_viewing_key_x),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_outgoing_viewing_key_y),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_tagging_key_x),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_tagging_key_y));
    static constexpr auto DST_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::address_derivation_address),
                        ColumnExpression(ColumnAndShifts::address_derivation_salt),
                        ColumnExpression(ColumnAndShifts::address_derivation_deployer_addr),
                        ColumnExpression(ColumnAndShifts::address_derivation_class_id),
                        ColumnExpression(ColumnAndShifts::address_derivation_init_hash),
                        ColumnExpression(ColumnAndShifts::address_derivation_nullifier_key_x),
                        ColumnExpression(ColumnAndShifts::address_derivation_nullifier_key_y),
                        ColumnExpression(ColumnAndShifts::address_derivation_incoming_viewing_key_x),
                        ColumnExpression(ColumnAndShifts::address_derivation_incoming_viewing_key_y),
                        ColumnExpression(ColumnAndShifts::address_derivation_outgoing_viewing_key_x),
                        ColumnExpression(ColumnAndShifts::address_derivation_outgoing_viewing_key_y),
                        ColumnExpression(ColumnAndShifts::address_derivation_tagging_key_x),
                        ColumnExpression(ColumnAndShifts::address_derivation_tagging_key_y));
    static constexpr Column COUNTS = Column::lookup_contract_instance_retrieval_address_derivation_counts;
    static constexpr Column INVERSES = Column::lookup_contract_instance_retrieval_address_derivation_inv;
};

using lookup_contract_instance_retrieval_address_derivation_settings =
    lookup_settings<lookup_contract_instance_retrieval_address_derivation_settings_>;
template <typename FF_>
using lookup_contract_instance_retrieval_address_derivation_relation =
    lookup_relation_base<FF_, lookup_contract_instance_retrieval_address_derivation_settings>;

/////////////////// lookup_contract_instance_retrieval_update_check ///////////////////

struct lookup_contract_instance_retrieval_update_check_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_CONTRACT_INSTANCE_RETRIEVAL_UPDATE_CHECK";
    static constexpr std::string_view RELATION_NAME = "contract_instance_retrieval";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::contract_instance_retrieval_exists);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::update_check_sel);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::contract_instance_retrieval_address),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_current_class_id),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_original_class_id),
                        ColumnExpression(ColumnAndShifts::contract_instance_retrieval_public_data_tree_root));
    static constexpr auto DST_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::update_check_address),
                        ColumnExpression(ColumnAndShifts::update_check_current_class_id),
                        ColumnExpression(ColumnAndShifts::update_check_original_class_id),
                        ColumnExpression(ColumnAndShifts::update_check_public_data_tree_root));
    static constexpr Column COUNTS = Column::lookup_contract_instance_retrieval_update_check_counts;
    static constexpr Column INVERSES = Column::lookup_contract_instance_retrieval_update_check_inv;
};

using lookup_contract_instance_retrieval_update_check_settings =
    lookup_settings<lookup_contract_instance_retrieval_update_check_settings_>;
template <typename FF_>
using lookup_contract_instance_retrieval_update_check_relation =
    lookup_relation_base<FF_, lookup_contract_instance_retrieval_update_check_settings>;

} // namespace bb::avm2
