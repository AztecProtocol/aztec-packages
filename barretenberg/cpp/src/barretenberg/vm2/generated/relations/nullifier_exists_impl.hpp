// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/nullifier_exists.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void nullifier_existsImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                           const AllEntities& in,
                                           [[maybe_unused]] const RelationParameters<FF_>&,
                                           [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    BB_BENCH_TRACY_NAME("accumulate/nullifier_exists");

    const auto constants_MEM_TAG_U1 = FF(1);

    { // NULLIFIER_EXISTS_U1_OUTPUT_TAG
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_nullifier_exists) *
                   (constants_MEM_TAG_U1 - in.get(C::execution_mem_tag_reg_2_));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    { // NULLIFIER_EXISTS_SUCCESS
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_opcode_error) * in.get(C::execution_sel_execute_nullifier_exists);
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
