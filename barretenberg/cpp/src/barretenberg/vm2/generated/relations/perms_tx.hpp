// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// perm_tx_lookup_phase_length ///////////////////

class perm_tx_lookup_phase_length_settings {
  public:
    static constexpr std::string_view NAME = "PERM_TX_LOOKUP_PHASE_LENGTH";
    static constexpr std::string_view RELATION_NAME = "tx";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 2;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::tx_start_phase;
    static constexpr Column DST_SELECTOR = Column::public_inputs_sel;
    static constexpr Column INVERSES = Column::perm_tx_lookup_phase_length_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::tx_start_phase) == 1 || in.get(ColumnAndShifts::public_inputs_sel) == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_phase_length_inv),
                                     in.get(ColumnAndShifts::tx_start_phase),
                                     in.get(ColumnAndShifts::tx_start_phase),
                                     in.get(ColumnAndShifts::public_inputs_sel),
                                     in.get(ColumnAndShifts::tx_read_pi_length_offset),
                                     in.get(ColumnAndShifts::tx_remaining_phase_events),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::public_inputs_cols_0_));
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_phase_length_inv),
                                     in.get(ColumnAndShifts::tx_start_phase),
                                     in.get(ColumnAndShifts::tx_start_phase),
                                     in.get(ColumnAndShifts::public_inputs_sel),
                                     in.get(ColumnAndShifts::tx_read_pi_length_offset),
                                     in.get(ColumnAndShifts::tx_remaining_phase_events),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::public_inputs_cols_0_));
    }
};

template <typename FF_>
class perm_tx_lookup_phase_length_relation
    : public GenericPermutationRelation<perm_tx_lookup_phase_length_settings, FF_> {
  public:
    using Settings = perm_tx_lookup_phase_length_settings;
    static constexpr std::string_view NAME = perm_tx_lookup_phase_length_settings::NAME;
    static constexpr std::string_view RELATION_NAME = perm_tx_lookup_phase_length_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.perm_tx_lookup_phase_length_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// perm_tx_lookup_read_public_call_request_phase ///////////////////

class perm_tx_lookup_read_public_call_request_phase_settings {
  public:
    static constexpr std::string_view NAME = "PERM_TX_LOOKUP_READ_PUBLIC_CALL_REQUEST_PHASE";
    static constexpr std::string_view RELATION_NAME = "tx";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 5;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::tx_is_public_call_request;
    static constexpr Column DST_SELECTOR = Column::public_inputs_sel;
    static constexpr Column INVERSES = Column::perm_tx_lookup_read_public_call_request_phase_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::tx_is_public_call_request) == 1 ||
                in.get(ColumnAndShifts::public_inputs_sel) == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_read_public_call_request_phase_inv),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::public_inputs_sel),
                                     in.get(ColumnAndShifts::tx_read_pi_offset),
                                     in.get(ColumnAndShifts::tx_msg_sender),
                                     in.get(ColumnAndShifts::tx_contract_addr),
                                     in.get(ColumnAndShifts::tx_is_static),
                                     in.get(ColumnAndShifts::tx_calldata_hash),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::public_inputs_cols_0_),
                                     in.get(ColumnAndShifts::public_inputs_cols_1_),
                                     in.get(ColumnAndShifts::public_inputs_cols_2_),
                                     in.get(ColumnAndShifts::public_inputs_cols_3_));
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_read_public_call_request_phase_inv),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::public_inputs_sel),
                                     in.get(ColumnAndShifts::tx_read_pi_offset),
                                     in.get(ColumnAndShifts::tx_msg_sender),
                                     in.get(ColumnAndShifts::tx_contract_addr),
                                     in.get(ColumnAndShifts::tx_is_static),
                                     in.get(ColumnAndShifts::tx_calldata_hash),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::public_inputs_cols_0_),
                                     in.get(ColumnAndShifts::public_inputs_cols_1_),
                                     in.get(ColumnAndShifts::public_inputs_cols_2_),
                                     in.get(ColumnAndShifts::public_inputs_cols_3_));
    }
};

template <typename FF_>
class perm_tx_lookup_read_public_call_request_phase_relation
    : public GenericPermutationRelation<perm_tx_lookup_read_public_call_request_phase_settings, FF_> {
  public:
    using Settings = perm_tx_lookup_read_public_call_request_phase_settings;
    static constexpr std::string_view NAME = perm_tx_lookup_read_public_call_request_phase_settings::NAME;
    static constexpr std::string_view RELATION_NAME =
        perm_tx_lookup_read_public_call_request_phase_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.perm_tx_lookup_read_public_call_request_phase_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// perm_tx_lookup_dispatch_exec ///////////////////

class perm_tx_lookup_dispatch_exec_settings {
  public:
    static constexpr std::string_view NAME = "PERM_TX_LOOKUP_DISPATCH_EXEC";
    static constexpr std::string_view RELATION_NAME = "tx";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 5;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::tx_is_public_call_request;
    static constexpr Column DST_SELECTOR = Column::execution_enqueued_call_start;
    static constexpr Column INVERSES = Column::perm_tx_lookup_dispatch_exec_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::tx_is_public_call_request) == 1 ||
                in.get(ColumnAndShifts::execution_enqueued_call_start) == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_dispatch_exec_inv),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::execution_enqueued_call_start),
                                     in.get(ColumnAndShifts::tx_context_id),
                                     in.get(ColumnAndShifts::tx_next_context_id),
                                     in.get(ColumnAndShifts::tx_msg_sender),
                                     in.get(ColumnAndShifts::tx_contract_addr),
                                     in.get(ColumnAndShifts::tx_is_static),
                                     in.get(ColumnAndShifts::execution_context_id),
                                     in.get(ColumnAndShifts::execution_next_context_id),
                                     in.get(ColumnAndShifts::execution_msg_sender),
                                     in.get(ColumnAndShifts::execution_contract_address),
                                     in.get(ColumnAndShifts::execution_is_static));
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_dispatch_exec_inv),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::execution_enqueued_call_start),
                                     in.get(ColumnAndShifts::tx_context_id),
                                     in.get(ColumnAndShifts::tx_next_context_id),
                                     in.get(ColumnAndShifts::tx_msg_sender),
                                     in.get(ColumnAndShifts::tx_contract_addr),
                                     in.get(ColumnAndShifts::tx_is_static),
                                     in.get(ColumnAndShifts::execution_context_id),
                                     in.get(ColumnAndShifts::execution_next_context_id),
                                     in.get(ColumnAndShifts::execution_msg_sender),
                                     in.get(ColumnAndShifts::execution_contract_address),
                                     in.get(ColumnAndShifts::execution_is_static));
    }
};

template <typename FF_>
class perm_tx_lookup_dispatch_exec_relation
    : public GenericPermutationRelation<perm_tx_lookup_dispatch_exec_settings, FF_> {
  public:
    using Settings = perm_tx_lookup_dispatch_exec_settings;
    static constexpr std::string_view NAME = perm_tx_lookup_dispatch_exec_settings::NAME;
    static constexpr std::string_view RELATION_NAME = perm_tx_lookup_dispatch_exec_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.perm_tx_lookup_dispatch_exec_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// perm_tx_lookup_dispatch_get_revert ///////////////////

class perm_tx_lookup_dispatch_get_revert_settings {
  public:
    static constexpr std::string_view NAME = "PERM_TX_LOOKUP_DISPATCH_GET_REVERT";
    static constexpr std::string_view RELATION_NAME = "tx";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 2;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::tx_is_public_call_request;
    static constexpr Column DST_SELECTOR = Column::execution_enqueued_call_end;
    static constexpr Column INVERSES = Column::perm_tx_lookup_dispatch_get_revert_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::tx_is_public_call_request) == 1 ||
                in.get(ColumnAndShifts::execution_enqueued_call_end) == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_dispatch_get_revert_inv),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::execution_enqueued_call_end),
                                     in.get(ColumnAndShifts::tx_context_id),
                                     in.get(ColumnAndShifts::tx_reverted),
                                     in.get(ColumnAndShifts::execution_context_id),
                                     in.get(ColumnAndShifts::execution_sel_error));
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_dispatch_get_revert_inv),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::tx_is_public_call_request),
                                     in.get(ColumnAndShifts::execution_enqueued_call_end),
                                     in.get(ColumnAndShifts::tx_context_id),
                                     in.get(ColumnAndShifts::tx_reverted),
                                     in.get(ColumnAndShifts::execution_context_id),
                                     in.get(ColumnAndShifts::execution_sel_error));
    }
};

template <typename FF_>
class perm_tx_lookup_dispatch_get_revert_relation
    : public GenericPermutationRelation<perm_tx_lookup_dispatch_get_revert_settings, FF_> {
  public:
    using Settings = perm_tx_lookup_dispatch_get_revert_settings;
    static constexpr std::string_view NAME = perm_tx_lookup_dispatch_get_revert_settings::NAME;
    static constexpr std::string_view RELATION_NAME = perm_tx_lookup_dispatch_get_revert_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.perm_tx_lookup_dispatch_get_revert_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// perm_tx_lookup_l2_l1_msg ///////////////////

class perm_tx_lookup_l2_l1_msg_settings {
  public:
    static constexpr std::string_view NAME = "PERM_TX_LOOKUP_L2_L1_MSG";
    static constexpr std::string_view RELATION_NAME = "tx";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 5;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::tx_is_l2_l1_msg_phase;
    static constexpr Column DST_SELECTOR = Column::public_inputs_sel;
    static constexpr Column INVERSES = Column::perm_tx_lookup_l2_l1_msg_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::tx_is_l2_l1_msg_phase) == 1 || in.get(ColumnAndShifts::public_inputs_sel) == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_l2_l1_msg_inv),
                                     in.get(ColumnAndShifts::tx_is_l2_l1_msg_phase),
                                     in.get(ColumnAndShifts::tx_is_l2_l1_msg_phase),
                                     in.get(ColumnAndShifts::public_inputs_sel),
                                     in.get(ColumnAndShifts::tx_read_pi_offset),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_contract_address),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_recipient),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_content),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_counter),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::public_inputs_cols_0_),
                                     in.get(ColumnAndShifts::public_inputs_cols_1_),
                                     in.get(ColumnAndShifts::public_inputs_cols_2_),
                                     in.get(ColumnAndShifts::public_inputs_cols_3_));
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::perm_tx_lookup_l2_l1_msg_inv),
                                     in.get(ColumnAndShifts::tx_is_l2_l1_msg_phase),
                                     in.get(ColumnAndShifts::tx_is_l2_l1_msg_phase),
                                     in.get(ColumnAndShifts::public_inputs_sel),
                                     in.get(ColumnAndShifts::tx_read_pi_offset),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_contract_address),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_recipient),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_content),
                                     in.get(ColumnAndShifts::tx_l2_l1_msg_counter),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::public_inputs_cols_0_),
                                     in.get(ColumnAndShifts::public_inputs_cols_1_),
                                     in.get(ColumnAndShifts::public_inputs_cols_2_),
                                     in.get(ColumnAndShifts::public_inputs_cols_3_));
    }
};

template <typename FF_>
class perm_tx_lookup_l2_l1_msg_relation : public GenericPermutationRelation<perm_tx_lookup_l2_l1_msg_settings, FF_> {
  public:
    using Settings = perm_tx_lookup_l2_l1_msg_settings;
    static constexpr std::string_view NAME = perm_tx_lookup_l2_l1_msg_settings::NAME;
    static constexpr std::string_view RELATION_NAME = perm_tx_lookup_l2_l1_msg_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.perm_tx_lookup_l2_l1_msg_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

} // namespace bb::avm2
