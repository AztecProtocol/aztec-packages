// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/common/expression.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_bitwise_integral_tag_length ///////////////////

struct lookup_bitwise_integral_tag_length_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_BITWISE_INTEGRAL_TAG_LENGTH";
    static constexpr std::string_view RELATION_NAME = "bitwise";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::bitwise_sel_get_ctr);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::precomputed_sel_tag_parameters);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::bitwise_tag_a),
                                                      ColumnExpression(ColumnAndShifts::bitwise_ctr));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::precomputed_clk),
                                                      ColumnExpression(ColumnAndShifts::precomputed_tag_byte_length));
    static constexpr Column COUNTS = Column::lookup_bitwise_integral_tag_length_counts;
    static constexpr Column INVERSES = Column::lookup_bitwise_integral_tag_length_inv;
};

using lookup_bitwise_integral_tag_length_settings = lookup_settings<lookup_bitwise_integral_tag_length_settings_>;
template <typename FF_>
using lookup_bitwise_integral_tag_length_relation =
    lookup_relation_base<FF_, lookup_bitwise_integral_tag_length_settings>;

/////////////////// lookup_bitwise_byte_operations ///////////////////

struct lookup_bitwise_byte_operations_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_BITWISE_BYTE_OPERATIONS";
    static constexpr std::string_view RELATION_NAME = "bitwise";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::bitwise_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::precomputed_sel_bitwise);
    static constexpr auto SRC_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::bitwise_op_id),
                                                      ColumnExpression(ColumnAndShifts::bitwise_ia_byte),
                                                      ColumnExpression(ColumnAndShifts::bitwise_ib_byte),
                                                      ColumnExpression(ColumnAndShifts::bitwise_ic_byte));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::precomputed_bitwise_op_id),
                                                      ColumnExpression(ColumnAndShifts::precomputed_bitwise_input_a),
                                                      ColumnExpression(ColumnAndShifts::precomputed_bitwise_input_b),
                                                      ColumnExpression(ColumnAndShifts::precomputed_bitwise_output));
    static constexpr Column COUNTS = Column::lookup_bitwise_byte_operations_counts;
    static constexpr Column INVERSES = Column::lookup_bitwise_byte_operations_inv;
};

using lookup_bitwise_byte_operations_settings = lookup_settings<lookup_bitwise_byte_operations_settings_>;
template <typename FF_>
using lookup_bitwise_byte_operations_relation = lookup_relation_base<FF_, lookup_bitwise_byte_operations_settings>;

/////////////////// lookup_bitwise_dispatch_exec_bitwise ///////////////////

struct lookup_bitwise_dispatch_exec_bitwise_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_BITWISE_DISPATCH_EXEC_BITWISE";
    static constexpr std::string_view RELATION_NAME = "bitwise";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 8;
    static constexpr auto SRC_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::execution_sel_execute_bitwise);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::bitwise_sel);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::execution_subtrace_operation_id),
                        ColumnExpression(ColumnAndShifts::execution_sel_opcode_error),
                        ColumnExpression(ColumnAndShifts::execution_register_0_),
                        ColumnExpression(ColumnAndShifts::execution_mem_tag_reg_0_),
                        ColumnExpression(ColumnAndShifts::execution_register_1_),
                        ColumnExpression(ColumnAndShifts::execution_mem_tag_reg_1_),
                        ColumnExpression(ColumnAndShifts::execution_register_2_),
                        ColumnExpression(ColumnAndShifts::execution_mem_tag_reg_2_));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::bitwise_op_id),
                                                      ColumnExpression(ColumnAndShifts::bitwise_err),
                                                      ColumnExpression(ColumnAndShifts::bitwise_acc_ia),
                                                      ColumnExpression(ColumnAndShifts::bitwise_tag_a),
                                                      ColumnExpression(ColumnAndShifts::bitwise_acc_ib),
                                                      ColumnExpression(ColumnAndShifts::bitwise_tag_b),
                                                      ColumnExpression(ColumnAndShifts::bitwise_acc_ic),
                                                      ColumnExpression(ColumnAndShifts::bitwise_tag_c));
    static constexpr Column COUNTS = Column::lookup_bitwise_dispatch_exec_bitwise_counts;
    static constexpr Column INVERSES = Column::lookup_bitwise_dispatch_exec_bitwise_inv;
};

using lookup_bitwise_dispatch_exec_bitwise_settings = lookup_settings<lookup_bitwise_dispatch_exec_bitwise_settings_>;
template <typename FF_>
using lookup_bitwise_dispatch_exec_bitwise_relation =
    lookup_relation_base<FF_, lookup_bitwise_dispatch_exec_bitwise_settings>;

} // namespace bb::avm2
