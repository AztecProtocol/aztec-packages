// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_bitwise_integral_tag_length ///////////////////

class lookup_bitwise_integral_tag_length_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_BITWISE_INTEGRAL_TAG_LENGTH";
    static constexpr std::string_view RELATION_NAME = "bitwise";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::bitwise_start;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_integral_tag;
    static constexpr Column COUNTS = Column::lookup_bitwise_integral_tag_length_counts;
    static constexpr Column INVERSES = Column::lookup_bitwise_integral_tag_length_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { ColumnAndShifts::bitwise_tag,
                                                                                    ColumnAndShifts::bitwise_ctr };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::precomputed_clk, ColumnAndShifts::precomputed_integral_tag_length
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::bitwise_start) == 1 ||
                in.get(ColumnAndShifts::precomputed_sel_integral_tag) == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.get(ColumnAndShifts::bitwise_start));
        const auto is_table_entry = View(in.get(ColumnAndShifts::precomputed_sel_integral_tag));
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::lookup_bitwise_integral_tag_length_inv),
                                     in.get(ColumnAndShifts::lookup_bitwise_integral_tag_length_counts),
                                     in.get(ColumnAndShifts::bitwise_start),
                                     in.get(ColumnAndShifts::precomputed_sel_integral_tag),
                                     in.get(ColumnAndShifts::bitwise_tag),
                                     in.get(ColumnAndShifts::bitwise_ctr),
                                     in.get(ColumnAndShifts::precomputed_clk),
                                     in.get(ColumnAndShifts::precomputed_integral_tag_length));
    }
};

template <typename FF_>
class lookup_bitwise_integral_tag_length_relation
    : public GenericLookupRelation<lookup_bitwise_integral_tag_length_settings, FF_> {
  public:
    using Settings = lookup_bitwise_integral_tag_length_settings;
    static constexpr std::string_view NAME = lookup_bitwise_integral_tag_length_settings::NAME;
    static constexpr std::string_view RELATION_NAME = lookup_bitwise_integral_tag_length_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_bitwise_integral_tag_length_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// lookup_bitwise_byte_operations ///////////////////

class lookup_bitwise_byte_operations_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_BITWISE_BYTE_OPERATIONS";
    static constexpr std::string_view RELATION_NAME = "bitwise";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::bitwise_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_bitwise;
    static constexpr Column COUNTS = Column::lookup_bitwise_byte_operations_counts;
    static constexpr Column INVERSES = Column::lookup_bitwise_byte_operations_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { ColumnAndShifts::bitwise_op_id,
                                                                                    ColumnAndShifts::bitwise_ia_byte,
                                                                                    ColumnAndShifts::bitwise_ib_byte,
                                                                                    ColumnAndShifts::bitwise_ic_byte };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::precomputed_bitwise_op_id,
        ColumnAndShifts::precomputed_bitwise_input_a,
        ColumnAndShifts::precomputed_bitwise_input_b,
        ColumnAndShifts::precomputed_bitwise_output
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get(ColumnAndShifts::bitwise_sel) == 1 || in.get(ColumnAndShifts::precomputed_sel_bitwise) == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.get(ColumnAndShifts::bitwise_sel));
        const auto is_table_entry = View(in.get(ColumnAndShifts::precomputed_sel_bitwise));
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in.get(ColumnAndShifts::lookup_bitwise_byte_operations_inv),
                                     in.get(ColumnAndShifts::lookup_bitwise_byte_operations_counts),
                                     in.get(ColumnAndShifts::bitwise_sel),
                                     in.get(ColumnAndShifts::precomputed_sel_bitwise),
                                     in.get(ColumnAndShifts::bitwise_op_id),
                                     in.get(ColumnAndShifts::bitwise_ia_byte),
                                     in.get(ColumnAndShifts::bitwise_ib_byte),
                                     in.get(ColumnAndShifts::bitwise_ic_byte),
                                     in.get(ColumnAndShifts::precomputed_bitwise_op_id),
                                     in.get(ColumnAndShifts::precomputed_bitwise_input_a),
                                     in.get(ColumnAndShifts::precomputed_bitwise_input_b),
                                     in.get(ColumnAndShifts::precomputed_bitwise_output));
    }
};

template <typename FF_>
class lookup_bitwise_byte_operations_relation
    : public GenericLookupRelation<lookup_bitwise_byte_operations_settings, FF_> {
  public:
    using Settings = lookup_bitwise_byte_operations_settings;
    static constexpr std::string_view NAME = lookup_bitwise_byte_operations_settings::NAME;
    static constexpr std::string_view RELATION_NAME = lookup_bitwise_byte_operations_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_bitwise_byte_operations_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

} // namespace bb::avm2
