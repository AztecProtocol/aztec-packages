// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// perm_merkle_check_perm_merkle_poseidon2 ///////////////////

class perm_merkle_check_perm_merkle_poseidon2_settings {
  public:
    static constexpr std::string_view NAME = "PERM_MERKLE_CHECK_PERM_MERKLE_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "merkle_check";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 3;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::merkle_check_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_sel;
    static constexpr Column INVERSES = Column::perm_merkle_check_perm_merkle_poseidon2_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._merkle_check_sel() == 1 || in._poseidon2_hash_sel() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in._perm_merkle_check_perm_merkle_poseidon2_inv(),
                                     in._merkle_check_sel(),
                                     in._merkle_check_sel(),
                                     in._poseidon2_hash_sel(),
                                     in._merkle_check_left_hash(),
                                     in._merkle_check_right_hash(),
                                     in._merkle_check_output_hash(),
                                     in._poseidon2_hash_input_0(),
                                     in._poseidon2_hash_input_1(),
                                     in._poseidon2_hash_output());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in._perm_merkle_check_perm_merkle_poseidon2_inv(),
                                     in._merkle_check_sel(),
                                     in._merkle_check_sel(),
                                     in._poseidon2_hash_sel(),
                                     in._merkle_check_left_hash(),
                                     in._merkle_check_right_hash(),
                                     in._merkle_check_output_hash(),
                                     in._poseidon2_hash_input_0(),
                                     in._poseidon2_hash_input_1(),
                                     in._poseidon2_hash_output());
    }
};

template <typename FF_>
class perm_merkle_check_perm_merkle_poseidon2_relation
    : public GenericPermutationRelation<perm_merkle_check_perm_merkle_poseidon2_settings, FF_> {
  public:
    using Settings = perm_merkle_check_perm_merkle_poseidon2_settings;
    static constexpr std::string_view NAME = perm_merkle_check_perm_merkle_poseidon2_settings::NAME;
    static constexpr std::string_view RELATION_NAME = perm_merkle_check_perm_merkle_poseidon2_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.perm_merkle_check_perm_merkle_poseidon2_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

} // namespace bb::avm2
