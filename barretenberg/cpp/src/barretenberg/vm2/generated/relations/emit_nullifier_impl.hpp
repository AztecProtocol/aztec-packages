// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/emit_nullifier.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void emit_nullifierImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                         const AllEntities& in,
                                         [[maybe_unused]] const RelationParameters<FF_>&,
                                         [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    PROFILE_THIS_NAME("accumulate/emit_nullifier");

    const auto constants_MAX_NULLIFIERS_PER_TX = FF(64);
    const auto execution_REMAINING_NULLIFIER_WRITES =
        (constants_MAX_NULLIFIERS_PER_TX - in.get(C::execution_prev_num_nullifiers_emitted));
    const auto execution_SUCCESSFUL_WRITE =
        in.get(C::execution_sel_write_nullifier) * (FF(1) - in.get(C::execution_sel_opcode_error));

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_sel_reached_max_nullifiers) * (FF(1) - in.get(C::execution_sel_reached_max_nullifiers));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    { // MAX_NULLIFIER_WRITES_REACHED
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_sel_execute_emit_nullifier) *
            ((execution_REMAINING_NULLIFIER_WRITES * (in.get(C::execution_sel_reached_max_nullifiers) *
                                                          (FF(1) - in.get(C::execution_remaining_nullifiers_inv)) +
                                                      in.get(C::execution_remaining_nullifiers_inv)) -
              FF(1)) +
             in.get(C::execution_sel_reached_max_nullifiers));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    { // VALIDATION_ERROR_DISABLE_WRITE
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::execution_sel_execute_emit_nullifier) *
            ((FF(1) - in.get(C::execution_sel_reached_max_nullifiers)) * (FF(1) - in.get(C::execution_is_static)) -
             in.get(C::execution_sel_write_nullifier));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    { // OPCODE_ERROR_IF_VALIDATION_ERROR
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_nullifier) *
                   (FF(1) - in.get(C::execution_sel_write_nullifier)) * (FF(1) - in.get(C::execution_sel_opcode_error));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    { // EMIT_NULLIFIER_TREE_ROOT_NOT_CHANGED
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_nullifier) * in.get(C::execution_sel_opcode_error) *
                   (in.get(C::execution_prev_nullifier_tree_root) - in.get(C::execution_nullifier_tree_root));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    { // EMIT_NULLIFIER_TREE_SIZE_INCREASE
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_nullifier) *
                   ((in.get(C::execution_prev_nullifier_tree_size) + execution_SUCCESSFUL_WRITE) -
                    in.get(C::execution_nullifier_tree_size));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    { // EMIT_NULLIFIER_NUM_NULLIFIERS_EMITTED_INCREASE
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = in.get(C::execution_sel_execute_emit_nullifier) *
                   ((in.get(C::execution_prev_num_nullifiers_emitted) + execution_SUCCESSFUL_WRITE) -
                    in.get(C::execution_num_nullifiers_emitted));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
