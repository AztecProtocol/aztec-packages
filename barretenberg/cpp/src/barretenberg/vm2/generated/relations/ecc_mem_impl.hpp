// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/ecc_mem.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void ecc_memImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                  const AllEntities& in,
                                  [[maybe_unused]] const RelationParameters<FF_>&,
                                  [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    BB_BENCH_TRACY_NAME("accumulate/ecc_mem");

    const auto constants_AVM_HIGHEST_MEM_ADDRESS = FF(4294967295UL);
    const auto ecc_add_mem_P_X3 = in.get(C::ecc_add_mem_p_x) * in.get(C::ecc_add_mem_p_x) * in.get(C::ecc_add_mem_p_x);
    const auto ecc_add_mem_P_Y2 = in.get(C::ecc_add_mem_p_y) * in.get(C::ecc_add_mem_p_y);
    const auto ecc_add_mem_Q_X3 = in.get(C::ecc_add_mem_q_x) * in.get(C::ecc_add_mem_q_x) * in.get(C::ecc_add_mem_q_x);
    const auto ecc_add_mem_Q_Y2 = in.get(C::ecc_add_mem_q_y) * in.get(C::ecc_add_mem_q_y);

    { // WRITE_INCR_DST_ADDR
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_add_mem_dst_addr_1_) -
                    in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_dst_addr_0_) + FF(1)));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_add_mem_dst_addr_2_) -
                    in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_dst_addr_0_) + FF(2)));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::ecc_add_mem_sel_dst_out_of_range_err) * (FF(1) - in.get(C::ecc_add_mem_sel_dst_out_of_range_err));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_max_mem_addr) - constants_AVM_HIGHEST_MEM_ADDRESS);
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::ecc_add_mem_sel_p_not_on_curve_err) * (FF(1) - in.get(C::ecc_add_mem_sel_p_not_on_curve_err));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp =
            in.get(C::ecc_add_mem_sel_q_not_on_curve_err) * (FF(1) - in.get(C::ecc_add_mem_sel_q_not_on_curve_err));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    { // P_CURVE_EQN
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_add_mem_p_is_on_curve_eqn) - in.get(C::ecc_add_mem_sel) *
                                                                   (ecc_add_mem_P_Y2 - (ecc_add_mem_P_X3 - FF(17))) *
                                                                   (FF(1) - in.get(C::ecc_add_mem_p_is_inf)));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    { // P_ON_CURVE_CHECK
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_p_is_on_curve_eqn) *
                                                     ((FF(1) - in.get(C::ecc_add_mem_sel_p_not_on_curve_err)) *
                                                          (FF(1) - in.get(C::ecc_add_mem_p_is_on_curve_eqn_inv)) +
                                                      in.get(C::ecc_add_mem_p_is_on_curve_eqn_inv)) -
                                                 in.get(C::ecc_add_mem_sel_p_not_on_curve_err));
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
    { // Q_CURVE_EQN
        using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_add_mem_q_is_on_curve_eqn) - in.get(C::ecc_add_mem_sel) *
                                                                   (ecc_add_mem_Q_Y2 - (ecc_add_mem_Q_X3 - FF(17))) *
                                                                   (FF(1) - in.get(C::ecc_add_mem_q_is_inf)));
        tmp *= scaling_factor;
        std::get<8>(evals) += typename Accumulator::View(tmp);
    }
    { // Q_ON_CURVE_CHECK
        using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
        auto tmp = in.get(C::ecc_add_mem_sel) * (in.get(C::ecc_add_mem_q_is_on_curve_eqn) *
                                                     ((FF(1) - in.get(C::ecc_add_mem_sel_q_not_on_curve_err)) *
                                                          (FF(1) - in.get(C::ecc_add_mem_q_is_on_curve_eqn_inv)) +
                                                      in.get(C::ecc_add_mem_q_is_on_curve_eqn_inv)) -
                                                 in.get(C::ecc_add_mem_sel_q_not_on_curve_err));
        tmp *= scaling_factor;
        std::get<9>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_add_mem_err) - (FF(1) - (FF(1) - in.get(C::ecc_add_mem_sel_dst_out_of_range_err)) *
                                                              (FF(1) - in.get(C::ecc_add_mem_sel_p_not_on_curve_err)) *
                                                              (FF(1) - in.get(C::ecc_add_mem_sel_q_not_on_curve_err))));
        tmp *= scaling_factor;
        std::get<10>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
        auto tmp = (in.get(C::ecc_add_mem_sel_should_exec) -
                    in.get(C::ecc_add_mem_sel) * (FF(1) - in.get(C::ecc_add_mem_err)));
        tmp *= scaling_factor;
        std::get<11>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
