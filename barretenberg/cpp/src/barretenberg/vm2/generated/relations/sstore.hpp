// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class sstoreImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 4> SUBRELATION_PARTIAL_LENGTHS = { 3, 5, 4, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_execute_sstore)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX = FF(63);
        const auto constants_AVM_WRITTEN_PUBLIC_DATA_SLOTS_TREE_INITIAL_SIZE = FF(1);
        const auto execution_REMAINING_DATA_WRITES = ((constants_MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX +
                                                       constants_AVM_WRITTEN_PUBLIC_DATA_SLOTS_TREE_INITIAL_SIZE) -
                                                      in.get(C::execution_prev_written_public_data_slots_tree_size));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_max_data_writes_reached) * (FF(1) - in.get(C::execution_max_data_writes_reached));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        { // SSTORE_MAX_DATA_WRITES_REACHED
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::execution_sel_execute_sstore) *
                ((execution_REMAINING_DATA_WRITES * (in.get(C::execution_max_data_writes_reached) *
                                                         (FF(1) - in.get(C::execution_remaining_data_writes_inv)) +
                                                     in.get(C::execution_remaining_data_writes_inv)) -
                  FF(1)) +
                 in.get(C::execution_max_data_writes_reached));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        { // SSTORE_ERROR_TOO_MANY_WRITES
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_sstore) *
                       (in.get(C::execution_max_data_writes_reached) * in.get(C::execution_dynamic_da_gas_factor) -
                        in.get(C::execution_sel_opcode_error));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::execution_sel_execute_sstore) *
                       ((FF(1) - in.get(C::execution_sel_opcode_error)) - in.get(C::execution_sel_write_public_data));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class sstore : public Relation<sstoreImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "sstore";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "SSTORE_MAX_DATA_WRITES_REACHED";
        case 2:
            return "SSTORE_ERROR_TOO_MANY_WRITES";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_SSTORE_MAX_DATA_WRITES_REACHED = 1;
    static constexpr size_t SR_SSTORE_ERROR_TOO_MANY_WRITES = 2;
};

} // namespace bb::avm2
