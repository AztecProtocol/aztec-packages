// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class written_public_data_slots_tree_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 13> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 5, 3, 5 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::written_public_data_slots_tree_check_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_AVM_WRITTEN_PUBLIC_DATA_SLOTS_TREE_HEIGHT = FF(6);
        const auto constants_GENERATOR_INDEX__PUBLIC_LEAF_INDEX = FF(23);
        const auto written_public_data_slots_tree_check_EXISTS =
            (FF(1) - in.get(C::written_public_data_slots_tree_check_leaf_not_exists));
        const auto written_public_data_slots_tree_check_SLOT_LOW_LEAF_SLOT_DIFF =
            (in.get(C::written_public_data_slots_tree_check_leaf_slot) -
             in.get(C::written_public_data_slots_tree_check_low_leaf_slot));
        const auto written_public_data_slots_tree_check_NEXT_SLOT_IS_ZERO =
            (FF(1) - in.get(C::written_public_data_slots_tree_check_next_slot_is_nonzero));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_sel) *
                       (FF(1) - in.get(C::written_public_data_slots_tree_check_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_write) *
                       (FF(1) - in.get(C::written_public_data_slots_tree_check_write));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_leaf_not_exists) *
                       (FF(1) - in.get(C::written_public_data_slots_tree_check_leaf_not_exists));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_sel) *
                       (constants_GENERATOR_INDEX__PUBLIC_LEAF_INDEX -
                        in.get(C::written_public_data_slots_tree_check_siloing_separator));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (in.get(C::written_public_data_slots_tree_check_should_insert) -
                        in.get(C::written_public_data_slots_tree_check_write) *
                            in.get(C::written_public_data_slots_tree_check_leaf_not_exists));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_write) *
                       written_public_data_slots_tree_check_EXISTS *
                       (in.get(C::written_public_data_slots_tree_check_root) -
                        in.get(C::written_public_data_slots_tree_check_write_root));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (in.get(C::written_public_data_slots_tree_check_tree_size_after_write) -
                        (in.get(C::written_public_data_slots_tree_check_tree_size_before_write) +
                         in.get(C::written_public_data_slots_tree_check_should_insert)));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_should_insert) *
                       (in.get(C::written_public_data_slots_tree_check_tree_size_before_write) -
                        in.get(C::written_public_data_slots_tree_check_updated_low_leaf_next_index));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_should_insert) *
                       (in.get(C::written_public_data_slots_tree_check_leaf_slot) -
                        in.get(C::written_public_data_slots_tree_check_updated_low_leaf_next_slot));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_sel) *
                       (constants_AVM_WRITTEN_PUBLIC_DATA_SLOTS_TREE_HEIGHT -
                        in.get(C::written_public_data_slots_tree_check_tree_height));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // EXISTS_CHECK
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::written_public_data_slots_tree_check_sel) *
                ((written_public_data_slots_tree_check_SLOT_LOW_LEAF_SLOT_DIFF *
                      (written_public_data_slots_tree_check_EXISTS *
                           (FF(1) - in.get(C::written_public_data_slots_tree_check_slot_low_leaf_slot_diff_inv)) +
                       in.get(C::written_public_data_slots_tree_check_slot_low_leaf_slot_diff_inv)) -
                  FF(1)) +
                 written_public_data_slots_tree_check_EXISTS);
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_next_slot_is_nonzero) *
                       (FF(1) - in.get(C::written_public_data_slots_tree_check_next_slot_is_nonzero));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        { // NEXT_SLOT_IS_ZERO_CHECK
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = in.get(C::written_public_data_slots_tree_check_leaf_not_exists) *
                       ((in.get(C::written_public_data_slots_tree_check_low_leaf_next_slot) *
                             (written_public_data_slots_tree_check_NEXT_SLOT_IS_ZERO *
                                  (FF(1) - in.get(C::written_public_data_slots_tree_check_next_slot_inv)) +
                              in.get(C::written_public_data_slots_tree_check_next_slot_inv)) -
                         FF(1)) +
                        written_public_data_slots_tree_check_NEXT_SLOT_IS_ZERO);
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF>
class written_public_data_slots_tree_check : public Relation<written_public_data_slots_tree_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "written_public_data_slots_tree_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 10:
            return "EXISTS_CHECK";
        case 12:
            return "NEXT_SLOT_IS_ZERO_CHECK";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_EXISTS_CHECK = 10;
    static constexpr size_t SR_NEXT_SLOT_IS_ZERO_CHECK = 12;
};

} // namespace bb::avm2
