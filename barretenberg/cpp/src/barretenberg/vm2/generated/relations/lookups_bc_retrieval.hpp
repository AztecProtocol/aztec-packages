// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_bc_retrieval_class_id_derivation ///////////////////

class lookup_bc_retrieval_class_id_derivation_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_BC_RETRIEVAL_CLASS_ID_DERIVATION";
    static constexpr std::string_view RELATION_NAME = "bc_retrieval";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::bc_retrieval_sel;
    static constexpr Column DST_SELECTOR = Column::class_id_derivation_sel;
    static constexpr Column COUNTS = Column::lookup_bc_retrieval_class_id_derivation_counts;
    static constexpr Column INVERSES = Column::lookup_bc_retrieval_class_id_derivation_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        Column::bc_retrieval_class_id,
        Column::bc_retrieval_artifact_hash,
        Column::bc_retrieval_private_function_root,
        Column::bc_retrieval_public_bytecode_commitment
    };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        Column::class_id_derivation_class_id,
        Column::class_id_derivation_artifact_hash,
        Column::class_id_derivation_private_function_root,
        Column::class_id_derivation_public_bytecode_commitment
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._bc_retrieval_sel() == 1 || in._class_id_derivation_sel() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._bc_retrieval_sel());
        const auto is_table_entry = View(in._class_id_derivation_sel());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_bc_retrieval_class_id_derivation_inv(),
                                     in._lookup_bc_retrieval_class_id_derivation_counts(),
                                     in._bc_retrieval_sel(),
                                     in._class_id_derivation_sel(),
                                     in._bc_retrieval_class_id(),
                                     in._bc_retrieval_artifact_hash(),
                                     in._bc_retrieval_private_function_root(),
                                     in._bc_retrieval_public_bytecode_commitment(),
                                     in._class_id_derivation_class_id(),
                                     in._class_id_derivation_artifact_hash(),
                                     in._class_id_derivation_private_function_root(),
                                     in._class_id_derivation_public_bytecode_commitment());
    }
};

template <typename FF_>
class lookup_bc_retrieval_class_id_derivation_relation
    : public GenericLookupRelation<lookup_bc_retrieval_class_id_derivation_settings, FF_> {
  public:
    using Settings = lookup_bc_retrieval_class_id_derivation_settings;
    static constexpr std::string_view NAME = lookup_bc_retrieval_class_id_derivation_settings::NAME;
    static constexpr std::string_view RELATION_NAME = lookup_bc_retrieval_class_id_derivation_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_bc_retrieval_class_id_derivation_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// lookup_bc_retrieval_bytecode_hash_is_correct ///////////////////

class lookup_bc_retrieval_bytecode_hash_is_correct_settings {
  public:
    static constexpr std::string_view NAME = "LOOKUP_BC_RETRIEVAL_BYTECODE_HASH_IS_CORRECT";
    static constexpr std::string_view RELATION_NAME = "bc_retrieval";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::bc_retrieval_sel;
    static constexpr Column DST_SELECTOR = Column::bc_hashing_latch;
    static constexpr Column COUNTS = Column::lookup_bc_retrieval_bytecode_hash_is_correct_counts;
    static constexpr Column INVERSES = Column::lookup_bc_retrieval_bytecode_hash_is_correct_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        Column::bc_retrieval_bytecode_id, Column::bc_retrieval_public_bytecode_commitment
    };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::bc_hashing_bytecode_id,
                                                                           Column::bc_hashing_output_hash };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._bc_retrieval_sel() == 1 || in._bc_hashing_latch() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._bc_retrieval_sel());
        const auto is_table_entry = View(in._bc_hashing_latch());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_bc_retrieval_bytecode_hash_is_correct_inv(),
                                     in._lookup_bc_retrieval_bytecode_hash_is_correct_counts(),
                                     in._bc_retrieval_sel(),
                                     in._bc_hashing_latch(),
                                     in._bc_retrieval_bytecode_id(),
                                     in._bc_retrieval_public_bytecode_commitment(),
                                     in._bc_hashing_bytecode_id(),
                                     in._bc_hashing_output_hash());
    }
};

template <typename FF_>
class lookup_bc_retrieval_bytecode_hash_is_correct_relation
    : public GenericLookupRelation<lookup_bc_retrieval_bytecode_hash_is_correct_settings, FF_> {
  public:
    using Settings = lookup_bc_retrieval_bytecode_hash_is_correct_settings;
    static constexpr std::string_view NAME = lookup_bc_retrieval_bytecode_hash_is_correct_settings::NAME;
    static constexpr std::string_view RELATION_NAME =
        lookup_bc_retrieval_bytecode_hash_is_correct_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.lookup_bc_retrieval_bytecode_hash_is_correct_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

} // namespace bb::avm2
