// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class nullifier_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 12> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3, 5 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;
        return (in.get(C::nullifier_check_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_NULLIFIER_TREE_HEIGHT = FF(40);
        const auto nullifier_check_NULLIFIER_LOW_LEAF_NULLIFIER_DIFF =
            (in.get(C::nullifier_check_nullifier) - in.get(C::nullifier_check_low_leaf_nullifier));
        const auto nullifier_check_NEXT_NULLIFIER_IS_ZERO =
            (FF(1) - in.get(C::nullifier_check_next_nullifier_is_nonzero));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_sel) * (FF(1) - in.get(C::nullifier_check_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_exists) * (FF(1) - in.get(C::nullifier_check_exists));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_write) * (FF(1) - in.get(C::nullifier_check_write));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // WRITE_EXISTS_NAND
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_write) * in.get(C::nullifier_check_exists);
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_write) * (in.get(C::nullifier_check_tree_size_before_write) -
                                                           in.get(C::nullifier_check_updated_low_leaf_next_index));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_write) * (in.get(C::nullifier_check_nullifier) -
                                                           in.get(C::nullifier_check_updated_low_leaf_next_nullifier));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_sel) *
                       (in.get(C::nullifier_check_tree_height) - constants_NULLIFIER_TREE_HEIGHT);
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // EXISTS_CHECK
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_sel) *
                       ((nullifier_check_NULLIFIER_LOW_LEAF_NULLIFIER_DIFF *
                             (in.get(C::nullifier_check_exists) *
                                  (FF(1) - in.get(C::nullifier_check_nullifier_low_leaf_nullifier_diff_inv)) +
                              in.get(C::nullifier_check_nullifier_low_leaf_nullifier_diff_inv)) -
                         FF(1)) +
                        in.get(C::nullifier_check_exists));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_sel) * (FF(1) - in.get(C::nullifier_check_one));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_sel) *
                       ((FF(1) - in.get(C::nullifier_check_exists)) - in.get(C::nullifier_check_leaf_not_exists));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_next_nullifier_is_nonzero) *
                       (FF(1) - in.get(C::nullifier_check_next_nullifier_is_nonzero));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        { // NEXT_NULLIFIER_IS_ZERO_CHECK
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = in.get(C::nullifier_check_leaf_not_exists) *
                       ((in.get(C::nullifier_check_low_leaf_next_nullifier) *
                             (nullifier_check_NEXT_NULLIFIER_IS_ZERO *
                                  (FF(1) - in.get(C::nullifier_check_next_nullifier_inv)) +
                              in.get(C::nullifier_check_next_nullifier_inv)) -
                         FF(1)) +
                        nullifier_check_NEXT_NULLIFIER_IS_ZERO);
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class nullifier_check : public Relation<nullifier_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "nullifier_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 3:
            return "WRITE_EXISTS_NAND";
        case 7:
            return "EXISTS_CHECK";
        case 11:
            return "NEXT_NULLIFIER_IS_ZERO_CHECK";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_WRITE_EXISTS_NAND = 3;
    static constexpr size_t SR_EXISTS_CHECK = 7;
    static constexpr size_t SR_NEXT_NULLIFIER_IS_ZERO_CHECK = 11;
};

} // namespace bb::avm2
