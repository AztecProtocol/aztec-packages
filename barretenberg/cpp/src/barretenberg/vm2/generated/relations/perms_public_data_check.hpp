// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// perm_public_data_check_squashing ///////////////////

struct perm_public_data_check_squashing_settings_ {
    static constexpr std::string_view NAME = "PERM_PUBLIC_DATA_CHECK_SQUASHING";
    static constexpr std::string_view RELATION_NAME = "public_data_check";
    static constexpr size_t COLUMNS_PER_SET = 5;
    static constexpr Column SRC_SELECTOR = Column::public_data_check_nondiscaded_write;
    static constexpr Column DST_SELECTOR = Column::public_data_squash_sel;
    static constexpr Column INVERSES = Column::perm_public_data_check_squashing_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::public_data_check_leaf_slot,
        ColumnAndShifts::public_data_check_clk,
        ColumnAndShifts::public_data_check_should_write_to_public_inputs,
        ColumnAndShifts::public_data_check_value,
        ColumnAndShifts::public_data_check_final_value
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::public_data_squash_leaf_slot,
        ColumnAndShifts::public_data_squash_clk,
        ColumnAndShifts::public_data_squash_write_to_public_inputs,
        ColumnAndShifts::public_data_squash_value,
        ColumnAndShifts::public_data_squash_final_value
    };
};

using perm_public_data_check_squashing_settings = permutation_settings<perm_public_data_check_squashing_settings_>;
template <typename FF_>
using perm_public_data_check_squashing_relation =
    permutation_relation_base<FF_, perm_public_data_check_squashing_settings>;

} // namespace bb::avm2
