// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class internal_callImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 10> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 6, 3, 3, 6, 3, 6, 5 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class internal_call : public Relation<internal_callImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "internal_call";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "CALL_ID_STARTS_ONE";
        case 1:
            return "NEW_CALL_ID_ON_CALL";
        case 2:
            return "RESTORE_INTERNAL_ID_ON_RETURN";
        case 3:
            return "DEFAULT_PROPAGATE_CALL_ID";
        case 4:
            return "RET_ID_STARTS_ZERO";
        case 5:
            return "NEW_RETURN_ID_ON_CALL";
        case 6:
            return "DEFAULT_PROPAGATE_RET_ID";
        case 7:
            return "NEXT_CALL_ID_STARTS_TWO";
        case 8:
            return "INCR_NEXT_INT_CALL_ID";
        case 9:
            return "INTERNAL_RET_ERROR";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_CALL_ID_STARTS_ONE = 0;
    static constexpr size_t SR_NEW_CALL_ID_ON_CALL = 1;
    static constexpr size_t SR_RESTORE_INTERNAL_ID_ON_RETURN = 2;
    static constexpr size_t SR_DEFAULT_PROPAGATE_CALL_ID = 3;
    static constexpr size_t SR_RET_ID_STARTS_ZERO = 4;
    static constexpr size_t SR_NEW_RETURN_ID_ON_CALL = 5;
    static constexpr size_t SR_DEFAULT_PROPAGATE_RET_ID = 6;
    static constexpr size_t SR_NEXT_CALL_ID_STARTS_TWO = 7;
    static constexpr size_t SR_INCR_NEXT_INT_CALL_ID = 8;
    static constexpr size_t SR_INTERNAL_RET_ERROR = 9;
};

} // namespace bb::avm2
