// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/common/expression.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// lookup_written_public_data_slots_tree_check_silo_poseidon2 ///////////////////

struct lookup_written_public_data_slots_tree_check_silo_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_SILO_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 5;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::poseidon2_hash_end);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_siloing_separator),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_address),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_leaf_slot));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::poseidon2_hash_start),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_0),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_1),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_2),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_output));
    static constexpr Column COUNTS = Column::lookup_written_public_data_slots_tree_check_silo_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_written_public_data_slots_tree_check_silo_poseidon2_inv;
};

using lookup_written_public_data_slots_tree_check_silo_poseidon2_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_silo_poseidon2_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_silo_poseidon2_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_silo_poseidon2_settings>;

/////////////////// lookup_written_public_data_slots_tree_check_low_leaf_poseidon2 ///////////////////

struct lookup_written_public_data_slots_tree_check_low_leaf_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_LOW_LEAF_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 5;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::poseidon2_hash_end);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_next_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_next_index),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_hash));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::poseidon2_hash_start),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_0),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_1),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_2),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_output));
    static constexpr Column COUNTS = Column::lookup_written_public_data_slots_tree_check_low_leaf_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_written_public_data_slots_tree_check_low_leaf_poseidon2_inv;
};

using lookup_written_public_data_slots_tree_check_low_leaf_poseidon2_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_low_leaf_poseidon2_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_low_leaf_poseidon2_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_low_leaf_poseidon2_settings>;

/////////////////// lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2 ///////////////////

struct lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_UPDATED_LOW_LEAF_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 5;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_should_insert);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::poseidon2_hash_end);
    static constexpr auto SRC_EXPRS = std::make_tuple(
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel),
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_slot),
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_updated_low_leaf_next_slot),
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_updated_low_leaf_next_index),
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_updated_low_leaf_hash));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::poseidon2_hash_start),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_0),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_1),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_2),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_output));
    static constexpr Column COUNTS =
        Column::lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2_counts;
    static constexpr Column INVERSES =
        Column::lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2_inv;
};

using lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_updated_low_leaf_poseidon2_settings>;

/////////////////// lookup_written_public_data_slots_tree_check_low_leaf_merkle_check ///////////////////

struct lookup_written_public_data_slots_tree_check_low_leaf_merkle_check_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_LOW_LEAF_MERKLE_CHECK";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 7;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::merkle_check_start);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_should_insert),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_hash),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_updated_low_leaf_hash),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_index),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_tree_height),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_root),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_intermediate_root));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::merkle_check_write),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_read_node),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_write_node),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_index),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_path_len),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_read_root),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_write_root));
    static constexpr Column COUNTS = Column::lookup_written_public_data_slots_tree_check_low_leaf_merkle_check_counts;
    static constexpr Column INVERSES = Column::lookup_written_public_data_slots_tree_check_low_leaf_merkle_check_inv;
};

using lookup_written_public_data_slots_tree_check_low_leaf_merkle_check_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_low_leaf_merkle_check_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_low_leaf_merkle_check_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_low_leaf_merkle_check_settings>;

/////////////////// lookup_written_public_data_slots_tree_check_low_leaf_slot_validation ///////////////////

struct lookup_written_public_data_slots_tree_check_low_leaf_slot_validation_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_LOW_LEAF_SLOT_VALIDATION";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_leaf_not_exists);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::ff_gt_sel_gt);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_leaf_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::ff_gt_a),
                                                      ColumnExpression(ColumnAndShifts::ff_gt_b),
                                                      ColumnExpression(ColumnAndShifts::ff_gt_result));
    static constexpr Column COUNTS =
        Column::lookup_written_public_data_slots_tree_check_low_leaf_slot_validation_counts;
    static constexpr Column INVERSES = Column::lookup_written_public_data_slots_tree_check_low_leaf_slot_validation_inv;
};

using lookup_written_public_data_slots_tree_check_low_leaf_slot_validation_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_low_leaf_slot_validation_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_low_leaf_slot_validation_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_low_leaf_slot_validation_settings>;

/////////////////// lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation ///////////////////

struct lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation_settings_ {
    static constexpr std::string_view NAME =
        "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_LOW_LEAF_NEXT_SLOT_VALIDATION";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_next_slot_is_nonzero);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::ff_gt_sel_gt);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_next_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_leaf_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::ff_gt_a),
                                                      ColumnExpression(ColumnAndShifts::ff_gt_b),
                                                      ColumnExpression(ColumnAndShifts::ff_gt_result));
    static constexpr Column COUNTS =
        Column::lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation_counts;
    static constexpr Column INVERSES =
        Column::lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation_inv;
};

using lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_low_leaf_next_slot_validation_settings>;

/////////////////// lookup_written_public_data_slots_tree_check_new_leaf_poseidon2 ///////////////////

struct lookup_written_public_data_slots_tree_check_new_leaf_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_NEW_LEAF_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 5;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_should_insert);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::poseidon2_hash_end);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_leaf_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_next_slot),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_low_leaf_next_index),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_new_leaf_hash));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::poseidon2_hash_start),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_0),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_1),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_input_2),
                                                      ColumnExpression(ColumnAndShifts::poseidon2_hash_output));
    static constexpr Column COUNTS = Column::lookup_written_public_data_slots_tree_check_new_leaf_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_written_public_data_slots_tree_check_new_leaf_poseidon2_inv;
};

using lookup_written_public_data_slots_tree_check_new_leaf_poseidon2_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_new_leaf_poseidon2_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_new_leaf_poseidon2_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_new_leaf_poseidon2_settings>;

/////////////////// lookup_written_public_data_slots_tree_check_new_leaf_merkle_check ///////////////////

struct lookup_written_public_data_slots_tree_check_new_leaf_merkle_check_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_WRITTEN_PUBLIC_DATA_SLOTS_TREE_CHECK_NEW_LEAF_MERKLE_CHECK";
    static constexpr std::string_view RELATION_NAME = "written_public_data_slots_tree_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 7;
    static constexpr auto SRC_SELECTOR_EXPR =
        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_should_insert);
    static constexpr auto DST_SELECTOR_EXPR = ColumnExpression(ColumnAndShifts::merkle_check_start);
    static constexpr auto SRC_EXPRS =
        std::make_tuple(ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_sel),
                        ColumnExpression(ColumnAndShifts::precomputed_zero),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_new_leaf_hash),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_tree_size_before_write),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_tree_height),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_intermediate_root),
                        ColumnExpression(ColumnAndShifts::written_public_data_slots_tree_check_write_root));
    static constexpr auto DST_EXPRS = std::make_tuple(ColumnExpression(ColumnAndShifts::merkle_check_write),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_read_node),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_write_node),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_index),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_path_len),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_read_root),
                                                      ColumnExpression(ColumnAndShifts::merkle_check_write_root));
    static constexpr Column COUNTS = Column::lookup_written_public_data_slots_tree_check_new_leaf_merkle_check_counts;
    static constexpr Column INVERSES = Column::lookup_written_public_data_slots_tree_check_new_leaf_merkle_check_inv;
};

using lookup_written_public_data_slots_tree_check_new_leaf_merkle_check_settings =
    lookup_settings<lookup_written_public_data_slots_tree_check_new_leaf_merkle_check_settings_>;
template <typename FF_>
using lookup_written_public_data_slots_tree_check_new_leaf_merkle_check_relation =
    lookup_relation_base<FF_, lookup_written_public_data_slots_tree_check_new_leaf_merkle_check_settings>;

} // namespace bb::avm2
