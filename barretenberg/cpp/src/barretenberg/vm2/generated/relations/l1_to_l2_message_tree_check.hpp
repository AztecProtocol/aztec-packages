// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class l1_to_l2_message_tree_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 3> SUBRELATION_PARTIAL_LENGTHS = { 3, 5, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::l1_to_l2_message_tree_check_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        const auto constants_L1_TO_L2_MSG_TREE_HEIGHT = FF(39);
        const auto l1_to_l2_message_tree_check_LEAF_VALUE_MSG_HASH_DIFF =
            (in.get(C::l1_to_l2_message_tree_check_leaf_value) - in.get(C::l1_to_l2_message_tree_check_msg_hash));

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::l1_to_l2_message_tree_check_sel) * (FF(1) - in.get(C::l1_to_l2_message_tree_check_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::l1_to_l2_message_tree_check_sel) *
                       ((l1_to_l2_message_tree_check_LEAF_VALUE_MSG_HASH_DIFF *
                             (in.get(C::l1_to_l2_message_tree_check_exists) *
                                  (FF(1) - in.get(C::l1_to_l2_message_tree_check_leaf_value_msg_hash_diff_inv)) +
                              in.get(C::l1_to_l2_message_tree_check_leaf_value_msg_hash_diff_inv)) -
                         FF(1)) +
                        in.get(C::l1_to_l2_message_tree_check_exists));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::l1_to_l2_message_tree_check_sel) *
                       (constants_L1_TO_L2_MSG_TREE_HEIGHT -
                        in.get(C::l1_to_l2_message_tree_check_l1_to_l2_message_tree_height));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class l1_to_l2_message_tree_check : public Relation<l1_to_l2_message_tree_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "l1_to_l2_message_tree_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {}
        return std::to_string(index);
    }
};

} // namespace bb::avm2
