// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/calldata.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void calldataImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                   const AllEntities& in,
                                   [[maybe_unused]] const RelationParameters<FF_>&,
                                   [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    PROFILE_THIS_NAME("accumulate/calldata");

    const auto calldata_FIRST_OR_LAST_CALLDATA = in.get(C::precomputed_first_row) + in.get(C::calldata_latch);

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::calldata_sel) * (FF(1) - calldata_FIRST_OR_LAST_CALLDATA) *
                   ((in.get(C::calldata_index_shift) - in.get(C::calldata_index)) - FF(1));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    { // TRACE_CONTINUITY
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = (FF(1) - in.get(C::precomputed_first_row)) * (FF(1) - in.get(C::calldata_sel)) *
                   in.get(C::calldata_sel_shift);
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    { // CONTEXT_ID_CONTINUITY
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp = (FF(1) - in.get(C::precomputed_first_row)) * in.get(C::calldata_sel) *
                   (FF(1) - in.get(C::calldata_latch)) *
                   (in.get(C::calldata_context_id) - in.get(C::calldata_context_id_shift));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
