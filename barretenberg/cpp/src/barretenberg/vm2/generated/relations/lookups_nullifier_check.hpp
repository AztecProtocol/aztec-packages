// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_nullifier_check_low_leaf_poseidon2 ///////////////////

struct lookup_nullifier_check_low_leaf_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_NULLIFIER_CHECK_LOW_LEAF_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "nullifier_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::nullifier_check_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_nullifier_check_low_leaf_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_nullifier_check_low_leaf_poseidon2_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::nullifier_check_low_leaf_nullifier,
        ColumnAndShifts::nullifier_check_low_leaf_next_nullifier,
        ColumnAndShifts::nullifier_check_low_leaf_next_index,
        ColumnAndShifts::nullifier_check_low_leaf_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_nullifier_check_low_leaf_poseidon2_settings =
    lookup_settings<lookup_nullifier_check_low_leaf_poseidon2_settings_>;
template <typename FF_>
using lookup_nullifier_check_low_leaf_poseidon2_relation =
    lookup_relation_base<FF_, lookup_nullifier_check_low_leaf_poseidon2_settings>;

/////////////////// lookup_nullifier_check_updated_low_leaf_poseidon2 ///////////////////

struct lookup_nullifier_check_updated_low_leaf_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_NULLIFIER_CHECK_UPDATED_LOW_LEAF_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "nullifier_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::nullifier_check_write;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_nullifier_check_updated_low_leaf_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_nullifier_check_updated_low_leaf_poseidon2_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::nullifier_check_low_leaf_nullifier,
        ColumnAndShifts::nullifier_check_updated_low_leaf_next_nullifier,
        ColumnAndShifts::nullifier_check_updated_low_leaf_next_index,
        ColumnAndShifts::nullifier_check_updated_low_leaf_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_nullifier_check_updated_low_leaf_poseidon2_settings =
    lookup_settings<lookup_nullifier_check_updated_low_leaf_poseidon2_settings_>;
template <typename FF_>
using lookup_nullifier_check_updated_low_leaf_poseidon2_relation =
    lookup_relation_base<FF_, lookup_nullifier_check_updated_low_leaf_poseidon2_settings>;

/////////////////// lookup_nullifier_check_low_leaf_merkle_check ///////////////////

struct lookup_nullifier_check_low_leaf_merkle_check_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_NULLIFIER_CHECK_LOW_LEAF_MERKLE_CHECK";
    static constexpr std::string_view RELATION_NAME = "nullifier_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 7;
    static constexpr Column SRC_SELECTOR = Column::nullifier_check_sel;
    static constexpr Column DST_SELECTOR = Column::merkle_check_start;
    static constexpr Column COUNTS = Column::lookup_nullifier_check_low_leaf_merkle_check_counts;
    static constexpr Column INVERSES = Column::lookup_nullifier_check_low_leaf_merkle_check_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::nullifier_check_write,
        ColumnAndShifts::nullifier_check_low_leaf_hash,
        ColumnAndShifts::nullifier_check_updated_low_leaf_hash,
        ColumnAndShifts::nullifier_check_low_leaf_index,
        ColumnAndShifts::nullifier_check_tree_height,
        ColumnAndShifts::nullifier_check_root,
        ColumnAndShifts::nullifier_check_intermediate_root
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::merkle_check_write,      ColumnAndShifts::merkle_check_read_node,
        ColumnAndShifts::merkle_check_write_node, ColumnAndShifts::merkle_check_index,
        ColumnAndShifts::merkle_check_path_len,   ColumnAndShifts::merkle_check_read_root,
        ColumnAndShifts::merkle_check_write_root
    };
};

using lookup_nullifier_check_low_leaf_merkle_check_settings =
    lookup_settings<lookup_nullifier_check_low_leaf_merkle_check_settings_>;
template <typename FF_>
using lookup_nullifier_check_low_leaf_merkle_check_relation =
    lookup_relation_base<FF_, lookup_nullifier_check_low_leaf_merkle_check_settings>;

/////////////////// lookup_nullifier_check_low_leaf_nullifier_validation ///////////////////

struct lookup_nullifier_check_low_leaf_nullifier_validation_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_NULLIFIER_CHECK_LOW_LEAF_NULLIFIER_VALIDATION";
    static constexpr std::string_view RELATION_NAME = "nullifier_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr Column SRC_SELECTOR = Column::nullifier_check_leaf_not_exists;
    static constexpr Column DST_SELECTOR = Column::ff_gt_sel_gt;
    static constexpr Column COUNTS = Column::lookup_nullifier_check_low_leaf_nullifier_validation_counts;
    static constexpr Column INVERSES = Column::lookup_nullifier_check_low_leaf_nullifier_validation_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::nullifier_check_nullifier,
        ColumnAndShifts::nullifier_check_low_leaf_nullifier,
        ColumnAndShifts::nullifier_check_one
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { ColumnAndShifts::ff_gt_a,
                                                                                    ColumnAndShifts::ff_gt_b,
                                                                                    ColumnAndShifts::ff_gt_result };
};

using lookup_nullifier_check_low_leaf_nullifier_validation_settings =
    lookup_settings<lookup_nullifier_check_low_leaf_nullifier_validation_settings_>;
template <typename FF_>
using lookup_nullifier_check_low_leaf_nullifier_validation_relation =
    lookup_relation_base<FF_, lookup_nullifier_check_low_leaf_nullifier_validation_settings>;

/////////////////// lookup_nullifier_check_low_leaf_next_nullifier_validation ///////////////////

struct lookup_nullifier_check_low_leaf_next_nullifier_validation_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_NULLIFIER_CHECK_LOW_LEAF_NEXT_NULLIFIER_VALIDATION";
    static constexpr std::string_view RELATION_NAME = "nullifier_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 3;
    static constexpr Column SRC_SELECTOR = Column::nullifier_check_next_nullifier_is_nonzero;
    static constexpr Column DST_SELECTOR = Column::ff_gt_sel_gt;
    static constexpr Column COUNTS = Column::lookup_nullifier_check_low_leaf_next_nullifier_validation_counts;
    static constexpr Column INVERSES = Column::lookup_nullifier_check_low_leaf_next_nullifier_validation_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::nullifier_check_low_leaf_next_nullifier,
        ColumnAndShifts::nullifier_check_nullifier,
        ColumnAndShifts::nullifier_check_one
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { ColumnAndShifts::ff_gt_a,
                                                                                    ColumnAndShifts::ff_gt_b,
                                                                                    ColumnAndShifts::ff_gt_result };
};

using lookup_nullifier_check_low_leaf_next_nullifier_validation_settings =
    lookup_settings<lookup_nullifier_check_low_leaf_next_nullifier_validation_settings_>;
template <typename FF_>
using lookup_nullifier_check_low_leaf_next_nullifier_validation_relation =
    lookup_relation_base<FF_, lookup_nullifier_check_low_leaf_next_nullifier_validation_settings>;

/////////////////// lookup_nullifier_check_new_leaf_poseidon2 ///////////////////

struct lookup_nullifier_check_new_leaf_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_NULLIFIER_CHECK_NEW_LEAF_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "nullifier_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::nullifier_check_write;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_nullifier_check_new_leaf_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_nullifier_check_new_leaf_poseidon2_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::nullifier_check_nullifier,
        ColumnAndShifts::nullifier_check_low_leaf_next_nullifier,
        ColumnAndShifts::nullifier_check_low_leaf_next_index,
        ColumnAndShifts::nullifier_check_new_leaf_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_nullifier_check_new_leaf_poseidon2_settings =
    lookup_settings<lookup_nullifier_check_new_leaf_poseidon2_settings_>;
template <typename FF_>
using lookup_nullifier_check_new_leaf_poseidon2_relation =
    lookup_relation_base<FF_, lookup_nullifier_check_new_leaf_poseidon2_settings>;

/////////////////// lookup_nullifier_check_new_leaf_merkle_check ///////////////////

struct lookup_nullifier_check_new_leaf_merkle_check_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_NULLIFIER_CHECK_NEW_LEAF_MERKLE_CHECK";
    static constexpr std::string_view RELATION_NAME = "nullifier_check";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 7;
    static constexpr Column SRC_SELECTOR = Column::nullifier_check_write;
    static constexpr Column DST_SELECTOR = Column::merkle_check_start;
    static constexpr Column COUNTS = Column::lookup_nullifier_check_new_leaf_merkle_check_counts;
    static constexpr Column INVERSES = Column::lookup_nullifier_check_new_leaf_merkle_check_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::nullifier_check_one,           ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::nullifier_check_new_leaf_hash, ColumnAndShifts::nullifier_check_tree_size_before_write,
        ColumnAndShifts::nullifier_check_tree_height,   ColumnAndShifts::nullifier_check_intermediate_root,
        ColumnAndShifts::nullifier_check_write_root
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::merkle_check_write,      ColumnAndShifts::merkle_check_read_node,
        ColumnAndShifts::merkle_check_write_node, ColumnAndShifts::merkle_check_index,
        ColumnAndShifts::merkle_check_path_len,   ColumnAndShifts::merkle_check_read_root,
        ColumnAndShifts::merkle_check_write_root
    };
};

using lookup_nullifier_check_new_leaf_merkle_check_settings =
    lookup_settings<lookup_nullifier_check_new_leaf_merkle_check_settings_>;
template <typename FF_>
using lookup_nullifier_check_new_leaf_merkle_check_relation =
    lookup_relation_base<FF_, lookup_nullifier_check_new_leaf_merkle_check_settings>;

} // namespace bb::avm2
