// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_rng_chk_pow_2 ///////////////////

class lookup_rng_chk_pow_2_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_8;
    static constexpr Column COUNTS = Column::lookup_rng_chk_pow_2_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_pow_2_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_dyn_rng_chk_bits,
                                                                           Column::range_check_dyn_rng_chk_pow_2 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk,
                                                                           Column::precomputed_power_of_2 };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel() == 1 || in._precomputed_sel_range_8() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel());
        const auto is_table_entry = View(in._precomputed_sel_range_8());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_pow_2_inv(),
                                     in._lookup_rng_chk_pow_2_counts(),
                                     in._range_check_sel(),
                                     in._precomputed_sel_range_8(),
                                     in._range_check_dyn_rng_chk_bits(),
                                     in._range_check_dyn_rng_chk_pow_2(),
                                     in._precomputed_clk(),
                                     in._precomputed_power_of_2());
    }
};

template <typename FF_>
class lookup_rng_chk_pow_2_relation : public GenericLookupRelation<lookup_rng_chk_pow_2_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_POW_2";
};
template <typename FF_> using lookup_rng_chk_pow_2 = GenericLookup<lookup_rng_chk_pow_2_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_diff ///////////////////

class lookup_rng_chk_diff_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_diff_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_diff_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_dyn_diff };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_diff_inv(),
                                     in._lookup_rng_chk_diff_counts(),
                                     in._range_check_sel(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_dyn_diff(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_diff_relation : public GenericLookupRelation<lookup_rng_chk_diff_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_DIFF";
};
template <typename FF_> using lookup_rng_chk_diff = GenericLookup<lookup_rng_chk_diff_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r0_16_bit ///////////////////

class lookup_rng_chk_is_r0_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r0_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r0_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r0_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r0 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r0_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r0_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r0_16_bit_inv(),
                                     in._lookup_rng_chk_is_r0_16_bit_counts(),
                                     in._range_check_sel_r0_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r0(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r0_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r0_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R0_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r0_16_bit = GenericLookup<lookup_rng_chk_is_r0_16_bit_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r1_16_bit ///////////////////

class lookup_rng_chk_is_r1_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r1_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r1_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r1_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r1 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r1_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r1_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r1_16_bit_inv(),
                                     in._lookup_rng_chk_is_r1_16_bit_counts(),
                                     in._range_check_sel_r1_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r1(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r1_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r1_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R1_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r1_16_bit = GenericLookup<lookup_rng_chk_is_r1_16_bit_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r2_16_bit ///////////////////

class lookup_rng_chk_is_r2_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r2_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r2_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r2_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r2 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r2_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r2_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r2_16_bit_inv(),
                                     in._lookup_rng_chk_is_r2_16_bit_counts(),
                                     in._range_check_sel_r2_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r2(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r2_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r2_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R2_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r2_16_bit = GenericLookup<lookup_rng_chk_is_r2_16_bit_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r3_16_bit ///////////////////

class lookup_rng_chk_is_r3_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r3_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r3_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r3_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r3 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r3_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r3_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r3_16_bit_inv(),
                                     in._lookup_rng_chk_is_r3_16_bit_counts(),
                                     in._range_check_sel_r3_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r3(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r3_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r3_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R3_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r3_16_bit = GenericLookup<lookup_rng_chk_is_r3_16_bit_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r4_16_bit ///////////////////

class lookup_rng_chk_is_r4_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r4_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r4_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r4_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r4 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r4_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r4_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r4_16_bit_inv(),
                                     in._lookup_rng_chk_is_r4_16_bit_counts(),
                                     in._range_check_sel_r4_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r4(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r4_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r4_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R4_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r4_16_bit = GenericLookup<lookup_rng_chk_is_r4_16_bit_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r5_16_bit ///////////////////

class lookup_rng_chk_is_r5_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r5_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r5_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r5_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r5 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r5_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r5_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r5_16_bit_inv(),
                                     in._lookup_rng_chk_is_r5_16_bit_counts(),
                                     in._range_check_sel_r5_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r5(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r5_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r5_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R5_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r5_16_bit = GenericLookup<lookup_rng_chk_is_r5_16_bit_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r6_16_bit ///////////////////

class lookup_rng_chk_is_r6_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r6_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r6_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r6_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r6 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r6_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r6_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r6_16_bit_inv(),
                                     in._lookup_rng_chk_is_r6_16_bit_counts(),
                                     in._range_check_sel_r6_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r6(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r6_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r6_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R6_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r6_16_bit = GenericLookup<lookup_rng_chk_is_r6_16_bit_lookup_settings, FF_>;

/////////////////// lookup_rng_chk_is_r7_16_bit ///////////////////

class lookup_rng_chk_is_r7_16_bit_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::lookup_rng_chk_is_r7_16_bit_counts;
    static constexpr Column INVERSES = Column::lookup_rng_chk_is_r7_16_bit_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r7 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_rng_chk_is_r7_16_bit_inv(),
                                     in._lookup_rng_chk_is_r7_16_bit_counts(),
                                     in._range_check_sel(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r7(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class lookup_rng_chk_is_r7_16_bit_relation
    : public GenericLookupRelation<lookup_rng_chk_is_r7_16_bit_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_RNG_CHK_IS_R7_16_BIT";
};
template <typename FF_>
using lookup_rng_chk_is_r7_16_bit = GenericLookup<lookup_rng_chk_is_r7_16_bit_lookup_settings, FF_>;

} // namespace bb::avm2