// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// dyn_rng_chk_pow_2 ///////////////////

class dyn_rng_chk_pow_2_lookup_settings {
  public:
    static constexpr std::string_view NAME = "DYN_RNG_CHK_POW_2";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_8;
    static constexpr Column COUNTS = Column::dyn_rng_chk_pow_2_counts;
    static constexpr Column INVERSES = Column::dyn_rng_chk_pow_2_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_dyn_rng_chk_bits,
                                                                           Column::range_check_dyn_rng_chk_pow_2 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk,
                                                                           Column::precomputed_power_of_2 };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel() == 1 || in._precomputed_sel_range_8() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel());
        const auto is_table_entry = View(in._precomputed_sel_range_8());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._dyn_rng_chk_pow_2_inv(),
                                     in._dyn_rng_chk_pow_2_counts(),
                                     in._range_check_sel(),
                                     in._precomputed_sel_range_8(),
                                     in._range_check_dyn_rng_chk_bits(),
                                     in._range_check_dyn_rng_chk_pow_2(),
                                     in._precomputed_clk(),
                                     in._precomputed_power_of_2());
    }
};

template <typename FF_>
class dyn_rng_chk_pow_2_relation : public GenericLookupRelation<dyn_rng_chk_pow_2_lookup_settings, FF_> {
  public:
    using Settings = dyn_rng_chk_pow_2_lookup_settings;
    static constexpr std::string_view NAME = dyn_rng_chk_pow_2_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = dyn_rng_chk_pow_2_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.dyn_rng_chk_pow_2_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// dyn_diff_is_u16 ///////////////////

class dyn_diff_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "DYN_DIFF_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::dyn_diff_is_u16_counts;
    static constexpr Column INVERSES = Column::dyn_diff_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_dyn_diff };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._dyn_diff_is_u16_inv(),
                                     in._dyn_diff_is_u16_counts(),
                                     in._range_check_sel(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_dyn_diff(),
                                     in._precomputed_clk());
    }
};

template <typename FF_>
class dyn_diff_is_u16_relation : public GenericLookupRelation<dyn_diff_is_u16_lookup_settings, FF_> {
  public:
    using Settings = dyn_diff_is_u16_lookup_settings;
    static constexpr std::string_view NAME = dyn_diff_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = dyn_diff_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.dyn_diff_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r0_is_u16 ///////////////////

class r0_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R0_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r0_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r0_is_u16_counts;
    static constexpr Column INVERSES = Column::r0_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r0 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r0_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r0_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r0_is_u16_inv(),
                                     in._r0_is_u16_counts(),
                                     in._range_check_sel_r0_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r0(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r0_is_u16_relation : public GenericLookupRelation<r0_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r0_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r0_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r0_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r0_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r1_is_u16 ///////////////////

class r1_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R1_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r1_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r1_is_u16_counts;
    static constexpr Column INVERSES = Column::r1_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r1 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r1_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r1_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r1_is_u16_inv(),
                                     in._r1_is_u16_counts(),
                                     in._range_check_sel_r1_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r1(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r1_is_u16_relation : public GenericLookupRelation<r1_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r1_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r1_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r1_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r1_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r2_is_u16 ///////////////////

class r2_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R2_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r2_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r2_is_u16_counts;
    static constexpr Column INVERSES = Column::r2_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r2 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r2_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r2_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r2_is_u16_inv(),
                                     in._r2_is_u16_counts(),
                                     in._range_check_sel_r2_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r2(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r2_is_u16_relation : public GenericLookupRelation<r2_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r2_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r2_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r2_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r2_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r3_is_u16 ///////////////////

class r3_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R3_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r3_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r3_is_u16_counts;
    static constexpr Column INVERSES = Column::r3_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r3 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r3_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r3_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r3_is_u16_inv(),
                                     in._r3_is_u16_counts(),
                                     in._range_check_sel_r3_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r3(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r3_is_u16_relation : public GenericLookupRelation<r3_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r3_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r3_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r3_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r3_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r4_is_u16 ///////////////////

class r4_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R4_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r4_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r4_is_u16_counts;
    static constexpr Column INVERSES = Column::r4_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r4 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r4_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r4_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r4_is_u16_inv(),
                                     in._r4_is_u16_counts(),
                                     in._range_check_sel_r4_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r4(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r4_is_u16_relation : public GenericLookupRelation<r4_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r4_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r4_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r4_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r4_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r5_is_u16 ///////////////////

class r5_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R5_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r5_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r5_is_u16_counts;
    static constexpr Column INVERSES = Column::r5_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r5 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r5_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r5_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r5_is_u16_inv(),
                                     in._r5_is_u16_counts(),
                                     in._range_check_sel_r5_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r5(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r5_is_u16_relation : public GenericLookupRelation<r5_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r5_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r5_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r5_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r5_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r6_is_u16 ///////////////////

class r6_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R6_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel_r6_16_bit_rng_lookup;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r6_is_u16_counts;
    static constexpr Column INVERSES = Column::r6_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r6 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel_r6_16_bit_rng_lookup() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel_r6_16_bit_rng_lookup());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r6_is_u16_inv(),
                                     in._r6_is_u16_counts(),
                                     in._range_check_sel_r6_16_bit_rng_lookup(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r6(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r6_is_u16_relation : public GenericLookupRelation<r6_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r6_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r6_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r6_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r6_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

/////////////////// r7_is_u16 ///////////////////

class r7_is_u16_lookup_settings {
  public:
    static constexpr std::string_view NAME = "R7_IS_U16";
    static constexpr std::string_view RELATION_NAME = "range_check";

    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_range_16;
    static constexpr Column COUNTS = Column::r7_is_u16_counts;
    static constexpr Column INVERSES = Column::r7_is_u16_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::range_check_u16_r7 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_sel() == 1 || in._precomputed_sel_range_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._range_check_sel());
        const auto is_table_entry = View(in._precomputed_sel_range_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._r7_is_u16_inv(),
                                     in._r7_is_u16_counts(),
                                     in._range_check_sel(),
                                     in._precomputed_sel_range_16(),
                                     in._range_check_u16_r7(),
                                     in._precomputed_clk());
    }
};

template <typename FF_> class r7_is_u16_relation : public GenericLookupRelation<r7_is_u16_lookup_settings, FF_> {
  public:
    using Settings = r7_is_u16_lookup_settings;
    static constexpr std::string_view NAME = r7_is_u16_lookup_settings::NAME;
    static constexpr std::string_view RELATION_NAME = r7_is_u16_lookup_settings::RELATION_NAME;

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        return in.r7_is_u16_inv.is_zero();
    }

    static std::string get_subrelation_label(size_t index)
    {
        if (index == 0) {
            return "INVERSES_ARE_CORRECT";
        } else if (index == 1) {
            return "ACCUMULATION_IS_CORRECT";
        }
        return std::to_string(index);
    }
};

} // namespace bb::avm2
