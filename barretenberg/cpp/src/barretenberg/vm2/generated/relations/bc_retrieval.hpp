// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/op_count.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class bc_retrievalImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 13> SUBRELATION_PARTIAL_LENGTHS = { 3, 4, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::bc_retrieval_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class bc_retrieval : public Relation<bc_retrievalImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "bc_retrieval";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "TRACE_CONTINUITY";
        case 4:
            return "NO_REMAINING_BYTECODES";
        case 7:
            return "CURRENT_CLASS_ID_IS_ZERO_IF_ERROR";
        case 8:
            return "ARTIFACT_HASH_IS_ZERO_IF_ERROR";
        case 9:
            return "PRIVATE_FUNCTION_ROOT_IS_ZERO_IF_ERROR";
        case 10:
            return "BYTECODE_ID_IS_ZERO_IF_ERROR";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_TRACE_CONTINUITY = 1;
    static constexpr size_t SR_NO_REMAINING_BYTECODES = 4;
    static constexpr size_t SR_CURRENT_CLASS_ID_IS_ZERO_IF_ERROR = 7;
    static constexpr size_t SR_ARTIFACT_HASH_IS_ZERO_IF_ERROR = 8;
    static constexpr size_t SR_PRIVATE_FUNCTION_ROOT_IS_ZERO_IF_ERROR = 9;
    static constexpr size_t SR_BYTECODE_ID_IS_ZERO_IF_ERROR = 10;
};

} // namespace bb::avm2
