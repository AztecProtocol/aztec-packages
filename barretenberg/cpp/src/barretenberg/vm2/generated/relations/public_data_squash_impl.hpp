// AUTOGENERATED FILE
#pragma once

#include "barretenberg/vm2/generated/relations/public_data_squash.hpp"

namespace bb::avm2 {

template <typename FF_>
template <typename ContainerOverSubrelations, typename AllEntities>
void public_data_squashImpl<FF_>::accumulate(ContainerOverSubrelations& evals,
                                             const AllEntities& in,
                                             [[maybe_unused]] const RelationParameters<FF_>&,
                                             [[maybe_unused]] const FF_& scaling_factor)
{
    using C = ColumnAndShifts;

    PROFILE_THIS_NAME("accumulate/public_data_squash");

    const auto public_data_squash_START =
        in.get(C::public_data_squash_sel_shift) * (FF(1) - in.get(C::public_data_squash_sel));
    const auto public_data_squash_END =
        in.get(C::public_data_squash_sel) * (FF(1) - in.get(C::public_data_squash_sel_shift));
    const auto public_data_squash_NOT_END = in.get(C::public_data_squash_sel) * in.get(C::public_data_squash_sel_shift);
    const auto public_data_squash_LEAF_SLOT_END =
        in.get(C::public_data_squash_leaf_slot_increase) + public_data_squash_END;

    {
        using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
        auto tmp = in.get(C::public_data_squash_sel) * (FF(1) - in.get(C::public_data_squash_sel));
        tmp *= scaling_factor;
        std::get<0>(evals) += typename Accumulator::View(tmp);
    }
    { // START_CONDITION
        using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
        auto tmp = public_data_squash_START * (FF(1) - in.get(C::precomputed_first_row));
        tmp *= scaling_factor;
        std::get<1>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
        auto tmp = in.get(C::public_data_squash_write_to_public_inputs) *
                   (FF(1) - in.get(C::public_data_squash_write_to_public_inputs));
        tmp *= scaling_factor;
        std::get<2>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
        auto tmp = in.get(C::public_data_squash_leaf_slot_increase) *
                   (FF(1) - in.get(C::public_data_squash_leaf_slot_increase));
        tmp *= scaling_factor;
        std::get<3>(evals) += typename Accumulator::View(tmp);
    }
    { // CHECK_SAME_LEAF_SLOT
        using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
        auto tmp = public_data_squash_NOT_END * (FF(1) - in.get(C::public_data_squash_leaf_slot_increase)) *
                   (in.get(C::public_data_squash_leaf_slot) - in.get(C::public_data_squash_leaf_slot_shift));
        tmp *= scaling_factor;
        std::get<4>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
        auto tmp = (in.get(C::public_data_squash_check_clock) -
                    public_data_squash_NOT_END * (FF(1) - in.get(C::public_data_squash_leaf_slot_increase)));
        tmp *= scaling_factor;
        std::get<5>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
        auto tmp = (in.get(C::public_data_squash_clk_diff) -
                    in.get(C::public_data_squash_check_clock) *
                        (in.get(C::public_data_squash_clk_shift) - in.get(C::public_data_squash_clk)));
        tmp *= scaling_factor;
        std::get<6>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
        auto tmp = in.get(C::public_data_squash_sel) * (FF(32) - in.get(C::public_data_squash_constant_32));
        tmp *= scaling_factor;
        std::get<7>(evals) += typename Accumulator::View(tmp);
    }
    {
        using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
        auto tmp = (in.get(C::public_data_squash_write_to_public_inputs_shift) -
                    (in.get(C::public_data_squash_leaf_slot_increase) + public_data_squash_START));
        tmp *= scaling_factor;
        std::get<8>(evals) += typename Accumulator::View(tmp);
    }
    { // FINAL_VALUE_PROPAGATION
        using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
        auto tmp = in.get(C::public_data_squash_check_clock) *
                   (in.get(C::public_data_squash_final_value) - in.get(C::public_data_squash_final_value_shift));
        tmp *= scaling_factor;
        std::get<9>(evals) += typename Accumulator::View(tmp);
    }
    { // FINAL_VALUE_CHECK
        using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
        auto tmp = public_data_squash_LEAF_SLOT_END *
                   (in.get(C::public_data_squash_final_value) - in.get(C::public_data_squash_value));
        tmp *= scaling_factor;
        std::get<10>(evals) += typename Accumulator::View(tmp);
    }
}

} // namespace bb::avm2
