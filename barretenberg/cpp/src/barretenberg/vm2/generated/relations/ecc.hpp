// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class eccImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 19> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 5, 3,
                                                                            5, 3, 6, 5, 6, 6, 6, 6, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::ecc_sel)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class ecc : public Relation<eccImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "ecc";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 11:
            return "DOUBLE_PRED";
        case 12:
            return "INFINITY_RESULT";
        case 14:
            return "COMPUTED_LAMBDA";
        case 16:
            return "OUTPUT_X_COORD";
        case 17:
            return "OUTPUT_Y_COORD";
        case 18:
            return "OUTPUT_INF_FLAG";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_DOUBLE_PRED = 11;
    static constexpr size_t SR_INFINITY_RESULT = 12;
    static constexpr size_t SR_COMPUTED_LAMBDA = 14;
    static constexpr size_t SR_OUTPUT_X_COORD = 16;
    static constexpr size_t SR_OUTPUT_Y_COORD = 17;
    static constexpr size_t SR_OUTPUT_INF_FLAG = 18;
};

} // namespace bb::avm2
