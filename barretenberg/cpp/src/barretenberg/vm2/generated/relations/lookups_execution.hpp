// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_dummy_precomputed ///////////////////

class lookup_dummy_precomputed_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::execution_sel;
    static constexpr Column DST_SELECTOR = Column::precomputed_sel_bitwise;
    static constexpr Column COUNTS = Column::lookup_dummy_precomputed_counts;
    static constexpr Column INVERSES = Column::lookup_dummy_precomputed_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        Column::execution_sel, Column::execution_clk, Column::execution_clk, Column::execution_clk
    };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::precomputed_bitwise_op_id,
                                                                           Column::precomputed_bitwise_input_a,
                                                                           Column::precomputed_bitwise_input_b,
                                                                           Column::precomputed_bitwise_output };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._execution_sel() == 1 || in._precomputed_sel_bitwise() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._execution_sel());
        const auto is_table_entry = View(in._precomputed_sel_bitwise());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_dummy_precomputed_inv(),
                                     in._lookup_dummy_precomputed_counts(),
                                     in._execution_sel(),
                                     in._precomputed_sel_bitwise(),
                                     in._execution_sel(),
                                     in._execution_clk(),
                                     in._execution_clk(),
                                     in._execution_clk(),
                                     in._precomputed_bitwise_op_id(),
                                     in._precomputed_bitwise_input_a(),
                                     in._precomputed_bitwise_input_b(),
                                     in._precomputed_bitwise_output());
    }
};

template <typename FF_>
class lookup_dummy_precomputed_relation : public GenericLookupRelation<lookup_dummy_precomputed_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_DUMMY_PRECOMPUTED";
};
template <typename FF_> using lookup_dummy_precomputed = GenericLookup<lookup_dummy_precomputed_lookup_settings, FF_>;

/////////////////// lookup_dummy_dynamic ///////////////////

class lookup_dummy_dynamic_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::execution_sel;
    static constexpr Column DST_SELECTOR = Column::execution_sel;
    static constexpr Column COUNTS = Column::lookup_dummy_dynamic_counts;
    static constexpr Column INVERSES = Column::lookup_dummy_dynamic_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        Column::execution_op1, Column::execution_op2, Column::execution_op3, Column::execution_op4
    };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        Column::execution_op1, Column::execution_op2, Column::execution_op3, Column::execution_op4
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._execution_sel() == 1 || in._execution_sel() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._execution_sel());
        const auto is_table_entry = View(in._execution_sel());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_dummy_dynamic_inv(),
                                     in._lookup_dummy_dynamic_counts(),
                                     in._execution_sel(),
                                     in._execution_sel(),
                                     in._execution_op1(),
                                     in._execution_op2(),
                                     in._execution_op3(),
                                     in._execution_op4(),
                                     in._execution_op1(),
                                     in._execution_op2(),
                                     in._execution_op3(),
                                     in._execution_op4());
    }
};

template <typename FF_>
class lookup_dummy_dynamic_relation : public GenericLookupRelation<lookup_dummy_dynamic_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_DUMMY_DYNAMIC";
};
template <typename FF_> using lookup_dummy_dynamic = GenericLookup<lookup_dummy_dynamic_lookup_settings, FF_>;

} // namespace bb::avm2