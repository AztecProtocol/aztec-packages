// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class send_l2_to_l1_msgImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 6> SUBRELATION_PARTIAL_LENGTHS = { 3, 5, 4, 4, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return (in.get(C::execution_sel_execute_send_l2_to_l1_msg)).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class send_l2_to_l1_msg : public Relation<send_l2_to_l1_msgImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "send_l2_to_l1_msg";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 1:
            return "MAX_WRITES_REACHED";
        case 2:
            return "OPCODE_ERROR";
        case 3:
            return "SEND_L2_TO_L1_MSG_CONDITION";
        case 5:
            return "EMIT_L2_TO_L1_MSG_NUM_L2_TO_L1_MSGS_EMITTED_INCREASE";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_MAX_WRITES_REACHED = 1;
    static constexpr size_t SR_OPCODE_ERROR = 2;
    static constexpr size_t SR_SEND_L2_TO_L1_MSG_CONDITION = 3;
    static constexpr size_t SR_EMIT_L2_TO_L1_MSG_NUM_L2_TO_L1_MSGS_EMITTED_INCREASE = 5;
};

} // namespace bb::avm2
