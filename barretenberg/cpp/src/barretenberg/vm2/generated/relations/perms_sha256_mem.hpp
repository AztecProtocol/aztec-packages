// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <string_view>
#include <tuple>

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::avm2 {

/////////////////// perm_sha256_mem_mem_op_0 ///////////////////

struct perm_sha256_mem_mem_op_0_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_0";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_0_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_0_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_0_, ColumnAndShifts::sha256_memory_register_0_,
        ColumnAndShifts::sha256_memory_tag_0_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_0_settings = permutation_settings<perm_sha256_mem_mem_op_0_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_0_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_0_settings>;

/////////////////// perm_sha256_mem_mem_op_1 ///////////////////

struct perm_sha256_mem_mem_op_1_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_1";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_1_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_1_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_1_, ColumnAndShifts::sha256_memory_register_1_,
        ColumnAndShifts::sha256_memory_tag_1_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_1_settings = permutation_settings<perm_sha256_mem_mem_op_1_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_1_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_1_settings>;

/////////////////// perm_sha256_mem_mem_op_2 ///////////////////

struct perm_sha256_mem_mem_op_2_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_2";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_2_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_2_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_2_, ColumnAndShifts::sha256_memory_register_2_,
        ColumnAndShifts::sha256_memory_tag_2_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_2_settings = permutation_settings<perm_sha256_mem_mem_op_2_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_2_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_2_settings>;

/////////////////// perm_sha256_mem_mem_op_3 ///////////////////

struct perm_sha256_mem_mem_op_3_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_3";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_3_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_3_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_3_, ColumnAndShifts::sha256_memory_register_3_,
        ColumnAndShifts::sha256_memory_tag_3_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_3_settings = permutation_settings<perm_sha256_mem_mem_op_3_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_3_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_3_settings>;

/////////////////// perm_sha256_mem_mem_op_4 ///////////////////

struct perm_sha256_mem_mem_op_4_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_4";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_4_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_4_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_4_, ColumnAndShifts::sha256_memory_register_4_,
        ColumnAndShifts::sha256_memory_tag_4_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_4_settings = permutation_settings<perm_sha256_mem_mem_op_4_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_4_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_4_settings>;

/////////////////// perm_sha256_mem_mem_op_5 ///////////////////

struct perm_sha256_mem_mem_op_5_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_5";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_5_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_5_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_5_, ColumnAndShifts::sha256_memory_register_5_,
        ColumnAndShifts::sha256_memory_tag_5_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_5_settings = permutation_settings<perm_sha256_mem_mem_op_5_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_5_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_5_settings>;

/////////////////// perm_sha256_mem_mem_op_6 ///////////////////

struct perm_sha256_mem_mem_op_6_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_6";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_6_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_6_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_6_, ColumnAndShifts::sha256_memory_register_6_,
        ColumnAndShifts::sha256_memory_tag_6_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_6_settings = permutation_settings<perm_sha256_mem_mem_op_6_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_6_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_6_settings>;

/////////////////// perm_sha256_mem_mem_op_7 ///////////////////

struct perm_sha256_mem_mem_op_7_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_OP_7";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_mem_state_or_output;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_op_7_;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_op_7_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk,     ColumnAndShifts::sha256_space_id,
        ColumnAndShifts::sha256_memory_address_7_, ColumnAndShifts::sha256_memory_register_7_,
        ColumnAndShifts::sha256_memory_tag_7_,     ColumnAndShifts::sha256_rw
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_op_7_settings = permutation_settings<perm_sha256_mem_mem_op_7_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_op_7_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_op_7_settings>;

/////////////////// perm_sha256_mem_mem_input_read ///////////////////

struct perm_sha256_mem_mem_input_read_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_MEM_INPUT_READ";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::sha256_sel_read_input_from_memory;
    static constexpr Column DST_SELECTOR = Column::memory_sel_sha256_read;
    static constexpr Column INVERSES = Column::perm_sha256_mem_mem_input_read_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk, ColumnAndShifts::sha256_space_id,  ColumnAndShifts::sha256_input_addr,
        ColumnAndShifts::sha256_input,         ColumnAndShifts::sha256_input_tag, ColumnAndShifts::precomputed_zero
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::memory_clk,   ColumnAndShifts::memory_space_id, ColumnAndShifts::memory_address,
        ColumnAndShifts::memory_value, ColumnAndShifts::memory_tag,      ColumnAndShifts::memory_rw
    };
};

using perm_sha256_mem_mem_input_read_settings = permutation_settings<perm_sha256_mem_mem_input_read_settings_>;
template <typename FF_>
using perm_sha256_mem_mem_input_read_relation = permutation_relation_base<FF_, perm_sha256_mem_mem_input_read_settings>;

/////////////////// perm_sha256_mem_dispatch_sha256 ///////////////////

struct perm_sha256_mem_dispatch_sha256_settings_ {
    static constexpr std::string_view NAME = "PERM_SHA256_MEM_DISPATCH_SHA256";
    static constexpr std::string_view RELATION_NAME = "sha256_mem";
    static constexpr size_t COLUMNS_PER_SET = 6;
    static constexpr Column SRC_SELECTOR = Column::execution_sel_execute_sha256_compression;
    static constexpr Column DST_SELECTOR = Column::sha256_start;
    static constexpr Column INVERSES = Column::perm_sha256_mem_dispatch_sha256_inv;
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        ColumnAndShifts::precomputed_clk,  ColumnAndShifts::execution_context_id,
        ColumnAndShifts::execution_rop_0_, ColumnAndShifts::execution_rop_1_,
        ColumnAndShifts::execution_rop_2_, ColumnAndShifts::execution_sel_opcode_error
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        ColumnAndShifts::sha256_execution_clk, ColumnAndShifts::sha256_space_id,   ColumnAndShifts::sha256_output_addr,
        ColumnAndShifts::sha256_state_addr,    ColumnAndShifts::sha256_input_addr, ColumnAndShifts::sha256_err
    };
};

using perm_sha256_mem_dispatch_sha256_settings = permutation_settings<perm_sha256_mem_dispatch_sha256_settings_>;
template <typename FF_>
using perm_sha256_mem_dispatch_sha256_relation =
    permutation_relation_base<FF_, perm_sha256_mem_dispatch_sha256_settings>;

} // namespace bb::avm2
