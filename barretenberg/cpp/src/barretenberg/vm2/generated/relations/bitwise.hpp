// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/common/bb_bench.hpp"
#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class bitwiseImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 21> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3,
                                                                            4, 4, 5, 3, 3, 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;

        return ((in.get(C::bitwise_sel) + in.get(C::bitwise_last))).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor);
};

template <typename FF> class bitwise : public Relation<bitwiseImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "bitwise";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 6:
            return "LAST_ON_ERROR";
        case 7:
            return "RES_TAG_SHOULD_MATCH_INPUT";
        case 8:
            return "INPUT_TAG_CANNOT_BE_FF";
        case 9:
            return "INPUT_TAGS_SHOULD_MATCH";
        case 10:
            return "BITW_OP_ID_REL";
        case 11:
            return "BITW_CTR_DECREMENT";
        case 12:
            return "BITW_SEL_CTR_NON_ZERO";
        case 13:
            return "BITW_LAST_FOR_CTR_ONE";
        case 14:
            return "BITW_INIT_A";
        case 15:
            return "BITW_INIT_B";
        case 16:
            return "BITW_INIT_C";
        case 17:
            return "BITW_ACC_REL_A";
        case 18:
            return "BITW_ACC_REL_B";
        case 19:
            return "BITW_ACC_REL_C";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_LAST_ON_ERROR = 6;
    static constexpr size_t SR_RES_TAG_SHOULD_MATCH_INPUT = 7;
    static constexpr size_t SR_INPUT_TAG_CANNOT_BE_FF = 8;
    static constexpr size_t SR_INPUT_TAGS_SHOULD_MATCH = 9;
    static constexpr size_t SR_BITW_OP_ID_REL = 10;
    static constexpr size_t SR_BITW_CTR_DECREMENT = 11;
    static constexpr size_t SR_BITW_SEL_CTR_NON_ZERO = 12;
    static constexpr size_t SR_BITW_LAST_FOR_CTR_ONE = 13;
    static constexpr size_t SR_BITW_INIT_A = 14;
    static constexpr size_t SR_BITW_INIT_B = 15;
    static constexpr size_t SR_BITW_INIT_C = 16;
    static constexpr size_t SR_BITW_ACC_REL_A = 17;
    static constexpr size_t SR_BITW_ACC_REL_B = 18;
    static constexpr size_t SR_BITW_ACC_REL_C = 19;
};

} // namespace bb::avm2
