// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"
#include "barretenberg/vm2/generated/columns.hpp"

namespace bb::avm2 {

template <typename FF_> class bitwiseImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 13> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 3, 3, 4, 4, 5, 3, 3, 3, 3, 3, 3 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        using C = ColumnAndShifts;
        return ((in.get(C::bitwise_sel) + in.get(C::bitwise_last))).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& in,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        using C = ColumnAndShifts;

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = in.get(C::bitwise_sel) * (FF(1) - in.get(C::bitwise_sel));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = in.get(C::bitwise_start) * (FF(1) - in.get(C::bitwise_start));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = in.get(C::bitwise_last) * (FF(1) - in.get(C::bitwise_last));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_OP_ID_REL
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (in.get(C::bitwise_op_id_shift) - in.get(C::bitwise_op_id)) * (FF(1) - in.get(C::bitwise_last));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_CTR_DECREMENT
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = in.get(C::bitwise_sel) * ((in.get(C::bitwise_ctr_shift) - in.get(C::bitwise_ctr)) + FF(1)) *
                       (FF(1) - in.get(C::bitwise_last));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_SEL_CTR_NON_ZERO
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp =
                (in.get(C::bitwise_ctr) * ((FF(1) - in.get(C::bitwise_sel)) * (FF(1) - in.get(C::bitwise_ctr_inv)) +
                                           in.get(C::bitwise_ctr_inv)) -
                 in.get(C::bitwise_sel));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_LAST_FOR_CTR_ONE
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp =
                in.get(C::bitwise_sel) * (((in.get(C::bitwise_ctr) - FF(1)) *
                                               (in.get(C::bitwise_last) * (FF(1) - in.get(C::bitwise_ctr_min_one_inv)) +
                                                in.get(C::bitwise_ctr_min_one_inv)) +
                                           in.get(C::bitwise_last)) -
                                          FF(1));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_INIT_A
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = in.get(C::bitwise_last) * (in.get(C::bitwise_acc_ia) - in.get(C::bitwise_ia_byte));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_INIT_B
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = in.get(C::bitwise_last) * (in.get(C::bitwise_acc_ib) - in.get(C::bitwise_ib_byte));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_INIT_C
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = in.get(C::bitwise_last) * (in.get(C::bitwise_acc_ic) - in.get(C::bitwise_ic_byte));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_ACC_REL_A
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp =
                ((in.get(C::bitwise_acc_ia) - in.get(C::bitwise_ia_byte)) - FF(256) * in.get(C::bitwise_acc_ia_shift)) *
                (FF(1) - in.get(C::bitwise_last));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_ACC_REL_B
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp =
                ((in.get(C::bitwise_acc_ib) - in.get(C::bitwise_ib_byte)) - FF(256) * in.get(C::bitwise_acc_ib_shift)) *
                (FF(1) - in.get(C::bitwise_last));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        { // BITW_ACC_REL_C
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp =
                ((in.get(C::bitwise_acc_ic) - in.get(C::bitwise_ic_byte)) - FF(256) * in.get(C::bitwise_acc_ic_shift)) *
                (FF(1) - in.get(C::bitwise_last));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class bitwise : public Relation<bitwiseImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "bitwise";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 3:
            return "BITW_OP_ID_REL";
        case 4:
            return "BITW_CTR_DECREMENT";
        case 5:
            return "BITW_SEL_CTR_NON_ZERO";
        case 6:
            return "BITW_LAST_FOR_CTR_ONE";
        case 7:
            return "BITW_INIT_A";
        case 8:
            return "BITW_INIT_B";
        case 9:
            return "BITW_INIT_C";
        case 10:
            return "BITW_ACC_REL_A";
        case 11:
            return "BITW_ACC_REL_B";
        case 12:
            return "BITW_ACC_REL_C";
        }
        return std::to_string(index);
    }

    // Subrelation indices constants, to be used in tests.
    static constexpr size_t SR_BITW_OP_ID_REL = 3;
    static constexpr size_t SR_BITW_CTR_DECREMENT = 4;
    static constexpr size_t SR_BITW_SEL_CTR_NON_ZERO = 5;
    static constexpr size_t SR_BITW_LAST_FOR_CTR_ONE = 6;
    static constexpr size_t SR_BITW_INIT_A = 7;
    static constexpr size_t SR_BITW_INIT_B = 8;
    static constexpr size_t SR_BITW_INIT_C = 9;
    static constexpr size_t SR_BITW_ACC_REL_A = 10;
    static constexpr size_t SR_BITW_ACC_REL_B = 11;
    static constexpr size_t SR_BITW_ACC_REL_C = 12;
};

} // namespace bb::avm2
