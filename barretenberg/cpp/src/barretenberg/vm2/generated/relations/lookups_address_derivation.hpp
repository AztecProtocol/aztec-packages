// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm2 {

/////////////////// lookup_address_derivation_salted_initialization_hash_poseidon2_0 ///////////////////

struct lookup_address_derivation_salted_initialization_hash_poseidon2_0_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_SALTED_INITIALIZATION_HASH_POSEIDON2_0";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_start;
    static constexpr Column COUNTS = Column::lookup_address_derivation_salted_initialization_hash_poseidon2_0_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_salted_initialization_hash_poseidon2_0_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::address_derivation_partial_address_domain_separator,
        ColumnAndShifts::address_derivation_salt,
        ColumnAndShifts::address_derivation_init_hash,
        ColumnAndShifts::address_derivation_salted_init_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_salted_initialization_hash_poseidon2_0_settings =
    lookup_settings<lookup_address_derivation_salted_initialization_hash_poseidon2_0_settings_>;
template <typename FF_>
using lookup_address_derivation_salted_initialization_hash_poseidon2_0_relation =
    lookup_relation_base<FF_, lookup_address_derivation_salted_initialization_hash_poseidon2_0_settings>;

/////////////////// lookup_address_derivation_salted_initialization_hash_poseidon2_1 ///////////////////

struct lookup_address_derivation_salted_initialization_hash_poseidon2_1_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_SALTED_INITIALIZATION_HASH_POSEIDON2_1";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_address_derivation_salted_initialization_hash_poseidon2_1_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_salted_initialization_hash_poseidon2_1_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::address_derivation_deployer_addr,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_salted_init_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_salted_initialization_hash_poseidon2_1_settings =
    lookup_settings<lookup_address_derivation_salted_initialization_hash_poseidon2_1_settings_>;
template <typename FF_>
using lookup_address_derivation_salted_initialization_hash_poseidon2_1_relation =
    lookup_relation_base<FF_, lookup_address_derivation_salted_initialization_hash_poseidon2_1_settings>;

/////////////////// lookup_address_derivation_partial_address_poseidon2 ///////////////////

struct lookup_address_derivation_partial_address_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PARTIAL_ADDRESS_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_address_derivation_partial_address_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_partial_address_poseidon2_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::address_derivation_partial_address_domain_separator,
        ColumnAndShifts::address_derivation_class_id,
        ColumnAndShifts::address_derivation_salted_init_hash,
        ColumnAndShifts::address_derivation_partial_address
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_partial_address_poseidon2_settings =
    lookup_settings<lookup_address_derivation_partial_address_poseidon2_settings_>;
template <typename FF_>
using lookup_address_derivation_partial_address_poseidon2_relation =
    lookup_relation_base<FF_, lookup_address_derivation_partial_address_poseidon2_settings>;

/////////////////// lookup_address_derivation_public_keys_hash_poseidon2_0 ///////////////////

struct lookup_address_derivation_public_keys_hash_poseidon2_0_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PUBLIC_KEYS_HASH_POSEIDON2_0";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_start;
    static constexpr Column COUNTS = Column::lookup_address_derivation_public_keys_hash_poseidon2_0_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_public_keys_hash_poseidon2_0_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::address_derivation_public_keys_hash_domain_separator,
        ColumnAndShifts::address_derivation_nullifier_key_x,
        ColumnAndShifts::address_derivation_nullifier_key_y,
        ColumnAndShifts::address_derivation_public_keys_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_public_keys_hash_poseidon2_0_settings =
    lookup_settings<lookup_address_derivation_public_keys_hash_poseidon2_0_settings_>;
template <typename FF_>
using lookup_address_derivation_public_keys_hash_poseidon2_0_relation =
    lookup_relation_base<FF_, lookup_address_derivation_public_keys_hash_poseidon2_0_settings>;

/////////////////// lookup_address_derivation_public_keys_hash_poseidon2_1 ///////////////////

struct lookup_address_derivation_public_keys_hash_poseidon2_1_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PUBLIC_KEYS_HASH_POSEIDON2_1";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_sel;
    static constexpr Column COUNTS = Column::lookup_address_derivation_public_keys_hash_poseidon2_1_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_public_keys_hash_poseidon2_1_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_incoming_viewing_key_x,
        ColumnAndShifts::address_derivation_incoming_viewing_key_y,
        ColumnAndShifts::address_derivation_public_keys_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_public_keys_hash_poseidon2_1_settings =
    lookup_settings<lookup_address_derivation_public_keys_hash_poseidon2_1_settings_>;
template <typename FF_>
using lookup_address_derivation_public_keys_hash_poseidon2_1_relation =
    lookup_relation_base<FF_, lookup_address_derivation_public_keys_hash_poseidon2_1_settings>;

/////////////////// lookup_address_derivation_public_keys_hash_poseidon2_2 ///////////////////

struct lookup_address_derivation_public_keys_hash_poseidon2_2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PUBLIC_KEYS_HASH_POSEIDON2_2";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_sel;
    static constexpr Column COUNTS = Column::lookup_address_derivation_public_keys_hash_poseidon2_2_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_public_keys_hash_poseidon2_2_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_outgoing_viewing_key_x,
        ColumnAndShifts::address_derivation_outgoing_viewing_key_y,
        ColumnAndShifts::address_derivation_public_keys_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_public_keys_hash_poseidon2_2_settings =
    lookup_settings<lookup_address_derivation_public_keys_hash_poseidon2_2_settings_>;
template <typename FF_>
using lookup_address_derivation_public_keys_hash_poseidon2_2_relation =
    lookup_relation_base<FF_, lookup_address_derivation_public_keys_hash_poseidon2_2_settings>;

/////////////////// lookup_address_derivation_public_keys_hash_poseidon2_3 ///////////////////

struct lookup_address_derivation_public_keys_hash_poseidon2_3_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PUBLIC_KEYS_HASH_POSEIDON2_3";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_sel;
    static constexpr Column COUNTS = Column::lookup_address_derivation_public_keys_hash_poseidon2_3_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_public_keys_hash_poseidon2_3_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_tagging_key_x,
        ColumnAndShifts::address_derivation_tagging_key_y,
        ColumnAndShifts::address_derivation_public_keys_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_public_keys_hash_poseidon2_3_settings =
    lookup_settings<lookup_address_derivation_public_keys_hash_poseidon2_3_settings_>;
template <typename FF_>
using lookup_address_derivation_public_keys_hash_poseidon2_3_relation =
    lookup_relation_base<FF_, lookup_address_derivation_public_keys_hash_poseidon2_3_settings>;

/////////////////// lookup_address_derivation_public_keys_hash_poseidon2_4 ///////////////////

struct lookup_address_derivation_public_keys_hash_poseidon2_4_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PUBLIC_KEYS_HASH_POSEIDON2_4";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_address_derivation_public_keys_hash_poseidon2_4_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_public_keys_hash_poseidon2_4_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_public_keys_hash
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_public_keys_hash_poseidon2_4_settings =
    lookup_settings<lookup_address_derivation_public_keys_hash_poseidon2_4_settings_>;
template <typename FF_>
using lookup_address_derivation_public_keys_hash_poseidon2_4_relation =
    lookup_relation_base<FF_, lookup_address_derivation_public_keys_hash_poseidon2_4_settings>;

/////////////////// lookup_address_derivation_preaddress_poseidon2 ///////////////////

struct lookup_address_derivation_preaddress_poseidon2_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PREADDRESS_POSEIDON2";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::poseidon2_hash_end;
    static constexpr Column COUNTS = Column::lookup_address_derivation_preaddress_poseidon2_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_preaddress_poseidon2_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::address_derivation_preaddress_domain_separator,
        ColumnAndShifts::address_derivation_public_keys_hash,
        ColumnAndShifts::address_derivation_partial_address,
        ColumnAndShifts::address_derivation_preaddress
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::poseidon2_hash_input_0,
        ColumnAndShifts::poseidon2_hash_input_1,
        ColumnAndShifts::poseidon2_hash_input_2,
        ColumnAndShifts::poseidon2_hash_output
    };
};

using lookup_address_derivation_preaddress_poseidon2_settings =
    lookup_settings<lookup_address_derivation_preaddress_poseidon2_settings_>;
template <typename FF_>
using lookup_address_derivation_preaddress_poseidon2_relation =
    lookup_relation_base<FF_, lookup_address_derivation_preaddress_poseidon2_settings>;

/////////////////// lookup_address_derivation_preaddress_scalar_mul ///////////////////

struct lookup_address_derivation_preaddress_scalar_mul_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_PREADDRESS_SCALAR_MUL";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 7;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::scalar_mul_start;
    static constexpr Column COUNTS = Column::lookup_address_derivation_preaddress_scalar_mul_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_preaddress_scalar_mul_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::address_derivation_preaddress,
        ColumnAndShifts::address_derivation_g1_x,
        ColumnAndShifts::address_derivation_g1_y,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_preaddress_public_key_x,
        ColumnAndShifts::address_derivation_preaddress_public_key_y,
        ColumnAndShifts::precomputed_zero
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::scalar_mul_scalar,    ColumnAndShifts::scalar_mul_point_x, ColumnAndShifts::scalar_mul_point_y,
        ColumnAndShifts::scalar_mul_point_inf, ColumnAndShifts::scalar_mul_res_x,   ColumnAndShifts::scalar_mul_res_y,
        ColumnAndShifts::scalar_mul_res_inf
    };
};

using lookup_address_derivation_preaddress_scalar_mul_settings =
    lookup_settings<lookup_address_derivation_preaddress_scalar_mul_settings_>;
template <typename FF_>
using lookup_address_derivation_preaddress_scalar_mul_relation =
    lookup_relation_base<FF_, lookup_address_derivation_preaddress_scalar_mul_settings>;

/////////////////// lookup_address_derivation_address_ecadd ///////////////////

struct lookup_address_derivation_address_ecadd_settings_ {
    static constexpr std::string_view NAME = "LOOKUP_ADDRESS_DERIVATION_ADDRESS_ECADD";
    static constexpr std::string_view RELATION_NAME = "address_derivation";
    static constexpr size_t LOOKUP_TUPLE_SIZE = 9;
    static constexpr Column SRC_SELECTOR = Column::address_derivation_sel;
    static constexpr Column DST_SELECTOR = Column::ecc_sel;
    static constexpr Column COUNTS = Column::lookup_address_derivation_address_ecadd_counts;
    static constexpr Column INVERSES = Column::lookup_address_derivation_address_ecadd_inv;
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        ColumnAndShifts::address_derivation_preaddress_public_key_x,
        ColumnAndShifts::address_derivation_preaddress_public_key_y,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_incoming_viewing_key_x,
        ColumnAndShifts::address_derivation_incoming_viewing_key_y,
        ColumnAndShifts::precomputed_zero,
        ColumnAndShifts::address_derivation_address,
        ColumnAndShifts::address_derivation_address_y,
        ColumnAndShifts::precomputed_zero
    };
    static constexpr std::array<ColumnAndShifts, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        ColumnAndShifts::ecc_p_x, ColumnAndShifts::ecc_p_y, ColumnAndShifts::ecc_p_is_inf,
        ColumnAndShifts::ecc_q_x, ColumnAndShifts::ecc_q_y, ColumnAndShifts::ecc_q_is_inf,
        ColumnAndShifts::ecc_r_x, ColumnAndShifts::ecc_r_y, ColumnAndShifts::ecc_r_is_inf
    };
};

using lookup_address_derivation_address_ecadd_settings =
    lookup_settings<lookup_address_derivation_address_ecadd_settings_>;
template <typename FF_>
using lookup_address_derivation_address_ecadd_relation =
    lookup_relation_base<FF_, lookup_address_derivation_address_ecadd_settings>;

} // namespace bb::avm2
