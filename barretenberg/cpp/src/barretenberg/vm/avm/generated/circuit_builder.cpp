// AUTOGENERATED FILE
#include "barretenberg/vm/avm/generated/circuit_builder.hpp"

#include <mutex>

#include "barretenberg/common/constexpr_utils.hpp"
#include "barretenberg/common/thread.hpp"
#include "barretenberg/common/throw_or_abort.hpp"
#include "barretenberg/ecc/curves/bn254/fr.hpp"
#include "barretenberg/honk/proof_system/logderivative_library.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

namespace bb {

AvmCircuitBuilder::ProverPolynomials AvmCircuitBuilder::compute_polynomials() const
{
    const auto num_rows = get_circuit_subgroup_size();
    ProverPolynomials polys;

    // Allocate mem for each column
    for (auto& poly : polys.get_all()) {
        poly = Polynomial(num_rows);
    }

    for (size_t i = 0; i < rows.size(); i++) {
        polys.byte_lookup_sel_bin[i] = rows[i].byte_lookup_sel_bin;
        polys.byte_lookup_table_byte_lengths[i] = rows[i].byte_lookup_table_byte_lengths;
        polys.byte_lookup_table_in_tags[i] = rows[i].byte_lookup_table_in_tags;
        polys.byte_lookup_table_input_a[i] = rows[i].byte_lookup_table_input_a;
        polys.byte_lookup_table_input_b[i] = rows[i].byte_lookup_table_input_b;
        polys.byte_lookup_table_op_id[i] = rows[i].byte_lookup_table_op_id;
        polys.byte_lookup_table_output[i] = rows[i].byte_lookup_table_output;
        polys.gas_base_da_gas_fixed_table[i] = rows[i].gas_base_da_gas_fixed_table;
        polys.gas_base_l2_gas_fixed_table[i] = rows[i].gas_base_l2_gas_fixed_table;
        polys.gas_dyn_da_gas_fixed_table[i] = rows[i].gas_dyn_da_gas_fixed_table;
        polys.gas_dyn_l2_gas_fixed_table[i] = rows[i].gas_dyn_l2_gas_fixed_table;
        polys.gas_sel_gas_cost[i] = rows[i].gas_sel_gas_cost;
        polys.main_clk[i] = rows[i].main_clk;
        polys.main_sel_first[i] = rows[i].main_sel_first;
        polys.main_zeroes[i] = rows[i].main_zeroes;
        polys.powers_power_of_2[i] = rows[i].powers_power_of_2;
        polys.main_kernel_inputs[i] = rows[i].main_kernel_inputs;
        polys.main_kernel_value_out[i] = rows[i].main_kernel_value_out;
        polys.main_kernel_side_effect_out[i] = rows[i].main_kernel_side_effect_out;
        polys.main_kernel_metadata_out[i] = rows[i].main_kernel_metadata_out;
        polys.main_calldata[i] = rows[i].main_calldata;
        polys.main_returndata[i] = rows[i].main_returndata;
        polys.alu_a_hi[i] = rows[i].alu_a_hi;
        polys.alu_a_lo[i] = rows[i].alu_a_lo;
        polys.alu_b_hi[i] = rows[i].alu_b_hi;
        polys.alu_b_lo[i] = rows[i].alu_b_lo;
        polys.alu_borrow[i] = rows[i].alu_borrow;
        polys.alu_cf[i] = rows[i].alu_cf;
        polys.alu_clk[i] = rows[i].alu_clk;
        polys.alu_cmp_rng_ctr[i] = rows[i].alu_cmp_rng_ctr;
        polys.alu_div_u16_r0[i] = rows[i].alu_div_u16_r0;
        polys.alu_div_u16_r1[i] = rows[i].alu_div_u16_r1;
        polys.alu_div_u16_r2[i] = rows[i].alu_div_u16_r2;
        polys.alu_div_u16_r3[i] = rows[i].alu_div_u16_r3;
        polys.alu_div_u16_r4[i] = rows[i].alu_div_u16_r4;
        polys.alu_div_u16_r5[i] = rows[i].alu_div_u16_r5;
        polys.alu_div_u16_r6[i] = rows[i].alu_div_u16_r6;
        polys.alu_div_u16_r7[i] = rows[i].alu_div_u16_r7;
        polys.alu_divisor_hi[i] = rows[i].alu_divisor_hi;
        polys.alu_divisor_lo[i] = rows[i].alu_divisor_lo;
        polys.alu_ff_tag[i] = rows[i].alu_ff_tag;
        polys.alu_ia[i] = rows[i].alu_ia;
        polys.alu_ib[i] = rows[i].alu_ib;
        polys.alu_ic[i] = rows[i].alu_ic;
        polys.alu_in_tag[i] = rows[i].alu_in_tag;
        polys.alu_op_add[i] = rows[i].alu_op_add;
        polys.alu_op_cast[i] = rows[i].alu_op_cast;
        polys.alu_op_cast_prev[i] = rows[i].alu_op_cast_prev;
        polys.alu_op_div[i] = rows[i].alu_op_div;
        polys.alu_op_div_a_lt_b[i] = rows[i].alu_op_div_a_lt_b;
        polys.alu_op_div_std[i] = rows[i].alu_op_div_std;
        polys.alu_op_eq[i] = rows[i].alu_op_eq;
        polys.alu_op_eq_diff_inv[i] = rows[i].alu_op_eq_diff_inv;
        polys.alu_op_lt[i] = rows[i].alu_op_lt;
        polys.alu_op_lte[i] = rows[i].alu_op_lte;
        polys.alu_op_mul[i] = rows[i].alu_op_mul;
        polys.alu_op_not[i] = rows[i].alu_op_not;
        polys.alu_op_shl[i] = rows[i].alu_op_shl;
        polys.alu_op_shr[i] = rows[i].alu_op_shr;
        polys.alu_op_sub[i] = rows[i].alu_op_sub;
        polys.alu_p_a_borrow[i] = rows[i].alu_p_a_borrow;
        polys.alu_p_b_borrow[i] = rows[i].alu_p_b_borrow;
        polys.alu_p_sub_a_hi[i] = rows[i].alu_p_sub_a_hi;
        polys.alu_p_sub_a_lo[i] = rows[i].alu_p_sub_a_lo;
        polys.alu_p_sub_b_hi[i] = rows[i].alu_p_sub_b_hi;
        polys.alu_p_sub_b_lo[i] = rows[i].alu_p_sub_b_lo;
        polys.alu_partial_prod_hi[i] = rows[i].alu_partial_prod_hi;
        polys.alu_partial_prod_lo[i] = rows[i].alu_partial_prod_lo;
        polys.alu_quotient_hi[i] = rows[i].alu_quotient_hi;
        polys.alu_quotient_lo[i] = rows[i].alu_quotient_lo;
        polys.alu_remainder[i] = rows[i].alu_remainder;
        polys.alu_res_hi[i] = rows[i].alu_res_hi;
        polys.alu_res_lo[i] = rows[i].alu_res_lo;
        polys.alu_sel_alu[i] = rows[i].alu_sel_alu;
        polys.alu_sel_cmp[i] = rows[i].alu_sel_cmp;
        polys.alu_sel_div_rng_chk[i] = rows[i].alu_sel_div_rng_chk;
        polys.alu_sel_rng_chk[i] = rows[i].alu_sel_rng_chk;
        polys.alu_sel_rng_chk_lookup[i] = rows[i].alu_sel_rng_chk_lookup;
        polys.alu_sel_shift_which[i] = rows[i].alu_sel_shift_which;
        polys.alu_shift_lt_bit_len[i] = rows[i].alu_shift_lt_bit_len;
        polys.alu_t_sub_s_bits[i] = rows[i].alu_t_sub_s_bits;
        polys.alu_two_pow_s[i] = rows[i].alu_two_pow_s;
        polys.alu_two_pow_t_sub_s[i] = rows[i].alu_two_pow_t_sub_s;
        polys.alu_u128_tag[i] = rows[i].alu_u128_tag;
        polys.alu_u16_r0[i] = rows[i].alu_u16_r0;
        polys.alu_u16_r1[i] = rows[i].alu_u16_r1;
        polys.alu_u16_r10[i] = rows[i].alu_u16_r10;
        polys.alu_u16_r11[i] = rows[i].alu_u16_r11;
        polys.alu_u16_r12[i] = rows[i].alu_u16_r12;
        polys.alu_u16_r13[i] = rows[i].alu_u16_r13;
        polys.alu_u16_r14[i] = rows[i].alu_u16_r14;
        polys.alu_u16_r2[i] = rows[i].alu_u16_r2;
        polys.alu_u16_r3[i] = rows[i].alu_u16_r3;
        polys.alu_u16_r4[i] = rows[i].alu_u16_r4;
        polys.alu_u16_r5[i] = rows[i].alu_u16_r5;
        polys.alu_u16_r6[i] = rows[i].alu_u16_r6;
        polys.alu_u16_r7[i] = rows[i].alu_u16_r7;
        polys.alu_u16_r8[i] = rows[i].alu_u16_r8;
        polys.alu_u16_r9[i] = rows[i].alu_u16_r9;
        polys.alu_u16_tag[i] = rows[i].alu_u16_tag;
        polys.alu_u32_tag[i] = rows[i].alu_u32_tag;
        polys.alu_u64_tag[i] = rows[i].alu_u64_tag;
        polys.alu_u8_r0[i] = rows[i].alu_u8_r0;
        polys.alu_u8_r1[i] = rows[i].alu_u8_r1;
        polys.alu_u8_tag[i] = rows[i].alu_u8_tag;
        polys.binary_acc_ia[i] = rows[i].binary_acc_ia;
        polys.binary_acc_ib[i] = rows[i].binary_acc_ib;
        polys.binary_acc_ic[i] = rows[i].binary_acc_ic;
        polys.binary_clk[i] = rows[i].binary_clk;
        polys.binary_ia_bytes[i] = rows[i].binary_ia_bytes;
        polys.binary_ib_bytes[i] = rows[i].binary_ib_bytes;
        polys.binary_ic_bytes[i] = rows[i].binary_ic_bytes;
        polys.binary_in_tag[i] = rows[i].binary_in_tag;
        polys.binary_mem_tag_ctr[i] = rows[i].binary_mem_tag_ctr;
        polys.binary_mem_tag_ctr_inv[i] = rows[i].binary_mem_tag_ctr_inv;
        polys.binary_op_id[i] = rows[i].binary_op_id;
        polys.binary_sel_bin[i] = rows[i].binary_sel_bin;
        polys.binary_start[i] = rows[i].binary_start;
        polys.conversion_clk[i] = rows[i].conversion_clk;
        polys.conversion_input[i] = rows[i].conversion_input;
        polys.conversion_num_limbs[i] = rows[i].conversion_num_limbs;
        polys.conversion_radix[i] = rows[i].conversion_radix;
        polys.conversion_sel_to_radix_le[i] = rows[i].conversion_sel_to_radix_le;
        polys.keccakf1600_clk[i] = rows[i].keccakf1600_clk;
        polys.keccakf1600_input[i] = rows[i].keccakf1600_input;
        polys.keccakf1600_output[i] = rows[i].keccakf1600_output;
        polys.keccakf1600_sel_keccakf1600[i] = rows[i].keccakf1600_sel_keccakf1600;
        polys.main_abs_da_rem_gas_hi[i] = rows[i].main_abs_da_rem_gas_hi;
        polys.main_abs_da_rem_gas_lo[i] = rows[i].main_abs_da_rem_gas_lo;
        polys.main_abs_l2_rem_gas_hi[i] = rows[i].main_abs_l2_rem_gas_hi;
        polys.main_abs_l2_rem_gas_lo[i] = rows[i].main_abs_l2_rem_gas_lo;
        polys.main_alu_in_tag[i] = rows[i].main_alu_in_tag;
        polys.main_base_da_gas_op_cost[i] = rows[i].main_base_da_gas_op_cost;
        polys.main_base_l2_gas_op_cost[i] = rows[i].main_base_l2_gas_op_cost;
        polys.main_bin_op_id[i] = rows[i].main_bin_op_id;
        polys.main_call_ptr[i] = rows[i].main_call_ptr;
        polys.main_da_gas_remaining[i] = rows[i].main_da_gas_remaining;
        polys.main_da_out_of_gas[i] = rows[i].main_da_out_of_gas;
        polys.main_dyn_da_gas_op_cost[i] = rows[i].main_dyn_da_gas_op_cost;
        polys.main_dyn_gas_multiplier[i] = rows[i].main_dyn_gas_multiplier;
        polys.main_dyn_l2_gas_op_cost[i] = rows[i].main_dyn_l2_gas_op_cost;
        polys.main_emit_l2_to_l1_msg_write_offset[i] = rows[i].main_emit_l2_to_l1_msg_write_offset;
        polys.main_emit_note_hash_write_offset[i] = rows[i].main_emit_note_hash_write_offset;
        polys.main_emit_nullifier_write_offset[i] = rows[i].main_emit_nullifier_write_offset;
        polys.main_emit_unencrypted_log_write_offset[i] = rows[i].main_emit_unencrypted_log_write_offset;
        polys.main_ia[i] = rows[i].main_ia;
        polys.main_ib[i] = rows[i].main_ib;
        polys.main_ic[i] = rows[i].main_ic;
        polys.main_id[i] = rows[i].main_id;
        polys.main_id_zero[i] = rows[i].main_id_zero;
        polys.main_ind_addr_a[i] = rows[i].main_ind_addr_a;
        polys.main_ind_addr_b[i] = rows[i].main_ind_addr_b;
        polys.main_ind_addr_c[i] = rows[i].main_ind_addr_c;
        polys.main_ind_addr_d[i] = rows[i].main_ind_addr_d;
        polys.main_internal_return_ptr[i] = rows[i].main_internal_return_ptr;
        polys.main_inv[i] = rows[i].main_inv;
        polys.main_kernel_in_offset[i] = rows[i].main_kernel_in_offset;
        polys.main_kernel_out_offset[i] = rows[i].main_kernel_out_offset;
        polys.main_l1_to_l2_msg_exists_write_offset[i] = rows[i].main_l1_to_l2_msg_exists_write_offset;
        polys.main_l2_gas_remaining[i] = rows[i].main_l2_gas_remaining;
        polys.main_l2_out_of_gas[i] = rows[i].main_l2_out_of_gas;
        polys.main_mem_addr_a[i] = rows[i].main_mem_addr_a;
        polys.main_mem_addr_b[i] = rows[i].main_mem_addr_b;
        polys.main_mem_addr_c[i] = rows[i].main_mem_addr_c;
        polys.main_mem_addr_d[i] = rows[i].main_mem_addr_d;
        polys.main_note_hash_exist_write_offset[i] = rows[i].main_note_hash_exist_write_offset;
        polys.main_nullifier_exists_write_offset[i] = rows[i].main_nullifier_exists_write_offset;
        polys.main_nullifier_non_exists_write_offset[i] = rows[i].main_nullifier_non_exists_write_offset;
        polys.main_op_err[i] = rows[i].main_op_err;
        polys.main_opcode_val[i] = rows[i].main_opcode_val;
        polys.main_pc[i] = rows[i].main_pc;
        polys.main_r_in_tag[i] = rows[i].main_r_in_tag;
        polys.main_rwa[i] = rows[i].main_rwa;
        polys.main_rwb[i] = rows[i].main_rwb;
        polys.main_rwc[i] = rows[i].main_rwc;
        polys.main_rwd[i] = rows[i].main_rwd;
        polys.main_sel_alu[i] = rows[i].main_sel_alu;
        polys.main_sel_bin[i] = rows[i].main_sel_bin;
        polys.main_sel_calldata[i] = rows[i].main_sel_calldata;
        polys.main_sel_execution_row[i] = rows[i].main_sel_execution_row;
        polys.main_sel_kernel_inputs[i] = rows[i].main_sel_kernel_inputs;
        polys.main_sel_kernel_out[i] = rows[i].main_sel_kernel_out;
        polys.main_sel_last[i] = rows[i].main_sel_last;
        polys.main_sel_mem_op_a[i] = rows[i].main_sel_mem_op_a;
        polys.main_sel_mem_op_b[i] = rows[i].main_sel_mem_op_b;
        polys.main_sel_mem_op_c[i] = rows[i].main_sel_mem_op_c;
        polys.main_sel_mem_op_d[i] = rows[i].main_sel_mem_op_d;
        polys.main_sel_mov_ia_to_ic[i] = rows[i].main_sel_mov_ia_to_ic;
        polys.main_sel_mov_ib_to_ic[i] = rows[i].main_sel_mov_ib_to_ic;
        polys.main_sel_op_add[i] = rows[i].main_sel_op_add;
        polys.main_sel_op_address[i] = rows[i].main_sel_op_address;
        polys.main_sel_op_and[i] = rows[i].main_sel_op_and;
        polys.main_sel_op_block_number[i] = rows[i].main_sel_op_block_number;
        polys.main_sel_op_calldata_copy[i] = rows[i].main_sel_op_calldata_copy;
        polys.main_sel_op_cast[i] = rows[i].main_sel_op_cast;
        polys.main_sel_op_chain_id[i] = rows[i].main_sel_op_chain_id;
        polys.main_sel_op_cmov[i] = rows[i].main_sel_op_cmov;
        polys.main_sel_op_coinbase[i] = rows[i].main_sel_op_coinbase;
        polys.main_sel_op_dagasleft[i] = rows[i].main_sel_op_dagasleft;
        polys.main_sel_op_div[i] = rows[i].main_sel_op_div;
        polys.main_sel_op_ecadd[i] = rows[i].main_sel_op_ecadd;
        polys.main_sel_op_emit_l2_to_l1_msg[i] = rows[i].main_sel_op_emit_l2_to_l1_msg;
        polys.main_sel_op_emit_note_hash[i] = rows[i].main_sel_op_emit_note_hash;
        polys.main_sel_op_emit_nullifier[i] = rows[i].main_sel_op_emit_nullifier;
        polys.main_sel_op_emit_unencrypted_log[i] = rows[i].main_sel_op_emit_unencrypted_log;
        polys.main_sel_op_eq[i] = rows[i].main_sel_op_eq;
        polys.main_sel_op_external_call[i] = rows[i].main_sel_op_external_call;
        polys.main_sel_op_external_return[i] = rows[i].main_sel_op_external_return;
        polys.main_sel_op_external_revert[i] = rows[i].main_sel_op_external_revert;
        polys.main_sel_op_fdiv[i] = rows[i].main_sel_op_fdiv;
        polys.main_sel_op_fee_per_da_gas[i] = rows[i].main_sel_op_fee_per_da_gas;
        polys.main_sel_op_fee_per_l2_gas[i] = rows[i].main_sel_op_fee_per_l2_gas;
        polys.main_sel_op_function_selector[i] = rows[i].main_sel_op_function_selector;
        polys.main_sel_op_get_contract_instance[i] = rows[i].main_sel_op_get_contract_instance;
        polys.main_sel_op_internal_call[i] = rows[i].main_sel_op_internal_call;
        polys.main_sel_op_internal_return[i] = rows[i].main_sel_op_internal_return;
        polys.main_sel_op_jump[i] = rows[i].main_sel_op_jump;
        polys.main_sel_op_jumpi[i] = rows[i].main_sel_op_jumpi;
        polys.main_sel_op_keccak[i] = rows[i].main_sel_op_keccak;
        polys.main_sel_op_l1_to_l2_msg_exists[i] = rows[i].main_sel_op_l1_to_l2_msg_exists;
        polys.main_sel_op_l2gasleft[i] = rows[i].main_sel_op_l2gasleft;
        polys.main_sel_op_lt[i] = rows[i].main_sel_op_lt;
        polys.main_sel_op_lte[i] = rows[i].main_sel_op_lte;
        polys.main_sel_op_mov[i] = rows[i].main_sel_op_mov;
        polys.main_sel_op_msm[i] = rows[i].main_sel_op_msm;
        polys.main_sel_op_mul[i] = rows[i].main_sel_op_mul;
        polys.main_sel_op_not[i] = rows[i].main_sel_op_not;
        polys.main_sel_op_note_hash_exists[i] = rows[i].main_sel_op_note_hash_exists;
        polys.main_sel_op_nullifier_exists[i] = rows[i].main_sel_op_nullifier_exists;
        polys.main_sel_op_or[i] = rows[i].main_sel_op_or;
        polys.main_sel_op_pedersen[i] = rows[i].main_sel_op_pedersen;
        polys.main_sel_op_pedersen_commit[i] = rows[i].main_sel_op_pedersen_commit;
        polys.main_sel_op_poseidon2[i] = rows[i].main_sel_op_poseidon2;
        polys.main_sel_op_radix_le[i] = rows[i].main_sel_op_radix_le;
        polys.main_sel_op_sender[i] = rows[i].main_sel_op_sender;
        polys.main_sel_op_set[i] = rows[i].main_sel_op_set;
        polys.main_sel_op_sha256[i] = rows[i].main_sel_op_sha256;
        polys.main_sel_op_shl[i] = rows[i].main_sel_op_shl;
        polys.main_sel_op_shr[i] = rows[i].main_sel_op_shr;
        polys.main_sel_op_sload[i] = rows[i].main_sel_op_sload;
        polys.main_sel_op_sstore[i] = rows[i].main_sel_op_sstore;
        polys.main_sel_op_storage_address[i] = rows[i].main_sel_op_storage_address;
        polys.main_sel_op_sub[i] = rows[i].main_sel_op_sub;
        polys.main_sel_op_timestamp[i] = rows[i].main_sel_op_timestamp;
        polys.main_sel_op_transaction_fee[i] = rows[i].main_sel_op_transaction_fee;
        polys.main_sel_op_version[i] = rows[i].main_sel_op_version;
        polys.main_sel_op_xor[i] = rows[i].main_sel_op_xor;
        polys.main_sel_q_kernel_lookup[i] = rows[i].main_sel_q_kernel_lookup;
        polys.main_sel_q_kernel_output_lookup[i] = rows[i].main_sel_q_kernel_output_lookup;
        polys.main_sel_resolve_ind_addr_a[i] = rows[i].main_sel_resolve_ind_addr_a;
        polys.main_sel_resolve_ind_addr_b[i] = rows[i].main_sel_resolve_ind_addr_b;
        polys.main_sel_resolve_ind_addr_c[i] = rows[i].main_sel_resolve_ind_addr_c;
        polys.main_sel_resolve_ind_addr_d[i] = rows[i].main_sel_resolve_ind_addr_d;
        polys.main_sel_returndata[i] = rows[i].main_sel_returndata;
        polys.main_sel_rng_16[i] = rows[i].main_sel_rng_16;
        polys.main_sel_rng_8[i] = rows[i].main_sel_rng_8;
        polys.main_sel_slice_gadget[i] = rows[i].main_sel_slice_gadget;
        polys.main_side_effect_counter[i] = rows[i].main_side_effect_counter;
        polys.main_sload_write_offset[i] = rows[i].main_sload_write_offset;
        polys.main_space_id[i] = rows[i].main_space_id;
        polys.main_sstore_write_offset[i] = rows[i].main_sstore_write_offset;
        polys.main_tag_err[i] = rows[i].main_tag_err;
        polys.main_w_in_tag[i] = rows[i].main_w_in_tag;
        polys.mem_addr[i] = rows[i].mem_addr;
        polys.mem_clk[i] = rows[i].mem_clk;
        polys.mem_diff_hi[i] = rows[i].mem_diff_hi;
        polys.mem_diff_lo[i] = rows[i].mem_diff_lo;
        polys.mem_diff_mid[i] = rows[i].mem_diff_mid;
        polys.mem_glob_addr[i] = rows[i].mem_glob_addr;
        polys.mem_last[i] = rows[i].mem_last;
        polys.mem_lastAccess[i] = rows[i].mem_lastAccess;
        polys.mem_one_min_inv[i] = rows[i].mem_one_min_inv;
        polys.mem_r_in_tag[i] = rows[i].mem_r_in_tag;
        polys.mem_rw[i] = rows[i].mem_rw;
        polys.mem_sel_mem[i] = rows[i].mem_sel_mem;
        polys.mem_sel_mov_ia_to_ic[i] = rows[i].mem_sel_mov_ia_to_ic;
        polys.mem_sel_mov_ib_to_ic[i] = rows[i].mem_sel_mov_ib_to_ic;
        polys.mem_sel_op_a[i] = rows[i].mem_sel_op_a;
        polys.mem_sel_op_b[i] = rows[i].mem_sel_op_b;
        polys.mem_sel_op_c[i] = rows[i].mem_sel_op_c;
        polys.mem_sel_op_cmov[i] = rows[i].mem_sel_op_cmov;
        polys.mem_sel_op_d[i] = rows[i].mem_sel_op_d;
        polys.mem_sel_op_poseidon_read_a[i] = rows[i].mem_sel_op_poseidon_read_a;
        polys.mem_sel_op_poseidon_read_b[i] = rows[i].mem_sel_op_poseidon_read_b;
        polys.mem_sel_op_poseidon_read_c[i] = rows[i].mem_sel_op_poseidon_read_c;
        polys.mem_sel_op_poseidon_read_d[i] = rows[i].mem_sel_op_poseidon_read_d;
        polys.mem_sel_op_poseidon_write_a[i] = rows[i].mem_sel_op_poseidon_write_a;
        polys.mem_sel_op_poseidon_write_b[i] = rows[i].mem_sel_op_poseidon_write_b;
        polys.mem_sel_op_poseidon_write_c[i] = rows[i].mem_sel_op_poseidon_write_c;
        polys.mem_sel_op_poseidon_write_d[i] = rows[i].mem_sel_op_poseidon_write_d;
        polys.mem_sel_op_slice[i] = rows[i].mem_sel_op_slice;
        polys.mem_sel_resolve_ind_addr_a[i] = rows[i].mem_sel_resolve_ind_addr_a;
        polys.mem_sel_resolve_ind_addr_b[i] = rows[i].mem_sel_resolve_ind_addr_b;
        polys.mem_sel_resolve_ind_addr_c[i] = rows[i].mem_sel_resolve_ind_addr_c;
        polys.mem_sel_resolve_ind_addr_d[i] = rows[i].mem_sel_resolve_ind_addr_d;
        polys.mem_sel_rng_chk[i] = rows[i].mem_sel_rng_chk;
        polys.mem_skip_check_tag[i] = rows[i].mem_skip_check_tag;
        polys.mem_space_id[i] = rows[i].mem_space_id;
        polys.mem_tag[i] = rows[i].mem_tag;
        polys.mem_tag_err[i] = rows[i].mem_tag_err;
        polys.mem_tsp[i] = rows[i].mem_tsp;
        polys.mem_val[i] = rows[i].mem_val;
        polys.mem_w_in_tag[i] = rows[i].mem_w_in_tag;
        polys.pedersen_clk[i] = rows[i].pedersen_clk;
        polys.pedersen_input[i] = rows[i].pedersen_input;
        polys.pedersen_output[i] = rows[i].pedersen_output;
        polys.pedersen_sel_pedersen[i] = rows[i].pedersen_sel_pedersen;
        polys.poseidon2_B_10_0[i] = rows[i].poseidon2_B_10_0;
        polys.poseidon2_B_10_1[i] = rows[i].poseidon2_B_10_1;
        polys.poseidon2_B_10_2[i] = rows[i].poseidon2_B_10_2;
        polys.poseidon2_B_10_3[i] = rows[i].poseidon2_B_10_3;
        polys.poseidon2_B_11_0[i] = rows[i].poseidon2_B_11_0;
        polys.poseidon2_B_11_1[i] = rows[i].poseidon2_B_11_1;
        polys.poseidon2_B_11_2[i] = rows[i].poseidon2_B_11_2;
        polys.poseidon2_B_11_3[i] = rows[i].poseidon2_B_11_3;
        polys.poseidon2_B_12_0[i] = rows[i].poseidon2_B_12_0;
        polys.poseidon2_B_12_1[i] = rows[i].poseidon2_B_12_1;
        polys.poseidon2_B_12_2[i] = rows[i].poseidon2_B_12_2;
        polys.poseidon2_B_12_3[i] = rows[i].poseidon2_B_12_3;
        polys.poseidon2_B_13_0[i] = rows[i].poseidon2_B_13_0;
        polys.poseidon2_B_13_1[i] = rows[i].poseidon2_B_13_1;
        polys.poseidon2_B_13_2[i] = rows[i].poseidon2_B_13_2;
        polys.poseidon2_B_13_3[i] = rows[i].poseidon2_B_13_3;
        polys.poseidon2_B_14_0[i] = rows[i].poseidon2_B_14_0;
        polys.poseidon2_B_14_1[i] = rows[i].poseidon2_B_14_1;
        polys.poseidon2_B_14_2[i] = rows[i].poseidon2_B_14_2;
        polys.poseidon2_B_14_3[i] = rows[i].poseidon2_B_14_3;
        polys.poseidon2_B_15_0[i] = rows[i].poseidon2_B_15_0;
        polys.poseidon2_B_15_1[i] = rows[i].poseidon2_B_15_1;
        polys.poseidon2_B_15_2[i] = rows[i].poseidon2_B_15_2;
        polys.poseidon2_B_15_3[i] = rows[i].poseidon2_B_15_3;
        polys.poseidon2_B_16_0[i] = rows[i].poseidon2_B_16_0;
        polys.poseidon2_B_16_1[i] = rows[i].poseidon2_B_16_1;
        polys.poseidon2_B_16_2[i] = rows[i].poseidon2_B_16_2;
        polys.poseidon2_B_16_3[i] = rows[i].poseidon2_B_16_3;
        polys.poseidon2_B_17_0[i] = rows[i].poseidon2_B_17_0;
        polys.poseidon2_B_17_1[i] = rows[i].poseidon2_B_17_1;
        polys.poseidon2_B_17_2[i] = rows[i].poseidon2_B_17_2;
        polys.poseidon2_B_17_3[i] = rows[i].poseidon2_B_17_3;
        polys.poseidon2_B_18_0[i] = rows[i].poseidon2_B_18_0;
        polys.poseidon2_B_18_1[i] = rows[i].poseidon2_B_18_1;
        polys.poseidon2_B_18_2[i] = rows[i].poseidon2_B_18_2;
        polys.poseidon2_B_18_3[i] = rows[i].poseidon2_B_18_3;
        polys.poseidon2_B_19_0[i] = rows[i].poseidon2_B_19_0;
        polys.poseidon2_B_19_1[i] = rows[i].poseidon2_B_19_1;
        polys.poseidon2_B_19_2[i] = rows[i].poseidon2_B_19_2;
        polys.poseidon2_B_19_3[i] = rows[i].poseidon2_B_19_3;
        polys.poseidon2_B_20_0[i] = rows[i].poseidon2_B_20_0;
        polys.poseidon2_B_20_1[i] = rows[i].poseidon2_B_20_1;
        polys.poseidon2_B_20_2[i] = rows[i].poseidon2_B_20_2;
        polys.poseidon2_B_20_3[i] = rows[i].poseidon2_B_20_3;
        polys.poseidon2_B_21_0[i] = rows[i].poseidon2_B_21_0;
        polys.poseidon2_B_21_1[i] = rows[i].poseidon2_B_21_1;
        polys.poseidon2_B_21_2[i] = rows[i].poseidon2_B_21_2;
        polys.poseidon2_B_21_3[i] = rows[i].poseidon2_B_21_3;
        polys.poseidon2_B_22_0[i] = rows[i].poseidon2_B_22_0;
        polys.poseidon2_B_22_1[i] = rows[i].poseidon2_B_22_1;
        polys.poseidon2_B_22_2[i] = rows[i].poseidon2_B_22_2;
        polys.poseidon2_B_22_3[i] = rows[i].poseidon2_B_22_3;
        polys.poseidon2_B_23_0[i] = rows[i].poseidon2_B_23_0;
        polys.poseidon2_B_23_1[i] = rows[i].poseidon2_B_23_1;
        polys.poseidon2_B_23_2[i] = rows[i].poseidon2_B_23_2;
        polys.poseidon2_B_23_3[i] = rows[i].poseidon2_B_23_3;
        polys.poseidon2_B_24_0[i] = rows[i].poseidon2_B_24_0;
        polys.poseidon2_B_24_1[i] = rows[i].poseidon2_B_24_1;
        polys.poseidon2_B_24_2[i] = rows[i].poseidon2_B_24_2;
        polys.poseidon2_B_24_3[i] = rows[i].poseidon2_B_24_3;
        polys.poseidon2_B_25_0[i] = rows[i].poseidon2_B_25_0;
        polys.poseidon2_B_25_1[i] = rows[i].poseidon2_B_25_1;
        polys.poseidon2_B_25_2[i] = rows[i].poseidon2_B_25_2;
        polys.poseidon2_B_25_3[i] = rows[i].poseidon2_B_25_3;
        polys.poseidon2_B_26_0[i] = rows[i].poseidon2_B_26_0;
        polys.poseidon2_B_26_1[i] = rows[i].poseidon2_B_26_1;
        polys.poseidon2_B_26_2[i] = rows[i].poseidon2_B_26_2;
        polys.poseidon2_B_26_3[i] = rows[i].poseidon2_B_26_3;
        polys.poseidon2_B_27_0[i] = rows[i].poseidon2_B_27_0;
        polys.poseidon2_B_27_1[i] = rows[i].poseidon2_B_27_1;
        polys.poseidon2_B_27_2[i] = rows[i].poseidon2_B_27_2;
        polys.poseidon2_B_27_3[i] = rows[i].poseidon2_B_27_3;
        polys.poseidon2_B_28_0[i] = rows[i].poseidon2_B_28_0;
        polys.poseidon2_B_28_1[i] = rows[i].poseidon2_B_28_1;
        polys.poseidon2_B_28_2[i] = rows[i].poseidon2_B_28_2;
        polys.poseidon2_B_28_3[i] = rows[i].poseidon2_B_28_3;
        polys.poseidon2_B_29_0[i] = rows[i].poseidon2_B_29_0;
        polys.poseidon2_B_29_1[i] = rows[i].poseidon2_B_29_1;
        polys.poseidon2_B_29_2[i] = rows[i].poseidon2_B_29_2;
        polys.poseidon2_B_29_3[i] = rows[i].poseidon2_B_29_3;
        polys.poseidon2_B_30_0[i] = rows[i].poseidon2_B_30_0;
        polys.poseidon2_B_30_1[i] = rows[i].poseidon2_B_30_1;
        polys.poseidon2_B_30_2[i] = rows[i].poseidon2_B_30_2;
        polys.poseidon2_B_30_3[i] = rows[i].poseidon2_B_30_3;
        polys.poseidon2_B_31_0[i] = rows[i].poseidon2_B_31_0;
        polys.poseidon2_B_31_1[i] = rows[i].poseidon2_B_31_1;
        polys.poseidon2_B_31_2[i] = rows[i].poseidon2_B_31_2;
        polys.poseidon2_B_31_3[i] = rows[i].poseidon2_B_31_3;
        polys.poseidon2_B_32_0[i] = rows[i].poseidon2_B_32_0;
        polys.poseidon2_B_32_1[i] = rows[i].poseidon2_B_32_1;
        polys.poseidon2_B_32_2[i] = rows[i].poseidon2_B_32_2;
        polys.poseidon2_B_32_3[i] = rows[i].poseidon2_B_32_3;
        polys.poseidon2_B_33_0[i] = rows[i].poseidon2_B_33_0;
        polys.poseidon2_B_33_1[i] = rows[i].poseidon2_B_33_1;
        polys.poseidon2_B_33_2[i] = rows[i].poseidon2_B_33_2;
        polys.poseidon2_B_33_3[i] = rows[i].poseidon2_B_33_3;
        polys.poseidon2_B_34_0[i] = rows[i].poseidon2_B_34_0;
        polys.poseidon2_B_34_1[i] = rows[i].poseidon2_B_34_1;
        polys.poseidon2_B_34_2[i] = rows[i].poseidon2_B_34_2;
        polys.poseidon2_B_34_3[i] = rows[i].poseidon2_B_34_3;
        polys.poseidon2_B_35_0[i] = rows[i].poseidon2_B_35_0;
        polys.poseidon2_B_35_1[i] = rows[i].poseidon2_B_35_1;
        polys.poseidon2_B_35_2[i] = rows[i].poseidon2_B_35_2;
        polys.poseidon2_B_35_3[i] = rows[i].poseidon2_B_35_3;
        polys.poseidon2_B_36_0[i] = rows[i].poseidon2_B_36_0;
        polys.poseidon2_B_36_1[i] = rows[i].poseidon2_B_36_1;
        polys.poseidon2_B_36_2[i] = rows[i].poseidon2_B_36_2;
        polys.poseidon2_B_36_3[i] = rows[i].poseidon2_B_36_3;
        polys.poseidon2_B_37_0[i] = rows[i].poseidon2_B_37_0;
        polys.poseidon2_B_37_1[i] = rows[i].poseidon2_B_37_1;
        polys.poseidon2_B_37_2[i] = rows[i].poseidon2_B_37_2;
        polys.poseidon2_B_37_3[i] = rows[i].poseidon2_B_37_3;
        polys.poseidon2_B_38_0[i] = rows[i].poseidon2_B_38_0;
        polys.poseidon2_B_38_1[i] = rows[i].poseidon2_B_38_1;
        polys.poseidon2_B_38_2[i] = rows[i].poseidon2_B_38_2;
        polys.poseidon2_B_38_3[i] = rows[i].poseidon2_B_38_3;
        polys.poseidon2_B_39_0[i] = rows[i].poseidon2_B_39_0;
        polys.poseidon2_B_39_1[i] = rows[i].poseidon2_B_39_1;
        polys.poseidon2_B_39_2[i] = rows[i].poseidon2_B_39_2;
        polys.poseidon2_B_39_3[i] = rows[i].poseidon2_B_39_3;
        polys.poseidon2_B_40_0[i] = rows[i].poseidon2_B_40_0;
        polys.poseidon2_B_40_1[i] = rows[i].poseidon2_B_40_1;
        polys.poseidon2_B_40_2[i] = rows[i].poseidon2_B_40_2;
        polys.poseidon2_B_40_3[i] = rows[i].poseidon2_B_40_3;
        polys.poseidon2_B_41_0[i] = rows[i].poseidon2_B_41_0;
        polys.poseidon2_B_41_1[i] = rows[i].poseidon2_B_41_1;
        polys.poseidon2_B_41_2[i] = rows[i].poseidon2_B_41_2;
        polys.poseidon2_B_41_3[i] = rows[i].poseidon2_B_41_3;
        polys.poseidon2_B_42_0[i] = rows[i].poseidon2_B_42_0;
        polys.poseidon2_B_42_1[i] = rows[i].poseidon2_B_42_1;
        polys.poseidon2_B_42_2[i] = rows[i].poseidon2_B_42_2;
        polys.poseidon2_B_42_3[i] = rows[i].poseidon2_B_42_3;
        polys.poseidon2_B_43_0[i] = rows[i].poseidon2_B_43_0;
        polys.poseidon2_B_43_1[i] = rows[i].poseidon2_B_43_1;
        polys.poseidon2_B_43_2[i] = rows[i].poseidon2_B_43_2;
        polys.poseidon2_B_43_3[i] = rows[i].poseidon2_B_43_3;
        polys.poseidon2_B_44_0[i] = rows[i].poseidon2_B_44_0;
        polys.poseidon2_B_44_1[i] = rows[i].poseidon2_B_44_1;
        polys.poseidon2_B_44_2[i] = rows[i].poseidon2_B_44_2;
        polys.poseidon2_B_44_3[i] = rows[i].poseidon2_B_44_3;
        polys.poseidon2_B_45_0[i] = rows[i].poseidon2_B_45_0;
        polys.poseidon2_B_45_1[i] = rows[i].poseidon2_B_45_1;
        polys.poseidon2_B_45_2[i] = rows[i].poseidon2_B_45_2;
        polys.poseidon2_B_45_3[i] = rows[i].poseidon2_B_45_3;
        polys.poseidon2_B_46_0[i] = rows[i].poseidon2_B_46_0;
        polys.poseidon2_B_46_1[i] = rows[i].poseidon2_B_46_1;
        polys.poseidon2_B_46_2[i] = rows[i].poseidon2_B_46_2;
        polys.poseidon2_B_46_3[i] = rows[i].poseidon2_B_46_3;
        polys.poseidon2_B_47_0[i] = rows[i].poseidon2_B_47_0;
        polys.poseidon2_B_47_1[i] = rows[i].poseidon2_B_47_1;
        polys.poseidon2_B_47_2[i] = rows[i].poseidon2_B_47_2;
        polys.poseidon2_B_47_3[i] = rows[i].poseidon2_B_47_3;
        polys.poseidon2_B_48_0[i] = rows[i].poseidon2_B_48_0;
        polys.poseidon2_B_48_1[i] = rows[i].poseidon2_B_48_1;
        polys.poseidon2_B_48_2[i] = rows[i].poseidon2_B_48_2;
        polys.poseidon2_B_48_3[i] = rows[i].poseidon2_B_48_3;
        polys.poseidon2_B_49_0[i] = rows[i].poseidon2_B_49_0;
        polys.poseidon2_B_49_1[i] = rows[i].poseidon2_B_49_1;
        polys.poseidon2_B_49_2[i] = rows[i].poseidon2_B_49_2;
        polys.poseidon2_B_49_3[i] = rows[i].poseidon2_B_49_3;
        polys.poseidon2_B_4_0[i] = rows[i].poseidon2_B_4_0;
        polys.poseidon2_B_4_1[i] = rows[i].poseidon2_B_4_1;
        polys.poseidon2_B_4_2[i] = rows[i].poseidon2_B_4_2;
        polys.poseidon2_B_4_3[i] = rows[i].poseidon2_B_4_3;
        polys.poseidon2_B_50_0[i] = rows[i].poseidon2_B_50_0;
        polys.poseidon2_B_50_1[i] = rows[i].poseidon2_B_50_1;
        polys.poseidon2_B_50_2[i] = rows[i].poseidon2_B_50_2;
        polys.poseidon2_B_50_3[i] = rows[i].poseidon2_B_50_3;
        polys.poseidon2_B_51_0[i] = rows[i].poseidon2_B_51_0;
        polys.poseidon2_B_51_1[i] = rows[i].poseidon2_B_51_1;
        polys.poseidon2_B_51_2[i] = rows[i].poseidon2_B_51_2;
        polys.poseidon2_B_51_3[i] = rows[i].poseidon2_B_51_3;
        polys.poseidon2_B_52_0[i] = rows[i].poseidon2_B_52_0;
        polys.poseidon2_B_52_1[i] = rows[i].poseidon2_B_52_1;
        polys.poseidon2_B_52_2[i] = rows[i].poseidon2_B_52_2;
        polys.poseidon2_B_52_3[i] = rows[i].poseidon2_B_52_3;
        polys.poseidon2_B_53_0[i] = rows[i].poseidon2_B_53_0;
        polys.poseidon2_B_53_1[i] = rows[i].poseidon2_B_53_1;
        polys.poseidon2_B_53_2[i] = rows[i].poseidon2_B_53_2;
        polys.poseidon2_B_53_3[i] = rows[i].poseidon2_B_53_3;
        polys.poseidon2_B_54_0[i] = rows[i].poseidon2_B_54_0;
        polys.poseidon2_B_54_1[i] = rows[i].poseidon2_B_54_1;
        polys.poseidon2_B_54_2[i] = rows[i].poseidon2_B_54_2;
        polys.poseidon2_B_54_3[i] = rows[i].poseidon2_B_54_3;
        polys.poseidon2_B_55_0[i] = rows[i].poseidon2_B_55_0;
        polys.poseidon2_B_55_1[i] = rows[i].poseidon2_B_55_1;
        polys.poseidon2_B_55_2[i] = rows[i].poseidon2_B_55_2;
        polys.poseidon2_B_55_3[i] = rows[i].poseidon2_B_55_3;
        polys.poseidon2_B_56_0[i] = rows[i].poseidon2_B_56_0;
        polys.poseidon2_B_56_1[i] = rows[i].poseidon2_B_56_1;
        polys.poseidon2_B_56_2[i] = rows[i].poseidon2_B_56_2;
        polys.poseidon2_B_56_3[i] = rows[i].poseidon2_B_56_3;
        polys.poseidon2_B_57_0[i] = rows[i].poseidon2_B_57_0;
        polys.poseidon2_B_57_1[i] = rows[i].poseidon2_B_57_1;
        polys.poseidon2_B_57_2[i] = rows[i].poseidon2_B_57_2;
        polys.poseidon2_B_57_3[i] = rows[i].poseidon2_B_57_3;
        polys.poseidon2_B_58_0[i] = rows[i].poseidon2_B_58_0;
        polys.poseidon2_B_58_1[i] = rows[i].poseidon2_B_58_1;
        polys.poseidon2_B_58_2[i] = rows[i].poseidon2_B_58_2;
        polys.poseidon2_B_58_3[i] = rows[i].poseidon2_B_58_3;
        polys.poseidon2_B_59_0[i] = rows[i].poseidon2_B_59_0;
        polys.poseidon2_B_59_1[i] = rows[i].poseidon2_B_59_1;
        polys.poseidon2_B_59_2[i] = rows[i].poseidon2_B_59_2;
        polys.poseidon2_B_59_3[i] = rows[i].poseidon2_B_59_3;
        polys.poseidon2_B_5_0[i] = rows[i].poseidon2_B_5_0;
        polys.poseidon2_B_5_1[i] = rows[i].poseidon2_B_5_1;
        polys.poseidon2_B_5_2[i] = rows[i].poseidon2_B_5_2;
        polys.poseidon2_B_5_3[i] = rows[i].poseidon2_B_5_3;
        polys.poseidon2_B_6_0[i] = rows[i].poseidon2_B_6_0;
        polys.poseidon2_B_6_1[i] = rows[i].poseidon2_B_6_1;
        polys.poseidon2_B_6_2[i] = rows[i].poseidon2_B_6_2;
        polys.poseidon2_B_6_3[i] = rows[i].poseidon2_B_6_3;
        polys.poseidon2_B_7_0[i] = rows[i].poseidon2_B_7_0;
        polys.poseidon2_B_7_1[i] = rows[i].poseidon2_B_7_1;
        polys.poseidon2_B_7_2[i] = rows[i].poseidon2_B_7_2;
        polys.poseidon2_B_7_3[i] = rows[i].poseidon2_B_7_3;
        polys.poseidon2_B_8_0[i] = rows[i].poseidon2_B_8_0;
        polys.poseidon2_B_8_1[i] = rows[i].poseidon2_B_8_1;
        polys.poseidon2_B_8_2[i] = rows[i].poseidon2_B_8_2;
        polys.poseidon2_B_8_3[i] = rows[i].poseidon2_B_8_3;
        polys.poseidon2_B_9_0[i] = rows[i].poseidon2_B_9_0;
        polys.poseidon2_B_9_1[i] = rows[i].poseidon2_B_9_1;
        polys.poseidon2_B_9_2[i] = rows[i].poseidon2_B_9_2;
        polys.poseidon2_B_9_3[i] = rows[i].poseidon2_B_9_3;
        polys.poseidon2_EXT_LAYER_4[i] = rows[i].poseidon2_EXT_LAYER_4;
        polys.poseidon2_EXT_LAYER_5[i] = rows[i].poseidon2_EXT_LAYER_5;
        polys.poseidon2_EXT_LAYER_6[i] = rows[i].poseidon2_EXT_LAYER_6;
        polys.poseidon2_EXT_LAYER_7[i] = rows[i].poseidon2_EXT_LAYER_7;
        polys.poseidon2_T_0_4[i] = rows[i].poseidon2_T_0_4;
        polys.poseidon2_T_0_5[i] = rows[i].poseidon2_T_0_5;
        polys.poseidon2_T_0_6[i] = rows[i].poseidon2_T_0_6;
        polys.poseidon2_T_0_7[i] = rows[i].poseidon2_T_0_7;
        polys.poseidon2_T_1_4[i] = rows[i].poseidon2_T_1_4;
        polys.poseidon2_T_1_5[i] = rows[i].poseidon2_T_1_5;
        polys.poseidon2_T_1_6[i] = rows[i].poseidon2_T_1_6;
        polys.poseidon2_T_1_7[i] = rows[i].poseidon2_T_1_7;
        polys.poseidon2_T_2_4[i] = rows[i].poseidon2_T_2_4;
        polys.poseidon2_T_2_5[i] = rows[i].poseidon2_T_2_5;
        polys.poseidon2_T_2_6[i] = rows[i].poseidon2_T_2_6;
        polys.poseidon2_T_2_7[i] = rows[i].poseidon2_T_2_7;
        polys.poseidon2_T_3_4[i] = rows[i].poseidon2_T_3_4;
        polys.poseidon2_T_3_5[i] = rows[i].poseidon2_T_3_5;
        polys.poseidon2_T_3_6[i] = rows[i].poseidon2_T_3_6;
        polys.poseidon2_T_3_7[i] = rows[i].poseidon2_T_3_7;
        polys.poseidon2_T_60_4[i] = rows[i].poseidon2_T_60_4;
        polys.poseidon2_T_60_5[i] = rows[i].poseidon2_T_60_5;
        polys.poseidon2_T_60_6[i] = rows[i].poseidon2_T_60_6;
        polys.poseidon2_T_60_7[i] = rows[i].poseidon2_T_60_7;
        polys.poseidon2_T_61_4[i] = rows[i].poseidon2_T_61_4;
        polys.poseidon2_T_61_5[i] = rows[i].poseidon2_T_61_5;
        polys.poseidon2_T_61_6[i] = rows[i].poseidon2_T_61_6;
        polys.poseidon2_T_61_7[i] = rows[i].poseidon2_T_61_7;
        polys.poseidon2_T_62_4[i] = rows[i].poseidon2_T_62_4;
        polys.poseidon2_T_62_5[i] = rows[i].poseidon2_T_62_5;
        polys.poseidon2_T_62_6[i] = rows[i].poseidon2_T_62_6;
        polys.poseidon2_T_62_7[i] = rows[i].poseidon2_T_62_7;
        polys.poseidon2_T_63_4[i] = rows[i].poseidon2_T_63_4;
        polys.poseidon2_T_63_5[i] = rows[i].poseidon2_T_63_5;
        polys.poseidon2_T_63_6[i] = rows[i].poseidon2_T_63_6;
        polys.poseidon2_T_63_7[i] = rows[i].poseidon2_T_63_7;
        polys.poseidon2_a_0[i] = rows[i].poseidon2_a_0;
        polys.poseidon2_a_1[i] = rows[i].poseidon2_a_1;
        polys.poseidon2_a_2[i] = rows[i].poseidon2_a_2;
        polys.poseidon2_a_3[i] = rows[i].poseidon2_a_3;
        polys.poseidon2_b_0[i] = rows[i].poseidon2_b_0;
        polys.poseidon2_b_1[i] = rows[i].poseidon2_b_1;
        polys.poseidon2_b_2[i] = rows[i].poseidon2_b_2;
        polys.poseidon2_b_3[i] = rows[i].poseidon2_b_3;
        polys.poseidon2_clk[i] = rows[i].poseidon2_clk;
        polys.poseidon2_input_addr[i] = rows[i].poseidon2_input_addr;
        polys.poseidon2_mem_addr_read_a[i] = rows[i].poseidon2_mem_addr_read_a;
        polys.poseidon2_mem_addr_read_b[i] = rows[i].poseidon2_mem_addr_read_b;
        polys.poseidon2_mem_addr_read_c[i] = rows[i].poseidon2_mem_addr_read_c;
        polys.poseidon2_mem_addr_read_d[i] = rows[i].poseidon2_mem_addr_read_d;
        polys.poseidon2_mem_addr_write_a[i] = rows[i].poseidon2_mem_addr_write_a;
        polys.poseidon2_mem_addr_write_b[i] = rows[i].poseidon2_mem_addr_write_b;
        polys.poseidon2_mem_addr_write_c[i] = rows[i].poseidon2_mem_addr_write_c;
        polys.poseidon2_mem_addr_write_d[i] = rows[i].poseidon2_mem_addr_write_d;
        polys.poseidon2_output_addr[i] = rows[i].poseidon2_output_addr;
        polys.poseidon2_sel_poseidon_perm[i] = rows[i].poseidon2_sel_poseidon_perm;
        polys.range_check_clk[i] = rows[i].range_check_clk;
        polys.range_check_dyn_diff[i] = rows[i].range_check_dyn_diff;
        polys.range_check_dyn_rng_chk_bits[i] = rows[i].range_check_dyn_rng_chk_bits;
        polys.range_check_dyn_rng_chk_pow_2[i] = rows[i].range_check_dyn_rng_chk_pow_2;
        polys.range_check_is_lte_u112[i] = rows[i].range_check_is_lte_u112;
        polys.range_check_is_lte_u128[i] = rows[i].range_check_is_lte_u128;
        polys.range_check_is_lte_u16[i] = rows[i].range_check_is_lte_u16;
        polys.range_check_is_lte_u32[i] = rows[i].range_check_is_lte_u32;
        polys.range_check_is_lte_u48[i] = rows[i].range_check_is_lte_u48;
        polys.range_check_is_lte_u64[i] = rows[i].range_check_is_lte_u64;
        polys.range_check_is_lte_u80[i] = rows[i].range_check_is_lte_u80;
        polys.range_check_is_lte_u96[i] = rows[i].range_check_is_lte_u96;
        polys.range_check_rng_chk_bits[i] = rows[i].range_check_rng_chk_bits;
        polys.range_check_sel_lookup_0[i] = rows[i].range_check_sel_lookup_0;
        polys.range_check_sel_lookup_1[i] = rows[i].range_check_sel_lookup_1;
        polys.range_check_sel_lookup_2[i] = rows[i].range_check_sel_lookup_2;
        polys.range_check_sel_lookup_3[i] = rows[i].range_check_sel_lookup_3;
        polys.range_check_sel_lookup_4[i] = rows[i].range_check_sel_lookup_4;
        polys.range_check_sel_lookup_5[i] = rows[i].range_check_sel_lookup_5;
        polys.range_check_sel_lookup_6[i] = rows[i].range_check_sel_lookup_6;
        polys.range_check_sel_rng_chk[i] = rows[i].range_check_sel_rng_chk;
        polys.range_check_u16_r0[i] = rows[i].range_check_u16_r0;
        polys.range_check_u16_r1[i] = rows[i].range_check_u16_r1;
        polys.range_check_u16_r2[i] = rows[i].range_check_u16_r2;
        polys.range_check_u16_r3[i] = rows[i].range_check_u16_r3;
        polys.range_check_u16_r4[i] = rows[i].range_check_u16_r4;
        polys.range_check_u16_r5[i] = rows[i].range_check_u16_r5;
        polys.range_check_u16_r6[i] = rows[i].range_check_u16_r6;
        polys.range_check_u16_r7[i] = rows[i].range_check_u16_r7;
        polys.range_check_value[i] = rows[i].range_check_value;
        polys.sha256_clk[i] = rows[i].sha256_clk;
        polys.sha256_input[i] = rows[i].sha256_input;
        polys.sha256_output[i] = rows[i].sha256_output;
        polys.sha256_sel_sha256_compression[i] = rows[i].sha256_sel_sha256_compression;
        polys.sha256_state[i] = rows[i].sha256_state;
        polys.slice_addr[i] = rows[i].slice_addr;
        polys.slice_clk[i] = rows[i].slice_clk;
        polys.slice_cnt[i] = rows[i].slice_cnt;
        polys.slice_col_offset[i] = rows[i].slice_col_offset;
        polys.slice_one_min_inv[i] = rows[i].slice_one_min_inv;
        polys.slice_sel_cd_cpy[i] = rows[i].slice_sel_cd_cpy;
        polys.slice_sel_mem_active[i] = rows[i].slice_sel_mem_active;
        polys.slice_sel_return[i] = rows[i].slice_sel_return;
        polys.slice_sel_start[i] = rows[i].slice_sel_start;
        polys.slice_space_id[i] = rows[i].slice_space_id;
        polys.slice_val[i] = rows[i].slice_val;
        polys.lookup_rng_chk_pow_2_counts[i] = rows[i].lookup_rng_chk_pow_2_counts;
        polys.lookup_rng_chk_diff_counts[i] = rows[i].lookup_rng_chk_diff_counts;
        polys.lookup_rng_chk_0_counts[i] = rows[i].lookup_rng_chk_0_counts;
        polys.lookup_rng_chk_1_counts[i] = rows[i].lookup_rng_chk_1_counts;
        polys.lookup_rng_chk_2_counts[i] = rows[i].lookup_rng_chk_2_counts;
        polys.lookup_rng_chk_3_counts[i] = rows[i].lookup_rng_chk_3_counts;
        polys.lookup_rng_chk_4_counts[i] = rows[i].lookup_rng_chk_4_counts;
        polys.lookup_rng_chk_5_counts[i] = rows[i].lookup_rng_chk_5_counts;
        polys.lookup_rng_chk_6_counts[i] = rows[i].lookup_rng_chk_6_counts;
        polys.lookup_rng_chk_7_counts[i] = rows[i].lookup_rng_chk_7_counts;
        polys.lookup_pow_2_0_counts[i] = rows[i].lookup_pow_2_0_counts;
        polys.lookup_pow_2_1_counts[i] = rows[i].lookup_pow_2_1_counts;
        polys.lookup_u8_0_counts[i] = rows[i].lookup_u8_0_counts;
        polys.lookup_u8_1_counts[i] = rows[i].lookup_u8_1_counts;
        polys.lookup_u16_0_counts[i] = rows[i].lookup_u16_0_counts;
        polys.lookup_u16_1_counts[i] = rows[i].lookup_u16_1_counts;
        polys.lookup_u16_2_counts[i] = rows[i].lookup_u16_2_counts;
        polys.lookup_u16_3_counts[i] = rows[i].lookup_u16_3_counts;
        polys.lookup_u16_4_counts[i] = rows[i].lookup_u16_4_counts;
        polys.lookup_u16_5_counts[i] = rows[i].lookup_u16_5_counts;
        polys.lookup_u16_6_counts[i] = rows[i].lookup_u16_6_counts;
        polys.lookup_u16_7_counts[i] = rows[i].lookup_u16_7_counts;
        polys.lookup_u16_8_counts[i] = rows[i].lookup_u16_8_counts;
        polys.lookup_u16_9_counts[i] = rows[i].lookup_u16_9_counts;
        polys.lookup_u16_10_counts[i] = rows[i].lookup_u16_10_counts;
        polys.lookup_u16_11_counts[i] = rows[i].lookup_u16_11_counts;
        polys.lookup_u16_12_counts[i] = rows[i].lookup_u16_12_counts;
        polys.lookup_u16_13_counts[i] = rows[i].lookup_u16_13_counts;
        polys.lookup_u16_14_counts[i] = rows[i].lookup_u16_14_counts;
        polys.lookup_div_u16_0_counts[i] = rows[i].lookup_div_u16_0_counts;
        polys.lookup_div_u16_1_counts[i] = rows[i].lookup_div_u16_1_counts;
        polys.lookup_div_u16_2_counts[i] = rows[i].lookup_div_u16_2_counts;
        polys.lookup_div_u16_3_counts[i] = rows[i].lookup_div_u16_3_counts;
        polys.lookup_div_u16_4_counts[i] = rows[i].lookup_div_u16_4_counts;
        polys.lookup_div_u16_5_counts[i] = rows[i].lookup_div_u16_5_counts;
        polys.lookup_div_u16_6_counts[i] = rows[i].lookup_div_u16_6_counts;
        polys.lookup_div_u16_7_counts[i] = rows[i].lookup_div_u16_7_counts;
        polys.lookup_byte_lengths_counts[i] = rows[i].lookup_byte_lengths_counts;
        polys.lookup_byte_operations_counts[i] = rows[i].lookup_byte_operations_counts;
        polys.lookup_opcode_gas_counts[i] = rows[i].lookup_opcode_gas_counts;
        polys.range_check_l2_gas_hi_counts[i] = rows[i].range_check_l2_gas_hi_counts;
        polys.range_check_l2_gas_lo_counts[i] = rows[i].range_check_l2_gas_lo_counts;
        polys.range_check_da_gas_hi_counts[i] = rows[i].range_check_da_gas_hi_counts;
        polys.range_check_da_gas_lo_counts[i] = rows[i].range_check_da_gas_lo_counts;
        polys.kernel_output_lookup_counts[i] = rows[i].kernel_output_lookup_counts;
        polys.lookup_into_kernel_counts[i] = rows[i].lookup_into_kernel_counts;
        polys.lookup_cd_value_counts[i] = rows[i].lookup_cd_value_counts;
        polys.lookup_ret_value_counts[i] = rows[i].lookup_ret_value_counts;
        polys.incl_main_tag_err_counts[i] = rows[i].incl_main_tag_err_counts;
        polys.incl_mem_tag_err_counts[i] = rows[i].incl_mem_tag_err_counts;
        polys.lookup_mem_rng_chk_lo_counts[i] = rows[i].lookup_mem_rng_chk_lo_counts;
        polys.lookup_mem_rng_chk_mid_counts[i] = rows[i].lookup_mem_rng_chk_mid_counts;
        polys.lookup_mem_rng_chk_hi_counts[i] = rows[i].lookup_mem_rng_chk_hi_counts;
    }

    for (auto [shifted, to_be_shifted] : zip_view(polys.get_shifted(), polys.get_to_be_shifted())) {
        shifted = to_be_shifted.shifted();
    }

    return polys;
}

bool AvmCircuitBuilder::check_circuit() const
{
    const FF gamma = FF::random_element();
    const FF beta = FF::random_element();
    bb::RelationParameters<typename Flavor::FF> params{
        .eta = 0,
        .beta = beta,
        .gamma = gamma,
        .public_input_delta = 0,
        .lookup_grand_product_delta = 0,
        .beta_sqr = 0,
        .beta_cube = 0,
        .eccvm_set_permutation_delta = 0,
    };

    auto polys = compute_polynomials();
    const size_t num_rows = polys.get_polynomial_size();

    // Checks that we will run.
    using SignalErrorFn = const std::function<void(const std::string&)>&;
    std::vector<std::function<void(SignalErrorFn)>> checks;

    // Add relation checks.
    bb::constexpr_for<0, std::tuple_size_v<AvmFlavor::MainRelations>, 1>([&]<size_t i>() {
        using Relation = std::tuple_element_t<i, AvmFlavor::MainRelations>;
        checks.push_back([&](SignalErrorFn signal_error) {
            typename Relation::SumcheckArrayOfValuesOverSubrelations result;
            for (auto& r : result) {
                r = 0;
            }

            std::array<bool, result.size()> subrelation_failed = { false };
            for (size_t r = 0; r < num_rows; ++r) {
                Relation::accumulate(result, polys.get_row(r), {}, 1);
                for (size_t j = 0; j < result.size(); ++j) {
                    if (!subrelation_failed[j] && result[j] != 0) {
                        signal_error(format("Relation ",
                                            Relation::NAME,
                                            ", subrelation ",
                                            Relation::get_subrelation_label(j),
                                            " failed at row ",
                                            r));
                        // We will not check this subrelation for any other rows.
                        // Since the accumulation will keep being != 0.
                        subrelation_failed[j] = true;
                    }
                }
            }
        });
    });

    // Add calculation of logderivatives and lookup/permutation checks.
    bb::constexpr_for<0, std::tuple_size_v<AvmFlavor::LookupRelations>, 1>([&]<size_t i>() {
        using Relation = std::tuple_element_t<i, AvmFlavor::LookupRelations>;
        checks.push_back([&, num_rows](SignalErrorFn signal_error) {
            // Check the logderivative relation
            bb::compute_logderivative_inverse<Flavor, Relation>(polys, params, num_rows);

            typename Relation::SumcheckArrayOfValuesOverSubrelations lookup_result;

            for (auto& r : lookup_result) {
                r = 0;
            }
            for (size_t r = 0; r < num_rows; ++r) {
                Relation::accumulate(lookup_result, polys.get_row(r), params, 1);
            }
            for (auto r : lookup_result) {
                if (r != 0) {
                    signal_error(format("Lookup ", Relation::NAME, " failed."));
                }
            }
        });
    });

    std::string errors;
    std::mutex m;
    auto signal_error = [&](const std::string& error) {
        std::lock_guard<std::mutex> lock(m);
        errors += error + "\n";
    };
    bb::parallel_for(checks.size(), [&](size_t i) { checks[i](signal_error); });
    if (!errors.empty()) {
        throw_or_abort(errors);
    }

    return errors.empty();
}

} // namespace bb