// AUTOGENERATED FILE
#pragma once

#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <tuple>

namespace bb {

class perm_cmp_alu_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 6;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.cmp_sel_cmp == 1 || in.alu_cmp_gadget_sel == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_cmp_alu_inv,
                                     in.cmp_sel_cmp,
                                     in.cmp_sel_cmp,
                                     in.alu_cmp_gadget_sel,
                                     in.cmp_clk,
                                     in.cmp_input_a,
                                     in.cmp_input_b,
                                     in.cmp_result,
                                     in.cmp_op_eq,
                                     in.cmp_op_gt,
                                     in.alu_clk,
                                     in.alu_cmp_gadget_input_a,
                                     in.alu_cmp_gadget_input_b,
                                     in.alu_cmp_gadget_result,
                                     in.alu_op_eq,
                                     in.alu_cmp_gadget_gt);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_cmp_alu_inv,
                                     in.cmp_sel_cmp,
                                     in.cmp_sel_cmp,
                                     in.alu_cmp_gadget_sel,
                                     in.cmp_clk,
                                     in.cmp_input_a,
                                     in.cmp_input_b,
                                     in.cmp_result,
                                     in.cmp_op_eq,
                                     in.cmp_op_gt,
                                     in.alu_clk,
                                     in.alu_cmp_gadget_input_a,
                                     in.alu_cmp_gadget_input_b,
                                     in.alu_cmp_gadget_result,
                                     in.alu_op_eq,
                                     in.alu_cmp_gadget_gt);
    }
};

template <typename FF_>
class perm_cmp_alu_relation : public GenericPermutationRelation<perm_cmp_alu_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_CMP_ALU";
};
template <typename FF_> using perm_cmp_alu = GenericPermutation<perm_cmp_alu_permutation_settings, FF_>;

} // namespace bb