// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm {

/////////////////// perm_rng_alu ///////////////////

class perm_rng_alu_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 3;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::range_check_alu_rng_chk;
    static constexpr Column DST_SELECTOR = Column::alu_range_check_sel;
    static constexpr Column INVERSES = Column::perm_rng_alu_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._range_check_alu_rng_chk() == 1 || in._alu_range_check_sel() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in._perm_rng_alu_inv(),
                                     in._range_check_alu_rng_chk(),
                                     in._range_check_alu_rng_chk(),
                                     in._alu_range_check_sel(),
                                     in._range_check_clk(),
                                     in._range_check_value(),
                                     in._range_check_rng_chk_bits(),
                                     in._alu_clk(),
                                     in._alu_range_check_input_value(),
                                     in._alu_range_check_num_bits());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in._perm_rng_alu_inv(),
                                     in._range_check_alu_rng_chk(),
                                     in._range_check_alu_rng_chk(),
                                     in._alu_range_check_sel(),
                                     in._range_check_clk(),
                                     in._range_check_value(),
                                     in._range_check_rng_chk_bits(),
                                     in._alu_clk(),
                                     in._alu_range_check_input_value(),
                                     in._alu_range_check_num_bits());
    }
};

template <typename FF_>
class perm_rng_alu_relation : public GenericPermutationRelation<perm_rng_alu_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_RNG_ALU";
};
template <typename FF_> using perm_rng_alu = GenericPermutation<perm_rng_alu_permutation_settings, FF_>;

/////////////////// perm_cmp_alu ///////////////////

class perm_cmp_alu_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 7;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::cmp_sel_cmp;
    static constexpr Column DST_SELECTOR = Column::alu_cmp_gadget_sel;
    static constexpr Column INVERSES = Column::perm_cmp_alu_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._cmp_sel_cmp() == 1 || in._alu_cmp_gadget_sel() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in._perm_cmp_alu_inv(),
                                     in._cmp_sel_cmp(),
                                     in._cmp_sel_cmp(),
                                     in._alu_cmp_gadget_sel(),
                                     in._cmp_clk(),
                                     in._cmp_input_a(),
                                     in._cmp_input_b(),
                                     in._cmp_result(),
                                     in._cmp_op_eq(),
                                     in._cmp_op_gt(),
                                     in._cmp_op_non_ff_gt(),
                                     in._alu_clk(),
                                     in._alu_cmp_gadget_input_a(),
                                     in._alu_cmp_gadget_input_b(),
                                     in._alu_cmp_gadget_result(),
                                     in._alu_op_eq(),
                                     in._alu_cmp_gadget_gt(),
                                     in._alu_cmp_gadget_non_ff_gt());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in._perm_cmp_alu_inv(),
                                     in._cmp_sel_cmp(),
                                     in._cmp_sel_cmp(),
                                     in._alu_cmp_gadget_sel(),
                                     in._cmp_clk(),
                                     in._cmp_input_a(),
                                     in._cmp_input_b(),
                                     in._cmp_result(),
                                     in._cmp_op_eq(),
                                     in._cmp_op_gt(),
                                     in._cmp_op_non_ff_gt(),
                                     in._alu_clk(),
                                     in._alu_cmp_gadget_input_a(),
                                     in._alu_cmp_gadget_input_b(),
                                     in._alu_cmp_gadget_result(),
                                     in._alu_op_eq(),
                                     in._alu_cmp_gadget_gt(),
                                     in._alu_cmp_gadget_non_ff_gt());
    }
};

template <typename FF_>
class perm_cmp_alu_relation : public GenericPermutationRelation<perm_cmp_alu_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_CMP_ALU";
};
template <typename FF_> using perm_cmp_alu = GenericPermutation<perm_cmp_alu_permutation_settings, FF_>;

} // namespace bb::avm