// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm {

/////////////////// lookup_byte_lengths ///////////////////

class lookup_byte_lengths_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::binary_start;
    static constexpr Column DST_SELECTOR = Column::byte_lookup_sel_bin;
    static constexpr Column COUNTS = Column::lookup_byte_lengths_counts;
    static constexpr Column INVERSES = Column::lookup_byte_lengths_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::binary_in_tag,
                                                                           Column::binary_mem_tag_ctr };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::byte_lookup_table_in_tags,
                                                                           Column::byte_lookup_table_byte_lengths };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._binary_start() == 1 || in._byte_lookup_sel_bin() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._binary_start());
        const auto is_table_entry = View(in._byte_lookup_sel_bin());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_byte_lengths_inv(),
                                     in._lookup_byte_lengths_counts(),
                                     in._binary_start(),
                                     in._byte_lookup_sel_bin(),
                                     in._binary_in_tag(),
                                     in._binary_mem_tag_ctr(),
                                     in._byte_lookup_table_in_tags(),
                                     in._byte_lookup_table_byte_lengths());
    }
};

template <typename FF_>
class lookup_byte_lengths_relation : public GenericLookupRelation<lookup_byte_lengths_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_BYTE_LENGTHS";
};
template <typename FF_> using lookup_byte_lengths = GenericLookup<lookup_byte_lengths_lookup_settings, FF_>;

/////////////////// lookup_byte_operations ///////////////////

class lookup_byte_operations_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 4;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::binary_sel_bin;
    static constexpr Column DST_SELECTOR = Column::byte_lookup_sel_bin;
    static constexpr Column COUNTS = Column::lookup_byte_operations_counts;
    static constexpr Column INVERSES = Column::lookup_byte_operations_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        Column::binary_op_id, Column::binary_ia_bytes, Column::binary_ib_bytes, Column::binary_ic_bytes
    };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::byte_lookup_table_op_id,
                                                                           Column::byte_lookup_table_input_a,
                                                                           Column::byte_lookup_table_input_b,
                                                                           Column::byte_lookup_table_output };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._binary_sel_bin() == 1 || in._byte_lookup_sel_bin() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._binary_sel_bin());
        const auto is_table_entry = View(in._byte_lookup_sel_bin());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_byte_operations_inv(),
                                     in._lookup_byte_operations_counts(),
                                     in._binary_sel_bin(),
                                     in._byte_lookup_sel_bin(),
                                     in._binary_op_id(),
                                     in._binary_ia_bytes(),
                                     in._binary_ib_bytes(),
                                     in._binary_ic_bytes(),
                                     in._byte_lookup_table_op_id(),
                                     in._byte_lookup_table_input_a(),
                                     in._byte_lookup_table_input_b(),
                                     in._byte_lookup_table_output());
    }
};

template <typename FF_>
class lookup_byte_operations_relation : public GenericLookupRelation<lookup_byte_operations_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_BYTE_OPERATIONS";
};
template <typename FF_> using lookup_byte_operations = GenericLookup<lookup_byte_operations_lookup_settings, FF_>;

} // namespace bb::avm