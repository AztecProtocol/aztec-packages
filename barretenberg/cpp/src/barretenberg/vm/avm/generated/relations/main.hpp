// AUTOGENERATED FILE
#pragma once

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"

namespace bb::Avm_vm {

template <typename FF_> class mainImpl {
  public:
    using FF = FF_;

<<<<<<< HEAD
    static constexpr std::array<size_t, 113> SUBRELATION_PARTIAL_LENGTHS = {
        2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 2, 2
=======
    static constexpr std::array<size_t, 116> SUBRELATION_PARTIAL_LENGTHS = {
        2, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 4, 4, 3, 3, 3, 3, 4, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 3, 4, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 2, 2
>>>>>>> 036c90241a (9001: Constrain start and end gas)
    };

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& new_term,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        const auto constants_MEM_TAG_U1 = FF(1);
        const auto constants_MEM_TAG_FF = FF(7);
        const auto constants_misc_INTERNAL_CALL_SPACE_ID = FF(255);
        const auto main_KERNEL_INPUT_SELECTORS =
            (((((((((((new_term.main_sel_op_address + new_term.main_sel_op_storage_address) +
                      new_term.main_sel_op_sender) +
                     new_term.main_sel_op_function_selector) +
                    new_term.main_sel_op_transaction_fee) +
                   new_term.main_sel_op_chain_id) +
                  new_term.main_sel_op_version) +
                 new_term.main_sel_op_block_number) +
                new_term.main_sel_op_timestamp) +
               new_term.main_sel_op_fee_per_l2_gas) +
              new_term.main_sel_op_fee_per_da_gas) +
             new_term.main_sel_op_is_static_call);
        const auto main_KERNEL_OUTPUT_SELECTORS =
            ((((((((new_term.main_sel_op_note_hash_exists + new_term.main_sel_op_emit_note_hash) +
                   new_term.main_sel_op_nullifier_exists) +
                  new_term.main_sel_op_emit_nullifier) +
                 new_term.main_sel_op_l1_to_l2_msg_exists) +
                new_term.main_sel_op_emit_unencrypted_log) +
               new_term.main_sel_op_emit_l2_to_l1_msg) +
              new_term.main_sel_op_sload) +
             new_term.main_sel_op_sstore);
        const auto main_SEL_ALL_CTRL_FLOW =
            ((((((new_term.main_sel_op_jump + new_term.main_sel_op_jumpi) + new_term.main_sel_op_internal_call) +
                new_term.main_sel_op_internal_return) +
               new_term.main_sel_op_external_call) +
              new_term.main_sel_op_static_call) +
             new_term.main_sel_op_external_return);
        const auto main_SEL_ALU_R_TAG =
            (((((((((new_term.main_sel_op_add + new_term.main_sel_op_sub) + new_term.main_sel_op_mul) +
                   new_term.main_sel_op_div) +
                  new_term.main_sel_op_not) +
                 new_term.main_sel_op_eq) +
                new_term.main_sel_op_lt) +
               new_term.main_sel_op_lte) +
              new_term.main_sel_op_shr) +
             new_term.main_sel_op_shl);
        const auto main_SEL_ALU_W_TAG = new_term.main_sel_op_cast;
        const auto main_SEL_ALL_ALU = (main_SEL_ALU_R_TAG + main_SEL_ALU_W_TAG);
        const auto main_SEL_ALL_LEFTGAS = (new_term.main_sel_op_dagasleft + new_term.main_sel_op_l2gasleft);
        const auto main_SEL_ALL_BINARY =
            ((new_term.main_sel_op_and + new_term.main_sel_op_or) + new_term.main_sel_op_xor);
        const auto main_SEL_ALL_GADGET =
            (((((((new_term.main_sel_op_radix_le + new_term.main_sel_op_sha256) + new_term.main_sel_op_poseidon2) +
                 new_term.main_sel_op_keccak) +
                new_term.main_sel_op_pedersen) +
               new_term.main_sel_op_ecadd) +
              new_term.main_sel_op_pedersen_commit) +
             new_term.main_sel_op_msm);
        const auto main_SEL_ALL_MEMORY = (new_term.main_sel_op_mov + new_term.main_sel_op_set);
        const auto main_OPCODE_SELECTORS = ((((((((((new_term.main_sel_op_fdiv + new_term.main_sel_op_calldata_copy) +
                                                    new_term.main_sel_op_get_contract_instance) +
                                                   main_SEL_ALL_ALU) +
                                                  main_SEL_ALL_BINARY) +
                                                 main_SEL_ALL_MEMORY) +
                                                main_SEL_ALL_GADGET) +
                                               main_KERNEL_INPUT_SELECTORS) +
                                              main_KERNEL_OUTPUT_SELECTORS) +
                                             main_SEL_ALL_LEFTGAS) +
                                            main_SEL_ALL_CTRL_FLOW);
        const auto main_CUR_AND_NEXT_ARE_MAIN =
            (new_term.main_sel_execution_row * new_term.main_sel_execution_row_shift);

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_execution_row - main_OPCODE_SELECTORS);
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_execution_row * (FF(1) - new_term.main_sel_execution_row));
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_execution_end_shift -
                        ((new_term.main_sel_execution_row * (FF(1) - new_term.main_sel_execution_row_shift)) *
                         (FF(1) - new_term.main_sel_first)));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_address * (FF(1) - new_term.main_sel_op_address));
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_storage_address * (FF(1) - new_term.main_sel_op_storage_address));
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_sender * (FF(1) - new_term.main_sel_op_sender));
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_function_selector * (FF(1) - new_term.main_sel_op_function_selector));
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_transaction_fee * (FF(1) - new_term.main_sel_op_transaction_fee));
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_chain_id * (FF(1) - new_term.main_sel_op_chain_id));
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_version * (FF(1) - new_term.main_sel_op_version));
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_block_number * (FF(1) - new_term.main_sel_op_block_number));
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_timestamp * (FF(1) - new_term.main_sel_op_timestamp));
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_fee_per_l2_gas * (FF(1) - new_term.main_sel_op_fee_per_l2_gas));
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_fee_per_da_gas * (FF(1) - new_term.main_sel_op_fee_per_da_gas));
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_is_static_call * (FF(1) - new_term.main_sel_op_is_static_call));
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_l2gasleft * (FF(1) - new_term.main_sel_op_l2gasleft));
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_dagasleft * (FF(1) - new_term.main_sel_op_dagasleft));
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<17, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_note_hash_exists * (FF(1) - new_term.main_sel_op_note_hash_exists));
            tmp *= scaling_factor;
            std::get<17>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<18, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_emit_note_hash * (FF(1) - new_term.main_sel_op_emit_note_hash));
            tmp *= scaling_factor;
            std::get<18>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<19, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_nullifier_exists * (FF(1) - new_term.main_sel_op_nullifier_exists));
            tmp *= scaling_factor;
            std::get<19>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<20, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_emit_nullifier * (FF(1) - new_term.main_sel_op_emit_nullifier));
            tmp *= scaling_factor;
            std::get<20>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<21, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_l1_to_l2_msg_exists * (FF(1) - new_term.main_sel_op_l1_to_l2_msg_exists));
            tmp *= scaling_factor;
            std::get<21>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<22, ContainerOverSubrelations>;
            auto tmp =
                (new_term.main_sel_op_emit_unencrypted_log * (FF(1) - new_term.main_sel_op_emit_unencrypted_log));
            tmp *= scaling_factor;
            std::get<22>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<23, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_emit_l2_to_l1_msg * (FF(1) - new_term.main_sel_op_emit_l2_to_l1_msg));
            tmp *= scaling_factor;
            std::get<23>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<24, ContainerOverSubrelations>;
            auto tmp =
                (new_term.main_sel_op_get_contract_instance * (FF(1) - new_term.main_sel_op_get_contract_instance));
            tmp *= scaling_factor;
            std::get<24>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<25, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_sload * (FF(1) - new_term.main_sel_op_sload));
            tmp *= scaling_factor;
            std::get<25>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<26, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_sstore * (FF(1) - new_term.main_sel_op_sstore));
            tmp *= scaling_factor;
            std::get<26>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<27, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_radix_le * (FF(1) - new_term.main_sel_op_radix_le));
            tmp *= scaling_factor;
            std::get<27>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<28, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_sha256 * (FF(1) - new_term.main_sel_op_sha256));
            tmp *= scaling_factor;
            std::get<28>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<29, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_poseidon2 * (FF(1) - new_term.main_sel_op_poseidon2));
            tmp *= scaling_factor;
            std::get<29>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<30, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_keccak * (FF(1) - new_term.main_sel_op_keccak));
            tmp *= scaling_factor;
            std::get<30>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<31, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_pedersen * (FF(1) - new_term.main_sel_op_pedersen));
            tmp *= scaling_factor;
            std::get<31>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<32, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_ecadd * (FF(1) - new_term.main_sel_op_ecadd));
            tmp *= scaling_factor;
            std::get<32>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<33, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_pedersen_commit * (FF(1) - new_term.main_sel_op_pedersen_commit));
            tmp *= scaling_factor;
            std::get<33>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<34, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_msm * (FF(1) - new_term.main_sel_op_msm));
            tmp *= scaling_factor;
            std::get<34>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<35, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_add * (FF(1) - new_term.main_sel_op_add));
            tmp *= scaling_factor;
            std::get<35>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<36, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_sub * (FF(1) - new_term.main_sel_op_sub));
            tmp *= scaling_factor;
            std::get<36>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<37, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_mul * (FF(1) - new_term.main_sel_op_mul));
            tmp *= scaling_factor;
            std::get<37>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<38, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_div * (FF(1) - new_term.main_sel_op_div));
            tmp *= scaling_factor;
            std::get<38>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<39, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_fdiv * (FF(1) - new_term.main_sel_op_fdiv));
            tmp *= scaling_factor;
            std::get<39>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<40, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_not * (FF(1) - new_term.main_sel_op_not));
            tmp *= scaling_factor;
            std::get<40>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<41, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_eq * (FF(1) - new_term.main_sel_op_eq));
            tmp *= scaling_factor;
            std::get<41>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<42, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_and * (FF(1) - new_term.main_sel_op_and));
            tmp *= scaling_factor;
            std::get<42>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<43, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_or * (FF(1) - new_term.main_sel_op_or));
            tmp *= scaling_factor;
            std::get<43>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<44, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_xor * (FF(1) - new_term.main_sel_op_xor));
            tmp *= scaling_factor;
            std::get<44>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<45, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_cast * (FF(1) - new_term.main_sel_op_cast));
            tmp *= scaling_factor;
            std::get<45>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<46, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_lt * (FF(1) - new_term.main_sel_op_lt));
            tmp *= scaling_factor;
            std::get<46>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<47, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_lte * (FF(1) - new_term.main_sel_op_lte));
            tmp *= scaling_factor;
            std::get<47>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<48, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_shl * (FF(1) - new_term.main_sel_op_shl));
            tmp *= scaling_factor;
            std::get<48>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<49, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_shr * (FF(1) - new_term.main_sel_op_shr));
            tmp *= scaling_factor;
            std::get<49>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<50, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_internal_call * (FF(1) - new_term.main_sel_op_internal_call));
            tmp *= scaling_factor;
            std::get<50>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<51, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_internal_return * (FF(1) - new_term.main_sel_op_internal_return));
            tmp *= scaling_factor;
            std::get<51>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<52, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_jump * (FF(1) - new_term.main_sel_op_jump));
            tmp *= scaling_factor;
            std::get<52>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<53, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_jumpi * (FF(1) - new_term.main_sel_op_jumpi));
            tmp *= scaling_factor;
            std::get<53>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<54, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_external_call * (FF(1) - new_term.main_sel_op_external_call));
            tmp *= scaling_factor;
            std::get<54>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<55, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_static_call * (FF(1) - new_term.main_sel_op_static_call));
            tmp *= scaling_factor;
            std::get<55>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<56, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_calldata_copy * (FF(1) - new_term.main_sel_op_calldata_copy));
            tmp *= scaling_factor;
            std::get<56>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<57, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_external_return * (FF(1) - new_term.main_sel_op_external_return));
            tmp *= scaling_factor;
            std::get<57>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<58, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_external_revert * (FF(1) - new_term.main_sel_op_external_revert));
            tmp *= scaling_factor;
            std::get<58>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<59, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_op_set * (FF(1) - new_term.main_sel_op_set));
            tmp *= scaling_factor;
            std::get<59>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<60, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_op_err * (FF(1) - new_term.main_op_err));
=======
            auto tmp = (new_term.main_sel_op_mov * (FF(1) - new_term.main_sel_op_mov));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<60>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<61, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_tag_err * (FF(1) - new_term.main_tag_err));
=======
            auto tmp = (new_term.main_sel_op_cmov * (FF(1) - new_term.main_sel_op_cmov));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<61>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<62, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_id_zero * (FF(1) - new_term.main_id_zero));
=======
            auto tmp = (new_term.main_op_err * (FF(1) - new_term.main_op_err));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<62>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<63, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_mem_op_a * (FF(1) - new_term.main_sel_mem_op_a));
=======
            auto tmp = (new_term.main_tag_err * (FF(1) - new_term.main_tag_err));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<63>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<64, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_mem_op_b * (FF(1) - new_term.main_sel_mem_op_b));
=======
            auto tmp = (new_term.main_id_zero * (FF(1) - new_term.main_id_zero));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<64>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<65, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_mem_op_c * (FF(1) - new_term.main_sel_mem_op_c));
=======
            auto tmp = (new_term.main_sel_mem_op_a * (FF(1) - new_term.main_sel_mem_op_a));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<65>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<66, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_mem_op_d * (FF(1) - new_term.main_sel_mem_op_d));
=======
            auto tmp = (new_term.main_sel_mem_op_b * (FF(1) - new_term.main_sel_mem_op_b));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<66>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<67, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_rwa * (FF(1) - new_term.main_rwa));
=======
            auto tmp = (new_term.main_sel_mem_op_c * (FF(1) - new_term.main_sel_mem_op_c));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<67>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<68, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_rwb * (FF(1) - new_term.main_rwb));
=======
            auto tmp = (new_term.main_sel_mem_op_d * (FF(1) - new_term.main_sel_mem_op_d));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<68>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<69, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_rwc * (FF(1) - new_term.main_rwc));
=======
            auto tmp = (new_term.main_rwa * (FF(1) - new_term.main_rwa));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<69>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<70, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_rwd * (FF(1) - new_term.main_rwd));
=======
            auto tmp = (new_term.main_rwb * (FF(1) - new_term.main_rwb));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<70>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<71, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_resolve_ind_addr_a * (FF(1) - new_term.main_sel_resolve_ind_addr_a));
=======
            auto tmp = (new_term.main_rwc * (FF(1) - new_term.main_rwc));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<71>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<72, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_resolve_ind_addr_b * (FF(1) - new_term.main_sel_resolve_ind_addr_b));
=======
            auto tmp = (new_term.main_rwd * (FF(1) - new_term.main_rwd));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<72>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<73, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_resolve_ind_addr_c * (FF(1) - new_term.main_sel_resolve_ind_addr_c));
=======
            auto tmp = (new_term.main_sel_resolve_ind_addr_a * (FF(1) - new_term.main_sel_resolve_ind_addr_a));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<73>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<74, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_resolve_ind_addr_d * (FF(1) - new_term.main_sel_resolve_ind_addr_d));
=======
            auto tmp = (new_term.main_sel_resolve_ind_addr_b * (FF(1) - new_term.main_sel_resolve_ind_addr_b));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<74>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<75, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (((new_term.main_sel_op_eq + new_term.main_sel_op_lte) + new_term.main_sel_op_lt) *
                        (new_term.main_w_in_tag - constants_MEM_TAG_U1));
=======
            auto tmp = (new_term.main_sel_resolve_ind_addr_c * (FF(1) - new_term.main_sel_resolve_ind_addr_c));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<75>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<76, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = ((new_term.main_sel_op_fdiv * (FF(1) - new_term.main_op_err)) *
                        ((new_term.main_ic * new_term.main_ib) - new_term.main_ia));
=======
            auto tmp = (new_term.main_sel_resolve_ind_addr_d * (FF(1) - new_term.main_sel_resolve_ind_addr_d));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<76>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<77, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = ((new_term.main_sel_op_fdiv + new_term.main_sel_op_div) *
                        (((new_term.main_ib * new_term.main_inv) - FF(1)) + new_term.main_op_err));
=======
            auto tmp = (((new_term.main_sel_op_eq + new_term.main_sel_op_lte) + new_term.main_sel_op_lt) *
                        (new_term.main_w_in_tag - constants_MEM_TAG_U1));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<77>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<78, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (((new_term.main_sel_op_fdiv + new_term.main_sel_op_div) * new_term.main_op_err) *
                        (FF(1) - new_term.main_inv));
=======
            auto tmp = ((new_term.main_sel_op_fdiv * (FF(1) - new_term.main_op_err)) *
                        ((new_term.main_ic * new_term.main_ib) - new_term.main_ia));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<78>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<79, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_fdiv * (new_term.main_r_in_tag - constants_MEM_TAG_FF));
=======
            auto tmp = ((new_term.main_sel_op_fdiv + new_term.main_sel_op_div) *
                        (((new_term.main_ib * new_term.main_inv) - FF(1)) + new_term.main_op_err));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<79>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<80, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_fdiv * (new_term.main_w_in_tag - constants_MEM_TAG_FF));
=======
            auto tmp = (((new_term.main_sel_op_fdiv + new_term.main_sel_op_div) * new_term.main_op_err) *
                        (FF(1) - new_term.main_inv));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<80>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<81, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_op_err * ((new_term.main_sel_op_fdiv + new_term.main_sel_op_div) - FF(1)));
=======
            auto tmp = (new_term.main_sel_op_fdiv * (new_term.main_r_in_tag - constants_MEM_TAG_FF));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<81>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<82, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_jump * (new_term.main_pc_shift - new_term.main_ia));
=======
            auto tmp = (new_term.main_sel_op_fdiv * (new_term.main_w_in_tag - constants_MEM_TAG_FF));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<82>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<83, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_jumpi *
                        (((FF(1) - new_term.main_id_zero) * (new_term.main_pc_shift - new_term.main_ia)) +
                         (new_term.main_id_zero * ((new_term.main_pc_shift - new_term.main_pc) - FF(1)))));
=======
            auto tmp = (new_term.main_op_err * ((new_term.main_sel_op_fdiv + new_term.main_sel_op_div) - FF(1)));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<83>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<84, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_call *
                        (new_term.main_internal_return_ptr_shift - (new_term.main_internal_return_ptr + FF(1))));
=======
            auto tmp = (new_term.main_sel_op_jump * (new_term.main_pc_shift - new_term.main_ia));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<84>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<85, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp =
                (new_term.main_sel_op_internal_call * (new_term.main_internal_return_ptr - new_term.main_mem_addr_b));
=======
            auto tmp = (new_term.main_sel_op_jumpi *
                        (((FF(1) - new_term.main_id_zero) * (new_term.main_pc_shift - new_term.main_ia)) +
                         (new_term.main_id_zero * ((new_term.main_pc_shift - new_term.main_pc) - FF(1)))));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<85>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<86, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_call * (new_term.main_pc_shift - new_term.main_ia));
=======
            auto tmp = (new_term.main_sel_op_internal_call *
                        (new_term.main_internal_return_ptr_shift - (new_term.main_internal_return_ptr + FF(1))));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<86>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<87, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_call * ((new_term.main_pc + FF(1)) - new_term.main_ib));
=======
            auto tmp =
                (new_term.main_sel_op_internal_call * (new_term.main_internal_return_ptr - new_term.main_mem_addr_b));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<87>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<88, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_call * (new_term.main_rwb - FF(1)));
=======
            auto tmp = (new_term.main_sel_op_internal_call * (new_term.main_pc_shift - new_term.main_ia));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<88>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<89, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_call * (new_term.main_sel_mem_op_b - FF(1)));
=======
            auto tmp = (new_term.main_sel_op_internal_call * ((new_term.main_pc + FF(1)) - new_term.main_ib));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<89>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<90, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_return *
                        (new_term.main_internal_return_ptr_shift - (new_term.main_internal_return_ptr - FF(1))));
=======
            auto tmp = (new_term.main_sel_op_internal_call * (new_term.main_rwb - FF(1)));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<90>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<91, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_return *
                        ((new_term.main_internal_return_ptr - FF(1)) - new_term.main_mem_addr_a));
=======
            auto tmp = (new_term.main_sel_op_internal_call * (new_term.main_sel_mem_op_b - FF(1)));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<91>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<92, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_return * (new_term.main_pc_shift - new_term.main_ia));
=======
            auto tmp = (new_term.main_sel_op_internal_return *
                        (new_term.main_internal_return_ptr_shift - (new_term.main_internal_return_ptr - FF(1))));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<92>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<93, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_return * new_term.main_rwa);
=======
            auto tmp = (new_term.main_sel_op_internal_return *
                        ((new_term.main_internal_return_ptr - FF(1)) - new_term.main_mem_addr_a));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<93>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<94, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_internal_return * (new_term.main_sel_mem_op_a - FF(1)));
=======
            auto tmp = (new_term.main_sel_op_internal_return * (new_term.main_pc_shift - new_term.main_ia));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<94>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<95, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = ((main_CUR_AND_NEXT_ARE_MAIN * (FF(1) - main_SEL_ALL_CTRL_FLOW)) *
                        (new_term.main_pc_shift - (new_term.main_pc + FF(1))));
=======
            auto tmp = (new_term.main_sel_op_internal_return * new_term.main_rwa);
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<95>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<96, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = ((main_CUR_AND_NEXT_ARE_MAIN * (FF(1) - main_SEL_ALL_CTRL_FLOW)) *
                        (new_term.main_internal_return_ptr_shift - new_term.main_internal_return_ptr));
=======
            auto tmp = (new_term.main_sel_op_internal_return * (new_term.main_sel_mem_op_a - FF(1)));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<96>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<97, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = ((new_term.main_sel_op_internal_call + new_term.main_sel_op_internal_return) *
                        (new_term.main_space_id - constants_misc_INTERNAL_CALL_SPACE_ID));
=======
            auto tmp = ((main_CUR_AND_NEXT_ARE_MAIN * (FF(1) - main_SEL_ALL_CTRL_FLOW)) *
                        (new_term.main_pc_shift - (new_term.main_pc + FF(1))));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<97>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<98, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (((FF(1) - new_term.main_sel_op_internal_call) - new_term.main_sel_op_internal_return) *
                        (new_term.main_call_ptr - new_term.main_space_id));
=======
            auto tmp = ((main_CUR_AND_NEXT_ARE_MAIN * (FF(1) - main_SEL_ALL_CTRL_FLOW)) *
                        (new_term.main_internal_return_ptr_shift - new_term.main_internal_return_ptr));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<98>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<99, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_jumpi *
                        (((new_term.main_id * new_term.main_inv) - FF(1)) + new_term.main_id_zero));
=======
            auto tmp = ((new_term.main_sel_op_internal_call + new_term.main_sel_op_internal_return) *
                        (new_term.main_space_id - constants_misc_INTERNAL_CALL_SPACE_ID));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<99>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<100, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = ((new_term.main_sel_op_jumpi * new_term.main_id_zero) * (FF(1) - new_term.main_inv));
=======
            auto tmp = (((FF(1) - new_term.main_sel_op_internal_call) - new_term.main_sel_op_internal_return) *
                        (new_term.main_call_ptr - new_term.main_space_id));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<100>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<101, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_mov_ia_to_ic - (new_term.main_sel_op_mov * (FF(1) - new_term.main_id_zero)));
=======
            auto tmp = ((new_term.main_sel_op_cmov + new_term.main_sel_op_jumpi) *
                        (((new_term.main_id * new_term.main_inv) - FF(1)) + new_term.main_id_zero));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<101>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<102, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_mov_ia_to_ic * (new_term.main_ia - new_term.main_ic));
=======
            auto tmp = (((new_term.main_sel_op_cmov + new_term.main_sel_op_jumpi) * new_term.main_id_zero) *
                        (FF(1) - new_term.main_inv));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<102>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<103, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_mov_ib_to_ic * (new_term.main_ib - new_term.main_ic));
=======
            auto tmp = (new_term.main_sel_mov_ia_to_ic -
                        (new_term.main_sel_op_mov + (new_term.main_sel_op_cmov * (FF(1) - new_term.main_id_zero))));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<103>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<104, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_mov * (new_term.main_r_in_tag - new_term.main_w_in_tag));
=======
            auto tmp = (new_term.main_sel_mov_ib_to_ic - (new_term.main_sel_op_cmov * new_term.main_id_zero));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<104>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<105, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_alu -
                        ((main_SEL_ALL_ALU * (FF(1) - new_term.main_tag_err)) * (FF(1) - new_term.main_op_err)));
=======
            auto tmp = (new_term.main_sel_mov_ia_to_ic * (new_term.main_ia - new_term.main_ic));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<105>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<106, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (main_SEL_ALU_R_TAG * (new_term.main_alu_in_tag - new_term.main_r_in_tag));
=======
            auto tmp = (new_term.main_sel_mov_ib_to_ic * (new_term.main_ib - new_term.main_ic));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<106>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<107, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (main_SEL_ALU_W_TAG * (new_term.main_alu_in_tag - new_term.main_w_in_tag));
=======
            auto tmp = ((new_term.main_sel_op_mov + new_term.main_sel_op_cmov) *
                        (new_term.main_r_in_tag - new_term.main_w_in_tag));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<107>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<108, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_l2gasleft * (new_term.main_ia - new_term.main_l2_gas_remaining_shift));
=======
            auto tmp = (new_term.main_sel_alu -
                        ((main_SEL_ALL_ALU * (FF(1) - new_term.main_tag_err)) * (FF(1) - new_term.main_op_err)));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<108>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<109, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_op_dagasleft * (new_term.main_ia - new_term.main_da_gas_remaining_shift));
=======
            auto tmp = (main_SEL_ALU_R_TAG * (new_term.main_alu_in_tag - new_term.main_r_in_tag));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<109>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<110, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = ((new_term.main_ib * (FF(1) - new_term.main_tag_err)) *
                        ((new_term.main_sel_op_calldata_copy + new_term.main_sel_op_external_return) -
                         new_term.main_sel_slice_gadget));
=======
            auto tmp = (main_SEL_ALU_W_TAG * (new_term.main_alu_in_tag - new_term.main_w_in_tag));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<110>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<111, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_bin_op_id - (new_term.main_sel_op_or + (FF(2) * new_term.main_sel_op_xor)));
=======
            auto tmp = (new_term.main_sel_op_l2gasleft * (new_term.main_ia - new_term.main_l2_gas_remaining_shift));
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            tmp *= scaling_factor;
            std::get<111>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<112, ContainerOverSubrelations>;
<<<<<<< HEAD
            auto tmp = (new_term.main_sel_bin -
                        ((new_term.main_sel_op_and + new_term.main_sel_op_or) + new_term.main_sel_op_xor));
            tmp *= scaling_factor;
            std::get<112>(evals) += typename Accumulator::View(tmp);
=======
            auto tmp = (new_term.main_sel_op_dagasleft * (new_term.main_ia - new_term.main_da_gas_remaining_shift));
            tmp *= scaling_factor;
            std::get<112>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<113, ContainerOverSubrelations>;
            auto tmp = ((new_term.main_ib * (FF(1) - new_term.main_tag_err)) *
                        ((new_term.main_sel_op_calldata_copy + new_term.main_sel_op_external_return) -
                         new_term.main_sel_slice_gadget));
            tmp *= scaling_factor;
            std::get<113>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<114, ContainerOverSubrelations>;
            auto tmp = (new_term.main_bin_op_id - (new_term.main_sel_op_or + (FF(2) * new_term.main_sel_op_xor)));
            tmp *= scaling_factor;
            std::get<114>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<115, ContainerOverSubrelations>;
            auto tmp = (new_term.main_sel_bin -
                        ((new_term.main_sel_op_and + new_term.main_sel_op_or) + new_term.main_sel_op_xor));
            tmp *= scaling_factor;
            std::get<115>(evals) += typename Accumulator::View(tmp);
>>>>>>> 036c90241a (9001: Constrain start and end gas)
        }
    }
};

template <typename FF> class main : public Relation<mainImpl<FF>> {
  public:
    static constexpr const char* NAME = "main";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "OPCODE_SELECTORS";
<<<<<<< HEAD
        case 75:
            return "OUTPUT_U1";
        case 76:
            return "SUBOP_FDIV";
        case 77:
            return "SUBOP_FDIV_ZERO_ERR1";
        case 78:
            return "SUBOP_FDIV_ZERO_ERR2";
        case 79:
            return "SUBOP_FDIV_R_IN_TAG_FF";
        case 80:
            return "SUBOP_FDIV_W_IN_TAG_FF";
        case 81:
            return "SUBOP_ERROR_RELEVANT_OP";
        case 82:
            return "PC_JUMP";
        case 83:
            return "PC_JUMPI";
        case 84:
            return "RETURN_POINTER_INCREMENT";
        case 90:
            return "RETURN_POINTER_DECREMENT";
        case 95:
            return "PC_INCREMENT";
        case 96:
            return "INTERNAL_RETURN_POINTER_CONSISTENCY";
        case 97:
            return "SPACE_ID_INTERNAL";
        case 98:
            return "SPACE_ID_STANDARD_OPCODES";
        case 99:
            return "JMP_CONDITION_RES_1";
        case 100:
            return "JMP_CONDITION_RES_2";
        case 102:
            return "MOV_SAME_VALUE_A";
        case 103:
            return "MOV_SAME_VALUE_B";
        case 104:
            return "MOV_MAIN_SAME_TAG";
        case 108:
            return "L2GASLEFT";
        case 109:
            return "DAGASLEFT";
        case 111:
            return "BIN_SEL_1";
        case 112:
=======
        case 77:
            return "OUTPUT_U1";
        case 78:
            return "SUBOP_FDIV";
        case 79:
            return "SUBOP_FDIV_ZERO_ERR1";
        case 80:
            return "SUBOP_FDIV_ZERO_ERR2";
        case 81:
            return "SUBOP_FDIV_R_IN_TAG_FF";
        case 82:
            return "SUBOP_FDIV_W_IN_TAG_FF";
        case 83:
            return "SUBOP_ERROR_RELEVANT_OP";
        case 84:
            return "PC_JUMP";
        case 85:
            return "PC_JUMPI";
        case 86:
            return "RETURN_POINTER_INCREMENT";
        case 92:
            return "RETURN_POINTER_DECREMENT";
        case 97:
            return "PC_INCREMENT";
        case 98:
            return "INTERNAL_RETURN_POINTER_CONSISTENCY";
        case 99:
            return "SPACE_ID_INTERNAL";
        case 100:
            return "SPACE_ID_STANDARD_OPCODES";
        case 101:
            return "CMOV_CONDITION_RES_1";
        case 102:
            return "CMOV_CONDITION_RES_2";
        case 105:
            return "MOV_SAME_VALUE_A";
        case 106:
            return "MOV_SAME_VALUE_B";
        case 107:
            return "MOV_MAIN_SAME_TAG";
        case 111:
            return "L2GASLEFT";
        case 112:
            return "DAGASLEFT";
        case 114:
            return "BIN_SEL_1";
        case 115:
>>>>>>> 036c90241a (9001: Constrain start and end gas)
            return "BIN_SEL_2";
        }
        return std::to_string(index);
    }
};

} // namespace bb::Avm_vm