// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm {

/////////////////// lookup_mem_rng_chk_0 ///////////////////

class lookup_mem_rng_chk_0_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::mem_sel_rng_chk;
    static constexpr Column DST_SELECTOR = Column::main_sel_rng_16;
    static constexpr Column COUNTS = Column::lookup_mem_rng_chk_0_counts;
    static constexpr Column INVERSES = Column::lookup_mem_rng_chk_0_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::mem_u16_r0 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::main_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._mem_sel_rng_chk() == 1 || in._main_sel_rng_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._mem_sel_rng_chk());
        const auto is_table_entry = View(in._main_sel_rng_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_mem_rng_chk_0_inv(),
                                     in._lookup_mem_rng_chk_0_counts(),
                                     in._mem_sel_rng_chk(),
                                     in._main_sel_rng_16(),
                                     in._mem_u16_r0(),
                                     in._main_clk());
    }
};

template <typename FF_>
class lookup_mem_rng_chk_0_relation : public GenericLookupRelation<lookup_mem_rng_chk_0_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_MEM_RNG_CHK_0";
};
template <typename FF_> using lookup_mem_rng_chk_0 = GenericLookup<lookup_mem_rng_chk_0_lookup_settings, FF_>;

/////////////////// lookup_mem_rng_chk_1 ///////////////////

class lookup_mem_rng_chk_1_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::mem_sel_rng_chk;
    static constexpr Column DST_SELECTOR = Column::main_sel_rng_16;
    static constexpr Column COUNTS = Column::lookup_mem_rng_chk_1_counts;
    static constexpr Column INVERSES = Column::lookup_mem_rng_chk_1_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::mem_u16_r1 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::main_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._mem_sel_rng_chk() == 1 || in._main_sel_rng_16() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._mem_sel_rng_chk());
        const auto is_table_entry = View(in._main_sel_rng_16());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_mem_rng_chk_1_inv(),
                                     in._lookup_mem_rng_chk_1_counts(),
                                     in._mem_sel_rng_chk(),
                                     in._main_sel_rng_16(),
                                     in._mem_u16_r1(),
                                     in._main_clk());
    }
};

template <typename FF_>
class lookup_mem_rng_chk_1_relation : public GenericLookupRelation<lookup_mem_rng_chk_1_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_MEM_RNG_CHK_1";
};
template <typename FF_> using lookup_mem_rng_chk_1 = GenericLookup<lookup_mem_rng_chk_1_lookup_settings, FF_>;

/////////////////// lookup_mem_rng_chk_2 ///////////////////

class lookup_mem_rng_chk_2_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 1;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::mem_sel_rng_chk;
    static constexpr Column DST_SELECTOR = Column::main_sel_rng_8;
    static constexpr Column COUNTS = Column::lookup_mem_rng_chk_2_counts;
    static constexpr Column INVERSES = Column::lookup_mem_rng_chk_2_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::mem_u8_r0 };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::main_clk };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._mem_sel_rng_chk() == 1 || in._main_sel_rng_8() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._mem_sel_rng_chk());
        const auto is_table_entry = View(in._main_sel_rng_8());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_mem_rng_chk_2_inv(),
                                     in._lookup_mem_rng_chk_2_counts(),
                                     in._mem_sel_rng_chk(),
                                     in._main_sel_rng_8(),
                                     in._mem_u8_r0(),
                                     in._main_clk());
    }
};

template <typename FF_>
class lookup_mem_rng_chk_2_relation : public GenericLookupRelation<lookup_mem_rng_chk_2_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_MEM_RNG_CHK_2";
};
template <typename FF_> using lookup_mem_rng_chk_2 = GenericLookup<lookup_mem_rng_chk_2_lookup_settings, FF_>;

} // namespace bb::avm