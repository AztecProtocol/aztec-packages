// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <tuple>

namespace bb::avm {

/////////////////// perm_main_alu ///////////////////

class perm_main_alu_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 16;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_alu;
    static constexpr Column DST_SELECTOR = Column::alu_sel_alu;
    static constexpr Column INVERSES = Column::perm_main_alu_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_alu == 1 || in.alu_sel_alu == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_alu_inv,
                                     in.main_sel_alu,
                                     in.main_sel_alu,
                                     in.alu_sel_alu,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.main_sel_op_add,
                                     in.main_sel_op_sub,
                                     in.main_sel_op_mul,
                                     in.main_sel_op_div,
                                     in.main_sel_op_eq,
                                     in.main_sel_op_not,
                                     in.main_sel_op_cast,
                                     in.main_sel_op_lt,
                                     in.main_sel_op_lte,
                                     in.main_sel_op_shr,
                                     in.main_sel_op_shl,
                                     in.main_alu_in_tag,
                                     in.alu_clk,
                                     in.alu_ia,
                                     in.alu_ib,
                                     in.alu_ic,
                                     in.alu_op_add,
                                     in.alu_op_sub,
                                     in.alu_op_mul,
                                     in.alu_op_div,
                                     in.alu_op_eq,
                                     in.alu_op_not,
                                     in.alu_op_cast,
                                     in.alu_op_lt,
                                     in.alu_op_lte,
                                     in.alu_op_shr,
                                     in.alu_op_shl,
                                     in.alu_in_tag);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_alu_inv,
                                     in.main_sel_alu,
                                     in.main_sel_alu,
                                     in.alu_sel_alu,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.main_sel_op_add,
                                     in.main_sel_op_sub,
                                     in.main_sel_op_mul,
                                     in.main_sel_op_div,
                                     in.main_sel_op_eq,
                                     in.main_sel_op_not,
                                     in.main_sel_op_cast,
                                     in.main_sel_op_lt,
                                     in.main_sel_op_lte,
                                     in.main_sel_op_shr,
                                     in.main_sel_op_shl,
                                     in.main_alu_in_tag,
                                     in.alu_clk,
                                     in.alu_ia,
                                     in.alu_ib,
                                     in.alu_ic,
                                     in.alu_op_add,
                                     in.alu_op_sub,
                                     in.alu_op_mul,
                                     in.alu_op_div,
                                     in.alu_op_eq,
                                     in.alu_op_not,
                                     in.alu_op_cast,
                                     in.alu_op_lt,
                                     in.alu_op_lte,
                                     in.alu_op_shr,
                                     in.alu_op_shl,
                                     in.alu_in_tag);
    }
};

template <typename FF_>
class perm_main_alu_relation : public GenericPermutationRelation<perm_main_alu_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_ALU";
};
template <typename FF_> using perm_main_alu = GenericPermutation<perm_main_alu_permutation_settings, FF_>;

/////////////////// perm_main_bin ///////////////////

class perm_main_bin_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 6;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_bin;
    static constexpr Column DST_SELECTOR = Column::binary_start;
    static constexpr Column INVERSES = Column::perm_main_bin_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_bin == 1 || in.binary_start == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_bin_inv,
                                     in.main_sel_bin,
                                     in.main_sel_bin,
                                     in.binary_start,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.main_bin_op_id,
                                     in.main_r_in_tag,
                                     in.binary_clk,
                                     in.binary_acc_ia,
                                     in.binary_acc_ib,
                                     in.binary_acc_ic,
                                     in.binary_op_id,
                                     in.binary_in_tag);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_bin_inv,
                                     in.main_sel_bin,
                                     in.main_sel_bin,
                                     in.binary_start,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.main_bin_op_id,
                                     in.main_r_in_tag,
                                     in.binary_clk,
                                     in.binary_acc_ia,
                                     in.binary_acc_ib,
                                     in.binary_acc_ic,
                                     in.binary_op_id,
                                     in.binary_in_tag);
    }
};

template <typename FF_>
class perm_main_bin_relation : public GenericPermutationRelation<perm_main_bin_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_BIN";
};
template <typename FF_> using perm_main_bin = GenericPermutation<perm_main_bin_permutation_settings, FF_>;

/////////////////// perm_main_conv ///////////////////

class perm_main_conv_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 5;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_op_radix_be;
    static constexpr Column DST_SELECTOR = Column::conversion_sel_to_radix_be;
    static constexpr Column INVERSES = Column::perm_main_conv_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_op_radix_be == 1 || in.conversion_sel_to_radix_be == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_conv_inv,
                                     in.main_sel_op_radix_be,
                                     in.main_sel_op_radix_be,
                                     in.conversion_sel_to_radix_be,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.main_id,
                                     in.conversion_clk,
                                     in.conversion_input,
                                     in.conversion_radix,
                                     in.conversion_num_limbs,
                                     in.conversion_output_bits);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_conv_inv,
                                     in.main_sel_op_radix_be,
                                     in.main_sel_op_radix_be,
                                     in.conversion_sel_to_radix_be,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.main_id,
                                     in.conversion_clk,
                                     in.conversion_input,
                                     in.conversion_radix,
                                     in.conversion_num_limbs,
                                     in.conversion_output_bits);
    }
};

template <typename FF_>
class perm_main_conv_relation : public GenericPermutationRelation<perm_main_conv_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_CONV";
};
template <typename FF_> using perm_main_conv = GenericPermutation<perm_main_conv_permutation_settings, FF_>;

/////////////////// perm_main_sha256 ///////////////////

class perm_main_sha256_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_op_sha256;
    static constexpr Column DST_SELECTOR = Column::sha256_sel_sha256_compression;
    static constexpr Column INVERSES = Column::perm_main_sha256_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_op_sha256 == 1 || in.sha256_sel_sha256_compression == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_sha256_inv,
                                     in.main_sel_op_sha256,
                                     in.main_sel_op_sha256,
                                     in.sha256_sel_sha256_compression,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.sha256_clk,
                                     in.sha256_state,
                                     in.sha256_input,
                                     in.sha256_output);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_sha256_inv,
                                     in.main_sel_op_sha256,
                                     in.main_sel_op_sha256,
                                     in.sha256_sel_sha256_compression,
                                     in.main_clk,
                                     in.main_ia,
                                     in.main_ib,
                                     in.main_ic,
                                     in.sha256_clk,
                                     in.sha256_state,
                                     in.sha256_input,
                                     in.sha256_output);
    }
};

template <typename FF_>
class perm_main_sha256_relation : public GenericPermutationRelation<perm_main_sha256_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_SHA256";
};
template <typename FF_> using perm_main_sha256 = GenericPermutation<perm_main_sha256_permutation_settings, FF_>;

/////////////////// perm_main_pos2_perm ///////////////////

class perm_main_pos2_perm_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_op_poseidon2;
    static constexpr Column DST_SELECTOR = Column::poseidon2_sel_poseidon_perm;
    static constexpr Column INVERSES = Column::perm_main_pos2_perm_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_op_poseidon2 == 1 || in.poseidon2_sel_poseidon_perm == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_pos2_perm_inv,
                                     in.main_sel_op_poseidon2,
                                     in.main_sel_op_poseidon2,
                                     in.poseidon2_sel_poseidon_perm,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_a,
                                     in.main_mem_addr_b,
                                     in.poseidon2_clk,
                                     in.poseidon2_space_id,
                                     in.poseidon2_input_addr,
                                     in.poseidon2_output_addr);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_pos2_perm_inv,
                                     in.main_sel_op_poseidon2,
                                     in.main_sel_op_poseidon2,
                                     in.poseidon2_sel_poseidon_perm,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_a,
                                     in.main_mem_addr_b,
                                     in.poseidon2_clk,
                                     in.poseidon2_space_id,
                                     in.poseidon2_input_addr,
                                     in.poseidon2_output_addr);
    }
};

template <typename FF_>
class perm_main_pos2_perm_relation : public GenericPermutationRelation<perm_main_pos2_perm_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_POS2_PERM";
};
template <typename FF_> using perm_main_pos2_perm = GenericPermutation<perm_main_pos2_perm_permutation_settings, FF_>;

/////////////////// perm_main_mem_a ///////////////////

class perm_main_mem_a_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 8;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_a;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_a;
    static constexpr Column INVERSES = Column::perm_main_mem_a_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_mem_op_a == 1 || in.mem_sel_op_a == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_a_inv,
                                     in.main_sel_mem_op_a,
                                     in.main_sel_mem_op_a,
                                     in.mem_sel_op_a,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_a,
                                     in.main_ia,
                                     in.main_rwa,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.main_sel_mov_ia_to_ic,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag,
                                     in.mem_sel_mov_ia_to_ic);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_a_inv,
                                     in.main_sel_mem_op_a,
                                     in.main_sel_mem_op_a,
                                     in.mem_sel_op_a,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_a,
                                     in.main_ia,
                                     in.main_rwa,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.main_sel_mov_ia_to_ic,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag,
                                     in.mem_sel_mov_ia_to_ic);
    }
};

template <typename FF_>
class perm_main_mem_a_relation : public GenericPermutationRelation<perm_main_mem_a_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_A";
};
template <typename FF_> using perm_main_mem_a = GenericPermutation<perm_main_mem_a_permutation_settings, FF_>;

/////////////////// perm_main_mem_b ///////////////////

class perm_main_mem_b_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 8;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_b;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_b;
    static constexpr Column INVERSES = Column::perm_main_mem_b_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_mem_op_b == 1 || in.mem_sel_op_b == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_b_inv,
                                     in.main_sel_mem_op_b,
                                     in.main_sel_mem_op_b,
                                     in.mem_sel_op_b,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_b,
                                     in.main_ib,
                                     in.main_rwb,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.main_sel_mov_ib_to_ic,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag,
                                     in.mem_sel_mov_ib_to_ic);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_b_inv,
                                     in.main_sel_mem_op_b,
                                     in.main_sel_mem_op_b,
                                     in.mem_sel_op_b,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_b,
                                     in.main_ib,
                                     in.main_rwb,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.main_sel_mov_ib_to_ic,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag,
                                     in.mem_sel_mov_ib_to_ic);
    }
};

template <typename FF_>
class perm_main_mem_b_relation : public GenericPermutationRelation<perm_main_mem_b_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_B";
};
template <typename FF_> using perm_main_mem_b = GenericPermutation<perm_main_mem_b_permutation_settings, FF_>;

/////////////////// perm_main_mem_c ///////////////////

class perm_main_mem_c_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 7;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_c;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_c;
    static constexpr Column INVERSES = Column::perm_main_mem_c_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_mem_op_c == 1 || in.mem_sel_op_c == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_c_inv,
                                     in.main_sel_mem_op_c,
                                     in.main_sel_mem_op_c,
                                     in.mem_sel_op_c,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_c,
                                     in.main_ic,
                                     in.main_rwc,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_c_inv,
                                     in.main_sel_mem_op_c,
                                     in.main_sel_mem_op_c,
                                     in.mem_sel_op_c,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_c,
                                     in.main_ic,
                                     in.main_rwc,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag);
    }
};

template <typename FF_>
class perm_main_mem_c_relation : public GenericPermutationRelation<perm_main_mem_c_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_C";
};
template <typename FF_> using perm_main_mem_c = GenericPermutation<perm_main_mem_c_permutation_settings, FF_>;

/////////////////// perm_main_mem_d ///////////////////

class perm_main_mem_d_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 7;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_d;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_d;
    static constexpr Column INVERSES = Column::perm_main_mem_d_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_mem_op_d == 1 || in.mem_sel_op_d == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_d_inv,
                                     in.main_sel_mem_op_d,
                                     in.main_sel_mem_op_d,
                                     in.mem_sel_op_d,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_d,
                                     in.main_id,
                                     in.main_rwd,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_d_inv,
                                     in.main_sel_mem_op_d,
                                     in.main_sel_mem_op_d,
                                     in.mem_sel_op_d,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_mem_addr_d,
                                     in.main_id,
                                     in.main_rwd,
                                     in.main_r_in_tag,
                                     in.main_w_in_tag,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val,
                                     in.mem_rw,
                                     in.mem_r_in_tag,
                                     in.mem_w_in_tag);
    }
};

template <typename FF_>
class perm_main_mem_d_relation : public GenericPermutationRelation<perm_main_mem_d_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_D";
};
template <typename FF_> using perm_main_mem_d = GenericPermutation<perm_main_mem_d_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_a ///////////////////

class perm_main_mem_ind_addr_a_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_a;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_a;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_a_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_resolve_ind_addr_a == 1 || in.mem_sel_resolve_ind_addr_a == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_a_inv,
                                     in.main_sel_resolve_ind_addr_a,
                                     in.main_sel_resolve_ind_addr_a,
                                     in.mem_sel_resolve_ind_addr_a,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_a,
                                     in.main_mem_addr_a,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_a_inv,
                                     in.main_sel_resolve_ind_addr_a,
                                     in.main_sel_resolve_ind_addr_a,
                                     in.mem_sel_resolve_ind_addr_a,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_a,
                                     in.main_mem_addr_a,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_a_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_a_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_IND_ADDR_A";
};
template <typename FF_>
using perm_main_mem_ind_addr_a = GenericPermutation<perm_main_mem_ind_addr_a_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_b ///////////////////

class perm_main_mem_ind_addr_b_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_b;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_b;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_b_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_resolve_ind_addr_b == 1 || in.mem_sel_resolve_ind_addr_b == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_b_inv,
                                     in.main_sel_resolve_ind_addr_b,
                                     in.main_sel_resolve_ind_addr_b,
                                     in.mem_sel_resolve_ind_addr_b,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_b,
                                     in.main_mem_addr_b,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_b_inv,
                                     in.main_sel_resolve_ind_addr_b,
                                     in.main_sel_resolve_ind_addr_b,
                                     in.mem_sel_resolve_ind_addr_b,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_b,
                                     in.main_mem_addr_b,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_b_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_b_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_IND_ADDR_B";
};
template <typename FF_>
using perm_main_mem_ind_addr_b = GenericPermutation<perm_main_mem_ind_addr_b_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_c ///////////////////

class perm_main_mem_ind_addr_c_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_c;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_c;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_c_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_resolve_ind_addr_c == 1 || in.mem_sel_resolve_ind_addr_c == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_c_inv,
                                     in.main_sel_resolve_ind_addr_c,
                                     in.main_sel_resolve_ind_addr_c,
                                     in.mem_sel_resolve_ind_addr_c,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_c,
                                     in.main_mem_addr_c,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_c_inv,
                                     in.main_sel_resolve_ind_addr_c,
                                     in.main_sel_resolve_ind_addr_c,
                                     in.mem_sel_resolve_ind_addr_c,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_c,
                                     in.main_mem_addr_c,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_c_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_c_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_IND_ADDR_C";
};
template <typename FF_>
using perm_main_mem_ind_addr_c = GenericPermutation<perm_main_mem_ind_addr_c_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_d ///////////////////

class perm_main_mem_ind_addr_d_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_d;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_d;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_d_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.main_sel_resolve_ind_addr_d == 1 || in.mem_sel_resolve_ind_addr_d == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_d_inv,
                                     in.main_sel_resolve_ind_addr_d,
                                     in.main_sel_resolve_ind_addr_d,
                                     in.mem_sel_resolve_ind_addr_d,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_d,
                                     in.main_mem_addr_d,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.perm_main_mem_ind_addr_d_inv,
                                     in.main_sel_resolve_ind_addr_d,
                                     in.main_sel_resolve_ind_addr_d,
                                     in.mem_sel_resolve_ind_addr_d,
                                     in.main_clk,
                                     in.main_space_id,
                                     in.main_ind_addr_d,
                                     in.main_mem_addr_d,
                                     in.mem_clk,
                                     in.mem_space_id,
                                     in.mem_addr,
                                     in.mem_val);
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_d_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_d_permutation_settings, FF_> {
  public:
    static constexpr const char* NAME = "PERM_MAIN_MEM_IND_ADDR_D";
};
template <typename FF_>
using perm_main_mem_ind_addr_d = GenericPermutation<perm_main_mem_ind_addr_d_permutation_settings, FF_>;

} // namespace bb::avm