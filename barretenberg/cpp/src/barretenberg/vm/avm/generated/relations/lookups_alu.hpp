// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm {

/////////////////// lookup_pow_2_0 ///////////////////

class lookup_pow_2_0_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::alu_sel_shift_which;
    static constexpr Column DST_SELECTOR = Column::main_sel_rng_8;
    static constexpr Column COUNTS = Column::lookup_pow_2_0_counts;
    static constexpr Column INVERSES = Column::lookup_pow_2_0_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::alu_ib, Column::alu_b_pow };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::main_clk,
                                                                           Column::powers_power_of_2 };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._alu_sel_shift_which() == 1 || in._main_sel_rng_8() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._alu_sel_shift_which());
        const auto is_table_entry = View(in._main_sel_rng_8());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_pow_2_0_inv(),
                                     in._lookup_pow_2_0_counts(),
                                     in._alu_sel_shift_which(),
                                     in._main_sel_rng_8(),
                                     in._alu_ib(),
                                     in._alu_b_pow(),
                                     in._main_clk(),
                                     in._powers_power_of_2());
    }
};

template <typename FF_>
class lookup_pow_2_0_relation : public GenericLookupRelation<lookup_pow_2_0_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_POW_2_0";
};
template <typename FF_> using lookup_pow_2_0 = GenericLookup<lookup_pow_2_0_lookup_settings, FF_>;

/////////////////// lookup_pow_2_1 ///////////////////

class lookup_pow_2_1_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = 1;
    static constexpr size_t WRITE_TERMS = 1;
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = { 0 };
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = { 0 };
    static constexpr size_t LOOKUP_TUPLE_SIZE = 2;
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = 4;
    static constexpr size_t READ_TERM_DEGREE = 0;
    static constexpr size_t WRITE_TERM_DEGREE = 0;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::alu_sel_shift_which;
    static constexpr Column DST_SELECTOR = Column::main_sel_rng_8;
    static constexpr Column COUNTS = Column::lookup_pow_2_1_counts;
    static constexpr Column INVERSES = Column::lookup_pow_2_1_inv;
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = { Column::alu_max_bits_sub_b_bits,
                                                                           Column::alu_max_bits_sub_b_pow };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = { Column::main_clk,
                                                                           Column::powers_power_of_2 };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._alu_sel_shift_which() == 1 || in._main_sel_rng_8() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._alu_sel_shift_which());
        const auto is_table_entry = View(in._main_sel_rng_8());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(in._lookup_pow_2_1_inv(),
                                     in._lookup_pow_2_1_counts(),
                                     in._alu_sel_shift_which(),
                                     in._main_sel_rng_8(),
                                     in._alu_max_bits_sub_b_bits(),
                                     in._alu_max_bits_sub_b_pow(),
                                     in._main_clk(),
                                     in._powers_power_of_2());
    }
};

template <typename FF_>
class lookup_pow_2_1_relation : public GenericLookupRelation<lookup_pow_2_1_lookup_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "LOOKUP_POW_2_1";
};
template <typename FF_> using lookup_pow_2_1 = GenericLookup<lookup_pow_2_1_lookup_settings, FF_>;

} // namespace bb::avm