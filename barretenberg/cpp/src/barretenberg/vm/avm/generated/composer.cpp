// AUTOGENERATED FILE
#include "composer.hpp"
#include "barretenberg/vm/stats.hpp"

namespace bb::avm {

using Flavor = AvmFlavor;
void AvmComposer::compute_witness(CircuitConstructor& circuit)
{
    if (computed_witness) {
        return;
    }

    auto polynomials = circuit.compute_polynomials();

    for (auto [key_poly, prover_poly] : zip_view(proving_key->get_all(), polynomials.get_unshifted())) {
        ASSERT(flavor_get_label(*proving_key, key_poly) == flavor_get_label(polynomials, prover_poly));
        key_poly = std::move(prover_poly);
    }

    computed_witness = true;
}

AvmProver AvmComposer::create_prover(CircuitConstructor& circuit_constructor)
{
    AVM_TRACK_TIME("composer/create_prover:proving_key", compute_proving_key(circuit_constructor));
    AVM_TRACK_TIME("composer/create_prover:witness", compute_witness(circuit_constructor));
    AVM_TRACK_TIME("composer/create_prover:commitment_key",
                   compute_commitment_key(circuit_constructor.get_circuit_subgroup_size()));
    auto output_state = AVM_TRACK_TIME_V("composer/create_prover:construct_prover",
                                         AvmProver(proving_key, proving_key->commitment_key));
    return output_state;
}

AvmVerifier AvmComposer::create_verifier(CircuitConstructor& circuit_constructor)
{
    auto verification_key = compute_verification_key(circuit_constructor);
    return AvmVerifier(std::move(verification_key));
}

std::shared_ptr<Flavor::ProvingKey> AvmComposer::compute_proving_key(CircuitConstructor& circuit_constructor)
{
    if (proving_key) {
        return proving_key;
    }

    const size_t subgroup_size = circuit_constructor.get_circuit_subgroup_size();
    proving_key = std::make_shared<Flavor::ProvingKey>(subgroup_size, 0);
    return proving_key;
}

std::shared_ptr<Flavor::VerificationKey> AvmComposer::compute_verification_key(CircuitConstructor& circuit_constructor)
{
    if (verification_key) {
        return verification_key;
    }

    if (!proving_key) {
        compute_proving_key(circuit_constructor);
    }

    verification_key = std::make_shared<Flavor::VerificationKey>(proving_key);

    return verification_key;
}

} // namespace bb::avm