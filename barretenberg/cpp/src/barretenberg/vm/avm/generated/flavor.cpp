// AUTOGENERATED FILE
#include "flavor.hpp"

namespace bb::avm {

AvmFlavor::ProverPolynomials::ProverPolynomials(ProvingKey& proving_key)
{
    for (auto [prover_poly, key_poly] : zip_view(this->get_unshifted(), proving_key.get_all())) {
        ASSERT(flavor_get_label(*this, prover_poly) == flavor_get_label(proving_key, key_poly));
        prover_poly = key_poly.share();
    }
    for (auto [prover_poly, key_poly] : zip_view(this->get_shifted(), proving_key.get_to_be_shifted())) {
        ASSERT(flavor_get_label(*this, prover_poly) == (flavor_get_label(proving_key, key_poly) + "_shift"));
        prover_poly = key_poly.shifted();
    }
}

AvmFlavor::CommitmentLabels::CommitmentLabels()
{
    Base::byte_lookup_sel_bin = "BYTE_LOOKUP_SEL_BIN";
    Base::byte_lookup_table_byte_lengths = "BYTE_LOOKUP_TABLE_BYTE_LENGTHS";
    Base::byte_lookup_table_in_tags = "BYTE_LOOKUP_TABLE_IN_TAGS";
    Base::byte_lookup_table_input_a = "BYTE_LOOKUP_TABLE_INPUT_A";
    Base::byte_lookup_table_input_b = "BYTE_LOOKUP_TABLE_INPUT_B";
    Base::byte_lookup_table_op_id = "BYTE_LOOKUP_TABLE_OP_ID";
    Base::byte_lookup_table_output = "BYTE_LOOKUP_TABLE_OUTPUT";
    Base::gas_base_da_gas_fixed_table = "GAS_BASE_DA_GAS_FIXED_TABLE";
    Base::gas_base_l2_gas_fixed_table = "GAS_BASE_L2_GAS_FIXED_TABLE";
    Base::gas_dyn_da_gas_fixed_table = "GAS_DYN_DA_GAS_FIXED_TABLE";
    Base::gas_dyn_l2_gas_fixed_table = "GAS_DYN_L2_GAS_FIXED_TABLE";
    Base::gas_sel_gas_cost = "GAS_SEL_GAS_COST";
    Base::main_clk = "MAIN_CLK";
    Base::main_sel_da_end_gas_kernel_input = "MAIN_SEL_DA_END_GAS_KERNEL_INPUT";
    Base::main_sel_da_start_gas_kernel_input = "MAIN_SEL_DA_START_GAS_KERNEL_INPUT";
    Base::main_sel_first = "MAIN_SEL_FIRST";
    Base::main_sel_l2_end_gas_kernel_input = "MAIN_SEL_L2_END_GAS_KERNEL_INPUT";
    Base::main_sel_l2_start_gas_kernel_input = "MAIN_SEL_L2_START_GAS_KERNEL_INPUT";
    Base::main_sel_start_exec = "MAIN_SEL_START_EXEC";
    Base::main_zeroes = "MAIN_ZEROES";
    Base::powers_power_of_2 = "POWERS_POWER_OF_2";
    Base::main_kernel_inputs = "MAIN_KERNEL_INPUTS";
    Base::main_kernel_value_out = "MAIN_KERNEL_VALUE_OUT";
    Base::main_kernel_side_effect_out = "MAIN_KERNEL_SIDE_EFFECT_OUT";
    Base::main_kernel_metadata_out = "MAIN_KERNEL_METADATA_OUT";
    Base::main_calldata = "MAIN_CALLDATA";
    Base::main_returndata = "MAIN_RETURNDATA";
    Base::alu_a_hi = "ALU_A_HI";
    Base::alu_a_lo = "ALU_A_LO";
    Base::alu_b_hi = "ALU_B_HI";
    Base::alu_b_lo = "ALU_B_LO";
    Base::alu_b_pow = "ALU_B_POW";
    Base::alu_c_hi = "ALU_C_HI";
    Base::alu_c_lo = "ALU_C_LO";
    Base::alu_cf = "ALU_CF";
    Base::alu_clk = "ALU_CLK";
    Base::alu_cmp_gadget_gt = "ALU_CMP_GADGET_GT";
    Base::alu_cmp_gadget_input_a = "ALU_CMP_GADGET_INPUT_A";
    Base::alu_cmp_gadget_input_b = "ALU_CMP_GADGET_INPUT_B";
    Base::alu_cmp_gadget_non_ff_gt = "ALU_CMP_GADGET_NON_FF_GT";
    Base::alu_cmp_gadget_result = "ALU_CMP_GADGET_RESULT";
    Base::alu_cmp_gadget_sel = "ALU_CMP_GADGET_SEL";
    Base::alu_ff_tag = "ALU_FF_TAG";
    Base::alu_ia = "ALU_IA";
    Base::alu_ib = "ALU_IB";
    Base::alu_ic = "ALU_IC";
    Base::alu_in_tag = "ALU_IN_TAG";
    Base::alu_max_bits_sub_b_bits = "ALU_MAX_BITS_SUB_B_BITS";
    Base::alu_max_bits_sub_b_pow = "ALU_MAX_BITS_SUB_B_POW";
    Base::alu_op_add = "ALU_OP_ADD";
    Base::alu_op_cast = "ALU_OP_CAST";
    Base::alu_op_div = "ALU_OP_DIV";
    Base::alu_op_eq = "ALU_OP_EQ";
    Base::alu_op_lt = "ALU_OP_LT";
    Base::alu_op_lte = "ALU_OP_LTE";
    Base::alu_op_mul = "ALU_OP_MUL";
    Base::alu_op_not = "ALU_OP_NOT";
    Base::alu_op_shl = "ALU_OP_SHL";
    Base::alu_op_shr = "ALU_OP_SHR";
    Base::alu_op_sub = "ALU_OP_SUB";
    Base::alu_partial_prod_hi = "ALU_PARTIAL_PROD_HI";
    Base::alu_partial_prod_lo = "ALU_PARTIAL_PROD_LO";
    Base::alu_range_check_input_value = "ALU_RANGE_CHECK_INPUT_VALUE";
    Base::alu_range_check_num_bits = "ALU_RANGE_CHECK_NUM_BITS";
    Base::alu_range_check_sel = "ALU_RANGE_CHECK_SEL";
    Base::alu_remainder = "ALU_REMAINDER";
    Base::alu_sel_alu = "ALU_SEL_ALU";
    Base::alu_sel_cmp = "ALU_SEL_CMP";
    Base::alu_sel_shift_which = "ALU_SEL_SHIFT_WHICH";
    Base::alu_u128_tag = "ALU_U128_TAG";
    Base::alu_u16_tag = "ALU_U16_TAG";
    Base::alu_u1_tag = "ALU_U1_TAG";
    Base::alu_u32_tag = "ALU_U32_TAG";
    Base::alu_u64_tag = "ALU_U64_TAG";
    Base::alu_u8_tag = "ALU_U8_TAG";
    Base::alu_zero_shift = "ALU_ZERO_SHIFT";
    Base::binary_acc_ia = "BINARY_ACC_IA";
    Base::binary_acc_ib = "BINARY_ACC_IB";
    Base::binary_acc_ic = "BINARY_ACC_IC";
    Base::binary_clk = "BINARY_CLK";
    Base::binary_ia_bytes = "BINARY_IA_BYTES";
    Base::binary_ib_bytes = "BINARY_IB_BYTES";
    Base::binary_ic_bytes = "BINARY_IC_BYTES";
    Base::binary_in_tag = "BINARY_IN_TAG";
    Base::binary_mem_tag_ctr = "BINARY_MEM_TAG_CTR";
    Base::binary_mem_tag_ctr_inv = "BINARY_MEM_TAG_CTR_INV";
    Base::binary_op_id = "BINARY_OP_ID";
    Base::binary_sel_bin = "BINARY_SEL_BIN";
    Base::binary_start = "BINARY_START";
    Base::bytecode_arifact_hash = "BYTECODE_ARIFACT_HASH";
    Base::bytecode_as_fields = "BYTECODE_AS_FIELDS";
    Base::bytecode_bytes = "BYTECODE_BYTES";
    Base::bytecode_bytes_pc = "BYTECODE_BYTES_PC";
    Base::bytecode_class_id = "BYTECODE_CLASS_ID";
    Base::bytecode_contract_address = "BYTECODE_CONTRACT_ADDRESS";
    Base::bytecode_decomposed = "BYTECODE_DECOMPOSED";
    Base::bytecode_deployer_addr = "BYTECODE_DEPLOYER_ADDR";
    Base::bytecode_end_latch = "BYTECODE_END_LATCH";
    Base::bytecode_incoming_viewing_key_x = "BYTECODE_INCOMING_VIEWING_KEY_X";
    Base::bytecode_incoming_viewing_key_y = "BYTECODE_INCOMING_VIEWING_KEY_Y";
    Base::bytecode_initialization_hash = "BYTECODE_INITIALIZATION_HASH";
    Base::bytecode_length_remaining = "BYTECODE_LENGTH_REMAINING";
    Base::bytecode_nullifier_key_x = "BYTECODE_NULLIFIER_KEY_X";
    Base::bytecode_nullifier_key_y = "BYTECODE_NULLIFIER_KEY_Y";
    Base::bytecode_outgoing_viewing_key_x = "BYTECODE_OUTGOING_VIEWING_KEY_X";
    Base::bytecode_outgoing_viewing_key_y = "BYTECODE_OUTGOING_VIEWING_KEY_Y";
    Base::bytecode_private_fn_root = "BYTECODE_PRIVATE_FN_ROOT";
    Base::bytecode_public_key_hash = "BYTECODE_PUBLIC_KEY_HASH";
    Base::bytecode_running_hash = "BYTECODE_RUNNING_HASH";
    Base::bytecode_salt = "BYTECODE_SALT";
    Base::bytecode_tagging_key_x = "BYTECODE_TAGGING_KEY_X";
    Base::bytecode_tagging_key_y = "BYTECODE_TAGGING_KEY_Y";
    Base::cmp_a_hi = "CMP_A_HI";
    Base::cmp_a_lo = "CMP_A_LO";
    Base::cmp_b_hi = "CMP_B_HI";
    Base::cmp_b_lo = "CMP_B_LO";
    Base::cmp_borrow = "CMP_BORROW";
    Base::cmp_clk = "CMP_CLK";
    Base::cmp_cmp_rng_ctr = "CMP_CMP_RNG_CTR";
    Base::cmp_diff = "CMP_DIFF";
    Base::cmp_input_a = "CMP_INPUT_A";
    Base::cmp_input_b = "CMP_INPUT_B";
    Base::cmp_op_eq = "CMP_OP_EQ";
    Base::cmp_op_eq_diff_inv = "CMP_OP_EQ_DIFF_INV";
    Base::cmp_op_gt = "CMP_OP_GT";
    Base::cmp_op_non_ff_gt = "CMP_OP_NON_FF_GT";
    Base::cmp_p_a_borrow = "CMP_P_A_BORROW";
    Base::cmp_p_b_borrow = "CMP_P_B_BORROW";
    Base::cmp_p_sub_a_hi = "CMP_P_SUB_A_HI";
    Base::cmp_p_sub_a_lo = "CMP_P_SUB_A_LO";
    Base::cmp_p_sub_b_hi = "CMP_P_SUB_B_HI";
    Base::cmp_p_sub_b_lo = "CMP_P_SUB_B_LO";
    Base::cmp_range_chk_clk = "CMP_RANGE_CHK_CLK";
    Base::cmp_res_hi = "CMP_RES_HI";
    Base::cmp_res_lo = "CMP_RES_LO";
    Base::cmp_result = "CMP_RESULT";
    Base::cmp_sel_cmp = "CMP_SEL_CMP";
    Base::cmp_sel_rng_chk = "CMP_SEL_RNG_CHK";
    Base::cmp_shift_sel = "CMP_SHIFT_SEL";
    Base::conversion_clk = "CONVERSION_CLK";
    Base::conversion_input = "CONVERSION_INPUT";
    Base::conversion_num_limbs = "CONVERSION_NUM_LIMBS";
    Base::conversion_output_bits = "CONVERSION_OUTPUT_BITS";
    Base::conversion_radix = "CONVERSION_RADIX";
    Base::conversion_sel_to_radix_be = "CONVERSION_SEL_TO_RADIX_BE";
    Base::keccakf1600_clk = "KECCAKF1600_CLK";
    Base::keccakf1600_input = "KECCAKF1600_INPUT";
    Base::keccakf1600_output = "KECCAKF1600_OUTPUT";
    Base::keccakf1600_sel_keccakf1600 = "KECCAKF1600_SEL_KECCAKF1600";
    Base::main_abs_da_rem_gas = "MAIN_ABS_DA_REM_GAS";
    Base::main_abs_l2_rem_gas = "MAIN_ABS_L2_REM_GAS";
    Base::main_alu_in_tag = "MAIN_ALU_IN_TAG";
    Base::main_base_da_gas_op_cost = "MAIN_BASE_DA_GAS_OP_COST";
    Base::main_base_l2_gas_op_cost = "MAIN_BASE_L2_GAS_OP_COST";
    Base::main_bin_op_id = "MAIN_BIN_OP_ID";
    Base::main_call_ptr = "MAIN_CALL_PTR";
    Base::main_da_gas_remaining = "MAIN_DA_GAS_REMAINING";
    Base::main_da_gas_u16_r0 = "MAIN_DA_GAS_U16_R0";
    Base::main_da_gas_u16_r1 = "MAIN_DA_GAS_U16_R1";
    Base::main_da_out_of_gas = "MAIN_DA_OUT_OF_GAS";
    Base::main_dyn_da_gas_op_cost = "MAIN_DYN_DA_GAS_OP_COST";
    Base::main_dyn_gas_multiplier = "MAIN_DYN_GAS_MULTIPLIER";
    Base::main_dyn_l2_gas_op_cost = "MAIN_DYN_L2_GAS_OP_COST";
    Base::main_ia = "MAIN_IA";
    Base::main_ib = "MAIN_IB";
    Base::main_ic = "MAIN_IC";
    Base::main_id = "MAIN_ID";
    Base::main_id_zero = "MAIN_ID_ZERO";
    Base::main_ind_addr_a = "MAIN_IND_ADDR_A";
    Base::main_ind_addr_b = "MAIN_IND_ADDR_B";
    Base::main_ind_addr_c = "MAIN_IND_ADDR_C";
    Base::main_ind_addr_d = "MAIN_IND_ADDR_D";
    Base::main_internal_return_ptr = "MAIN_INTERNAL_RETURN_PTR";
    Base::main_inv = "MAIN_INV";
    Base::main_is_fake_row = "MAIN_IS_FAKE_ROW";
    Base::main_is_gas_accounted = "MAIN_IS_GAS_ACCOUNTED";
    Base::main_l2_gas_remaining = "MAIN_L2_GAS_REMAINING";
    Base::main_l2_gas_u16_r0 = "MAIN_L2_GAS_U16_R0";
    Base::main_l2_gas_u16_r1 = "MAIN_L2_GAS_U16_R1";
    Base::main_l2_out_of_gas = "MAIN_L2_OUT_OF_GAS";
    Base::main_mem_addr_a = "MAIN_MEM_ADDR_A";
    Base::main_mem_addr_b = "MAIN_MEM_ADDR_B";
    Base::main_mem_addr_c = "MAIN_MEM_ADDR_C";
    Base::main_mem_addr_d = "MAIN_MEM_ADDR_D";
    Base::main_op_err = "MAIN_OP_ERR";
    Base::main_opcode_val = "MAIN_OPCODE_VAL";
    Base::main_pc = "MAIN_PC";
    Base::main_r_in_tag = "MAIN_R_IN_TAG";
    Base::main_rwa = "MAIN_RWA";
    Base::main_rwb = "MAIN_RWB";
    Base::main_rwc = "MAIN_RWC";
    Base::main_rwd = "MAIN_RWD";
    Base::main_sel_alu = "MAIN_SEL_ALU";
    Base::main_sel_bin = "MAIN_SEL_BIN";
    Base::main_sel_calldata = "MAIN_SEL_CALLDATA";
    Base::main_sel_execution_end = "MAIN_SEL_EXECUTION_END";
    Base::main_sel_execution_row = "MAIN_SEL_EXECUTION_ROW";
    Base::main_sel_mem_op_a = "MAIN_SEL_MEM_OP_A";
    Base::main_sel_mem_op_b = "MAIN_SEL_MEM_OP_B";
    Base::main_sel_mem_op_c = "MAIN_SEL_MEM_OP_C";
    Base::main_sel_mem_op_d = "MAIN_SEL_MEM_OP_D";
    Base::main_sel_mov_ia_to_ic = "MAIN_SEL_MOV_IA_TO_IC";
    Base::main_sel_mov_ib_to_ic = "MAIN_SEL_MOV_IB_TO_IC";
    Base::main_sel_op_add = "MAIN_SEL_OP_ADD";
    Base::main_sel_op_address = "MAIN_SEL_OP_ADDRESS";
    Base::main_sel_op_and = "MAIN_SEL_OP_AND";
    Base::main_sel_op_block_number = "MAIN_SEL_OP_BLOCK_NUMBER";
    Base::main_sel_op_calldata_copy = "MAIN_SEL_OP_CALLDATA_COPY";
    Base::main_sel_op_cast = "MAIN_SEL_OP_CAST";
    Base::main_sel_op_chain_id = "MAIN_SEL_OP_CHAIN_ID";
    Base::main_sel_op_dagasleft = "MAIN_SEL_OP_DAGASLEFT";
    Base::main_sel_op_debug_log = "MAIN_SEL_OP_DEBUG_LOG";
    Base::main_sel_op_div = "MAIN_SEL_OP_DIV";
    Base::main_sel_op_ecadd = "MAIN_SEL_OP_ECADD";
    Base::main_sel_op_emit_l2_to_l1_msg = "MAIN_SEL_OP_EMIT_L2_TO_L1_MSG";
    Base::main_sel_op_emit_note_hash = "MAIN_SEL_OP_EMIT_NOTE_HASH";
    Base::main_sel_op_emit_nullifier = "MAIN_SEL_OP_EMIT_NULLIFIER";
    Base::main_sel_op_emit_unencrypted_log = "MAIN_SEL_OP_EMIT_UNENCRYPTED_LOG";
    Base::main_sel_op_eq = "MAIN_SEL_OP_EQ";
    Base::main_sel_op_external_call = "MAIN_SEL_OP_EXTERNAL_CALL";
    Base::main_sel_op_external_return = "MAIN_SEL_OP_EXTERNAL_RETURN";
    Base::main_sel_op_external_revert = "MAIN_SEL_OP_EXTERNAL_REVERT";
    Base::main_sel_op_fdiv = "MAIN_SEL_OP_FDIV";
    Base::main_sel_op_fee_per_da_gas = "MAIN_SEL_OP_FEE_PER_DA_GAS";
    Base::main_sel_op_fee_per_l2_gas = "MAIN_SEL_OP_FEE_PER_L2_GAS";
    Base::main_sel_op_get_contract_instance = "MAIN_SEL_OP_GET_CONTRACT_INSTANCE";
    Base::main_sel_op_internal_call = "MAIN_SEL_OP_INTERNAL_CALL";
    Base::main_sel_op_internal_return = "MAIN_SEL_OP_INTERNAL_RETURN";
    Base::main_sel_op_is_static_call = "MAIN_SEL_OP_IS_STATIC_CALL";
    Base::main_sel_op_jump = "MAIN_SEL_OP_JUMP";
    Base::main_sel_op_jumpi = "MAIN_SEL_OP_JUMPI";
    Base::main_sel_op_keccak = "MAIN_SEL_OP_KECCAK";
    Base::main_sel_op_l1_to_l2_msg_exists = "MAIN_SEL_OP_L1_TO_L2_MSG_EXISTS";
    Base::main_sel_op_l2gasleft = "MAIN_SEL_OP_L2GASLEFT";
    Base::main_sel_op_lt = "MAIN_SEL_OP_LT";
    Base::main_sel_op_lte = "MAIN_SEL_OP_LTE";
    Base::main_sel_op_mov = "MAIN_SEL_OP_MOV";
    Base::main_sel_op_msm = "MAIN_SEL_OP_MSM";
    Base::main_sel_op_mul = "MAIN_SEL_OP_MUL";
    Base::main_sel_op_not = "MAIN_SEL_OP_NOT";
    Base::main_sel_op_note_hash_exists = "MAIN_SEL_OP_NOTE_HASH_EXISTS";
    Base::main_sel_op_nullifier_exists = "MAIN_SEL_OP_NULLIFIER_EXISTS";
    Base::main_sel_op_or = "MAIN_SEL_OP_OR";
    Base::main_sel_op_poseidon2 = "MAIN_SEL_OP_POSEIDON2";
    Base::main_sel_op_radix_be = "MAIN_SEL_OP_RADIX_BE";
    Base::main_sel_op_returndata_copy = "MAIN_SEL_OP_RETURNDATA_COPY";
    Base::main_sel_op_returndata_size = "MAIN_SEL_OP_RETURNDATA_SIZE";
    Base::main_sel_op_sender = "MAIN_SEL_OP_SENDER";
    Base::main_sel_op_set = "MAIN_SEL_OP_SET";
    Base::main_sel_op_sha256 = "MAIN_SEL_OP_SHA256";
    Base::main_sel_op_shl = "MAIN_SEL_OP_SHL";
    Base::main_sel_op_shr = "MAIN_SEL_OP_SHR";
    Base::main_sel_op_sload = "MAIN_SEL_OP_SLOAD";
    Base::main_sel_op_sstore = "MAIN_SEL_OP_SSTORE";
    Base::main_sel_op_static_call = "MAIN_SEL_OP_STATIC_CALL";
    Base::main_sel_op_sub = "MAIN_SEL_OP_SUB";
    Base::main_sel_op_timestamp = "MAIN_SEL_OP_TIMESTAMP";
    Base::main_sel_op_transaction_fee = "MAIN_SEL_OP_TRANSACTION_FEE";
    Base::main_sel_op_version = "MAIN_SEL_OP_VERSION";
    Base::main_sel_op_xor = "MAIN_SEL_OP_XOR";
    Base::main_sel_q_kernel_lookup = "MAIN_SEL_Q_KERNEL_LOOKUP";
    Base::main_sel_q_kernel_output_lookup = "MAIN_SEL_Q_KERNEL_OUTPUT_LOOKUP";
    Base::main_sel_resolve_ind_addr_a = "MAIN_SEL_RESOLVE_IND_ADDR_A";
    Base::main_sel_resolve_ind_addr_b = "MAIN_SEL_RESOLVE_IND_ADDR_B";
    Base::main_sel_resolve_ind_addr_c = "MAIN_SEL_RESOLVE_IND_ADDR_C";
    Base::main_sel_resolve_ind_addr_d = "MAIN_SEL_RESOLVE_IND_ADDR_D";
    Base::main_sel_returndata = "MAIN_SEL_RETURNDATA";
    Base::main_sel_rng_16 = "MAIN_SEL_RNG_16";
    Base::main_sel_rng_8 = "MAIN_SEL_RNG_8";
    Base::main_sel_slice_gadget = "MAIN_SEL_SLICE_GADGET";
    Base::main_space_id = "MAIN_SPACE_ID";
    Base::main_tag_err = "MAIN_TAG_ERR";
    Base::main_w_in_tag = "MAIN_W_IN_TAG";
    Base::mem_addr = "MEM_ADDR";
    Base::mem_clk = "MEM_CLK";
    Base::mem_diff = "MEM_DIFF";
    Base::mem_glob_addr = "MEM_GLOB_ADDR";
    Base::mem_last = "MEM_LAST";
    Base::mem_lastAccess = "MEM_LAST_ACCESS";
    Base::mem_one_min_inv = "MEM_ONE_MIN_INV";
    Base::mem_r_in_tag = "MEM_R_IN_TAG";
    Base::mem_rw = "MEM_RW";
    Base::mem_sel_mem = "MEM_SEL_MEM";
    Base::mem_sel_mov_ia_to_ic = "MEM_SEL_MOV_IA_TO_IC";
    Base::mem_sel_mov_ib_to_ic = "MEM_SEL_MOV_IB_TO_IC";
    Base::mem_sel_op_a = "MEM_SEL_OP_A";
    Base::mem_sel_op_b = "MEM_SEL_OP_B";
    Base::mem_sel_op_c = "MEM_SEL_OP_C";
    Base::mem_sel_op_d = "MEM_SEL_OP_D";
    Base::mem_sel_op_poseidon_read_a = "MEM_SEL_OP_POSEIDON_READ_A";
    Base::mem_sel_op_poseidon_read_b = "MEM_SEL_OP_POSEIDON_READ_B";
    Base::mem_sel_op_poseidon_read_c = "MEM_SEL_OP_POSEIDON_READ_C";
    Base::mem_sel_op_poseidon_read_d = "MEM_SEL_OP_POSEIDON_READ_D";
    Base::mem_sel_op_poseidon_write_a = "MEM_SEL_OP_POSEIDON_WRITE_A";
    Base::mem_sel_op_poseidon_write_b = "MEM_SEL_OP_POSEIDON_WRITE_B";
    Base::mem_sel_op_poseidon_write_c = "MEM_SEL_OP_POSEIDON_WRITE_C";
    Base::mem_sel_op_poseidon_write_d = "MEM_SEL_OP_POSEIDON_WRITE_D";
    Base::mem_sel_op_slice = "MEM_SEL_OP_SLICE";
    Base::mem_sel_resolve_ind_addr_a = "MEM_SEL_RESOLVE_IND_ADDR_A";
    Base::mem_sel_resolve_ind_addr_b = "MEM_SEL_RESOLVE_IND_ADDR_B";
    Base::mem_sel_resolve_ind_addr_c = "MEM_SEL_RESOLVE_IND_ADDR_C";
    Base::mem_sel_resolve_ind_addr_d = "MEM_SEL_RESOLVE_IND_ADDR_D";
    Base::mem_sel_rng_chk = "MEM_SEL_RNG_CHK";
    Base::mem_skip_check_tag = "MEM_SKIP_CHECK_TAG";
    Base::mem_space_id = "MEM_SPACE_ID";
    Base::mem_tag = "MEM_TAG";
    Base::mem_tag_err = "MEM_TAG_ERR";
    Base::mem_tsp = "MEM_TSP";
    Base::mem_u16_r0 = "MEM_U16_R0";
    Base::mem_u16_r1 = "MEM_U16_R1";
    Base::mem_u8_r0 = "MEM_U8_R0";
    Base::mem_val = "MEM_VAL";
    Base::mem_w_in_tag = "MEM_W_IN_TAG";
    Base::merkle_tree_clk = "MERKLE_TREE_CLK";
    Base::merkle_tree_expected_tree_root = "MERKLE_TREE_EXPECTED_TREE_ROOT";
    Base::merkle_tree_latch = "MERKLE_TREE_LATCH";
    Base::merkle_tree_leaf_index = "MERKLE_TREE_LEAF_INDEX";
    Base::merkle_tree_leaf_index_is_even = "MERKLE_TREE_LEAF_INDEX_IS_EVEN";
    Base::merkle_tree_leaf_value = "MERKLE_TREE_LEAF_VALUE";
    Base::merkle_tree_left_hash = "MERKLE_TREE_LEFT_HASH";
    Base::merkle_tree_output_hash = "MERKLE_TREE_OUTPUT_HASH";
    Base::merkle_tree_path_len = "MERKLE_TREE_PATH_LEN";
    Base::merkle_tree_path_len_inv = "MERKLE_TREE_PATH_LEN_INV";
    Base::merkle_tree_right_hash = "MERKLE_TREE_RIGHT_HASH";
    Base::merkle_tree_sel_merkle_tree = "MERKLE_TREE_SEL_MERKLE_TREE";
    Base::merkle_tree_sibling_value = "MERKLE_TREE_SIBLING_VALUE";
    Base::poseidon2_B_10_0 = "POSEIDON2_B_10_0";
    Base::poseidon2_B_10_1 = "POSEIDON2_B_10_1";
    Base::poseidon2_B_10_2 = "POSEIDON2_B_10_2";
    Base::poseidon2_B_10_3 = "POSEIDON2_B_10_3";
    Base::poseidon2_B_11_0 = "POSEIDON2_B_11_0";
    Base::poseidon2_B_11_1 = "POSEIDON2_B_11_1";
    Base::poseidon2_B_11_2 = "POSEIDON2_B_11_2";
    Base::poseidon2_B_11_3 = "POSEIDON2_B_11_3";
    Base::poseidon2_B_12_0 = "POSEIDON2_B_12_0";
    Base::poseidon2_B_12_1 = "POSEIDON2_B_12_1";
    Base::poseidon2_B_12_2 = "POSEIDON2_B_12_2";
    Base::poseidon2_B_12_3 = "POSEIDON2_B_12_3";
    Base::poseidon2_B_13_0 = "POSEIDON2_B_13_0";
    Base::poseidon2_B_13_1 = "POSEIDON2_B_13_1";
    Base::poseidon2_B_13_2 = "POSEIDON2_B_13_2";
    Base::poseidon2_B_13_3 = "POSEIDON2_B_13_3";
    Base::poseidon2_B_14_0 = "POSEIDON2_B_14_0";
    Base::poseidon2_B_14_1 = "POSEIDON2_B_14_1";
    Base::poseidon2_B_14_2 = "POSEIDON2_B_14_2";
    Base::poseidon2_B_14_3 = "POSEIDON2_B_14_3";
    Base::poseidon2_B_15_0 = "POSEIDON2_B_15_0";
    Base::poseidon2_B_15_1 = "POSEIDON2_B_15_1";
    Base::poseidon2_B_15_2 = "POSEIDON2_B_15_2";
    Base::poseidon2_B_15_3 = "POSEIDON2_B_15_3";
    Base::poseidon2_B_16_0 = "POSEIDON2_B_16_0";
    Base::poseidon2_B_16_1 = "POSEIDON2_B_16_1";
    Base::poseidon2_B_16_2 = "POSEIDON2_B_16_2";
    Base::poseidon2_B_16_3 = "POSEIDON2_B_16_3";
    Base::poseidon2_B_17_0 = "POSEIDON2_B_17_0";
    Base::poseidon2_B_17_1 = "POSEIDON2_B_17_1";
    Base::poseidon2_B_17_2 = "POSEIDON2_B_17_2";
    Base::poseidon2_B_17_3 = "POSEIDON2_B_17_3";
    Base::poseidon2_B_18_0 = "POSEIDON2_B_18_0";
    Base::poseidon2_B_18_1 = "POSEIDON2_B_18_1";
    Base::poseidon2_B_18_2 = "POSEIDON2_B_18_2";
    Base::poseidon2_B_18_3 = "POSEIDON2_B_18_3";
    Base::poseidon2_B_19_0 = "POSEIDON2_B_19_0";
    Base::poseidon2_B_19_1 = "POSEIDON2_B_19_1";
    Base::poseidon2_B_19_2 = "POSEIDON2_B_19_2";
    Base::poseidon2_B_19_3 = "POSEIDON2_B_19_3";
    Base::poseidon2_B_20_0 = "POSEIDON2_B_20_0";
    Base::poseidon2_B_20_1 = "POSEIDON2_B_20_1";
    Base::poseidon2_B_20_2 = "POSEIDON2_B_20_2";
    Base::poseidon2_B_20_3 = "POSEIDON2_B_20_3";
    Base::poseidon2_B_21_0 = "POSEIDON2_B_21_0";
    Base::poseidon2_B_21_1 = "POSEIDON2_B_21_1";
    Base::poseidon2_B_21_2 = "POSEIDON2_B_21_2";
    Base::poseidon2_B_21_3 = "POSEIDON2_B_21_3";
    Base::poseidon2_B_22_0 = "POSEIDON2_B_22_0";
    Base::poseidon2_B_22_1 = "POSEIDON2_B_22_1";
    Base::poseidon2_B_22_2 = "POSEIDON2_B_22_2";
    Base::poseidon2_B_22_3 = "POSEIDON2_B_22_3";
    Base::poseidon2_B_23_0 = "POSEIDON2_B_23_0";
    Base::poseidon2_B_23_1 = "POSEIDON2_B_23_1";
    Base::poseidon2_B_23_2 = "POSEIDON2_B_23_2";
    Base::poseidon2_B_23_3 = "POSEIDON2_B_23_3";
    Base::poseidon2_B_24_0 = "POSEIDON2_B_24_0";
    Base::poseidon2_B_24_1 = "POSEIDON2_B_24_1";
    Base::poseidon2_B_24_2 = "POSEIDON2_B_24_2";
    Base::poseidon2_B_24_3 = "POSEIDON2_B_24_3";
    Base::poseidon2_B_25_0 = "POSEIDON2_B_25_0";
    Base::poseidon2_B_25_1 = "POSEIDON2_B_25_1";
    Base::poseidon2_B_25_2 = "POSEIDON2_B_25_2";
    Base::poseidon2_B_25_3 = "POSEIDON2_B_25_3";
    Base::poseidon2_B_26_0 = "POSEIDON2_B_26_0";
    Base::poseidon2_B_26_1 = "POSEIDON2_B_26_1";
    Base::poseidon2_B_26_2 = "POSEIDON2_B_26_2";
    Base::poseidon2_B_26_3 = "POSEIDON2_B_26_3";
    Base::poseidon2_B_27_0 = "POSEIDON2_B_27_0";
    Base::poseidon2_B_27_1 = "POSEIDON2_B_27_1";
    Base::poseidon2_B_27_2 = "POSEIDON2_B_27_2";
    Base::poseidon2_B_27_3 = "POSEIDON2_B_27_3";
    Base::poseidon2_B_28_0 = "POSEIDON2_B_28_0";
    Base::poseidon2_B_28_1 = "POSEIDON2_B_28_1";
    Base::poseidon2_B_28_2 = "POSEIDON2_B_28_2";
    Base::poseidon2_B_28_3 = "POSEIDON2_B_28_3";
    Base::poseidon2_B_29_0 = "POSEIDON2_B_29_0";
    Base::poseidon2_B_29_1 = "POSEIDON2_B_29_1";
    Base::poseidon2_B_29_2 = "POSEIDON2_B_29_2";
    Base::poseidon2_B_29_3 = "POSEIDON2_B_29_3";
    Base::poseidon2_B_30_0 = "POSEIDON2_B_30_0";
    Base::poseidon2_B_30_1 = "POSEIDON2_B_30_1";
    Base::poseidon2_B_30_2 = "POSEIDON2_B_30_2";
    Base::poseidon2_B_30_3 = "POSEIDON2_B_30_3";
    Base::poseidon2_B_31_0 = "POSEIDON2_B_31_0";
    Base::poseidon2_B_31_1 = "POSEIDON2_B_31_1";
    Base::poseidon2_B_31_2 = "POSEIDON2_B_31_2";
    Base::poseidon2_B_31_3 = "POSEIDON2_B_31_3";
    Base::poseidon2_B_32_0 = "POSEIDON2_B_32_0";
    Base::poseidon2_B_32_1 = "POSEIDON2_B_32_1";
    Base::poseidon2_B_32_2 = "POSEIDON2_B_32_2";
    Base::poseidon2_B_32_3 = "POSEIDON2_B_32_3";
    Base::poseidon2_B_33_0 = "POSEIDON2_B_33_0";
    Base::poseidon2_B_33_1 = "POSEIDON2_B_33_1";
    Base::poseidon2_B_33_2 = "POSEIDON2_B_33_2";
    Base::poseidon2_B_33_3 = "POSEIDON2_B_33_3";
    Base::poseidon2_B_34_0 = "POSEIDON2_B_34_0";
    Base::poseidon2_B_34_1 = "POSEIDON2_B_34_1";
    Base::poseidon2_B_34_2 = "POSEIDON2_B_34_2";
    Base::poseidon2_B_34_3 = "POSEIDON2_B_34_3";
    Base::poseidon2_B_35_0 = "POSEIDON2_B_35_0";
    Base::poseidon2_B_35_1 = "POSEIDON2_B_35_1";
    Base::poseidon2_B_35_2 = "POSEIDON2_B_35_2";
    Base::poseidon2_B_35_3 = "POSEIDON2_B_35_3";
    Base::poseidon2_B_36_0 = "POSEIDON2_B_36_0";
    Base::poseidon2_B_36_1 = "POSEIDON2_B_36_1";
    Base::poseidon2_B_36_2 = "POSEIDON2_B_36_2";
    Base::poseidon2_B_36_3 = "POSEIDON2_B_36_3";
    Base::poseidon2_B_37_0 = "POSEIDON2_B_37_0";
    Base::poseidon2_B_37_1 = "POSEIDON2_B_37_1";
    Base::poseidon2_B_37_2 = "POSEIDON2_B_37_2";
    Base::poseidon2_B_37_3 = "POSEIDON2_B_37_3";
    Base::poseidon2_B_38_0 = "POSEIDON2_B_38_0";
    Base::poseidon2_B_38_1 = "POSEIDON2_B_38_1";
    Base::poseidon2_B_38_2 = "POSEIDON2_B_38_2";
    Base::poseidon2_B_38_3 = "POSEIDON2_B_38_3";
    Base::poseidon2_B_39_0 = "POSEIDON2_B_39_0";
    Base::poseidon2_B_39_1 = "POSEIDON2_B_39_1";
    Base::poseidon2_B_39_2 = "POSEIDON2_B_39_2";
    Base::poseidon2_B_39_3 = "POSEIDON2_B_39_3";
    Base::poseidon2_B_40_0 = "POSEIDON2_B_40_0";
    Base::poseidon2_B_40_1 = "POSEIDON2_B_40_1";
    Base::poseidon2_B_40_2 = "POSEIDON2_B_40_2";
    Base::poseidon2_B_40_3 = "POSEIDON2_B_40_3";
    Base::poseidon2_B_41_0 = "POSEIDON2_B_41_0";
    Base::poseidon2_B_41_1 = "POSEIDON2_B_41_1";
    Base::poseidon2_B_41_2 = "POSEIDON2_B_41_2";
    Base::poseidon2_B_41_3 = "POSEIDON2_B_41_3";
    Base::poseidon2_B_42_0 = "POSEIDON2_B_42_0";
    Base::poseidon2_B_42_1 = "POSEIDON2_B_42_1";
    Base::poseidon2_B_42_2 = "POSEIDON2_B_42_2";
    Base::poseidon2_B_42_3 = "POSEIDON2_B_42_3";
    Base::poseidon2_B_43_0 = "POSEIDON2_B_43_0";
    Base::poseidon2_B_43_1 = "POSEIDON2_B_43_1";
    Base::poseidon2_B_43_2 = "POSEIDON2_B_43_2";
    Base::poseidon2_B_43_3 = "POSEIDON2_B_43_3";
    Base::poseidon2_B_44_0 = "POSEIDON2_B_44_0";
    Base::poseidon2_B_44_1 = "POSEIDON2_B_44_1";
    Base::poseidon2_B_44_2 = "POSEIDON2_B_44_2";
    Base::poseidon2_B_44_3 = "POSEIDON2_B_44_3";
    Base::poseidon2_B_45_0 = "POSEIDON2_B_45_0";
    Base::poseidon2_B_45_1 = "POSEIDON2_B_45_1";
    Base::poseidon2_B_45_2 = "POSEIDON2_B_45_2";
    Base::poseidon2_B_45_3 = "POSEIDON2_B_45_3";
    Base::poseidon2_B_46_0 = "POSEIDON2_B_46_0";
    Base::poseidon2_B_46_1 = "POSEIDON2_B_46_1";
    Base::poseidon2_B_46_2 = "POSEIDON2_B_46_2";
    Base::poseidon2_B_46_3 = "POSEIDON2_B_46_3";
    Base::poseidon2_B_47_0 = "POSEIDON2_B_47_0";
    Base::poseidon2_B_47_1 = "POSEIDON2_B_47_1";
    Base::poseidon2_B_47_2 = "POSEIDON2_B_47_2";
    Base::poseidon2_B_47_3 = "POSEIDON2_B_47_3";
    Base::poseidon2_B_48_0 = "POSEIDON2_B_48_0";
    Base::poseidon2_B_48_1 = "POSEIDON2_B_48_1";
    Base::poseidon2_B_48_2 = "POSEIDON2_B_48_2";
    Base::poseidon2_B_48_3 = "POSEIDON2_B_48_3";
    Base::poseidon2_B_49_0 = "POSEIDON2_B_49_0";
    Base::poseidon2_B_49_1 = "POSEIDON2_B_49_1";
    Base::poseidon2_B_49_2 = "POSEIDON2_B_49_2";
    Base::poseidon2_B_49_3 = "POSEIDON2_B_49_3";
    Base::poseidon2_B_4_0 = "POSEIDON2_B_4_0";
    Base::poseidon2_B_4_1 = "POSEIDON2_B_4_1";
    Base::poseidon2_B_4_2 = "POSEIDON2_B_4_2";
    Base::poseidon2_B_4_3 = "POSEIDON2_B_4_3";
    Base::poseidon2_B_50_0 = "POSEIDON2_B_50_0";
    Base::poseidon2_B_50_1 = "POSEIDON2_B_50_1";
    Base::poseidon2_B_50_2 = "POSEIDON2_B_50_2";
    Base::poseidon2_B_50_3 = "POSEIDON2_B_50_3";
    Base::poseidon2_B_51_0 = "POSEIDON2_B_51_0";
    Base::poseidon2_B_51_1 = "POSEIDON2_B_51_1";
    Base::poseidon2_B_51_2 = "POSEIDON2_B_51_2";
    Base::poseidon2_B_51_3 = "POSEIDON2_B_51_3";
    Base::poseidon2_B_52_0 = "POSEIDON2_B_52_0";
    Base::poseidon2_B_52_1 = "POSEIDON2_B_52_1";
    Base::poseidon2_B_52_2 = "POSEIDON2_B_52_2";
    Base::poseidon2_B_52_3 = "POSEIDON2_B_52_3";
    Base::poseidon2_B_53_0 = "POSEIDON2_B_53_0";
    Base::poseidon2_B_53_1 = "POSEIDON2_B_53_1";
    Base::poseidon2_B_53_2 = "POSEIDON2_B_53_2";
    Base::poseidon2_B_53_3 = "POSEIDON2_B_53_3";
    Base::poseidon2_B_54_0 = "POSEIDON2_B_54_0";
    Base::poseidon2_B_54_1 = "POSEIDON2_B_54_1";
    Base::poseidon2_B_54_2 = "POSEIDON2_B_54_2";
    Base::poseidon2_B_54_3 = "POSEIDON2_B_54_3";
    Base::poseidon2_B_55_0 = "POSEIDON2_B_55_0";
    Base::poseidon2_B_55_1 = "POSEIDON2_B_55_1";
    Base::poseidon2_B_55_2 = "POSEIDON2_B_55_2";
    Base::poseidon2_B_55_3 = "POSEIDON2_B_55_3";
    Base::poseidon2_B_56_0 = "POSEIDON2_B_56_0";
    Base::poseidon2_B_56_1 = "POSEIDON2_B_56_1";
    Base::poseidon2_B_56_2 = "POSEIDON2_B_56_2";
    Base::poseidon2_B_56_3 = "POSEIDON2_B_56_3";
    Base::poseidon2_B_57_0 = "POSEIDON2_B_57_0";
    Base::poseidon2_B_57_1 = "POSEIDON2_B_57_1";
    Base::poseidon2_B_57_2 = "POSEIDON2_B_57_2";
    Base::poseidon2_B_57_3 = "POSEIDON2_B_57_3";
    Base::poseidon2_B_58_0 = "POSEIDON2_B_58_0";
    Base::poseidon2_B_58_1 = "POSEIDON2_B_58_1";
    Base::poseidon2_B_58_2 = "POSEIDON2_B_58_2";
    Base::poseidon2_B_58_3 = "POSEIDON2_B_58_3";
    Base::poseidon2_B_59_0 = "POSEIDON2_B_59_0";
    Base::poseidon2_B_59_1 = "POSEIDON2_B_59_1";
    Base::poseidon2_B_59_2 = "POSEIDON2_B_59_2";
    Base::poseidon2_B_59_3 = "POSEIDON2_B_59_3";
    Base::poseidon2_B_5_0 = "POSEIDON2_B_5_0";
    Base::poseidon2_B_5_1 = "POSEIDON2_B_5_1";
    Base::poseidon2_B_5_2 = "POSEIDON2_B_5_2";
    Base::poseidon2_B_5_3 = "POSEIDON2_B_5_3";
    Base::poseidon2_B_6_0 = "POSEIDON2_B_6_0";
    Base::poseidon2_B_6_1 = "POSEIDON2_B_6_1";
    Base::poseidon2_B_6_2 = "POSEIDON2_B_6_2";
    Base::poseidon2_B_6_3 = "POSEIDON2_B_6_3";
    Base::poseidon2_B_7_0 = "POSEIDON2_B_7_0";
    Base::poseidon2_B_7_1 = "POSEIDON2_B_7_1";
    Base::poseidon2_B_7_2 = "POSEIDON2_B_7_2";
    Base::poseidon2_B_7_3 = "POSEIDON2_B_7_3";
    Base::poseidon2_B_8_0 = "POSEIDON2_B_8_0";
    Base::poseidon2_B_8_1 = "POSEIDON2_B_8_1";
    Base::poseidon2_B_8_2 = "POSEIDON2_B_8_2";
    Base::poseidon2_B_8_3 = "POSEIDON2_B_8_3";
    Base::poseidon2_B_9_0 = "POSEIDON2_B_9_0";
    Base::poseidon2_B_9_1 = "POSEIDON2_B_9_1";
    Base::poseidon2_B_9_2 = "POSEIDON2_B_9_2";
    Base::poseidon2_B_9_3 = "POSEIDON2_B_9_3";
    Base::poseidon2_EXT_LAYER_4 = "POSEIDON2_EXT_LAYER_4";
    Base::poseidon2_EXT_LAYER_5 = "POSEIDON2_EXT_LAYER_5";
    Base::poseidon2_EXT_LAYER_6 = "POSEIDON2_EXT_LAYER_6";
    Base::poseidon2_EXT_LAYER_7 = "POSEIDON2_EXT_LAYER_7";
    Base::poseidon2_T_0_4 = "POSEIDON2_T_0_4";
    Base::poseidon2_T_0_5 = "POSEIDON2_T_0_5";
    Base::poseidon2_T_0_6 = "POSEIDON2_T_0_6";
    Base::poseidon2_T_0_7 = "POSEIDON2_T_0_7";
    Base::poseidon2_T_1_4 = "POSEIDON2_T_1_4";
    Base::poseidon2_T_1_5 = "POSEIDON2_T_1_5";
    Base::poseidon2_T_1_6 = "POSEIDON2_T_1_6";
    Base::poseidon2_T_1_7 = "POSEIDON2_T_1_7";
    Base::poseidon2_T_2_4 = "POSEIDON2_T_2_4";
    Base::poseidon2_T_2_5 = "POSEIDON2_T_2_5";
    Base::poseidon2_T_2_6 = "POSEIDON2_T_2_6";
    Base::poseidon2_T_2_7 = "POSEIDON2_T_2_7";
    Base::poseidon2_T_3_4 = "POSEIDON2_T_3_4";
    Base::poseidon2_T_3_5 = "POSEIDON2_T_3_5";
    Base::poseidon2_T_3_6 = "POSEIDON2_T_3_6";
    Base::poseidon2_T_3_7 = "POSEIDON2_T_3_7";
    Base::poseidon2_T_60_4 = "POSEIDON2_T_60_4";
    Base::poseidon2_T_60_5 = "POSEIDON2_T_60_5";
    Base::poseidon2_T_60_6 = "POSEIDON2_T_60_6";
    Base::poseidon2_T_60_7 = "POSEIDON2_T_60_7";
    Base::poseidon2_T_61_4 = "POSEIDON2_T_61_4";
    Base::poseidon2_T_61_5 = "POSEIDON2_T_61_5";
    Base::poseidon2_T_61_6 = "POSEIDON2_T_61_6";
    Base::poseidon2_T_61_7 = "POSEIDON2_T_61_7";
    Base::poseidon2_T_62_4 = "POSEIDON2_T_62_4";
    Base::poseidon2_T_62_5 = "POSEIDON2_T_62_5";
    Base::poseidon2_T_62_6 = "POSEIDON2_T_62_6";
    Base::poseidon2_T_62_7 = "POSEIDON2_T_62_7";
    Base::poseidon2_T_63_4 = "POSEIDON2_T_63_4";
    Base::poseidon2_T_63_5 = "POSEIDON2_T_63_5";
    Base::poseidon2_T_63_6 = "POSEIDON2_T_63_6";
    Base::poseidon2_T_63_7 = "POSEIDON2_T_63_7";
    Base::poseidon2_a_0 = "POSEIDON2_A_0";
    Base::poseidon2_a_1 = "POSEIDON2_A_1";
    Base::poseidon2_a_2 = "POSEIDON2_A_2";
    Base::poseidon2_a_3 = "POSEIDON2_A_3";
    Base::poseidon2_b_0 = "POSEIDON2_B_0";
    Base::poseidon2_b_1 = "POSEIDON2_B_1";
    Base::poseidon2_b_2 = "POSEIDON2_B_2";
    Base::poseidon2_b_3 = "POSEIDON2_B_3";
    Base::poseidon2_clk = "POSEIDON2_CLK";
    Base::poseidon2_full_a_0 = "POSEIDON2_FULL_A_0";
    Base::poseidon2_full_a_1 = "POSEIDON2_FULL_A_1";
    Base::poseidon2_full_a_2 = "POSEIDON2_FULL_A_2";
    Base::poseidon2_full_a_3 = "POSEIDON2_FULL_A_3";
    Base::poseidon2_full_b_0 = "POSEIDON2_FULL_B_0";
    Base::poseidon2_full_b_1 = "POSEIDON2_FULL_B_1";
    Base::poseidon2_full_b_2 = "POSEIDON2_FULL_B_2";
    Base::poseidon2_full_b_3 = "POSEIDON2_FULL_B_3";
    Base::poseidon2_full_clk = "POSEIDON2_FULL_CLK";
    Base::poseidon2_full_end_poseidon = "POSEIDON2_FULL_END_POSEIDON";
    Base::poseidon2_full_execute_poseidon_perm = "POSEIDON2_FULL_EXECUTE_POSEIDON_PERM";
    Base::poseidon2_full_input_0 = "POSEIDON2_FULL_INPUT_0";
    Base::poseidon2_full_input_1 = "POSEIDON2_FULL_INPUT_1";
    Base::poseidon2_full_input_2 = "POSEIDON2_FULL_INPUT_2";
    Base::poseidon2_full_input_len = "POSEIDON2_FULL_INPUT_LEN";
    Base::poseidon2_full_num_perm_rounds_rem = "POSEIDON2_FULL_NUM_PERM_ROUNDS_REM";
    Base::poseidon2_full_num_perm_rounds_rem_inv = "POSEIDON2_FULL_NUM_PERM_ROUNDS_REM_INV";
    Base::poseidon2_full_output = "POSEIDON2_FULL_OUTPUT";
    Base::poseidon2_full_padding = "POSEIDON2_FULL_PADDING";
    Base::poseidon2_full_sel_merkle_tree = "POSEIDON2_FULL_SEL_MERKLE_TREE";
    Base::poseidon2_full_sel_poseidon = "POSEIDON2_FULL_SEL_POSEIDON";
    Base::poseidon2_full_start_poseidon = "POSEIDON2_FULL_START_POSEIDON";
    Base::poseidon2_input_addr = "POSEIDON2_INPUT_ADDR";
    Base::poseidon2_mem_addr_read_a = "POSEIDON2_MEM_ADDR_READ_A";
    Base::poseidon2_mem_addr_read_b = "POSEIDON2_MEM_ADDR_READ_B";
    Base::poseidon2_mem_addr_read_c = "POSEIDON2_MEM_ADDR_READ_C";
    Base::poseidon2_mem_addr_read_d = "POSEIDON2_MEM_ADDR_READ_D";
    Base::poseidon2_mem_addr_write_a = "POSEIDON2_MEM_ADDR_WRITE_A";
    Base::poseidon2_mem_addr_write_b = "POSEIDON2_MEM_ADDR_WRITE_B";
    Base::poseidon2_mem_addr_write_c = "POSEIDON2_MEM_ADDR_WRITE_C";
    Base::poseidon2_mem_addr_write_d = "POSEIDON2_MEM_ADDR_WRITE_D";
    Base::poseidon2_output_addr = "POSEIDON2_OUTPUT_ADDR";
    Base::poseidon2_sel_poseidon_perm = "POSEIDON2_SEL_POSEIDON_PERM";
    Base::poseidon2_sel_poseidon_perm_immediate = "POSEIDON2_SEL_POSEIDON_PERM_IMMEDIATE";
    Base::poseidon2_sel_poseidon_perm_mem_op = "POSEIDON2_SEL_POSEIDON_PERM_MEM_OP";
    Base::poseidon2_space_id = "POSEIDON2_SPACE_ID";
    Base::range_check_alu_rng_chk = "RANGE_CHECK_ALU_RNG_CHK";
    Base::range_check_clk = "RANGE_CHECK_CLK";
    Base::range_check_cmp_hi_bits_rng_chk = "RANGE_CHECK_CMP_HI_BITS_RNG_CHK";
    Base::range_check_cmp_lo_bits_rng_chk = "RANGE_CHECK_CMP_LO_BITS_RNG_CHK";
    Base::range_check_cmp_non_ff_rng_chk = "RANGE_CHECK_CMP_NON_FF_RNG_CHK";
    Base::range_check_dyn_diff = "RANGE_CHECK_DYN_DIFF";
    Base::range_check_dyn_rng_chk_bits = "RANGE_CHECK_DYN_RNG_CHK_BITS";
    Base::range_check_dyn_rng_chk_pow_2 = "RANGE_CHECK_DYN_RNG_CHK_POW_2";
    Base::range_check_gas_da_rng_chk = "RANGE_CHECK_GAS_DA_RNG_CHK";
    Base::range_check_gas_l2_rng_chk = "RANGE_CHECK_GAS_L2_RNG_CHK";
    Base::range_check_is_lte_u112 = "RANGE_CHECK_IS_LTE_U112";
    Base::range_check_is_lte_u128 = "RANGE_CHECK_IS_LTE_U128";
    Base::range_check_is_lte_u16 = "RANGE_CHECK_IS_LTE_U16";
    Base::range_check_is_lte_u32 = "RANGE_CHECK_IS_LTE_U32";
    Base::range_check_is_lte_u48 = "RANGE_CHECK_IS_LTE_U48";
    Base::range_check_is_lte_u64 = "RANGE_CHECK_IS_LTE_U64";
    Base::range_check_is_lte_u80 = "RANGE_CHECK_IS_LTE_U80";
    Base::range_check_is_lte_u96 = "RANGE_CHECK_IS_LTE_U96";
    Base::range_check_rng_chk_bits = "RANGE_CHECK_RNG_CHK_BITS";
    Base::range_check_sel_lookup_0 = "RANGE_CHECK_SEL_LOOKUP_0";
    Base::range_check_sel_lookup_1 = "RANGE_CHECK_SEL_LOOKUP_1";
    Base::range_check_sel_lookup_2 = "RANGE_CHECK_SEL_LOOKUP_2";
    Base::range_check_sel_lookup_3 = "RANGE_CHECK_SEL_LOOKUP_3";
    Base::range_check_sel_lookup_4 = "RANGE_CHECK_SEL_LOOKUP_4";
    Base::range_check_sel_lookup_5 = "RANGE_CHECK_SEL_LOOKUP_5";
    Base::range_check_sel_lookup_6 = "RANGE_CHECK_SEL_LOOKUP_6";
    Base::range_check_sel_rng_chk = "RANGE_CHECK_SEL_RNG_CHK";
    Base::range_check_u16_r0 = "RANGE_CHECK_U16_R0";
    Base::range_check_u16_r1 = "RANGE_CHECK_U16_R1";
    Base::range_check_u16_r2 = "RANGE_CHECK_U16_R2";
    Base::range_check_u16_r3 = "RANGE_CHECK_U16_R3";
    Base::range_check_u16_r4 = "RANGE_CHECK_U16_R4";
    Base::range_check_u16_r5 = "RANGE_CHECK_U16_R5";
    Base::range_check_u16_r6 = "RANGE_CHECK_U16_R6";
    Base::range_check_u16_r7 = "RANGE_CHECK_U16_R7";
    Base::range_check_value = "RANGE_CHECK_VALUE";
    Base::sha256_clk = "SHA256_CLK";
    Base::sha256_input = "SHA256_INPUT";
    Base::sha256_output = "SHA256_OUTPUT";
    Base::sha256_sel_sha256_compression = "SHA256_SEL_SHA256_COMPRESSION";
    Base::sha256_state = "SHA256_STATE";
    Base::slice_addr = "SLICE_ADDR";
    Base::slice_clk = "SLICE_CLK";
    Base::slice_cnt = "SLICE_CNT";
    Base::slice_col_offset = "SLICE_COL_OFFSET";
    Base::slice_one_min_inv = "SLICE_ONE_MIN_INV";
    Base::slice_sel_cd_cpy = "SLICE_SEL_CD_CPY";
    Base::slice_sel_mem_active = "SLICE_SEL_MEM_ACTIVE";
    Base::slice_sel_return = "SLICE_SEL_RETURN";
    Base::slice_sel_start = "SLICE_SEL_START";
    Base::slice_space_id = "SLICE_SPACE_ID";
    Base::slice_val = "SLICE_VAL";
    Base::perm_rng_non_ff_cmp_inv = "PERM_RNG_NON_FF_CMP_INV";
    Base::perm_rng_cmp_lo_inv = "PERM_RNG_CMP_LO_INV";
    Base::perm_rng_cmp_hi_inv = "PERM_RNG_CMP_HI_INV";
    Base::perm_rng_alu_inv = "PERM_RNG_ALU_INV";
    Base::perm_cmp_alu_inv = "PERM_CMP_ALU_INV";
    Base::perm_pos_mem_read_a_inv = "PERM_POS_MEM_READ_A_INV";
    Base::perm_pos_mem_read_b_inv = "PERM_POS_MEM_READ_B_INV";
    Base::perm_pos_mem_read_c_inv = "PERM_POS_MEM_READ_C_INV";
    Base::perm_pos_mem_read_d_inv = "PERM_POS_MEM_READ_D_INV";
    Base::perm_pos_mem_write_a_inv = "PERM_POS_MEM_WRITE_A_INV";
    Base::perm_pos_mem_write_b_inv = "PERM_POS_MEM_WRITE_B_INV";
    Base::perm_pos_mem_write_c_inv = "PERM_POS_MEM_WRITE_C_INV";
    Base::perm_pos_mem_write_d_inv = "PERM_POS_MEM_WRITE_D_INV";
    Base::perm_pos2_fixed_pos2_perm_inv = "PERM_POS2_FIXED_POS2_PERM_INV";
    Base::perm_slice_mem_inv = "PERM_SLICE_MEM_INV";
    Base::perm_merkle_poseidon2_inv = "PERM_MERKLE_POSEIDON2_INV";
    Base::perm_main_alu_inv = "PERM_MAIN_ALU_INV";
    Base::perm_main_bin_inv = "PERM_MAIN_BIN_INV";
    Base::perm_main_conv_inv = "PERM_MAIN_CONV_INV";
    Base::perm_main_sha256_inv = "PERM_MAIN_SHA256_INV";
    Base::perm_main_pos2_perm_inv = "PERM_MAIN_POS2_PERM_INV";
    Base::perm_main_mem_a_inv = "PERM_MAIN_MEM_A_INV";
    Base::perm_main_mem_b_inv = "PERM_MAIN_MEM_B_INV";
    Base::perm_main_mem_c_inv = "PERM_MAIN_MEM_C_INV";
    Base::perm_main_mem_d_inv = "PERM_MAIN_MEM_D_INV";
    Base::perm_main_mem_ind_addr_a_inv = "PERM_MAIN_MEM_IND_ADDR_A_INV";
    Base::perm_main_mem_ind_addr_b_inv = "PERM_MAIN_MEM_IND_ADDR_B_INV";
    Base::perm_main_mem_ind_addr_c_inv = "PERM_MAIN_MEM_IND_ADDR_C_INV";
    Base::perm_main_mem_ind_addr_d_inv = "PERM_MAIN_MEM_IND_ADDR_D_INV";
    Base::lookup_rng_chk_pow_2_inv = "LOOKUP_RNG_CHK_POW_2_INV";
    Base::lookup_rng_chk_diff_inv = "LOOKUP_RNG_CHK_DIFF_INV";
    Base::lookup_rng_chk_0_inv = "LOOKUP_RNG_CHK_0_INV";
    Base::lookup_rng_chk_1_inv = "LOOKUP_RNG_CHK_1_INV";
    Base::lookup_rng_chk_2_inv = "LOOKUP_RNG_CHK_2_INV";
    Base::lookup_rng_chk_3_inv = "LOOKUP_RNG_CHK_3_INV";
    Base::lookup_rng_chk_4_inv = "LOOKUP_RNG_CHK_4_INV";
    Base::lookup_rng_chk_5_inv = "LOOKUP_RNG_CHK_5_INV";
    Base::lookup_rng_chk_6_inv = "LOOKUP_RNG_CHK_6_INV";
    Base::lookup_rng_chk_7_inv = "LOOKUP_RNG_CHK_7_INV";
    Base::lookup_mem_rng_chk_0_inv = "LOOKUP_MEM_RNG_CHK_0_INV";
    Base::lookup_mem_rng_chk_1_inv = "LOOKUP_MEM_RNG_CHK_1_INV";
    Base::lookup_mem_rng_chk_2_inv = "LOOKUP_MEM_RNG_CHK_2_INV";
    Base::lookup_pow_2_0_inv = "LOOKUP_POW_2_0_INV";
    Base::lookup_pow_2_1_inv = "LOOKUP_POW_2_1_INV";
    Base::lookup_byte_lengths_inv = "LOOKUP_BYTE_LENGTHS_INV";
    Base::lookup_byte_operations_inv = "LOOKUP_BYTE_OPERATIONS_INV";
    Base::lookup_opcode_gas_inv = "LOOKUP_OPCODE_GAS_INV";
    Base::lookup_l2_gas_rng_chk_0_inv = "LOOKUP_L2_GAS_RNG_CHK_0_INV";
    Base::lookup_l2_gas_rng_chk_1_inv = "LOOKUP_L2_GAS_RNG_CHK_1_INV";
    Base::lookup_da_gas_rng_chk_0_inv = "LOOKUP_DA_GAS_RNG_CHK_0_INV";
    Base::lookup_da_gas_rng_chk_1_inv = "LOOKUP_DA_GAS_RNG_CHK_1_INV";
    Base::lookup_cd_value_inv = "LOOKUP_CD_VALUE_INV";
    Base::lookup_ret_value_inv = "LOOKUP_RET_VALUE_INV";
    Base::incl_main_tag_err_inv = "INCL_MAIN_TAG_ERR_INV";
    Base::incl_mem_tag_err_inv = "INCL_MEM_TAG_ERR_INV";
    Base::lookup_rng_chk_pow_2_counts = "LOOKUP_RNG_CHK_POW_2_COUNTS";
    Base::lookup_rng_chk_diff_counts = "LOOKUP_RNG_CHK_DIFF_COUNTS";
    Base::lookup_rng_chk_0_counts = "LOOKUP_RNG_CHK_0_COUNTS";
    Base::lookup_rng_chk_1_counts = "LOOKUP_RNG_CHK_1_COUNTS";
    Base::lookup_rng_chk_2_counts = "LOOKUP_RNG_CHK_2_COUNTS";
    Base::lookup_rng_chk_3_counts = "LOOKUP_RNG_CHK_3_COUNTS";
    Base::lookup_rng_chk_4_counts = "LOOKUP_RNG_CHK_4_COUNTS";
    Base::lookup_rng_chk_5_counts = "LOOKUP_RNG_CHK_5_COUNTS";
    Base::lookup_rng_chk_6_counts = "LOOKUP_RNG_CHK_6_COUNTS";
    Base::lookup_rng_chk_7_counts = "LOOKUP_RNG_CHK_7_COUNTS";
    Base::lookup_mem_rng_chk_0_counts = "LOOKUP_MEM_RNG_CHK_0_COUNTS";
    Base::lookup_mem_rng_chk_1_counts = "LOOKUP_MEM_RNG_CHK_1_COUNTS";
    Base::lookup_mem_rng_chk_2_counts = "LOOKUP_MEM_RNG_CHK_2_COUNTS";
    Base::lookup_pow_2_0_counts = "LOOKUP_POW_2_0_COUNTS";
    Base::lookup_pow_2_1_counts = "LOOKUP_POW_2_1_COUNTS";
    Base::lookup_byte_lengths_counts = "LOOKUP_BYTE_LENGTHS_COUNTS";
    Base::lookup_byte_operations_counts = "LOOKUP_BYTE_OPERATIONS_COUNTS";
    Base::lookup_opcode_gas_counts = "LOOKUP_OPCODE_GAS_COUNTS";
    Base::lookup_l2_gas_rng_chk_0_counts = "LOOKUP_L2_GAS_RNG_CHK_0_COUNTS";
    Base::lookup_l2_gas_rng_chk_1_counts = "LOOKUP_L2_GAS_RNG_CHK_1_COUNTS";
    Base::lookup_da_gas_rng_chk_0_counts = "LOOKUP_DA_GAS_RNG_CHK_0_COUNTS";
    Base::lookup_da_gas_rng_chk_1_counts = "LOOKUP_DA_GAS_RNG_CHK_1_COUNTS";
    Base::lookup_cd_value_counts = "LOOKUP_CD_VALUE_COUNTS";
    Base::lookup_ret_value_counts = "LOOKUP_RET_VALUE_COUNTS";
    Base::incl_main_tag_err_counts = "INCL_MAIN_TAG_ERR_COUNTS";
    Base::incl_mem_tag_err_counts = "INCL_MEM_TAG_ERR_COUNTS";
};

void AvmFlavor::Transcript::deserialize_full_transcript()
{
    size_t num_frs_read = 0;
    circuit_size = deserialize_from_buffer<uint32_t>(proof_data, num_frs_read);

    for (auto& commitment : commitments) {
        commitment = deserialize_from_buffer<Commitment>(proof_data, num_frs_read);
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        sumcheck_univariates.emplace_back(deserialize_from_buffer<bb::Univariate<FF, BATCHED_RELATION_PARTIAL_LENGTH>>(
            Transcript::proof_data, num_frs_read));
    }

    sumcheck_evaluations =
        deserialize_from_buffer<std::array<FF, NUM_ALL_ENTITIES>>(Transcript::proof_data, num_frs_read);

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {
        gemini_fold_comms.push_back(deserialize_from_buffer<Commitment>(proof_data, num_frs_read));
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        gemini_fold_evals.push_back(deserialize_from_buffer<FF>(proof_data, num_frs_read));
    }

    shplonk_q_comm = deserialize_from_buffer<Commitment>(proof_data, num_frs_read);

    kzg_w_comm = deserialize_from_buffer<Commitment>(proof_data, num_frs_read);
}

void AvmFlavor::Transcript::serialize_full_transcript()
{
    size_t old_proof_length = proof_data.size();
    Transcript::proof_data.clear();

    serialize_to_buffer(circuit_size, Transcript::proof_data);

    for (const auto& commitment : commitments) {
        serialize_to_buffer(commitment, Transcript::proof_data);
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        serialize_to_buffer(sumcheck_univariates[i], Transcript::proof_data);
    }

    serialize_to_buffer(sumcheck_evaluations, Transcript::proof_data);

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {
        serialize_to_buffer(gemini_fold_comms[i], proof_data);
    }

    for (size_t i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {
        serialize_to_buffer(gemini_fold_evals[i], proof_data);
    }

    serialize_to_buffer(shplonk_q_comm, proof_data);
    serialize_to_buffer(kzg_w_comm, proof_data);

    // sanity check to make sure we generate the same length of proof as before.
    ASSERT(proof_data.size() == old_proof_length);
}

AvmFlavor::PartiallyEvaluatedMultivariates::PartiallyEvaluatedMultivariates(const size_t circuit_size)
{
    // Storage is only needed after the first partial evaluation, hence polynomials of size (n / 2)
    for (auto& poly : get_all()) {
        poly = Polynomial(circuit_size / 2);
    }
}

AvmFlavor::ProvingKey::ProvingKey(const size_t circuit_size, const size_t num_public_inputs)
    : circuit_size(circuit_size)
    , evaluation_domain(bb::EvaluationDomain<FF>(circuit_size, circuit_size))
    , commitment_key(std::make_shared<CommitmentKey>(circuit_size + 1))
{
    // TODO: These come from PrecomputedEntitiesBase, ideal we'd just call that class's constructor.
    this->log_circuit_size = numeric::get_msb(circuit_size);
    this->num_public_inputs = num_public_inputs;

    // The proving key's polynomials are not allocated here because they are later overwritten
    // AvmComposer::compute_witness(). We should probably refactor this flow.
};

/**
 * @brief Serialize verification key to field elements
 *
 * @return std::vector<FF>
 */
std::vector<AvmFlavor::VerificationKey::FF> AvmFlavor::VerificationKey::to_field_elements() const
{
    std::vector<FF> elements = { FF(circuit_size), FF(num_public_inputs) };

    for (auto const& comm : get_all()) {
        std::vector<FF> comm_as_fields = field_conversion::convert_to_bn254_frs(comm);
        elements.insert(elements.end(), comm_as_fields.begin(), comm_as_fields.end());
    }
    return elements;
}

} // namespace bb::avm