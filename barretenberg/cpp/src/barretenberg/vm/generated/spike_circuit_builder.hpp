

// AUTOGENERATED FILE
#pragma once

#include "barretenberg/common/constexpr_utils.hpp"
#include "barretenberg/common/throw_or_abort.hpp"
#include "barretenberg/ecc/curves/bn254/fr.hpp"
#include "barretenberg/honk/proof_system/logderivative_library.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"
#include "barretenberg/stdlib_circuit_builders/circuit_builder_base.hpp"

#include "barretenberg/vm/generated/spike_flavor.hpp"

namespace bb {

template <typename FF> struct SpikeFullRow {
    FF Spike_first;
    FF Spike_kernel_inputs__is_public{};
    FF Spike_x{};
};

class SpikeCircuitBuilder {
  public:
    using Flavor = bb::SpikeFlavor;
    using FF = Flavor::FF;
    using Row = SpikeFullRow<FF>;

    // TODO: template
    using Polynomial = Flavor::Polynomial;
    using ProverPolynomials = Flavor::ProverPolynomials;

    static constexpr size_t num_fixed_columns = 2;
    static constexpr size_t num_polys = 2;
    std::vector<Row> rows;

    void set_trace(std::vector<Row>&& trace) { rows = std::move(trace); }

    ProverPolynomials compute_polynomials()
    {
        const auto num_rows = get_circuit_subgroup_size();
        ProverPolynomials polys;

        // Allocate mem for each column
        for (auto& poly : polys.get_all()) {
            poly = Polynomial(num_rows);
        }

        for (size_t i = 0; i < rows.size(); i++) {
            polys.Spike_first[i] = rows[i].Spike_first;
            polys.Spike_kernel_inputs__is_public[i] = rows[i].Spike_kernel_inputs__is_public;
            polys.Spike_x[i] = rows[i].Spike_x;
        }

        return polys;
    }

    [[maybe_unused]] bool check_circuit()
    {
        // There are no relations, so check circuit does nothing
        // auto polys = compute_polynomials();
        // const size_t num_rows = polys.get_polynomial_size();

        return true;
    }

    [[nodiscard]] size_t get_num_gates() const { return rows.size(); }

    [[nodiscard]] size_t get_circuit_subgroup_size() const
    {
        const size_t num_rows = get_num_gates();
        const auto num_rows_log2 = static_cast<size_t>(numeric::get_msb64(num_rows));
        size_t num_rows_pow2 = 1UL << (num_rows_log2 + (1UL << num_rows_log2 == num_rows ? 0 : 1));
        return num_rows_pow2;
    }
};
} // namespace bb
