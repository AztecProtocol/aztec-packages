// AUTOGENERATED FILE
#pragma once

#include <vector>
#ifndef __wasm__
#include <future>
#endif

#include "barretenberg/common/constexpr_utils.hpp"
#include "barretenberg/common/throw_or_abort.hpp"
#include "barretenberg/ecc/curves/bn254/fr.hpp"
#include "barretenberg/honk/proof_system/logderivative_library.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"
#include "barretenberg/stdlib_circuit_builders/circuit_builder_base.hpp"

#include "barretenberg/vm/generated/avm_flavor.hpp"
#include "barretenberg/vm/generated/avm_full_row.hpp"

namespace bb {

class AvmCircuitBuilder {
  public:
    using Flavor = bb::AvmFlavor;
    using FF = Flavor::FF;
    using Row = AvmFullRow<FF>;

    // TODO: template
    using Polynomial = Flavor::Polynomial;
    using ProverPolynomials = Flavor::ProverPolynomials;

    static constexpr size_t num_fixed_columns = 411;
    static constexpr size_t num_polys = 411 + 74;
    std::vector<Row> rows;

    void set_trace(std::vector<Row>&& trace) { rows = std::move(trace); }

    ProverPolynomials compute_polynomials()
    {
        const auto num_rows = get_circuit_subgroup_size();
        ProverPolynomials polys;

        // Allocate mem for each column
        for (auto& poly : polys.get_all()) {
            poly = Polynomial(num_rows);
        }

        for (size_t i = 0; i < rows.size(); i++) {
            polys.main_clk[i] = rows[i].main_clk;
            polys.main_sel_first[i] = rows[i].main_sel_first;
            polys.kernel_kernel_inputs[i] = rows[i].kernel_kernel_inputs;
            polys.kernel_kernel_value_out[i] = rows[i].kernel_kernel_value_out;
            polys.kernel_kernel_side_effect_out[i] = rows[i].kernel_kernel_side_effect_out;
            polys.kernel_kernel_metadata_out[i] = rows[i].kernel_kernel_metadata_out;
            polys.main_calldata[i] = rows[i].main_calldata;
            polys.main_returndata[i] = rows[i].main_returndata;
            polys.alu_a_hi[i] = rows[i].alu_a_hi;
            polys.alu_a_lo[i] = rows[i].alu_a_lo;
            polys.alu_b_hi[i] = rows[i].alu_b_hi;
            polys.alu_b_lo[i] = rows[i].alu_b_lo;
            polys.alu_borrow[i] = rows[i].alu_borrow;
            polys.alu_cf[i] = rows[i].alu_cf;
            polys.alu_clk[i] = rows[i].alu_clk;
            polys.alu_cmp_rng_ctr[i] = rows[i].alu_cmp_rng_ctr;
            polys.alu_div_u16_r0[i] = rows[i].alu_div_u16_r0;
            polys.alu_div_u16_r1[i] = rows[i].alu_div_u16_r1;
            polys.alu_div_u16_r2[i] = rows[i].alu_div_u16_r2;
            polys.alu_div_u16_r3[i] = rows[i].alu_div_u16_r3;
            polys.alu_div_u16_r4[i] = rows[i].alu_div_u16_r4;
            polys.alu_div_u16_r5[i] = rows[i].alu_div_u16_r5;
            polys.alu_div_u16_r6[i] = rows[i].alu_div_u16_r6;
            polys.alu_div_u16_r7[i] = rows[i].alu_div_u16_r7;
            polys.alu_divisor_hi[i] = rows[i].alu_divisor_hi;
            polys.alu_divisor_lo[i] = rows[i].alu_divisor_lo;
            polys.alu_ff_tag[i] = rows[i].alu_ff_tag;
            polys.alu_ia[i] = rows[i].alu_ia;
            polys.alu_ib[i] = rows[i].alu_ib;
            polys.alu_ic[i] = rows[i].alu_ic;
            polys.alu_in_tag[i] = rows[i].alu_in_tag;
            polys.alu_op_add[i] = rows[i].alu_op_add;
            polys.alu_op_cast[i] = rows[i].alu_op_cast;
            polys.alu_op_cast_prev[i] = rows[i].alu_op_cast_prev;
            polys.alu_op_div[i] = rows[i].alu_op_div;
            polys.alu_op_div_a_lt_b[i] = rows[i].alu_op_div_a_lt_b;
            polys.alu_op_div_std[i] = rows[i].alu_op_div_std;
            polys.alu_op_eq[i] = rows[i].alu_op_eq;
            polys.alu_op_eq_diff_inv[i] = rows[i].alu_op_eq_diff_inv;
            polys.alu_op_lt[i] = rows[i].alu_op_lt;
            polys.alu_op_lte[i] = rows[i].alu_op_lte;
            polys.alu_op_mul[i] = rows[i].alu_op_mul;
            polys.alu_op_not[i] = rows[i].alu_op_not;
            polys.alu_op_shl[i] = rows[i].alu_op_shl;
            polys.alu_op_shr[i] = rows[i].alu_op_shr;
            polys.alu_op_sub[i] = rows[i].alu_op_sub;
            polys.alu_p_a_borrow[i] = rows[i].alu_p_a_borrow;
            polys.alu_p_b_borrow[i] = rows[i].alu_p_b_borrow;
            polys.alu_p_sub_a_hi[i] = rows[i].alu_p_sub_a_hi;
            polys.alu_p_sub_a_lo[i] = rows[i].alu_p_sub_a_lo;
            polys.alu_p_sub_b_hi[i] = rows[i].alu_p_sub_b_hi;
            polys.alu_p_sub_b_lo[i] = rows[i].alu_p_sub_b_lo;
            polys.alu_partial_prod_hi[i] = rows[i].alu_partial_prod_hi;
            polys.alu_partial_prod_lo[i] = rows[i].alu_partial_prod_lo;
            polys.alu_quotient_hi[i] = rows[i].alu_quotient_hi;
            polys.alu_quotient_lo[i] = rows[i].alu_quotient_lo;
            polys.alu_remainder[i] = rows[i].alu_remainder;
            polys.alu_res_hi[i] = rows[i].alu_res_hi;
            polys.alu_res_lo[i] = rows[i].alu_res_lo;
            polys.alu_sel_alu[i] = rows[i].alu_sel_alu;
            polys.alu_sel_cmp[i] = rows[i].alu_sel_cmp;
            polys.alu_sel_div_rng_chk[i] = rows[i].alu_sel_div_rng_chk;
            polys.alu_sel_rng_chk[i] = rows[i].alu_sel_rng_chk;
            polys.alu_sel_rng_chk_lookup[i] = rows[i].alu_sel_rng_chk_lookup;
            polys.alu_sel_shift_which[i] = rows[i].alu_sel_shift_which;
            polys.alu_shift_lt_bit_len[i] = rows[i].alu_shift_lt_bit_len;
            polys.alu_t_sub_s_bits[i] = rows[i].alu_t_sub_s_bits;
            polys.alu_two_pow_s[i] = rows[i].alu_two_pow_s;
            polys.alu_two_pow_t_sub_s[i] = rows[i].alu_two_pow_t_sub_s;
            polys.alu_u128_tag[i] = rows[i].alu_u128_tag;
            polys.alu_u16_r0[i] = rows[i].alu_u16_r0;
            polys.alu_u16_r1[i] = rows[i].alu_u16_r1;
            polys.alu_u16_r10[i] = rows[i].alu_u16_r10;
            polys.alu_u16_r11[i] = rows[i].alu_u16_r11;
            polys.alu_u16_r12[i] = rows[i].alu_u16_r12;
            polys.alu_u16_r13[i] = rows[i].alu_u16_r13;
            polys.alu_u16_r14[i] = rows[i].alu_u16_r14;
            polys.alu_u16_r2[i] = rows[i].alu_u16_r2;
            polys.alu_u16_r3[i] = rows[i].alu_u16_r3;
            polys.alu_u16_r4[i] = rows[i].alu_u16_r4;
            polys.alu_u16_r5[i] = rows[i].alu_u16_r5;
            polys.alu_u16_r6[i] = rows[i].alu_u16_r6;
            polys.alu_u16_r7[i] = rows[i].alu_u16_r7;
            polys.alu_u16_r8[i] = rows[i].alu_u16_r8;
            polys.alu_u16_r9[i] = rows[i].alu_u16_r9;
            polys.alu_u16_tag[i] = rows[i].alu_u16_tag;
            polys.alu_u32_tag[i] = rows[i].alu_u32_tag;
            polys.alu_u64_tag[i] = rows[i].alu_u64_tag;
            polys.alu_u8_r0[i] = rows[i].alu_u8_r0;
            polys.alu_u8_r1[i] = rows[i].alu_u8_r1;
            polys.alu_u8_tag[i] = rows[i].alu_u8_tag;
            polys.binary_acc_ia[i] = rows[i].binary_acc_ia;
            polys.binary_acc_ib[i] = rows[i].binary_acc_ib;
            polys.binary_acc_ic[i] = rows[i].binary_acc_ic;
            polys.binary_clk[i] = rows[i].binary_clk;
            polys.binary_ia_bytes[i] = rows[i].binary_ia_bytes;
            polys.binary_ib_bytes[i] = rows[i].binary_ib_bytes;
            polys.binary_ic_bytes[i] = rows[i].binary_ic_bytes;
            polys.binary_in_tag[i] = rows[i].binary_in_tag;
            polys.binary_mem_tag_ctr[i] = rows[i].binary_mem_tag_ctr;
            polys.binary_mem_tag_ctr_inv[i] = rows[i].binary_mem_tag_ctr_inv;
            polys.binary_op_id[i] = rows[i].binary_op_id;
            polys.binary_sel_bin[i] = rows[i].binary_sel_bin;
            polys.binary_start[i] = rows[i].binary_start;
            polys.byte_lookup_sel_bin[i] = rows[i].byte_lookup_sel_bin;
            polys.byte_lookup_table_byte_lengths[i] = rows[i].byte_lookup_table_byte_lengths;
            polys.byte_lookup_table_in_tags[i] = rows[i].byte_lookup_table_in_tags;
            polys.byte_lookup_table_input_a[i] = rows[i].byte_lookup_table_input_a;
            polys.byte_lookup_table_input_b[i] = rows[i].byte_lookup_table_input_b;
            polys.byte_lookup_table_op_id[i] = rows[i].byte_lookup_table_op_id;
            polys.byte_lookup_table_output[i] = rows[i].byte_lookup_table_output;
            polys.conversion_clk[i] = rows[i].conversion_clk;
            polys.conversion_input[i] = rows[i].conversion_input;
            polys.conversion_num_limbs[i] = rows[i].conversion_num_limbs;
            polys.conversion_radix[i] = rows[i].conversion_radix;
            polys.conversion_sel_to_radix_le[i] = rows[i].conversion_sel_to_radix_le;
            polys.gas_da_gas_fixed_table[i] = rows[i].gas_da_gas_fixed_table;
            polys.gas_l2_gas_fixed_table[i] = rows[i].gas_l2_gas_fixed_table;
            polys.gas_sel_gas_cost[i] = rows[i].gas_sel_gas_cost;
            polys.keccakf1600_clk[i] = rows[i].keccakf1600_clk;
            polys.keccakf1600_input[i] = rows[i].keccakf1600_input;
            polys.keccakf1600_output[i] = rows[i].keccakf1600_output;
            polys.keccakf1600_sel_keccakf1600[i] = rows[i].keccakf1600_sel_keccakf1600;
            polys.kernel_emit_l2_to_l1_msg_write_offset[i] = rows[i].kernel_emit_l2_to_l1_msg_write_offset;
            polys.kernel_emit_note_hash_write_offset[i] = rows[i].kernel_emit_note_hash_write_offset;
            polys.kernel_emit_nullifier_write_offset[i] = rows[i].kernel_emit_nullifier_write_offset;
            polys.kernel_emit_unencrypted_log_write_offset[i] = rows[i].kernel_emit_unencrypted_log_write_offset;
            polys.kernel_kernel_in_offset[i] = rows[i].kernel_kernel_in_offset;
            polys.kernel_kernel_out_offset[i] = rows[i].kernel_kernel_out_offset;
            polys.kernel_l1_to_l2_msg_exists_write_offset[i] = rows[i].kernel_l1_to_l2_msg_exists_write_offset;
            polys.kernel_note_hash_exist_write_offset[i] = rows[i].kernel_note_hash_exist_write_offset;
            polys.kernel_nullifier_exists_write_offset[i] = rows[i].kernel_nullifier_exists_write_offset;
            polys.kernel_nullifier_non_exists_write_offset[i] = rows[i].kernel_nullifier_non_exists_write_offset;
            polys.kernel_q_public_input_kernel_add_to_table[i] = rows[i].kernel_q_public_input_kernel_add_to_table;
            polys.kernel_q_public_input_kernel_out_add_to_table[i] =
                rows[i].kernel_q_public_input_kernel_out_add_to_table;
            polys.kernel_side_effect_counter[i] = rows[i].kernel_side_effect_counter;
            polys.kernel_sload_write_offset[i] = rows[i].kernel_sload_write_offset;
            polys.kernel_sstore_write_offset[i] = rows[i].kernel_sstore_write_offset;
            polys.main_abs_da_rem_gas_hi[i] = rows[i].main_abs_da_rem_gas_hi;
            polys.main_abs_da_rem_gas_lo[i] = rows[i].main_abs_da_rem_gas_lo;
            polys.main_abs_l2_rem_gas_hi[i] = rows[i].main_abs_l2_rem_gas_hi;
            polys.main_abs_l2_rem_gas_lo[i] = rows[i].main_abs_l2_rem_gas_lo;
            polys.main_alu_in_tag[i] = rows[i].main_alu_in_tag;
            polys.main_bin_op_id[i] = rows[i].main_bin_op_id;
            polys.main_call_ptr[i] = rows[i].main_call_ptr;
            polys.main_da_gas_op_cost[i] = rows[i].main_da_gas_op_cost;
            polys.main_da_gas_remaining[i] = rows[i].main_da_gas_remaining;
            polys.main_da_out_of_gas[i] = rows[i].main_da_out_of_gas;
            polys.main_ia[i] = rows[i].main_ia;
            polys.main_ib[i] = rows[i].main_ib;
            polys.main_ic[i] = rows[i].main_ic;
            polys.main_id[i] = rows[i].main_id;
            polys.main_id_zero[i] = rows[i].main_id_zero;
            polys.main_ind_addr_a[i] = rows[i].main_ind_addr_a;
            polys.main_ind_addr_b[i] = rows[i].main_ind_addr_b;
            polys.main_ind_addr_c[i] = rows[i].main_ind_addr_c;
            polys.main_ind_addr_d[i] = rows[i].main_ind_addr_d;
            polys.main_internal_return_ptr[i] = rows[i].main_internal_return_ptr;
            polys.main_inv[i] = rows[i].main_inv;
            polys.main_l2_gas_op_cost[i] = rows[i].main_l2_gas_op_cost;
            polys.main_l2_gas_remaining[i] = rows[i].main_l2_gas_remaining;
            polys.main_l2_out_of_gas[i] = rows[i].main_l2_out_of_gas;
            polys.main_mem_addr_a[i] = rows[i].main_mem_addr_a;
            polys.main_mem_addr_b[i] = rows[i].main_mem_addr_b;
            polys.main_mem_addr_c[i] = rows[i].main_mem_addr_c;
            polys.main_mem_addr_d[i] = rows[i].main_mem_addr_d;
            polys.main_op_err[i] = rows[i].main_op_err;
            polys.main_opcode_val[i] = rows[i].main_opcode_val;
            polys.main_pc[i] = rows[i].main_pc;
            polys.main_r_in_tag[i] = rows[i].main_r_in_tag;
            polys.main_rwa[i] = rows[i].main_rwa;
            polys.main_rwb[i] = rows[i].main_rwb;
            polys.main_rwc[i] = rows[i].main_rwc;
            polys.main_rwd[i] = rows[i].main_rwd;
            polys.main_sel_alu[i] = rows[i].main_sel_alu;
            polys.main_sel_bin[i] = rows[i].main_sel_bin;
            polys.main_sel_calldata[i] = rows[i].main_sel_calldata;
            polys.main_sel_gas_accounting_active[i] = rows[i].main_sel_gas_accounting_active;
            polys.main_sel_last[i] = rows[i].main_sel_last;
            polys.main_sel_mem_op_a[i] = rows[i].main_sel_mem_op_a;
            polys.main_sel_mem_op_activate_gas[i] = rows[i].main_sel_mem_op_activate_gas;
            polys.main_sel_mem_op_b[i] = rows[i].main_sel_mem_op_b;
            polys.main_sel_mem_op_c[i] = rows[i].main_sel_mem_op_c;
            polys.main_sel_mem_op_d[i] = rows[i].main_sel_mem_op_d;
            polys.main_sel_mov_ia_to_ic[i] = rows[i].main_sel_mov_ia_to_ic;
            polys.main_sel_mov_ib_to_ic[i] = rows[i].main_sel_mov_ib_to_ic;
            polys.main_sel_op_add[i] = rows[i].main_sel_op_add;
            polys.main_sel_op_address[i] = rows[i].main_sel_op_address;
            polys.main_sel_op_and[i] = rows[i].main_sel_op_and;
            polys.main_sel_op_block_number[i] = rows[i].main_sel_op_block_number;
            polys.main_sel_op_calldata_copy[i] = rows[i].main_sel_op_calldata_copy;
            polys.main_sel_op_cast[i] = rows[i].main_sel_op_cast;
            polys.main_sel_op_chain_id[i] = rows[i].main_sel_op_chain_id;
            polys.main_sel_op_cmov[i] = rows[i].main_sel_op_cmov;
            polys.main_sel_op_coinbase[i] = rows[i].main_sel_op_coinbase;
            polys.main_sel_op_dagasleft[i] = rows[i].main_sel_op_dagasleft;
            polys.main_sel_op_div[i] = rows[i].main_sel_op_div;
            polys.main_sel_op_emit_l2_to_l1_msg[i] = rows[i].main_sel_op_emit_l2_to_l1_msg;
            polys.main_sel_op_emit_note_hash[i] = rows[i].main_sel_op_emit_note_hash;
            polys.main_sel_op_emit_nullifier[i] = rows[i].main_sel_op_emit_nullifier;
            polys.main_sel_op_emit_unencrypted_log[i] = rows[i].main_sel_op_emit_unencrypted_log;
            polys.main_sel_op_eq[i] = rows[i].main_sel_op_eq;
            polys.main_sel_op_external_call[i] = rows[i].main_sel_op_external_call;
            polys.main_sel_op_external_return[i] = rows[i].main_sel_op_external_return;
            polys.main_sel_op_fdiv[i] = rows[i].main_sel_op_fdiv;
            polys.main_sel_op_fee_per_da_gas[i] = rows[i].main_sel_op_fee_per_da_gas;
            polys.main_sel_op_fee_per_l2_gas[i] = rows[i].main_sel_op_fee_per_l2_gas;
            polys.main_sel_op_function_selector[i] = rows[i].main_sel_op_function_selector;
            polys.main_sel_op_get_contract_instance[i] = rows[i].main_sel_op_get_contract_instance;
            polys.main_sel_op_halt[i] = rows[i].main_sel_op_halt;
            polys.main_sel_op_internal_call[i] = rows[i].main_sel_op_internal_call;
            polys.main_sel_op_internal_return[i] = rows[i].main_sel_op_internal_return;
            polys.main_sel_op_jump[i] = rows[i].main_sel_op_jump;
            polys.main_sel_op_jumpi[i] = rows[i].main_sel_op_jumpi;
            polys.main_sel_op_keccak[i] = rows[i].main_sel_op_keccak;
            polys.main_sel_op_l1_to_l2_msg_exists[i] = rows[i].main_sel_op_l1_to_l2_msg_exists;
            polys.main_sel_op_l2gasleft[i] = rows[i].main_sel_op_l2gasleft;
            polys.main_sel_op_lt[i] = rows[i].main_sel_op_lt;
            polys.main_sel_op_lte[i] = rows[i].main_sel_op_lte;
            polys.main_sel_op_mov[i] = rows[i].main_sel_op_mov;
            polys.main_sel_op_mul[i] = rows[i].main_sel_op_mul;
            polys.main_sel_op_not[i] = rows[i].main_sel_op_not;
            polys.main_sel_op_note_hash_exists[i] = rows[i].main_sel_op_note_hash_exists;
            polys.main_sel_op_nullifier_exists[i] = rows[i].main_sel_op_nullifier_exists;
            polys.main_sel_op_or[i] = rows[i].main_sel_op_or;
            polys.main_sel_op_pedersen[i] = rows[i].main_sel_op_pedersen;
            polys.main_sel_op_poseidon2[i] = rows[i].main_sel_op_poseidon2;
            polys.main_sel_op_radix_le[i] = rows[i].main_sel_op_radix_le;
            polys.main_sel_op_sender[i] = rows[i].main_sel_op_sender;
            polys.main_sel_op_sha256[i] = rows[i].main_sel_op_sha256;
            polys.main_sel_op_shl[i] = rows[i].main_sel_op_shl;
            polys.main_sel_op_shr[i] = rows[i].main_sel_op_shr;
            polys.main_sel_op_sload[i] = rows[i].main_sel_op_sload;
            polys.main_sel_op_sstore[i] = rows[i].main_sel_op_sstore;
            polys.main_sel_op_storage_address[i] = rows[i].main_sel_op_storage_address;
            polys.main_sel_op_sub[i] = rows[i].main_sel_op_sub;
            polys.main_sel_op_timestamp[i] = rows[i].main_sel_op_timestamp;
            polys.main_sel_op_transaction_fee[i] = rows[i].main_sel_op_transaction_fee;
            polys.main_sel_op_version[i] = rows[i].main_sel_op_version;
            polys.main_sel_op_xor[i] = rows[i].main_sel_op_xor;
            polys.main_sel_q_kernel_lookup[i] = rows[i].main_sel_q_kernel_lookup;
            polys.main_sel_q_kernel_output_lookup[i] = rows[i].main_sel_q_kernel_output_lookup;
            polys.main_sel_resolve_ind_addr_a[i] = rows[i].main_sel_resolve_ind_addr_a;
            polys.main_sel_resolve_ind_addr_b[i] = rows[i].main_sel_resolve_ind_addr_b;
            polys.main_sel_resolve_ind_addr_c[i] = rows[i].main_sel_resolve_ind_addr_c;
            polys.main_sel_resolve_ind_addr_d[i] = rows[i].main_sel_resolve_ind_addr_d;
            polys.main_sel_returndata[i] = rows[i].main_sel_returndata;
            polys.main_sel_rng_16[i] = rows[i].main_sel_rng_16;
            polys.main_sel_rng_8[i] = rows[i].main_sel_rng_8;
            polys.main_sel_slice_gadget[i] = rows[i].main_sel_slice_gadget;
            polys.main_space_id[i] = rows[i].main_space_id;
            polys.main_tag_err[i] = rows[i].main_tag_err;
            polys.main_w_in_tag[i] = rows[i].main_w_in_tag;
            polys.mem_addr[i] = rows[i].mem_addr;
            polys.mem_clk[i] = rows[i].mem_clk;
            polys.mem_diff_hi[i] = rows[i].mem_diff_hi;
            polys.mem_diff_lo[i] = rows[i].mem_diff_lo;
            polys.mem_diff_mid[i] = rows[i].mem_diff_mid;
            polys.mem_glob_addr[i] = rows[i].mem_glob_addr;
            polys.mem_last[i] = rows[i].mem_last;
            polys.mem_lastAccess[i] = rows[i].mem_lastAccess;
            polys.mem_one_min_inv[i] = rows[i].mem_one_min_inv;
            polys.mem_r_in_tag[i] = rows[i].mem_r_in_tag;
            polys.mem_rw[i] = rows[i].mem_rw;
            polys.mem_sel_mem[i] = rows[i].mem_sel_mem;
            polys.mem_sel_mov_ia_to_ic[i] = rows[i].mem_sel_mov_ia_to_ic;
            polys.mem_sel_mov_ib_to_ic[i] = rows[i].mem_sel_mov_ib_to_ic;
            polys.mem_sel_op_a[i] = rows[i].mem_sel_op_a;
            polys.mem_sel_op_b[i] = rows[i].mem_sel_op_b;
            polys.mem_sel_op_c[i] = rows[i].mem_sel_op_c;
            polys.mem_sel_op_cmov[i] = rows[i].mem_sel_op_cmov;
            polys.mem_sel_op_d[i] = rows[i].mem_sel_op_d;
            polys.mem_sel_op_slice[i] = rows[i].mem_sel_op_slice;
            polys.mem_sel_resolve_ind_addr_a[i] = rows[i].mem_sel_resolve_ind_addr_a;
            polys.mem_sel_resolve_ind_addr_b[i] = rows[i].mem_sel_resolve_ind_addr_b;
            polys.mem_sel_resolve_ind_addr_c[i] = rows[i].mem_sel_resolve_ind_addr_c;
            polys.mem_sel_resolve_ind_addr_d[i] = rows[i].mem_sel_resolve_ind_addr_d;
            polys.mem_sel_rng_chk[i] = rows[i].mem_sel_rng_chk;
            polys.mem_skip_check_tag[i] = rows[i].mem_skip_check_tag;
            polys.mem_space_id[i] = rows[i].mem_space_id;
            polys.mem_tag[i] = rows[i].mem_tag;
            polys.mem_tag_err[i] = rows[i].mem_tag_err;
            polys.mem_tsp[i] = rows[i].mem_tsp;
            polys.mem_val[i] = rows[i].mem_val;
            polys.mem_w_in_tag[i] = rows[i].mem_w_in_tag;
            polys.pedersen_clk[i] = rows[i].pedersen_clk;
            polys.pedersen_input[i] = rows[i].pedersen_input;
            polys.pedersen_output[i] = rows[i].pedersen_output;
            polys.pedersen_sel_pedersen[i] = rows[i].pedersen_sel_pedersen;
            polys.poseidon2_clk[i] = rows[i].poseidon2_clk;
            polys.poseidon2_input[i] = rows[i].poseidon2_input;
            polys.poseidon2_output[i] = rows[i].poseidon2_output;
            polys.poseidon2_sel_poseidon_perm[i] = rows[i].poseidon2_sel_poseidon_perm;
            polys.powers_power_of_2[i] = rows[i].powers_power_of_2;
            polys.sha256_clk[i] = rows[i].sha256_clk;
            polys.sha256_input[i] = rows[i].sha256_input;
            polys.sha256_output[i] = rows[i].sha256_output;
            polys.sha256_sel_sha256_compression[i] = rows[i].sha256_sel_sha256_compression;
            polys.sha256_state[i] = rows[i].sha256_state;
            polys.slice_addr[i] = rows[i].slice_addr;
            polys.slice_clk[i] = rows[i].slice_clk;
            polys.slice_cnt[i] = rows[i].slice_cnt;
            polys.slice_col_offset[i] = rows[i].slice_col_offset;
            polys.slice_one_min_inv[i] = rows[i].slice_one_min_inv;
            polys.slice_sel_cd_cpy[i] = rows[i].slice_sel_cd_cpy;
            polys.slice_sel_mem_active[i] = rows[i].slice_sel_mem_active;
            polys.slice_sel_return[i] = rows[i].slice_sel_return;
            polys.slice_sel_start[i] = rows[i].slice_sel_start;
            polys.slice_space_id[i] = rows[i].slice_space_id;
            polys.slice_val[i] = rows[i].slice_val;
            polys.lookup_byte_lengths_counts[i] = rows[i].lookup_byte_lengths_counts;
            polys.lookup_byte_operations_counts[i] = rows[i].lookup_byte_operations_counts;
            polys.lookup_cd_value_counts[i] = rows[i].lookup_cd_value_counts;
            polys.lookup_ret_value_counts[i] = rows[i].lookup_ret_value_counts;
            polys.lookup_opcode_gas_counts[i] = rows[i].lookup_opcode_gas_counts;
            polys.range_check_l2_gas_hi_counts[i] = rows[i].range_check_l2_gas_hi_counts;
            polys.range_check_l2_gas_lo_counts[i] = rows[i].range_check_l2_gas_lo_counts;
            polys.range_check_da_gas_hi_counts[i] = rows[i].range_check_da_gas_hi_counts;
            polys.range_check_da_gas_lo_counts[i] = rows[i].range_check_da_gas_lo_counts;
            polys.kernel_output_lookup_counts[i] = rows[i].kernel_output_lookup_counts;
            polys.lookup_into_kernel_counts[i] = rows[i].lookup_into_kernel_counts;
            polys.incl_main_tag_err_counts[i] = rows[i].incl_main_tag_err_counts;
            polys.incl_mem_tag_err_counts[i] = rows[i].incl_mem_tag_err_counts;
            polys.lookup_mem_rng_chk_lo_counts[i] = rows[i].lookup_mem_rng_chk_lo_counts;
            polys.lookup_mem_rng_chk_mid_counts[i] = rows[i].lookup_mem_rng_chk_mid_counts;
            polys.lookup_mem_rng_chk_hi_counts[i] = rows[i].lookup_mem_rng_chk_hi_counts;
            polys.lookup_pow_2_0_counts[i] = rows[i].lookup_pow_2_0_counts;
            polys.lookup_pow_2_1_counts[i] = rows[i].lookup_pow_2_1_counts;
            polys.lookup_u8_0_counts[i] = rows[i].lookup_u8_0_counts;
            polys.lookup_u8_1_counts[i] = rows[i].lookup_u8_1_counts;
            polys.lookup_u16_0_counts[i] = rows[i].lookup_u16_0_counts;
            polys.lookup_u16_1_counts[i] = rows[i].lookup_u16_1_counts;
            polys.lookup_u16_2_counts[i] = rows[i].lookup_u16_2_counts;
            polys.lookup_u16_3_counts[i] = rows[i].lookup_u16_3_counts;
            polys.lookup_u16_4_counts[i] = rows[i].lookup_u16_4_counts;
            polys.lookup_u16_5_counts[i] = rows[i].lookup_u16_5_counts;
            polys.lookup_u16_6_counts[i] = rows[i].lookup_u16_6_counts;
            polys.lookup_u16_7_counts[i] = rows[i].lookup_u16_7_counts;
            polys.lookup_u16_8_counts[i] = rows[i].lookup_u16_8_counts;
            polys.lookup_u16_9_counts[i] = rows[i].lookup_u16_9_counts;
            polys.lookup_u16_10_counts[i] = rows[i].lookup_u16_10_counts;
            polys.lookup_u16_11_counts[i] = rows[i].lookup_u16_11_counts;
            polys.lookup_u16_12_counts[i] = rows[i].lookup_u16_12_counts;
            polys.lookup_u16_13_counts[i] = rows[i].lookup_u16_13_counts;
            polys.lookup_u16_14_counts[i] = rows[i].lookup_u16_14_counts;
            polys.lookup_div_u16_0_counts[i] = rows[i].lookup_div_u16_0_counts;
            polys.lookup_div_u16_1_counts[i] = rows[i].lookup_div_u16_1_counts;
            polys.lookup_div_u16_2_counts[i] = rows[i].lookup_div_u16_2_counts;
            polys.lookup_div_u16_3_counts[i] = rows[i].lookup_div_u16_3_counts;
            polys.lookup_div_u16_4_counts[i] = rows[i].lookup_div_u16_4_counts;
            polys.lookup_div_u16_5_counts[i] = rows[i].lookup_div_u16_5_counts;
            polys.lookup_div_u16_6_counts[i] = rows[i].lookup_div_u16_6_counts;
            polys.lookup_div_u16_7_counts[i] = rows[i].lookup_div_u16_7_counts;
        }

        for (auto [shifted, to_be_shifted] : zip_view(polys.get_shifted(), polys.get_to_be_shifted())) {
            shifted = to_be_shifted.shifted();
        }

        return polys;
    }

    [[maybe_unused]] bool check_circuit()
    {
        const FF gamma = FF::random_element();
        const FF beta = FF::random_element();
        bb::RelationParameters<typename Flavor::FF> params{
            .eta = 0,
            .beta = beta,
            .gamma = gamma,
            .public_input_delta = 0,
            .lookup_grand_product_delta = 0,
            .beta_sqr = 0,
            .beta_cube = 0,
            .eccvm_set_permutation_delta = 0,
        };

        auto polys = compute_polynomials();
        const size_t num_rows = polys.get_polynomial_size();

        const auto evaluate_relation = [&]<typename Relation>(const std::string& relation_name,
                                                              std::string (*debug_label)(int)) {
            typename Relation::SumcheckArrayOfValuesOverSubrelations result;
            for (auto& r : result) {
                r = 0;
            }
            constexpr size_t NUM_SUBRELATIONS = result.size();

            for (size_t i = 0; i < num_rows; ++i) {
                Relation::accumulate(result, polys.get_row(i), {}, 1);

                bool x = true;
                for (size_t j = 0; j < NUM_SUBRELATIONS; ++j) {
                    if (result[j] != 0) {
                        std::string row_name = debug_label(static_cast<int>(j));
                        throw_or_abort(
                            format("Relation ", relation_name, ", subrelation index ", row_name, " failed at row ", i));
                        x = false;
                    }
                }
                if (!x) {
                    return false;
                }
            }
            return true;
        };

        const auto evaluate_logderivative = [&]<typename LogDerivativeSettings>(const std::string& lookup_name) {
            // Check the logderivative relation
            bb::compute_logderivative_inverse<Flavor, LogDerivativeSettings>(polys, params, num_rows);

            typename LogDerivativeSettings::SumcheckArrayOfValuesOverSubrelations lookup_result;

            for (auto& r : lookup_result) {
                r = 0;
            }
            for (size_t i = 0; i < num_rows; ++i) {
                LogDerivativeSettings::accumulate(lookup_result, polys.get_row(i), params, 1);
            }
            for (auto r : lookup_result) {
                if (r != 0) {
                    throw_or_abort(format("Lookup ", lookup_name, " failed."));
                    return false;
                }
            }
            return true;
        };

        // Check relations
        auto alu = [=]() {
            return evaluate_relation.template operator()<Avm_vm::alu<FF>>("alu", Avm_vm::get_relation_label_alu);
        };
        auto binary = [=]() {
            return evaluate_relation.template operator()<Avm_vm::binary<FF>>("binary",
                                                                             Avm_vm::get_relation_label_binary);
        };
        auto conversion = [=]() {
            return evaluate_relation.template operator()<Avm_vm::conversion<FF>>("conversion",
                                                                                 Avm_vm::get_relation_label_conversion);
        };
        auto gas = [=]() {
            return evaluate_relation.template operator()<Avm_vm::gas<FF>>("gas", Avm_vm::get_relation_label_gas);
        };
        auto keccakf1600 = [=]() {
            return evaluate_relation.template operator()<Avm_vm::keccakf1600<FF>>(
                "keccakf1600", Avm_vm::get_relation_label_keccakf1600);
        };
        auto kernel = [=]() {
            return evaluate_relation.template operator()<Avm_vm::kernel<FF>>("kernel",
                                                                             Avm_vm::get_relation_label_kernel);
        };
        auto main = [=]() {
            return evaluate_relation.template operator()<Avm_vm::main<FF>>("main", Avm_vm::get_relation_label_main);
        };
        auto mem = [=]() {
            return evaluate_relation.template operator()<Avm_vm::mem<FF>>("mem", Avm_vm::get_relation_label_mem);
        };
        auto mem_slice = [=]() {
            return evaluate_relation.template operator()<Avm_vm::mem_slice<FF>>("mem_slice",
                                                                                Avm_vm::get_relation_label_mem_slice);
        };
        auto pedersen = [=]() {
            return evaluate_relation.template operator()<Avm_vm::pedersen<FF>>("pedersen",
                                                                               Avm_vm::get_relation_label_pedersen);
        };
        auto poseidon2 = [=]() {
            return evaluate_relation.template operator()<Avm_vm::poseidon2<FF>>("poseidon2",
                                                                                Avm_vm::get_relation_label_poseidon2);
        };
        auto powers = [=]() {
            return evaluate_relation.template operator()<Avm_vm::powers<FF>>("powers",
                                                                             Avm_vm::get_relation_label_powers);
        };
        auto sha256 = [=]() {
            return evaluate_relation.template operator()<Avm_vm::sha256<FF>>("sha256",
                                                                             Avm_vm::get_relation_label_sha256);
        };

        // Check lookups
        auto perm_slice_mem = [=]() {
            return evaluate_logderivative.template operator()<perm_slice_mem_relation<FF>>("PERM_SLICE_MEM");
        };
        auto perm_main_alu = [=]() {
            return evaluate_logderivative.template operator()<perm_main_alu_relation<FF>>("PERM_MAIN_ALU");
        };
        auto perm_main_bin = [=]() {
            return evaluate_logderivative.template operator()<perm_main_bin_relation<FF>>("PERM_MAIN_BIN");
        };
        auto perm_main_conv = [=]() {
            return evaluate_logderivative.template operator()<perm_main_conv_relation<FF>>("PERM_MAIN_CONV");
        };
        auto perm_main_pos2_perm = [=]() {
            return evaluate_logderivative.template operator()<perm_main_pos2_perm_relation<FF>>("PERM_MAIN_POS2_PERM");
        };
        auto perm_main_pedersen = [=]() {
            return evaluate_logderivative.template operator()<perm_main_pedersen_relation<FF>>("PERM_MAIN_PEDERSEN");
        };
        auto perm_main_slice = [=]() {
            return evaluate_logderivative.template operator()<perm_main_slice_relation<FF>>("PERM_MAIN_SLICE");
        };
        auto perm_main_mem_a = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_a_relation<FF>>("PERM_MAIN_MEM_A");
        };
        auto perm_main_mem_b = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_b_relation<FF>>("PERM_MAIN_MEM_B");
        };
        auto perm_main_mem_c = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_c_relation<FF>>("PERM_MAIN_MEM_C");
        };
        auto perm_main_mem_d = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_d_relation<FF>>("PERM_MAIN_MEM_D");
        };
        auto perm_main_mem_ind_addr_a = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_addr_a_relation<FF>>(
                "PERM_MAIN_MEM_IND_ADDR_A");
        };
        auto perm_main_mem_ind_addr_b = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_addr_b_relation<FF>>(
                "PERM_MAIN_MEM_IND_ADDR_B");
        };
        auto perm_main_mem_ind_addr_c = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_addr_c_relation<FF>>(
                "PERM_MAIN_MEM_IND_ADDR_C");
        };
        auto perm_main_mem_ind_addr_d = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_addr_d_relation<FF>>(
                "PERM_MAIN_MEM_IND_ADDR_D");
        };
        auto lookup_byte_lengths = [=]() {
            return evaluate_logderivative.template operator()<lookup_byte_lengths_relation<FF>>("LOOKUP_BYTE_LENGTHS");
        };
        auto lookup_byte_operations = [=]() {
            return evaluate_logderivative.template operator()<lookup_byte_operations_relation<FF>>(
                "LOOKUP_BYTE_OPERATIONS");
        };
        auto lookup_cd_value = [=]() {
            return evaluate_logderivative.template operator()<lookup_cd_value_relation<FF>>("LOOKUP_CD_VALUE");
        };
        auto lookup_ret_value = [=]() {
            return evaluate_logderivative.template operator()<lookup_ret_value_relation<FF>>("LOOKUP_RET_VALUE");
        };
        auto lookup_opcode_gas = [=]() {
            return evaluate_logderivative.template operator()<lookup_opcode_gas_relation<FF>>("LOOKUP_OPCODE_GAS");
        };
        auto range_check_l2_gas_hi = [=]() {
            return evaluate_logderivative.template operator()<range_check_l2_gas_hi_relation<FF>>(
                "RANGE_CHECK_L2_GAS_HI");
        };
        auto range_check_l2_gas_lo = [=]() {
            return evaluate_logderivative.template operator()<range_check_l2_gas_lo_relation<FF>>(
                "RANGE_CHECK_L2_GAS_LO");
        };
        auto range_check_da_gas_hi = [=]() {
            return evaluate_logderivative.template operator()<range_check_da_gas_hi_relation<FF>>(
                "RANGE_CHECK_DA_GAS_HI");
        };
        auto range_check_da_gas_lo = [=]() {
            return evaluate_logderivative.template operator()<range_check_da_gas_lo_relation<FF>>(
                "RANGE_CHECK_DA_GAS_LO");
        };
        auto kernel_output_lookup = [=]() {
            return evaluate_logderivative.template operator()<kernel_output_lookup_relation<FF>>(
                "KERNEL_OUTPUT_LOOKUP");
        };
        auto lookup_into_kernel = [=]() {
            return evaluate_logderivative.template operator()<lookup_into_kernel_relation<FF>>("LOOKUP_INTO_KERNEL");
        };
        auto incl_main_tag_err = [=]() {
            return evaluate_logderivative.template operator()<incl_main_tag_err_relation<FF>>("INCL_MAIN_TAG_ERR");
        };
        auto incl_mem_tag_err = [=]() {
            return evaluate_logderivative.template operator()<incl_mem_tag_err_relation<FF>>("INCL_MEM_TAG_ERR");
        };
        auto lookup_mem_rng_chk_lo = [=]() {
            return evaluate_logderivative.template operator()<lookup_mem_rng_chk_lo_relation<FF>>(
                "LOOKUP_MEM_RNG_CHK_LO");
        };
        auto lookup_mem_rng_chk_mid = [=]() {
            return evaluate_logderivative.template operator()<lookup_mem_rng_chk_mid_relation<FF>>(
                "LOOKUP_MEM_RNG_CHK_MID");
        };
        auto lookup_mem_rng_chk_hi = [=]() {
            return evaluate_logderivative.template operator()<lookup_mem_rng_chk_hi_relation<FF>>(
                "LOOKUP_MEM_RNG_CHK_HI");
        };
        auto lookup_pow_2_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_pow_2_0_relation<FF>>("LOOKUP_POW_2_0");
        };
        auto lookup_pow_2_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_pow_2_1_relation<FF>>("LOOKUP_POW_2_1");
        };
        auto lookup_u8_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u8_0_relation<FF>>("LOOKUP_U8_0");
        };
        auto lookup_u8_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u8_1_relation<FF>>("LOOKUP_U8_1");
        };
        auto lookup_u16_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_0_relation<FF>>("LOOKUP_U16_0");
        };
        auto lookup_u16_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_1_relation<FF>>("LOOKUP_U16_1");
        };
        auto lookup_u16_2 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_2_relation<FF>>("LOOKUP_U16_2");
        };
        auto lookup_u16_3 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_3_relation<FF>>("LOOKUP_U16_3");
        };
        auto lookup_u16_4 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_4_relation<FF>>("LOOKUP_U16_4");
        };
        auto lookup_u16_5 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_5_relation<FF>>("LOOKUP_U16_5");
        };
        auto lookup_u16_6 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_6_relation<FF>>("LOOKUP_U16_6");
        };
        auto lookup_u16_7 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_7_relation<FF>>("LOOKUP_U16_7");
        };
        auto lookup_u16_8 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_8_relation<FF>>("LOOKUP_U16_8");
        };
        auto lookup_u16_9 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_9_relation<FF>>("LOOKUP_U16_9");
        };
        auto lookup_u16_10 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_10_relation<FF>>("LOOKUP_U16_10");
        };
        auto lookup_u16_11 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_11_relation<FF>>("LOOKUP_U16_11");
        };
        auto lookup_u16_12 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_12_relation<FF>>("LOOKUP_U16_12");
        };
        auto lookup_u16_13 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_13_relation<FF>>("LOOKUP_U16_13");
        };
        auto lookup_u16_14 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_14_relation<FF>>("LOOKUP_U16_14");
        };
        auto lookup_div_u16_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_0_relation<FF>>("LOOKUP_DIV_U16_0");
        };
        auto lookup_div_u16_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_1_relation<FF>>("LOOKUP_DIV_U16_1");
        };
        auto lookup_div_u16_2 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_2_relation<FF>>("LOOKUP_DIV_U16_2");
        };
        auto lookup_div_u16_3 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_3_relation<FF>>("LOOKUP_DIV_U16_3");
        };
        auto lookup_div_u16_4 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_4_relation<FF>>("LOOKUP_DIV_U16_4");
        };
        auto lookup_div_u16_5 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_5_relation<FF>>("LOOKUP_DIV_U16_5");
        };
        auto lookup_div_u16_6 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_6_relation<FF>>("LOOKUP_DIV_U16_6");
        };
        auto lookup_div_u16_7 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_7_relation<FF>>("LOOKUP_DIV_U16_7");
        };

        // Evaluate check circuit closures as futures
        std::vector<std::future<bool>> relation_futures;

        relation_futures.emplace_back(std::async(std::launch::async, alu));
        relation_futures.emplace_back(std::async(std::launch::async, binary));
        relation_futures.emplace_back(std::async(std::launch::async, conversion));
        relation_futures.emplace_back(std::async(std::launch::async, gas));
        relation_futures.emplace_back(std::async(std::launch::async, keccakf1600));
        relation_futures.emplace_back(std::async(std::launch::async, kernel));
        relation_futures.emplace_back(std::async(std::launch::async, main));
        relation_futures.emplace_back(std::async(std::launch::async, mem));
        relation_futures.emplace_back(std::async(std::launch::async, mem_slice));
        relation_futures.emplace_back(std::async(std::launch::async, pedersen));
        relation_futures.emplace_back(std::async(std::launch::async, poseidon2));
        relation_futures.emplace_back(std::async(std::launch::async, powers));
        relation_futures.emplace_back(std::async(std::launch::async, sha256));
        relation_futures.emplace_back(std::async(std::launch::async, perm_slice_mem));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_alu));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_bin));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_conv));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_pos2_perm));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_pedersen));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_slice));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_a));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_b));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_c));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_d));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_addr_a));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_addr_b));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_addr_c));
        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_addr_d));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_byte_lengths));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_byte_operations));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_cd_value));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_ret_value));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_opcode_gas));
        relation_futures.emplace_back(std::async(std::launch::async, range_check_l2_gas_hi));
        relation_futures.emplace_back(std::async(std::launch::async, range_check_l2_gas_lo));
        relation_futures.emplace_back(std::async(std::launch::async, range_check_da_gas_hi));
        relation_futures.emplace_back(std::async(std::launch::async, range_check_da_gas_lo));
        relation_futures.emplace_back(std::async(std::launch::async, kernel_output_lookup));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_into_kernel));
        relation_futures.emplace_back(std::async(std::launch::async, incl_main_tag_err));
        relation_futures.emplace_back(std::async(std::launch::async, incl_mem_tag_err));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_mem_rng_chk_lo));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_mem_rng_chk_mid));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_mem_rng_chk_hi));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_pow_2_0));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_pow_2_1));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u8_0));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u8_1));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_0));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_1));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_2));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_3));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_4));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_5));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_6));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_7));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_8));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_9));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_10));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_11));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_12));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_13));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_14));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_0));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_1));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_2));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_3));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_4));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_5));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_6));
        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_7));

        // Wait for lookup evaluations to complete
        for (auto& future : relation_futures) {
            if (!future.get()) {
                return false;
            }
        }

        return true;
    }

    [[nodiscard]] size_t get_num_gates() const { return rows.size(); }

    [[nodiscard]] size_t get_circuit_subgroup_size() const
    {
        const size_t num_rows = get_num_gates();
        const auto num_rows_log2 = static_cast<size_t>(numeric::get_msb64(num_rows));
        size_t num_rows_pow2 = 1UL << (num_rows_log2 + (1UL << num_rows_log2 == num_rows ? 0 : 1));
        return num_rows_pow2;
    }
};

} // namespace bb