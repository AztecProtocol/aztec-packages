

// AUTOGENERATED FILE
#pragma once

#include <vector>
#ifndef __wasm__
#include <future>
#endif

#include "barretenberg/common/constexpr_utils.hpp"
#include "barretenberg/common/throw_or_abort.hpp"
#include "barretenberg/ecc/curves/bn254/fr.hpp"
#include "barretenberg/honk/proof_system/logderivative_library.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"
#include "barretenberg/stdlib_circuit_builders/circuit_builder_base.hpp"

#include "barretenberg/relations/generated/avm/avm_alu.hpp"
#include "barretenberg/relations/generated/avm/avm_binary.hpp"
#include "barretenberg/relations/generated/avm/avm_conversion.hpp"
#include "barretenberg/relations/generated/avm/avm_keccakf1600.hpp"
#include "barretenberg/relations/generated/avm/avm_kernel.hpp"
#include "barretenberg/relations/generated/avm/avm_main.hpp"
#include "barretenberg/relations/generated/avm/avm_mem.hpp"
#include "barretenberg/relations/generated/avm/avm_pedersen.hpp"
#include "barretenberg/relations/generated/avm/avm_poseidon2.hpp"
#include "barretenberg/relations/generated/avm/avm_sha256.hpp"
#include "barretenberg/relations/generated/avm/incl_main_tag_err.hpp"
#include "barretenberg/relations/generated/avm/incl_mem_tag_err.hpp"
#include "barretenberg/relations/generated/avm/kernel_output_lookup.hpp"
#include "barretenberg/relations/generated/avm/lookup_byte_lengths.hpp"
#include "barretenberg/relations/generated/avm/lookup_byte_operations.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_0.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_1.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_2.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_3.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_4.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_5.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_6.hpp"
#include "barretenberg/relations/generated/avm/lookup_div_u16_7.hpp"
#include "barretenberg/relations/generated/avm/lookup_into_kernel.hpp"
#include "barretenberg/relations/generated/avm/lookup_mem_rng_chk_hi.hpp"
#include "barretenberg/relations/generated/avm/lookup_mem_rng_chk_lo.hpp"
#include "barretenberg/relations/generated/avm/lookup_mem_rng_chk_mid.hpp"
#include "barretenberg/relations/generated/avm/lookup_opcode_gas.hpp"
#include "barretenberg/relations/generated/avm/lookup_pow_2_0.hpp"
#include "barretenberg/relations/generated/avm/lookup_pow_2_1.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_0.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_1.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_10.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_11.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_12.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_13.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_14.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_2.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_3.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_4.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_5.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_6.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_7.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_8.hpp"
#include "barretenberg/relations/generated/avm/lookup_u16_9.hpp"
#include "barretenberg/relations/generated/avm/lookup_u8_0.hpp"
#include "barretenberg/relations/generated/avm/lookup_u8_1.hpp"
#include "barretenberg/relations/generated/avm/perm_main_alu.hpp"
#include "barretenberg/relations/generated/avm/perm_main_bin.hpp"
#include "barretenberg/relations/generated/avm/perm_main_conv.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_a.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_b.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_c.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_d.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_ind_a.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_ind_b.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_ind_c.hpp"
#include "barretenberg/relations/generated/avm/perm_main_mem_ind_d.hpp"
#include "barretenberg/relations/generated/avm/perm_main_pedersen.hpp"
#include "barretenberg/relations/generated/avm/perm_main_pos2_perm.hpp"
#include "barretenberg/vm/generated/avm_flavor.hpp"

namespace bb {

template <typename FF> struct AvmFullRow {
    FF avm_main_clk{};
    FF avm_main_first{};
    FF avm_alu_a_hi{};
    FF avm_alu_a_lo{};
    FF avm_alu_alu_sel{};
    FF avm_alu_b_hi{};
    FF avm_alu_b_lo{};
    FF avm_alu_borrow{};
    FF avm_alu_cf{};
    FF avm_alu_clk{};
    FF avm_alu_cmp_rng_ctr{};
    FF avm_alu_cmp_sel{};
    FF avm_alu_div_rng_chk_selector{};
    FF avm_alu_div_u16_r0{};
    FF avm_alu_div_u16_r1{};
    FF avm_alu_div_u16_r2{};
    FF avm_alu_div_u16_r3{};
    FF avm_alu_div_u16_r4{};
    FF avm_alu_div_u16_r5{};
    FF avm_alu_div_u16_r6{};
    FF avm_alu_div_u16_r7{};
    FF avm_alu_divisor_hi{};
    FF avm_alu_divisor_lo{};
    FF avm_alu_ff_tag{};
    FF avm_alu_ia{};
    FF avm_alu_ib{};
    FF avm_alu_ic{};
    FF avm_alu_in_tag{};
    FF avm_alu_op_add{};
    FF avm_alu_op_cast{};
    FF avm_alu_op_cast_prev{};
    FF avm_alu_op_div{};
    FF avm_alu_op_div_a_lt_b{};
    FF avm_alu_op_div_std{};
    FF avm_alu_op_eq{};
    FF avm_alu_op_eq_diff_inv{};
    FF avm_alu_op_lt{};
    FF avm_alu_op_lte{};
    FF avm_alu_op_mul{};
    FF avm_alu_op_not{};
    FF avm_alu_op_shl{};
    FF avm_alu_op_shr{};
    FF avm_alu_op_sub{};
    FF avm_alu_p_a_borrow{};
    FF avm_alu_p_b_borrow{};
    FF avm_alu_p_sub_a_hi{};
    FF avm_alu_p_sub_a_lo{};
    FF avm_alu_p_sub_b_hi{};
    FF avm_alu_p_sub_b_lo{};
    FF avm_alu_partial_prod_hi{};
    FF avm_alu_partial_prod_lo{};
    FF avm_alu_quotient_hi{};
    FF avm_alu_quotient_lo{};
    FF avm_alu_remainder{};
    FF avm_alu_res_hi{};
    FF avm_alu_res_lo{};
    FF avm_alu_rng_chk_lookup_selector{};
    FF avm_alu_rng_chk_sel{};
    FF avm_alu_shift_lt_bit_len{};
    FF avm_alu_shift_sel{};
    FF avm_alu_t_sub_s_bits{};
    FF avm_alu_two_pow_s{};
    FF avm_alu_two_pow_t_sub_s{};
    FF avm_alu_u128_tag{};
    FF avm_alu_u16_r0{};
    FF avm_alu_u16_r1{};
    FF avm_alu_u16_r10{};
    FF avm_alu_u16_r11{};
    FF avm_alu_u16_r12{};
    FF avm_alu_u16_r13{};
    FF avm_alu_u16_r14{};
    FF avm_alu_u16_r2{};
    FF avm_alu_u16_r3{};
    FF avm_alu_u16_r4{};
    FF avm_alu_u16_r5{};
    FF avm_alu_u16_r6{};
    FF avm_alu_u16_r7{};
    FF avm_alu_u16_r8{};
    FF avm_alu_u16_r9{};
    FF avm_alu_u16_tag{};
    FF avm_alu_u32_tag{};
    FF avm_alu_u64_tag{};
    FF avm_alu_u8_r0{};
    FF avm_alu_u8_r1{};
    FF avm_alu_u8_tag{};
    FF avm_binary_acc_ia{};
    FF avm_binary_acc_ib{};
    FF avm_binary_acc_ic{};
    FF avm_binary_bin_sel{};
    FF avm_binary_clk{};
    FF avm_binary_ia_bytes{};
    FF avm_binary_ib_bytes{};
    FF avm_binary_ic_bytes{};
    FF avm_binary_in_tag{};
    FF avm_binary_mem_tag_ctr{};
    FF avm_binary_mem_tag_ctr_inv{};
    FF avm_binary_op_id{};
    FF avm_binary_start{};
    FF avm_byte_lookup_bin_sel{};
    FF avm_byte_lookup_table_byte_lengths{};
    FF avm_byte_lookup_table_in_tags{};
    FF avm_byte_lookup_table_input_a{};
    FF avm_byte_lookup_table_input_b{};
    FF avm_byte_lookup_table_op_id{};
    FF avm_byte_lookup_table_output{};
    FF avm_conversion_clk{};
    FF avm_conversion_input{};
    FF avm_conversion_num_limbs{};
    FF avm_conversion_radix{};
    FF avm_conversion_to_radix_le_sel{};
    FF avm_gas_da_gas_fixed_table{};
    FF avm_gas_gas_cost_sel{};
    FF avm_gas_l2_gas_fixed_table{};
    FF avm_keccakf1600_clk{};
    FF avm_keccakf1600_input{};
    FF avm_keccakf1600_keccakf1600_sel{};
    FF avm_keccakf1600_output{};
    FF avm_kernel_emit_l2_to_l1_msg_write_offset{};
    FF avm_kernel_emit_note_hash_write_offset{};
    FF avm_kernel_emit_nullifier_write_offset{};
    FF avm_kernel_emit_unencrypted_log_write_offset{};
    FF avm_kernel_kernel_in_offset{};
    FF avm_kernel_kernel_inputs__is_public{};
    FF avm_kernel_kernel_metadata_out__is_public{};
    FF avm_kernel_kernel_out_offset{};
    FF avm_kernel_kernel_side_effect_out__is_public{};
    FF avm_kernel_kernel_value_out__is_public{};
    FF avm_kernel_l1_to_l2_msg_exists_write_offset{};
    FF avm_kernel_note_hash_exist_write_offset{};
    FF avm_kernel_nullifier_exists_write_offset{};
    FF avm_kernel_nullifier_non_exists_write_offset{};
    FF avm_kernel_q_public_input_kernel_add_to_table{};
    FF avm_kernel_q_public_input_kernel_out_add_to_table{};
    FF avm_kernel_side_effect_counter{};
    FF avm_kernel_sload_write_offset{};
    FF avm_kernel_sstore_write_offset{};
    FF avm_main_alu_in_tag{};
    FF avm_main_alu_sel{};
    FF avm_main_bin_op_id{};
    FF avm_main_bin_sel{};
    FF avm_main_call_ptr{};
    FF avm_main_da_gas_op{};
    FF avm_main_da_gas_remaining{};
    FF avm_main_gas_cost_active{};
    FF avm_main_ia{};
    FF avm_main_ib{};
    FF avm_main_ic{};
    FF avm_main_id{};
    FF avm_main_id_zero{};
    FF avm_main_ind_a{};
    FF avm_main_ind_b{};
    FF avm_main_ind_c{};
    FF avm_main_ind_d{};
    FF avm_main_ind_op_a{};
    FF avm_main_ind_op_b{};
    FF avm_main_ind_op_c{};
    FF avm_main_ind_op_d{};
    FF avm_main_internal_return_ptr{};
    FF avm_main_inv{};
    FF avm_main_l2_gas_op{};
    FF avm_main_l2_gas_remaining{};
    FF avm_main_last{};
    FF avm_main_mem_idx_a{};
    FF avm_main_mem_idx_b{};
    FF avm_main_mem_idx_c{};
    FF avm_main_mem_idx_d{};
    FF avm_main_mem_op_a{};
    FF avm_main_mem_op_activate_gas{};
    FF avm_main_mem_op_b{};
    FF avm_main_mem_op_c{};
    FF avm_main_mem_op_d{};
    FF avm_main_op_err{};
    FF avm_main_opcode_val{};
    FF avm_main_pc{};
    FF avm_main_q_kernel_lookup{};
    FF avm_main_q_kernel_output_lookup{};
    FF avm_main_r_in_tag{};
    FF avm_main_rwa{};
    FF avm_main_rwb{};
    FF avm_main_rwc{};
    FF avm_main_rwd{};
    FF avm_main_sel_cmov{};
    FF avm_main_sel_external_call{};
    FF avm_main_sel_halt{};
    FF avm_main_sel_internal_call{};
    FF avm_main_sel_internal_return{};
    FF avm_main_sel_jump{};
    FF avm_main_sel_jumpi{};
    FF avm_main_sel_mov{};
    FF avm_main_sel_mov_a{};
    FF avm_main_sel_mov_b{};
    FF avm_main_sel_op_add{};
    FF avm_main_sel_op_address{};
    FF avm_main_sel_op_and{};
    FF avm_main_sel_op_block_number{};
    FF avm_main_sel_op_cast{};
    FF avm_main_sel_op_chain_id{};
    FF avm_main_sel_op_coinbase{};
    FF avm_main_sel_op_dagasleft{};
    FF avm_main_sel_op_div{};
    FF avm_main_sel_op_emit_l2_to_l1_msg{};
    FF avm_main_sel_op_emit_note_hash{};
    FF avm_main_sel_op_emit_nullifier{};
    FF avm_main_sel_op_emit_unencrypted_log{};
    FF avm_main_sel_op_eq{};
    FF avm_main_sel_op_fdiv{};
    FF avm_main_sel_op_fee_per_da_gas{};
    FF avm_main_sel_op_fee_per_l2_gas{};
    FF avm_main_sel_op_get_contract_instance{};
    FF avm_main_sel_op_keccak{};
    FF avm_main_sel_op_l1_to_l2_msg_exists{};
    FF avm_main_sel_op_l2gasleft{};
    FF avm_main_sel_op_lt{};
    FF avm_main_sel_op_lte{};
    FF avm_main_sel_op_mul{};
    FF avm_main_sel_op_not{};
    FF avm_main_sel_op_note_hash_exists{};
    FF avm_main_sel_op_nullifier_exists{};
    FF avm_main_sel_op_or{};
    FF avm_main_sel_op_pedersen{};
    FF avm_main_sel_op_poseidon2{};
    FF avm_main_sel_op_radix_le{};
    FF avm_main_sel_op_sender{};
    FF avm_main_sel_op_sha256{};
    FF avm_main_sel_op_shl{};
    FF avm_main_sel_op_shr{};
    FF avm_main_sel_op_sload{};
    FF avm_main_sel_op_sstore{};
    FF avm_main_sel_op_storage_address{};
    FF avm_main_sel_op_sub{};
    FF avm_main_sel_op_timestamp{};
    FF avm_main_sel_op_transaction_fee{};
    FF avm_main_sel_op_version{};
    FF avm_main_sel_op_xor{};
    FF avm_main_sel_rng_16{};
    FF avm_main_sel_rng_8{};
    FF avm_main_space_id{};
    FF avm_main_table_pow_2{};
    FF avm_main_tag_err{};
    FF avm_main_w_in_tag{};
    FF avm_mem_addr{};
    FF avm_mem_clk{};
    FF avm_mem_diff_hi{};
    FF avm_mem_diff_lo{};
    FF avm_mem_diff_mid{};
    FF avm_mem_glob_addr{};
    FF avm_mem_ind_op_a{};
    FF avm_mem_ind_op_b{};
    FF avm_mem_ind_op_c{};
    FF avm_mem_ind_op_d{};
    FF avm_mem_last{};
    FF avm_mem_lastAccess{};
    FF avm_mem_mem_sel{};
    FF avm_mem_one_min_inv{};
    FF avm_mem_op_a{};
    FF avm_mem_op_b{};
    FF avm_mem_op_c{};
    FF avm_mem_op_d{};
    FF avm_mem_r_in_tag{};
    FF avm_mem_rng_chk_sel{};
    FF avm_mem_rw{};
    FF avm_mem_sel_cmov{};
    FF avm_mem_sel_mov_a{};
    FF avm_mem_sel_mov_b{};
    FF avm_mem_skip_check_tag{};
    FF avm_mem_space_id{};
    FF avm_mem_tag{};
    FF avm_mem_tag_err{};
    FF avm_mem_tsp{};
    FF avm_mem_val{};
    FF avm_mem_w_in_tag{};
    FF avm_pedersen_clk{};
    FF avm_pedersen_input{};
    FF avm_pedersen_output{};
    FF avm_pedersen_pedersen_sel{};
    FF avm_poseidon2_clk{};
    FF avm_poseidon2_input{};
    FF avm_poseidon2_output{};
    FF avm_poseidon2_poseidon_perm_sel{};
    FF avm_sha256_clk{};
    FF avm_sha256_input{};
    FF avm_sha256_output{};
    FF avm_sha256_sha256_compression_sel{};
    FF avm_sha256_state{};
    FF perm_main_alu{};
    FF perm_main_bin{};
    FF perm_main_conv{};
    FF perm_main_pos2_perm{};
    FF perm_main_pedersen{};
    FF perm_main_mem_a{};
    FF perm_main_mem_b{};
    FF perm_main_mem_c{};
    FF perm_main_mem_d{};
    FF perm_main_mem_ind_a{};
    FF perm_main_mem_ind_b{};
    FF perm_main_mem_ind_c{};
    FF perm_main_mem_ind_d{};
    FF lookup_byte_lengths{};
    FF lookup_byte_operations{};
    FF lookup_opcode_gas{};
    FF kernel_output_lookup{};
    FF lookup_into_kernel{};
    FF incl_main_tag_err{};
    FF incl_mem_tag_err{};
    FF lookup_mem_rng_chk_lo{};
    FF lookup_mem_rng_chk_mid{};
    FF lookup_mem_rng_chk_hi{};
    FF lookup_pow_2_0{};
    FF lookup_pow_2_1{};
    FF lookup_u8_0{};
    FF lookup_u8_1{};
    FF lookup_u16_0{};
    FF lookup_u16_1{};
    FF lookup_u16_2{};
    FF lookup_u16_3{};
    FF lookup_u16_4{};
    FF lookup_u16_5{};
    FF lookup_u16_6{};
    FF lookup_u16_7{};
    FF lookup_u16_8{};
    FF lookup_u16_9{};
    FF lookup_u16_10{};
    FF lookup_u16_11{};
    FF lookup_u16_12{};
    FF lookup_u16_13{};
    FF lookup_u16_14{};
    FF lookup_div_u16_0{};
    FF lookup_div_u16_1{};
    FF lookup_div_u16_2{};
    FF lookup_div_u16_3{};
    FF lookup_div_u16_4{};
    FF lookup_div_u16_5{};
    FF lookup_div_u16_6{};
    FF lookup_div_u16_7{};
    FF lookup_byte_lengths_counts{};
    FF lookup_byte_operations_counts{};
    FF lookup_opcode_gas_counts{};
    FF kernel_output_lookup_counts{};
    FF lookup_into_kernel_counts{};
    FF incl_main_tag_err_counts{};
    FF incl_mem_tag_err_counts{};
    FF lookup_mem_rng_chk_lo_counts{};
    FF lookup_mem_rng_chk_mid_counts{};
    FF lookup_mem_rng_chk_hi_counts{};
    FF lookup_pow_2_0_counts{};
    FF lookup_pow_2_1_counts{};
    FF lookup_u8_0_counts{};
    FF lookup_u8_1_counts{};
    FF lookup_u16_0_counts{};
    FF lookup_u16_1_counts{};
    FF lookup_u16_2_counts{};
    FF lookup_u16_3_counts{};
    FF lookup_u16_4_counts{};
    FF lookup_u16_5_counts{};
    FF lookup_u16_6_counts{};
    FF lookup_u16_7_counts{};
    FF lookup_u16_8_counts{};
    FF lookup_u16_9_counts{};
    FF lookup_u16_10_counts{};
    FF lookup_u16_11_counts{};
    FF lookup_u16_12_counts{};
    FF lookup_u16_13_counts{};
    FF lookup_u16_14_counts{};
    FF lookup_div_u16_0_counts{};
    FF lookup_div_u16_1_counts{};
    FF lookup_div_u16_2_counts{};
    FF lookup_div_u16_3_counts{};
    FF lookup_div_u16_4_counts{};
    FF lookup_div_u16_5_counts{};
    FF lookup_div_u16_6_counts{};
    FF lookup_div_u16_7_counts{};
    FF avm_alu_a_hi_shift{};
    FF avm_alu_a_lo_shift{};
    FF avm_alu_alu_sel_shift{};
    FF avm_alu_b_hi_shift{};
    FF avm_alu_b_lo_shift{};
    FF avm_alu_cmp_rng_ctr_shift{};
    FF avm_alu_cmp_sel_shift{};
    FF avm_alu_div_rng_chk_selector_shift{};
    FF avm_alu_div_u16_r0_shift{};
    FF avm_alu_div_u16_r1_shift{};
    FF avm_alu_div_u16_r2_shift{};
    FF avm_alu_div_u16_r3_shift{};
    FF avm_alu_div_u16_r4_shift{};
    FF avm_alu_div_u16_r5_shift{};
    FF avm_alu_div_u16_r6_shift{};
    FF avm_alu_div_u16_r7_shift{};
    FF avm_alu_op_add_shift{};
    FF avm_alu_op_cast_prev_shift{};
    FF avm_alu_op_cast_shift{};
    FF avm_alu_op_div_shift{};
    FF avm_alu_op_mul_shift{};
    FF avm_alu_op_shl_shift{};
    FF avm_alu_op_shr_shift{};
    FF avm_alu_op_sub_shift{};
    FF avm_alu_p_sub_a_hi_shift{};
    FF avm_alu_p_sub_a_lo_shift{};
    FF avm_alu_p_sub_b_hi_shift{};
    FF avm_alu_p_sub_b_lo_shift{};
    FF avm_alu_rng_chk_lookup_selector_shift{};
    FF avm_alu_rng_chk_sel_shift{};
    FF avm_alu_u16_r0_shift{};
    FF avm_alu_u16_r1_shift{};
    FF avm_alu_u16_r2_shift{};
    FF avm_alu_u16_r3_shift{};
    FF avm_alu_u16_r4_shift{};
    FF avm_alu_u16_r5_shift{};
    FF avm_alu_u16_r6_shift{};
    FF avm_alu_u8_r0_shift{};
    FF avm_alu_u8_r1_shift{};
    FF avm_binary_acc_ia_shift{};
    FF avm_binary_acc_ib_shift{};
    FF avm_binary_acc_ic_shift{};
    FF avm_binary_mem_tag_ctr_shift{};
    FF avm_binary_op_id_shift{};
    FF avm_kernel_emit_l2_to_l1_msg_write_offset_shift{};
    FF avm_kernel_emit_note_hash_write_offset_shift{};
    FF avm_kernel_emit_nullifier_write_offset_shift{};
    FF avm_kernel_emit_unencrypted_log_write_offset_shift{};
    FF avm_kernel_l1_to_l2_msg_exists_write_offset_shift{};
    FF avm_kernel_note_hash_exist_write_offset_shift{};
    FF avm_kernel_nullifier_exists_write_offset_shift{};
    FF avm_kernel_nullifier_non_exists_write_offset_shift{};
    FF avm_kernel_side_effect_counter_shift{};
    FF avm_kernel_sload_write_offset_shift{};
    FF avm_kernel_sstore_write_offset_shift{};
    FF avm_main_da_gas_remaining_shift{};
    FF avm_main_internal_return_ptr_shift{};
    FF avm_main_l2_gas_remaining_shift{};
    FF avm_main_pc_shift{};
    FF avm_mem_glob_addr_shift{};
    FF avm_mem_mem_sel_shift{};
    FF avm_mem_rw_shift{};
    FF avm_mem_tag_shift{};
    FF avm_mem_tsp_shift{};
    FF avm_mem_val_shift{};

    [[maybe_unused]] static std::vector<std::string> names();
};

template <typename FF> std::ostream& operator<<(std::ostream& os, AvmFullRow<FF> const& row);

class AvmCircuitBuilder {
  public:
    using Flavor = bb::AvmFlavor;
    using FF = Flavor::FF;
    using Row = AvmFullRow<FF>;

    // TODO: template
    using Polynomial = Flavor::Polynomial;
    using ProverPolynomials = Flavor::ProverPolynomials;

    static constexpr size_t num_fixed_columns = 436;
    static constexpr size_t num_polys = 371;
    std::vector<Row> rows;

    void set_trace(std::vector<Row>&& trace) { rows = std::move(trace); }

    ProverPolynomials compute_polynomials()
    {
        const auto num_rows = get_circuit_subgroup_size();
        ProverPolynomials polys;

        // Allocate mem for each column
        for (auto& poly : polys.get_all()) {
            poly = Polynomial(num_rows);
        }

        for (size_t i = 0; i < rows.size(); i++) {
            polys.avm_main_clk[i] = rows[i].avm_main_clk;
            polys.avm_main_first[i] = rows[i].avm_main_first;
            polys.avm_alu_a_hi[i] = rows[i].avm_alu_a_hi;
            polys.avm_alu_a_lo[i] = rows[i].avm_alu_a_lo;
            polys.avm_alu_alu_sel[i] = rows[i].avm_alu_alu_sel;
            polys.avm_alu_b_hi[i] = rows[i].avm_alu_b_hi;
            polys.avm_alu_b_lo[i] = rows[i].avm_alu_b_lo;
            polys.avm_alu_borrow[i] = rows[i].avm_alu_borrow;
            polys.avm_alu_cf[i] = rows[i].avm_alu_cf;
            polys.avm_alu_clk[i] = rows[i].avm_alu_clk;
            polys.avm_alu_cmp_rng_ctr[i] = rows[i].avm_alu_cmp_rng_ctr;
            polys.avm_alu_cmp_sel[i] = rows[i].avm_alu_cmp_sel;
            polys.avm_alu_div_rng_chk_selector[i] = rows[i].avm_alu_div_rng_chk_selector;
            polys.avm_alu_div_u16_r0[i] = rows[i].avm_alu_div_u16_r0;
            polys.avm_alu_div_u16_r1[i] = rows[i].avm_alu_div_u16_r1;
            polys.avm_alu_div_u16_r2[i] = rows[i].avm_alu_div_u16_r2;
            polys.avm_alu_div_u16_r3[i] = rows[i].avm_alu_div_u16_r3;
            polys.avm_alu_div_u16_r4[i] = rows[i].avm_alu_div_u16_r4;
            polys.avm_alu_div_u16_r5[i] = rows[i].avm_alu_div_u16_r5;
            polys.avm_alu_div_u16_r6[i] = rows[i].avm_alu_div_u16_r6;
            polys.avm_alu_div_u16_r7[i] = rows[i].avm_alu_div_u16_r7;
            polys.avm_alu_divisor_hi[i] = rows[i].avm_alu_divisor_hi;
            polys.avm_alu_divisor_lo[i] = rows[i].avm_alu_divisor_lo;
            polys.avm_alu_ff_tag[i] = rows[i].avm_alu_ff_tag;
            polys.avm_alu_ia[i] = rows[i].avm_alu_ia;
            polys.avm_alu_ib[i] = rows[i].avm_alu_ib;
            polys.avm_alu_ic[i] = rows[i].avm_alu_ic;
            polys.avm_alu_in_tag[i] = rows[i].avm_alu_in_tag;
            polys.avm_alu_op_add[i] = rows[i].avm_alu_op_add;
            polys.avm_alu_op_cast[i] = rows[i].avm_alu_op_cast;
            polys.avm_alu_op_cast_prev[i] = rows[i].avm_alu_op_cast_prev;
            polys.avm_alu_op_div[i] = rows[i].avm_alu_op_div;
            polys.avm_alu_op_div_a_lt_b[i] = rows[i].avm_alu_op_div_a_lt_b;
            polys.avm_alu_op_div_std[i] = rows[i].avm_alu_op_div_std;
            polys.avm_alu_op_eq[i] = rows[i].avm_alu_op_eq;
            polys.avm_alu_op_eq_diff_inv[i] = rows[i].avm_alu_op_eq_diff_inv;
            polys.avm_alu_op_lt[i] = rows[i].avm_alu_op_lt;
            polys.avm_alu_op_lte[i] = rows[i].avm_alu_op_lte;
            polys.avm_alu_op_mul[i] = rows[i].avm_alu_op_mul;
            polys.avm_alu_op_not[i] = rows[i].avm_alu_op_not;
            polys.avm_alu_op_shl[i] = rows[i].avm_alu_op_shl;
            polys.avm_alu_op_shr[i] = rows[i].avm_alu_op_shr;
            polys.avm_alu_op_sub[i] = rows[i].avm_alu_op_sub;
            polys.avm_alu_p_a_borrow[i] = rows[i].avm_alu_p_a_borrow;
            polys.avm_alu_p_b_borrow[i] = rows[i].avm_alu_p_b_borrow;
            polys.avm_alu_p_sub_a_hi[i] = rows[i].avm_alu_p_sub_a_hi;
            polys.avm_alu_p_sub_a_lo[i] = rows[i].avm_alu_p_sub_a_lo;
            polys.avm_alu_p_sub_b_hi[i] = rows[i].avm_alu_p_sub_b_hi;
            polys.avm_alu_p_sub_b_lo[i] = rows[i].avm_alu_p_sub_b_lo;
            polys.avm_alu_partial_prod_hi[i] = rows[i].avm_alu_partial_prod_hi;
            polys.avm_alu_partial_prod_lo[i] = rows[i].avm_alu_partial_prod_lo;
            polys.avm_alu_quotient_hi[i] = rows[i].avm_alu_quotient_hi;
            polys.avm_alu_quotient_lo[i] = rows[i].avm_alu_quotient_lo;
            polys.avm_alu_remainder[i] = rows[i].avm_alu_remainder;
            polys.avm_alu_res_hi[i] = rows[i].avm_alu_res_hi;
            polys.avm_alu_res_lo[i] = rows[i].avm_alu_res_lo;
            polys.avm_alu_rng_chk_lookup_selector[i] = rows[i].avm_alu_rng_chk_lookup_selector;
            polys.avm_alu_rng_chk_sel[i] = rows[i].avm_alu_rng_chk_sel;
            polys.avm_alu_shift_lt_bit_len[i] = rows[i].avm_alu_shift_lt_bit_len;
            polys.avm_alu_shift_sel[i] = rows[i].avm_alu_shift_sel;
            polys.avm_alu_t_sub_s_bits[i] = rows[i].avm_alu_t_sub_s_bits;
            polys.avm_alu_two_pow_s[i] = rows[i].avm_alu_two_pow_s;
            polys.avm_alu_two_pow_t_sub_s[i] = rows[i].avm_alu_two_pow_t_sub_s;
            polys.avm_alu_u128_tag[i] = rows[i].avm_alu_u128_tag;
            polys.avm_alu_u16_r0[i] = rows[i].avm_alu_u16_r0;
            polys.avm_alu_u16_r1[i] = rows[i].avm_alu_u16_r1;
            polys.avm_alu_u16_r10[i] = rows[i].avm_alu_u16_r10;
            polys.avm_alu_u16_r11[i] = rows[i].avm_alu_u16_r11;
            polys.avm_alu_u16_r12[i] = rows[i].avm_alu_u16_r12;
            polys.avm_alu_u16_r13[i] = rows[i].avm_alu_u16_r13;
            polys.avm_alu_u16_r14[i] = rows[i].avm_alu_u16_r14;
            polys.avm_alu_u16_r2[i] = rows[i].avm_alu_u16_r2;
            polys.avm_alu_u16_r3[i] = rows[i].avm_alu_u16_r3;
            polys.avm_alu_u16_r4[i] = rows[i].avm_alu_u16_r4;
            polys.avm_alu_u16_r5[i] = rows[i].avm_alu_u16_r5;
            polys.avm_alu_u16_r6[i] = rows[i].avm_alu_u16_r6;
            polys.avm_alu_u16_r7[i] = rows[i].avm_alu_u16_r7;
            polys.avm_alu_u16_r8[i] = rows[i].avm_alu_u16_r8;
            polys.avm_alu_u16_r9[i] = rows[i].avm_alu_u16_r9;
            polys.avm_alu_u16_tag[i] = rows[i].avm_alu_u16_tag;
            polys.avm_alu_u32_tag[i] = rows[i].avm_alu_u32_tag;
            polys.avm_alu_u64_tag[i] = rows[i].avm_alu_u64_tag;
            polys.avm_alu_u8_r0[i] = rows[i].avm_alu_u8_r0;
            polys.avm_alu_u8_r1[i] = rows[i].avm_alu_u8_r1;
            polys.avm_alu_u8_tag[i] = rows[i].avm_alu_u8_tag;
            polys.avm_binary_acc_ia[i] = rows[i].avm_binary_acc_ia;
            polys.avm_binary_acc_ib[i] = rows[i].avm_binary_acc_ib;
            polys.avm_binary_acc_ic[i] = rows[i].avm_binary_acc_ic;
            polys.avm_binary_bin_sel[i] = rows[i].avm_binary_bin_sel;
            polys.avm_binary_clk[i] = rows[i].avm_binary_clk;
            polys.avm_binary_ia_bytes[i] = rows[i].avm_binary_ia_bytes;
            polys.avm_binary_ib_bytes[i] = rows[i].avm_binary_ib_bytes;
            polys.avm_binary_ic_bytes[i] = rows[i].avm_binary_ic_bytes;
            polys.avm_binary_in_tag[i] = rows[i].avm_binary_in_tag;
            polys.avm_binary_mem_tag_ctr[i] = rows[i].avm_binary_mem_tag_ctr;
            polys.avm_binary_mem_tag_ctr_inv[i] = rows[i].avm_binary_mem_tag_ctr_inv;
            polys.avm_binary_op_id[i] = rows[i].avm_binary_op_id;
            polys.avm_binary_start[i] = rows[i].avm_binary_start;
            polys.avm_byte_lookup_bin_sel[i] = rows[i].avm_byte_lookup_bin_sel;
            polys.avm_byte_lookup_table_byte_lengths[i] = rows[i].avm_byte_lookup_table_byte_lengths;
            polys.avm_byte_lookup_table_in_tags[i] = rows[i].avm_byte_lookup_table_in_tags;
            polys.avm_byte_lookup_table_input_a[i] = rows[i].avm_byte_lookup_table_input_a;
            polys.avm_byte_lookup_table_input_b[i] = rows[i].avm_byte_lookup_table_input_b;
            polys.avm_byte_lookup_table_op_id[i] = rows[i].avm_byte_lookup_table_op_id;
            polys.avm_byte_lookup_table_output[i] = rows[i].avm_byte_lookup_table_output;
            polys.avm_conversion_clk[i] = rows[i].avm_conversion_clk;
            polys.avm_conversion_input[i] = rows[i].avm_conversion_input;
            polys.avm_conversion_num_limbs[i] = rows[i].avm_conversion_num_limbs;
            polys.avm_conversion_radix[i] = rows[i].avm_conversion_radix;
            polys.avm_conversion_to_radix_le_sel[i] = rows[i].avm_conversion_to_radix_le_sel;
            polys.avm_gas_da_gas_fixed_table[i] = rows[i].avm_gas_da_gas_fixed_table;
            polys.avm_gas_gas_cost_sel[i] = rows[i].avm_gas_gas_cost_sel;
            polys.avm_gas_l2_gas_fixed_table[i] = rows[i].avm_gas_l2_gas_fixed_table;
            polys.avm_keccakf1600_clk[i] = rows[i].avm_keccakf1600_clk;
            polys.avm_keccakf1600_input[i] = rows[i].avm_keccakf1600_input;
            polys.avm_keccakf1600_keccakf1600_sel[i] = rows[i].avm_keccakf1600_keccakf1600_sel;
            polys.avm_keccakf1600_output[i] = rows[i].avm_keccakf1600_output;
            polys.avm_kernel_emit_l2_to_l1_msg_write_offset[i] = rows[i].avm_kernel_emit_l2_to_l1_msg_write_offset;
            polys.avm_kernel_emit_note_hash_write_offset[i] = rows[i].avm_kernel_emit_note_hash_write_offset;
            polys.avm_kernel_emit_nullifier_write_offset[i] = rows[i].avm_kernel_emit_nullifier_write_offset;
            polys.avm_kernel_emit_unencrypted_log_write_offset[i] =
                rows[i].avm_kernel_emit_unencrypted_log_write_offset;
            polys.avm_kernel_kernel_in_offset[i] = rows[i].avm_kernel_kernel_in_offset;
            polys.avm_kernel_kernel_inputs__is_public[i] = rows[i].avm_kernel_kernel_inputs__is_public;
            polys.avm_kernel_kernel_metadata_out__is_public[i] = rows[i].avm_kernel_kernel_metadata_out__is_public;
            polys.avm_kernel_kernel_out_offset[i] = rows[i].avm_kernel_kernel_out_offset;
            polys.avm_kernel_kernel_side_effect_out__is_public[i] =
                rows[i].avm_kernel_kernel_side_effect_out__is_public;
            polys.avm_kernel_kernel_value_out__is_public[i] = rows[i].avm_kernel_kernel_value_out__is_public;
            polys.avm_kernel_l1_to_l2_msg_exists_write_offset[i] = rows[i].avm_kernel_l1_to_l2_msg_exists_write_offset;
            polys.avm_kernel_note_hash_exist_write_offset[i] = rows[i].avm_kernel_note_hash_exist_write_offset;
            polys.avm_kernel_nullifier_exists_write_offset[i] = rows[i].avm_kernel_nullifier_exists_write_offset;
            polys.avm_kernel_nullifier_non_exists_write_offset[i] =
                rows[i].avm_kernel_nullifier_non_exists_write_offset;
            polys.avm_kernel_q_public_input_kernel_add_to_table[i] =
                rows[i].avm_kernel_q_public_input_kernel_add_to_table;
            polys.avm_kernel_q_public_input_kernel_out_add_to_table[i] =
                rows[i].avm_kernel_q_public_input_kernel_out_add_to_table;
            polys.avm_kernel_side_effect_counter[i] = rows[i].avm_kernel_side_effect_counter;
            polys.avm_kernel_sload_write_offset[i] = rows[i].avm_kernel_sload_write_offset;
            polys.avm_kernel_sstore_write_offset[i] = rows[i].avm_kernel_sstore_write_offset;
            polys.avm_main_alu_in_tag[i] = rows[i].avm_main_alu_in_tag;
            polys.avm_main_alu_sel[i] = rows[i].avm_main_alu_sel;
            polys.avm_main_bin_op_id[i] = rows[i].avm_main_bin_op_id;
            polys.avm_main_bin_sel[i] = rows[i].avm_main_bin_sel;
            polys.avm_main_call_ptr[i] = rows[i].avm_main_call_ptr;
            polys.avm_main_da_gas_op[i] = rows[i].avm_main_da_gas_op;
            polys.avm_main_da_gas_remaining[i] = rows[i].avm_main_da_gas_remaining;
            polys.avm_main_gas_cost_active[i] = rows[i].avm_main_gas_cost_active;
            polys.avm_main_ia[i] = rows[i].avm_main_ia;
            polys.avm_main_ib[i] = rows[i].avm_main_ib;
            polys.avm_main_ic[i] = rows[i].avm_main_ic;
            polys.avm_main_id[i] = rows[i].avm_main_id;
            polys.avm_main_id_zero[i] = rows[i].avm_main_id_zero;
            polys.avm_main_ind_a[i] = rows[i].avm_main_ind_a;
            polys.avm_main_ind_b[i] = rows[i].avm_main_ind_b;
            polys.avm_main_ind_c[i] = rows[i].avm_main_ind_c;
            polys.avm_main_ind_d[i] = rows[i].avm_main_ind_d;
            polys.avm_main_ind_op_a[i] = rows[i].avm_main_ind_op_a;
            polys.avm_main_ind_op_b[i] = rows[i].avm_main_ind_op_b;
            polys.avm_main_ind_op_c[i] = rows[i].avm_main_ind_op_c;
            polys.avm_main_ind_op_d[i] = rows[i].avm_main_ind_op_d;
            polys.avm_main_internal_return_ptr[i] = rows[i].avm_main_internal_return_ptr;
            polys.avm_main_inv[i] = rows[i].avm_main_inv;
            polys.avm_main_l2_gas_op[i] = rows[i].avm_main_l2_gas_op;
            polys.avm_main_l2_gas_remaining[i] = rows[i].avm_main_l2_gas_remaining;
            polys.avm_main_last[i] = rows[i].avm_main_last;
            polys.avm_main_mem_idx_a[i] = rows[i].avm_main_mem_idx_a;
            polys.avm_main_mem_idx_b[i] = rows[i].avm_main_mem_idx_b;
            polys.avm_main_mem_idx_c[i] = rows[i].avm_main_mem_idx_c;
            polys.avm_main_mem_idx_d[i] = rows[i].avm_main_mem_idx_d;
            polys.avm_main_mem_op_a[i] = rows[i].avm_main_mem_op_a;
            polys.avm_main_mem_op_activate_gas[i] = rows[i].avm_main_mem_op_activate_gas;
            polys.avm_main_mem_op_b[i] = rows[i].avm_main_mem_op_b;
            polys.avm_main_mem_op_c[i] = rows[i].avm_main_mem_op_c;
            polys.avm_main_mem_op_d[i] = rows[i].avm_main_mem_op_d;
            polys.avm_main_op_err[i] = rows[i].avm_main_op_err;
            polys.avm_main_opcode_val[i] = rows[i].avm_main_opcode_val;
            polys.avm_main_pc[i] = rows[i].avm_main_pc;
            polys.avm_main_q_kernel_lookup[i] = rows[i].avm_main_q_kernel_lookup;
            polys.avm_main_q_kernel_output_lookup[i] = rows[i].avm_main_q_kernel_output_lookup;
            polys.avm_main_r_in_tag[i] = rows[i].avm_main_r_in_tag;
            polys.avm_main_rwa[i] = rows[i].avm_main_rwa;
            polys.avm_main_rwb[i] = rows[i].avm_main_rwb;
            polys.avm_main_rwc[i] = rows[i].avm_main_rwc;
            polys.avm_main_rwd[i] = rows[i].avm_main_rwd;
            polys.avm_main_sel_cmov[i] = rows[i].avm_main_sel_cmov;
            polys.avm_main_sel_external_call[i] = rows[i].avm_main_sel_external_call;
            polys.avm_main_sel_halt[i] = rows[i].avm_main_sel_halt;
            polys.avm_main_sel_internal_call[i] = rows[i].avm_main_sel_internal_call;
            polys.avm_main_sel_internal_return[i] = rows[i].avm_main_sel_internal_return;
            polys.avm_main_sel_jump[i] = rows[i].avm_main_sel_jump;
            polys.avm_main_sel_jumpi[i] = rows[i].avm_main_sel_jumpi;
            polys.avm_main_sel_mov[i] = rows[i].avm_main_sel_mov;
            polys.avm_main_sel_mov_a[i] = rows[i].avm_main_sel_mov_a;
            polys.avm_main_sel_mov_b[i] = rows[i].avm_main_sel_mov_b;
            polys.avm_main_sel_op_add[i] = rows[i].avm_main_sel_op_add;
            polys.avm_main_sel_op_address[i] = rows[i].avm_main_sel_op_address;
            polys.avm_main_sel_op_and[i] = rows[i].avm_main_sel_op_and;
            polys.avm_main_sel_op_block_number[i] = rows[i].avm_main_sel_op_block_number;
            polys.avm_main_sel_op_cast[i] = rows[i].avm_main_sel_op_cast;
            polys.avm_main_sel_op_chain_id[i] = rows[i].avm_main_sel_op_chain_id;
            polys.avm_main_sel_op_coinbase[i] = rows[i].avm_main_sel_op_coinbase;
            polys.avm_main_sel_op_dagasleft[i] = rows[i].avm_main_sel_op_dagasleft;
            polys.avm_main_sel_op_div[i] = rows[i].avm_main_sel_op_div;
            polys.avm_main_sel_op_emit_l2_to_l1_msg[i] = rows[i].avm_main_sel_op_emit_l2_to_l1_msg;
            polys.avm_main_sel_op_emit_note_hash[i] = rows[i].avm_main_sel_op_emit_note_hash;
            polys.avm_main_sel_op_emit_nullifier[i] = rows[i].avm_main_sel_op_emit_nullifier;
            polys.avm_main_sel_op_emit_unencrypted_log[i] = rows[i].avm_main_sel_op_emit_unencrypted_log;
            polys.avm_main_sel_op_eq[i] = rows[i].avm_main_sel_op_eq;
            polys.avm_main_sel_op_fdiv[i] = rows[i].avm_main_sel_op_fdiv;
            polys.avm_main_sel_op_fee_per_da_gas[i] = rows[i].avm_main_sel_op_fee_per_da_gas;
            polys.avm_main_sel_op_fee_per_l2_gas[i] = rows[i].avm_main_sel_op_fee_per_l2_gas;
            polys.avm_main_sel_op_get_contract_instance[i] = rows[i].avm_main_sel_op_get_contract_instance;
            polys.avm_main_sel_op_keccak[i] = rows[i].avm_main_sel_op_keccak;
            polys.avm_main_sel_op_l1_to_l2_msg_exists[i] = rows[i].avm_main_sel_op_l1_to_l2_msg_exists;
            polys.avm_main_sel_op_l2gasleft[i] = rows[i].avm_main_sel_op_l2gasleft;
            polys.avm_main_sel_op_lt[i] = rows[i].avm_main_sel_op_lt;
            polys.avm_main_sel_op_lte[i] = rows[i].avm_main_sel_op_lte;
            polys.avm_main_sel_op_mul[i] = rows[i].avm_main_sel_op_mul;
            polys.avm_main_sel_op_not[i] = rows[i].avm_main_sel_op_not;
            polys.avm_main_sel_op_note_hash_exists[i] = rows[i].avm_main_sel_op_note_hash_exists;
            polys.avm_main_sel_op_nullifier_exists[i] = rows[i].avm_main_sel_op_nullifier_exists;
            polys.avm_main_sel_op_or[i] = rows[i].avm_main_sel_op_or;
            polys.avm_main_sel_op_pedersen[i] = rows[i].avm_main_sel_op_pedersen;
            polys.avm_main_sel_op_poseidon2[i] = rows[i].avm_main_sel_op_poseidon2;
            polys.avm_main_sel_op_radix_le[i] = rows[i].avm_main_sel_op_radix_le;
            polys.avm_main_sel_op_sender[i] = rows[i].avm_main_sel_op_sender;
            polys.avm_main_sel_op_sha256[i] = rows[i].avm_main_sel_op_sha256;
            polys.avm_main_sel_op_shl[i] = rows[i].avm_main_sel_op_shl;
            polys.avm_main_sel_op_shr[i] = rows[i].avm_main_sel_op_shr;
            polys.avm_main_sel_op_sload[i] = rows[i].avm_main_sel_op_sload;
            polys.avm_main_sel_op_sstore[i] = rows[i].avm_main_sel_op_sstore;
            polys.avm_main_sel_op_storage_address[i] = rows[i].avm_main_sel_op_storage_address;
            polys.avm_main_sel_op_sub[i] = rows[i].avm_main_sel_op_sub;
            polys.avm_main_sel_op_timestamp[i] = rows[i].avm_main_sel_op_timestamp;
            polys.avm_main_sel_op_transaction_fee[i] = rows[i].avm_main_sel_op_transaction_fee;
            polys.avm_main_sel_op_version[i] = rows[i].avm_main_sel_op_version;
            polys.avm_main_sel_op_xor[i] = rows[i].avm_main_sel_op_xor;
            polys.avm_main_sel_rng_16[i] = rows[i].avm_main_sel_rng_16;
            polys.avm_main_sel_rng_8[i] = rows[i].avm_main_sel_rng_8;
            polys.avm_main_space_id[i] = rows[i].avm_main_space_id;
            polys.avm_main_table_pow_2[i] = rows[i].avm_main_table_pow_2;
            polys.avm_main_tag_err[i] = rows[i].avm_main_tag_err;
            polys.avm_main_w_in_tag[i] = rows[i].avm_main_w_in_tag;
            polys.avm_mem_addr[i] = rows[i].avm_mem_addr;
            polys.avm_mem_clk[i] = rows[i].avm_mem_clk;
            polys.avm_mem_diff_hi[i] = rows[i].avm_mem_diff_hi;
            polys.avm_mem_diff_lo[i] = rows[i].avm_mem_diff_lo;
            polys.avm_mem_diff_mid[i] = rows[i].avm_mem_diff_mid;
            polys.avm_mem_glob_addr[i] = rows[i].avm_mem_glob_addr;
            polys.avm_mem_ind_op_a[i] = rows[i].avm_mem_ind_op_a;
            polys.avm_mem_ind_op_b[i] = rows[i].avm_mem_ind_op_b;
            polys.avm_mem_ind_op_c[i] = rows[i].avm_mem_ind_op_c;
            polys.avm_mem_ind_op_d[i] = rows[i].avm_mem_ind_op_d;
            polys.avm_mem_last[i] = rows[i].avm_mem_last;
            polys.avm_mem_lastAccess[i] = rows[i].avm_mem_lastAccess;
            polys.avm_mem_mem_sel[i] = rows[i].avm_mem_mem_sel;
            polys.avm_mem_one_min_inv[i] = rows[i].avm_mem_one_min_inv;
            polys.avm_mem_op_a[i] = rows[i].avm_mem_op_a;
            polys.avm_mem_op_b[i] = rows[i].avm_mem_op_b;
            polys.avm_mem_op_c[i] = rows[i].avm_mem_op_c;
            polys.avm_mem_op_d[i] = rows[i].avm_mem_op_d;
            polys.avm_mem_r_in_tag[i] = rows[i].avm_mem_r_in_tag;
            polys.avm_mem_rng_chk_sel[i] = rows[i].avm_mem_rng_chk_sel;
            polys.avm_mem_rw[i] = rows[i].avm_mem_rw;
            polys.avm_mem_sel_cmov[i] = rows[i].avm_mem_sel_cmov;
            polys.avm_mem_sel_mov_a[i] = rows[i].avm_mem_sel_mov_a;
            polys.avm_mem_sel_mov_b[i] = rows[i].avm_mem_sel_mov_b;
            polys.avm_mem_skip_check_tag[i] = rows[i].avm_mem_skip_check_tag;
            polys.avm_mem_space_id[i] = rows[i].avm_mem_space_id;
            polys.avm_mem_tag[i] = rows[i].avm_mem_tag;
            polys.avm_mem_tag_err[i] = rows[i].avm_mem_tag_err;
            polys.avm_mem_tsp[i] = rows[i].avm_mem_tsp;
            polys.avm_mem_val[i] = rows[i].avm_mem_val;
            polys.avm_mem_w_in_tag[i] = rows[i].avm_mem_w_in_tag;
            polys.avm_pedersen_clk[i] = rows[i].avm_pedersen_clk;
            polys.avm_pedersen_input[i] = rows[i].avm_pedersen_input;
            polys.avm_pedersen_output[i] = rows[i].avm_pedersen_output;
            polys.avm_pedersen_pedersen_sel[i] = rows[i].avm_pedersen_pedersen_sel;
            polys.avm_poseidon2_clk[i] = rows[i].avm_poseidon2_clk;
            polys.avm_poseidon2_input[i] = rows[i].avm_poseidon2_input;
            polys.avm_poseidon2_output[i] = rows[i].avm_poseidon2_output;
            polys.avm_poseidon2_poseidon_perm_sel[i] = rows[i].avm_poseidon2_poseidon_perm_sel;
            polys.avm_sha256_clk[i] = rows[i].avm_sha256_clk;
            polys.avm_sha256_input[i] = rows[i].avm_sha256_input;
            polys.avm_sha256_output[i] = rows[i].avm_sha256_output;
            polys.avm_sha256_sha256_compression_sel[i] = rows[i].avm_sha256_sha256_compression_sel;
            polys.avm_sha256_state[i] = rows[i].avm_sha256_state;
            polys.lookup_byte_lengths_counts[i] = rows[i].lookup_byte_lengths_counts;
            polys.lookup_byte_operations_counts[i] = rows[i].lookup_byte_operations_counts;
            polys.lookup_opcode_gas_counts[i] = rows[i].lookup_opcode_gas_counts;
            polys.kernel_output_lookup_counts[i] = rows[i].kernel_output_lookup_counts;
            polys.lookup_into_kernel_counts[i] = rows[i].lookup_into_kernel_counts;
            polys.incl_main_tag_err_counts[i] = rows[i].incl_main_tag_err_counts;
            polys.incl_mem_tag_err_counts[i] = rows[i].incl_mem_tag_err_counts;
            polys.lookup_mem_rng_chk_lo_counts[i] = rows[i].lookup_mem_rng_chk_lo_counts;
            polys.lookup_mem_rng_chk_mid_counts[i] = rows[i].lookup_mem_rng_chk_mid_counts;
            polys.lookup_mem_rng_chk_hi_counts[i] = rows[i].lookup_mem_rng_chk_hi_counts;
            polys.lookup_pow_2_0_counts[i] = rows[i].lookup_pow_2_0_counts;
            polys.lookup_pow_2_1_counts[i] = rows[i].lookup_pow_2_1_counts;
            polys.lookup_u8_0_counts[i] = rows[i].lookup_u8_0_counts;
            polys.lookup_u8_1_counts[i] = rows[i].lookup_u8_1_counts;
            polys.lookup_u16_0_counts[i] = rows[i].lookup_u16_0_counts;
            polys.lookup_u16_1_counts[i] = rows[i].lookup_u16_1_counts;
            polys.lookup_u16_2_counts[i] = rows[i].lookup_u16_2_counts;
            polys.lookup_u16_3_counts[i] = rows[i].lookup_u16_3_counts;
            polys.lookup_u16_4_counts[i] = rows[i].lookup_u16_4_counts;
            polys.lookup_u16_5_counts[i] = rows[i].lookup_u16_5_counts;
            polys.lookup_u16_6_counts[i] = rows[i].lookup_u16_6_counts;
            polys.lookup_u16_7_counts[i] = rows[i].lookup_u16_7_counts;
            polys.lookup_u16_8_counts[i] = rows[i].lookup_u16_8_counts;
            polys.lookup_u16_9_counts[i] = rows[i].lookup_u16_9_counts;
            polys.lookup_u16_10_counts[i] = rows[i].lookup_u16_10_counts;
            polys.lookup_u16_11_counts[i] = rows[i].lookup_u16_11_counts;
            polys.lookup_u16_12_counts[i] = rows[i].lookup_u16_12_counts;
            polys.lookup_u16_13_counts[i] = rows[i].lookup_u16_13_counts;
            polys.lookup_u16_14_counts[i] = rows[i].lookup_u16_14_counts;
            polys.lookup_div_u16_0_counts[i] = rows[i].lookup_div_u16_0_counts;
            polys.lookup_div_u16_1_counts[i] = rows[i].lookup_div_u16_1_counts;
            polys.lookup_div_u16_2_counts[i] = rows[i].lookup_div_u16_2_counts;
            polys.lookup_div_u16_3_counts[i] = rows[i].lookup_div_u16_3_counts;
            polys.lookup_div_u16_4_counts[i] = rows[i].lookup_div_u16_4_counts;
            polys.lookup_div_u16_5_counts[i] = rows[i].lookup_div_u16_5_counts;
            polys.lookup_div_u16_6_counts[i] = rows[i].lookup_div_u16_6_counts;
            polys.lookup_div_u16_7_counts[i] = rows[i].lookup_div_u16_7_counts;
        }

        polys.avm_alu_a_hi_shift = Polynomial(polys.avm_alu_a_hi.shifted());
        polys.avm_alu_a_lo_shift = Polynomial(polys.avm_alu_a_lo.shifted());
        polys.avm_alu_alu_sel_shift = Polynomial(polys.avm_alu_alu_sel.shifted());
        polys.avm_alu_b_hi_shift = Polynomial(polys.avm_alu_b_hi.shifted());
        polys.avm_alu_b_lo_shift = Polynomial(polys.avm_alu_b_lo.shifted());
        polys.avm_alu_cmp_rng_ctr_shift = Polynomial(polys.avm_alu_cmp_rng_ctr.shifted());
        polys.avm_alu_cmp_sel_shift = Polynomial(polys.avm_alu_cmp_sel.shifted());
        polys.avm_alu_div_rng_chk_selector_shift = Polynomial(polys.avm_alu_div_rng_chk_selector.shifted());
        polys.avm_alu_div_u16_r0_shift = Polynomial(polys.avm_alu_div_u16_r0.shifted());
        polys.avm_alu_div_u16_r1_shift = Polynomial(polys.avm_alu_div_u16_r1.shifted());
        polys.avm_alu_div_u16_r2_shift = Polynomial(polys.avm_alu_div_u16_r2.shifted());
        polys.avm_alu_div_u16_r3_shift = Polynomial(polys.avm_alu_div_u16_r3.shifted());
        polys.avm_alu_div_u16_r4_shift = Polynomial(polys.avm_alu_div_u16_r4.shifted());
        polys.avm_alu_div_u16_r5_shift = Polynomial(polys.avm_alu_div_u16_r5.shifted());
        polys.avm_alu_div_u16_r6_shift = Polynomial(polys.avm_alu_div_u16_r6.shifted());
        polys.avm_alu_div_u16_r7_shift = Polynomial(polys.avm_alu_div_u16_r7.shifted());
        polys.avm_alu_op_add_shift = Polynomial(polys.avm_alu_op_add.shifted());
        polys.avm_alu_op_cast_prev_shift = Polynomial(polys.avm_alu_op_cast_prev.shifted());
        polys.avm_alu_op_cast_shift = Polynomial(polys.avm_alu_op_cast.shifted());
        polys.avm_alu_op_div_shift = Polynomial(polys.avm_alu_op_div.shifted());
        polys.avm_alu_op_mul_shift = Polynomial(polys.avm_alu_op_mul.shifted());
        polys.avm_alu_op_shl_shift = Polynomial(polys.avm_alu_op_shl.shifted());
        polys.avm_alu_op_shr_shift = Polynomial(polys.avm_alu_op_shr.shifted());
        polys.avm_alu_op_sub_shift = Polynomial(polys.avm_alu_op_sub.shifted());
        polys.avm_alu_p_sub_a_hi_shift = Polynomial(polys.avm_alu_p_sub_a_hi.shifted());
        polys.avm_alu_p_sub_a_lo_shift = Polynomial(polys.avm_alu_p_sub_a_lo.shifted());
        polys.avm_alu_p_sub_b_hi_shift = Polynomial(polys.avm_alu_p_sub_b_hi.shifted());
        polys.avm_alu_p_sub_b_lo_shift = Polynomial(polys.avm_alu_p_sub_b_lo.shifted());
        polys.avm_alu_rng_chk_lookup_selector_shift = Polynomial(polys.avm_alu_rng_chk_lookup_selector.shifted());
        polys.avm_alu_rng_chk_sel_shift = Polynomial(polys.avm_alu_rng_chk_sel.shifted());
        polys.avm_alu_u16_r0_shift = Polynomial(polys.avm_alu_u16_r0.shifted());
        polys.avm_alu_u16_r1_shift = Polynomial(polys.avm_alu_u16_r1.shifted());
        polys.avm_alu_u16_r2_shift = Polynomial(polys.avm_alu_u16_r2.shifted());
        polys.avm_alu_u16_r3_shift = Polynomial(polys.avm_alu_u16_r3.shifted());
        polys.avm_alu_u16_r4_shift = Polynomial(polys.avm_alu_u16_r4.shifted());
        polys.avm_alu_u16_r5_shift = Polynomial(polys.avm_alu_u16_r5.shifted());
        polys.avm_alu_u16_r6_shift = Polynomial(polys.avm_alu_u16_r6.shifted());
        polys.avm_alu_u8_r0_shift = Polynomial(polys.avm_alu_u8_r0.shifted());
        polys.avm_alu_u8_r1_shift = Polynomial(polys.avm_alu_u8_r1.shifted());
        polys.avm_binary_acc_ia_shift = Polynomial(polys.avm_binary_acc_ia.shifted());
        polys.avm_binary_acc_ib_shift = Polynomial(polys.avm_binary_acc_ib.shifted());
        polys.avm_binary_acc_ic_shift = Polynomial(polys.avm_binary_acc_ic.shifted());
        polys.avm_binary_mem_tag_ctr_shift = Polynomial(polys.avm_binary_mem_tag_ctr.shifted());
        polys.avm_binary_op_id_shift = Polynomial(polys.avm_binary_op_id.shifted());
        polys.avm_kernel_emit_l2_to_l1_msg_write_offset_shift =
            Polynomial(polys.avm_kernel_emit_l2_to_l1_msg_write_offset.shifted());
        polys.avm_kernel_emit_note_hash_write_offset_shift =
            Polynomial(polys.avm_kernel_emit_note_hash_write_offset.shifted());
        polys.avm_kernel_emit_nullifier_write_offset_shift =
            Polynomial(polys.avm_kernel_emit_nullifier_write_offset.shifted());
        polys.avm_kernel_emit_unencrypted_log_write_offset_shift =
            Polynomial(polys.avm_kernel_emit_unencrypted_log_write_offset.shifted());
        polys.avm_kernel_l1_to_l2_msg_exists_write_offset_shift =
            Polynomial(polys.avm_kernel_l1_to_l2_msg_exists_write_offset.shifted());
        polys.avm_kernel_note_hash_exist_write_offset_shift =
            Polynomial(polys.avm_kernel_note_hash_exist_write_offset.shifted());
        polys.avm_kernel_nullifier_exists_write_offset_shift =
            Polynomial(polys.avm_kernel_nullifier_exists_write_offset.shifted());
        polys.avm_kernel_nullifier_non_exists_write_offset_shift =
            Polynomial(polys.avm_kernel_nullifier_non_exists_write_offset.shifted());
        polys.avm_kernel_side_effect_counter_shift = Polynomial(polys.avm_kernel_side_effect_counter.shifted());
        polys.avm_kernel_sload_write_offset_shift = Polynomial(polys.avm_kernel_sload_write_offset.shifted());
        polys.avm_kernel_sstore_write_offset_shift = Polynomial(polys.avm_kernel_sstore_write_offset.shifted());
        polys.avm_main_da_gas_remaining_shift = Polynomial(polys.avm_main_da_gas_remaining.shifted());
        polys.avm_main_internal_return_ptr_shift = Polynomial(polys.avm_main_internal_return_ptr.shifted());
        polys.avm_main_l2_gas_remaining_shift = Polynomial(polys.avm_main_l2_gas_remaining.shifted());
        polys.avm_main_pc_shift = Polynomial(polys.avm_main_pc.shifted());
        polys.avm_mem_glob_addr_shift = Polynomial(polys.avm_mem_glob_addr.shifted());
        polys.avm_mem_mem_sel_shift = Polynomial(polys.avm_mem_mem_sel.shifted());
        polys.avm_mem_rw_shift = Polynomial(polys.avm_mem_rw.shifted());
        polys.avm_mem_tag_shift = Polynomial(polys.avm_mem_tag.shifted());
        polys.avm_mem_tsp_shift = Polynomial(polys.avm_mem_tsp.shifted());
        polys.avm_mem_val_shift = Polynomial(polys.avm_mem_val.shifted());

        return polys;
    }

    [[maybe_unused]] bool check_circuit()
    {

        const FF gamma = FF::random_element();
        const FF beta = FF::random_element();
        bb::RelationParameters<typename Flavor::FF> params{
            .eta = 0,
            .beta = beta,
            .gamma = gamma,
            .public_input_delta = 0,
            .lookup_grand_product_delta = 0,
            .beta_sqr = 0,
            .beta_cube = 0,
            .eccvm_set_permutation_delta = 0,
        };

        auto polys = compute_polynomials();
        const size_t num_rows = polys.get_polynomial_size();

        const auto evaluate_relation = [&]<typename Relation>(const std::string& relation_name,
                                                              std::string (*debug_label)(int)) {
            typename Relation::SumcheckArrayOfValuesOverSubrelations result;
            for (auto& r : result) {
                r = 0;
            }
            constexpr size_t NUM_SUBRELATIONS = result.size();

            for (size_t i = 0; i < num_rows; ++i) {
                Relation::accumulate(result, polys.get_row(i), {}, 1);

                bool x = true;
                for (size_t j = 0; j < NUM_SUBRELATIONS; ++j) {
                    if (result[j] != 0) {
                        std::string row_name = debug_label(static_cast<int>(j));
                        throw_or_abort(
                            format("Relation ", relation_name, ", subrelation index ", row_name, " failed at row ", i));
                        x = false;
                    }
                }
                if (!x) {
                    return false;
                }
            }
            return true;
        };

        const auto evaluate_logderivative = [&]<typename LogDerivativeSettings>(const std::string& lookup_name) {
            // Check the logderivative relation
            bb::compute_logderivative_inverse<Flavor, LogDerivativeSettings>(polys, params, num_rows);

            typename LogDerivativeSettings::SumcheckArrayOfValuesOverSubrelations lookup_result;

            for (auto& r : lookup_result) {
                r = 0;
            }
            for (size_t i = 0; i < num_rows; ++i) {
                LogDerivativeSettings::accumulate(lookup_result, polys.get_row(i), params, 1);
            }
            for (auto r : lookup_result) {
                if (r != 0) {
                    throw_or_abort(format("Lookup ", lookup_name, " failed."));
                    return false;
                }
            }
            return true;
        };

        auto avm_alu = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_alu<FF>>("avm_alu",
                                                                              Avm_vm::get_relation_label_avm_alu);
        };

        auto avm_binary = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_binary<FF>>("avm_binary",
                                                                                 Avm_vm::get_relation_label_avm_binary);
        };

        auto avm_conversion = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_conversion<FF>>(
                "avm_conversion", Avm_vm::get_relation_label_avm_conversion);
        };

        auto avm_keccakf1600 = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_keccakf1600<FF>>(
                "avm_keccakf1600", Avm_vm::get_relation_label_avm_keccakf1600);
        };

        auto avm_kernel = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_kernel<FF>>("avm_kernel",
                                                                                 Avm_vm::get_relation_label_avm_kernel);
        };

        auto avm_main = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_main<FF>>("avm_main",
                                                                               Avm_vm::get_relation_label_avm_main);
        };

        auto avm_mem = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_mem<FF>>("avm_mem",
                                                                              Avm_vm::get_relation_label_avm_mem);
        };

        auto avm_pedersen = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_pedersen<FF>>(
                "avm_pedersen", Avm_vm::get_relation_label_avm_pedersen);
        };

        auto avm_poseidon2 = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_poseidon2<FF>>(
                "avm_poseidon2", Avm_vm::get_relation_label_avm_poseidon2);
        };

        auto avm_sha256 = [=]() {
            return evaluate_relation.template operator()<Avm_vm::avm_sha256<FF>>("avm_sha256",
                                                                                 Avm_vm::get_relation_label_avm_sha256);
        };

        auto perm_main_alu = [=]() {
            return evaluate_logderivative.template operator()<perm_main_alu_relation<FF>>("PERM_MAIN_ALU");
        };

        auto perm_main_bin = [=]() {
            return evaluate_logderivative.template operator()<perm_main_bin_relation<FF>>("PERM_MAIN_BIN");
        };

        auto perm_main_conv = [=]() {
            return evaluate_logderivative.template operator()<perm_main_conv_relation<FF>>("PERM_MAIN_CONV");
        };

        auto perm_main_pos2_perm = [=]() {
            return evaluate_logderivative.template operator()<perm_main_pos2_perm_relation<FF>>("PERM_MAIN_POS2_PERM");
        };

        auto perm_main_pedersen = [=]() {
            return evaluate_logderivative.template operator()<perm_main_pedersen_relation<FF>>("PERM_MAIN_PEDERSEN");
        };

        auto perm_main_mem_a = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_a_relation<FF>>("PERM_MAIN_MEM_A");
        };

        auto perm_main_mem_b = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_b_relation<FF>>("PERM_MAIN_MEM_B");
        };

        auto perm_main_mem_c = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_c_relation<FF>>("PERM_MAIN_MEM_C");
        };

        auto perm_main_mem_d = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_d_relation<FF>>("PERM_MAIN_MEM_D");
        };

        auto perm_main_mem_ind_a = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_a_relation<FF>>("PERM_MAIN_MEM_IND_A");
        };

        auto perm_main_mem_ind_b = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_b_relation<FF>>("PERM_MAIN_MEM_IND_B");
        };

        auto perm_main_mem_ind_c = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_c_relation<FF>>("PERM_MAIN_MEM_IND_C");
        };

        auto perm_main_mem_ind_d = [=]() {
            return evaluate_logderivative.template operator()<perm_main_mem_ind_d_relation<FF>>("PERM_MAIN_MEM_IND_D");
        };

        auto lookup_byte_lengths = [=]() {
            return evaluate_logderivative.template operator()<lookup_byte_lengths_relation<FF>>("LOOKUP_BYTE_LENGTHS");
        };

        auto lookup_byte_operations = [=]() {
            return evaluate_logderivative.template operator()<lookup_byte_operations_relation<FF>>(
                "LOOKUP_BYTE_OPERATIONS");
        };

        auto lookup_opcode_gas = [=]() {
            return evaluate_logderivative.template operator()<lookup_opcode_gas_relation<FF>>("LOOKUP_OPCODE_GAS");
        };

        auto kernel_output_lookup = [=]() {
            return evaluate_logderivative.template operator()<kernel_output_lookup_relation<FF>>(
                "KERNEL_OUTPUT_LOOKUP");
        };

        auto lookup_into_kernel = [=]() {
            return evaluate_logderivative.template operator()<lookup_into_kernel_relation<FF>>("LOOKUP_INTO_KERNEL");
        };

        auto incl_main_tag_err = [=]() {
            return evaluate_logderivative.template operator()<incl_main_tag_err_relation<FF>>("INCL_MAIN_TAG_ERR");
        };

        auto incl_mem_tag_err = [=]() {
            return evaluate_logderivative.template operator()<incl_mem_tag_err_relation<FF>>("INCL_MEM_TAG_ERR");
        };

        auto lookup_mem_rng_chk_lo = [=]() {
            return evaluate_logderivative.template operator()<lookup_mem_rng_chk_lo_relation<FF>>(
                "LOOKUP_MEM_RNG_CHK_LO");
        };

        auto lookup_mem_rng_chk_mid = [=]() {
            return evaluate_logderivative.template operator()<lookup_mem_rng_chk_mid_relation<FF>>(
                "LOOKUP_MEM_RNG_CHK_MID");
        };

        auto lookup_mem_rng_chk_hi = [=]() {
            return evaluate_logderivative.template operator()<lookup_mem_rng_chk_hi_relation<FF>>(
                "LOOKUP_MEM_RNG_CHK_HI");
        };

        auto lookup_pow_2_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_pow_2_0_relation<FF>>("LOOKUP_POW_2_0");
        };

        auto lookup_pow_2_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_pow_2_1_relation<FF>>("LOOKUP_POW_2_1");
        };

        auto lookup_u8_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u8_0_relation<FF>>("LOOKUP_U8_0");
        };

        auto lookup_u8_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u8_1_relation<FF>>("LOOKUP_U8_1");
        };

        auto lookup_u16_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_0_relation<FF>>("LOOKUP_U16_0");
        };

        auto lookup_u16_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_1_relation<FF>>("LOOKUP_U16_1");
        };

        auto lookup_u16_2 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_2_relation<FF>>("LOOKUP_U16_2");
        };

        auto lookup_u16_3 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_3_relation<FF>>("LOOKUP_U16_3");
        };

        auto lookup_u16_4 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_4_relation<FF>>("LOOKUP_U16_4");
        };

        auto lookup_u16_5 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_5_relation<FF>>("LOOKUP_U16_5");
        };

        auto lookup_u16_6 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_6_relation<FF>>("LOOKUP_U16_6");
        };

        auto lookup_u16_7 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_7_relation<FF>>("LOOKUP_U16_7");
        };

        auto lookup_u16_8 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_8_relation<FF>>("LOOKUP_U16_8");
        };

        auto lookup_u16_9 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_9_relation<FF>>("LOOKUP_U16_9");
        };

        auto lookup_u16_10 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_10_relation<FF>>("LOOKUP_U16_10");
        };

        auto lookup_u16_11 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_11_relation<FF>>("LOOKUP_U16_11");
        };

        auto lookup_u16_12 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_12_relation<FF>>("LOOKUP_U16_12");
        };

        auto lookup_u16_13 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_13_relation<FF>>("LOOKUP_U16_13");
        };

        auto lookup_u16_14 = [=]() {
            return evaluate_logderivative.template operator()<lookup_u16_14_relation<FF>>("LOOKUP_U16_14");
        };

        auto lookup_div_u16_0 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_0_relation<FF>>("LOOKUP_DIV_U16_0");
        };

        auto lookup_div_u16_1 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_1_relation<FF>>("LOOKUP_DIV_U16_1");
        };

        auto lookup_div_u16_2 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_2_relation<FF>>("LOOKUP_DIV_U16_2");
        };

        auto lookup_div_u16_3 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_3_relation<FF>>("LOOKUP_DIV_U16_3");
        };

        auto lookup_div_u16_4 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_4_relation<FF>>("LOOKUP_DIV_U16_4");
        };

        auto lookup_div_u16_5 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_5_relation<FF>>("LOOKUP_DIV_U16_5");
        };

        auto lookup_div_u16_6 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_6_relation<FF>>("LOOKUP_DIV_U16_6");
        };

        auto lookup_div_u16_7 = [=]() {
            return evaluate_logderivative.template operator()<lookup_div_u16_7_relation<FF>>("LOOKUP_DIV_U16_7");
        };

#ifndef __wasm__

        // Evaluate check circuit closures as futures
        std::vector<std::future<bool>> relation_futures;

        relation_futures.emplace_back(std::async(std::launch::async, avm_alu));

        relation_futures.emplace_back(std::async(std::launch::async, avm_binary));

        relation_futures.emplace_back(std::async(std::launch::async, avm_conversion));

        relation_futures.emplace_back(std::async(std::launch::async, avm_keccakf1600));

        relation_futures.emplace_back(std::async(std::launch::async, avm_kernel));

        relation_futures.emplace_back(std::async(std::launch::async, avm_main));

        relation_futures.emplace_back(std::async(std::launch::async, avm_mem));

        relation_futures.emplace_back(std::async(std::launch::async, avm_pedersen));

        relation_futures.emplace_back(std::async(std::launch::async, avm_poseidon2));

        relation_futures.emplace_back(std::async(std::launch::async, avm_sha256));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_alu));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_bin));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_conv));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_pos2_perm));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_pedersen));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_a));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_b));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_c));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_d));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_a));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_b));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_c));

        relation_futures.emplace_back(std::async(std::launch::async, perm_main_mem_ind_d));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_byte_lengths));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_byte_operations));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_opcode_gas));

        relation_futures.emplace_back(std::async(std::launch::async, kernel_output_lookup));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_into_kernel));

        relation_futures.emplace_back(std::async(std::launch::async, incl_main_tag_err));

        relation_futures.emplace_back(std::async(std::launch::async, incl_mem_tag_err));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_mem_rng_chk_lo));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_mem_rng_chk_mid));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_mem_rng_chk_hi));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_pow_2_0));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_pow_2_1));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u8_0));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u8_1));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_0));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_1));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_2));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_3));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_4));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_5));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_6));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_7));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_8));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_9));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_10));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_11));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_12));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_13));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_u16_14));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_0));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_1));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_2));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_3));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_4));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_5));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_6));

        relation_futures.emplace_back(std::async(std::launch::async, lookup_div_u16_7));

        // Wait for lookup evaluations to complete
        for (auto& future : relation_futures) {
            int result = future.get();
            if (!result) {
                return false;
            }
        }
#else

        avm_alu();

        avm_binary();

        avm_conversion();

        avm_keccakf1600();

        avm_kernel();

        avm_main();

        avm_mem();

        avm_pedersen();

        avm_poseidon2();

        avm_sha256();

        perm_main_alu();

        perm_main_bin();

        perm_main_conv();

        perm_main_pos2_perm();

        perm_main_pedersen();

        perm_main_mem_a();

        perm_main_mem_b();

        perm_main_mem_c();

        perm_main_mem_d();

        perm_main_mem_ind_a();

        perm_main_mem_ind_b();

        perm_main_mem_ind_c();

        perm_main_mem_ind_d();

        lookup_byte_lengths();

        lookup_byte_operations();

        lookup_opcode_gas();

        kernel_output_lookup();

        lookup_into_kernel();

        incl_main_tag_err();

        incl_mem_tag_err();

        lookup_mem_rng_chk_lo();

        lookup_mem_rng_chk_mid();

        lookup_mem_rng_chk_hi();

        lookup_pow_2_0();

        lookup_pow_2_1();

        lookup_u8_0();

        lookup_u8_1();

        lookup_u16_0();

        lookup_u16_1();

        lookup_u16_2();

        lookup_u16_3();

        lookup_u16_4();

        lookup_u16_5();

        lookup_u16_6();

        lookup_u16_7();

        lookup_u16_8();

        lookup_u16_9();

        lookup_u16_10();

        lookup_u16_11();

        lookup_u16_12();

        lookup_u16_13();

        lookup_u16_14();

        lookup_div_u16_0();

        lookup_div_u16_1();

        lookup_div_u16_2();

        lookup_div_u16_3();

        lookup_div_u16_4();

        lookup_div_u16_5();

        lookup_div_u16_6();

        lookup_div_u16_7();

#endif

        return true;
    }

    [[nodiscard]] size_t get_num_gates() const { return rows.size(); }

    [[nodiscard]] size_t get_circuit_subgroup_size() const
    {
        const size_t num_rows = get_num_gates();
        const auto num_rows_log2 = static_cast<size_t>(numeric::get_msb64(num_rows));
        size_t num_rows_pow2 = 1UL << (num_rows_log2 + (1UL << num_rows_log2 == num_rows ? 0 : 1));
        return num_rows_pow2;
    }
};
} // namespace bb
