// AUTOGENERATED FILE - DO NOT EDIT

import { Buffer } from 'buffer';
import { BarretenbergWasmMain } from "../../barretenberg_wasm/barretenberg_wasm_main/index.js";
import { CircuitProve, CircuitProveResponse, fromCircuitProve, toCircuitProveResponse, CircuitComputeVk, CircuitComputeVkResponse, fromCircuitComputeVk, toCircuitComputeVkResponse, CircuitInfo, CircuitInfoResponse, fromCircuitInfo, toCircuitInfoResponse, CircuitCheck, CircuitCheckResponse, fromCircuitCheck, toCircuitCheckResponse, CircuitVerify, CircuitVerifyResponse, fromCircuitVerify, toCircuitVerifyResponse, ClientIvcComputeStandaloneVk, ClientIvcComputeStandaloneVkResponse, fromClientIvcComputeStandaloneVk, toClientIvcComputeStandaloneVkResponse, ClientIvcComputeIvcVk, ClientIvcComputeIvcVkResponse, fromClientIvcComputeIvcVk, toClientIvcComputeIvcVkResponse, ClientIvcStart, ClientIvcStartResponse, fromClientIvcStart, toClientIvcStartResponse, ClientIvcLoad, ClientIvcLoadResponse, fromClientIvcLoad, toClientIvcLoadResponse, ClientIvcAccumulate, ClientIvcAccumulateResponse, fromClientIvcAccumulate, toClientIvcAccumulateResponse, ClientIvcProve, ClientIvcProveResponse, fromClientIvcProve, toClientIvcProveResponse, ProofAsFields, ProofAsFieldsResponse, fromProofAsFields, toProofAsFieldsResponse, VkAsFields, VkAsFieldsResponse, fromVkAsFields, toVkAsFieldsResponse, CircuitWriteSolidityVerifier, CircuitWriteSolidityVerifierResponse, fromCircuitWriteSolidityVerifier, toCircuitWriteSolidityVerifierResponse, CircuitProveAndVerify, CircuitProveAndVerifyResponse, fromCircuitProveAndVerify, toCircuitProveAndVerifyResponse, CircuitBenchmark, CircuitBenchmarkResponse, fromCircuitBenchmark, toCircuitBenchmarkResponse, ClientIvcCheckPrecomputedVk, ClientIvcCheckPrecomputedVkResponse, fromClientIvcCheckPrecomputedVk, toClientIvcCheckPrecomputedVkResponse } from './api_types.js';

export class SyncApi {
  constructor(protected wasm: BarretenbergWasmMain) {}

  circuitProve(command: CircuitProve): CircuitProveResponse {
    const msgpackCommand = fromCircuitProve(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitProve", msgpackCommand]);
    if (variantName !== 'CircuitProveResponse') {
      throw new Error(`Expected variant name 'CircuitProveResponse' but got '${variantName}'`);
    }
    return toCircuitProveResponse(result);
  }

  circuitComputeVk(command: CircuitComputeVk): CircuitComputeVkResponse {
    const msgpackCommand = fromCircuitComputeVk(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitComputeVk", msgpackCommand]);
    if (variantName !== 'CircuitComputeVkResponse') {
      throw new Error(`Expected variant name 'CircuitComputeVkResponse' but got '${variantName}'`);
    }
    return toCircuitComputeVkResponse(result);
  }

  circuitInfo(command: CircuitInfo): CircuitInfoResponse {
    const msgpackCommand = fromCircuitInfo(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitInfo", msgpackCommand]);
    if (variantName !== 'CircuitInfoResponse') {
      throw new Error(`Expected variant name 'CircuitInfoResponse' but got '${variantName}'`);
    }
    return toCircuitInfoResponse(result);
  }

  circuitCheck(command: CircuitCheck): CircuitCheckResponse {
    const msgpackCommand = fromCircuitCheck(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitCheck", msgpackCommand]);
    if (variantName !== 'CircuitCheckResponse') {
      throw new Error(`Expected variant name 'CircuitCheckResponse' but got '${variantName}'`);
    }
    return toCircuitCheckResponse(result);
  }

  circuitVerify(command: CircuitVerify): CircuitVerifyResponse {
    const msgpackCommand = fromCircuitVerify(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitVerify", msgpackCommand]);
    if (variantName !== 'CircuitVerifyResponse') {
      throw new Error(`Expected variant name 'CircuitVerifyResponse' but got '${variantName}'`);
    }
    return toCircuitVerifyResponse(result);
  }

  clientIvcComputeStandaloneVk(command: ClientIvcComputeStandaloneVk): ClientIvcComputeStandaloneVkResponse {
    const msgpackCommand = fromClientIvcComputeStandaloneVk(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ClientIvcComputeStandaloneVk", msgpackCommand]);
    if (variantName !== 'ClientIvcComputeStandaloneVkResponse') {
      throw new Error(`Expected variant name 'ClientIvcComputeStandaloneVkResponse' but got '${variantName}'`);
    }
    return toClientIvcComputeStandaloneVkResponse(result);
  }

  clientIvcComputeIvcVk(command: ClientIvcComputeIvcVk): ClientIvcComputeIvcVkResponse {
    const msgpackCommand = fromClientIvcComputeIvcVk(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ClientIvcComputeIvcVk", msgpackCommand]);
    if (variantName !== 'ClientIvcComputeIvcVkResponse') {
      throw new Error(`Expected variant name 'ClientIvcComputeIvcVkResponse' but got '${variantName}'`);
    }
    return toClientIvcComputeIvcVkResponse(result);
  }

  clientIvcStart(command: ClientIvcStart): ClientIvcStartResponse {
    const msgpackCommand = fromClientIvcStart(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ClientIvcStart", msgpackCommand]);
    if (variantName !== 'ClientIvcStartResponse') {
      throw new Error(`Expected variant name 'ClientIvcStartResponse' but got '${variantName}'`);
    }
    return toClientIvcStartResponse(result);
  }

  clientIvcLoad(command: ClientIvcLoad): ClientIvcLoadResponse {
    const msgpackCommand = fromClientIvcLoad(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ClientIvcLoad", msgpackCommand]);
    if (variantName !== 'ClientIvcLoadResponse') {
      throw new Error(`Expected variant name 'ClientIvcLoadResponse' but got '${variantName}'`);
    }
    return toClientIvcLoadResponse(result);
  }

  clientIvcAccumulate(command: ClientIvcAccumulate): ClientIvcAccumulateResponse {
    const msgpackCommand = fromClientIvcAccumulate(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ClientIvcAccumulate", msgpackCommand]);
    if (variantName !== 'ClientIvcAccumulateResponse') {
      throw new Error(`Expected variant name 'ClientIvcAccumulateResponse' but got '${variantName}'`);
    }
    return toClientIvcAccumulateResponse(result);
  }

  clientIvcProve(command: ClientIvcProve): ClientIvcProveResponse {
    const msgpackCommand = fromClientIvcProve(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ClientIvcProve", msgpackCommand]);
    if (variantName !== 'ClientIvcProveResponse') {
      throw new Error(`Expected variant name 'ClientIvcProveResponse' but got '${variantName}'`);
    }
    return toClientIvcProveResponse(result);
  }

  proofAsFields(command: ProofAsFields): ProofAsFieldsResponse {
    const msgpackCommand = fromProofAsFields(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ProofAsFields", msgpackCommand]);
    if (variantName !== 'ProofAsFieldsResponse') {
      throw new Error(`Expected variant name 'ProofAsFieldsResponse' but got '${variantName}'`);
    }
    return toProofAsFieldsResponse(result);
  }

  vkAsFields(command: VkAsFields): VkAsFieldsResponse {
    const msgpackCommand = fromVkAsFields(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["VkAsFields", msgpackCommand]);
    if (variantName !== 'VkAsFieldsResponse') {
      throw new Error(`Expected variant name 'VkAsFieldsResponse' but got '${variantName}'`);
    }
    return toVkAsFieldsResponse(result);
  }

  circuitWriteSolidityVerifier(command: CircuitWriteSolidityVerifier): CircuitWriteSolidityVerifierResponse {
    const msgpackCommand = fromCircuitWriteSolidityVerifier(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitWriteSolidityVerifier", msgpackCommand]);
    if (variantName !== 'CircuitWriteSolidityVerifierResponse') {
      throw new Error(`Expected variant name 'CircuitWriteSolidityVerifierResponse' but got '${variantName}'`);
    }
    return toCircuitWriteSolidityVerifierResponse(result);
  }

  circuitProveAndVerify(command: CircuitProveAndVerify): CircuitProveAndVerifyResponse {
    const msgpackCommand = fromCircuitProveAndVerify(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitProveAndVerify", msgpackCommand]);
    if (variantName !== 'CircuitProveAndVerifyResponse') {
      throw new Error(`Expected variant name 'CircuitProveAndVerifyResponse' but got '${variantName}'`);
    }
    return toCircuitProveAndVerifyResponse(result);
  }

  circuitBenchmark(command: CircuitBenchmark): CircuitBenchmarkResponse {
    const msgpackCommand = fromCircuitBenchmark(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["CircuitBenchmark", msgpackCommand]);
    if (variantName !== 'CircuitBenchmarkResponse') {
      throw new Error(`Expected variant name 'CircuitBenchmarkResponse' but got '${variantName}'`);
    }
    return toCircuitBenchmarkResponse(result);
  }

  clientIvcCheckPrecomputedVk(command: ClientIvcCheckPrecomputedVk): ClientIvcCheckPrecomputedVkResponse {
    const msgpackCommand = fromClientIvcCheckPrecomputedVk(command);
    const [variantName, result] = this.wasm.msgpackCall('bbapi', ["ClientIvcCheckPrecomputedVk", msgpackCommand]);
    if (variantName !== 'ClientIvcCheckPrecomputedVkResponse') {
      throw new Error(`Expected variant name 'ClientIvcCheckPrecomputedVkResponse' but got '${variantName}'`);
    }
    return toClientIvcCheckPrecomputedVkResponse(result);
  }
}
