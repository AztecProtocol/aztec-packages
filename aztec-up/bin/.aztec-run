#!/usr/bin/env bash
# The script starts a Docker container passing any commands and arguments to the command running inside the container.
# It handles mounting paths into the container.
# It handles networking comms back to the host.
set -euo pipefail

IMAGE=${1:-}
shift

DEFAULT_PORT=8080
VERSION=${VERSION:-"latest"}
AZTEC_PORT=${AZTEC_PORT:-$DEFAULT_PORT}
INHERIT_USER=${INHERIT_USER:-1}
SSH_AUTH_SOCK_WARNING_FILE="$(dirname $0)/ssh_auth_sock_warning.lock"

if [[ -n "${NETWORK:-}" ]]; then
  VERSION=$NETWORK
  # enable proving if connecting to a network by default
  export PXE_PROVER_ENABLED=${PXE_PROVER_ENABLED:-1}
fi

# preserve arguments to pass to docker run
declare -a preserved_args

# Colors.
y="\033[33m"
r="\033[0m"

function warn {
  echo -e "${y}$1${r}"
}

mac_ssh_auth_sock_warn() {
    echo ""
    warn "#####################################################################################"
    warn "# WARNING: SSH_AUTH_SOCK is set to the default macOS ssh-agent in /private/tmp/...  #"
    warn "# Unfortunately this is not supported in Docker and specially problematic if using  #"
    warn "# VirtioFS (https://github.com/docker/for-mac/issues/6375)                          #"
    warn "#                                                                                   #"
    warn "# To get rid of this warning, either set SSH_AUTH_SOCK to a different value or run  #"
    warn "# aztec ignore-mac-os-default-ssh-agent                                             #"
    warn "#####################################################################################"
    echo ""
}

if ! command -v docker &>/dev/null; then
  warn "No docker found."
  exit 1
fi

if [[ $PWD != ${HOME}* ]]; then
  warn "Due to how we containerize our applications, we require your working directory to be somewhere within $HOME."
  exit 1
fi

UNAME=$(uname -s)
if [ "$UNAME" == "Linux" ] && docker info 2>/dev/null | grep -q rootless; then
  ROOTLESS=1
fi

# If running in rootless docker, don't set uid/gid in container, as it breaks the write perms to the home mount.
# Otherwise we set the uid/gid to be that of user running the container to ensure write perms to the home mount.
if [[ -z "${ROOTLESS:-}" && "${INHERIT_USER:-}" == "1" ]]; then
  DOCKER_USER="--user $(id -u):$(id -g)"
fi

# Set up host.docker.internal alias on Linux, just like it is on mac.
if [[ -z "${SKIP_NET:-}" && "$UNAME" == "Linux" ]]; then
  if [ -n "${ROOTLESS:-}" ]; then
    # We're in rootless docker. Probe for the host ip and use that.
    ip=$(hostname -I | head | tr -d ' ')
    warn "WARNING: Running within rootless docker. Using $ip as host ip. Ensure listening services are listening on this interface."
    DOCKER_HOST_BINDS="--add-host host.docker.internal:$ip"
  else
    DOCKER_HOST_BINDS="--add-host host.docker.internal:host-gateway"
  fi
fi

# Substitute any references to localhost with our host gateway.
# TODO: In node, we can hook the resolve override for localhost with host.docker.internal.
# Consider if we should just do that, but that wouldn't help e.g. nargo.
args=("$@")
for i in "${!args[@]}"; do
  args[$i]=${args[$i]//localhost/host.docker.internal}
done

# Check if it's either a filename or a directory that exists outside the HOME.
# If so, warn and exit.
for i in "${!args[@]}"; do
  arg=${args[$i]}
  if [[ -f "$arg" || -d "$arg" ]] && [[ $(realpath $arg) != ${HOME}* ]]; then
    warn "Due to how we containerize our applications, paths outside of $HOME cannot be referenced."
    exit 1
  fi
done

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
  -p | --port)
    AZTEC_PORT="$2"
    preserved_args+=("$1" "$2") # Store both argument and value
    shift 2                     # Move past argument and value
    ;;
  --pxe.network)
    VERSION="$2" # Set version to user-specified network (e.g. 'devnet')
    echo "Using aztecprotocol/aztec: $VERSION"
    preserved_args+=("$1" "$2") # Store both argument and value
    # turn on proving if connecting to a network by default
    export PXE_PROVER_ENABLED=${PXE_PROVER_ENABLED:-1}
    shift 2
    ;; # Move past argument and value
  *)
    preserved_args+=("$1") # Store unrecognized/other arguments
    shift                  # Move to next argument
    ;;
  esac
done

DOCKER_ENV="-e HOME=$HOME"
for env in ${ENV_VARS_TO_INJECT:-}; do
  if [[ $env != "SSH_AUTH_SOCK" ]] && [[ -n "${!env:-}" ]]; then
    # First substitute any reference to localhost with our host gateway.
    env=${env//localhost/host.docker.internal}
    # Inject into container.
    DOCKER_ENV+=" -e $env=${!env:-}"
  fi
done

# Dynamic port assignment
port_assignment=""
if [[ -z "${SKIP_PORT_ASSIGNMENT:-}" ]]; then
  port_assignment="-p $AZTEC_PORT:$AZTEC_PORT"
fi

SSH_HACK=false

ssh_agent_forwarding=""
if [[ "$ENV_VARS_TO_INJECT" == *"SSH_AUTH_SOCK"* ]]; then
  if [[ "$UNAME" == "Darwin" ]]; then
    if [[ "$SSH_AUTH_SOCK" == "/private/tmp/com.apple.launchd."* && ! -f "$SSH_AUTH_SOCK_WARNING_FILE" ]]; then
        mac_ssh_auth_sock_warn
    fi
    .ssh-hack --load
    SSH_HACK=true
    SSH_AUTH_SOCK="/run/host-services/ssh-auth.sock"
    ssh_agent_forwarding="-v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK"
  else
    ssh_agent_forwarding="-v $(realpath $SSH_AUTH_SOCK):$SSH_AUTH_SOCK"
  fi
  DOCKER_ENV+=" -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
  echo ""
  echo "SSH_AUTH_SOCK is set to ${SSH_AUTH_SOCK}. Enabling SSH agent forwarding."
  echo ""
fi

echo $DOCKER_ENV

docker run \
  -ti \
  --rm \
  --workdir "$PWD" \
  -v $HOME:$HOME -v cache:/cache \
  $ssh_agent_forwarding \
  $port_assignment \
  ${DOCKER_ENV:-} \
  ${DOCKER_HOST_BINDS:-} \
  $IMAGE:$VERSION ${preserved_args[@]:-}


if [[ "$SSH_HACK" == "true" ]]; then
  ./.ssh-hack --unload
fi