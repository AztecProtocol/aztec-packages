#!/usr/bin/env bash
# The script starts a Docker container passing any commands and arguments to the command running inside the container.
# It handles mounting paths into the container.
# It handles networking comms back to the host.
set -euo pipefail

IMAGE=${1:-}
shift

VERSION=${VERSION:-"latest"}

# Any host bindings we might send to the container.
DOCKER_HOST_BINDS=""

# Volumes to pass to the container.
DOCKER_VOLUME=""

if ! command -v docker &> /dev/null; then
  echo "No docker found."
  exit 1
fi

# Colors.
yellow="\033[33m"
reset="\033[0m"

# Set up host.docker.internal alias on Linux, just like it is on mac.
UNAME=$(uname -s)
if [ "$UNAME" == "Linux" ]; then
  if docker info 2>/dev/null | grep -q rootless; then
    # We're in rootless docker. Probe for the host ip and use that.
    ip=$(hostname -I | head | tr -d ' ')
    echo -e "${yellow}WARNING: Running within rootless docker. Using $ip as host ip. Ensure listening services are listening on this interface.${reset}"
    DOCKER_HOST_BINDS="$DOCKER_HOST_BINDS --add-host host.docker.internal:$ip"
  else
    DOCKER_HOST_BINDS="$DOCKER_HOST_BINDS --add-host host.docker.internal:host-gateway"
  fi
fi

# Build a list of mount points
function add_mount() {
  DIR="${1:-}"

  # Grab its dirname if its a file.
  if [ -f "$DIR" ]; then
    DIR=$(dirname "$DIR")
  fi

  if [ ! -d "$DIR" ]; then
    return
  fi

  # Check if it's already been added.
  REALDIR=$(realpath $DIR)
  if [[ "$DOCKER_VOLUME" =~ "$REALDIR:" ]]; then
    return
  fi

  DOCKER_VOLUME="$DOCKER_VOLUME -v $REALDIR:$REALDIR"
}

# Always mount the CWD into the container.
add_mount "$PWD"

# Substitute any references to localhost with our host gateway.
args=("$@")
for i in "${!args[@]}"; do
    args[$i]=${args[$i]//localhost/host.docker.internal}
done

# Check if it's either a filename or a directory that exists outside the CWD.
# If it is then mount inside the container.
# NOTE: This won't work with assignement-style flags, e.g. --outdir=/foo
for i in "${!args[@]}"; do
    arg=${args[$i]}
    if [[ -f "$arg" || -d "$arg" && $(realpath $arg) != ${PWD}* ]]; then
      add_mount "$arg"
    fi
done

DOCKER_ENV=""
for env in ${ENV_VARS_TO_INJECT:-}; do
  # First substitute any reference to localhost with our host gateway.
  env=${env//localhost/host.docker.internal}
  # Inject into container.
  DOCKER_ENV+="-e $env:${!env:-} "
done

DOCKER_VOLUME="$DOCKER_VOLUME -v cache:/cache"

docker run \
  -ti \
  --rm \
  --user $(id -u):$(id -g) \
  --workdir "$PWD" \
  $DOCKER_HOST_BINDS \
  $DOCKER_ENV \
  $DOCKER_VOLUME \
  $IMAGE:$VERSION ${args[@]:-}
