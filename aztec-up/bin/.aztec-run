#!/usr/bin/env bash
#
# STOP! BEFORE YOU MODIFY THIS SCRIPT:
#
# The script starts the aztec mono-container.
# It handles mounting paths into the container.
# It handles networking and comms back to the host.
# It handles uid/gid adjustments.
# It handles environment variable forwarding.
# It's called with a multitude of entrypoints.
#
# DO NOT ADD CALLER SPECIFIC SHENANIGANS.
# Such stuff belongs in higher level e.g. `aztec` or `aztec-wallet` scripts.
set -euo pipefail

CONTAINER_NAME=$1
shift

VERSION=${VERSION:-"latest"}

# We default to colored logs.
FORCE_COLOR=${FORCE_COLOR:-1}

function warn {
  y="\033[33m"
  r="\033[0m"
  echo -e "${y}$1${r}"
}

if ! command -v docker &>/dev/null; then
  warn "No docker found."
  exit 1
fi

if [[ $PWD != ${HOME}* ]]; then
  warn "Due to how we containerize our applications, we require your working directory to be somewhere within $HOME."
  exit 1
fi

uname=$(uname -s)
if [ "$uname" == "Linux" ] && docker info 2>/dev/null | grep -q rootless; then
  ROOTLESS=1
fi

# If running in rootless docker, don't set uid/gid in container, as it breaks the write perms to the home mount.
# Otherwise we set the uid/gid to be that of user running the container to ensure write perms to the home mount.
if [ -z "${ROOTLESS:-}" ]; then
  arg_user="--user $(id -u):$(id -g)"
fi

# Set up host.docker.internal alias on Linux, just like it is on mac.
if [[ -z "${SKIP_NET:-}" && "$uname" == "Linux" ]]; then
  if [ -n "${ROOTLESS:-}" ]; then
    # We're in rootless docker. Probe for the host ip and use that.
    ip=$(hostname -I | head | tr -d ' ')
    warn "WARNING: Running within rootless docker. Using $ip as host ip. Ensure listening services are listening on this interface."
    arg_host_binds="--add-host host.docker.internal:$ip"
  else
    arg_host_binds="--add-host host.docker.internal:host-gateway"
  fi
fi

# Substitute any references to localhost with our host gateway.
# TODO: In node, we can hook the resolve override for localhost with host.docker.internal.
# Consider if we should just do that, but that wouldn't help e.g. nargo.
args=("$@")
for i in "${!args[@]}"; do
  args[$i]=${args[$i]//localhost/host.docker.internal}
done

# Check if it's either a filename or a directory that exists outside the HOME.
# If so, warn and exit.
for i in "${!args[@]}"; do
  arg=${args[$i]}
  if [[ -f "$arg" || -d "$arg" ]] && [[ $(realpath $arg) != ${HOME}* ]]; then
    warn "Due to how we containerize our applications, paths outside of $HOME cannot be referenced."
    exit 1
  fi
done

# Volume mounts. We always mount in users home dir and cache volume.
arg_volume_mounts="-v $HOME:$HOME -v cache:/cache"

# If we have an ssh agent running, mount it into container, or if on mac, forward it with socat.
if [ -n "${SSH_AUTH_SOCK:-}" ]; then
  # warn "SSH_AUTH_SOCK is set to ${SSH_AUTH_SOCK:-}. Attempting to enable SSH agent forwarding..."

  if [ "$uname" == "Darwin" ]; then
    if ! command -v socat &> /dev/null; then
      warn "Socat is not installed. To make SSH agent forwarding work in MacOS, please run:\nbrew install socat"
    else
      socat TCP-LISTEN:${SSH_AUTH_SOCK_SOCAT_PORT:-12345},reuseaddr,fork UNIX-CLIENT:$SSH_AUTH_SOCK &
      socat_pid=$!
      trap 'kill -9 $socat_pid &>/dev/null' EXIT
      ENV_VARS_TO_INJECT+=" SSH_AUTH_SOCK_SOCAT_PORT"
    fi
  else
    ENV_VARS_TO_INJECT+=" SSH_AUTH_SOCK"
    arg_volume_mounts+=" -v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK"
  fi
fi

# Forward all requested environment variables into the container.
# Substitute any reference to localhost with our host gateway.
arg_env_vars="-e HOME=$HOME"
for env in ${ENV_VARS_TO_INJECT:-}; do
  if [ -n "${!env:-}" ]; then
    env=${env//localhost/host.docker.internal}
    arg_env_vars+=" -e $env=${!env:-}"
  fi
done

# Dynamic port assignment.
if [ -n "${AZTEC_PORT:-}" ]; then
  arg_port_assignment="-p $AZTEC_PORT:$AZTEC_PORT"
fi

# For debugging the aztec-up scripts, can be useful to mount local code into container.
if [ "${MOUNT_LOCAL_CODE:-0}" -eq 1 ]; then
  arg_volume_mounts=" -v $PWD/..:/usr/src:ro"
fi

function run {
  docker run \
    --name $CONTAINER_NAME \
    --rm \
    --workdir "$PWD" \
    ${arg_interactive:-} \
    ${arg_volume_mounts:-} \
    ${arg_port_assignment:-} \
    ${arg_env_vars:-} \
    ${arg_host_binds:-} \
    ${arg_user:-} \
    aztecprotocol/aztec:$VERSION "${args[@]}"
}

if [ -t 0 ]; then
  # We're in a terminal. Docker will receive e.g. SIGINT directly.
  arg_interactive=-ti
  run
else
  # Not connected to a terminal. We need to ensure we can propagate kill signals.
  trap 'echo "Sending kill to $CONTAINER_NAME"; docker kill $CONTAINER_NAME &>/dev/null; exit 0' SIGINT SIGTERM
  run &
  wait $!
fi
