VERSION 0.8
# Sets up earthly connectivity for our cache tool.
# Note, the main interface to this is WITH_CACHE and you can get by reading the comment there largely

start-server:
  LOCALLY
  # TODO(AD): use secrets to decide whether to use s3 backing/storing
  RUN ./start_server.sh

setup-cache-helper:
  FROM scratch
  COPY *.sh .
  SAVE ARTIFACT ./*

SETUP_CACHE:
  FUNCTION
  # make sure server is up locally
  WAIT
    BUILD +start-server
  END
  COPY +setup-cache-helper/* /usr/src/build-system/cache-tool/

compute-content-hash:
  ARG local_directory_equivalent
  ARG rebuild_patterns
  LOCALLY
  LET content_hash_script="$(pwd)/compute-content-hash.sh"
  LET content_hash=$(cd "../../$local_directory_equivalent" && AZTEC_CACHE_REBUILD_PATTERNS="$rebuild_patterns" "$content_hash_script")
  FROM ubuntu:noble
  RUN echo "$content_hash" > .content-hash
  SAVE ARTIFACT .content-hash

# 1) starts our cache server if not up
# 2) copies necessary context
# 3) first tries our rebuild pattern and context against our cache tool to see if we can use our cache
# 4) if not, we build with $command
# 5) then we try to upload with our cache tool for next time
# note, if the cache tool is unreachable at $AZTEC_CACHE_TOOL_IP we silently fail cache-download.sh
# and silently pass cache-upload.sh meaning the command always runs
WITH_CACHE:
  FUNCTION
  ARG command
  ARG prefix
  ARG rebuild_patterns
  ARG build_artifacts
  DO +SETUP_CACHE
  COPY (+compute-content-hash/.content-hash --local_directory_equivalent="barretenberg/cpp" --rebuild_patterns=$rebuild_patterns) .
  # configure AWS access (note these can be blank if server started without s3 backing)
  RUN --secret AZTEC_CACHE_TOOL_IP \
      /usr/src/build-system/cache-tool/cache-download-direct.sh "$prefix-$(cat .content-hash).tar.gz" || \
      (eval "$command" && /usr/src/build-system/cache-tool/cache-upload-direct.sh $build_artifacts "$prefix-$(cat .content-hash)")

test:
  FROM ../../build-images/+from-registry
  RUN apt update && apt install -y npm lsof
  RUN git init
  COPY *.sh *.json *.js *.lock build-system/cache-tool/
  COPY tests/*.js build-system/cache-tool/tests/
  WORKDIR build-system/cache-tool
  RUN git config --global user.email "tech@aztecprotocol.com" && git config --global user.name "Aztec CI"
  RUN git add . && git commit -m "."
  # configure AWS access
  RUN --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY mkdir -p ~/.aws && \
      bash -c 'echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY" > ~/.aws/credentials'
  RUN npm install && npm test

test-earthly-connectivity:
  FROM ../../build-images/+from-registry
  DO +SETUP_CACHE
  RUN --secret AZTEC_CACHE_TOOL_IP \
     nc -vz $AZTEC_CACHE_TOOL_IP 8337