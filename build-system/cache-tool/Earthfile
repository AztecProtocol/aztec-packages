VERSION 0.8
# Sets up earthly connectivity for our cache tool.
# Note, the main interface to this is WITH_CACHE and you can get by reading the comment there largely

start-server:
  LOCALLY
  # TODO(AD): use secrets to decide whether to use s3 backing/storing
  RUN ./start_server.sh

setup-cache-helper:
  FROM scratch
  COPY cache-download-direct.sh cache-upload-direct.sh cache-download.sh cache-upload.sh .
  SAVE ARTIFACT ./*

SETUP_CACHE:
  FUNCTION
  # make sure server is up locally
  WAIT
    BUILD +start-server
  END
  COPY +setup-cache-helper/cache-download-direct.sh +setup-cache-helper/cache-upload-direct.sh +setup-cache-helper/cache-download.sh +setup-cache-helper/cache-upload.sh /usr/src/aztec-cache-tool/

# 1) starts our cache server if not up
# 2) copies necessary context
# 3) first tries our rebuild pattern and context against our cache tool to see if we can use our cache
# 4) if not, we build with $command
# 5) then we try to upload with our cache tool for next time
# note, if the cache tool is unreachable at $AZTEC_CACHE_TOOL_IP we silently fail cache-download.sh
# and silently pass cache-upload.sh meaning the command always runs
WITH_CACHE:
  FUNCTION
  ARG command
  ARG prefix
  ARG rebuild_patterns
  DO +SETUP_CACHE

  # configure AWS access (note these can be blank if server started without s3 backing)
  RUN --secret AZTEC_CACHE_TOOL_IP && \
      bash -c 'echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY" > ~/.aws/credentials' && \
      AZTEC_CACHE_REBUILD_PATTERNS="$rebuild_patterns" /usr/src/aztec-cache-tool/cache-download.sh $prefix || \
      ($command && AZTEC_CACHE_REBUILD_PATTERNS="$rebuild_patterns" /usr/src/aztec-cache-tool/cache-upload.sh $prefix)

test:
  FROM ../../build-images/+from-registry
  RUN apt update && apt install -y npm lsof
  RUN git init
  COPY *.sh *.json *.js *.lock build-system/cache-tool/
  COPY tests/*.js build-system/cache-tool/tests/
  WORKDIR build-system/cache-tool
  RUN git config --global user.email "tech@aztecprotocol.com" && git config --global user.name "Aztec CI"
  RUN git add . && git commit -m "."
  # configure AWS access
  RUN --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY mkdir -p ~/.aws && \
      bash -c 'echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY" > ~/.aws/credentials'
  RUN npm install && npm test

test-earthly-connectivity:
  FROM ../../build-images/+from-registry
  DO +SETUP_CACHE
  RUN --secret AZTEC_CACHE_TOOL_IP \
     nc -vz $AZTEC_CACHE_TOOL_IP 8337