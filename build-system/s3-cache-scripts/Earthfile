VERSION 0.8
# Sets up Earthly boilerplate for using our s3 cache.

setup-cache-helper:
  FROM scratch
  COPY *.sh .
  SAVE ARTIFACT ./*

SETUP_CACHE:
  FUNCTION
  COPY +setup-cache-helper/* /usr/src/build-system/s3-cache-scripts/

# needed intermediary to call out to LOCALLY and go back to normal context
compute-content-hash:
  ARG local_directory_equivalent
  ARG rebuild_patterns
  LOCALLY
  RUN [ ! -z "$rebuild_patterns" ] || (echo 'Did not pass rebuild patterns to cache command!' && exit 1)
  LET content_hash_script="$(pwd)/compute-content-hash-if-git-clean.sh"
  LET content_hash=$(cd "../../$local_directory_equivalent" && AZTEC_CACHE_REBUILD_PATTERNS="$rebuild_patterns" "$content_hash_script")
  FROM ubuntu:noble
  RUN echo "$content_hash" > .content-hash
  SAVE ARTIFACT .content-hash

WRITE_CONTENT_HASH:
  FUNCTION
  ARG rebuild_patterns
  LET local_dir=$(pwd | sed 's|^/usr/src/||')
  COPY (+compute-content-hash/.content-hash --local_directory_equivalent="$local_dir" --rebuild_patterns="$rebuild_patterns") .

# 1) starts our cache server if not up
# 2) copies necessary context
# 3) first tries our rebuild pattern and context against our cache tool to see if we can use our cache
# 4) if not, we build with $command
# 5) then we try to upload with our cache tool for next time
# note, if the cache tool is unreachable at $AZTEC_CACHE_TOOL_IP we silently fail cache-download-pattern.sh
# and silently pass cache-upload-pattern.sh meaning the command always runs
WITH_CACHE:
  FUNCTION
  ARG command
  ARG prefix
  ARG rebuild_patterns
  ARG build_artifacts
  RUN echo "--> RUN WITH CACHE $command (start)"
  DO +SETUP_CACHE
  DO +WRITE_CONTENT_HASH --rebuild_patterns="$rebuild_patterns"
  # print a clean version as the one below will be obfuscated
  # configure AWS access (note these can be blank if server started without s3 backing)
  RUN --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY --secret S3_BUILD_CACHE_UPLOAD \
      /usr/src/build-system/s3-cache-scripts/cache-download.sh "$prefix-$(cat .content-hash).tar.gz" || \
      (eval "$command" && /usr/src/build-system/s3-cache-scripts/cache-upload.sh $build_artifacts "$prefix-$(cat .content-hash)")
  RUN echo "--> RUN WITH CACHE $command (end)"
