rent image to continue.
  if [ -z "$PARENT_CONTENT_HASH" ]; then
    echo "No parent image found for $PARENT_REPO"
    exit 1
  fi
  PARENT_IMAGE_URI=$ECR_URL/$PARENT_REPO:cache-$PARENT_CONTENT_HASH
  echo "Pulling dependency $PARENT_REPO..."
  fetch_image $PARENT_IMAGE_URI
  # Tag it to look like an official release as that's what we use in Dockerfiles.
  TAG=$ECR_DEPLOY_URL/$PARENT
  retry docker tag $PARENT_IMAGE_URI $TAG
done

COMMIT_TAG_VERSION=$(extract_tag_version $REPOSITORY false)

# Pull, build and push each named stage to cache.
STAGE_CACHE_FROM=""
CACHE_FROM=""
STAGES=$(cat $DOCKERFILE | sed -n -e 's/^FROM .* AS \(.*\)/\1/p')
for STAGE in $STAGES; do
  # Get the last build of this stage to leverage layer caching.
  if [ -n "$CONTENT_HASH" ]; then
    echo "Pulling stage: $STAGE"
    STAGE_IMAGE_LAST_URI=$ECR_URL/$REPOSITORY:cache-$CONTENT_HASH-$STAGE
    if fetch_image $STAGE_IMAGE_LAST_URI; then
      STAGE_CACHE_FROM="--cache-from $STAGE_IMAGE_LAST_URI"
    fi
  fi

  echo "Building stage: $STAGE"
  STAGE_IMAGE_COMMIT_URI=$ECR_URL/$REPOSITORY:cache-$CONTENT_HASH-$STAGE
  # Build our dockerfile, add timing information
  docker build --target $STAGE $STAGE_CACHE_FROM -t $STAGE_IMAGE_COMMIT_URI -f $DOCKERFILE --build-arg COMMIT_TAG=$COMMIT_TAG_VERSION --build-arg ARG_CONTENT_HASH=$CONTENT_HASH . \
  | while read line ; do echo "$(date "+%H:%M:%S")| $line"; done

  # We don't want to have redo this stages work when building the final image. Use it as a layer cache.
  CACHE_FROM="--cache-from $STAGE_IMAGE_COMMIT_URI $CACHE_FROM"

  echo "Pushing stage: $STAGE"
  retry docker push $STAGE_IMAGE_COMMIT_URI > /dev/null 2>&1
  echo
done

# Pull previous image to use it as a layer cache if it exists.
if [ -n "$CONTENT_HASH" ]; then
  LAST_SUCCESSFUL_URI=$ECR_URL/$REPOSITORY:cache-$CONTENT_HASH
  echo "Pulling previous build of $REPOSITORY..."
  try_fetch_image $LAST_SUCCESSFUL_URI || true
  CACHE_FROM="--cache-from $LAST_SUCCESSFUL_URI $CACHE_FROM"
  echo
fi

# Build the actual image and give it a commit tag.
IMAGE_COMMIT_URI=$ECR_URL/$REPOSITORY:cache-$CONTENT_HASH
if [[ -n "$ARCH" ]]; then
  IMAGE_COMMIT_URI=$IMAGE_COMMIT_URI-$ARCH
fi
echo "Building image: $IMAGE_COMMIT_URI"
# Build our dockerfile, add timing information
docker build -t $IMAGE_COMMIT_URI -f $DOCKERFILE $CACHE_FROM --build-arg COMMIT_TAG=$COMMIT_TAG_VERSION --build-arg ARG_CONTENT_HASH=$CONTENT_HASH . \
| while read line ; do echo "$(date "+%H:%M:%S")| $line"; done
echo "Pushing image: $IMAGE_COMMIT_URI"
retry docker push $IMAGE_COMMIT_URI > /dev/null 2>&1
untag_remote_image $REPOSITORY tainted
