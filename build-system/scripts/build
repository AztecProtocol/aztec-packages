#!/bin/bash
#
# Builds a docker image and pushes it to it's repository. Leverages caches where possible.
# Cached images include previous successfully built images (including multi-stages) built on this branch.
# The images output are cache images, meaning they will eventually get purged.
# The deploy phase will tag the images such that they become permanent.
#
# usage: ./build <repository>
# example: ./build aztec-connect-cpp-x86_64-linux-clang
# output image:
#   278380418400.dkr.ecr.us-east-2.amazonaws.com/aztec-connect-cpp-x86_64-linux-clang:cache-deadbeefcafebabe1337c0d3-x86_64
#
# In more detail:
# - Init all submodules required to build this project.
# - Log into cache ECR, and ensures repository exists.
# - Validate any terraform that may exist.
# - For images built previously in pipeline, pull the image we've built.
# - Perform the build of the image itself.
# - Push the image tagged with the content hash to the cache.

[ -n "${BUILD_SYSTEM_DEBUG:-}" ] && set -x # conditionally trace
set -euo pipefail

REPOSITORY=$1
DOCKERFILE=$(query_manifest dockerfile $REPOSITORY)
PROJECT_DIR=$(query_manifest projectDir $REPOSITORY)
BUILD_DIR=$(query_manifest buildDir $REPOSITORY)

echo "Repository: $REPOSITORY"
echo "Working directory: $PWD"
echo "Dockerfile: $DOCKERFILE"
echo "Build directory: $BUILD_DIR"

# Fetch images with retries
function fetch_image() {
  echo "Pulling: $1"
  if ! retry docker pull $1 > /dev/null 2>&1; then
    echo "Image not found: $1"
    return 1
  fi
  return 0
}

# Fetch images, but don't assume this will work
function try_fetch_image() {
  echo "Pulling: $1"
  if ! docker pull $1 > /dev/null 2>&1; then
    echo "Image not found: $1"
    return 1
  fi
  return 0
}

# Login to ECR and ensure repository exists.
retry ensure_repo $REPOSITORY $ECR_REGION refresh_lifecycle

CONTENT_HASH=$(calculate_content_hash $REPOSITORY)
echo "Content hash: $CONTENT_HASH"

cd $BUILD_DIR

# If we have previously successful commit, we can early out if nothing relevant has changed since.
IMAGE_COMMIT_TAG=$(calculate_image_tag $REPOSITORY)
if check_rebuild $IMAGE_COMMIT_TAG $REPOSITORY; then
  echo "No rebuild necessary."
  exit 0
fi

echo "Initializing submodules..."
init_submodules $REPOSITORY

# Validate any terraform if it exists.
if [ -d $ROOT_PATH/$PROJECT_DIR/terraform ]; then
  echo "Checking terraform..."
  ensure_terraform
  export TF_IN_AUTOMATION=1
  pushd $ROOT_PATH/$PROJECT_DIR/terraform
  for DIR in . $(find . -maxdepth 1 -type d); do
    pushd $DIR
    if [ -f ./main.tf ]; then
      terraform init -input=false -backend-config="key=dummy"
      terraform validate
    fi
    popd
  done
  popd
fi

# For each dependency, pull in the latest image and give it correct tag.
for PARENT_REPO in $(query_manifest dependencies $REPOSITORY); do
  PARENT_IMAGE_URI=$(calculate_image_uri $PARENT_REPO)
  echo "Pulling dependency $PARENT_IMAGE_URI..."
  if ! fetch_image $PARENT_IMAGE_URI; then
    # This is a *bit* of a hack maybe. Some of our arm images can be built from x86 dependents.
    # e.g. node projects are architecture independent.
    # This may not hold true if we start introducing npm modules that are backed by native code.
    # But for now, to avoid building some projects twice, we can fallback onto x86 variant.
    PARENT_IMAGE_URI=$(calculate_image_uri $PARENT_REPO x86_64)
    echo "Falling back onto x86 build. Pulling dependency $PARENT_IMAGE_URI..."
    fetch_image $PARENT_IMAGE_URI
  fi
  # Tag it to look like an official release as that's what we use in Dockerfiles.
  TAG=$ECR_DEPLOY_URL/$PARENT_REPO
  docker tag $PARENT_IMAGE_URI $TAG
done

COMMIT_TAG_VERSION=$(extract_tag_version $REPOSITORY false)
echo "Commit tag version: $COMMIT_TAG_VERSION"

# Build the actual image and give it a commit tag.
IMAGE_COMMIT_URI=$(calculate_image_uri $REPOSITORY)
echo "Building image: $IMAGE_COMMIT_URI"
docker build -t $IMAGE_COMMIT_URI -f $DOCKERFILE --build-arg COMMIT_TAG=$COMMIT_TAG_VERSION --build-arg ARG_CONTENT_HASH=$CONTENT_HASH .
echo "Pushing image: $IMAGE_COMMIT_URI"
retry docker push $IMAGE_COMMIT_URI > /dev/null 2>&1
