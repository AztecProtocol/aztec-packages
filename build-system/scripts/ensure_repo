#!/bin/bash
# Logs the shell into the ECR instance at the given region, establishes if the given repository exists, creates it if it
# doesn't, and re-applies thie lifecycle policy (determines when images should be automatically deleted) if it does.
set -e

LIFECYCLE_POLICY='{
  "rules": [
    {
      "rulePriority": 1,
      "description": "No more than 200 cache images.",
      "selection": {
        "tagStatus": "tagged",
        "tagPrefixList": ["cache-"],
        "countType": "imageCountMoreThan",
        "countNumber": 200
      },
      "action": {
        "type": "expire"
      }
    }
  ]
}
'

REPOSITORY=$1
REGION=$2
REFRESH_LIFECYCLE=$3

aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com 2> /dev/null

# Create the repository if it doesn't exist.
if ! aws ecr describe-repositories --region $REGION --repository-names $REPOSITORY > /dev/null 2>&1; then
  echo "Creating repo: $REPOSITORY"
  aws ecr create-repository --region $REGION --repository-name $REPOSITORY > /dev/null 2>&1
  aws ecr put-lifecycle-policy --region $REGION --repository-name $REPOSITORY --lifecycle-policy-text "$LIFECYCLE_POLICY" > /dev/null 2>&1
elif [ -n "$REFRESH_LIFECYCLE" ]; then
  echo "Refreshing lifecycle rules for repo: $REPOSITORY"
  aws ecr put-lifecycle-policy --region $REGION --repository-name $REPOSITORY --lifecycle-policy-text "$LIFECYCLE_POLICY" > /dev/null 2>&1
fi
echo