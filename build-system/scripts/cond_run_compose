#!/usr/bin/env bash
# Runs a docker-compose file.
# Pulls the containers in the build manifests <project>.runDependencies property.
# Uploads any logs to S3.
# Can be used to test a built container (runDependencies would be self + dependency containers).
# Can be used to build and test a container (runDependencies would just be dependency containers).
# The trailing arguments are environment variables in the form KEY=VALUE, made available to docker-compose.

[ -n "${BUILD_SYSTEM_DEBUG:-}" ] && set -x # conditionally trace
set -eu

REPOSITORY=$1
COMPOSE_FILE=$2
shift 2

BASE_TAG=$(calculate_image_tag $REPOSITORY)
SUCCESS_TAG=$BASE_TAG-$JOB_NAME

echo "Success tag: $SUCCESS_TAG"

if ! check_rebuild $SUCCESS_TAG $REPOSITORY; then
  # Login to pull our ecr images with docker.
  ecr_login

  # For each dependency and self, pull in the latest image and give it correct tag.
  for REPO in $(query_manifest runDependencies $REPOSITORY $JOB_NAME); do
    echo "Pulling $REPO..."
    REPO_IMAGE_URI=$(calculate_image_uri $REPO)
    retry docker pull $REPO_IMAGE_URI
    docker tag $REPO_IMAGE_URI $ECR_DEPLOY_URL/$REPO
    docker tag $REPO_IMAGE_URI aztecprotocol/$REPO
  done

  cd $(query_manifest projectDir $REPOSITORY)

  export $@
  if docker compose > /dev/null 2>&1; then
    CMD="docker compose"
  else
    CMD="docker-compose"
  fi
  $CMD -f $COMPOSE_FILE up --exit-code-from $REPOSITORY --force-recreate

  upload_logs_to_s3 log

  retry tag_remote_image $REPOSITORY $BASE_TAG $SUCCESS_TAG
fi
