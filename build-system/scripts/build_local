#!/bin/bash
# Builds the PROJECTS in the given order.
# Will terminate build at TARGET_PROJECT (if given).
# Will only build TARGET_PROJECT if ONLY_TARGET given.
# PROJECT elements have structure PROJECT_DIR_NAME:WORKING_DIR:DOCKERFILE:REPO.
# If DOCKERFILE is excluded it tries to default to ./Dockerfile then ./<PROJECT_DIR_NAME>/Dockerfile
# If REPO is excluded it defaults to PROJECT_DIR_NAME.

[ -n "${BUILD_SYSTEM_DEBUG:-}" ] && set -x # conditionally trace
set -eu

TARGET_PROJECT=${1:-}
ONLY_TARGET=${ONLY_TARGET:-}
MANIFEST="build_manifest.yml"

if [ -n "${NO_CACHE:-}" ]; then
  ADDITIONAL_ARGS="${ADDITIONAL_ARGS:-} --no-cache"
fi

# If given a name, check it exists.
if [ -n "$TARGET_PROJECT" ]; then
  if [ $(yq "has(\"$TARGET_PROJECT\")" $MANIFEST) == "false" ]; then
    echo "Unknown project $TARGET_PROJECT, check $MANIFEST";
    exit 1
  fi
fi

# Build list of projects to build.
if [ -n "$ONLY_TARGET" ]; then
  DEPS=("$TARGET_PROJECT")
else
  DEPS=($(query_manifest allDependencies $TARGET_PROJECT))
fi
declare -a PROJECTS
for DEP in ${DEPS[@]}; do
  BUILD_DIR=$(query_manifest buildDir $DEP)
  DOCKERFILE=$(query_manifest dockerfile $DEP)
  PROJECTS+=("$DEP:$BUILD_DIR:$DOCKERFILE")
done

for E in "${PROJECTS[@]}"; do
  ARR=(${E//:/ })
  PROJECT_DIR_NAME=${ARR[0]}
  WORKING_DIR=${ARR[1]}
  DOCKERFILE=${ARR[2]:-Dockerfile}
  REPO=${ARR[3]:-$PROJECT_DIR_NAME}
  LAUNCH=${ARR[4]:-}

  if [ "$ONLY_TARGET" == "true" -a ! "$PROJECT_DIR_NAME" = "$TARGET_PROJECT" ]; then
    continue
  fi

  pushd $WORKING_DIR > /dev/null

  if [ ! -f "$DOCKERFILE" ]; then
    DOCKERFILE=./Dockerfile
    if [ ! -f "$DOCKERFILE" ]; then
      DOCKERFILE=./$PROJECT_DIR_NAME/Dockerfile
      if [ ! -f "$DOCKERFILE" ]; then
        echo "Dockerfile not found."
        exit 1
      fi
    fi
  fi

  # TODO: Move everything to aztecprotocol/*
  DEPLOY_IMAGE_URI=$ECR_DEPLOY_URL/$REPO:latest
  CACHE_IMAGE_URI=$(calculate_image_uri $REPO)
  ARR=(${CACHE_IMAGE_URI//:/ })
  REPO_URI=${ARR[0]}
  TAG=${ARR[1]}

  GREEN="\033[32m"
  BLUE="\033[94m"
  YELLOW="\033[93m"
  BOLD="\033[1m"
  RESET="\033[0m"

  echo
  echo
  echo
  echo -e "${BOLD}Repository${RESET}: ${BOLD}${BLUE}$REPO${RESET}"
  echo -e "${BOLD}Cache Image URI${RESET}: $REPO_URI:$TAG"
  echo -e "${BOLD}Deploy Image URI${RESET}: $DEPLOY_IMAGE_URI"
  echo -e "${BOLD}Dockerfile${RESET}: $DOCKERFILE"
  echo -e "${BOLD}Context${RESET}: $PWD"
  echo

  GREP_PATTERN=$(query_manifest rebuildPatterns $REPO | tr '\n' '|')
  # Remove the trailing '|'.
  GREP_PATTERN=${GREP_PATTERN%|}

  # Ensure index is updated before we call git diff-index.
  git status > /dev/null

  if (git diff-index --name-only HEAD; git ls-files --others --exclude-standard) | grep -qE "$GREP_PATTERN"; then
    echo -e "${YELLOW}Project or dependency has local modifications! Building...${RESET}"
    docker build ${ADDITIONAL_ARGS:-} --build-arg ARG_COMMIT_HASH=$COMMIT_HASH -f $DOCKERFILE -t $DEPLOY_IMAGE_URI .
  else
    if docker image ls --format "{{.Repository}}:{{.Tag}}" | grep -q -w $CACHE_IMAGE_URI; then
      echo -e "${GREEN}Image exists locally. Tagging as $DEPLOY_IMAGE_URI${RESET}"
      docker tag $CACHE_IMAGE_URI $DEPLOY_IMAGE_URI
    else
      if ecr_login && image_exists $REPO_URI $TAG ; then
        docker pull $CACHE_IMAGE_URI
      else
        docker build ${ADDITIONAL_ARGS:-} --build-arg ARG_COMMIT_HASH=$COMMIT_HASH -f $DOCKERFILE -t $CACHE_IMAGE_URI .
        docker tag $CACHE_IMAGE_URI $DEPLOY_IMAGE_URI
      fi
    fi
  fi

  # Retag for aztecprotocol dockerhub.
  docker tag $DEPLOY_IMAGE_URI aztecprotocol/$REPO:latest

  if [ "$PROJECT_DIR_NAME" = "$TARGET_PROJECT" ]; then
    if [ -n "$LAUNCH" ]; then
      docker run -ti --rm aztecprotocol/$REPO:latest
    fi

    break
  fi

  popd > /dev/null
done
