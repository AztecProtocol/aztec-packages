#!/bin/bash
set -eu
CMD=$1
REPO=$2

ROOT_PATH=${ROOT_PATH:-$PWD}
MANIFEST=$ROOT_PATH/build_manifest.json

if [ $(jq "has(\"$REPO\")" $MANIFEST) == "false" ]; then
  echo "Unknown repository $REPO in build_mainifest.json"
  exit 1
fi

function addRebuildPatterns {
    local TYPE=$(jq -r ".\"$1\".rebuildPatterns | type" $MANIFEST)
    if [ "$TYPE" == "string" ]; then
      local FILE=$(jq -r ".\"$1\".rebuildPatterns" $MANIFEST)
      local BUILD_DIR=$($0 buildDir $1)
      PATTERNS=(${PATTERNS[@]} $(cat $BUILD_DIR/$FILE))
    elif [ "$TYPE" == "array" ]; then
      PATTERNS=(${PATTERNS[@]} $(jq -r ".\"$1\".rebuildPatterns | .[]" $MANIFEST))
    else
      >&2 echo "Missing rebuildPatterns property. Either filename as string, or patterns as array."
      exit 1
    fi
}

case "$CMD" in
  dockerfile)
    # In the manifest, the path is relative to buildDir. Return absolute path.
    BUILD_DIR=$($0 buildDir $REPO)
    DOCKERFILE=$(jq -r ".\"$REPO\".dockerfile // \"Dockerfile\"" $MANIFEST)
    echo $BUILD_DIR/$DOCKERFILE
    ;;
  buildDir)
    # In the manifest, the path is relative to the repo root. Return absolute path.
    BUILD_DIR=$(jq -r ".\"$REPO\".buildDir" $MANIFEST)
    echo $ROOT_PATH/$BUILD_DIR
    ;;
  projectDir)
    # In the manifest, the path is relative to the repo root. Return absolute path.
    PROJECT_DIR=$(jq -r ".\"$REPO\".projectDir // .\"$REPO\".buildDir" $MANIFEST)
    echo $ROOT_PATH/$PROJECT_DIR
    ;;
  relativeProjectDir)
    jq -r ".\"$REPO\".projectDir // .\"$REPO\".buildDir" $MANIFEST
    ;;
  dependencies)
    declare -A ALL_DEPS
    add_deps() {
      if [[ -v ALL_DEPS[$1] ]]; then
        return
      fi
      ALL_DEPS["$1"]=1
      DEPS=($(jq -r ".\"$1\".dependencies // [] | .[]" $MANIFEST))
      for DEP in "${DEPS[@]}"; do
        add_deps $DEP
      done
    }
    add_deps $REPO
    for KEY in "${!ALL_DEPS[@]}"; do
      echo $KEY
    done | sort
    ;;
  rebuildPatterns)
    DEPS=($($0 dependencies $REPO))
    PATTERNS=()
    addRebuildPatterns $REPO
    for DEP in "${DEPS[@]}"; do
      addRebuildPatterns $DEP
    done
    printf "%s\n" "${PATTERNS[@]}" | sort | uniq
    ;;
  submodulePath)
    DIR=$($0 buildDir $REPO)
    # The build dir maybe deep in the submodule. In which case we can't cd to it.
    # Move up the path till we succeed.
    while [ ! -d $DIR ]; do
      DIR=$(dirname $DIR)
    done
    if [ "$(git ls-tree HEAD $DIR | awk '{print $2}')" = "commit" ]; then
      git ls-tree HEAD $DIR | awk '{print $4}'
    fi
esac
