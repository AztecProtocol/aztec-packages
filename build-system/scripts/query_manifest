#!/usr/bin/env bash
[ -n "${BUILD_SYSTEM_DEBUG:-}" ] && set -x # conditionally trace
set -eu
CMD=$1
REPO=$2

ROOT_PATH=${ROOT_PATH:-$(git rev-parse --show-toplevel)}
MANIFEST=$ROOT_PATH/build_manifest.yml

if [ $(yq "has(\"$REPO\")" $MANIFEST) == "false" ]; then
  echo "Unknown repository $REPO in $MANIFEST"
  exit 1
fi

function get_deps {
  local TYPE=$(yq -r ".\"$1\".dependencies | type" $MANIFEST)
  if [ "$TYPE" == "!!str" ]; then
    # Execute string as command relative to buildDir to retrieve dependencies.
    local BUILD_DIR=$($0 buildDir $1)
    local CMD=$BUILD_DIR/$(yq -r ".\"$1\".dependencies")
    if [ ! -f "$CMD" ]; then
      >&2 echo "Dependency script not found: $CMD"
      exit 1
    fi
    local PROJECT_DIR=$($0 projectDir $1)
    DEPS=($($CMD $PROJECT_DIR))
  elif [ "$TYPE" == "!!null" ]; then
    DEPS=()
  elif [ "$TYPE" == "!!seq" ]; then
    DEPS=($(yq -r ".\"$1\".dependencies // [] | .[]" $MANIFEST))
  else
    >&2 echo "Build manifest 'dependencies' must be array, string, or null (got $TYPE)."
    exit 1
  fi
}

function add_rebuild_patterns {
  local TYPE=$(yq -r ".\"$1\".rebuildPatterns | type" $MANIFEST)
  if [ "$TYPE" == "!!str" ]; then
    local FILE=$(yq -r ".\"$1\".rebuildPatterns" $MANIFEST)
    local PROJECT_DIR=$($0 projectDir $1)
    PATTERNS=(${PATTERNS[@]} $(cat $PROJECT_DIR/$FILE))
  elif [ "$TYPE" == "!!seq" ]; then
    PATTERNS=(${PATTERNS[@]} $(yq -r ".\"$1\".rebuildPatterns | .[]" $MANIFEST))
  elif [ "$TYPE" == "!!null" ]; then
    local PROJECT_DIR=$($0 relativeProjectDir $1)
    PATTERNS=(${PATTERNS[@]} "^$PROJECT_DIR/")
  else
    >&2 echo "Build manifest 'rebuildPatterns' must be array, string, or null (got $TYPE)."
    exit 1
  fi
}

case "$CMD" in
  dockerfile)
    # In the manifest, the path is relative to projectDir. Return absolute path.
    PROJECT_DIR=$($0 projectDir $REPO)
    DOCKERFILE=$(yq -r ".\"$REPO\".dockerfile // \"Dockerfile\"" $MANIFEST)
    echo $PROJECT_DIR/$DOCKERFILE
    ;;
  buildDir)
    # In the manifest, the path is relative to the repo root. Return absolute path.
    BUILD_DIR=$(yq -r ".\"$REPO\".buildDir" $MANIFEST)
    echo $ROOT_PATH/$BUILD_DIR
    ;;
  projectDir)
    # In the manifest, the path is relative to the repo root. Return absolute path.
    PROJECT_DIR=$(yq -r ".\"$REPO\".projectDir // .\"$REPO\".buildDir" $MANIFEST)
    echo $ROOT_PATH/$PROJECT_DIR
    ;;
  relativeProjectDir)
    # Return the relative path as it is in the manifest.
    yq -r ".\"$REPO\".projectDir // .\"$REPO\".buildDir" $MANIFEST
    ;;
  dependencies)
    # Build dependencies.
    yq -r ".\"$REPO\".dependencies // [] | .[]" $MANIFEST
    ;;
  runDependencies)
    echo $REPO
    yq -r ".\"$REPO\".runDependencies // [] | .[]" $MANIFEST
    RUN_NAME=${3:-}
    [ -n "$RUN_NAME" ] && yq -r ".\"$REPO\".run.\"$RUN_NAME\".dependencies // [] | .[]" $MANIFEST
    ;;
  allDependencies)
    # Get dependencies for a given repo. Inclusive of repo itself.
    # If a string, attempt to execute <projectDir>/<string> if exists to get dependencies, else error.
    # If an array, the array lists the dependencies (excluding self).
    # Recursively descend "unvisited" dependencies to collect all dependencies.
    declare -A VISITED
    declare -a ALL_DEPS
    add_deps() {
      if [[ -v VISITED[$1] ]]; then
        return
      fi
      VISITED["$1"]=1
      get_deps $1
      for DEP in "${DEPS[@]}"; do
        add_deps $DEP
      done
      ALL_DEPS+=("$1")
    }
    add_deps $REPO
    for DEP in "${ALL_DEPS[@]}"; do
      echo $DEP
    done
    ;;
  rebuildPatterns)
    # Get rebuild patterns for a given repo (the file patterns that if changed result in rebuilds).
    # If no rebuild patterns are given, the result is ["^<projectDir>/"].
    # If a projects rebuildPattern is a string, the rebuild patterns are in <projectDir>/<string>.
    # If an array, the array lists the rebuild patterns.
    DEPS=($($0 allDependencies $REPO))
    PATTERNS=()
    for DEP in "${DEPS[@]}"; do
      add_rebuild_patterns $DEP
    done
    printf "%s\n" "${PATTERNS[@]}" | sort | uniq
    ;;
  submodulePath)
    DIR=$($0 buildDir $REPO)
    # The build dir maybe deep in the submodule. In which case we can't cd to it.
    # Move up the path till we succeed.
    while [ ! -d $DIR ]; do
      DIR=$(dirname $DIR)
    done
    if [ "$(git ls-tree HEAD $DIR | awk '{print $2}')" = "commit" ]; then
      git ls-tree HEAD $DIR | awk '{print $4}'
    fi
    ;;
  multiarch)
    yq -r ".\"$REPO\".multiarch // false" $MANIFEST
esac
