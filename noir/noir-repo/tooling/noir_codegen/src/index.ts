import { AbiType } from '@noir-lang/noirc_abi';
import { CompiledCircuit } from '@noir-lang/types';
import { PrimitiveTypesUsed, generateTsInterface, codegenStructDefinitions } from './noir_types.js';
import { TypingsGenerator } from './utils/typings_generator.js';

// TODO: reenable this. See `abiTypeToTs` for reasoning.
// export type FixedLengthArray<T, L extends number> = L extends 0 ? never[]: T[] & { length: L };

const codegenPrelude = `/* Autogenerated file, do not edit! */

/* eslint-disable */

import { Noir, InputMap, CompiledCircuit, ForeignCallHandler } from "@noir-lang/noir_js"

export { ForeignCallHandler } from "@noir-lang/noir_js"
`;

const codegenFunction = (
  name: string,
  compiled_program: CompiledCircuit,
  function_signature: { inputs: [string, string][]; returnValue: string | null },
  embedArtifact: boolean,
) => {
  const args = function_signature.inputs.map(([name]) => `${name}`).join(', ');
  const args_with_types = function_signature.inputs.map(([name, type]) => `${name}: ${type}`).join(', ');

  const artifact = embedArtifact
    ? `export const ${name}_circuit: CompiledCircuit = ${JSON.stringify(compiled_program)};`
    : '';

  return `${artifact}

export async function ${name}(${args_with_types}${embedArtifact ? '' : `, ${name}_circuit: CompiledCircuit`}, foreignCallHandler?: ForeignCallHandler): Promise<${function_signature.returnValue}> {
  const program = new Noir(${name}_circuit);
  const args: InputMap = { ${args} };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as ${function_signature.returnValue};
}
`;
};

export const codegen = (
  programs: [string, CompiledCircuit][],
  embedArtifact: boolean,
  useFixedLengthArrays: boolean,
): string => {
  return new TypingsGenerator(
    programs.map((program) => ({
      circuitName: program[0],
      artifact: embedArtifact ? program[1] : undefined,
      abi: program[1].abi,
    })),
    useFixedLengthArrays,
  ).codegen();
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function stripUnwantedFields(value: any): CompiledCircuit {
  const { abi, bytecode } = value;
  return { abi, bytecode };
}
