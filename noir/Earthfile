VERSION 0.8

nargo-src:

    FROM ../build-images/+build
    WORKDIR /usr/src
    # Relevant source (TODO finer-grained 'tooling')
    COPY --dir \
      noir-repo/acvm-repo \
      noir-repo/aztec_macros \
      noir-repo/compiler \
      noir-repo/noir_stdlib \
      noir-repo/tooling \
      noir-repo/test_programs \
      noir-repo/utils \
      noir-repo/Cargo.lock \
      noir-repo/Cargo.toml \
      noir-repo/.github \
      noir-repo

    # NOTE: we use a fake commit hash here
    # we don't want Noir to rebuild everytime the parent repo changes
    # just only when it changes
    # the commit hash gets injected into version strings
    ENV COMMIT_HASH=$(find . -type f -exec sha256sum {} ';' | sort | sha256sum | awk '{print $1}')
    RUN echo $COMMIT_HASH > .content-hash

    # # borrow Nix's approach to build everything in 1970
    ENV SOURCE_TIMESTAMP=1
    ENV SOURCE_DATE_EPOCH=1

nargo:
    FROM +nargo-src
    RUN ./noir-repo/.github/scripts/wasm-bindgen-install.sh
    COPY ./scripts/bootstrap_native.sh ./scripts/bootstrap_native.sh
    RUN ./scripts/bootstrap_native.sh
    SAVE ARTIFACT /usr/src/noir-repo/target/release/nargo nargo
    SAVE ARTIFACT /usr/src/noir-repo/target/release/acvm acvm
    SAVE IMAGE aztecprotocol/nargo

test:
  FROM +nargo
  COPY ./scripts/test_native.sh ./scripts/test_native.sh
  COPY noir-repo/.rustfmt.toml noir-repo/.rustfmt.toml
  RUN ./scripts/test_native.sh

format:
  FROM +nargo
  ENV PATH=$PATH:/usr/src/noir-repo/target/release

  COPY ./noir-repo/test_programs ./noir-repo/test_programs
  COPY ./noir-repo/noir_stdlib ./noir-repo/noir_stdlib

  WORKDIR ./noir-repo/test_programs
  RUN ./format.sh check

  WORKDIR ../noir_stdlib
  RUN nargo fmt --check

packages-deps:
    BUILD ../barretenberg/ts/+build # prefetch

    LOCALLY
    LET packages = $(git ls-files "**/package*.json" package*.json)
    LET tsconfigs = $(git ls-files "**/tsconfig*.json" tsconfig*.json)

    FROM +nargo-src

    COPY ../barretenberg/ts/+build/build /usr/src/barretenberg/ts

    WORKDIR /usr/src/noir

    COPY --dir \
      ./noir-repo/package.json \
      ./noir-repo/yarn.lock \
      ./noir-repo/.yarnrc.yml \
      ./noir-repo/.yarn \
      ./noir-repo

    FOR file IN $packages
        COPY $file $file
    END

    RUN cd noir-repo && yarn install --immutable && cd ../

    FOR file IN $tsconfigs
      COPY $file $file
    END

    # Relevant source (TODO finer-grained)
    COPY --dir \
      noir-repo/acvm-repo \
      noir-repo/aztec_macros \
      noir-repo/compiler \
      noir-repo/docs \
      noir-repo/noir_stdlib \
      noir-repo/scripts \
      noir-repo/test_programs \
      noir-repo/tooling \
      noir-repo/utils \
      noir-repo/Cargo.lock \
      noir-repo/.yarnrc.yml \
      noir-repo/.yarn \
      noir-repo/yarn.lock \
      noir-repo/package.json \
      noir-repo/LICENSE* \
      noir-repo/*.toml \
      noir-repo/*.json \
      noir-repo/*.js \
      noir-repo/.github \
      noir-repo

packages:
    FROM +packages-deps

    COPY ./scripts/bootstrap_packages.sh ./scripts/bootstrap_packages.sh
    RUN ./scripts/bootstrap_packages.sh
    SAVE ARTIFACT packages
    SAVE IMAGE --cache-hint

packages-test-build:
    FROM +packages-deps

    COPY +nargo/nargo /usr/src/noir/noir-repo/target/release/nargo
    COPY +nargo/acvm /usr/src/noir/noir-repo/target/release/acvm

    ENV NARGO_BACKEND_PATH=/usr/src/barretenberg/ts/dest/node/main.js
    ENV PATH=$PATH:/usr/src/noir/noir-repo/target/release

    WORKDIR /usr/src/barretenberg/ts
    RUN yarn --immutable

    WORKDIR /usr/src/noir/noir-repo
    COPY --dir noir-repo/.github/scripts/wasm-bindgen-install.sh ./.github/scripts/wasm-bindgen-install.sh
    RUN ./.github/scripts/wasm-bindgen-install.sh

    ENV SOURCE_DATE_EPOCH=$(date +%s)
    ENV GIT_DIRTY=false
    ENV GIT_COMMIT=$COMMIT_HASH
    RUN yarn build
    # this builds text fixtures to be used in tests
    RUN yarn workspace @noir-lang/noir_wasm run test:build_fixtures

    SAVE ARTIFACT /usr/src /usr/src

packages-test-node:
    FROM +packages-test-build
    ENV NODE_OPTIONS=--max_old_space_size=8192
    WORKDIR /usr/src/noir/noir-repo
    RUN yarn workspaces foreach \
      --parallel \
      --verbose \
      --exclude @noir-lang/root \ # foreach includes the root workspace, ignore it
      --exclude @noir-lang/noir_js \ # noir_js OOMs
      --exclude integration-tests \ # separate node and browser tests
      --exclude @noir-lang/noir_wasm \
      run test
    RUN yarn workspaces foreach \
      --parallel \
      --verbose \
      --include integration-tests \
      --include @noir-lang/noir_wasm \
      run test:node

packages-test-browser:
    FROM node:18
    COPY --dir +packages-test-build/usr/src /usr
    WORKDIR /usr/src/noir/noir-repo
    RUN ./.github/scripts/playwright-install.sh
    RUN yarn workspaces foreach \
      --verbose \
      --include integration-tests \
      --include @noir-lang/noir_wasm \
      run test:browser

packages-test:
    BUILD +packages-test-node
    BUILD +packages-test-browser

run:
    # When running the container, mount the users home directory to same location.
    FROM ubuntu:noble
    # Install Tini as nargo doesn't handle signals properly.
    # Install git as nargo needs it to clone.
    RUN apt-get update && apt-get install -y git tini && rm -rf /var/lib/apt/lists/* && apt-get clean
    COPY +build/. /usr/src
    ENTRYPOINT ["/usr/bin/tini", "--", "/usr/src/nargo"]

build:
  BUILD +nargo
  BUILD +packages

# TOOD
# test-packages
# FROM aztecprotocol/noir AS noir

# FROM node:20 AS builder
# COPY --from=noir /usr/src/noir/noir-repo/target/release /usr/src/noir/noir-repo/target/release
# ENV PATH=${PATH}:/usr/src/noir/noir-repo/target/release
# RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
# RUN echo 'source $HOME/.cargo/env' >> $HOME/.bashrc
# ENV PATH=/root/.cargo/bin:${PATH}
# RUN apt update && apt install -y jq libc++1
# ARG COMMIT_HASH
# ENV COMMIT_HASH=${COMMIT_HASH}

# WORKDIR /usr/src/noir
# COPY . .
# RUN ./scripts/test_js_packages.sh

# # Don't waste time pushing a huge container back to ECR as nothing needs the output.
# FROM scratch
# COPY --from=builder /usr/src/noir/README.md /usr/src/noir/README.md

# TODO
# test:
# FROM rust:bullseye
# ARG COMMIT_HASH
# ENV COMMIT_HASH=${COMMIT_HASH}
# RUN apt update && apt install -y libc++1
# WORKDIR /usr/src/noir
# COPY . .
# RUN ./scripts/test_native.sh

# # Don't waste time pushing a huge container back to ECR as nothing needs the output.
# FROM scratch
# COPY --from=0 /usr/src/noir/README.md /usr/src/noir/README.md
