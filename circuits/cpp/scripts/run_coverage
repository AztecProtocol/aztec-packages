#!bin/bash
set -eu

# To be called LOCALLY for testing WITHOUT docker.
#
# Contains core logic for collecting test coverage in the current environment.
#
# Run from circuits/cpp/
# Example:
# ./scripts/run_coverage glob
#
# Running with the CLEAN environment variable set will delete the build-coverage folder and start again.
# Running with the CLEAR_COV environment variable set will clear existing vscode coverage data (lcov.info).
#
# This will create two outputs: lcov.info and an html coverage report in build-coverage/coverage_report
#
# Note: Assumes ignition SRS transcripts have already been downloaded

# TESTS:
# 1. names of test executables to run
#   - (like "aztec3_circuits_kernel_tests aztec3_circuits_abis_tests")
# 2. or "glob" (LOWERCASE) to run all built tests
# 3. or a file containing a list of test
TESTS=$1

# Set coverage build directory
BUILD_DIR="build-coverage"

# If the clean file is set, wipe all existing coverage data
if [ -n "${CLEAN:-}" ]; then
  echo "The CLEAN environment variable is set. Clearing existing coverage data."
  rm -rf ./$BUILD_DIR || true
fi

# Perform coverage build
echo "Setting cmake to run with preset coverage"
cmake -DUSE_TURBO=true --preset=coverage .

# if TESTS is GLOB or empty, run all built tests
# if TESTS is a file, assume it contains a list of tests to run
# otherwise assume TESTS itself is a list of tests to run
if [ "$TESTS" = "glob" ] || [ -z "$TESTS" ]; then
  echo "    No test file specified. Building all test files."
  TESTS=$(cat ./scripts/a3-tests)
elif [ -f "$TESTS" ]; then
  TESTS=$(cat $TESTS | tr '\n' ' ')
fi

# if just the CLEAR_COV env var is set then we will clear existing coveage report information
if [ -n "${CLEAR_COV:-}" ]; then
  echo "The CLEAR_COV environment variable is set. Clearing existing coverage data."
  rm ./$BUILD_DIR/lcov.info || true
  rm ./$BUILD_DIR/merged_profdata/default.profdata || true
  rm ./$BUILD_DIR/default.profraw || true
  rm -rf ./$BUILD_DIR/bin/profdata || true
fi

for BIN in $TESTS; do
  echo "*** Building $BIN ***"
  cmake --build --preset coverage --target $BIN
done

echo "Testing $BIN"
echo "*** Collecting Profiling Information ***"
ctest --test-dir $BUILD_DIR || true # Ctest will fail here if there are unbuilt tests, but we would like to continue to generate reports
echo "Completed profiling"

echo "*** Generating Coverage Reports ***"
cmake --build --preset coverage --target create_full_coverage_report

echo "*** Generating VScode line coverage data ***"
for BIN in $TESTS; do
  echo "Generating line coverage data for $BIN"
  llvm-cov-15 export ./$BUILD_DIR/bin/$BIN  --format=lcov -instr-profile="./$BUILD_DIR/merged_profdata/default.profdata" > $BUILD_DIR/lcov.info
done

