#!/usr/bin/env bash
[ -n "${BUILD_SYSTEM_DEBUG:-}" ] && set -x # conditionally trace
set -eu

DIR="$(dirname "$0")"

# To be called LOCALLY for testing WITHOUT docker.
# Also serves as a core/helper script called by
# `run_tests` and `build_run_tests_docker_local`
# when testing WITH docker.
#
# Contains core logic for running tests in the current environment.
#
# Run from circuits/cpp/
# Example:
# ./scripts/run_tests_local x86_64 glob -*.circuit*
#
# Note: Assumes ignition SRS transcripts have already been downloaded

###############################################################################
# ARGS
###############################################################################
# ARCH: x86_64 or wasm (MUST BE LOWERCASE)
ARCH=$1
# TESTS:
# 1. names of test executables to run
#   - (like "aztec3_circuits_kernel_tests aztec3_circuits_abis_tests")
# 2. or "glob" (LOWERCASE) to run all built tests
# 3. or a file containing a list of test
TESTS=$2
# GTEST_FILTER: optional pattern like "*native*" to filter gtests
GTEST_FILTER=${3:-}

# Shift away the args
shift
shift
if [ -n "$GTEST_FILTER" ]; then
  shift
fi
# END ARGS
###############################################################################

if [ "$ARCH" != "wasm" ]; then
  # x86_64 / anything other than wasm
  BUILD_DIR=$DIR/../build
else
  BUILD_DIR=$DIR/../build-wasm
fi

# if TESTS is GLOB or empty, run all built tests
# if TESTS is a file, assume it contains a list of tests to run
# otherwise assume TESTS itself is a list of tests to run
if [ "$TESTS" == "glob" ] || [ -z "$TESTS" ]; then
  echo "    No test file specified. Globbing $BUILD_DIR/bin for tests."
  TESTS=$(cd $BUILD_DIR/bin && find -type f -executable | grep "test" | tr '\n' ' ')
elif [ -f "$TESTS" ]; then
  TESTS=$(cat $TESTS | tr '\n' ' ')
fi

echo "*** Running $ARCH tests${GTEST_FILTER:+ (with filter: $GTEST_FILTER)}: $TESTS ***"

cd $BUILD_DIR;
for BIN in $TESTS; do
  echo "Running tests from executable '$BIN'"
  if [ "$ARCH" != "wasm" ]; then
    # run test executables directly
    # if gtest filter is non-empty, use it
    # gtest filter is a command line arg to native executable
    ./bin/$BIN ${GTEST_FILTER:+--gtest_filter=$GTEST_FILTER} $@
  else
    # run test executables via wasmtime
    # if gtest filter is non-empty, use it
    # gtest filter is an env var to wasmtime
    wasmtime --dir .. ./bin/$BIN --env ${GTEST_FILTER:+--env GTEST_FILTER=$GTEST_FILTER} --env GTEST_COLOR=1
  fi
done
