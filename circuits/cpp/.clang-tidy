# Note there is some overlap between this file and .clangd
# .clangd has no concept of warnings versus errors, but since it
# won't actually fail/error (since its really just an LSP for
# showing issues in an editor), it is acceptable to treat most
# .clang-tidy warnings as .clangd errors. Also, some error codes
# with buggy-autofixes need to be omitted from checks in .clang-tidy
# but can be included in .clangd since it won't change code without
# a user action.
#
# .clang-tidy on the other hand will error in CI for any check that
# is flagged (not explicitly omitted after '*') in WarningsAsErrors.
# So, it needs to omit certain checks or keep them as warnings only
# if they are too strict.

# TODO(AD): Picking a limited subset for now, pending a deeper dive into the performance issues. See #1152.
Checks: '
    clang-analyzer-apiModeling.Errno
    clang-analyzer-apiModeling.StdCLibraryFunctions
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.TrustReturnsNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.StringChecker
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    cppcoreguidelines-avoid-c-arrays
    cppcoreguidelines-avoid-goto
    cppcoreguidelines-explicit-virtual-functions
    cppcoreguidelines-init-variables
    cppcoreguidelines-interfaces-global-init
    cppcoreguidelines-macro-usage
    cppcoreguidelines-narrowing-conversions
    cppcoreguidelines-prefer-member-initializer
    cppcoreguidelines-pro-type-const-cast
    cppcoreguidelines-pro-type-static-cast-downcast
    cppcoreguidelines-pro-type-union-access
    cppcoreguidelines-pro-type-vararg
    cppcoreguidelines-slicing
    cppcoreguidelines-virtual-class-destructor
    performance-faster-string-find
    performance-for-range-copy
    performance-implicit-conversion-in-loop
    performance-inefficient-algorithm
    performance-inefficient-string-concatenation
    performance-inefficient-vector-operation
    performance-move-const-arg
    performance-move-constructor-init
    performance-no-automatic-move
    performance-no-int-to-ptr
    performance-noexcept-move-constructor
    performance-trivially-destructible
    performance-type-promotion-in-math-fn
    performance-unnecessary-copy-initialization
    portability-restrict-system-includes
    portability-simd-intrinsics
    portability-std-allocator-const
    -bugprone-unchecked-optional-access
    -bugprone-unhandled-self-assignment
    -clang-analyzer-core.UndefinedBinaryOperatorResult
    -clang-analyzer-cplusplus.NewDeleteLeaks
    -clang-analyzer-optin.performance.Padding
    -cert-err58-cpp
    -cert-oop54-cpp
    -cppcoreguidelines-avoid-non-const-global-variables
    -cppcoreguidelines-avoid-magic-numbers
    -cppcoreguidelines-c-copy-assignment-signature
    -cppcoreguidelines-no-malloc
    -cppcoreguidelines-owning-memory
    -cppcoreguidelines-pro-type-cstyle-cast
    -cppcoreguidelines-pro-type-reinterpret-cast
    -cppcoreguidelines-special-member-functions
    -google-build-using-namespace
    -google-global-names-in-headers
    -google-readability-casting
    -misc-definitions-in-headers
    -misc-no-recursion
    -misc-unconventional-assign-operator
    -modernize-return-braced-init-list
    -performance-unnecessary-value-param
    -readability-function-cognitive-complexity
    -readability-magic-numbers
'

# We treat all warnings as errors.
WarningsAsErrors: '*'

# Notes on specific Checks and WarningsAsErrors
#
# These checks rename our cbinds and consts that have `__` in the name:
#    -bugprone-reserved-identifier,
#    -cert-dcl37-c,
#    -cert-dcl51-cpp,
# `any_of/all_of` loops are not objectively more readable:
#    -readability-use-anyofallof,
# Will need to refactor our usage of `malloc/free` with `gsl::owner`:
#    -cppcoreguidelines-owning-memory,
# Flags way too many functions:
#    -bugprone-easily-swappable-parameters,
# We use anon namespaces to import types:
#    -google-build-namespaces,
#    -cert-dcl59-cpp,
# Not sure we want to use trailing return type:
#    -modernize-use-trailing-return-type,
# Buggy in clang-tidy 15.0.6:
#    -modernize-use-nodiscard,
#    ^ TODO(david): re-enable if we move to newer clang version
# We use c-arrays in low-level code logic relating to c_bind:
#    -modernize-avoid-c-arrays,
# This was changing code in ways that made it harder to follow:
#    -modernize-pass-by-value,
#    ^ TODO(david) we probably want to re-enable this one
# We like (a == true) in circuits:
#    -readability-simplify-boolean-expr,
# We have a lot of one-letter variable names...:
#    -readability-identifier-length,
# All of our tests use underscores in names:
#    -google-readability-avoid-underscore-in-googletest-name,
# All of our circuit structs have non-private members:
#    -misc-non-private-member-variables-in-classes,
#    -cppcoreguidelines-non-private-member-variables-in-classes,
# We have many `for` loops that violate this part of the bounds safety profile
#    -cppcoreguidelines-pro-bounds-constant-array-index,
# Many hits potential for false positives:
#    -cppcoreguidelines-pro-type-member-init,
# Triggers on some tests that are not complex. We should re-enable this for tests:
#    -readability-function-cognitive-complexity,
# Triggers for globals in tests and TEST macros
#     -cert-err58-cpp,
# Useful but check is buggy in clang-tidy 15.0.6:
#    -misc-const-correctness,
#    ^ TODO(david): re-evaluate whether this one should be included here
#                   its auto-fixes are buggy
#                   if disabled, re-enable if fixed in newer clang version
#
# We should be able to fix:
#    -google-build-using-namespace, # using whole::namespace; is bad
#    -google-readability-todo,  # the auto-fix for this inputs current user's name for all
#    -cppcoreguidelines-avoid-magic-numbers, # we shouldn't use magic numbers!
#    -readability-magic-numbers,

HeaderFilterRegex: 'src/aztec3/'
FormatStyle: file
