# This file uses YAML anchors and aliases to prevent repetition of blocks of config:
# https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/
#
# Two primary anchors are checkout and setup_env, called as the first step of almost all jobs:
# - checkout: A custom checkout step to reduce the amount of data downloaded to improve speed.
# - setup_env: Sets up the common environment used by all build steps.
#
# Two CCI executors are used:
# - docker (small): Used only to launch external EC2 instances for big workloads. It's the cheapest option.
# - machine (large): Used for building in CCI itself. 4cpus, 15GB has the optimal power/cost ratio.
#
# The docker executor uses a custom image build in `build_image`. It's specifically streamlined for fast download
# with just enough tools to execute the build system, and launch EC2 instances etc.

version: 2.1

orbs:
  slack: circleci/slack@4.12.1

parameters:
  workflow:
    type: string
    default: "system"

# This build step checks out the code from the repository. It has a hardcoded readonly key to allow the checkout.
# Initially it just fetches the repo metadata for the current commit hash to a depth of 50 commits.
# We need historical commit hashes to calculate diffs between previous and current commits.
# It then checks out the fetched head to actually download the data.
checkout: &checkout
  run:
    name: "Checkout code"
    command: |
      cd $HOME
      mkdir -p .ssh
      chmod 0700 .ssh
      ssh-keyscan -t rsa github.com >> .ssh/known_hosts

      # IF YOU'RE CHANGING THIS, YOU ALSO WANT TO CHANGE: build-system/remote_build/remote_build
      # Shallow checkout this commit.
      mkdir -p project
      cd project
      git init
      git remote add origin $CIRCLE_REPOSITORY_URL
      # Only download metadata when fetching.
      git fetch --depth 50 --filter=blob:none origin $CIRCLE_SHA1
      git checkout FETCH_HEAD
      # Initialize submodules recursively
      git submodule update --init --recursive

# Called setup_env to setup a bunch of global variables used throughout the rest of the build process.
# It takes the required CCI environment variables as inputs, and gives them normalised names for the rest of
# the build process. This enables easy running of the build system external to CCI, as used for powerful EC2 builds.
setup_env: &setup_env
  run:
    name: "Setup environment"
    command: ./build-system/scripts/setup_env "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_JOB" "$CIRCLE_REPOSITORY_URL" "$CIRCLE_BRANCH"

setup_aztec_commit: &setup_aztec_commit
  run:
    name: "Setup environment for Aztec Integration Testing"
    command: |
      # Load the aztec commit into env for use in integration tests
      # Aztec commit will be chosen according to the following priorities:
      # 1. if present, grab commit from cpp/.aztec-packages-commit file
      # 2. if this is a branch with an identically named branch in aztec-pacakages, run against that branch
      # 3. default to aztec-packages 'master'

      # default to master
      AZTEC_COMMIT=master
      echo "Checking if a branch/commit is specified in .aztec-packages-commit"
      echo "or if this is a branch with a sibling branch in aztec-packages."
      echo "Otherwise defaulting to test against circuits in aztec-packages 'master'."

      COMMIT_FROM_FILE=$(cat cpp/.aztec-packages-commit 2>/dev/null || true)
      if [ -n "$COMMIT_FROM_FILE" ] && [[ "$COMMIT_FROM_FILE" = *[![:space:]]* ]]; then
        # if a commit is present in .aztec-packages-commit, use that
        # check that there is text in the commit file that is not just whitespace
        echo "Using aztec-packages commit ($COMMIT_FROM_FILE) from .aztec-packages-commit file"
        AZTEC_COMMIT=$COMMIT_FROM_FILE
      elif [ -n "$CIRCLE_BRANCH" ] && [ "$CIRCLE_BRANCH" != master ]; then
        echo "Checking if a sibling branch ($CIRCLE_BRANCH) exists in aztec-packages"
        if git ls-remote --heads git@github.com:AztecProtocol/aztec-packages.git 2>/dev/null | grep "refs/heads/$CIRCLE_BRANCH" &>/dev/null; then
          echo "Sibling branch ($CIRCLE_BRANCH) exists in aztec-packages! Circuits tests will run against that branch."
          AZTEC_COMMIT=$CIRCLE_BRANCH
        else
          echo "No sibling branch exists in aztec-packages. Defaulting to 'master'."
        fi
      else
        echo "Defaulting to 'master'."
      fi

      echo "export AZTEC_COMMIT=$AZTEC_COMMIT" >> "$BASH_ENV"
      source "$BASH_ENV"

# This step is used to save logs from various barretenberg test to the workspace so that they can be used later to parse benchmark values out of them
# NOTE(AD): This is now obsolete as benchmarking has been moved to aztec-packages repo. Another pass may simplify this.
save_logs: &save_logs
  persist_to_workspace:
    root: /tmp/test-logs
    paths:
      - ./*

jobs:
  wasm-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-wasm-linux-clang 64

  x86_64-linux-gcc:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-x86_64-linux-gcc 64

  x86_64-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-x86_64-linux-clang 64

  x86_64-linux-clang-assert:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-x86_64-linux-clang-assert 64

  stdlib-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 stdlib-tests
      - *save_logs

  dsl-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 dsl_tests
      - *save_logs

  barretenberg-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_test_script ./scripts/bb-tests.sh barretenberg-x86_64-linux-clang-assert
      - *save_logs

  honk-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 honk_tests
      - *save_logs

  proof-system-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 proof_system_tests
      - *save_logs

  stdlib-recursion-turbo-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 stdlib_recursion_tests --gtest_filter=*turbo*
      - *save_logs

  stdlib-recursion-ultra-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 3 stdlib_recursion_tests --gtest_filter=-*turbo*
      - *save_logs

  join-split-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 3 join_split_example_proofs_join_split_tests --gtest_filter=-*full_proof*
      - *save_logs

  # bb-bin-tests:
  #   docker:
  #     - image: aztecprotocol/alpine-build-image
  #   resource_class: small
  #   steps:
  #     - *checkout
  #     - *setup_env
  #     - run:
  #         name: "Test"
  #         command: cond_spot_run_test_script ./scripts/bin-test.sh barretenberg-x86_64-linux-clang-assert

  bb-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build bb.js

  bb-js-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests bb.js

  acir-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: cond_spot_run_build acir-tests 32

  # These machines cost a fortune (10x other machines).
  # There is a branch coming for github actions that will build mac stuff on releases.
  # I'll leave this here for now, just in case proves useful to be able to do CI mac builds on branches,
  # but let's not uncomment in master.
  #
  # aarch64-macos-clang:
  #   macos:
  #     xcode: "14.3.1"
  #   resource_class: macos.m1.medium.gen1
  #   steps:
  #     - *checkout
  #     - run:
  #         name: "Install toolchain"
  #         command: brew install cmake ninja
  #     - run:
  #         name: "Build"
  #         working_directory: ~/project/cpp
  #         command: cmake --preset default && cmake --build --preset default --target bb
  #     - run:
  #         name: "Test"
  #         working_directory: ~/project/cpp/bin-test
  #         command: ./bin-test.sh

  ###################################
  # Aztec integration tests
  #circuits-wasm-linux-clang-builder-runner:
  #  docker:
  #    - image: aztecprotocol/alpine-build-image
  #  resource_class: small
  #  steps:
  #    - *checkout
  #    - *setup_env
  #    - run:
  #        name: "Build"
  #        command: cond_spot_run_build barretenberg-circuits-wasm-linux-clang-builder-runner 64

  circuits-x86_64-linux-clang-builder-runner:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-circuits-x86_64-linux-clang-builder-runner 64

  #circuits-wasm-tests:
  #  docker:
  #    - image: aztecprotocol/alpine-build-image
  #  resource_class: small
  #  steps:
  #    - *checkout
  #    - *setup_env
  #    - *setup_aztec_commit
  #    - run:
  #        name: "Build"
  #        command: cond_spot_run_test_script ./scripts/run_aztec_circuits_tests barretenberg-circuits-wasm-linux-clang-builder-runner "$AZTEC_COMMIT" 1 wasm scripts/a3-tests -*.skip*:*.circuit*

  circuits-x86_64-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - *setup_aztec_commit
      - run:
          name: "Build"
          command: cond_spot_run_test_script ./scripts/run_aztec_circuits_tests barretenberg-circuits-x86_64-linux-clang-builder-runner "$AZTEC_COMMIT" 1 x86_64 scripts/a3-tests -*.skip*
  # End Aztec integration tests
  ###################################

# Repeatable config for defining the workflow below.
tag_regex: &tag_regex /v[0-9]+(\.[0-9]+)*(-[a-zA-Z-]+\.[0-9]+)?/
defaults: &defaults
  filters:
    tags:
      only: *tag_regex
  context:
    - slack
  post-steps:
    - slack/notify:
        channel: $SLACK_BARRETENBERG_CHANNEL
        event: fail
        branch_pattern: "master"

bb_test: &bb_test
  requires:
    - x86_64-linux-clang-assert
  <<: *defaults

notmaster: &notmaster
  filters:
    branches:
      ignore:
        - master
  <<: *defaults

workflows:
  system:
    jobs:
      # - aarch64-macos-clang: *defaults
      - x86_64-linux-gcc: *defaults
      - x86_64-linux-clang: *defaults
      - x86_64-linux-clang-assert: *defaults
      - wasm-linux-clang: *defaults
      - proof-system-tests: *bb_test
      - honk-tests: *bb_test
      - dsl-tests: *bb_test
      - barretenberg-tests: *bb_test
      - stdlib-tests: *bb_test
      - stdlib-recursion-turbo-tests: *bb_test
      - stdlib-recursion-ultra-tests: *bb_test
      - join-split-tests: *bb_test
      # - bb-bin-tests: *bb_test
      - bb-js:
          requires:
            - wasm-linux-clang
          <<: *defaults
      - bb-js-tests:
          requires:
            - bb-js
          <<: *defaults
      - acir-tests:
          requires:
            - x86_64-linux-clang-assert
            - bb-js
          <<: *defaults
      #- circuits-wasm-linux-clang-builder-runner: *notmaster
      - circuits-x86_64-linux-clang-builder-runner: *notmaster
      #- circuits-wasm-tests:
      #    requires:
      #      - circuits-wasm-linux-clang-builder-runner
      #    <<: *notmaster
      - circuits-x86_64-tests:
          requires:
            - circuits-x86_64-linux-clang-builder-runner
          <<: *notmaster
