#pragma once

#include <array>
#include <optional>

#include "barretenberg/common/std_string.hpp"

namespace bb::{{snakeCase name}} {

// clang-format off
#define {{shoutySnakeCase name}}_PRECOMPUTED_ENTITIES_E(e) {{#each fixed as |item|}}{{#if @index}}, {{/if}}e {{item}}{{/each}}
#define {{shoutySnakeCase name}}_WIRE_ENTITIES_E(e) {{#each witness_without_inverses as |item|}}{{#if @index}}, {{/if}}e {{item}}{{/each}}
#define {{shoutySnakeCase name}}_DERIVED_WITNESS_ENTITIES_E(e) {{#each inverses as |item|}}{{#if @index}}, {{/if}}e {{item}}{{/each}}
#define {{shoutySnakeCase name}}_SHIFTED_ENTITIES_E(e) {{#each shifted as |item|}}{{#if @index}}, {{/if}}e {{item}}{{/each}}
#define {{shoutySnakeCase name}}_TO_BE_SHIFTED_E(e) {{#each to_be_shifted as |item|}}{{#if @index}}, {{/if}}e {{item}}{{/each}}
#define {{shoutySnakeCase name}}_ALL_ENTITIES_E(e) {{#if (len fixed)}}{{shoutySnakeCase name}}_PRECOMPUTED_ENTITIES_E(e){{/if}}{{#if (len witness_without_inverses)}}, {{shoutySnakeCase name}}_WIRE_ENTITIES_E(e){{/if}}{{#if (len lookups)}}, {{shoutySnakeCase name}}_DERIVED_WITNESS_ENTITIES_E(e){{/if}}{{#if (len shifted)}}, {{shoutySnakeCase name}}_SHIFTED_ENTITIES_E(e){{/if}}

#define {{shoutySnakeCase name}}_PRECOMPUTED_ENTITIES {{shoutySnakeCase name}}_PRECOMPUTED_ENTITIES_E()
#define {{shoutySnakeCase name}}_WIRE_ENTITIES {{shoutySnakeCase name}}_WIRE_ENTITIES_E()
#define {{shoutySnakeCase name}}_DERIVED_WITNESS_ENTITIES {{shoutySnakeCase name}}_DERIVED_WITNESS_ENTITIES_E()
#define {{shoutySnakeCase name}}_SHIFTED_ENTITIES {{shoutySnakeCase name}}_SHIFTED_ENTITIES_E()

#define {{shoutySnakeCase name}}_UNSHIFTED_ENTITIES {{shoutySnakeCase name}}_PRECOMPUTED_ENTITIES, {{shoutySnakeCase name}}_WIRE_ENTITIES, {{shoutySnakeCase name}}_DERIVED_WITNESS_ENTITIES
#define {{shoutySnakeCase name}}_WITNESS_ENTITIES {{shoutySnakeCase name}}_WIRE_ENTITIES, {{shoutySnakeCase name}}_DERIVED_WITNESS_ENTITIES
#define {{shoutySnakeCase name}}_ALL_ENTITIES {{shoutySnakeCase name}}_ALL_ENTITIES_E()

#define {{shoutySnakeCase name}}_TO_BE_SHIFTED_COLUMNS {{shoutySnakeCase name}}_TO_BE_SHIFTED_E(Column::)
#define {{shoutySnakeCase name}}_SHIFTED_COLUMNS {{shoutySnakeCase name}}_SHIFTED_ENTITIES_E(ColumnAndShifts::)
// clang-format on

// All columns minus shifts.
enum class Column { {{shoutySnakeCase name}}_UNSHIFTED_ENTITIES };

// C++ doesn't allow enum extension, so we'll have to cast.
enum class ColumnAndShifts {
    {{shoutySnakeCase name}}_ALL_ENTITIES,
    SENTINEL_DO_NOT_USE,
};

constexpr auto NUM_COLUMNS_WITH_SHIFTS = {{len all_cols_and_shifts}};
constexpr auto NUM_COLUMNS_WITHOUT_SHIFTS = {{len all_cols}};
constexpr auto TO_BE_SHIFTED_COLUMNS_ARRAY = []() { return std::array{ {{shoutySnakeCase name}}_TO_BE_SHIFTED_COLUMNS }; }();
constexpr auto SHIFTED_COLUMNS_ARRAY = []() { return std::array{ {{shoutySnakeCase name}}_SHIFTED_COLUMNS }; }();
static_assert(TO_BE_SHIFTED_COLUMNS_ARRAY.size() == SHIFTED_COLUMNS_ARRAY.size());

// Two layers are needed to properly expand the macro. Don't ask why.
#define VARARGS_TO_STRING(...) #__VA_ARGS__
#define UNPACK_TO_STRING(...) VARARGS_TO_STRING(__VA_ARGS__)
inline const std::vector<std::string>& COLUMN_NAMES = []() {
    static auto vec = detail::split_and_trim(UNPACK_TO_STRING({{shoutySnakeCase name}}_ALL_ENTITIES), ',');
    return vec;
}();

} // namespace bb::{{snakeCase name}}
