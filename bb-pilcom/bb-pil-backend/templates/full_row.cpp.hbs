// AUTOGENERATED FILE
#include "barretenberg/vm/{{snakeCase name}}/generated/full_row.hpp"
#include "barretenberg/vm/{{snakeCase name}}/generated/flavor_settings.hpp"

namespace bb {
namespace {

template <typename FF> std::string field_to_string(const FF& ff)
{
    std::ostringstream os;
    os << ff;
    std::string raw = os.str();
    auto first_not_zero = raw.find_first_not_of('0', 2);
    std::string result = "0x" + (first_not_zero != std::string::npos ? raw.substr(first_not_zero) : "0");
    return result;
}

} // namespace

template <typename FF> std::vector<std::string> {{name}}FullRow<FF>::names()
{
    return {
        {{#each all_cols as |col|}}
        {{#if @index}},{{/if}}"{{col}}"
        {{/each}}
    };
}

template <typename FF> RefVector<const FF> {{name}}FullRow<FF>::as_vector() const {
    return RefVector<const FF>{
        {{#each all_cols as |col|}}
        {{col}},
        {{/each}}
    };
}

template <typename FF> std::ostream& operator<<(std::ostream& os, {{name}}FullRow<FF> const& row)
{
    for (const auto& ff : row.as_vector()) {
        os << field_to_string(ff) << ", ";
    }
    return os;
}

// Explicit template instantiation.
template std::ostream& operator<<(std::ostream& os, {{name}}FullRow<{{name}}FlavorSettings::FF> const& row);
template std::vector<std::string> {{name}}FullRow<{{name}}FlavorSettings::FF>::names();
template RefVector<const {{name}}FlavorSettings::FF> {{name}}FullRow<{{name}}FlavorSettings::FF>::as_vector() const;

} // namespace bb
