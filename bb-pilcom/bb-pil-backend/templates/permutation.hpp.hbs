// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <tuple>
#include <string_view>

namespace bb::{{snakeCase root_name}} {

{{#each perms as |current_perm|}}{{#with current_perm}}
/////////////////// {{perm_name}} ///////////////////

class {{perm_name}}_permutation_settings {
  public:
    static constexpr std::string_view NAME = "{{shoutySnakeCase perm_name}}";

    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = {{columns_per_set}};

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::{{lhs_selector}};
    static constexpr Column DST_SELECTOR = Column::{{rhs_selector}};
    static constexpr Column INVERSES = Column::{{inverses_col}};

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._{{lhs_selector}}() == 1 || in._{{rhs_selector}}() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(
        {{#each perm_entities as |ent|}}
        in._{{ent}}(){{#unless @last}},{{/unless}}
        {{/each}}
        );
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(
        {{#each perm_entities as |ent|}}
        in._{{ent}}(){{#unless @last}},{{/unless}}
        {{/each}}
        );
    }
};

template <typename FF_> class {{perm_name}}_relation : public GenericPermutationRelation<{{perm_name}}_permutation_settings, FF_> {
    public:
        using Settings = {{perm_name}}_permutation_settings;
        static constexpr std::string_view NAME = {{perm_name}}_permutation_settings::NAME;

        {{! TODO: This is a safe skippable condition, but there might be a better one. --}}
        template <typename AllEntities> inline static bool skip(const AllEntities& in)
        {
            return in.{{lhs_selector}}.is_zero() && in.{{rhs_selector}}.is_zero();
        }

        static std::string get_subrelation_label(size_t index) {
            {{! from generic_permutation_relation.hpp }}
            if (index == 0) {
                return "INVERSES_ARE_CORRECT";
            } else if (index == 1) {
                return "ACCUMULATION_IS_CORRECT";
            }
            return std::to_string(index);
        }
};

{{/with}}{{/each}}
} // namespace bb::{{snakeCase root_name}}