// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <tuple>
#include <string_view>

#include "../columns.hpp"
#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"

namespace bb::{{snakeCase root_name}} {

{{#each perms as |current_perm|}}{{#with current_perm ~}}
/////////////////// {{perm_name}} ///////////////////

struct {{perm_name}}_settings_ {
    static constexpr std::string_view NAME = "{{shoutySnakeCase perm_name}}";
    static constexpr std::string_view RELATION_NAME = "{{relation_name}}";
    static constexpr size_t COLUMNS_PER_SET = {{columns_per_set}};
    static constexpr Column SRC_SELECTOR = Column::{{lhs_selector}};
    static constexpr Column DST_SELECTOR = Column::{{rhs_selector}};
    static constexpr Column INVERSES = Column::{{inverses_col}};
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> SRC_COLUMNS = {
        {{#each lhs_cols as |col|}}
        ColumnAndShifts::{{col}}{{#unless @last}},{{/unless}}
        {{/each}}
    };
    static constexpr std::array<ColumnAndShifts, COLUMNS_PER_SET> DST_COLUMNS = {
        {{#each rhs_cols as |col|}}
        ColumnAndShifts::{{col}}{{#unless @last}},{{/unless}}
        {{/each}}
    };
};

using {{perm_name}}_settings = permutation_settings<{{perm_name}}_settings_>;
template <typename FF_> using {{perm_name}}_relation = permutation_relation_base<FF_, {{perm_name}}_settings>;

{{/with}}{{/each}}
} // namespace bb::{{snakeCase root_name}}
