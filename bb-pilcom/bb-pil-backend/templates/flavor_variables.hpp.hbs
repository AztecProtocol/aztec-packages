// AUTOGENERATED FILE
#pragma once

#include "barretenberg/common/tuple.hpp"

// Relations
{{#each relation_file_names as |r|}}
#include "relations/{{r}}.hpp"
{{/each}}

{{#each optimized_relations_file_names as |o|}}
{{#if @first}} {{!-- If an optimized relation exists --}}
// Optimized Relations
{{/if}}
#include "barretenberg/vm2/optimized/relations/{{o}}.hpp"
{{/each}}

// Lookup and permutation relations
{{#each lookup_and_perm_file_names as |file_name|}}
#include "relations/{{file_name}}"
{{/each}}

namespace bb::{{snakeCase name}} {

struct AvmFlavorVariables {
    static constexpr size_t NUM_PRECOMPUTED_ENTITIES = {{len fixed}};
    static constexpr size_t NUM_WITNESS_ENTITIES = {{len witness}};
    static constexpr size_t NUM_SHIFTED_ENTITIES = {{len shifted}};
    static constexpr size_t NUM_WIRES = NUM_WITNESS_ENTITIES + NUM_PRECOMPUTED_ENTITIES;
    static constexpr size_t NUM_ALL_ENTITIES = {{len all_cols_and_shifts}};

    // Need to be templated for recursive verifier
    template <typename FF_>
    using MainRelations_ = flat_tuple::tuple<
    {{!-- It's easier to handle the optimized relations first --}}
    {{#each optimized_relations_file_names as |item|}}
      {{#if @first}} {{!-- If an optimized relation exists --}}
      // Optimized Relations
      {{/if}}
      {{snakeCase ../name}}::optimized_{{item}}<FF_>,
    {{/each}}
    {{!-- Standard Generated Relations --}}
      // Relations
    {{#each relation_file_names as |item|}}{{snakeCase ../name}}::{{item}}<FF_>{{#unless @last}}, {{/unless}}{{/each}}
    >;

    // Need to be templated for recursive verifier
    template <typename FF_>
    using LookupRelations_ = flat_tuple::tuple<
      // Lookups
      {{#each lookups as |item|}}{{#if @index}},{{/if}}{{item}}_relation<FF_>{{/each}}
    >;
};

} // namespace bb::::{{snakeCase name}}
