// AUTOGENERATED FILE
#pragma once

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"

namespace bb::{{root_name}}_vm {

{{!-- 
template <typename FF> struct {{upperCamelCase name}}Row {
    {{#each all_cols as |col|}}
    FF {{col}}{};
    {{/each}}
};
--}}

template <typename FF_> class {{name}}Impl {
    public:
        using FF = FF_;
        
        static constexpr std::array<size_t, {{len degrees}}> SUBRELATION_PARTIAL_LENGTHS = {
            {{#each degrees as |degree|}}{{degree}}{{#unless @last}},{{/unless}}{{/each}}
        };

        {{#if skippable_if}}        
        template <typename AllEntities> inline static bool skip(const AllEntities& in)
        {
            const auto& new_term = in;
            return ({{skippable_if}}).is_zero();
        }
        {{/if}}

        template <typename ContainerOverSubrelations, typename AllEntities>
        void static accumulate(
            ContainerOverSubrelations& evals,
            const AllEntities& new_term,
            [[maybe_unused]] const RelationParameters<FF>&,
            [[maybe_unused]] const FF& scaling_factor
        ){
            {{#each alias_defs as |alias|}}
            const auto {{alias.name}} = {{alias.expr}};
            {{/each}}

            {{#each identities}}
            {
                using Accumulator = typename std::tuple_element_t<{{@index}}, ContainerOverSubrelations>;
                auto tmp = {{identity}};
                tmp *= scaling_factor;
                std::get<{{@index}}>(evals) += typename Accumulator::View(tmp);
            }
            {{/each}}
        }
};

template <typename FF> class {{name}} : public Relation<{{name}}Impl<FF>> {
    public:
        static constexpr const char* NAME = "{{name}}";

        static std::string get_subrelation_label(size_t index) {
            switch (index) {
                {{#each labels as |label|}}
                case {{label.0}}:
                    return "{{label.1}}";
                {{/each}}
            }
            return std::to_string(index);
        }
};

} // namespace bb::{{root_name}}_vm