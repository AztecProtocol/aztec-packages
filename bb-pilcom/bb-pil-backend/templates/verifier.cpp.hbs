// AUTOGENERATED FILE
#include "barretenberg/vm/{{snakeCase name}}/generated/verifier.hpp"
#include "barretenberg/commitment_schemes/shplonk/shplemini.hpp"
#include "barretenberg/common/log.hpp"
#include "barretenberg/numeric/bitop/get_msb.hpp"
#include "barretenberg/transcript/transcript.hpp"
#include "barretenberg/vm/constants.hpp"

namespace bb {

{{name}}Verifier::{{name}}Verifier(std::shared_ptr<Flavor::VerificationKey> verifier_key)
    : key(std::move(verifier_key))
{}

{{name}}Verifier::{{name}}Verifier({{name}}Verifier&& other) noexcept
    : key(std::move(other.key))
{}

{{name}}Verifier& {{name}}Verifier::operator=({{name}}Verifier&& other) noexcept
{
    key = other.key;
    commitments.clear();
    return *this;
}

using FF = {{name}}Flavor::FF;

// Evaluate the given public input column over the multivariate challenge points
inline FF AvmVerifier::evaluate_public_input_column(const std::vector<FF>& points, std::vector<FF> challenges)
{
    Polynomial<FF> polynomial(points, key->circuit_size);
    return polynomial.evaluate_mle(challenges);
}

/**
 * @brief This function verifies an {{name}} Honk proof for given program settings.
 *
 */
bool {{name}}Verifier::verify_proof(const HonkProof& proof, const std::vector<std::vector<FF>>& public_inputs)
{
    using Flavor = {{name}}Flavor;
    using FF = Flavor::FF;
    using Commitment = Flavor::Commitment;
    using PCS = Flavor::PCS;
    using Curve = Flavor::Curve;
    using VerifierCommitments = Flavor::VerifierCommitments;
    using CommitmentLabels = Flavor::CommitmentLabels;
    using Shplemini = ShpleminiVerifier_<Curve>;

    RelationParameters<FF> relation_parameters;

    transcript = std::make_shared<Transcript>(proof);

    VerifierCommitments commitments{ key };
    CommitmentLabels commitment_labels;

    const auto circuit_size = transcript->template receive_from_prover<uint32_t>("circuit_size");
    if (circuit_size != key->circuit_size) {
        vinfo("Circuit size mismatch: expected", key->circuit_size, " got ", circuit_size);
        return false;
    }

    // Get commitments to VM wires
    for (auto [comm, label] : zip_view(commitments.get_wires(), commitment_labels.get_wires())) {
        comm = transcript->template receive_from_prover<Commitment>(label);
    }

    auto [beta, gamm] = transcript->template get_challenges<FF>("beta", "gamma");
    relation_parameters.beta = beta;
    relation_parameters.gamma = gamm;

    // Get commitments to inverses
    for (auto [label, commitment] : zip_view(commitment_labels.get_derived(), commitments.get_derived())) {
        commitment = transcript->template receive_from_prover<Commitment>(label);
    }

    // Execute Sumcheck Verifier
    const size_t log_circuit_size = numeric::get_msb(circuit_size);
    auto sumcheck = SumcheckVerifier<Flavor>(log_circuit_size, transcript);

    FF alpha = transcript->template get_challenge<FF>("Sumcheck:alpha");

    auto gate_challenges = std::vector<FF>(log_circuit_size);
    for (size_t idx = 0; idx < log_circuit_size; idx++) {
        gate_challenges[idx] = transcript->template get_challenge<FF>("Sumcheck:gate_challenge_" + std::to_string(idx));
    }

    auto [multivariate_challenge, claimed_evaluations, sumcheck_verified] =
        sumcheck.verify(relation_parameters, alpha, gate_challenges);

    // If Sumcheck did not verify, return false
    if (!sumcheck_verified.has_value() || !sumcheck_verified.value()) {
        vinfo("Sumcheck verification failed");
        return false;
    }

    // Public columns evaluation checks
    std::vector<FF> mle_challenge(multivariate_challenge.begin(),
                                  multivariate_challenge.begin() + static_cast<int>(log_circuit_size));

    {{#each public_cols}}
    FF {{col}}_evaluation = evaluate_public_input_column(public_inputs[{{idx}}], mle_challenge);
        if ({{col}}_evaluation != claimed_evaluations.{{col}}) {
            vinfo("{{col}}_evaluation failed");
            return false;
        }
    {{/each}}

    const BatchOpeningClaim<Curve> opening_claim =
        Shplemini::compute_batch_opening_claim(circuit_size,
                                               commitments.get_unshifted(),
                                               commitments.get_to_be_shifted(),
                                               claimed_evaluations.get_unshifted(),
                                               claimed_evaluations.get_shifted(),
                                               multivariate_challenge,
                                               Commitment::one(),
                                               transcript);

    const auto pairing_points = PCS::reduce_verify_batch_opening_claim(opening_claim, transcript);
    const auto shplemini_verified = key->pcs_verification_key->pairing_check(pairing_points[0], pairing_points[1]);

    if (!shplemini_verified) {
        vinfo("Shplemini verification failed");
        return false;
    }

    return true;
}

} // namespace bb
