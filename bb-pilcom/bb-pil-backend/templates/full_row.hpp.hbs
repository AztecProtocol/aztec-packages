// AUTOGENERATED FILE
#pragma once

#include "columns.hpp"

namespace bb::{{snakeCase name}} {

template <typename FF_>
struct AvmFullRow {
    using FF = FF_;

    FF {{shoutySnakeCase name}}_ALL_ENTITIES;

    // Risky but oh so efficient.
    FF& get_column(ColumnAndShifts col)
    {
        static_assert(sizeof(*this) == sizeof(FF) * static_cast<size_t>(ColumnAndShifts::SENTINEL_DO_NOT_USE));
        return reinterpret_cast<FF*>(this)[static_cast<size_t>(col)];
    }

    const FF& get_column(ColumnAndShifts col) const
    {
        static_assert(sizeof(*this) == sizeof(FF) * static_cast<size_t>(ColumnAndShifts::SENTINEL_DO_NOT_USE));
        return reinterpret_cast<const FF*>(this)[static_cast<size_t>(col)];
    }
};

} // namespace bb::{{snakeCase name}}

{{!-- VM1 needs this --}}
{{#if (ne name "Avm2")}}
namespace bb {

using {{snakeCase name}}::AvmFullRow;

} // namespace bb
{{/if}}
