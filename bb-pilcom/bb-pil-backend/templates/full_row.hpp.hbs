// AUTOGENERATED FILE
#pragma once

#include <string>
#include <sstream>
#include <vector>

#include "barretenberg/common/ref_vector.hpp"
#include "columns.hpp"

namespace bb::avm {

template <typename FF_>
struct {{name}}FullRow {
    using FF = FF_;

    FF ALL_ENTITIES;

    RefVector<const FF> as_vector() const;
    static std::vector<std::string> names();
    static constexpr size_t SIZE = {{len all_cols}};

    // Risky but oh so efficient.
    FF& get_column(ColumnAndShifts col)
    {
        static_assert(sizeof(*this) == sizeof(FF) * static_cast<size_t>(ColumnAndShifts::NUM_COLUMNS));
        return reinterpret_cast<FF*>(this)[static_cast<size_t>(col)];
    }

    const FF& get_column(ColumnAndShifts col) const
    {
        static_assert(sizeof(*this) == sizeof(FF) * static_cast<size_t>(ColumnAndShifts::NUM_COLUMNS));
        return reinterpret_cast<FF*>(this)[static_cast<size_t>(col)];
    }
};

template <typename FF> std::ostream& operator<<(std::ostream& os, {{name}}FullRow<FF> const& row);

} // namespace bb::avm

namespace bb {

// Expose this in the bb namespace. For compatibility with the old witgen.
using avm::{{name}}FullRow;

} // namespace bb