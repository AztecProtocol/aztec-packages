// AUTOGENERATED FILE
#pragma once

#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <tuple>

namespace bb::{{snakeCase root_name}} {

class {{lookup_name}}_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = {{read_terms}};
    static constexpr size_t WRITE_TERMS = {{write_terms}};
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = {{read_term_types}};
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = {{write_term_types}};
    static constexpr size_t LOOKUP_TUPLE_SIZE = {{lookup_tuple_size}};
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = {{inverse_degree}};
    static constexpr size_t READ_TERM_DEGREE = {{read_term_degree}};
    static constexpr size_t WRITE_TERM_DEGREE = {{write_term_degree}};

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.{{lhs_selector}} == 1 || in.{{rhs_selector}} == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in.{{lhs_selector}});
        const auto is_table_entry = View(in.{{rhs_selector}});
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(
        {{#each lookup_entities as |ent|}}
        in.{{ent}}{{#unless @last}},{{/unless}}
        {{/each}}
        );
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(
        {{#each lookup_entities as |ent|}}
        in.{{ent}}{{#unless @last}},{{/unless}}
        {{/each}}
        );
    }
};

template <typename FF_> class {{lookup_name}}_relation : public GenericLookupRelation<{{lookup_name}}_lookup_settings, FF_> {
    public:
        static constexpr const char* NAME = "{{shoutySnakeCase lookup_name}}";
};
template <typename FF_> using {{lookup_name}} = GenericLookup<{{lookup_name}}_lookup_settings, FF_>;

} // namespace bb::{{snakeCase root_name}}