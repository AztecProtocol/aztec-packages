// AUTOGENERATED FILE
#pragma once

#include <cstddef>
#include <tuple>
#include <string_view>

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"
#include "barretenberg/vm2/constraining/relations/interactions_base.hpp"
#include "barretenberg/vm2/common/expression.hpp"

namespace bb::{{snakeCase root_name}} {

{{#each lookups as |current_lookup|}}{{#with current_lookup ~}}
/////////////////// {{lookup_name}} ///////////////////

struct {{lookup_name}}_settings_ {
    static constexpr std::string_view NAME = "{{shoutySnakeCase lookup_name}}";
    static constexpr std::string_view RELATION_NAME = "{{relation_name}}";
    static constexpr size_t LOOKUP_TUPLE_SIZE = {{lookup_tuple_size}};
    static constexpr auto SRC_SELECTOR_EXPR = {{lhs_selector}};
    static constexpr auto DST_SELECTOR_EXPR = {{rhs_selector}};
    static constexpr auto SRC_EXPRS = std::make_tuple(
        {{#each lhs_exprs as |expr|}}
        {{expr}}{{#unless @last}},{{/unless}}
        {{/each}}
    );
    static constexpr auto DST_EXPRS = std::make_tuple(
        {{#each rhs_exprs as |expr|}}
        {{expr}}{{#unless @last}},{{/unless}}
        {{/each}}
    );
    static constexpr Column COUNTS = Column::{{counts_col}};
    static constexpr Column INVERSES = Column::{{inverses_col}};
};

using {{lookup_name}}_settings = lookup_settings<{{lookup_name}}_settings_>;
template <typename FF_> using {{lookup_name}}_relation = lookup_relation_base<FF_, {{lookup_name}}_settings>;

{{/with}}{{/each}}
} // namespace bb::{{snakeCase root_name}}
