// AUTOGENERATED FILE
#pragma once

#include "../columns.hpp"
#include "barretenberg/relations/generic_lookup/generic_lookup_relation.hpp"

#include <cstddef>
#include <tuple>
#include <string_view>

namespace bb::{{snakeCase root_name}} {

{{#each lookups as |current_lookup|}}{{#with current_lookup}}
/////////////////// {{lookup_name}} ///////////////////

class {{lookup_name}}_lookup_settings {
  public:
    static constexpr size_t READ_TERMS = {{read_terms}};
    static constexpr size_t WRITE_TERMS = {{write_terms}};
    static constexpr size_t READ_TERM_TYPES[READ_TERMS] = {{read_term_types}};
    static constexpr size_t WRITE_TERM_TYPES[WRITE_TERMS] = {{write_term_types}};
    static constexpr size_t LOOKUP_TUPLE_SIZE = {{lookup_tuple_size}};
    static constexpr size_t INVERSE_EXISTS_POLYNOMIAL_DEGREE = {{inverse_degree}};
    static constexpr size_t READ_TERM_DEGREE = {{read_term_degree}};
    static constexpr size_t WRITE_TERM_DEGREE = {{write_term_degree}};

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::{{lhs_selector}};
    static constexpr Column DST_SELECTOR = Column::{{rhs_selector}};
    static constexpr Column COUNTS = Column::{{counts_col}};
    static constexpr Column INVERSES = Column::{{inverses_col}};
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> SRC_COLUMNS = {
        {{#each lhs_cols as |col|}}
        Column::{{col}}{{#unless @last}},{{/unless}}
        {{/each}}
    };
    static constexpr std::array<Column, LOOKUP_TUPLE_SIZE> DST_COLUMNS = {
        {{#each rhs_cols as |col|}}
        Column::{{col}}{{#unless @last}},{{/unless}}
        {{/each}}
    };

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in._{{lhs_selector}}() == 1 || in._{{rhs_selector}}() == 1);
    }

    template <typename Accumulator, typename AllEntities>
    static inline auto compute_inverse_exists(const AllEntities& in)
    {
        using View = typename Accumulator::View;
        const auto is_operation = View(in._{{lhs_selector}}());
        const auto is_table_entry = View(in._{{rhs_selector}}());
        return (is_operation + is_table_entry - is_operation * is_table_entry);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return get_entities(in);
    }

    template <typename AllEntities> static inline auto get_entities(AllEntities&& in)
    {
        return std::forward_as_tuple(
            in._{{inverses_col}}(),
            in._{{counts_col}}(),
            in._{{lhs_selector}}(),
            in._{{rhs_selector}}(),
            {{#each lhs_cols as |col|}}
            in._{{col}}(),
            {{/each}}
            {{#each rhs_cols as |col|}}
            in._{{col}}(){{#unless @last}},{{/unless}}
            {{/each}}
        );
    }
};

template <typename FF_> class {{lookup_name}}_relation : public GenericLookupRelation<{{lookup_name}}_lookup_settings, FF_> {
    public:
        static constexpr std::string_view NAME = "{{shoutySnakeCase lookup_name}}";
};
template <typename FF_> using {{lookup_name}} = GenericLookup<{{lookup_name}}_lookup_settings, FF_>;

{{/with}}{{/each}}
} // namespace bb::{{snakeCase root_name}}