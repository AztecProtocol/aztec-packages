// AUTOGENERATED FILE
#pragma once

#include "barretenberg/plonk/proof_system/types/proof.hpp"
#include "barretenberg/sumcheck/sumcheck.hpp"
#include "barretenberg/vm/{{snakeCase name}}/generated/flavor.hpp"

namespace bb {

class {{name}}Verifier {
    using Flavor = {{name}}Flavor;
    using FF = Flavor::FF;
    using Commitment = Flavor::Commitment;
    using VerificationKey = Flavor::VerificationKey;
    using VerifierCommitmentKey = Flavor::VerifierCommitmentKey;
    using Transcript = Flavor::Transcript;

  public:
    explicit {{name}}Verifier(std::shared_ptr<VerificationKey> verifier_key = nullptr);
    {{name}}Verifier({{name}}Verifier&& other) noexcept;
    {{name}}Verifier(const {{name}}Verifier& other) = delete;

    {{name}}Verifier& operator=(const {{name}}Verifier& other) = delete;
    {{name}}Verifier& operator=({{name}}Verifier&& other) noexcept;

    bool verify_proof(const HonkProof& proof, const std::vector<std::vector<FF>>& public_inputs);

    std::shared_ptr<VerificationKey> key;
    std::map<std::string, Commitment> commitments;
    std::shared_ptr<VerifierCommitmentKey> pcs_verification_key;
    std::shared_ptr<Transcript> transcript;
};

} // namespace bb