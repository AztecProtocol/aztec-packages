#!/bin/bash
source $(git rev-parse --show-toplevel)/ci3/source
source $ci3/source_redis

# function duration {
#   awk '{
#     # Assume field 4 looks like: "\033[33m(1740857485937)\033[0m"
#     # Known prefix = "\033[33m(" (6 characters) and suffix = ")\033[0m" (5 characters)
#     if ($3 ~ /RUNNING/) {
#       ts_field = $4;
#       ts = substr(ts_field, 7, length(ts_field)-11) + 0;
#       current_ms = systime() * 1000;
#       diff_sec = int((current_ms - ts) / 1000);
#       min = int(diff_sec / 60);
#       sec = diff_sec % 60;
#       duration = sprintf("(%dm%ds)", min, sec);
#       print $0, duration, " ";
#     } else {
#       print $0, " "
#     }
#   }'
# }

function get_tag {
  case "$1" in
    RUNNING) echo -e " ${blue}$1${reset}" ;;
    PASSED) echo -e "  ${green}$1${reset}" ;;
    FAILED) echo -e "  ${red}$1${reset}" ;;
    INACTIVE) echo -e "${bold}$1${reset}" ;;
  esac
}

function render {
  while IFS= read -r json_line; do
    IFS=$'\t' read ts status msg name author complete < <(jq -r '[.timestamp, .status, .msg, .name, .author, .complete] | @tsv' <<< "$json_line")
    local date_time=$(date -d @${ts:0:10} "+%m-%Y %H:%M:%S")
    local link="${link_open}http://ci.aztec-labs.com/$ts${link_close}$ts${link_open}${link_close}"
    if [ -z "$complete" ]; then
      local from=$(date +%s%3N)
    else
      local from=complete
    fi
    if [ "$status" != "INACTIVE" ]; then
      local duration=$(( (from - ts) / 1000 ))
      local duration_str="($((duration / 60))m$((duration % 60))s)"
      echo -e "$date_time $(get_tag $status) (${yellow}$link${reset}): ${bold}$name${reset} ${purple}$author${reset}: $msg ${duration_str} \e[K"
    else
      echo -e "$date_time $(get_tag $status) ($link): ${bold}$name${reset} $author: $msg \e[K"
    fi
  done
}

SECONDS=5

function update_status {
  # Jump to top left and clear.
  echo -e -n "\e[0;0H\e[K"
  echo -e "${bold}AZTEC LABS TERMINAL CI SYSTEM: offset: $offset${reset}"
}

function refresh {
  height=$(tput lines)
  width=$(tput cols)
  if [ "$SECONDS" -ge 5 ]; then
    # result="$(redis-cli --raw ZREVRANGE ci-run $offset $((offset + height - 3)))"
    result=$(redis_cli --eval $ci3/lua/set-filter.lua ci-run , $offset $((offset + height - 3)))
    SECONDS=0
  fi
  update_status
  if [ -z "$result" ]; then
    echo -n "Nothing to see here..."
  else
    echo -e "$result" | render
  fi
  # Clear remainder.
  echo -e -n "\e[J"
}

function cleanup {
  tput rmcup
  tput cnorm
  echo -e -n '\e[?7h'
  exit
}

tput smcup
tput civis
echo -e -n '\e[?7l'
trap cleanup SIGINT EXIT

offset=0

while true; do
  # Read with a timeout.
  if read -rsn1 -t 1 key; then
    # Check for escape sequence start.
    if [[ "$key" == $'\e' ]]; then
      read -rsn2 -t 1 key2
      case "$key2" in
        "[A")
          offset=$(( offset + 1 ))
          SECONDS=5
          update_status
          ;;
        "[B")
          offset=$(( offset > 0 ? offset - 1 : 0 ))
          SECONDS=5
          update_status
          ;;
      esac
    elif [[ "$key" == "q" ]]; then
      break
    fi
    continue
  fi
  refresh
done
