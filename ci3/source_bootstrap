# Source this first in all bootstrap scripts.
# Usage: source $(git rev-parse --show-toplevel)/ci3/source_bootstrap
source $(git rev-parse --show-toplevel)/ci3/source
source $ci3/source_refname

# Checks whether or not we should release.
# Called before any bootstrap scripts (root or project) release command is run.
# Will exit with success (preventing a release) if this is not meant to be release.
# Will exit with failure if we're meant to be releasing, but it can't find the release on github.
# We make an exception if we detect a dist tag (derived from a prerelease semver portion).
# For those, we don't use release-please, so we want to continue on and create the github release ourselves.
# Does not exit if we're meant to continue releasing, and things look good.
function check_release {
  # Release check below maybe a bit slow, so we can early out if already checked.
  [ "${CHECKED_RELEASE:-0}" -eq 1 ] && return || export CHECKED_RELEASE=1

  if ! semver check $REF_NAME; then
    echo_stderr -e "${yellow}Not deploying $REF_NAME because it is not a release tag.${reset}"
    exit 0
  elif [ $(dist_tag) == latest ] && ! gh release view $REF_NAME &>/dev/null; then
    echo_stderr "No release found $REF_NAME. Deploy failed."
    exit 1
  fi
}

# Filters any test cmd that matches any pattern in the repos root .test_skip_patterns file.
# We filter comment lines and blank lines from the pattern file.
# Then filter through cache to remove previously successfully run tests.
function filter_test_cmds {
  grep -Ev -f <(grep -Ev -e '^\s*$' -e '^\s*#' $root/.test_skip_patterns) | filter_cached_test_cmd
}

case "${1:-}" in
  "ci")
    # Forces yarn immutability, jest snapshot immutability, etc.
    export CI=1
    # Being in CI implies use of cache, and enables denoising.
    export DENOISE=${DENOISE:-1}
    ;;
  "full")
    export NO_CACHE=${NO_CACHE:-1}
    ;;
  release)
    check_release
    # Until releases are 100% stable, print a debug log.
    set -x
    ;;
esac
