#!/usr/bin/env bash
NO_CD=1 source $(git rev-parse --show-toplevel)/ci3/source

dist_tag=$1
version=$2

dry_run=${DRY_RUN:-0}

export npm_config__authToken=${NPM_TOKEN:-}

package_name=$(jq -r '.name' package.json)
echo_header "publishing $package_name"

published_version=$(npm show . version --tag $dist_tag 2>/dev/null | grep -vE '^@' || true)
higher_version=$(npx --yes semver ${version} ${published_version} | tail -1)

# Check if there is already a published package equal to given version, assume this is a re-run of a deploy.
if [ "$version" == "$published_version" ]; then
  echo "Tagged $dist_tag version $version is equal to published $dist_tag version $published_version."
  echo "Skipping publish."
  exit 0
fi

# Update the package version in package.json.
tmp=$(mktemp)
jq --arg v $version '.version = $v' package.json >$tmp && mv $tmp package.json

# Update each dependent @aztec package version in package.json.
for pkg in $(jq --raw-output "(.dependencies // {}) | keys[] | select(contains(\"@aztec/\"))" package.json); do
  jq --arg v $version ".dependencies[\"$pkg\"] = \$v" package.json >$tmp
  mv $tmp package.json
done

# Update each dependent @noir-lang package version in package.json to point to renamed packages and versions.
for pkg in $(jq --raw-output '(.dependencies // {}) | keys[] | select(startswith("@noir-lang/"))' package.json); do
  new_pkg="@aztec/noir-${pkg#@noir-lang/}"
  jq --arg v "$version" --arg old "$pkg" --arg new "$new_pkg" '.dependencies[$new] = $v | del(.dependencies[$old])' package.json > tmp.json
  mv tmp.json package.json
done

# Publish.
if [ "$dry_run" -eq 1 ]; then
  denoise "npm publish --ignore-scripts --dry-run --tag $dist_tag --access public"
else
  # Check if version exists.
  if npm view "$package_name@$version" version >/dev/null 2>&1; then
    # Tag the existing version.
    npm dist-tag add $package_name@$version $dist_tag
  else
    # Publish new version.
    denoise "npm publish --ignore-scripts --tag $dist_tag --access public"
  fi
fi
