#!/bin/bash
# Called by 'parallelise' to execute a given test cmd.
NO_CD=1 source $(git rev-parse --show-toplevel)/ci3/source
source $ci3/source_redis

cmd=$1
# Remove the rebuild hash (first field) that is in front of the test command.
test_cmd="${cmd#* }"
key=$(hash_str_orig "$cmd")

if [ "${USE_TEST_CACHE:-0}" -eq 1 ] && [ "$CI_REDIS_AVAILABLE" -eq 1 ]; then
  log_key=$(redis_cli GET $key)
  if [ -n "$log_key" ]; then
    log_info=" ${yellow}$log_key${reset}"
    echo -e "${blue}SKIPPED${reset}${log_info:-}: $test_cmd"
    exit 0
  fi
fi

# If the test has a verbose mode, we want it enabled.
export VERBOSE=1

# Run the test, capturing output, with a timeout of 10m.
# We cannot use "output=$(timeout ...)" here as it stymies proper signal propagation.
# To ensure we can propagate SIGTERM to timeouts process group we use a temp file and forward the signal.
set +e
tmp_file=/tmp/$key
trap "rm -f $tmp_file" EXIT
if [[ "$test_cmd" = timeout* ]]; then
  bash -c "set -euo pipefail; $test_cmd 2>&1 | add_timestamps" &> $tmp_file &
else
  timeout -v 600s bash -c "set -euo pipefail; $test_cmd 2>&1 | add_timestamps" &> $tmp_file &
fi
timeout_pid=$!
trap "kill -- -$timeout_pid" SIGTERM SIGINT
wait $timeout_pid
code=$?

if [ "$CI_REDIS_AVAILABLE" -eq 1 ]; then
  log_key=$(uuid)

  if [ $code -eq 0 ]; then
    # Set success flag for test. This key is unique to the test.
    redis_cli SETEX $key 604800 $log_key &>/dev/null
  fi

  # Set the test log. This key is globally unique.
  cat $tmp_file | redis_cli -x SETEX $log_key 604800 &>/dev/null
  log_info=" (${yellow}http://ci.aztec-labs.com/$log_key${reset})"
fi

if [ $code -eq 0 ]; then
  echo -e "${green}PASSED${reset}${log_info:-}: $test_cmd (${SECONDS}s)"
else
  echo -e "${red}FAILED${reset}${log_info:-}: $test_cmd (${SECONDS}s) (code: $code)"
  cat $tmp_file
  echo -e "${red}FAILED${reset}${log_info:-}: $test_cmd (${SECONDS}s) (code: $code)"
fi

exit $code
