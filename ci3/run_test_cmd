#!/bin/bash
# Called by 'parallelise' to execute a given test cmd.
NO_CD=1 source $(git rev-parse --show-toplevel)/ci3/source
source $ci3/source_redis
source $ci3/source_refname

cmd=$1
# Remove the rebuild hash (first field) that is in front of the test command.
# Exported for use in yq.
export test_cmd="${cmd#* }"
key=$(hash_str_orig "$cmd")

# We can skip the test if it's already been successfully run.
# We actually pre-filter tests in CI runs so this is rarely hit.
if [ "$USE_TEST_CACHE" -eq 1 ]; then
  log_key=$(redis_cli GET $key)
  if [ -n "$log_key" ]; then
    log_info=" (${yellow}http://ci.aztec-labs.com/$log_key${reset})"
    echo -e "${blue}SKIPPED${reset}${log_info:-}: $cmd"
    exit 0
  fi
fi

# If the test has a verbose mode, we want it enabled.
export VERBOSE=1

# Run the test, capturing output, with a timeout of 10m.
# We cannot use "output=$(timeout ...)" here as it stymies proper signal propagation.
# To ensure we can propagate SIGTERM to timeouts process group we use a temp file and forward the signal.
tmp_file=/tmp/$key
# Print test metadata header.
cat <<EOF >$tmp_file
Command: $cmd
Commit: https://github.com/AztecProtocol/aztec-packages/commit/$COMMIT_HASH
Env: REF_NAME=$REF_NAME CURRENT_VERSION=$CURRENT_VERSION CI_FULL=$CI_FULL
Date: $(date)
Sys: ARCH=$(arch) CPUS=$(nproc) MEM=$(free -h | awk '/^Mem:/{print $2}') HOSTNAME=$(hostname)

EOF
# Remove the tmp fail on exit.
trap "rm -f $tmp_file" EXIT

# Run the test. Disable exit on error. Handle timeout override in the test_cmd.
set +e
if [[ "$test_cmd" = timeout* ]]; then
  bash -c "set -euo pipefail; $test_cmd 2>&1 | add_timestamps" &>> $tmp_file &
else
  timeout -v 600s bash -c "set -euo pipefail; $test_cmd 2>&1 | add_timestamps" &>> $tmp_file &
fi
timeout_pid=$!
trap "kill -- -$timeout_pid" SIGTERM SIGINT
wait $timeout_pid
code=$?

if [ "$CI_REDIS_AVAILABLE" -eq 1 ]; then
  log_key=$(uuid)

  # If the test succeeded and we're using the test cache, set success flag for test. This key is unique to the test.
  if [ $code -eq 0 ] && [ "$USE_TEST_CACHE" -eq 1 ]; then
    redis_cli SETEX $key 604800 $log_key &>/dev/null
  fi

  # If the test failed OR it succeeded and we're running in CI, save the test log.
  # It's not worth spamming redis for local runs of tests that succeed.
  if [ $code -ne 0 ] || [ "${CI:-0}" -eq 1 ]; then
    # Set the test log. This key is globally unique.
    cat $tmp_file | redis_setexz $log_key $CI_REDIS_EXPIRE
    log_info=" (${yellow}http://ci.aztec-labs.com/$log_key${reset})"
  fi
fi

# Show PASSED and early out on success.
function pass {
  echo -e "${green}PASSED${reset}${log_info:-}: $test_cmd (${SECONDS}s)"
  exit
}

# Show FAILED and exit with error code.
function fail {
  echo -e "${red}FAILED${reset}${log_info:-}: $test_cmd (${SECONDS}s) (code: $code)"
  cat $tmp_file
  echo -e "${red}FAILED${reset}${log_info:-}: $test_cmd (${SECONDS}s) (code: $code)"
  exit $code
}

# Show FLAKED and send slack message to test owner(s). Exit with success.
function flake {
  echo -e "${purple}FLAKED${reset}${log_info:-}: $test_cmd (${SECONDS}s) (code: $code)"

  # Send slack message to owners.
  slack_uids=""
  for uid in $owners; do
    slack_uids+="<@$uid> "
  done
  read -r -d '' data <<EOF
  {
    "channel": "#aztec3-ci",
    "text": "${slack_uids% }: Test flaked on *$REF_NAME*: \`$test_cmd\` http://ci.aztec-labs.com/$log_key"
  }
EOF
  curl -X POST https://slack.com/api/chat.postMessage \
    -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
    -H "Content-type: application/json" \
    --data "$data" &>/dev/null

  exit
}

# Test passed.
[ $code -eq 0 ] && pass

# We're not in CI, fail.
[ "$CI" -eq 0 ] && fail

# Get list of owners of this failed test.
owners=$(yq e -r '.tests[] | .regex as $pattern | select(strenv(test_cmd) | test($pattern)) | .owners[]' .test_patterns.yml | sort -u)

# To not fail a test, we at least need an owner to notify.
if [ -z "$owners" ]; then
  fail
else
  flake
fi
