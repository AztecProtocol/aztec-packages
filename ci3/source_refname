# Set REF_NAME to be the branch name if on a branch, or the tag name if on a tag.
# If REF_NAME starts with "release/", just keep what comes after.
# Example outputs:
# - master (branch is master)
# - cl/ci_branch (a feature branch)
# - v1.2.3 (a tagged version)
# - wise-weasle (a tagged release e.g. release/wise-weasle)
# We use this for e.g:
# - Creating a unique instance name when launching spots.
# - Identifying GitHub releases to upload assets to.
# - Tagging released images.
# - Identifying a PR associated with a branch.
# This is obviously overloaded in terms of how its value is generated, and how it's used.
# So far this has been fine, so requiring more distinct variables has been unnecessary.
# In Github Actions we need to take from what GA provides to avoid any race conditions.
if [ -z "${REF_NAME:-}" ]; then
  if [ -n "${GITHUB_HEAD_REF:-}" ]; then
    # Use correct branch name in PRs.
    REF_NAME="${GITHUB_HEAD_REF}"
  elif [ -n "${GITHUB_REF:-}" ]; then
    REF_NAME="${GITHUB_REF#refs/heads/}"   # Extract branch name
    REF_NAME="${REF_NAME#refs/tags/}"      # Extract tag name
  else
    REF_NAME=$(git symbolic-ref --short -q HEAD || git describe --tags --exact-match 2>/dev/null || git rev-parse HEAD)
    export REF_NAME="${REF_NAME#heads/}"
  fi
  export REF_NAME="${REF_NAME#release/}"
  # echo "REF_NAME=$REF_NAME"
  [ -z "${REF_NAME:-}" ] && exit 1
fi

if [ -z "${CI_FULL:-}" ]; then
  if [ "$CI" -eq 0 ]; then
    export CI_FULL=0
  elif semver check "$REF_NAME"; then
    export CI_FULL=1
  elif [ "$REF_NAME" == "master" ]; then
    export CI_FULL=1
  else
    export CI_FULL=0
  fi
fi

if [ -z "${COMMIT_HASH:-}" ]; then
  export COMMIT_HASH=$(git rev-parse HEAD)
fi

if [ -z "${CURRENT_VERSION:-}" ]; then
  export CURRENT_VERSION=$(jq -r '."."' $root/.release-please-manifest.json)
fi
