#!/usr/bin/env bash
set -euo pipefail
[ "${BUILD_SYSTEM_DEBUG:-}" = 1 ] && set -x

if [[ "$#" -eq 0 ]]; then
  echo "No arguments provided."
  exit 1
fi

AZTEC_CACHE_COMMIT=${AZTEC_CACHE_COMMIT:-HEAD}
PLATFORM_TAG="${PLATFORM_TAG:-${OSTYPE:-unknown}-$(uname -m)}"

# Gather patterns (from direct args or from files)
patterns=()
for arg in "$@"; do
  if [[ -f "$arg" ]]; then
    patterns+=$(cat "$arg")
    patterns+=$'\n'
  else
    patterns+="$arg"$'\n'
  fi
done

# Build a single pattern for grep and awk
GREP_PATTERN=$(echo "${patterns[*]}" | grep -v '^$')
AWK_PATTERN=$(echo $GREP_PATTERN | sed 's/\\/\\\\/g' | tr '\n' '|' | sed 's/|$//')
# Ensure we work in the repo root
cd "$(git rev-parse --show-toplevel)"

unstaged_diff="$(git diff --name-only | grep -E "$GREP_PATTERN" || true)"
staged_diff="$(git diff --staged --name-only | grep -E "$GREP_PATTERN" || true)"
untracked_diff="$(git ls-files --others --exclude-standard | grep -E "$GREP_PATTERN" || true)"

# Check for untracked files
if [[ -n "$unstaged_diff" ]] || [[ -n "$staged_diff" ]] || [[ -n "$untracked_diff" ]]; then
  # Signal to cache_upload and cache_download to not touch this file.
  echo "disabled-cache"
  exit 0
fi

# Calculate a content hash for matched files
CONTENT_HASH="$(
  git ls-tree -r "$AZTEC_CACHE_COMMIT" \
    | awk -v pattern="($AWK_PATTERN)" '$4 ~ pattern {print $3}' \
    | sort \
    | git hash-object --stdin \
    | cut -c1-16
)"

# Check if file list was empty by comparing against the result of
# 'echo '' | git hash-object --stdin | cut -c1-16'
EMPTY_HASH="8b137891791fe969"
if [[ "$CONTENT_HASH" == "$EMPTY_HASH" ]]; then
  echo "No files matched any of the provided patterns."
  exit 1
fi

echo "${CONTENT_HASH}-${PLATFORM_TAG}"
