#!/bin/bash
# Capture initial PIDs using our stdio before running the command.
initial_stdio_pids=$(fuser /dev/stdin /dev/stdout /dev/stderr 2>/dev/null | tr -s ' ' '\n')

# Gracefully signals eviction status with a 155 exit code.
# Runs the given command in the background and waits on it while polling for eviction status.
bash -c "$1" &
child_pid=$!

token=$(curl -sX PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")

function terminate_stdio_attached_processes {
  # Get current PIDs using stdio and kill those that were not present at startup.
  fuser /dev/stdin /dev/stdout /dev/stderr 2>/dev/null | tr -s ' ' '\n' \
    | grep -vFxf <(echo "$initial_stdio_pids") \
    | xargs -r kill -9
}

# Poll until the child finishes or a termination notice is detected
while true; do
  # Wait for process to come up, makes check below happen every 5 seconds.
  for i in {1..5}; do
    if ! kill -0 "$child_pid" 2>/dev/null; then
      wait "$child_pid"
      terminate_stdio_attached_processes
      exit $?
    fi
    sleep 1
  done

  # Check for imminent spot termination.
  if curl -fs -H "X-aws-ec2-metadata-token: $token" \
         http://169.254.169.254/latest/meta-data/spot/termination-time &>/dev/null; then
    echo "Spot will be terminated! Exiting early."
    terminate_stdio_attached_processes
    # Exit with 155 to signal wrapper to restart with on-demand.
    exit 155
  fi
done
