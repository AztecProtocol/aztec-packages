#!/usr/bin/env bash
# DO NOT output to stdout. This script is used in contexts where stdout is processed.
NO_CD=1 source ${root:-$(git rev-parse --show-toplevel)}/ci3/source

if [ "$#" -lt 2 ]; then
  echo_stderr "Usage: $0 <my-artifact.tar.gz> <binary_paths_to_tar_gz_and_upload...>"
  exit 1
fi

if [[ "$1" == *"disabled-cache"* ]]; then
  echo_stderr "Skipping upload of $1 due to uncommitted changes/files."
  exit 0
fi

# Name, intended to have .tar.gz ending
name="$1"
# Now $@ = our binary path args
shift 1

if [[ -z "${S3_FORCE_UPLOAD:-}" && "${CI:0}" -eq 0 ]]; then
  echo_stderr "Skipping upload because CI=0 and S3_FORCE_UPLOAD not set."
  exit 0
fi

if [[ -z "${AWS_ACCESS_KEY_ID:-}" || -z "${AWS_SECRET_ACCESS_KEY:-}" ]] && ! aws configure get aws_access_key_id &>/dev/null; then
  echo_stderr "Skipping upload, no AWS credentials found."
  exit 0
fi

if [ -z "${S3_FORCE_UPLOAD:-}" ] && \
  aws ${S3_BUILD_CACHE_AWS_PARAMS:-} s3 ls "s3://aztec-ci-artifacts/build-cache/$name" &>/dev/null; then
    echo_stderr "Skipping upload, already exists: $name"
    exit 0
fi

out_tar=$(mktemp)
trap 'rm -f $out_tar' EXIT

if [[ "$name" == *.zst ]]; then
  tar --use-compress-program="zstd -T0" -cf $out_tar "$@"
else
  tar -czf $out_tar "$@"
fi

# Pipe tar directly to AWS S3 cp
if aws ${S3_BUILD_CACHE_AWS_PARAMS:-} s3 cp $out_tar "s3://aztec-ci-artifacts/build-cache/$name" >&2; then
  echo_stderr "Cache upload of $name complete in ${SECONDS}s."
else
  echo_stderr "Cache upload of $name failed."
fi
