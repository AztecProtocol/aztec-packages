mod asset;

contract PriceFeed {
    use dep::std::option::Option;
    use dep::aztec::{
        context::{PrivateContext, PublicContext, Context},
        state_vars::{
            map::Map,
            public_state::PublicState,
        },
    };
    use dep::aztec::protocol_types::address::AztecAddress;
    use crate::asset::Asset;

    // Storage structure, containing all storage, and specifying what slots they use.
    struct Storage {
        assets: Map<Field, PublicState<Asset>>,
    }

    #[aztec(private)]
    fn constructor() {}

    #[aztec(public)]
    fn set_price(asset_id: Field, price: u120) {
        let asset = storage.assets.at(asset_id);
        asset.write(Asset { price });
    }

    #[aztec(public)]
    fn get_price(asset_id: Field) -> Asset {
        storage.assets.at(asset_id).read()
    }

    unconstrained fn fetch_price(assetId: Field) -> pub Asset {
        storage.assets.at(assetId).read()
    }
}
