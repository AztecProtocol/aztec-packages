mod test_contract_interface;

// Contract that uses the autogenerated interface of the Test contract for calling its functions.
// Used for testing calling into other contracts via autogenerated interfaces.
contract ImportTest {
    use dep::aztec::prelude::{AztecAddress, Deserialize};

    use crate::test_contract_interface::{
        TestPrivateContextInterface, TestPublicContextInterface, AStructTestCodeGenStruct,
        ADeepStructTestCodeGenStruct, ANoteADeepStructTestCodeGenStruct,
        ManyNotesADeepStructTestCodeGenStruct
    };

    // Calls the test_code_gen on the Test contract at the target address
    // Used for testing calling a function with arguments of multiple types
    // See yarn-project/simulator/src/client/private_execution.ts
    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts
    #[aztec(private)]
    fn main(target: AztecAddress) -> Field {
        let test_contract_instance = TestPrivateContextInterface::at(target);
        let returned_field: Field = test_contract_instance.test_code_gen(
            &mut context,
            1,
            true,
            1 as u32,
            [1, 2],
            AStructTestCodeGenStruct { amount: 1, secret_hash: 2 },
            ADeepStructTestCodeGenStruct {
            a_field: 1,
            a_bool: true,
            a_note: ANoteADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 },
            many_notes: [
                ManyNotesADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 },
                ManyNotesADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 },
                ManyNotesADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 }
            ]
        }
        ).unpack_into();

        returned_field
    }

    // Calls the get_this_address on the Test contract at the target address
    // Used for testing calling a function with no arguments
    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts
    #[aztec(private)]
    fn call_no_args(target: AztecAddress) -> Field {
        let test_contract_instance = TestPrivateContextInterface::at(target);
        let returned_field: Field = test_contract_instance.get_this_address(&mut context).unpack_into();

        returned_field
    }

    // Calls the create_nullifier_public on the Test contract at the target address
    // Used for testing calling an open function
    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts
    #[aztec(private)]
    fn call_open_fn(target: AztecAddress) {
        let test_contract_instance = TestPrivateContextInterface::at(target);
        test_contract_instance.create_nullifier_public(&mut context, 1, 2);
    }

    // Calls the create_nullifier_public on the Test contract at the target address
    // Used for testing calling an open function from another open function
    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts
    #[aztec(public)]
    fn pub_call_open_fn(target: AztecAddress) {
        let test_contract_instance = TestPublicContextInterface::at(target);
        test_contract_instance.create_nullifier_public(&mut context, 1, 2).assert_empty();
    }
}

