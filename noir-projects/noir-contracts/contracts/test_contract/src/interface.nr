/* Autogenerated file, do not edit! */

use dep::std;
use dep::aztec::context::{PrivateContext, PublicContext, gas::GasOpts};
use dep::aztec::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector, constants::RETURN_VALUES_LENGTH};

struct OwnerCallCreateNoteStruct {
  inner: Field,
}

struct CoinbaseAssertPublicGlobalVarsStruct {
  inner: Field,
}

struct FeeRecipientAssertPublicGlobalVarsStruct {
  inner: Field,
}

struct AztecAddressGetPortalContractAddressStruct {
  inner: Field,
}

struct AddressGetPublicKeyStruct {
  inner: Field,
}

struct AStructTestCodeGenStruct {
  amount: Field,
  secret_hash: Field,
}

struct ADeepStructTestCodeGenStruct {
  a_field: Field,
  a_bool: bool,
  a_note: ANoteADeepStructTestCodeGenStruct,
  many_notes: [ManyNotesADeepStructTestCodeGenStruct;3],
}

struct ANoteADeepStructTestCodeGenStruct {
  amount: Field,
  secret_hash: Field,
}

struct ManyNotesADeepStructTestCodeGenStruct {
  amount: Field,
  secret_hash: Field,
}

struct RecipientCreateL2ToL1MessageArbitraryRecipientPublicStruct {
  inner: Field,
}

struct ToConsumeMintPublicMessageStruct {
  inner: Field,
}

struct SenderConsumeMessageFromArbitrarySenderPublicStruct {
  inner: Field,
}

struct SenderConsumeMessageFromArbitrarySenderPrivateStruct {
  inner: Field,
}

struct RecipientCreateL2ToL1MessageArbitraryRecipientPrivateStruct {
  inner: Field,
}

struct TargetDeployContractStruct {
  inner: Field,
}

// Interface for calling Test functions from a private context
struct TestPrivateContextInterface {
  address: AztecAddress,
}

impl TestPrivateContextInterface {
    pub fn at(address: AztecAddress) -> Self {
        Self { address }
    }

    pub fn call_create_note(
        self,
        context: &mut PrivateContext,
        value: Field,
        owner: OwnerCallCreateNoteStruct,
        storage_slot: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = value;
        serialized_args[1] = owner.inner;
        serialized_args[2] = storage_slot;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x946991ff),
            serialized_args
        )
    }

    pub fn get_this_portal_address(self, context: &mut PrivateContext) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 0];

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xc71384f5),
            serialized_args
        )
    }

    pub fn set_constant(
        self,
        context: &mut PrivateContext,
        value: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = value;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x1b3b9e18),
            serialized_args
        )
    }

    pub fn assert_public_global_vars(
        self,
        context: &mut PrivateContext,
        chain_id: Field,
        version: Field,
        block_number: Field,
        timestamp: u64,
        coinbase: CoinbaseAssertPublicGlobalVarsStruct,
        fee_recipient: FeeRecipientAssertPublicGlobalVarsStruct
    ) {
        let mut serialized_args = [0; 6];
        serialized_args[0] = chain_id;
        serialized_args[1] = version;
        serialized_args[2] = block_number;
        serialized_args[3] = timestamp as Field;
        serialized_args[4] = coinbase.inner;
        serialized_args[5] = fee_recipient.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x9e88565a),
            serialized_args
        )
    }

    pub fn call_destroy_note(
        self,
        context: &mut PrivateContext,
        storage_slot: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = storage_slot;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xf52a62f7),
            serialized_args
        )
    }

    pub fn consume_mint_private_message(
        self,
        context: &mut PrivateContext,
        secret_hash_for_redeeming_minted_notes: Field,
        amount: Field,
        secret_for_L1_to_L2_message_consumption: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = secret_hash_for_redeeming_minted_notes;
        serialized_args[1] = amount;
        serialized_args[2] = secret_for_L1_to_L2_message_consumption;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xa0fdbaa9),
            serialized_args
        )
    }

    pub fn get_this_address(self, context: &mut PrivateContext) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 0];

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x95a7b2ae),
            serialized_args
        )
    }

    pub fn get_portal_contract_address(
        self,
        context: &mut PrivateContext,
        aztec_address: AztecAddressGetPortalContractAddressStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = aztec_address.inner;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x30e5344b),
            serialized_args
        )
    }

    pub fn emit_array_as_unencrypted_log(
        self,
        context: &mut PrivateContext,
        fields: [Field; 5]
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 5];
        serialized_args[0] = fields[0];
        serialized_args[1] = fields[1];
        serialized_args[2] = fields[2];
        serialized_args[3] = fields[3];
        serialized_args[4] = fields[4];

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xe25cbdd3),
            serialized_args
        )
    }

    pub fn get_public_key(
        self,
        context: &mut PrivateContext,
        address: AddressGetPublicKeyStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = address.inner;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x501e4f48),
            serialized_args
        )
    }

    pub fn test_code_gen(
        self,
        context: &mut PrivateContext,
        a_field: Field,
        a_bool: bool,
        a_number: u32,
        an_array: [Field; 2],
        a_struct: AStructTestCodeGenStruct,
        a_deep_struct: ADeepStructTestCodeGenStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 17];
        serialized_args[0] = a_field;
        serialized_args[1] = a_bool as Field;
        serialized_args[2] = a_number as Field;
        serialized_args[3] = an_array[0];
        serialized_args[4] = an_array[1];
        serialized_args[5] = a_struct.amount;
        serialized_args[6] = a_struct.secret_hash;
        serialized_args[7] = a_deep_struct.a_field;
        serialized_args[8] = a_deep_struct.a_bool as Field;
        serialized_args[9] = a_deep_struct.a_note.amount;
        serialized_args[10] = a_deep_struct.a_note.secret_hash;
        serialized_args[11] = a_deep_struct.many_notes[0].amount;
        serialized_args[12] = a_deep_struct.many_notes[0].secret_hash;
        serialized_args[13] = a_deep_struct.many_notes[1].amount;
        serialized_args[14] = a_deep_struct.many_notes[1].secret_hash;
        serialized_args[15] = a_deep_struct.many_notes[2].amount;
        serialized_args[16] = a_deep_struct.many_notes[2].secret_hash;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x0f054f9b),
            serialized_args
        )
    }

    pub fn assert_private_global_vars(
        self,
        context: &mut PrivateContext,
        chain_id: Field,
        version: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = chain_id;
        serialized_args[1] = version;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x7a8e9b66),
            serialized_args
        )
    }

    pub fn emit_nullifier(
        self,
        context: &mut PrivateContext,
        nullifier: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = nullifier;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x82a8b183),
            serialized_args
        )
    }

    pub fn call_get_notes_many(
        self,
        context: &mut PrivateContext,
        storage_slot: Field,
        active_or_nullified: bool
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = storage_slot;
        serialized_args[1] = active_or_nullified as Field;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xcfcadbce),
            serialized_args
        )
    }

    pub fn assert_header_private(
        self,
        context: &mut PrivateContext,
        header_hash: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = header_hash;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x4e45eb9e),
            serialized_args
        )
    }

    pub fn create_l2_to_l1_message_public(
        self,
        context: &mut PrivateContext,
        amount: Field,
        secret_hash: Field
    ) {
        let mut serialized_args = [0; 2];
        serialized_args[0] = amount;
        serialized_args[1] = secret_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x9749ca06),
            serialized_args
        )
    }

    pub fn create_l2_to_l1_message_arbitrary_recipient_public(
        self,
        context: &mut PrivateContext,
        content: Field,
        recipient: RecipientCreateL2ToL1MessageArbitraryRecipientPublicStruct
    ) {
        let mut serialized_args = [0; 2];
        serialized_args[0] = content;
        serialized_args[1] = recipient.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x2fb25188),
            serialized_args
        )
    }

    pub fn is_time_equal(self, context: &mut PrivateContext, time: u64) {
        let mut serialized_args = [0; 1];
        serialized_args[0] = time as Field;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xb5bb17fa),
            serialized_args
        )
    }

    pub fn emit_msg_sender(self, context: &mut PrivateContext) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 0];

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x11fb5d45),
            serialized_args
        )
    }

    pub fn consume_mint_public_message(
        self,
        context: &mut PrivateContext,
        to: ToConsumeMintPublicMessageStruct,
        amount: Field,
        secret: Field
    ) {
        let mut serialized_args = [0; 3];
        serialized_args[0] = to.inner;
        serialized_args[1] = amount;
        serialized_args[2] = secret;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xa0f84219),
            serialized_args
        )
    }

    pub fn request_max_block_number(
        self,
        context: &mut PrivateContext,
        max_block_number: u32,
        enqueue_public_call: bool
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = max_block_number as Field;
        serialized_args[1] = enqueue_public_call as Field;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x6db24b2e),
            serialized_args
        )
    }

    pub fn consume_message_from_arbitrary_sender_public(
        self,
        context: &mut PrivateContext,
        content: Field,
        secret: Field,
        sender: SenderConsumeMessageFromArbitrarySenderPublicStruct
    ) {
        let mut serialized_args = [0; 3];
        serialized_args[0] = content;
        serialized_args[1] = secret;
        serialized_args[2] = sender.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x42ca6d60),
            serialized_args
        )
    }

    pub fn emit_unencrypted(self, context: &mut PrivateContext, value: Field) {
        let mut serialized_args = [0; 1];
        serialized_args[0] = value;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x817a64cb),
            serialized_args
        )
    }

    pub fn consume_message_from_arbitrary_sender_private(
        self,
        context: &mut PrivateContext,
        content: Field,
        secret: Field,
        sender: SenderConsumeMessageFromArbitrarySenderPrivateStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = content;
        serialized_args[1] = secret;
        serialized_args[2] = sender.inner;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x2847cb26),
            serialized_args
        )
    }

    pub fn create_nullifier_public(self, context: &mut PrivateContext, amount: Field, secret_hash: Field) {
        let mut serialized_args = [0; 2];
        serialized_args[0] = amount;
        serialized_args[1] = secret_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xdf02db8d),
            serialized_args
        )
    }

    pub fn create_l2_to_l1_message_arbitrary_recipient_private(
        self,
        context: &mut PrivateContext,
        content: Field,
        recipient: RecipientCreateL2ToL1MessageArbitraryRecipientPrivateStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = content;
        serialized_args[1] = recipient.inner;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xaccc5d5d),
            serialized_args
        )
    }

    pub fn deploy_contract(
        self,
        context: &mut PrivateContext,
        target: TargetDeployContractStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = target.inner;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x5acec588),
            serialized_args
        )
    }

    pub fn call_get_notes(
        self,
        context: &mut PrivateContext,
        storage_slot: Field,
        active_or_nullified: bool
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = storage_slot;
        serialized_args[1] = active_or_nullified as Field;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x11eeb3ea),
            serialized_args
        )
    }

    pub fn consume_note_from_secret(
        self,
        context: &mut PrivateContext,
        secret: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = secret;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x754932c8),
            serialized_args
        )
    }

    pub fn assert_header_public(self, context: &mut PrivateContext, header_hash: Field) {
        let mut serialized_args = [0; 1];
        serialized_args[0] = header_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x86e38c61),
            serialized_args
        )
    }
}

// Interface for calling Test functions from a public context
struct TestPublicContextInterface {
  address: AztecAddress,
}

impl TestPublicContextInterface {
    pub fn at(address: AztecAddress) -> Self {
        Self { address }
    }

    pub fn assert_public_global_vars(
        self,
        context: &mut PublicContext,
        chain_id: Field,
        version: Field,
        block_number: Field,
        timestamp: u64,
        coinbase: CoinbaseAssertPublicGlobalVarsStruct,
        fee_recipient: FeeRecipientAssertPublicGlobalVarsStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 6];
        serialized_args[0] = chain_id;
        serialized_args[1] = version;
        serialized_args[2] = block_number;
        serialized_args[3] = timestamp as Field;
        serialized_args[4] = coinbase.inner;
        serialized_args[5] = fee_recipient.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x9e88565a),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn create_l2_to_l1_message_public(
        self,
        context: &mut PublicContext,
        amount: Field,
        secret_hash: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = amount;
        serialized_args[1] = secret_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x9749ca06),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn create_l2_to_l1_message_arbitrary_recipient_public(
        self,
        context: &mut PublicContext,
        content: Field,
        recipient: RecipientCreateL2ToL1MessageArbitraryRecipientPublicStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = content;
        serialized_args[1] = recipient.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x2fb25188),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn is_time_equal(self, context: &mut PublicContext, time: u64) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = time as Field;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xb5bb17fa),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn consume_mint_public_message(
        self,
        context: &mut PublicContext,
        to: ToConsumeMintPublicMessageStruct,
        amount: Field,
        secret: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = to.inner;
        serialized_args[1] = amount;
        serialized_args[2] = secret;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xa0f84219),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn consume_message_from_arbitrary_sender_public(
        self,
        context: &mut PublicContext,
        content: Field,
        secret: Field,
        sender: SenderConsumeMessageFromArbitrarySenderPublicStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = content;
        serialized_args[1] = secret;
        serialized_args[2] = sender.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x42ca6d60),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn emit_unencrypted(
        self,
        context: &mut PublicContext,
        value: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = value;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x817a64cb),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn create_nullifier_public(
        self,
        context: &mut PublicContext,
        amount: Field,
        secret_hash: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = amount;
        serialized_args[1] = secret_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xdf02db8d),
            serialized_args,
            GasOpts::empty()
        )
    }

    pub fn assert_header_public(
        self,
        context: &mut PublicContext,
        header_hash: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = header_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x86e38c61),
            serialized_args,
            GasOpts::empty()
        )
    }
}

