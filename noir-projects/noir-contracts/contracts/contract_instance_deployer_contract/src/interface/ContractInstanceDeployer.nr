/* Autogenerated file, do not edit! */

use dep::std;
use dep::aztec::context::{PrivateContext, PublicContext};
use dep::aztec::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector, constants::RETURN_VALUES_LENGTH};

struct ContractClassIdDeployStruct {
  inner: Field,
}

struct PortalContractAddressDeployStruct {
  inner: Field,
}

struct PublicKeysHashDeployStruct {
  inner: Field,
}

// Interface for calling ContractInstanceDeployer functions from a private context
struct ContractInstanceDeployerPrivateContextInterface {
  address: AztecAddress,
}

impl ContractInstanceDeployerPrivateContextInterface {
    pub fn at(address: AztecAddress) -> Self {
        Self { address }
    }

    pub fn deploy(
        self,
        context: &mut PrivateContext,
        salt: Field,
        contract_class_id: ContractClassIdDeployStruct,
        initialization_hash: Field,
        portal_contract_address: PortalContractAddressDeployStruct,
        public_keys_hash: PublicKeysHashDeployStruct,
        universal_deploy: bool
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 6];
        serialized_args[0] = salt;
        serialized_args[1] = contract_class_id.inner;
        serialized_args[2] = initialization_hash;
        serialized_args[3] = portal_contract_address.inner;
        serialized_args[4] = public_keys_hash.inner;
        serialized_args[5] = universal_deploy as Field;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x883355ab),
            serialized_args
        )
    }
}

// Interface for calling ContractInstanceDeployer functions from a public context
struct ContractInstanceDeployerPublicContextInterface {
  address: AztecAddress,
}

impl ContractInstanceDeployerPublicContextInterface {
    pub fn at(address: AztecAddress) -> Self {
        Self { address }
    }
}

