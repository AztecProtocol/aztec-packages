use crate::context::PrivateContext;
use crate::note::note_header::NoteHeader;
use dep::protocol_types::point::Point;

// docs:start:note_interface
trait NoteInterface<let N: u32, let M: u32> {
    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field);

    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field);
    
    // Autogenerated by the #[aztec(note)] macro unless it is overridden by a custom implementation
    fn serialize_content(self) -> [Field; N];

    // Autogenerated by the #[aztec(note)] macro unless it is overridden by a custom implementation
    fn deserialize_content(fields: [Field; N]) -> Self;

    // Autogenerated by the #[aztec(note)] macro unless it is overridden by a custom implementation
    fn compute_note_hiding_point(self) -> Point;

    // Autogenerated by the #[aztec(note)] macro unless it is overridden by a custom implementation
    fn get_header(self) -> NoteHeader;

    // Autogenerated by the #[aztec(note)] macro unless it is overridden by a custom implementation
    fn set_header(&mut self, header: NoteHeader) -> ();

    // Autogenerated by the #[aztec(note)] macro unless it is overridden by a custom implementation
    fn get_note_type_id() -> Field;

    // Autogenerated by the #[aztec(note)] macro unless it is overridden by a custom implementation
    fn to_be_bytes(self, storage_slot: Field) -> [u8; M];
}
// docs:end:note_interface

