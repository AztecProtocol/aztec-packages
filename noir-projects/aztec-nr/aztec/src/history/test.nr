use crate::note::{
    lifecycle::{create_note as lifecycle_create_note, destroy_note},
    note_metadata::NoteMetadata,
};
use crate::note::retrieved_note::RetrievedNote;
use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};

pub(crate) global NOTE_STORAGE_SLOT: Field = 420;
pub(crate) global NOTE_CREATED_AT: u32 = 2;
pub(crate) global NOTE_NULLIFIED_AT: u32 = 3;

pub(crate) unconstrained fn create_note() -> (&mut TestEnvironment, RetrievedNote<MockNote>) {
    let mut env = TestEnvironment::new();

    // We create a note in block NOTE_CREATED_AT
    let retrieved_note = env.private_context(|context| {
        let contract_address = context.this_address();

        // The test environment doesn't yet supporting delivering settled notes, so we hardcode the nonce we know the
        // note will have if emitted as the only note in block NOTE_CREATED_AT.
        let retrieved_note = MockNote::new(69)
            .contract_address(contract_address)
            .note_metadata(NoteMetadata::from_raw_data(
                false,
                0x256c00025f88d92eb518176c67c9d619b876e7261ef3ef5879fac1cf3b5acab2,
            ))
            .build_retrieved_note();

        let _ = lifecycle_create_note(context, NOTE_STORAGE_SLOT, retrieved_note.note);

        retrieved_note
    });

    // Verify the note was inserted in the correct block
    assert_eq(env.last_block_number(), NOTE_CREATED_AT);

    (&mut env, retrieved_note)
}

pub(crate) unconstrained fn create_note_and_nullify_it() -> (&mut TestEnvironment, RetrievedNote<MockNote>) {
    let (env, retrieved_note) = create_note();

    env.private_context(|context| { destroy_note(context, retrieved_note, NOTE_STORAGE_SLOT); });

    // Verify the note was nullified in the correct block
    assert_eq(env.last_block_number(), NOTE_NULLIFIED_AT);

    (env, retrieved_note)
}
