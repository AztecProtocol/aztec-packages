// use crate::encrypted_logs::log_assembly_strategies::default_aes128::note{
//     compute_log,
//     MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,
// };
// use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};
// use protocol_types::public_keys::AddressPoint;
// use std::test::OracleMock;

// #[test]
// unconstrained fn test_encrypted_log_matches_typescript() {
//     // All the values in this test were copied over from `encrypted_log_payload.test.ts`
//     let contract_address = AztecAddress::from_field(
//         0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,
//     );

//     let plaintext = [
//         0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,
//         2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,
//         247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,
//         183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,
//         12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,
//         101, 153, 0, 0, 16, 39,
//     ];

//     let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;

//     let _ = OracleMock::mock("getRandomField").returns(randomness).times(
//         (MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES as u64 + 1 + 30) / 31,
//     );

//     let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;
//     let _ = OracleMock::mock("getRandomField").returns(eph_sk).times(1);

//     let recipient = AztecAddress::from_field(
//         0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,
//     );

//     let sender = AztecAddress::from_field(
//         0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,
//     );

//     let _ = OracleMock::mock("getIndexedTaggingSecretAsSender").returns([69420, 1337]);

//     let _ = OracleMock::mock("incrementAppTaggingSecretIndexAsSender").returns(());

//     let payload = compute_log(contract_address, recipient, sender, plaintext);

//     // The following value was generated by `encrypted_log_payload.test.ts`
//     // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.
//     let private_log_payload_from_typescript = [
//         0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,
//         0x008d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701f,
//         0x00a70577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,
//         0x003de818923f85187871d99bdf95d695eff0a900000000000000000000000000,
//         0x000000a600a61f7d59eeaf52eb51bc0592ff981d9ba3ea8e6ea8ba9dc0cec8c7,
//         0x000b81e84556a77ce6c3ca47a527f99ffe7b2524bb885a23020b7295748ad19c,
//         0x001083618ad96298b76ee07eb1a56d19cc798710e9f5de96501bd59b3781c9c0,
//         0x002a6c95c5912f8936b1500d362afbf0922c85b1ada18db8b95162a6e9d06765,
//         0x005cdf669eb387f8e0492a95fdcdb39429d5340b4bebc250ba9bf62c2f49f549,
//         0x00f37beed75a668aa51967e0e57547e5a655157bcf381e22f30e25881548ec96,
//         0x0006a151b5fbfb2d14ee4b34bf4c1dbd71c7be15ad4c63474bb6f89970aeb3d9,
//         0x00489c8edbdff80a1a3a5c28370e534abc870a85ea4318326ea19222fb10df35,
//         0x008c765edada497db4284ae30507a2e03e983d23cfa0bd831577e857bbef9cf7,
//         0x0090c97cb5699cc8783a1b4276d929be2882e5b9b72829a4f8404f7e3c853d11,
//         0x00d6d5a000b80134891e95f81007ad35d3945eaeecbe137fff85d01d7eaf8f19,
//         0x00a15eb965c6a4bc97aa87fd3463c31c9d4e0d722a8ba870bcc50c9c7a8b48ad,
//         0x0063c861bdbe490d44c57382decbae663927909652f87ac18dcfd5b30649cce5,
//         0x00820f14caa725efe1fa3485ceac88499eadf0565c5b20998c05931bbf478e68,
//     ];

//     assert_eq(payload, private_log_payload_from_typescript);
// }

// #[test]
// fn test_incoming_body_ciphertext_matches_typescript() {
//     // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`
//     let eph_sk = Scalar {
//         lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,
//         hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,
//     };
//     let address_point = AddressPoint {
//         inner: Point {
//             x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,
//             y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,
//             is_infinite: false,
//         },
//     };
//     let plaintext = [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
//     ];

//     // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `address_point` and encrypts
//     // the note plaintext using AES-128.
//     let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, address_point);

//     // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.
//     // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.
//     let note_body_ciphertext_from_typescript = [
//         226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,
//         190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,
//         131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,
//         46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,
//         37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,
//         115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,
//         245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,
//         25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,
//         212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,
//         23, 206, 229, 108,
//     ];

//     assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());

//     for i in 0..note_body_ciphertext_from_typescript.len() {
//         assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);
//     }
// }

